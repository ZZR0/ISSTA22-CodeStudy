function [cost_total,grad_total] = costfunc(theta, ...
    ODIR, ...
    hparams, ...
    We_orig, ... % We
    corpus, ...
    labels, ...
    freq_orig, ...
    f, ...
    f_prime)

global logger

%logger.info('costfunc','saving current clone detector');
%save([strcat(ODIR,'/detector.',datestr(clock),'.mat')],'theta');

[~,~,~,~,~,~,~,Wcat,bcat,We] = model(1, ... % Wcat_flag
    theta, ...
    hparams.hidden_size, ....
    hparams.category_size, ...
    hparams.vocabulary_size);

szWcat = length(Wcat(:));
szbcat = length(bcat(:));
szWe = length(We(:));

theta1 = theta;
theta1(end-szWe+1:end) = We;
theta1(end-szWe-szbcat-szWcat+1:end-szWe) = [];

theta2 = theta;
theta2(end-szWe+1:end) = We_orig(:) + We(:);

lambda2 = hparams.lambda;
hparams.lambda(3) = lambda2(4); % ???
hparams.lambda(4) = lambda2(3); % ???

[costRAE,gradRAE,allKids] = compute([], ... % allKids
    theta1, ...
    0, ... % updateWcat
    hparams.alpha_cat, ...
    hparams.category_size, ...
    hparams.beta, ...
    hparams.vocabulary_size, ...
    hparams.hidden_size, ...
    hparams.alpha_cat*hparams.lambda, ...
    We_orig, ...
    corpus, ...
    labels, ...
    freq_orig, ...
    f, ...
    f_prime);

WegradRAE = gradRAE(end-szWe+1:end);
gradRAE(end-szWe+1:end) = 0;
gradRAE = [gradRAE; zeros(szbcat+szWcat,1)];
gradRAE(end-szWe+1:end) = WegradRAE;

cost_total = costRAE;
grad_total = gradRAE;
