private int currentDepth ( ) { try { Integer oneBased = ( ( Integer ) DEPTH_FIELD . get ( this ) ) ; return oneBased - _NUM ; } catch ( IllegalAccessException e ) { throw new AssertionError ( e ) ; } }
protected boolean [ ] datasetIntegrity ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , boolean predictorMissing , boolean classMissing ) { print ( _STR ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( _STR ) ; int numTrain = getNumInstances ( ) , numClasses = _NUM , missingLevel = _NUM ; boolean [ ] result = new boolean [ _NUM ] ; Instances train = null ; Kernel kernel = null ; try { train = makeTestDataset ( _NUM , numTrain , nominalPredictor ? getNumNominal ( ) : _NUM , numericPredictor ? getNumNumeric ( ) : _NUM , stringPredictor ? getNumString ( ) : _NUM , datePredictor ? getNumDate ( ) : _NUM , relationalPredictor ? getNumRelational ( ) : _NUM , numClasses , classType , multiInstance ) ; if ( missingLevel > _NUM ) { addMissing ( train , missingLevel , predictorMissing , classMissing ) ; } kernel = Kernel . makeCopies ( getKernel ( ) , _NUM ) [ _NUM ] ; } catch ( Exception ex ) { throw new Error ( _STR + ex . getMessage ( ) ) ; } try { Instances trainCopy = new Instances ( train ) ; kernel . buildKernel ( trainCopy ) ; compareDatasets ( train , trainCopy ) ; println ( _STR ) ; result [ _NUM ] = _BOOL ; } catch ( Exception ex ) { println ( _STR ) ; result [ _NUM ] = _BOOL ; if ( m_Debug ) { println ( _STR ) ; print ( _STR ) ; println ( _STR + ex . getMessage ( ) + _STR ) ; println ( _STR ) ; println ( _STR + train . toString ( ) + _STR ) ; } } return result ; }
public static int unionSize ( long [ ] x , long [ ] y ) { final int lx = x . length , ly = y . length ; final int min = ( lx < ly ) ? lx : ly ; int i = _NUM , res = _NUM ; for ( ; i < min ; i ++ ) { res += Long . bitCount ( x [ i ] | y [ i ] ) ; } for ( ; i < lx ; i ++ ) { res += Long . bitCount ( x [ i ] ) ; } for ( ; i < ly ; i ++ ) { res += Long . bitCount ( y [ i ] ) ; } return res ; }
public void testReverseOrder4 ( ) throws Exception { UUID id = UUID . randomUUID ( ) ; GridCacheAdapter < String , String > cache = grid . internalCache ( ) ; GridCacheContext < String , String > ctx = cache . context ( ) ; GridCacheTestEntryEx entry1 = new GridCacheTestEntryEx ( ctx , _STR ) ; GridCacheTestEntryEx entry2 = new GridCacheTestEntryEx ( ctx , _STR ) ; GridCacheVersion ver1 = version ( _NUM ) ; GridCacheVersion ver2 = version ( _NUM ) ; GridCacheVersion ver3 = version ( _NUM ) ; GridCacheMvccCandidate v3k1 = entry1 . addLocal ( _NUM , ver3 , _NUM , _BOOL , _BOOL ) ; GridCacheMvccCandidate v3k2 = entry2 . addLocal ( _NUM , ver3 , _NUM , _BOOL , _BOOL ) ; linkCandidates ( ctx , v3k1 , v3k2 ) ; entry1 . readyLocal ( ver3 ) ; checkLocal ( v3k1 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v3k2 , ver3 , _BOOL , _BOOL , _BOOL ) ; GridCacheMvccCandidate v1k1 = entry1 . addLocal ( _NUM , ver1 , _NUM , _BOOL , _BOOL ) ; GridCacheMvccCandidate v1k2 = entry2 . addLocal ( _NUM , ver1 , _NUM , _BOOL , _BOOL ) ; linkCandidates ( ctx , v1k1 , v1k2 ) ; entry1 . readyLocal ( ver1 ) ; entry2 . readyLocal ( ver1 ) ; checkLocal ( v3k1 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v3k2 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v1k1 , ver1 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v1k2 , ver1 , _BOOL , _BOOL , _BOOL ) ; GridCacheMvccCandidate v2k2 = entry2 . addRemote ( id , _NUM , ver2 , _NUM , _BOOL , _BOOL ) ; checkRemote ( v2k2 , ver2 , _BOOL , _BOOL ) ; entry2 . readyLocal ( v3k2 ) ; checkLocal ( v3k1 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v3k2 , ver3 , _BOOL , _BOOL , _BOOL ) ; }
@ Override public void closingOK ( ) { List < AddUserFields . AttributeSpec > specs = new ArrayList < AddUserFields . AttributeSpec > ( ) ; for ( int i = _NUM ; i < m_listModel . size ( ) ; i ++ ) { AddUserFields . AttributeSpec a = ( AddUserFields . AttributeSpec ) m_listModel . elementAt ( i ) ; specs . add ( a ) ; } if ( m_modifyL != null ) { m_modifyL . setModifiedStatus ( AddUserFieldsCustomizer . this , _BOOL ) ; } m_filter . setAttributeSpecs ( specs ) ; }
public String toString ( ) { StringBuffer text = new StringBuffer ( ) ; if ( ( m_classAttribute == null ) ) { return _STR ; } try { text . append ( _STR ) ; text . append ( _STR + m_kernel . toString ( ) + _STR ) ; for ( int i = _NUM ; i < m_classAttribute . numValues ( ) ; i ++ ) { for ( int j = i + _NUM ; j < m_classAttribute . numValues ( ) ; j ++ ) { text . append ( _STR + m_classAttribute . value ( i ) + _STR + m_classAttribute . value ( j ) + _STR ) ; text . append ( m_classifiers [ i ] [ j ] ) ; if ( m_fitLogisticModels ) { text . append ( _STR ) ; if ( m_classifiers [ i ] [ j ] . m_logistic == null ) { text . append ( _STR ) ; } else { text . append ( m_classifiers [ i ] [ j ] . m_logistic ) ; } } text . append ( _STR ) ; } } } catch ( Exception e ) { return _STR ; } return text . toString ( ) ; }
public final Sector union ( Sector that ) { if ( that == null ) return this ; Angle minLat = this . minLatitude ; Angle maxLat = this . maxLatitude ; Angle minLon = this . minLongitude ; Angle maxLon = this . maxLongitude ; if ( that . minLatitude . degrees < this . minLatitude . degrees ) minLat = that . minLatitude ; if ( that . maxLatitude . degrees > this . maxLatitude . degrees ) maxLat = that . maxLatitude ; if ( that . minLongitude . degrees < this . minLongitude . degrees ) minLon = that . minLongitude ; if ( that . maxLongitude . degrees > this . maxLongitude . degrees ) maxLon = that . maxLongitude ; return new Sector ( minLat , maxLat , minLon , maxLon ) ; }
private static boolean isDoubleEqual ( double value , double valueToCompare ) { return ( Math . abs ( value - valueToCompare ) < _NUM ) ; }
public void testIntValuePos ( ) { String a = _STR ; BigDecimal aNumber = new BigDecimal ( a ) ; int result = - _NUM ; assertTrue ( _STR , aNumber . intValue ( ) == result ) ; }
private void walk ( File directory , int depth , Collection < T > results ) throws IOException { checkIfCancelled ( directory , depth , results ) ; if ( handleDirectory ( directory , depth , results ) ) { handleDirectoryStart ( directory , depth , results ) ; int childDepth = depth + _NUM ; if ( depthLimit < _NUM || childDepth <= depthLimit ) { checkIfCancelled ( directory , depth , results ) ; File [ ] childFiles = filter == null ? directory . listFiles ( ) : directory . listFiles ( filter ) ; childFiles = filterDirectoryContents ( directory , depth , childFiles ) ; if ( childFiles == null ) { handleRestricted ( directory , childDepth , results ) ; } else { for ( File childFile : childFiles ) { if ( childFile . isDirectory ( ) ) { walk ( childFile , childDepth , results ) ; } else { checkIfCancelled ( childFile , childDepth , results ) ; handleFile ( childFile , childDepth , results ) ; checkIfCancelled ( childFile , childDepth , results ) ; } } } } handleDirectoryEnd ( directory , depth , results ) ; } checkIfCancelled ( directory , depth , results ) ; }
public static Object [ ] ordinalArray ( TupleSet tuples , String field ) { return ordinalArray ( tuples , field , DefaultLiteralComparator . getInstance ( ) ) ; }
public void testDivideExceptionInvalidRM ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; try { aNumber . divide ( bNumber , _NUM ) ; fail ( _STR ) ; } catch ( IllegalArgumentException e ) { assertEquals ( _STR , _STR , e . getMessage ( ) ) ; } }
@ Override public void datasetChanged ( DatasetChangeEvent event ) { super . datasetChanged ( event ) ; if ( this . subplots == null ) { return ; } XYDataset dataset = null ; if ( event . getDataset ( ) instanceof XYDataset ) { dataset = ( XYDataset ) event . getDataset ( ) ; } for ( XYPlot subplot : this . subplots ) { if ( subplot . indexOf ( dataset ) >= _NUM ) { subplot . configureRangeAxes ( ) ; } } }
public boolean onScheduleAsLibrary ( Config config , Config runtime , IScheduler scheduler , PackingPlan packing ) { boolean ret = _BOOL ; try { scheduler . initialize ( config , runtime ) ; ret = scheduler . onSchedule ( packing ) ; if ( ret ) { ret = SchedulerUtils . setLibSchedulerLocation ( runtime , scheduler , _BOOL ) ; } else { LOG . severe ( _STR ) ; } } finally { scheduler . close ( ) ; } return ret ; }
public static boolean isStringType ( Type t ) { return t . equals ( RefType . v ( _STR ) ) ; }
public Entry updateOrCreateSource ( User user , String id , String url , String title , Long modTime , Long createTime , boolean isAdmin , Errors errors ) { if ( user == null ) { Errors . add ( errors , errorMessages . errorUserIsNull ( ) ) ; return null ; } if ( url == null ) { Errors . add ( errors , errorMessages . errorUrlIsNull ( ) ) ; return null ; } Entry source = getEntryByUserIdAndUrl ( user . getId ( ) , url ) ; if ( source == null ) { if ( url . isEmpty ( ) ) { Errors . add ( errors , errorMessages . errorUrlIsEmpty ( ) ) ; return null ; } if ( title == null ) { Errors . add ( errors , errorMessages . errorTitleIsNull ( ) ) ; return null ; } if ( title . isEmpty ( ) ) { Errors . add ( errors , errorMessages . errorTitleIsEmpty ( ) ) ; return null ; } if ( modTime == null ) { Errors . add ( errors , errorMessages . errorModTimeIsNull ( ) ) ; return null ; } if ( createTime == null ) { Errors . add ( errors , errorMessages . errorCreateTimeIsNull ( ) ) ; return null ; } if ( id != null && ! idGenerator . isIdWellFormed ( id ) ) { Errors . add ( errors , errorMessages . errorIdIsInvalid ( ) ) ; return null ; } if ( createTime . longValue ( ) > modTime . longValue ( ) ) { modTime = createTime ; } if ( url != null ) { url = cleanUpText ( url ) ; } if ( title != null ) { title = cleanUpText ( title ) ; } source = new Entry ( ) ; source . setDb ( db ) ; if ( id == null ) { id = idGenerator . getAnotherId ( ) ; } source . setId ( id ) ; source . setSourceUrl ( url ) ; source . setSourceTitle ( title ) ; source . setCreateTime ( createTime ) ; source . setType ( Constants . source ) ; source . setUserId ( user . getId ( ) ) ; db . persistEntry ( source ) ; } else if ( ! canUserModifyEntry ( user , source , isAdmin ) ) { Errors . add ( errors , errorMessages . errorUserIsNotEntitledToModifyTheSource ( ) ) ; return null ; } source . setModTime ( modTime ) ; return source ; }
private void validateSqlStatement ( String sql , int jdbcStatementIndex ) { Assert . isTrue ( StringUtils . isNotBlank ( sql ) , _STR + jdbcStatementIndex + _STR ) ; }
public static Long [ ] valuesOf ( long [ ] array ) { Long [ ] dest = new Long [ array . length ] ; for ( int i = _NUM ; i < array . length ; i ++ ) { dest [ i ] = Long . valueOf ( array [ i ] ) ; } return dest ; }
@ Override public boolean isTraceEnabled ( ) { return logger . isLoggable ( Level . FINEST ) ; }
private static void useMissile ( Player player ) { StackableItem projectilesItem = null ; if ( player . getRangeWeapon ( ) != null ) { projectilesItem = player . getAmmunition ( ) ; } if ( projectilesItem == null ) { projectilesItem = player . getMissileIfNotHoldingOtherWeapon ( ) ; } if ( projectilesItem != null ) { projectilesItem . removeOne ( ) ; } }
public TcpMatcher ( final NetworkConfig config ) { super ( config ) ; }
private int determineMaxLevelRec ( int level , Node v ) { int newLevel = level ; for ( Edge e = v . getFirstOutEdge ( ) ; e != null ; e = v . getNextOutEdge ( e ) ) { newLevel = Math . max ( newLevel , determineMaxLevelRec ( level , e . getTarget ( ) ) + _NUM ) ; } return newLevel ; }
protected void requestPassCodeConfirmation ( ) { clearBoxes ( ) ; mPassCodeHdr . setText ( R . string . pass_code_reenter_your_pass_code ) ; mPassCodeHdrExplanation . setVisibility ( View . INVISIBLE ) ; mConfirmingPassCode = _BOOL ; }
private void addWorkerFailed ( Worker w ) { final ReentrantLock mainLock = this . mainLock ; mainLock . lock ( ) ; try { if ( w != null ) workers . remove ( w ) ; decrementWorkerCount ( ) ; tryTerminate ( ) ; } finally { mainLock . unlock ( ) ; } }
public void testInsert4 ( ) throws SQLException { DatabaseCreator . fillSimpleTable1 ( conn ) ; statement . execute ( _STR + DatabaseCreator . SIMPLE_TABLE2 + _STR + DatabaseCreator . SIMPLE_TABLE1 ) ; ResultSet r = statement . executeQuery ( _STR + DatabaseCreator . SIMPLE_TABLE2 + _STR + DatabaseCreator . SIMPLE_TABLE1 + _STR ) ; r . next ( ) ; assertEquals ( _STR , _NUM , r . getInt ( _NUM ) ) ; r . close ( ) ; }
private synchronized void putMapEntry ( String localId , MapEntry entry ) { if ( ! isLocalId ( localId ) ) { throw new IllegalStateException ( _STR + localId + _STR ) ; } JSONObject json = new JSONObject ( ) ; try { json . put ( _STR , entry . retainCount ) ; if ( entry . objectId != null ) { json . put ( _STR , entry . objectId ) ; } } catch ( JSONException je ) { throw new IllegalStateException ( _STR , je ) ; } File file = new File ( diskPath , localId ) ; if ( ! diskPath . exists ( ) ) { diskPath . mkdirs ( ) ; } try { ParseFileUtils . writeJSONObjectToFile ( file , json ) ; } catch ( IOException e ) { } }
public void endElement ( String namespaceURI , String localName , String name ) throws org . xml . sax . SAXException { if ( m_inEntityRef ) return ; m_prefixMap . popNamespaces ( m_elemContext . m_currentElemDepth , null ) ; try { final java . io . Writer writer = m_writer ; if ( m_elemContext . m_startTagOpen ) { if ( m_tracer != null ) super . fireStartElem ( m_elemContext . m_elementName ) ; int nAttrs = m_attributes . getLength ( ) ; if ( nAttrs > _NUM ) { processAttributes ( m_writer , nAttrs ) ; m_attributes . clear ( ) ; } if ( m_spaceBeforeClose ) writer . write ( _STR ) ; else writer . write ( _STR ) ; } else { if ( m_cdataTagOpen ) closeCDATA ( ) ; if ( shouldIndent ( ) ) indent ( m_elemContext . m_currentElemDepth - _NUM ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; writer . write ( name ) ; writer . write ( _STR ) ; } } catch ( IOException e ) { throw new SAXException ( e ) ; } if ( ! m_elemContext . m_startTagOpen && m_doIndent ) { m_ispreserve = m_preserves . isEmpty ( ) ? _BOOL : m_preserves . pop ( ) ; } m_isprevtext = _BOOL ; if ( m_tracer != null ) super . fireEndElem ( name ) ; m_elemContext = m_elemContext . m_prev ; }
public static void f ( String msg , Object ... args ) { if ( ! allowWtf ) return ; StackTraceElement caller = getCallerStackTraceElement ( ) ; String tag = generateTag ( caller ) ; if ( sLevel > LEVEL_FATAL ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . wtf ( tag , msg ) ; }
public void deleteLeaves ( String name ) { for ( int i = _NUM ; i < _leaves . size ( ) ; i ++ ) { CatalogTreeLeaf leaf = _leaves . get ( i ) ; if ( name . equals ( leaf . getName ( ) ) ) { _leaves . remove ( i ) ; } } }
public String toString ( ) { final StringBuffer s = new StringBuffer ( ) ; final int size = size ( ) ; for ( int i = _NUM ; i < size ; i ++ ) s . append ( getInt ( i ) ) ; return s . toString ( ) ; }
protected boolean validate ( final char [ ] component , final int soffset , int eoffset , final BitSet generous ) { if ( eoffset == - _NUM ) { eoffset = component . length - _NUM ; } for ( int i = soffset ; i <= eoffset ; i ++ ) { if ( ! generous . get ( component [ i ] ) ) { return _BOOL ; } } return _BOOL ; }
private void buildPieces ( ) { pieces = new Piece [ pathArray . size ( ) ] ; Paint paint = new Paint ( ) ; Matrix matrix = new Matrix ( ) ; Canvas canvas = new Canvas ( ) ; for ( int i = _NUM ; i < pieces . length ; i ++ ) { int shadow = Utils . nextInt ( Utils . dp2px ( _NUM ) , Utils . dp2px ( _NUM ) ) ; Path path = pathArray . get ( i ) ; RectF r = new RectF ( ) ; path . computeBounds ( r , _BOOL ) ; Bitmap pBitmap = Utils . createBitmapSafely ( ( int ) r . width ( ) + shadow * _NUM , ( int ) r . height ( ) + shadow * _NUM , Bitmap . Config . ARGB_4444 , _NUM ) ; if ( pBitmap == null ) { pieces [ i ] = new Piece ( - _NUM , - _NUM , null , shadow ) ; continue ; } pieces [ i ] = new Piece ( ( int ) r . left + mTouchPoint . x - shadow , ( int ) r . top + mTouchPoint . y - shadow , pBitmap , shadow ) ; canvas . setBitmap ( pieces [ i ] . bitmap ) ; BitmapShader mBitmapShader = new BitmapShader ( mBitmap , Shader . TileMode . CLAMP , Shader . TileMode . CLAMP ) ; matrix . reset ( ) ; matrix . setTranslate ( - r . left - offsetX + shadow , - r . top - offsetY + shadow ) ; mBitmapShader . setLocalMatrix ( matrix ) ; paint . reset ( ) ; Path offsetPath = new Path ( ) ; offsetPath . addPath ( path , - r . left + shadow , - r . top + shadow ) ; paint . setStyle ( Paint . Style . FILL ) ; paint . setShadowLayer ( shadow , _NUM , _NUM , _NUM ) ; canvas . drawPath ( offsetPath , paint ) ; paint . setShadowLayer ( _NUM , _NUM , _NUM , _NUM ) ; paint . setXfermode ( new PorterDuffXfermode ( PorterDuff . Mode . XOR ) ) ; canvas . drawPath ( offsetPath , paint ) ; paint . setXfermode ( null ) ; paint . setShader ( mBitmapShader ) ; paint . setAlpha ( _NUM ) ; canvas . drawPath ( offsetPath , paint ) ; } Arrays . sort ( pieces ) ; }
public boolean removeShutdownHook ( Thread hook ) { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPermission ( RuntimePermissionCollection . SHUTDOWN_HOOKS_PERMISSION ) ; } if ( hook == null ) throw new NullPointerException ( _STR ) ; if ( VMState > _NUM ) { throw new IllegalStateException ( ) ; } synchronized ( hooksList ) { return hooksList . remove ( hook ) ; } }
public void run ( ) { while ( m_keyboardStream != null ) { try { if ( m_keyboardReadRequest ) { String s = m_keyboardStream . readLine ( ) ; m_keyboardInput . add ( s ) ; m_keyboardReadRequest = _BOOL ; synchronized ( this ) { notifyAll ( ) ; } } else try { Thread . sleep ( _NUM ) ; } catch ( InterruptedException ie ) { } } catch ( IOException io ) { } } }
public boolean boundScroll ( ) { float curScroll = getStackScroll ( ) ; float newScroll = getBoundedStackScroll ( curScroll ) ; if ( Float . compare ( newScroll , curScroll ) != _NUM ) { setStackScroll ( newScroll ) ; return _BOOL ; } return _BOOL ; }
@ Override public AggregateableEvaluation aggregate ( Evaluation evaluation ) { m_Incorrect += evaluation . incorrect ( ) ; m_Correct += evaluation . correct ( ) ; m_Unclassified += evaluation . unclassified ( ) ; m_MissingClass += evaluation . m_MissingClass ; m_WithClass += evaluation . m_WithClass ; if ( evaluation . m_ConfusionMatrix != null ) { double [ ] [ ] newMatrix = evaluation . confusionMatrix ( ) ; if ( newMatrix != null ) { for ( int i = _NUM ; i < m_ConfusionMatrix . length ; i ++ ) { for ( int j = _NUM ; j < m_ConfusionMatrix [ i ] . length ; j ++ ) { m_ConfusionMatrix [ i ] [ j ] += newMatrix [ i ] [ j ] ; } } } } double [ ] newClassPriors = evaluation . m_ClassPriors ; if ( newClassPriors != null && m_ClassPriors != null ) { for ( int i = _NUM ; i < this . m_ClassPriors . length ; i ++ ) { m_ClassPriors [ i ] = newClassPriors [ i ] ; } } m_ClassPriorsSum = evaluation . m_ClassPriorsSum ; m_TotalCost += evaluation . totalCost ( ) ; m_SumErr += evaluation . m_SumErr ; m_SumAbsErr += evaluation . m_SumAbsErr ; m_SumSqrErr += evaluation . m_SumSqrErr ; m_SumClass += evaluation . m_SumClass ; m_SumSqrClass += evaluation . m_SumSqrClass ; m_SumPredicted += evaluation . m_SumPredicted ; m_SumSqrPredicted += evaluation . m_SumSqrPredicted ; m_SumClassPredicted += evaluation . m_SumClassPredicted ; m_SumPriorAbsErr += evaluation . m_SumPriorAbsErr ; m_SumPriorSqrErr += evaluation . m_SumPriorSqrErr ; m_SumKBInfo += evaluation . m_SumKBInfo ; double [ ] newMarginCounts = evaluation . m_MarginCounts ; if ( newMarginCounts != null ) { for ( int i = _NUM ; i < m_MarginCounts . length ; i ++ ) { m_MarginCounts [ i ] += newMarginCounts [ i ] ; } } m_ComplexityStatisticsAvailable = evaluation . m_ComplexityStatisticsAvailable ; m_CoverageStatisticsAvailable = evaluation . m_CoverageStatisticsAvailable ; m_SumPriorEntropy += evaluation . m_SumPriorEntropy ; m_SumSchemeEntropy += evaluation . m_SumSchemeEntropy ; m_TotalSizeOfRegions += evaluation . m_TotalSizeOfRegions ; m_TotalCoverage += evaluation . m_TotalCoverage ; ArrayList < Prediction > predsToAdd = evaluation . m_Predictions ; if ( predsToAdd != null ) { if ( m_Predictions == null ) { m_Predictions = new ArrayList < Prediction > ( ) ; } for ( int i = _NUM ; i < predsToAdd . size ( ) ; i ++ ) { m_Predictions . add ( predsToAdd . get ( i ) ) ; } } return this ; }
public void waitForVolumesToBeVisible ( CGRequestParams request ) { scan ( request . getCopies ( ) , request . getRsets ( ) ) ; }
protected void startAdditionalServices ( final Cache cache , final Map < String , Object > options ) throws Exception { }
public void updateView ( ) { if ( fInputElement != null && fParentComposite != null ) { IndicatorViewState oldState = fStateMap . get ( fInputElement ) ; boolean reload = fFilesToReoad . contains ( fInputElement ) ; if ( reload || oldState == null ) { JsonObject jsonObject = DroidsafePluginUtilities . parseIndicatorFile ( fInputElement ) ; if ( jsonObject == null ) return ; fFilesToReoad . remove ( fInputElement ) ; fState = new IndicatorViewState ( fInputElement , jsonObject , getSecuritySpec ( ) , oldState ) ; fStateMap . put ( fInputElement , fState ) ; } else { fState = oldState ; } setPartName ( fState . indicatorType ) ; showPage ( PAGE_VIEWER ) ; fTreeViewer . setInput ( fState . jsonObject ) ; if ( fTreeViewer . getSorter ( ) == null ) sortByField ( getSortByField ( ) ) ; } else { setPartName ( DEFAULT_PART_NAME ) ; } }
@ Override public void paint ( Graphics g ) { g . drawImage ( image , _NUM , _NUM , this ) ; if ( ! paintCalled ) { paintCalled = _BOOL ; synchronized ( this ) { notifyAll ( ) ; } } }
@ Override public boolean connectionAllowed ( String eventName ) { if ( m_listenees . containsKey ( eventName ) ) { return _BOOL ; } return _BOOL ; }
public boolean isPrefixed ( ) { return name . indexOf ( _STR ) >= _NUM ; }
public void releaseAnyConnection ( Connection connection ) throws SQLException { try { connection . close ( ) ; } catch ( Exception ex ) { throw new RuntimeException ( ex ) ; } }
public QuickActionView addActions ( Collection < Action > actions ) { checkShown ( ) ; mActions . addAll ( actions ) ; return this ; }
public void addSeriesRenderer ( int index , SimpleSeriesRenderer renderer ) { mRenderers . add ( index , renderer ) ; }
public static boolean copyStream ( InputStream is , OutputStream os , CopyListener listener , int bufferSize ) throws IOException { int current = _NUM ; int total = is . available ( ) ; if ( total <= _NUM ) { total = DEFAULT_IMAGE_TOTAL_SIZE ; } final byte [ ] bytes = new byte [ bufferSize ] ; int count ; if ( shouldStopLoading ( listener , current , total ) ) return _BOOL ; while ( ( count = is . read ( bytes , _NUM , bufferSize ) ) != - _NUM ) { os . write ( bytes , _NUM , count ) ; current += count ; if ( shouldStopLoading ( listener , current , total ) ) return _BOOL ; } os . flush ( ) ; return _BOOL ; }
private float calcAngle ( float value ) { return value / mData . getYValueSum ( ) * _NUM ; }
public synchronized void returnBuf ( byte [ ] buf ) { if ( buf == null || buf . length > mSizeLimit ) { return ; } mBuffersByLastUse . add ( buf ) ; int pos = Collections . binarySearch ( mBuffersBySize , buf , BUF_COMPARATOR ) ; if ( pos < _NUM ) { pos = - pos - _NUM ; } mBuffersBySize . add ( pos , buf ) ; mCurrentSize += buf . length ; trim ( ) ; }
protected < T extends AbstractOptionValue < ? , ? > > AbstractOptions ( Function < T , T > valueFilter , AbstractOptions baseOptions , Iterable < T > values ) { requireNonNull ( baseOptions , _STR ) ; requireNonNull ( valueFilter , _STR ) ; requireNonNull ( values , _STR ) ; valueMap = new IdentityHashMap < > ( baseOptions . valueMap ) ; putAll ( valueFilter , StreamSupport . stream ( values . spliterator ( ) , _BOOL ) ) ; }
public CharSeq concat ( CharSeq another ) { return new CharSeq ( str + another . str ) ; }
@ Override protected void doGet ( HttpServletRequest req , HttpServletResponse resp ) throws ServletException , IOException { resp . setContentType ( _STR ) ; PrintWriter sendToClient = resp . getWriter ( ) ; for ( Video v : this . videos ) { sendToClient . write ( v . getName ( ) + _STR + v . getUrl ( ) + _STR ) ; } }
protected void notifyStateChange ( int oldState , int newState ) { mState = newState ; if ( oldState != newState ) { firePropertyChange ( _STR , Integer . valueOf ( oldState ) , Integer . valueOf ( newState ) ) ; } }
public void test_GetOrder ( ) { assertEquals ( _STR , BigInteger . valueOf ( _NUM ) , ecps . getOrder ( ) ) ; }
private void formatAndLogThrowable ( LoggingLevel level , Color color , String msg , Throwable t ) { if ( ! USE_COLORS ) { formatAndLogThrowable ( level , msg , t ) ; return ; } if ( PhotonLogger . level . id < level . id ) { return ; } LocalDateTime dateTime = LocalDateTime . now ( ) ; String formatted = formatLogLine ( level , dateTime , msg ) ; LoggingService . logThrowable ( dateTime , t , formatted , color ) ; }
public static String constructQueueRedisKey ( String queueName , String shardName , int priority , PinLaterJobState state ) { return String . format ( _STR , PINLATER_QUEUE_KEY_PREFIX , shardName , queueName , priority , state . getValue ( ) ) ; }
public static String decodeCharset ( String s , String charset ) { if ( s == null ) { return null ; } try { byte buf [ ] = s . getBytes ( ASCII_CHARSET ) ; return ( new String ( buf , _NUM , buf . length , charset ) ) ; } catch ( UnsupportedEncodingException uee ) { return s ; } }
public void addRestrictedDomain ( String domainName ) { if ( StringUtils . isEmpty ( domainName ) ) { return ; } if ( restrictedDomains == null ) { restrictedDomains = new ArrayList < > ( ) ; } restrictedDomains . add ( domainName ) ; }
StoppableReadLock ( ReadWriteLock lock , CancelCriterion stopper ) { this . lock = lock . readLock ( ) ; this . stopper = stopper ; }
public void testisAutoIncrement ( ) { try { assertFalse ( rsmd . isAutoIncrement ( _NUM ) ) ; } catch ( SQLException e1 ) { fail ( _STR + e1 . getMessage ( ) ) ; e1 . printStackTrace ( ) ; } try { conn . close ( ) ; rsmd . getSchemaName ( _NUM ) ; fail ( _STR ) ; } catch ( SQLException e ) { } }
private long computeInterfaceHash ( ) { long hash = _NUM ; ByteArrayOutputStream sink = new ByteArrayOutputStream ( _NUM ) ; try { MessageDigest md = MessageDigest . getInstance ( _STR ) ; DataOutputStream out = new DataOutputStream ( new DigestOutputStream ( sink , md ) ) ; out . writeInt ( INTERFACE_HASH_STUB_VERSION ) ; for ( Method method : remoteMethods ) { MethodDoc methodDoc = method . methodDoc ( ) ; out . writeUTF ( methodDoc . name ( ) ) ; out . writeUTF ( Util . methodDescriptorOf ( methodDoc ) ) ; ClassDoc exceptions [ ] = methodDoc . thrownExceptions ( ) ; Arrays . sort ( exceptions , new ClassDocComparator ( ) ) ; for ( ClassDoc ex : exceptions ) { out . writeUTF ( Util . binaryNameOf ( ex ) ) ; } } out . flush ( ) ; byte hashArray [ ] = md . digest ( ) ; for ( int i = _NUM ; i < Math . min ( _NUM , hashArray . length ) ; i ++ ) { hash += ( ( long ) ( hashArray [ i ] & _NUM ) ) << ( i * _NUM ) ; } } catch ( IOException e ) { throw new AssertionError ( e ) ; } catch ( NoSuchAlgorithmException e ) { throw new AssertionError ( e ) ; } return hash ; }
public static void copy ( byte [ ] in , OutputStream out ) throws IOException { Assert . notNull ( in , _STR ) ; Assert . notNull ( out , _STR ) ; out . write ( in ) ; }
public boolean isEmpty ( ) { return items . isEmpty ( ) ; }
private static native boolean renderFrame ( int [ ] pixels , long gifFileInPtr , int [ ] metaData ) ;
private static int encodeText ( CharSequence msg , int startpos , int count , StringBuilder sb , int initialSubmode ) { StringBuilder tmp = new StringBuilder ( count ) ; int submode = initialSubmode ; int idx = _NUM ; while ( _BOOL ) { char ch = msg . charAt ( startpos + idx ) ; switch ( submode ) { case SUBMODE_ALPHA : if ( isAlphaUpper ( ch ) ) { if ( ch == _STR ) { tmp . append ( ( char ) _NUM ) ; } else { tmp . append ( ( char ) ( ch - _NUM ) ) ; } } else { if ( isAlphaLower ( ch ) ) { submode = SUBMODE_LOWER ; tmp . append ( ( char ) _NUM ) ; continue ; } else if ( isMixed ( ch ) ) { submode = SUBMODE_MIXED ; tmp . append ( ( char ) _NUM ) ; continue ; } else { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; break ; } } break ; case SUBMODE_LOWER : if ( isAlphaLower ( ch ) ) { if ( ch == _STR ) { tmp . append ( ( char ) _NUM ) ; } else { tmp . append ( ( char ) ( ch - _NUM ) ) ; } } else { if ( isAlphaUpper ( ch ) ) { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) ( ch - _NUM ) ) ; break ; } else if ( isMixed ( ch ) ) { submode = SUBMODE_MIXED ; tmp . append ( ( char ) _NUM ) ; continue ; } else { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; break ; } } break ; case SUBMODE_MIXED : if ( isMixed ( ch ) ) { tmp . append ( ( char ) MIXED [ ch ] ) ; } else { if ( isAlphaUpper ( ch ) ) { submode = SUBMODE_ALPHA ; tmp . append ( ( char ) _NUM ) ; continue ; } else if ( isAlphaLower ( ch ) ) { submode = SUBMODE_LOWER ; tmp . append ( ( char ) _NUM ) ; continue ; } else { if ( startpos + idx + _NUM < count ) { char next = msg . charAt ( startpos + idx + _NUM ) ; if ( isPunctuation ( next ) ) { submode = SUBMODE_PUNCTUATION ; tmp . append ( ( char ) _NUM ) ; continue ; } } tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; } } break ; default : if ( isPunctuation ( ch ) ) { tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; } else { submode = SUBMODE_ALPHA ; tmp . append ( ( char ) _NUM ) ; continue ; } } idx ++ ; if ( idx >= count ) { break ; } } char h = _NUM ; int len = tmp . length ( ) ; for ( int i = _NUM ; i < len ; i ++ ) { boolean odd = ( i % _NUM ) != _NUM ; if ( odd ) { h = ( char ) ( ( h * _NUM ) + tmp . charAt ( i ) ) ; sb . append ( h ) ; } else { h = tmp . charAt ( i ) ; } } if ( ( len % _NUM ) != _NUM ) { sb . append ( ( char ) ( ( h * _NUM ) + _NUM ) ) ; } return submode ; }
public static boolean isValidNCName ( String ncName ) { if ( ncName . length ( ) == _NUM ) return _BOOL ; char ch = ncName . charAt ( _NUM ) ; if ( isNCNameStart ( ch ) == _BOOL ) return _BOOL ; for ( int i = _NUM ; i < ncName . length ( ) ; i ++ ) { ch = ncName . charAt ( i ) ; if ( isNCName ( ch ) == _BOOL ) { return _BOOL ; } } return _BOOL ; }
public RepeatedFieldBuilder < MType , BType , IType > addMessage ( MType message ) { if ( message == null ) { throw new NullPointerException ( ) ; } ensureMutableMessageList ( ) ; messages . add ( message ) ; if ( builders != null ) { builders . add ( null ) ; } onChanged ( ) ; incrementModCounts ( ) ; return this ; }
protected void prepareDataSet ( ) { dataSet1 = Arrays . asList ( new String [ ] { _STR , _STR , _STR } ) ; dataSet2 = Arrays . asList ( new String [ ] { _STR , _STR , _STR } ) ; dataSet3 = Arrays . asList ( new String [ ] { _STR , _STR , _STR , _STR } ) ; }
private ServiceRegistrar [ ] buildServiceRegistrar ( ) { int k = _NUM ; ServiceRegistrar [ ] proxys = new ServiceRegistrar [ proxyRegSet . size ( ) ] ; Iterator iter = proxyRegSet . iterator ( ) ; while ( iter . hasNext ( ) ) { ProxyReg reg = ( ProxyReg ) iter . next ( ) ; proxys [ k ++ ] = reg . proxy ; } return proxys ; }
private static boolean checkValue ( String val ) throws MalformedObjectNameException { if ( val == null ) throw new NullPointerException ( _STR ) ; final int len = val . length ( ) ; if ( len == _NUM ) return _BOOL ; final char [ ] s = val . toCharArray ( ) ; final int [ ] result = parseValue ( s , _NUM ) ; final int endValue = result [ _NUM ] ; final boolean value_pattern = result [ _NUM ] == _NUM ; if ( endValue < len ) throw new MalformedObjectNameException ( _STR + s [ endValue ] + _STR ) ; return value_pattern ; }
protected void recoverPrimary ( Set excludedServers ) { if ( pool . getPoolOrCacheCancelInProgress ( ) != null ) { return ; } final boolean isDebugEnabled = logger . isDebugEnabled ( ) ; if ( queueConnections . getPrimary ( ) != null ) { if ( isDebugEnabled ) { logger . debug ( _STR ) ; } return ; } if ( isDebugEnabled ) { logger . debug ( _STR ) ; } if ( printRecoveringPrimary ) { logger . info ( LocalizedMessage . create ( LocalizedStrings . QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER ) ) ; printRecoveringPrimary = _BOOL ; } QueueConnectionImpl newPrimary = null ; while ( newPrimary == null && pool . getPoolOrCacheCancelInProgress ( ) == null ) { List backups = queueConnections . getBackups ( ) ; newPrimary = promoteBackupToPrimary ( backups ) ; if ( newPrimary == null ) { break ; } if ( ! addToConnectionList ( newPrimary , _BOOL ) ) { synchronized ( lock ) { queueConnections = queueConnections . removeConnection ( newPrimary ) ; } newPrimary = null ; } } if ( newPrimary != null ) { if ( isDebugEnabled ) { logger . debug ( _STR , newPrimary . getEndpoint ( ) ) ; } if ( PoolImpl . AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG ) { ClientServerObserver bo = ClientServerObserverHolder . getInstance ( ) ; bo . afterPrimaryRecovered ( newPrimary . getServer ( ) ) ; } cqsConnected ( ) ; printPrimaryNotFoundError = _BOOL ; printRecoveringPrimary = _BOOL ; return ; } while ( newPrimary == null ) { newPrimary = createNewPrimary ( excludedServers ) ; if ( newPrimary == null ) { break ; } if ( ! addToConnectionList ( newPrimary , _BOOL ) ) { excludedServers . add ( newPrimary . getServer ( ) ) ; newPrimary = null ; } if ( newPrimary != null ) { if ( isDebugEnabled ) { logger . debug ( _STR , newPrimary . getEndpoint ( ) ) ; } if ( ! recoverInterest ( newPrimary , _BOOL ) ) { excludedServers . add ( newPrimary . getServer ( ) ) ; newPrimary = null ; } cqsConnected ( ) ; } if ( newPrimary != null && PoolImpl . AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG ) { ClientServerObserver bo = ClientServerObserverHolder . getInstance ( ) ; bo . afterPrimaryRecovered ( newPrimary . getServer ( ) ) ; } printPrimaryNotFoundError = _BOOL ; printRecoveringPrimary = _BOOL ; return ; } cqsDisconnected ( ) ; if ( isDebugEnabled ) { logger . debug ( _STR ) ; } synchronized ( lock ) { queueConnections = queueConnections . setPrimaryDiscoveryFailed ( null ) ; lock . notifyAll ( ) ; } }
private synchronized void rebuildJournal ( ) throws IOException { if ( journalWriter != null ) { journalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new FileWriter ( journalFileTmp ) , IO_BUFFER_SIZE ) ; writer . write ( MAGIC ) ; writer . write ( _STR ) ; writer . write ( VERSION_1 ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( appVersion ) ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( valueCount ) ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; for ( Entry entry : lruEntries . values ( ) ) { if ( entry . currentEditor != null ) { writer . write ( DIRTY + _STR + entry . key + _STR ) ; } else { writer . write ( CLEAN + _STR + entry . key + entry . getLengths ( ) + _STR ) ; } } writer . close ( ) ; journalFileTmp . renameTo ( journalFile ) ; journalWriter = new BufferedWriter ( new FileWriter ( journalFile , _BOOL ) , IO_BUFFER_SIZE ) ; }
public void remove ( ) throws RecurrenceInfoException { List < RecurrenceRule > rulesList = new ArrayList < RecurrenceRule > ( ) ; rulesList . addAll ( rRulesList ) ; rulesList . addAll ( eRulesList ) ; try { for ( RecurrenceRule rule : rulesList ) rule . remove ( ) ; info . remove ( ) ; } catch ( RecurrenceRuleException rre ) { throw new RecurrenceInfoException ( rre . getMessage ( ) , rre ) ; } catch ( GenericEntityException gee ) { throw new RecurrenceInfoException ( gee . getMessage ( ) , gee ) ; } }
public void addNodesInDocOrder ( DTMIterator iterator , XPathContext support ) { if ( ! m_mutable ) throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NODESETDTM_NOT_MUTABLE , null ) ) ; int node ; while ( DTM . NULL != ( node = iterator . nextNode ( ) ) ) { addNodeInDocOrder ( node , support ) ; } }
protected boolean needToRefetchData ( ) { long now = System . currentTimeMillis ( ) ; long last = lastDataFetchTime ; if ( ( last + fetchIntervalMillis ) < now ) { lastDataFetchTime = now ; return _BOOL ; } return _BOOL ; }
@ Override public DocumentType createDocumentType ( String qualifiedName , String publicID , String systemID ) { checkQName ( qualifiedName ) ; return new DocumentTypeImpl ( null , qualifiedName , publicID , systemID ) ; }
public void handleRequest ( RequestContext rc ) throws CLIException { super . handleRequest ( rc ) ; ldapLogin ( ) ; SSOToken adminSSOToken = getAdminSSOToken ( ) ; IOutput outputWriter = getOutputWriter ( ) ; String realm = getStringOptionValue ( IArgument . REALM_NAME ) ; String patternType = getStringOptionValue ( IArgument . AGENT_TYPE ) ; String filter = getStringOptionValue ( IArgument . FILTER ) ; if ( patternType == null ) { patternType = _STR ; } if ( ( filter == null ) || ( filter . length ( ) == _NUM ) ) { filter = _STR ; } String [ ] params = { realm , patternType , filter } ; writeLog ( LogWriter . LOG_ACCESS , Level . INFO , _STR , params ) ; try { AMIdentityRepository amir = new AMIdentityRepository ( adminSSOToken , realm ) ; IdSearchResults isr = amir . searchIdentities ( IdType . AGENTONLY , filter , new IdSearchControl ( ) ) ; Set results = isr . getSearchResults ( ) ; if ( ( results != null ) && ! results . isEmpty ( ) ) { for ( Iterator i = results . iterator ( ) ; i . hasNext ( ) ; ) { AMIdentity amid = ( AMIdentity ) i . next ( ) ; if ( ! matchType ( amid , patternType ) ) { i . remove ( ) ; } } } if ( ( results != null ) && ! results . isEmpty ( ) ) { for ( Iterator i = results . iterator ( ) ; i . hasNext ( ) ; ) { AMIdentity amid = ( AMIdentity ) i . next ( ) ; Object [ ] args = { amid . getName ( ) , amid . getUniversalId ( ) } ; outputWriter . printlnMessage ( MessageFormat . format ( getResourceString ( _STR ) , args ) ) ; } } else { outputWriter . printlnMessage ( getResourceString ( _STR ) ) ; } writeLog ( LogWriter . LOG_ACCESS , Level . INFO , _STR , params ) ; } catch ( IdRepoException e ) { String [ ] args = { realm , patternType , filter , e . getMessage ( ) } ; debugError ( _STR , e ) ; writeLog ( LogWriter . LOG_ERROR , Level . INFO , _STR , args ) ; throw new CLIException ( e , ExitCodes . REQUEST_CANNOT_BE_PROCESSED ) ; } catch ( SSOException e ) { String [ ] args = { realm , patternType , filter , e . getMessage ( ) } ; debugError ( _STR , e ) ; writeLog ( LogWriter . LOG_ERROR , Level . INFO , _STR , args ) ; throw new CLIException ( e , ExitCodes . REQUEST_CANNOT_BE_PROCESSED ) ; } }
public byte [ ] toBytes ( ) { try { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; _field . store ( out , null ) ; return out . toByteArray ( ) ; } catch ( IOException e ) { throw new IllegalStateException ( e ) ; } }
@ SuppressWarnings ( _STR ) public static < E extends Enum < ? extends Style . HasCssName > > E fromStyleName ( final String styleName , final Class < E > enumClass , final E defaultValue ) { if ( styleName == null || enumClass == null ) { return defaultValue ; } for ( final Enum < ? extends Style . HasCssName > constant : enumClass . getEnumConstants ( ) ) { final Style . HasCssName anEnum = ( Style . HasCssName ) constant ; final String cssClass = anEnum . getCssName ( ) ; if ( cssClass != null && StyleHelper . containsStyle ( styleName , cssClass ) ) { return ( E ) anEnum ; } } return defaultValue ; }
@ HLEUnimplemented @ HLEFunction ( nid = _NUM , version = _NUM , checkInsideInterrupt = _BOOL ) public int sceMpegNextAvcRpAu ( @ CheckArgument ( _STR ) int mpeg , int streamUid ) { if ( ! streamMap . containsKey ( streamUid ) ) { log . warn ( String . format ( _STR , streamUid ) ) ; return - _NUM ; } int result = hleMpegGetAvcAu ( null ) ; if ( result != _NUM ) { if ( log . isDebugEnabled ( ) ) { log . debug ( String . format ( _STR , result ) ) ; } return result ; } videoFrameCount ++ ; startedMpeg = _BOOL ; return _NUM ; }
private Map < URI , ExportMask > createExportMaskMap ( Set < URI > placedMasks ) { Map < URI , ExportMask > exportMaskMap = new HashMap < > ( ) ; Iterator < ExportMask > exportMaskIterator = dbClient . queryIterativeObjects ( ExportMask . class , placedMasks , _BOOL ) ; while ( exportMaskIterator . hasNext ( ) ) { ExportMask exportMask = exportMaskIterator . next ( ) ; exportMaskMap . put ( exportMask . getId ( ) , exportMask ) ; } return exportMaskMap ; }
public ImmutableArray2 < K > insert ( int index , K obj ) { int len = length + _NUM ; int newLen = len ; boolean extendable ; if ( index == len - _NUM ) { AtomicBoolean x = canExtend ; if ( x != null ) { canExtend = null ; if ( array . length > index && x . getAndSet ( _BOOL ) ) { array [ index ] = obj ; return new ImmutableArray2 < K > ( array , len , _BOOL ) ; } } extendable = _BOOL ; newLen = len + _NUM ; } else { extendable = _BOOL ; } @ SuppressWarnings ( _STR ) K [ ] a2 = ( K [ ] ) new Object [ newLen ] ; DataUtils . copyWithGap ( array , a2 , length , index ) ; a2 [ index ] = obj ; return new ImmutableArray2 < K > ( a2 , len , extendable ) ; }
public void writeNoScale ( Image c , Component i ) { if ( page == null ) { newpage ( ) ; } int x = x0 + width - ( c . getWidth ( null ) + charwidth ) ; int y = y0 + ( linenum * lineheight ) + lineascent ; if ( page != null && pagenum >= prFirst ) { page . drawImage ( c , x , y , c . getWidth ( null ) , c . getHeight ( null ) , null ) ; } }
public void putDocumentInCache ( int n , Source source ) { int cachedNode = getNode ( source ) ; if ( DTM . NULL != cachedNode ) { if ( ! ( cachedNode == n ) ) throw new RuntimeException ( _STR + _STR + source . getSystemId ( ) ) ; return ; } if ( null != source . getSystemId ( ) ) { m_sourceTree . addElement ( new SourceTree ( n , source . getSystemId ( ) ) ) ; } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public static void copy ( InputStream is , Resource out , boolean closeIS ) throws IOException { OutputStream os = null ; try { os = toBufferedOutputStream ( out . getOutputStream ( ) ) ; } catch ( IOException ioe ) { IOUtil . closeEL ( os ) ; throw ioe ; } copy ( is , os , closeIS , _BOOL ) ; }
public String fadeAudio ( String path , String type , double fadeInLength , double stopTime , double fadeOutLength ) throws IOException { final List < String > curves = Arrays . asList ( new String [ ] { _STR , _STR , _STR , _STR , _STR } ) ; if ( ! curves . contains ( type ) ) { throw new RuntimeException ( _STR + type ) ; } File file = new File ( path ) ; String outFile = file . getCanonicalPath ( ) + _STR ; ArrayList < String > cmd = new ArrayList < String > ( ) ; cmd . add ( soxBin ) ; cmd . add ( path ) ; cmd . add ( outFile ) ; cmd . add ( _STR ) ; cmd . add ( type ) ; cmd . add ( fadeInLength + _STR ) ; if ( stopTime != - _NUM ) cmd . add ( stopTime + _STR ) ; if ( fadeOutLength != - _NUM ) cmd . add ( fadeOutLength + _STR ) ; try { int rc = execSox ( cmd , callback ) ; if ( rc != _NUM ) { outFile = null ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } return outFile ; }
@ Override public void draw ( Canvas canvas ) { super . draw ( canvas ) ; if ( mEdgeGlowTop != null ) { final int scrollX = getScrollX ( ) ; if ( ! mEdgeGlowTop . isFinished ( ) ) { final int restoreCount = canvas . save ( ) ; final int topPadding = mListPadding . top + mGlowPaddingTop ; final int bottomPadding = mListPadding . bottom + mGlowPaddingBottom ; final int height = getHeight ( ) - topPadding - bottomPadding ; int edgeX = Math . min ( _NUM , scrollX + mFirstPositionDistanceGuess ) ; canvas . rotate ( - _NUM ) ; canvas . translate ( - getHeight ( ) + topPadding , edgeX ) ; mEdgeGlowTop . setSize ( height , height ) ; if ( mEdgeGlowTop . draw ( canvas ) ) { invalidate ( ) ; } canvas . restoreToCount ( restoreCount ) ; } if ( ! mEdgeGlowBottom . isFinished ( ) ) { final int restoreCount = canvas . save ( ) ; final int topPadding = mListPadding . left + mGlowPaddingTop ; final int bottomPadding = mListPadding . right + mGlowPaddingBottom ; final int height = getHeight ( ) - topPadding - bottomPadding ; final int width = getWidth ( ) ; int edgeX = Math . max ( width , scrollX + mLastPositionDistanceGuess ) ; canvas . rotate ( _NUM ) ; canvas . translate ( - topPadding , - edgeX ) ; mEdgeGlowBottom . setSize ( height , height ) ; if ( mEdgeGlowBottom . draw ( canvas ) ) { invalidate ( ) ; } canvas . restoreToCount ( restoreCount ) ; } } }
public static ClassProperties loadProperties ( Class [ ] cls , Properties properties , boolean inherit ) { ClassProperties cp = new ClassProperties ( properties ) ; for ( Class c : cls ) { cp . load ( c , inherit ) ; } return cp ; }
public void testCase20 ( ) { byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte rBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int bSign = _NUM ; BigInteger aNumber = BigInteger . ZERO ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . add ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
private static void fixGPSTimeStamp ( XMPNode exifSchema ) throws XMPException { XMPNode gpsDateTime = XMPNodeUtils . findChildNode ( exifSchema , _STR , _BOOL ) ; if ( gpsDateTime == null ) { return ; } try { XMPDateTime binGPSStamp ; XMPDateTime binOtherDate ; binGPSStamp = XMPUtils . convertToDate ( gpsDateTime . getValue ( ) ) ; if ( binGPSStamp . getYear ( ) != _NUM || binGPSStamp . getMonth ( ) != _NUM || binGPSStamp . getDay ( ) != _NUM ) { return ; } XMPNode otherDate = XMPNodeUtils . findChildNode ( exifSchema , _STR , _BOOL ) ; if ( otherDate == null ) { otherDate = XMPNodeUtils . findChildNode ( exifSchema , _STR , _BOOL ) ; } binOtherDate = XMPUtils . convertToDate ( otherDate . getValue ( ) ) ; Calendar cal = binGPSStamp . getCalendar ( ) ; cal . set ( Calendar . YEAR , binOtherDate . getYear ( ) ) ; cal . set ( Calendar . MONTH , binOtherDate . getMonth ( ) ) ; cal . set ( Calendar . DAY_OF_MONTH , binOtherDate . getDay ( ) ) ; binGPSStamp = new XMPDateTimeImpl ( cal ) ; gpsDateTime . setValue ( XMPUtils . convertFromDate ( binGPSStamp ) ) ; } catch ( XMPException e ) { return ; } }
protected boolean cellConsumesEventType ( Cell < ? > cell , String eventType ) { Set < String > consumedEvents = cell . getConsumedEvents ( ) ; return consumedEvents != null && consumedEvents . contains ( eventType ) ; }
public int read ( ) throws IOException { int b0 = fInputStream . read ( ) ; if ( b0 > _NUM ) { throw new IOException ( Localizer . getMessage ( _STR , Integer . toString ( b0 ) ) ) ; } return b0 ; }
protected void create_y_axis ( int i ) { Log . e ( _STR , i + _STR ) ; float ver_height = ( ( graphheight / label_size ) * i ) + border ; if ( i == largest_value_set . size ( ) - _NUM ) canvas . drawLine ( horstart , ver_height , width - ( border ) , ver_height , paint ) ; else canvas . drawLine ( horstart , ver_height , border , ver_height , paint ) ; paint . setColor ( Color . BLACK ) ; int Y_labels = ( int ) size - _NUM - i ; String y_labels = String . format ( _STR , Y_labels * y_axis_ratio ) ; paint . setTextAlign ( Paint . Align . RIGHT ) ; canvas . drawText ( y_labels , horstart - _NUM , ver_height - _NUM , paint ) ; paint . setTextAlign ( Paint . Align . LEFT ) ; }
public long max ( ) { return deltaMax . get ( ) ; }
public void print ( File file ) throws IOException { checkExec ( ) ; SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPrintJobAccess ( ) ; } checkActionSupport ( Action . PRINT ) ; checkFileValidation ( file ) ; peer . print ( file ) ; }
public void extend ( RuleGrounding other ) { if ( other . isFailed ( ) ) { groundings . clear ( ) ; return ; } extend ( other . getAlternatives ( ) ) ; }
@ Override public String expect ( Pattern pattern ) { final String token = read ( pattern ) ; if ( token == null ) { throw new ParserException ( _STR + pattern . pattern ( ) + _STR + document ) ; } return token ; }
public void testGetTableTypesOrder ( ) throws Exception { DatabaseMetaData dmd = con . getMetaData ( ) ; ResultSet rs = dmd . getTableTypes ( ) ; String previousType = _STR ; while ( rs . next ( ) ) { String type = rs . getString ( _NUM ) ; assertTrue ( type . compareTo ( previousType ) >= _NUM ) ; previousType = type ; } rs . close ( ) ; }
private FileChannel updateCache ( String filePath ) { FileChannel fileChannel = fileNameAndStreamCache . get ( filePath ) ; try { if ( null == fileChannel ) { FileInputStream stream = new FileInputStream ( filePath ) ; fileChannel = stream . getChannel ( ) ; fileNameAndStreamCache . put ( filePath , fileChannel ) ; } } catch ( IOException e ) { LOGGER . error ( e , e . getMessage ( ) ) ; } return fileChannel ; }
public void removeSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { return ; } mListeners . remove ( listener ) ; }
private static String descriptorForFieldSignature ( String signature ) { return signature . replace ( _STR , _STR ) ; }
public void addParameters ( final NameValuePair [ ] parameters ) { LOG . trace ( _STR ) ; if ( parameters == null ) { LOG . warn ( _STR ) ; } else { super . clearRequestBody ( ) ; for ( int i = _NUM ; i < parameters . length ; i ++ ) { params . add ( parameters [ i ] ) ; } } }
@ Pure public Atom annotationInterfaceToAnnotationClass ( ) { byte [ ] annotationClassName_tmp = new byte [ val . length + _NUM ] ; System . arraycopy ( val , _NUM , annotationClassName_tmp , _NUM , val . length - _NUM ) ; annotationClassName_tmp [ val . length - _NUM ] = _STR ; annotationClassName_tmp [ val . length ] = _STR ; annotationClassName_tmp [ val . length + _NUM ] = _STR ; return Atom . findOrCreateUtf8Atom ( annotationClassName_tmp ) ; }
public boolean resourceSupportAR ( Integer id ) { if ( id == null ) { return _BOOL ; } return resourceSupportAR ( id . intValue ( ) ) ; }
public static Map < String , Object > createElectronicText ( DispatchContext dctx , Map < String , ? extends Object > context ) { Map < String , Object > result = createElectronicTextMethod ( dctx , context ) ; return result ; }
public PatternGuardExpr ( String namespace , String name , Expression [ ] parameters , PatternExpr guarded ) { this ( namespace , name , Arrays . asList ( parameters ) , guarded ) ; }
public static int intersectLineLine ( Line2D a , Line2D b , Point2D intersect ) { double a1x = a . getX1 ( ) , a1y = a . getY1 ( ) ; double a2x = a . getX2 ( ) , a2y = a . getY2 ( ) ; double b1x = b . getX1 ( ) , b1y = b . getY1 ( ) ; double b2x = b . getX2 ( ) , b2y = b . getY2 ( ) ; return intersectLineLine ( a1x , a1y , a2x , a2y , b1x , b1y , b2x , b2y , intersect ) ; }
public static Set updateAndGetRemovableOCs ( Set origSet , Set removeOCs ) { Set returnOCs = removeOCs ; if ( removeOCs != null && ! removeOCs . isEmpty ( ) ) { returnOCs = new HashSet ( ) ; Iterator itr1 = origSet . iterator ( ) ; while ( itr1 . hasNext ( ) ) { String origOC = ( String ) itr1 . next ( ) ; Iterator itr2 = removeOCs . iterator ( ) ; while ( itr2 . hasNext ( ) ) { String removeOC = ( String ) itr2 . next ( ) ; if ( origOC . equalsIgnoreCase ( removeOC ) ) { returnOCs . add ( origOC ) ; break ; } } } origSet . removeAll ( returnOCs ) ; } return returnOCs ; }
public static int unixTimestamp ( ) { return ( int ) ( System . currentTimeMillis ( ) / _NUM ) ; }
public boolean isPDFLicense ( ) { String key = getSummary ( ) ; return key != null && key . length ( ) > _NUM ; }
protected void drawGridBackground ( Canvas c ) { if ( mDrawGridBackground ) { c . drawRect ( mViewPortHandler . getContentRect ( ) , mGridBackgroundPaint ) ; } if ( mDrawBorders ) { c . drawRect ( mViewPortHandler . getContentRect ( ) , mBorderPaint ) ; } }
public ZipStreamImpl openReadImpl ( PathImpl path ) throws IOException { String pathName = path . getPath ( ) ; return openReadImpl ( pathName ) ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
@ Override public void onTmpFilesCopied ( ResultCode result ) { dismissLoadingDialog ( ) ; finish ( ) ; }
public synchronized OMGraphicList prepare ( ) { Projection projection = getProjection ( ) ; boolean DEBUG_FINE = logger . isLoggable ( Level . FINE ) ; if ( projection == null ) { if ( DEBUG_FINE ) { logger . fine ( getName ( ) + _STR ) ; } return new OMGraphicList ( ) ; } if ( spatialIndex == null ) { if ( DEBUG_FINE ) { logger . fine ( getName ( ) + _STR ) ; } OMGraphicList list = getList ( ) ; if ( list != null ) { list . generate ( projection , _BOOL ) ; return list ; } else { return new OMGraphicList ( ) ; } } Point2D ul = projection . getUpperLeft ( ) ; Point2D lr = projection . getLowerRight ( ) ; double ulLat = ul . getY ( ) ; double ulLon = ul . getX ( ) ; double lrLat = lr . getY ( ) ; double lrLon = lr . getX ( ) ; OMGraphicList list = new OMGraphicList ( ) ; if ( ProjMath . isCrossingDateline ( ulLon , lrLon , projection . getScale ( ) ) ) { if ( DEBUG_FINE ) { logger . fine ( _STR ) ; } double ymin = Math . min ( ulLat , lrLat ) ; double ymax = Math . max ( ulLat , lrLat ) ; try { list = spatialIndex . getOMGraphics ( ulLon , ymin , _NUM , ymax , list , drawingAttributes , projection , coordTransform ) ; list = spatialIndex . getOMGraphics ( - _NUM , ymin , lrLon , ymax , list , drawingAttributes , projection , coordTransform ) ; } catch ( InterruptedIOException iioe ) { list = null ; } catch ( IOException ex ) { if ( DEBUG_FINE ) { ex . printStackTrace ( ) ; } } catch ( FormatException fe ) { if ( DEBUG_FINE ) { fe . printStackTrace ( ) ; } } catch ( NullPointerException npe ) { if ( DEBUG_FINE ) { npe . printStackTrace ( ) ; } } } else { double xmin = Math . min ( ulLon , lrLon ) ; double xmax = Math . max ( ulLon , lrLon ) ; double ymin = Math . min ( ulLat , lrLat ) ; double ymax = Math . max ( ulLat , lrLat ) ; try { list = spatialIndex . getOMGraphics ( xmin , ymin , xmax , ymax , list , drawingAttributes , projection , coordTransform ) ; } catch ( InterruptedIOException iioe ) { list = null ; } catch ( java . io . IOException ex ) { if ( DEBUG_FINE ) { ex . printStackTrace ( ) ; } } catch ( FormatException fe ) { if ( DEBUG_FINE ) { fe . printStackTrace ( ) ; } } catch ( NullPointerException npe ) { if ( DEBUG_FINE ) { npe . printStackTrace ( ) ; } } } return list ; }
static WorkQueue commonSubmitterQueue ( ) { ForkJoinPool p ; WorkQueue [ ] ws ; int m ; Submitter z ; return ( ( z = submitters . get ( ) ) != null && ( p = commonPool ) != null && ( ws = p . workQueues ) != null && ( m = ws . length - _NUM ) >= _NUM ) ? ws [ m & z . seed & SQMASK ] : null ; }
private boolean isFieldPackagePrivate ( Element attribute ) { Set < Modifier > modifiers = attribute . getModifiers ( ) ; return ! modifiers . contains ( PUBLIC ) && ! modifiers . contains ( PROTECTED ) && ! modifiers . contains ( PRIVATE ) ; }
public void testDivideRoundHalfUpPos ( ) { String a = _STR ; int aScale = - _NUM ; String b = _STR ; int bScale = _NUM ; String c = _STR ; int resScale = - _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_HALF_UP ) ; assertEquals ( _STR , c , result . toString ( ) ) ; assertEquals ( _STR , resScale , result . scale ( ) ) ; }
public boolean reallyRestoreMsWordListFormatForUser ( String userId , InputStreamReader streamReader , boolean isAdmin , Errors errors ) { if ( userId == null ) { Errors . add ( errors , errorMessages . errorsUserIdIsNull ( ) ) ; return _BOOL ; } if ( streamReader == null ) { Errors . add ( errors , errorMessages . errorsTheInputStreamReaderIsNull ( ) ) ; return _BOOL ; } BufferedReader bf = new BufferedReader ( streamReader ) ; final User user = getUserById ( userId ) ; if ( user == null ) { return _BOOL ; } boolean createdAnyChildren = _BOOL ; try { final long now = System . currentTimeMillis ( ) ; Entry notebook = createEntryNoteBook ( user , _STR , now , null , null , _BOOL , _BOOL , _BOOL , isAdmin , _BOOL , errors ) ; if ( notebook == null ) { return _BOOL ; } Entry root = getEntryById ( notebook . getRootId ( ) ) ; ArrayList < Entry > parents = new ArrayList < Entry > ( ) ; HashMap < String , Integer > bulletToDepth = new HashMap < String , Integer > ( ) ; String line = null ; Integer previousDepth = _NUM ; parents . add ( root ) ; while ( ( line = bf . readLine ( ) ) != null ) { line = line . trim ( ) ; if ( line . isEmpty ( ) ) { continue ; } String note = line ; Integer depth = _NUM ; if ( line . length ( ) > _NUM && line . charAt ( _NUM ) == _STR ) { String bullet = line . substring ( _NUM , _NUM ) ; note = line . substring ( _NUM ) ; depth = bulletToDepth . get ( bullet ) ; if ( depth == null ) { depth = new Integer ( bulletToDepth . size ( ) + _NUM ) ; bulletToDepth . put ( bullet , depth ) ; } for ( int i = parents . size ( ) ; i > depth . intValue ( ) ; -- i ) { parents . remove ( i - _NUM ) ; } depth = new Integer ( parents . size ( ) + _NUM ) ; } else { previousDepth = _NUM ; while ( parents . size ( ) > _NUM ) { parents . remove ( parents . size ( ) - _NUM ) ; } } if ( parents . isEmpty ( ) ) { return _BOOL ; } Entry parent = parents . get ( parents . size ( ) - _NUM ) ; Entry entry = createSimpleEntry ( user , note , now , parent . getId ( ) , TreeRelType . Parent , _BOOL , _BOOL , _BOOL , isAdmin , Constants . note , errors , null ) ; if ( entry == null ) { return _BOOL ; } if ( previousDepth . intValue ( ) != depth . intValue ( ) ) { parents . add ( entry ) ; } else { parents . set ( parents . size ( ) - _NUM , entry ) ; } createdAnyChildren = _BOOL ; } } catch ( IOException e ) { Errors . add ( errors , errorMessages . errorProblemReadingInput ( ) ) ; } return createdAnyChildren ; }
@ CallSuper protected void onPageScrolled ( int position , float offset , int offsetPixels ) { if ( mDecorChildCount > _NUM ) { final int scrollX = getScrollX ( ) ; int paddingLeft = getPaddingLeft ( ) ; int paddingRight = getPaddingRight ( ) ; final int width = getWidth ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( ! lp . isDecor ) continue ; final int hgrav = lp . gravity & Gravity . HORIZONTAL_GRAVITY_MASK ; int childLeft = _NUM ; switch ( hgrav ) { default : childLeft = paddingLeft ; break ; case Gravity . LEFT : childLeft = paddingLeft ; paddingLeft += child . getWidth ( ) ; break ; case Gravity . CENTER_HORIZONTAL : childLeft = Math . max ( ( width - child . getMeasuredWidth ( ) ) / _NUM , paddingLeft ) ; break ; case Gravity . RIGHT : childLeft = width - paddingRight - child . getMeasuredWidth ( ) ; paddingRight += child . getMeasuredWidth ( ) ; break ; } childLeft += scrollX ; final int childOffset = childLeft - child . getLeft ( ) ; if ( childOffset != _NUM ) { child . offsetLeftAndRight ( childOffset ) ; } } } dispatchOnPageScrolled ( position , offset , offsetPixels ) ; if ( mPageTransformer != null ) { final int scrollX = getScrollX ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( lp . isDecor ) continue ; final float transformPos = ( float ) ( child . getLeft ( ) - scrollX ) / getClientWidth ( ) ; mPageTransformer . transformPage ( child , transformPos ) ; } } mCalledSuper = _BOOL ; }
public static String convertCodes ( String string ) { if ( string == null ) return string ; int current = _NUM ; char [ ] cs = string . toCharArray ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( char c : cs ) { if ( current <= cs . length && c == _STR ) { char tc = Character . toLowerCase ( cs [ current + _NUM ] ) ; if ( tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR ) { sb . append ( _STR ) ; } else { sb . append ( c ) ; } } else { sb . append ( c ) ; } current ++ ; } return sb . toString ( ) ; }
private void loadText ( InputStream is ) { BufferedReader reader ; String line ; unitList = new ArrayList ( ) ; unitTypesList = new ArrayList ( ) ; if ( is == null ) { throw new Error ( _STR ) ; } reader = new BufferedReader ( new InputStreamReader ( is ) ) ; try { line = reader . readLine ( ) ; lineCount ++ ; while ( line != null ) { if ( ! line . startsWith ( _STR ) ) { parseAndAdd ( line , reader ) ; } line = reader . readLine ( ) ; } reader . close ( ) ; units = new DatabaseClusterUnit [ unitList . size ( ) ] ; units = ( DatabaseClusterUnit [ ] ) unitList . toArray ( units ) ; unitList = null ; unitTypes = new UnitType [ unitTypesList . size ( ) ] ; unitTypes = ( UnitType [ ] ) unitTypesList . toArray ( unitTypes ) ; unitTypesList = null ; } catch ( IOException e ) { throw new Error ( e . getMessage ( ) + _STR + lineCount ) ; } finally { } }
private float calculateSelectorRadius ( ) { if ( mfSelectorRadius == _NUM ) { int nHeight = mSelectedView . getHeight ( ) ; int nWidth = mSelectedView . getWidth ( ) ; int nLargerSide = Math . max ( nWidth , nHeight ) ; mfSelectorRadius = ( ( nLargerSide ^ _NUM ) / _NUM ) ; } return mfSelectorRadius ; }
private int measureWidth ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) mTextPaint . measureText ( mText ) + getPaddingLeft ( ) + getPaddingRight ( ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
public void test_getPutByteArray ( ) { final int capacity = _NUM ; final ByteArrayBuffer buf = new ByteArrayBuffer ( capacity ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( _NUM ) ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( capacity - _NUM ) ) ; final int pos = _NUM ; for ( int i = _NUM ; i < LIMIT ; i ++ ) { final byte [ ] expected = new byte [ r . nextInt ( capacity - _NUM ) ] ; r . nextBytes ( expected ) ; buf . put ( pos , expected ) ; assertEquals ( _NUM , BytesUtil . compareBytesWithLenAndOffset ( _NUM , expected . length , expected , pos , expected . length , buf . array ( ) ) ) ; final byte [ ] actual = new byte [ expected . length ] ; buf . get ( pos , actual ) ; assertTrue ( BytesUtil . bytesEqual ( expected , actual ) ) ; } assertEquals ( ( byte ) _NUM , buf . getByte ( _NUM ) ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( pos + capacity - _NUM ) ) ; }
@ Override public void onAdded ( final RPObject object ) { if ( isUser ( object ) ) { if ( object . has ( _STR ) ) { adminlevel = object . getInt ( _STR ) ; } } }
private String local_number ( ) throws ParseException { StringBuilder s = new StringBuilder ( ) ; if ( debug ) dbg_enter ( _STR ) ; try { int lc = _NUM ; while ( lexer . hasMoreChars ( ) ) { char la = lexer . lookAhead ( _NUM ) ; if ( la == _STR || la == _STR || la == _STR || la == _STR || la == _STR || la == _STR || Lexer . isHexDigit ( la ) ) { lexer . consume ( _NUM ) ; s . append ( la ) ; lc ++ ; } else if ( lc > _NUM ) break ; else throw createParseException ( _STR + la ) ; } return s . toString ( ) ; } finally { if ( debug ) dbg_leave ( _STR ) ; } }
public void pathValuesToPixel ( List < Path > paths ) { for ( int i = _NUM ; i < paths . size ( ) ; i ++ ) { pathValueToPixel ( paths . get ( i ) ) ; } }
public static byte [ ] decode ( String s ) { return decode ( s . toCharArray ( ) ) ; }
public static void checkState ( boolean expression , Object errorMessage ) { if ( ExoPlayerLibraryInfo . ASSERTIONS_ENABLED && ! expression ) { throw new IllegalStateException ( String . valueOf ( errorMessage ) ) ; } }
public static void slideInFromTopAnimator ( @ NonNull List < Animator > animators , @ NonNull View view , RecyclerView recyclerView ) { alphaAnimator ( animators , view , _NUM ) ; animators . add ( ObjectAnimator . ofFloat ( view , _STR , - recyclerView . getMeasuredHeight ( ) > > _NUM , _NUM ) ) ; if ( FlexibleAdapter . DEBUG ) Log . v ( TAG , _STR ) ; }
MutableBigInteger ( MutableBigInteger val ) { intLen = val . intLen ; value = Arrays . copyOfRange ( val . value , val . offset , val . offset + intLen ) ; }
@ RequestMapping ( value = _STR ) public void ssoBindingError ( Locale locale , @ PathVariable ( value = _STR ) String tenant , HttpServletResponse response ) throws IOException { logger . info ( _STR + locale . toString ( ) + _STR + tenant ) ; ssoDefaultTenantError ( locale , response ) ; }
public CheckpointManager ( NetworkParameters params , @ Nullable InputStream inputStream ) throws IOException { this . params = checkNotNull ( params ) ; if ( inputStream == null ) inputStream = openStream ( params ) ; checkNotNull ( inputStream ) ; inputStream = new BufferedInputStream ( inputStream ) ; inputStream . mark ( _NUM ) ; int first = inputStream . read ( ) ; inputStream . reset ( ) ; if ( first == BINARY_MAGIC . charAt ( _NUM ) ) dataHash = readBinary ( inputStream ) ; else if ( first == TEXTUAL_MAGIC . charAt ( _NUM ) ) dataHash = readTextual ( inputStream ) ; else throw new IOException ( _STR ) ; }
public IndexSegmentIndex ( IRawStore store , Checkpoint checkpoint , IndexMetadata metadata , boolean readOnly ) { super ( store , checkpoint , metadata , readOnly ) ; }
private String liveness ( ) { boolean isClosed = _BOOL ; try { if ( isClosed ( ) ) { isClosed = _BOOL ; } } catch ( SQLException s ) { isClosed = _BOOL ; } if ( isClosed ) { return _STR ; } return _STR ; }
private static void insertValue ( final Map < String , List < String > > paramsMap , final String paramVal , final String parameterName ) { if ( paramVal != null ) { List < String > list = new ArrayList < > ( ) ; list . add ( paramVal ) ; paramsMap . put ( parameterName , list ) ; } }
public Dimension minimumLayoutSize ( Container target ) { Dimension size ; synchronized ( this ) { checkContainer ( target ) ; checkRequests ( ) ; size = new Dimension ( xTotal . minimum , yTotal . minimum ) ; } Insets insets = target . getInsets ( ) ; size . width = ( int ) Math . min ( ( long ) size . width + ( long ) insets . left + ( long ) insets . right , Integer . MAX_VALUE ) ; size . height = ( int ) Math . min ( ( long ) size . height + ( long ) insets . top + ( long ) insets . bottom , Integer . MAX_VALUE ) ; return size ; }
private static void solve_l2r_l1l2_svr ( Problem prob , double [ ] w , Parameter param ) { int l = prob . l ; double C = param . C ; double p = param . p ; int w_size = prob . n ; double eps = param . eps ; int i , s , iter = _NUM ; int max_iter = param . getMaxIters ( ) ; int active_size = l ; int [ ] index = new int [ l ] ; double d , G , H ; double Gmax_old = Double . POSITIVE_INFINITY ; double Gmax_new , Gnorm1_new ; double Gnorm1_init = - _NUM ; double [ ] beta = new double [ l ] ; double [ ] QD = new double [ l ] ; double [ ] y = prob . y ; double [ ] lambda = new double [ ] { _NUM / C } ; double [ ] upper_bound = new double [ ] { Double . POSITIVE_INFINITY } ; if ( param . solverType == SolverType . L2R_L1LOSS_SVR_DUAL ) { lambda [ _NUM ] = _NUM ; upper_bound [ _NUM ] = C ; } for ( i = _NUM ; i < l ; i ++ ) beta [ i ] = _NUM ; for ( i = _NUM ; i < w_size ; i ++ ) w [ i ] = _NUM ; for ( i = _NUM ; i < l ; i ++ ) { QD [ i ] = _NUM ; for ( Feature xi : prob . x [ i ] ) { double val = xi . getValue ( ) ; QD [ i ] += val * val ; w [ xi . getIndex ( ) - _NUM ] += beta [ i ] * val ; } index [ i ] = i ; } while ( iter < max_iter ) { Gmax_new = _NUM ; Gnorm1_new = _NUM ; for ( i = _NUM ; i < active_size ; i ++ ) { int j = i + random . nextInt ( active_size - i ) ; swap ( index , i , j ) ; } for ( s = _NUM ; s < active_size ; s ++ ) { i = index [ s ] ; G = - y [ i ] + lambda [ GETI_SVR ( i ) ] * beta [ i ] ; H = QD [ i ] + lambda [ GETI_SVR ( i ) ] ; for ( Feature xi : prob . x [ i ] ) { int ind = xi . getIndex ( ) - _NUM ; double val = xi . getValue ( ) ; G += val * w [ ind ] ; } double Gp = G + p ; double Gn = G - p ; double violation = _NUM ; if ( beta [ i ] == _NUM ) { if ( Gp < _NUM ) violation = - Gp ; else if ( Gn > _NUM ) violation = Gn ; else if ( Gp > Gmax_old && Gn < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] >= upper_bound [ GETI_SVR ( i ) ] ) { if ( Gp > _NUM ) violation = Gp ; else if ( Gp < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] <= - upper_bound [ GETI_SVR ( i ) ] ) { if ( Gn < _NUM ) violation = - Gn ; else if ( Gn > Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] > _NUM ) violation = Math . abs ( Gp ) ; else violation = Math . abs ( Gn ) ; Gmax_new = Math . max ( Gmax_new , violation ) ; Gnorm1_new += violation ; if ( Gp < H * beta [ i ] ) d = - Gp / H ; else if ( Gn > H * beta [ i ] ) d = - Gn / H ; else d = - beta [ i ] ; if ( Math . abs ( d ) < _NUM ) continue ; double beta_old = beta [ i ] ; beta [ i ] = Math . min ( Math . max ( beta [ i ] + d , - upper_bound [ GETI_SVR ( i ) ] ) , upper_bound [ GETI_SVR ( i ) ] ) ; d = beta [ i ] - beta_old ; if ( d != _NUM ) { for ( Feature xi : prob . x [ i ] ) { w [ xi . getIndex ( ) - _NUM ] += d * xi . getValue ( ) ; } } } if ( iter == _NUM ) Gnorm1_init = Gnorm1_new ; iter ++ ; if ( iter % _NUM == _NUM ) info ( _STR ) ; if ( Gnorm1_new <= eps * Gnorm1_init ) { if ( active_size == l ) break ; else { active_size = l ; info ( _STR ) ; Gmax_old = Double . POSITIVE_INFINITY ; continue ; } } Gmax_old = Gmax_new ; } info ( _STR , iter ) ; if ( iter >= max_iter ) info ( _STR ) ; double v = _NUM ; int nSV = _NUM ; for ( i = _NUM ; i < w_size ; i ++ ) v += w [ i ] * w [ i ] ; v = _NUM * v ; for ( i = _NUM ; i < l ; i ++ ) { v += p * Math . abs ( beta [ i ] ) - y [ i ] * beta [ i ] + _NUM * lambda [ GETI_SVR ( i ) ] * beta [ i ] * beta [ i ] ; if ( beta [ i ] != _NUM ) nSV ++ ; } info ( _STR , v ) ; info ( _STR , nSV ) ; }
public boolean select ( int position ) { View v = mAllList . get ( position ) ; if ( mMultiChoiceAdapter != null ) { performVibrate ( ) ; performSelect ( v , position , _BOOL ) ; return _BOOL ; } return _BOOL ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > result = new Vector < Option > ( ) ; result . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; result . addAll ( Collections . list ( super . listOptions ( ) ) ) ; return result . elements ( ) ; }
@ Override public void ignorableWhitespace ( XMLString text , Augmentations augs ) throws XNIException { if ( ! fIncludeIgnorableWhitespace || fFilterReject ) { return ; } if ( ! fDeferNodeExpansion ) { Node child = fCurrentNode . getLastChild ( ) ; if ( child != null && child . getNodeType ( ) == Node . TEXT_NODE ) { Text textNode = ( Text ) child ; textNode . appendData ( text . toString ( ) ) ; } else { Text textNode = fDocument . createTextNode ( text . toString ( ) ) ; if ( fDocumentImpl != null ) { TextImpl textNodeImpl = ( TextImpl ) textNode ; textNodeImpl . setIgnorableWhitespace ( _BOOL ) ; } fCurrentNode . appendChild ( textNode ) ; } } else { int txt = fDeferredDocumentImpl . createDeferredTextNode ( text . toString ( ) , _BOOL ) ; fDeferredDocumentImpl . appendChild ( fCurrentNodeIndex , txt ) ; } }
private static final void waitForEditorToBeActive ( IEditorPart internalFileEditor , IWorkbenchPage page ) { long start = System . currentTimeMillis ( ) ; long end = start ; do { end = System . currentTimeMillis ( ) ; } while ( page . getActiveEditor ( ) != internalFileEditor && ( end - start ) < _NUM ) ; if ( page . getActiveEditor ( ) != internalFileEditor ) logger . warn ( _STR ) ; }
private Solution largestObjectiveValue ( int objective , Population population ) { Solution largest = null ; double value = Double . NEGATIVE_INFINITY ; for ( Solution solution : population ) { if ( solution . getObjective ( objective ) > value ) { largest = solution ; value = solution . getObjective ( objective ) ; } } return largest ; }
public static int convertLatmToY ( int latm ) { long v = Math . round ( ( Mercator . MAX_Y - Mercator . lat2y ( latm / LATLON_TO_LATLONM ) ) * MAX_AP_UNITS / ( Mercator . MAX_Y * _NUM ) ) ; if ( v > MAX_AP_UNITS ) return MAX_AP_UNITS ; if ( v < _NUM ) return - _NUM ; return ( int ) v ; }
public void registerCallbackHandler ( SMSObjectListener changeListener ) throws SMSException { objectListener = changeListener ; if ( ! notificationInitialized ) { String notificationFlag = SystemProperties . get ( NOTIFICATION_PROPERTY , _STR ) ; if ( notificationFlag . equalsIgnoreCase ( _STR ) ) { try { URL url = WebtopNaming . getNotificationURL ( ) ; PLLClient . addNotificationHandler ( JAXRPCUtil . SMS_SERVICE , new SMSNotificationHandler ( ) ) ; client . send ( _STR , url . toString ( ) , null , null ) ; if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + url ) ; } } catch ( Exception e ) { if ( debug . warningEnabled ( ) ) { debug . warning ( _STR + _STR + e . getMessage ( ) + _STR ) ; } startPollingThreadIfEnabled ( getCachePollingInterval ( ) ) ; } } else { startPollingThreadIfEnabled ( getCachePollingInterval ( ) ) ; } notificationInitialized = _BOOL ; } }
public static NSObject parse ( InputStream in ) throws ParseException , IOException { byte [ ] buf = PropertyListParser . readAll ( in ) ; in . close ( ) ; return parse ( buf ) ; }
protected double currentScoreFunction ( ) { double score = _NUM ; for ( int i = _NUM ; i < this . values [ this . currentVar1 ] . length ; i ++ ) { for ( int j = _NUM ; j < this . values [ this . currentVar2 ] . length ; j ++ ) { score -= this . currentCounts [ this . currentVar1 ] [ this . currentVar2 ] [ i ] [ j ] * Math . log ( this . currentPi [ i ] [ j ] ) ; } } return score ; }
public grammaticalityEstimator ( Set FileNames , int iMinChar , int iMaxChar , int iCharWindow , int iMinWord , int iMaxWord , int iWordWindow ) { iMinCharNGram = iMinChar ; iMaxCharNGram = iMaxChar ; iMinWordNGram = iMinWord ; iMaxWordNGram = iMaxWord ; iWordDist = iWordWindow ; iCharDist = iCharWindow ; DistroDocs = new TreeMap < Integer , DistributionDocument > ( ) ; DistroWordDocs = new TreeMap < Integer , DistributionWordDocument > ( ) ; StringBuffer sb = new StringBuffer ( ) ; Iterator iTexts = FileNames . iterator ( ) ; while ( iTexts . hasNext ( ) ) { String sFile = ( String ) iTexts . next ( ) ; try { BufferedReader bf = new BufferedReader ( new FileReader ( sFile ) ) ; String sTmp ; while ( ( sTmp = bf . readLine ( ) ) != null ) sb . append ( sTmp ) ; bf . close ( ) ; } catch ( FileNotFoundException ex ) { ex . printStackTrace ( System . err ) ; } catch ( IOException ex ) { ex . printStackTrace ( System . err ) ; } sb . append ( ( char ) _NUM ) ; } FullTextDataString = sb . toString ( ) ; for ( int iCnt = iMinCharNGram ; iCnt <= iMaxCharNGram ; iCnt ++ ) { DistroDocs . put ( iCnt , new DistributionDocument ( iCharDist , iCnt ) ) ; } for ( int iCnt = iMinWordNGram ; iCnt <= iMaxWordNGram ; iCnt ++ ) { DistroWordDocs . put ( iCnt , new DistributionWordDocument ( iWordDist , iCnt ) ) ; } }
private int checkZoneLink ( SpannableStringBuilder out , String in , int start ) { int pos = start + _NUM ; StringBuilder temp = new StringBuilder ( ) ; String targetString = in . substring ( pos , Math . min ( in . length ( ) , pos + _NUM ) ) ; boolean prevIsDash = _BOOL ; for ( int i = _NUM ; i < targetString . length ( ) ; i ++ ) { char c = targetString . charAt ( i ) ; if ( ( c >= _STR && c <= _STR ) || ( c >= _STR && c <= _STR ) ) { temp . append ( c ) ; prevIsDash = _BOOL ; } else if ( c == _STR ) { if ( i == _NUM ) { return - _NUM ; } if ( prevIsDash ) { temp . deleteCharAt ( temp . length ( ) - _NUM ) ; break ; } temp . append ( c ) ; prevIsDash = _BOOL ; } else { if ( prevIsDash ) { temp . deleteCharAt ( temp . length ( ) - _NUM ) ; } break ; } } String zone = temp . toString ( ) ; if ( zone . length ( ) < _NUM || zone . equalsIgnoreCase ( _STR ) ) { return - _NUM ; } out . append ( zone ) ; return pos + zone . length ( ) - _NUM ; }
public void checkNextPoissonConsistency ( double mean ) { final int sampleSize = _NUM ; final int minExpectedCount = _NUM ; long maxObservedValue = _NUM ; final double alpha = _NUM ; UnitTestUtils . Frequency < Long > frequency = new UnitTestUtils . Frequency < Long > ( ) ; for ( int i = _NUM ; i < sampleSize ; i ++ ) { long value = randomData . nextPoisson ( mean ) ; if ( value > maxObservedValue ) { maxObservedValue = value ; } frequency . addValue ( value ) ; } PoissonDistribution poissonDistribution = new PoissonDistribution ( mean ) ; int lower = _NUM ; while ( poissonDistribution . cumulativeProbability ( lower - _NUM ) * sampleSize < minExpectedCount ) { lower ++ ; } int upper = ( int ) ( _NUM * mean ) ; while ( ( _NUM - poissonDistribution . cumulativeProbability ( upper - _NUM ) ) * sampleSize < minExpectedCount ) { upper -- ; } int binWidth = _NUM ; boolean widthSufficient = _BOOL ; double lowerBinMass = _NUM ; double upperBinMass = _NUM ; while ( ! widthSufficient ) { binWidth ++ ; lowerBinMass = poissonDistribution . probability ( lower - _NUM , lower + binWidth - _NUM ) ; upperBinMass = poissonDistribution . probability ( upper - binWidth - _NUM , upper - _NUM ) ; widthSufficient = FastMath . min ( lowerBinMass , upperBinMass ) * sampleSize >= minExpectedCount ; } List < Integer > binBounds = new ArrayList < Integer > ( ) ; binBounds . add ( lower ) ; int bound = lower + binWidth ; while ( bound < upper - binWidth ) { binBounds . add ( bound ) ; bound += binWidth ; } binBounds . add ( upper ) ; final int binCount = binBounds . size ( ) + _NUM ; long [ ] observed = new long [ binCount ] ; double [ ] expected = new double [ binCount ] ; observed [ _NUM ] = _NUM ; for ( int i = _NUM ; i < lower ; i ++ ) { observed [ _NUM ] += frequency . getCount ( ( long ) i ) ; } expected [ _NUM ] = poissonDistribution . cumulativeProbability ( lower - _NUM ) * sampleSize ; observed [ binCount - _NUM ] = _NUM ; for ( int i = upper ; i <= maxObservedValue ; i ++ ) { observed [ binCount - _NUM ] += frequency . getCount ( ( long ) i ) ; } expected [ binCount - _NUM ] = ( _NUM - poissonDistribution . cumulativeProbability ( upper - _NUM ) ) * sampleSize ; for ( int i = _NUM ; i < binCount - _NUM ; i ++ ) { observed [ i ] = _NUM ; for ( int j = binBounds . get ( i - _NUM ) ; j < binBounds . get ( i ) ; j ++ ) { observed [ i ] += frequency . getCount ( ( long ) j ) ; } expected [ i ] = ( poissonDistribution . cumulativeProbability ( binBounds . get ( i ) - _NUM ) - poissonDistribution . cumulativeProbability ( binBounds . get ( i - _NUM ) - _NUM ) ) * sampleSize ; } if ( UnitTestUtils . chiSquareTest ( expected , observed ) < alpha ) { StringBuilder msgBuffer = new StringBuilder ( ) ; DecimalFormat df = new DecimalFormat ( _STR ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( mean ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( UnitTestUtils . chiSquareTest ( expected , observed ) ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( UnitTestUtils . chiSquare ( expected , observed ) ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( _STR ) ; for ( int i = _NUM ; i < expected . length ; i ++ ) { msgBuffer . append ( _STR ) ; msgBuffer . append ( i == _NUM ? _NUM : binBounds . get ( i - _NUM ) ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( i == binBounds . size ( ) ? _STR : binBounds . get ( i ) ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( df . format ( expected [ i ] ) ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( observed [ i ] ) ; msgBuffer . append ( _STR ) ; } msgBuffer . append ( _STR ) ; msgBuffer . append ( alpha ) ; msgBuffer . append ( _STR ) ; Assert . fail ( msgBuffer . toString ( ) ) ; } }
public static void checkValid ( double [ ] x ) { for ( double v : x ) { if ( Double . isNaN ( v ) ) { throw new RuntimeException ( _STR + v ) ; } } }
final void layoutChildren ( boolean queryAdapter ) { final int paddingLeft = getPaddingLeft ( ) ; final int paddingRight = getPaddingRight ( ) ; final int itemMargin = mItemMargin ; final int colWidth = ( getWidth ( ) - paddingLeft - paddingRight - itemMargin * ( mColCount - _NUM ) ) / mColCount ; mColWidth = colWidth ; int rebuildLayoutRecordsBefore = - _NUM ; int rebuildLayoutRecordsAfter = - _NUM ; Arrays . fill ( mItemBottoms , Integer . MIN_VALUE ) ; final int childCount = getChildCount ( ) ; int amountRemoved = _NUM ; for ( int i = _NUM ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; final int col = lp . column ; final int position = mFirstPosition + i ; final boolean needsLayout = queryAdapter || child . isLayoutRequested ( ) ; if ( queryAdapter ) { View newView = obtainView ( position , child ) ; if ( newView == null ) { removeViewAt ( i ) ; if ( i - _NUM >= _NUM ) invalidateLayoutRecordsAfterPosition ( i - _NUM ) ; amountRemoved ++ ; continue ; } else if ( newView != child ) { removeViewAt ( i ) ; addView ( newView , i ) ; child = newView ; } lp = ( LayoutParams ) child . getLayoutParams ( ) ; } final int span = Math . min ( mColCount , lp . span ) ; final int widthSize = colWidth * span + itemMargin * ( span - _NUM ) ; if ( needsLayout ) { final int widthSpec = MeasureSpec . makeMeasureSpec ( widthSize , MeasureSpec . EXACTLY ) ; final int heightSpec ; if ( lp . height == LayoutParams . WRAP_CONTENT ) { heightSpec = MeasureSpec . makeMeasureSpec ( _NUM , MeasureSpec . UNSPECIFIED ) ; } else { heightSpec = MeasureSpec . makeMeasureSpec ( lp . height , MeasureSpec . EXACTLY ) ; } child . measure ( widthSpec , heightSpec ) ; } int childTop = mItemBottoms [ col ] > Integer . MIN_VALUE ? mItemBottoms [ col ] + mItemMargin : child . getTop ( ) ; if ( span > _NUM ) { int lowest = childTop ; for ( int j = col + _NUM ; j < col + span ; j ++ ) { final int bottom = mItemBottoms [ j ] + mItemMargin ; if ( bottom > lowest ) { lowest = bottom ; } } childTop = lowest ; } final int childHeight = child . getMeasuredHeight ( ) ; final int childBottom = childTop + childHeight ; final int childLeft = paddingLeft + col * ( colWidth + itemMargin ) ; final int childRight = childLeft + child . getMeasuredWidth ( ) ; child . layout ( childLeft , childTop , childRight , childBottom ) ; for ( int j = col ; j < col + span ; j ++ ) { mItemBottoms [ j ] = childBottom ; } final LayoutRecord rec = mLayoutRecords . get ( position ) ; if ( rec != null && rec . height != childHeight ) { rec . height = childHeight ; rebuildLayoutRecordsBefore = position ; } if ( rec != null && rec . span != span ) { rec . span = span ; rebuildLayoutRecordsAfter = position ; } } for ( int i = _NUM ; i < mColCount ; i ++ ) { if ( mItemBottoms [ i ] == Integer . MIN_VALUE ) { mItemBottoms [ i ] = mItemTops [ i ] ; } } if ( rebuildLayoutRecordsBefore >= _NUM || rebuildLayoutRecordsAfter >= _NUM ) { if ( rebuildLayoutRecordsBefore >= _NUM ) { invalidateLayoutRecordsBeforePosition ( rebuildLayoutRecordsBefore ) ; } if ( rebuildLayoutRecordsAfter >= _NUM ) { invalidateLayoutRecordsAfterPosition ( rebuildLayoutRecordsAfter ) ; } for ( int i = _NUM ; i < ( childCount - amountRemoved ) ; i ++ ) { final int position = mFirstPosition + i ; final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; LayoutRecord rec = mLayoutRecords . get ( position ) ; if ( rec == null ) { rec = new LayoutRecord ( ) ; mLayoutRecords . put ( position , rec ) ; } rec . column = lp . column ; rec . height = child . getHeight ( ) ; rec . id = lp . id ; rec . span = Math . min ( mColCount , lp . span ) ; } } if ( this . mSelectorPosition != INVALID_POSITION ) { View child = getChildAt ( mMotionPosition - mFirstPosition ) ; if ( child != null ) positionSelector ( mMotionPosition , child ) ; } else if ( mTouchMode > TOUCH_MODE_DOWN ) { View child = getChildAt ( mMotionPosition - mFirstPosition ) ; if ( child != null ) positionSelector ( mMotionPosition , child ) ; } else { mSelectorRect . setEmpty ( ) ; } }
protected void processConnectionEvent ( ConnectionEvent event ) { for ( Enumeration < ConnectionListener > e = connectionListeners . elements ( ) ; e . hasMoreElements ( ) ; ) { ConnectionListener l = e . nextElement ( ) ; switch ( event . getType ( ) ) { case ConnectionEvent . CONNECTED : l . connected ( ( ConnectedEvent ) event ) ; break ; case ConnectionEvent . DISCONNECTED : l . disconnected ( ( DisconnectedEvent ) event ) ; break ; case ConnectionEvent . PACKET_RECEIVED : l . packetReceived ( ( PacketReceivedEvent ) event ) ; break ; } } }
public double percentage ( ConstantRange range ) { SortedSet < Constant > sorted = values ( ) ; SortedSet < Constant > contained = new TreeSet < Constant > ( ) ; Constant prev = null ; for ( Constant pct : sorted ) { if ( range . contains ( pct ) ) contained . add ( pct ) ; else if ( contained . isEmpty ( ) ) prev = pct ; } if ( contained . size ( ) == _NUM ) return _NUM ; double prevPercent = prev == null ? _NUM : pcts . get ( prev ) ; return pcts . get ( contained . last ( ) ) - prevPercent ; }
public static void closeQuiet ( @ Nullable Closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( IOException ignored ) { } } }
@ Override public void releaseLuceePageContext ( PageContext pc , boolean register ) { if ( pc . getId ( ) < _NUM ) return ; pc . release ( ) ; ThreadLocalPageContext . release ( ) ; runningPcs . remove ( Integer . valueOf ( pc . getId ( ) ) ) ; if ( pcs . size ( ) < _NUM && pc . getRequestTimeoutException ( ) == null ) pcs . push ( pc ) ; }
public void addEventListener ( SIPDialogEventListener newListener ) { eventListeners . add ( newListener ) ; }
private boolean journalRebuildRequired ( ) { final int redundantOpCompactThreshold = _NUM ; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries . size ( ) ; }
private static byte [ ] stringToByteArray ( String str ) { if ( str == null ) { return null ; } byte [ ] srcByte = str . getBytes ( ) ; int srcLength = srcByte . length ; byte [ ] result = new byte [ srcLength + _NUM ] ; System . arraycopy ( srcByte , _NUM , result , _NUM , srcLength ) ; result [ srcLength ] = _NUM ; return result ; }
public static Properties loadProperties ( ClassLoader classLoader , String classpathResource ) { return loadProperties ( null , classpathResource ) ; }
@ Override public boolean equals ( Object o ) { if ( o instanceof Graph ) { return string . equals ( o . toString ( ) ) ; } return _BOOL ; }
public final static NameValuePair parseNameValuePair ( final String value , HeaderValueParser parser ) throws ParseException { if ( value == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( parser == null ) parser = SaveHeaderValueParser . DEFAULT ; CharArrayBuffer buffer = new CharArrayBuffer ( value . length ( ) ) ; buffer . append ( value ) ; SaveParserCursor cursor = new SaveParserCursor ( _NUM , value . length ( ) ) ; return parser . parseNameValuePair ( buffer , cursor ) ; }
private void pullEvent ( ) { final int newScrollValue ; final int itemDimension ; final float initialMotionValue , lastMotionValue ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : initialMotionValue = mInitialMotionX ; lastMotionValue = mLastMotionX ; break ; case VERTICAL : default : initialMotionValue = mInitialMotionY ; lastMotionValue = mLastMotionY ; break ; } switch ( mCurrentMode ) { case PULL_FROM_END : newScrollValue = Math . round ( Math . max ( initialMotionValue - lastMotionValue , _NUM ) / FRICTION ) ; itemDimension = getFooterSize ( ) ; break ; case PULL_FROM_START : default : newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , _NUM ) / FRICTION ) ; itemDimension = getHeaderSize ( ) ; break ; } setHeaderScroll ( newScrollValue ) ; if ( newScrollValue != _NUM && ! isRefreshing ( ) ) { float scale = Math . abs ( newScrollValue ) / ( float ) itemDimension ; switch ( mCurrentMode ) { case PULL_FROM_END : mFooterLayout . onPull ( scale ) ; break ; case PULL_FROM_START : default : mHeaderLayout . onPull ( scale ) ; break ; } if ( mState != State . PULL_TO_REFRESH && itemDimension >= Math . abs ( newScrollValue ) ) { setState ( State . PULL_TO_REFRESH ) ; } else if ( mState == State . PULL_TO_REFRESH && itemDimension < Math . abs ( newScrollValue ) ) { setState ( State . RELEASE_TO_REFRESH ) ; } } }
private static MappingObject ObjectAt ( PCalLocation loc , MappingObject [ ] [ ] map ) { return map [ loc . getLine ( ) ] [ loc . getColumn ( ) ] ; }
public String parse ( File file , JSON m ) { try { Template template = getTemplate ( file ) ; if ( template != null ) { StringWriter w = new StringWriter ( ) ; BufferedWriter writer = new BufferedWriter ( w ) ; template . merge ( new VelocityContext ( m ) , writer ) ; writer . flush ( ) ; writer . close ( ) ; return w . toString ( ) ; } } catch ( Exception e ) { log . error ( e . getMessage ( ) , e ) ; } return null ; }
private LinkedList < Diff > diff_main ( String text1 , String text2 , boolean checklines , long deadline ) { if ( text1 == null || text2 == null ) { throw new IllegalArgumentException ( _STR ) ; } LinkedList < Diff > diffs ; if ( text1 . equals ( text2 ) ) { diffs = new LinkedList < Diff > ( ) ; if ( text1 . length ( ) != _NUM ) { diffs . add ( new Diff ( Operation . EQUAL , text1 ) ) ; } return diffs ; } int commonlength = diff_commonPrefix ( text1 , text2 ) ; String commonprefix = text1 . substring ( _NUM , commonlength ) ; text1 = text1 . substring ( commonlength ) ; text2 = text2 . substring ( commonlength ) ; commonlength = diff_commonSuffix ( text1 , text2 ) ; String commonsuffix = text1 . substring ( text1 . length ( ) - commonlength ) ; text1 = text1 . substring ( _NUM , text1 . length ( ) - commonlength ) ; text2 = text2 . substring ( _NUM , text2 . length ( ) - commonlength ) ; diffs = diff_compute ( text1 , text2 , checklines , deadline ) ; if ( commonprefix . length ( ) != _NUM ) { diffs . addFirst ( new Diff ( Operation . EQUAL , commonprefix ) ) ; } if ( commonsuffix . length ( ) != _NUM ) { diffs . addLast ( new Diff ( Operation . EQUAL , commonsuffix ) ) ; } diff_cleanupMerge ( diffs ) ; return diffs ; }
public Repository ( String domain , boolean fairLock ) { lock = new ReentrantReadWriteLock ( fairLock ) ; domainTb = new HashMap < String , Map < String , NamedObject > > ( _NUM ) ; if ( domain != null && domain . length ( ) != _NUM ) this . domain = domain . intern ( ) ; else this . domain = ServiceName . DOMAIN ; domainTb . put ( this . domain , new HashMap < String , NamedObject > ( ) ) ; }
public int countTokens ( ) { int count = _NUM ; boolean inToken = _BOOL ; for ( int i = position , length = string . length ( ) ; i < length ; i ++ ) { if ( delimiters . indexOf ( string . charAt ( i ) , _NUM ) >= _NUM ) { if ( returnDelimiters ) count ++ ; if ( inToken ) { count ++ ; inToken = _BOOL ; } } else { inToken = _BOOL ; } } if ( inToken ) count ++ ; return count ; }
public static synchronized void indexDocument ( CodeIndexDocument codeIndexDocument ) throws IOException { Queue < CodeIndexDocument > queue = new ConcurrentLinkedQueue < > ( ) ; queue . add ( codeIndexDocument ) ; indexDocuments ( queue ) ; queue = null ; }
protected void resetCommon ( ) throws XNIException { int count = fCommonComponents . size ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { XMLComponent c = ( XMLComponent ) fCommonComponents . get ( i ) ; c . reset ( this ) ; } }
private void updateVolumeLabels ( Volume trustedSrc , Volume invalidTgt ) { VirtualArray invalidTgtVA = dbClient . queryObject ( VirtualArray . class , invalidTgt . getVirtualArray ( ) ) ; StringBuilder newLabel = new StringBuilder ( ) ; newLabel . append ( trustedSrc . getLabel ( ) ) ; newLabel . append ( _STR ) ; newLabel . append ( invalidTgtVA . getLabel ( ) ) ; log . info ( _STR + newLabel . toString ( ) ) ; invalidTgt . setLabel ( newLabel . toString ( ) ) ; NamedURI projectURI = invalidTgt . getProject ( ) ; projectURI . setName ( newLabel . toString ( ) ) ; invalidTgt . setProject ( projectURI ) ; NamedURI tenantURI = invalidTgt . getTenant ( ) ; tenantURI . setName ( newLabel . toString ( ) ) ; invalidTgt . setTenant ( tenantURI ) ; Volume tgtVplexVolume = VPlexSrdfUtil . getVplexVolumeFromSrdfVolume ( dbClient , invalidTgt ) ; if ( tgtVplexVolume != null ) { Volume srcVplexVolume = VPlexSrdfUtil . getVplexVolumeFromSrdfVolume ( dbClient , trustedSrc ) ; if ( srcVplexVolume != null ) { newLabel . setLength ( _NUM ) ; newLabel . append ( srcVplexVolume . getLabel ( ) ) ; newLabel . append ( _STR ) ; newLabel . append ( invalidTgtVA . getLabel ( ) ) ; log . info ( _STR + newLabel . toString ( ) ) ; tgtVplexVolume . setLabel ( newLabel . toString ( ) ) ; projectURI = tgtVplexVolume . getProject ( ) ; projectURI . setName ( newLabel . toString ( ) ) ; tgtVplexVolume . setProject ( projectURI ) ; tenantURI = tgtVplexVolume . getTenant ( ) ; tenantURI . setName ( newLabel . toString ( ) ) ; tgtVplexVolume . setTenant ( tenantURI ) ; dbClient . updateAndReindexObject ( tgtVplexVolume ) ; } } }
protected void handle ( Exception exception , String title , String message ) { Utils . handleError ( getShell ( ) , exception , title , message ) ; }
private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject ( ) ; i18n = Environment . getI18n ( ) ; beanContextChildSupport = new BeanContextChildSupport ( this ) ; }
private void paintForegroundEnabled ( Graphics2D g , int width , int height ) { Shape s = decodeArrowPath ( width , height ) ; g . setPaint ( enabledColor ) ; g . fill ( s ) ; }
private static void logThrow ( Level level , String className , String methodName , String message , Object [ ] args , Throwable thrown ) { java . util . logging . LogRecord lr = new java . util . logging . LogRecord ( level , message ) ; lr . setLoggerName ( logger . getName ( ) ) ; lr . setSourceClassName ( className ) ; lr . setSourceMethodName ( methodName ) ; lr . setParameters ( args ) ; lr . setThrown ( thrown ) ; logger . log ( lr ) ; }
public void testToBigIntegerZero ( ) { String a = _STR ; BigInteger bNumber = new BigInteger ( _STR ) ; BigDecimal aNumber = new BigDecimal ( a ) ; BigInteger result = aNumber . toBigInteger ( ) ; assertTrue ( _STR , result . equals ( bNumber ) ) ; }
public void onAccuracyChanged ( Sensor sensor , int accuracy ) { if ( sensor . getType ( ) != Sensor . TYPE_ACCELEROMETER ) { return ; } if ( this . status == AccelListener . STOPPED ) { return ; } this . accuracy = accuracy ; }
public boolean allowsTrailingArguments ( ) { return allowsTrailingArguments ; }
@ AndroidOnly ( _STR + _STR ) public void testSetMaxCRLNumberLjava_math_BigInteger ( ) { X509CRLSelector selector = new X509CRLSelector ( ) ; BigInteger maxCRL = new BigInteger ( _STR ) ; TestCRL crl = new TestCRL ( maxCRL ) ; selector . setMaxCRLNumber ( null ) ; assertTrue ( _STR , selector . match ( crl ) ) ; selector . setMaxCRLNumber ( maxCRL ) ; assertTrue ( _STR , selector . match ( crl ) ) ; selector . setMaxCRLNumber ( new BigInteger ( _STR ) ) ; assertFalse ( _STR , selector . match ( crl ) ) ; }
private void evaluatePopup ( MouseEvent e ) { if ( e . isPopupTrigger ( ) ) { JPopupMenu menu = createBookmarkPopupMenu ( ) ; if ( menu != null ) { menu . show ( this , e . getX ( ) , e . getY ( ) ) ; } } }
private boolean removeTask ( Task t , int min ) { for ( int i = tasks . size ( ) ; -- i >= min ; ) { if ( tasks . get ( i ) == t ) { tasks . remove ( i ) ; if ( i < firstPending ) { firstPending -- ; for ( int j = threads . size ( ) ; -- j >= _NUM ; ) { TaskThread thread = threads . get ( j ) ; if ( thread . task == t ) { if ( thread != Thread . currentThread ( ) ) thread . interrupt ( ) ; break ; } } } return _BOOL ; } } return _BOOL ; }
public void test_DivideBigDecimalRoundingModeHALF_UP ( ) { String a = _STR ; String b = _STR ; RoundingMode rm = RoundingMode . HALF_UP ; String c = _STR ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) ) ; BigDecimal result = aNumber . divide ( bNumber , rm ) ; assertEquals ( _STR , c , result . toString ( ) ) ; }
protected void ensurePathExists ( String path ) { String [ ] paths = path . split ( _STR ) ; StringBuffer spath = new StringBuffer ( _STR ) ; for ( String temp : paths ) { if ( StringUtils . isBlank ( temp ) ) { continue ; } spath . append ( temp ) ; ensureExists ( spath . toString ( ) , null , acl , CreateMode . PERSISTENT ) ; spath . append ( _STR ) ; } }
public Class < ? > loadClass ( String name , boolean resolve ) throws ClassNotFoundException { int i = name . lastIndexOf ( _STR ) ; if ( i != - _NUM ) { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPackageAccess ( name . substring ( _NUM , i ) ) ; } } if ( ucp . knownToNotExist ( name ) ) { Class < ? > c = findLoadedClass ( name ) ; if ( c != null ) { if ( resolve ) { resolveClass ( c ) ; } return c ; } throw new ClassNotFoundException ( name ) ; } return ( super . loadClass ( name , resolve ) ) ; }
private int measureShort ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) ( _NUM * mRadius + getPaddingTop ( ) + getPaddingBottom ( ) + _NUM ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
private boolean isListChildUnderClipped ( float x , float y ) { final View listChild = findListChildUnder ( x , y ) ; return listChild != null && isDescendantClipped ( listChild ) ; }
Rules ( Workspace workspace ) { this . root = workspace . getRoot ( ) ; this . teamHook = workspace . getTeamHook ( ) ; }
public static void writeByteArrayToFile ( File file , byte [ ] data , boolean append ) throws IOException { OutputStream out = null ; try { out = openOutputStream ( file , append ) ; out . write ( data ) ; out . close ( ) ; } finally { IOUtils . closeQuietly ( out ) ; } }
public void add ( @ NonNull T item ) { synchronized ( lock ) { if ( items == null ) { items = new ArrayList < > ( ) ; } items . add ( item ) ; } if ( notifyOnChange ) { notifyItemInserted ( items . size ( ) ) ; } }
private void checkPendingCustomMessages ( ) { if ( joiningNodes . isEmpty ( ) && isLocalNodeCoordinator ( ) ) { TcpDiscoveryCustomEventMessage msg ; while ( ( msg = pendingCustomMsgs . poll ( ) ) != null ) { processCustomMessage ( msg ) ; if ( msg . verified ( ) ) msgHist . add ( msg ) ; } } }
private static int determineConsecutiveDigitCount ( CharSequence msg , int startpos ) { int count = _NUM ; int len = msg . length ( ) ; int idx = startpos ; if ( idx < len ) { char ch = msg . charAt ( idx ) ; while ( isDigit ( ch ) && idx < len ) { count ++ ; idx ++ ; if ( idx < len ) { ch = msg . charAt ( idx ) ; } } } return count ; }
protected int parseAndAddNode ( XmlResourceParser parser , HashMap < String , TagParser > tagParserMap , ArrayList < Long > screenIds ) throws XmlPullParserException , IOException { if ( TAG_INCLUDE . equals ( parser . getName ( ) ) ) { final int resId = getAttributeResourceValue ( parser , ATTR_WORKSPACE , _NUM ) ; if ( resId != _NUM ) { return parseLayout ( resId , screenIds ) ; } else { return _NUM ; } } mValues . clear ( ) ; parseContainerAndScreen ( parser , mTemp ) ; final long container = mTemp [ _NUM ] ; final long screenId = mTemp [ _NUM ] ; mValues . put ( Favorites . CONTAINER , container ) ; mValues . put ( Favorites . SCREEN , screenId ) ; mValues . put ( Favorites . CELLX , convertToDistanceFromEnd ( getAttributeValue ( parser , ATTR_X ) , mColumnCount ) ) ; mValues . put ( Favorites . CELLY , convertToDistanceFromEnd ( getAttributeValue ( parser , ATTR_Y ) , mRowCount ) ) ; TagParser tagParser = tagParserMap . get ( parser . getName ( ) ) ; if ( tagParser == null ) { if ( LOGD ) Log . d ( TAG , _STR + parser . getName ( ) ) ; return _NUM ; } long newElementId = tagParser . parseAndAdd ( parser ) ; if ( newElementId >= _NUM ) { if ( ! screenIds . contains ( screenId ) && container == Favorites . CONTAINER_DESKTOP ) { screenIds . add ( screenId ) ; } return _NUM ; } return _NUM ; }
private float calculateScrambleImageHeightMultiplier ( float multiplier ) { switch ( currentPuzzle ) { case PuzzleUtils . TYPE_777 : case PuzzleUtils . TYPE_666 : case PuzzleUtils . TYPE_555 : case PuzzleUtils . TYPE_222 : case PuzzleUtils . TYPE_444 : case PuzzleUtils . TYPE_333 : return ( multiplier / _NUM ) * _NUM ; case PuzzleUtils . TYPE_CLOCK : return multiplier / _NUM ; case PuzzleUtils . TYPE_MEGA : return ( multiplier / _NUM ) ; case PuzzleUtils . TYPE_PYRA : return ( float ) ( multiplier / Math . sqrt ( _NUM ) ) ; case PuzzleUtils . TYPE_SKEWB : return ( multiplier / _NUM ) * _NUM ; case PuzzleUtils . TYPE_SQUARE1 : return multiplier ; } return multiplier ; }
public void testNumericScalars ( ) throws Exception { ObjectMapper m = new ObjectMapper ( ) ; m . enableDefaultTyping ( ) ; assertEquals ( _STR , m . writeValueAsString ( new Object [ ] { Integer . valueOf ( _NUM ) } ) ) ; assertEquals ( _STR , m . writeValueAsString ( new Object [ ] { Long . valueOf ( _NUM ) } ) ) ; assertEquals ( _STR , m . writeValueAsString ( new Object [ ] { Double . valueOf ( _NUM ) } ) ) ; assertEquals ( _STR , m . writeValueAsString ( new Object [ ] { Float . valueOf ( _NUM ) } ) ) ; }
protected void closeCallbacksExceptListener ( ) { closeCacheCallback ( getCacheLoader ( ) ) ; closeCacheCallback ( getCacheWriter ( ) ) ; closeCacheCallback ( getEvictionController ( ) ) ; }
private static int indexOf ( Object o , Object [ ] elements , int index , int fence ) { if ( o == null ) { for ( int i = index ; i < fence ; i ++ ) if ( elements [ i ] == null ) return i ; } else { for ( int i = index ; i < fence ; i ++ ) if ( o . equals ( elements [ i ] ) ) return i ; } return - _NUM ; }
private void populateProfiles ( final ProfileList profiles ) { profilesComboBox . removeAllItems ( ) ; for ( Profile p : profiles ) { profilesComboBox . addItem ( p ) ; } final int count = profilesComboBox . getItemCount ( ) ; if ( count != _NUM ) { profilesComboBox . setSelectedIndex ( count - _NUM ) ; } }
private long checkFileHeader ( BufferedFileDataInput bfdi ) throws ReplicatorException , InterruptedException { int magic = _NUM ; short major = _NUM ; short minor = _NUM ; try { bfdi . waitAvailable ( HEADER_LENGTH , HEADER_WAIT_MILLIS ) ; magic = bfdi . readInt ( ) ; major = bfdi . readShort ( ) ; minor = bfdi . readShort ( ) ; baseSeqno = bfdi . readLong ( ) ; } catch ( IOException e ) { throw new THLException ( _STR + file . getAbsolutePath ( ) , e ) ; } if ( magic != MAGIC_NUMBER ) throw new THLException ( _STR + file . getAbsolutePath ( ) + _STR ) ; if ( major != MAJOR_VERSION ) throw new THLException ( _STR + file . getAbsolutePath ( ) + _STR ) ; if ( minor != MINOR_VERSION ) logger . warn ( _STR + file . getAbsolutePath ( ) + _STR + major + _STR + minor + _STR + MAJOR_VERSION + _STR + MINOR_VERSION ) ; return baseSeqno ; }
public float realAbsolute ( ) { return Math . abs ( mLeft ) ; }
private ExtremumType extremumType ( int n , double [ ] alpha_extreme , HyperBoundingBox interval ) { if ( n == alpha_extreme . length - _NUM ) { return extremumType ; } double [ ] alpha_extreme_l = new double [ alpha_extreme . length ] ; double [ ] alpha_extreme_r = new double [ alpha_extreme . length ] ; double [ ] alpha_extreme_c = new double [ alpha_extreme . length ] ; System . arraycopy ( alpha_extreme , _NUM , alpha_extreme_l , _NUM , alpha_extreme . length ) ; System . arraycopy ( alpha_extreme , _NUM , alpha_extreme_r , _NUM , alpha_extreme . length ) ; System . arraycopy ( alpha_extreme , _NUM , alpha_extreme_c , _NUM , alpha_extreme . length ) ; double [ ] centroid = SpatialUtil . centroid ( interval ) ; for ( int i = _NUM ; i < n ; i ++ ) { alpha_extreme_l [ i ] = centroid [ i ] ; alpha_extreme_r [ i ] = centroid [ i ] ; alpha_extreme_c [ i ] = centroid [ i ] ; } double intervalLength = interval . getMax ( n ) - interval . getMin ( n ) ; alpha_extreme_l [ n ] = Math . random ( ) * intervalLength + interval . getMin ( n ) ; alpha_extreme_r [ n ] = Math . random ( ) * intervalLength + interval . getMin ( n ) ; double f_c = function ( alpha_extreme_c ) ; double f_l = function ( alpha_extreme_l ) ; double f_r = function ( alpha_extreme_r ) ; if ( f_l < f_c ) { if ( f_r < f_c || Math . abs ( f_r - f_c ) < DELTA ) { return ExtremumType . MAXIMUM ; } } if ( f_r < f_c ) { if ( f_l < f_c || Math . abs ( f_l - f_c ) < DELTA ) { return ExtremumType . MAXIMUM ; } } if ( f_l > f_c ) { if ( f_r > f_c || Math . abs ( f_r - f_c ) < DELTA ) { return ExtremumType . MINIMUM ; } } if ( f_r > f_c ) { if ( f_l > f_c || Math . abs ( f_l - f_c ) < DELTA ) { return ExtremumType . MINIMUM ; } } if ( Math . abs ( f_l - f_c ) < DELTA && Math . abs ( f_r - f_c ) < DELTA ) { return ExtremumType . CONSTANT ; } throw new IllegalArgumentException ( _STR + this + _STR + _STR + f_l + _STR + _STR + f_c + _STR + _STR + f_r + _STR + _STR + vec . toArray ( ) + _STR + _STR + FormatUtil . format ( alpha_extreme_c ) + _STR + _STR + FormatUtil . format ( alpha_extreme_l ) + _STR + _STR + FormatUtil . format ( alpha_extreme_r ) + _STR + _STR + n ) ; }
public static String map2OID ( String algName ) { return alg2OidMap . get ( algName . toUpperCase ( Locale . US ) ) ; }
@ Override public Generator < ICircle > construct ( String [ ] args ) { return new UniformGenerator ( Double . valueOf ( args [ _NUM ] ) ) ; }
private boolean yy_refill ( ) throws java . io . IOException { if ( yy_startRead > _NUM ) { System . arraycopy ( yy_buffer , yy_startRead , yy_buffer , _NUM , yy_endRead - yy_startRead ) ; yy_endRead -= yy_startRead ; yy_currentPos -= yy_startRead ; yy_markedPos -= yy_startRead ; yy_pushbackPos -= yy_startRead ; yy_startRead = _NUM ; } if ( yy_currentPos >= yy_buffer . length ) { char newBuffer [ ] = new char [ yy_currentPos * _NUM ] ; System . arraycopy ( yy_buffer , _NUM , newBuffer , _NUM , yy_buffer . length ) ; yy_buffer = newBuffer ; } int numRead = yy_reader . read ( yy_buffer , yy_endRead , yy_buffer . length - yy_endRead ) ; if ( numRead < _NUM ) { return _BOOL ; } else { yy_endRead += numRead ; return _BOOL ; } }
protected void processMouseEvent ( MouseEvent e ) { if ( myInplaceComponent != null && ( MouseEvent . MOUSE_PRESSED == e . getID ( ) || MouseEvent . MOUSE_RELEASED == e . getID ( ) ) ) { finishEditing ( _BOOL ) ; } super . processMouseEvent ( e ) ; }
protected void addModule ( Map < Class < ? extends IFloodlightService > , IFloodlightModule > moduleMap , Collection < IFloodlightModule > moduleList , IFloodlightModule module ) { Collection < Class < ? extends IFloodlightService > > servs = moduleServiceMap . get ( module ) ; if ( servs != null ) { for ( Class < ? extends IFloodlightService > c : servs ) moduleMap . put ( c , module ) ; } moduleList . add ( module ) ; }
protected boolean hasAllTables ( ) throws CouldntLoadDataException , InvalidDatabaseException { NaviLogger . info ( _STR ) ; final int counter = PostgreSQLHelpers . getTableCount ( getConnection ( ) , Lists . newArrayList ( TABLES ) ) ; if ( counter == _NUM ) { return _BOOL ; } else if ( counter == TABLES . length ) { return _BOOL ; } else { throw new InvalidDatabaseException ( String . format ( _STR , counter , TABLES . length ) ) ; } }
public List < String > classify ( List < List < Feature > > features ) throws CleartkProcessingException { String [ ] [ ] featureStringArray = toStrings ( features ) ; Pipe pipe = transducer . getInputPipe ( ) ; Instance instance = new Instance ( featureStringArray , null , null , null ) ; instance = pipe . instanceFrom ( instance ) ; Sequence < ? > data = ( Sequence < ? > ) instance . getData ( ) ; Sequence < ? > untypedSequence = transducer . transduce ( data ) ; Sequence < String > sequence = ReflectionUtil . uncheckedCast ( untypedSequence ) ; List < String > returnValues = new ArrayList < String > ( ) ; for ( int i = _NUM ; i < sequence . size ( ) ; i ++ ) { String encodedOutcome = sequence . get ( i ) ; returnValues . add ( outcomeEncoder . decode ( encodedOutcome ) ) ; } return returnValues ; }
public void onBindHeaderViewHolder ( RecyclerView . ViewHolder holder , int position ) { onBindHeaderViewHolder ( holder , position , Collections . emptyList ( ) ) ; }
private void updateLineList ( ) { if ( horizontalLineRadiobutton . isSelected ( ) ) { setHorizontalLineSelected ( ) ; } else { setVerticalLineSelected ( ) ; } updateButtonStates ( ) ; }
public void rectangle ( double x , double y , double halfWidth , double halfHeight ) { if ( halfWidth < _NUM ) throw new IllegalArgumentException ( _STR ) ; if ( halfHeight < _NUM ) throw new IllegalArgumentException ( _STR ) ; double xs = scaleX ( x ) ; double ys = scaleY ( y ) ; double ws = factorX ( _NUM * halfWidth ) ; double hs = factorY ( _NUM * halfHeight ) ; if ( ws <= _NUM && hs <= _NUM ) pixel ( x , y ) ; else offscreen . draw ( new Rectangle2D . Double ( xs - ws / _NUM , ys - hs / _NUM , ws , hs ) ) ; draw ( ) ; }
protected final void refreshLoadingViewsSize ( ) { final int maximumPullScroll = ( int ) ( getMaximumPullScroll ( ) * _NUM ) ; int pLeft = getPaddingLeft ( ) ; int pTop = getPaddingTop ( ) ; int pRight = getPaddingRight ( ) ; int pBottom = getPaddingBottom ( ) ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setWidth ( maximumPullScroll ) ; pLeft = - maximumPullScroll ; } else { pLeft = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setWidth ( maximumPullScroll ) ; pRight = - maximumPullScroll ; } else { pRight = _NUM ; } break ; case VERTICAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setHeight ( maximumPullScroll ) ; pTop = - maximumPullScroll ; } else { pTop = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setHeight ( maximumPullScroll ) ; pBottom = - maximumPullScroll ; } else { pBottom = _NUM ; } break ; } if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR , pLeft , pTop , pRight , pBottom ) ) ; } setPadding ( pLeft , pTop , pRight , pBottom ) ; }
public void replaceSplitElement ( int aIndex , Fragment aSplitElement ) { splits . set ( aIndex , aSplitElement ) ; }
private void startItemList ( StringBuilder result , String rootId ) { result . append ( _STR + _STR + rootId + _STR ) ; }
private static int numInitialSplits ( long numRecords ) { final int maxSplits = _NUM ; final long recordsPerSplit = _NUM ; return ( int ) Math . min ( maxSplits , numRecords / recordsPerSplit + _NUM ) ; }
public void mouseClicked ( MouseEvent e ) { if ( e . getClickCount ( ) > _NUM ) { System . gc ( ) ; } }
private static String [ ] scanForSources ( final File sourceDir , final Set < String > sourceIncludes , final Set < String > sourceExcludes ) { final DirectoryScanner ds = new DirectoryScanner ( ) ; ds . setFollowSymlinks ( _BOOL ) ; ds . setBasedir ( sourceDir ) ; ds . setIncludes ( sourceIncludes . toArray ( new String [ sourceIncludes . size ( ) ] ) ) ; ds . setExcludes ( sourceExcludes . toArray ( new String [ sourceExcludes . size ( ) ] ) ) ; ds . addDefaultExcludes ( ) ; try { ds . scan ( ) ; } catch ( IllegalStateException e ) { return new String [ _NUM ] ; } return ds . getIncludedFiles ( ) ; }
private boolean hasNextPostponed ( ) { return ! postponedRoutes . isEmpty ( ) ; }
public boolean hasSingleElement ( ) { return mSelectedWidgets . size ( ) == _NUM ; }
public IgfsPath ( URI uri ) { A . notNull ( uri , _STR ) ; path = normalizePath ( uri . getPath ( ) ) ; }
public int toInt ( Element el , String attributeName ) { return Caster . toIntValue ( el . getAttribute ( attributeName ) , Integer . MIN_VALUE ) ; }
public static String readFully ( Reader reader ) throws IOException { try { StringWriter writer = new StringWriter ( ) ; char [ ] buffer = new char [ _NUM ] ; int count ; while ( ( count = reader . read ( buffer ) ) != - _NUM ) { writer . write ( buffer , _NUM , count ) ; } return writer . toString ( ) ; } finally { reader . close ( ) ; } }
public void addGetters ( int assignedPropertyNumber , String propertyName ) { for ( EventType type : knownTypes ) { EventPropertyGetter getter = type . getGetter ( propertyName ) ; VariantPropertyGetterRow row = allGetters . get ( type ) ; if ( row == null ) { synchronized ( this ) { row = new VariantPropertyGetterRow ( type , new EventPropertyGetter [ assignedPropertyNumber + _NUM ] ) ; allGetters . put ( type , row ) ; } } row . addGetter ( assignedPropertyNumber , getter ) ; } properties . add ( propertyName ) ; }
protected void markUsed ( Entry entry ) { entry . lastUsed = System . nanoTime ( ) ; }
@ Override public String execute ( ) { return SUCCESS ; }
private void handleStateLeft ( InetAddress endpoint , String [ ] pieces ) { assert pieces . length >= _NUM ; Collection < Token > tokens = getTokensFor ( endpoint ) ; if ( logger . isDebugEnabled ( ) ) logger . debug ( _STR , endpoint , tokens ) ; excise ( tokens , endpoint , extractExpireTime ( pieces ) ) ; }
public static void register ( String algorithmURI , Class < ? extends SignatureAlgorithmSpi > implementingClass ) throws AlgorithmAlreadyRegisteredException , ClassNotFoundException , XMLSignatureException { JavaUtils . checkRegisterPermission ( ) ; if ( log . isLoggable ( java . util . logging . Level . FINE ) ) { log . log ( java . util . logging . Level . FINE , _STR + algorithmURI + _STR + implementingClass ) ; } Class < ? extends SignatureAlgorithmSpi > registeredClass = algorithmHash . get ( algorithmURI ) ; if ( registeredClass != null ) { Object exArgs [ ] = { algorithmURI , registeredClass } ; throw new AlgorithmAlreadyRegisteredException ( _STR , exArgs ) ; } algorithmHash . put ( algorithmURI , implementingClass ) ; }
@ SuppressWarnings ( _STR ) public KeyValuePersistenceSettings ( File settingsFile ) { InputStream in ; try { in = new FileInputStream ( settingsFile ) ; } catch ( IOException e ) { throw new IgniteException ( _STR + settingsFile . getAbsolutePath ( ) , e ) ; } init ( loadSettings ( in ) ) ; }
public boolean containsWordBreakingChar ( final @ NonNull CharSequence input ) { if ( ! TextUtils . isEmpty ( input ) ) { for ( int i = _NUM ; i < input . length ( ) ; i ++ ) { char c = input . charAt ( i ) ; if ( isWordBreakingChar ( c ) ) { return _BOOL ; } } } return _BOOL ; }
private void checkInteriorIntersections ( ) { for ( Iterator i = segStrings . iterator ( ) ; i . hasNext ( ) ; ) { SegmentString ss0 = ( SegmentString ) i . next ( ) ; for ( Iterator j = segStrings . iterator ( ) ; j . hasNext ( ) ; ) { SegmentString ss1 = ( SegmentString ) j . next ( ) ; checkInteriorIntersections ( ss0 , ss1 ) ; } } }
public synchronized boolean removeElement ( Object object ) { int index ; if ( ( index = indexOf ( object , _NUM ) ) == - _NUM ) { return _BOOL ; } removeElementAt ( index ) ; return _BOOL ; }
private < T > UnaryOperator < T > compose ( UnaryOperator < T > before , UnaryOperator < T > after ) { return null ; }
private void addCdcColSpecs ( ArrayList < ColumnSpec > cdcSpecs , OneRowChange cdcRowChangeData ) { int cdcPos = cdcSpecs . size ( ) ; if ( cdcColumnsAtFront ) cdcPos = _NUM ; ColumnSpec spec = cdcRowChangeData . new ColumnSpec ( ) ; spec . setIndex ( cdcPos + _NUM ) ; spec . setName ( _STR ) ; spec . setType ( java . sql . Types . VARCHAR ) ; spec . setLength ( _NUM ) ; cdcSpecs . add ( cdcPos , spec ) ; spec = cdcRowChangeData . new ColumnSpec ( ) ; spec . setIndex ( cdcPos + _NUM + _NUM ) ; spec . setName ( _STR ) ; spec . setType ( java . sql . Types . TIMESTAMP ) ; cdcSpecs . add ( cdcPos + _NUM , spec ) ; spec = cdcRowChangeData . new ColumnSpec ( ) ; spec . setIndex ( cdcPos + _NUM + _NUM ) ; spec . setName ( _STR ) ; spec . setType ( java . sql . Types . BIGINT ) ; cdcSpecs . add ( cdcPos + _NUM , spec ) ; }
public static String convertToJavaFieldName ( String name ) { int dotIndex = name . indexOf ( _STR ) ; if ( dotIndex >= _NUM ) { name = name . substring ( _NUM , dotIndex ) ; } String [ ] split = name . split ( _STR ) ; StringBuilder out = new StringBuilder ( ) ; boolean first = _BOOL ; for ( String section : split ) { if ( first ) { first = _BOOL ; out . append ( section ) ; } else { out . append ( StringUtil . capitalize ( section ) ) ; } } return out . toString ( ) ; }
public static SecretKeys generateKey ( ) throws GeneralSecurityException { fixPrng ( ) ; KeyGenerator keyGen = KeyGenerator . getInstance ( CIPHER ) ; keyGen . init ( AES_KEY_LENGTH_BITS ) ; SecretKey confidentialityKey = keyGen . generateKey ( ) ; byte [ ] integrityKeyBytes = randomBytes ( HMAC_KEY_LENGTH_BITS / _NUM ) ; SecretKey integrityKey = new SecretKeySpec ( integrityKeyBytes , HMAC_ALGORITHM ) ; return new SecretKeys ( confidentialityKey , integrityKey ) ; }
public static void checkArgument ( boolean expression , @ Nullable Object errorMessage ) { if ( ! expression ) { throw new IllegalArgumentException ( String . valueOf ( errorMessage ) ) ; } }
protected void execute ( String [ ] sqls , SQLiteDatabase db ) { String throwSQL = _STR ; try { if ( sqls != null ) { for ( String sql : sqls ) { throwSQL = sql ; db . execSQL ( BaseUtility . changeCase ( sql ) ) ; } } } catch ( SQLException e ) { throw new DatabaseGenerateException ( DatabaseGenerateException . SQL_ERROR + throwSQL ) ; } }
private synchronized void rebuildJournal ( ) throws IOException { if ( journalWriter != null ) { journalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFileTmp ) , Util . US_ASCII ) ) ; try { writer . write ( MAGIC ) ; writer . write ( _STR ) ; writer . write ( VERSION_1 ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( appVersion ) ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( valueCount ) ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; for ( Entry entry : lruEntries . values ( ) ) { if ( entry . currentEditor != null ) { writer . write ( DIRTY + _STR + entry . key + _STR ) ; } else { writer . write ( CLEAN + _STR + entry . key + entry . getLengths ( ) + _STR ) ; } } } finally { writer . close ( ) ; } if ( journalFile . exists ( ) ) { renameTo ( journalFile , journalFileBackup , _BOOL ) ; } renameTo ( journalFileTmp , journalFile , _BOOL ) ; journalFileBackup . delete ( ) ; journalWriter = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFile , _BOOL ) , Util . US_ASCII ) ) ; }
private void refreshDoneButton ( boolean done ) { butDone . setText ( done ? Messages . getString ( _STR ) : Messages . getString ( _STR ) ) ; }
private void createMigrationTaskPage ( ) { MigrationTaskEditor migrationTaskEditor = new MigrationTaskEditor ( migrationTask , getContainer ( ) ) ; int index = addPage ( migrationTaskEditor . getControl ( ) ) ; setPageText ( index , _STR ) ; taskListeners . add ( migrationTaskEditor ) ; }
protected void onPageScrolled ( int position , float offset , int offsetPixels ) { if ( mDecorChildCount > _NUM ) { final int scrollX = getScrollX ( ) ; int paddingLeft = getPaddingLeft ( ) ; int paddingRight = getPaddingRight ( ) ; final int width = getWidth ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( ! lp . isDecor ) continue ; final int hgrav = lp . gravity & Gravity . HORIZONTAL_GRAVITY_MASK ; int childLeft = _NUM ; switch ( hgrav ) { default : childLeft = paddingLeft ; break ; case Gravity . LEFT : childLeft = paddingLeft ; paddingLeft += child . getWidth ( ) ; break ; case Gravity . CENTER_HORIZONTAL : childLeft = Math . max ( ( width - child . getMeasuredWidth ( ) ) / _NUM , paddingLeft ) ; break ; case Gravity . RIGHT : childLeft = width - paddingRight - child . getMeasuredWidth ( ) ; paddingRight += child . getMeasuredWidth ( ) ; break ; } childLeft += scrollX ; final int childOffset = childLeft - child . getLeft ( ) ; if ( childOffset != _NUM ) { child . offsetLeftAndRight ( childOffset ) ; } } } if ( mOnPageChangeListener != null ) { mOnPageChangeListener . onPageScrolled ( position , offset , offsetPixels ) ; } if ( mInternalPageChangeListener != null ) { mInternalPageChangeListener . onPageScrolled ( position , offset , offsetPixels ) ; } if ( mPageTransformer != null ) { final int scrollX = getScrollX ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( lp . isDecor ) continue ; final float transformPos = ( float ) ( child . getLeft ( ) - scrollX ) / getClientWidth ( ) ; mPageTransformer . transformPage ( child , transformPos ) ; } } mCalledSuper = _BOOL ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = mPool . getBuf ( ( count + i ) * _NUM ) ; System . arraycopy ( buf , _NUM , newbuf , _NUM , count ) ; mPool . returnBuf ( buf ) ; buf = newbuf ; }
public static int toIPv4Address ( String ipAddress ) { if ( ipAddress == null ) throw new IllegalArgumentException ( _STR + _STR ) ; String [ ] octets = ipAddress . split ( _STR ) ; if ( octets . length != _NUM ) throw new IllegalArgumentException ( _STR + _STR ) ; int result = _NUM ; for ( int i = _NUM ; i < _NUM ; ++ i ) { int oct = Integer . valueOf ( octets [ i ] ) ; if ( oct > _NUM || oct < _NUM ) throw new IllegalArgumentException ( _STR + _STR ) ; result |= oct << ( ( _NUM - i ) * _NUM ) ; } return result ; }
public void closeCursor ( Cursor cursor ) { cursor . close ( ) ; cursorMap . remove ( Integer . valueOf ( cursor . getCursorId ( ) ) ) ; }
private boolean hasNext ( Pattern pattern ) { if ( ! hasNext ( ) ) { return _BOOL ; } Matcher matcher = pattern . matcher ( gserValue . substring ( pos , length ) ) ; return matcher . find ( ) ; }
void pushInt ( int i ) { switch ( i ) { case - _NUM : mv . visitInsn ( ICONST_M1 ) ; return ; case _NUM : mv . visitInsn ( ICONST_0 ) ; return ; case _NUM : mv . visitInsn ( ICONST_1 ) ; return ; case _NUM : mv . visitInsn ( ICONST_2 ) ; return ; case _NUM : mv . visitInsn ( ICONST_3 ) ; return ; case _NUM : mv . visitInsn ( ICONST_4 ) ; return ; case _NUM : mv . visitInsn ( ICONST_5 ) ; return ; } if ( i >= Byte . MIN_VALUE && i <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , i ) ; return ; } if ( i >= Short . MIN_VALUE && i <= Short . MAX_VALUE ) { mv . visitIntInsn ( SIPUSH , i ) ; return ; } mv . visitLdcInsn ( Integer . valueOf ( i ) ) ; }
public static String xmlNode ( String name , String attributes , String content , boolean indent ) { String start = attributes == null ? name : name + attributes ; if ( content == null ) { return _STR + start + _STR ; } if ( indent && content . indexOf ( _STR ) >= _NUM ) { content = _STR + indent ( content ) ; } return _STR + start + _STR + content + _STR + name + _STR ; }
public void add ( int position , @ NonNull T item ) { synchronized ( lock ) { if ( items == null ) { items = new ArrayList < > ( ) ; } items . add ( position , item ) ; } if ( notifyOnChange ) { notifyItemInserted ( position ) ; } }
void notifyFailure ( Throwable exception ) { synchronized ( waitObject ) { isComplete = _BOOL ; if ( exception instanceof MqttException ) { pendingException = ( MqttException ) exception ; } else { pendingException = new MqttException ( exception ) ; } waitObject . notifyAll ( ) ; if ( exception instanceof MqttException ) { lastException = ( MqttException ) exception ; } if ( listener != null ) { listener . onFailure ( this , exception ) ; } } }
public static void transform ( StreamSource src , StreamSource stylesheet , Fop fop ) throws FOPException { Result res = new SAXResult ( fop . getDefaultHandler ( ) ) ; try { TransformerFactory factory = TransformerFactory . newInstance ( ) ; Transformer transformer ; if ( stylesheet == null ) { transformer = factory . newTransformer ( ) ; } else { transformer = factory . newTransformer ( stylesheet ) ; } transformer . setURIResolver ( new LocalResolver ( transformer . getURIResolver ( ) ) ) ; transformer . transform ( src , res ) ; } catch ( Exception e ) { throw new FOPException ( e ) ; } }
public List < String > splitStringWithDefaultDelimiterEscaped ( String inputString ) { String delimiter = configurationHelper . getProperty ( ConfigurationValue . FIELD_DATA_DELIMITER ) ; String escapeChar = configurationHelper . getProperty ( ConfigurationValue . FIELD_DATA_DELIMITER_ESCAPE_CHAR ) ; List < String > splitString = new ArrayList < > ( ) ; if ( StringUtils . isNotBlank ( inputString ) ) { String regex = _STR + Pattern . quote ( escapeChar ) + _STR + Pattern . quote ( delimiter ) ; for ( String s : inputString . split ( regex ) ) { splitString . add ( s . replace ( escapeChar + delimiter , delimiter ) ) ; } } return splitString ; }
protected final boolean readAvailableBlocking ( ) throws IOException { char [ ] buffer = myBuffer ; StringBuilder token = myTextBuffer ; token . setLength ( _NUM ) ; boolean read = _BOOL ; int n ; while ( ( n = myReader . read ( buffer ) ) > _NUM ) { if ( myScheduledSubmitter != null ) myScheduledSubmitter . cancel ( _BOOL ) ; read = _BOOL ; synchronized ( myTextBuffer ) { processLine ( buffer , token , n ) ; } myScheduledSubmitter = myExecutorService . submit ( myTokenSubmitter ) ; } submitToken ( ) ; return read ; }
public void deleteObligation ( final Obligation obligation , int basicBlockId ) throws ObligationAcquiredOrReleasedInLoopException { Map < ObligationSet , State > updatedStateMap = new HashMap < ObligationSet , State > ( ) ; for ( Iterator < State > i = stateIterator ( ) ; i . hasNext ( ) ; ) { State state = i . next ( ) ; checkCircularity ( state , obligation , basicBlockId ) ; ObligationSet obligationSet = state . getObligationSet ( ) ; obligationSet . remove ( obligation ) ; if ( ! obligationSet . isEmpty ( ) ) { updatedStateMap . put ( obligationSet , state ) ; } } replaceMap ( updatedStateMap ) ; }
private void clipViewOnTheRight ( Rect curViewBound , float curViewWidth , int right ) { curViewBound . right = ( int ) ( right - mClipPadding ) ; curViewBound . left = ( int ) ( curViewBound . right - curViewWidth ) ; }
public ContentImpl createCompoundPackageContent ( OleBlobImpl blob , String prettyName , String className , String typeName , ByteBuffer blobBb , int dataBlockLen ) { return new CompoundContentImpl ( blob , prettyName , className , typeName , blobBb . position ( ) , dataBlockLen ) ; }
protected boolean checkCoverage ( ) { int i ; int n ; int [ ] count ; Range r ; String attrIndex ; SubspaceClusterDefinition cl ; count = new int [ getNumAttributes ( ) ] ; for ( i = _NUM ; i < getNumAttributes ( ) ; i ++ ) { for ( n = _NUM ; n < getClusters ( ) . length ; n ++ ) { cl = ( SubspaceClusterDefinition ) getClusters ( ) [ n ] ; r = new Range ( cl . getAttrIndexRange ( ) ) ; r . setUpper ( getNumAttributes ( ) ) ; if ( r . isInRange ( i ) ) { count [ i ] ++ ; } } } attrIndex = _STR ; for ( i = _NUM ; i < count . length ; i ++ ) { if ( count [ i ] == _NUM ) { if ( attrIndex . length ( ) != _NUM ) { attrIndex += _STR ; } attrIndex += ( i + _NUM ) ; } } if ( attrIndex . length ( ) != _NUM ) { throw new IllegalArgumentException ( _STR + _STR + attrIndex + _STR ) ; } return _BOOL ; }
private Set < Integer > findValues ( String string ) { Set < Integer > results = new TreeSet < Integer > ( ) ; for ( String str : string . split ( _STR ) ) { if ( ! str . equals ( _STR ) ) { results . add ( findValue ( str ) ) ; } } return results ; }
private static int indexOf ( Object [ ] array , int len , Object elt ) { for ( int i = _NUM ; i < len ; i ++ ) { if ( elt . equals ( array [ i ] ) ) return i ; } return - _NUM ; }
@ Deprecated public void append ( final String name , final String value ) { List < String > l = map . get ( name ) ; if ( l != null ) { l . add ( value ) ; } else { l = Lists . newArrayList ( value ) ; map . put ( name , l ) ; } }
public boolean equals ( Object obj ) { if ( obj == this ) { return _BOOL ; } if ( ! ( obj instanceof Certificate ) ) { return _BOOL ; } Certificate object = ( Certificate ) obj ; try { return Arrays . equals ( getEncoded ( ) , object . getEncoded ( ) ) ; } catch ( CertificateEncodingException e ) { return _BOOL ; } }
public Statement between ( Object former , Object later ) { statement . append ( _STR ) ; append ( former ) ; statement . append ( _STR ) ; append ( later ) ; return this ; }
public byte [ ] encode1 ( final String s ) { final ByteArrayBuffer tmp = new ByteArrayBuffer ( s . length ( ) ) ; final int nwritten = uc . encode ( s , tmp ) ; final int npack = LongPacker . getByteLength ( nwritten ) ; final byte [ ] a = new byte [ npack + nwritten ] ; final DataOutputBuffer dob = new DataOutputBuffer ( _NUM , a ) ; try { dob . packLong ( nwritten ) ; dob . append ( tmp . array ( ) , _NUM , tmp . pos ( ) ) ; return a ; } finally { try { dob . close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public static Map < Object , Long > valueHistogram ( GeoTimeSerie gts ) { Map < Object , Long > occurrences = new HashMap < Object , Long > ( ) ; for ( int i = _NUM ; i < gts . values ; i ++ ) { Object value = GTSHelper . valueAtIndex ( gts , i ) ; if ( ! occurrences . containsKey ( value ) ) { occurrences . put ( value , _NUM ) ; } else { occurrences . put ( value , _NUM + occurrences . get ( value ) ) ; } } if ( GTSHelper . isBucketized ( gts ) && gts . bucketcount != gts . values ) { occurrences . put ( null , ( long ) ( gts . bucketcount - gts . values ) ) ; } return occurrences ; }
private void updateExistingRow ( final SQLiteDatabase database , final long id , boolean bumpCount ) { String stringId = String . valueOf ( id ) ; database . beginTransaction ( ) ; final Cursor cursor = database . query ( SongPlayCountColumns . NAME , null , WHERE_ID_EQUALS , new String [ ] { stringId } , null , null , null ) ; if ( cursor != null && cursor . moveToFirst ( ) ) { int lastUpdatedIndex = cursor . getColumnIndex ( SongPlayCountColumns . LAST_UPDATED_WEEK_INDEX ) ; int lastUpdatedWeek = cursor . getInt ( lastUpdatedIndex ) ; int weekDiff = mNumberOfWeeksSinceEpoch - lastUpdatedWeek ; if ( Math . abs ( weekDiff ) >= NUM_WEEKS ) { deleteEntry ( database , stringId ) ; if ( bumpCount ) { createNewPlayedEntry ( database , id ) ; } } else if ( weekDiff != _NUM ) { int [ ] playCounts = new int [ NUM_WEEKS ] ; if ( weekDiff > _NUM ) { for ( int i = _NUM ; i < NUM_WEEKS - weekDiff ; i ++ ) { playCounts [ i + weekDiff ] = cursor . getInt ( getColumnIndexForWeek ( i ) ) ; } } else if ( weekDiff < _NUM ) { for ( int i = _NUM ; i < NUM_WEEKS + weekDiff ; i ++ ) { playCounts [ i ] = cursor . getInt ( getColumnIndexForWeek ( i - weekDiff ) ) ; } } if ( bumpCount ) { playCounts [ _NUM ] ++ ; } float score = calculateScore ( playCounts ) ; if ( score < _NUM ) { deleteEntry ( database , stringId ) ; } else { ContentValues values = new ContentValues ( NUM_WEEKS + _NUM ) ; values . put ( SongPlayCountColumns . LAST_UPDATED_WEEK_INDEX , mNumberOfWeeksSinceEpoch ) ; values . put ( SongPlayCountColumns . PLAYCOUNTSCORE , score ) ; for ( int i = _NUM ; i < NUM_WEEKS ; i ++ ) { values . put ( getColumnNameForWeek ( i ) , playCounts [ i ] ) ; } database . update ( SongPlayCountColumns . NAME , values , WHERE_ID_EQUALS , new String [ ] { stringId } ) ; } } else if ( bumpCount ) { ContentValues values = new ContentValues ( _NUM ) ; int scoreIndex = cursor . getColumnIndex ( SongPlayCountColumns . PLAYCOUNTSCORE ) ; float score = cursor . getFloat ( scoreIndex ) + getScoreMultiplierForWeek ( _NUM ) ; values . put ( SongPlayCountColumns . PLAYCOUNTSCORE , score ) ; values . put ( getColumnNameForWeek ( _NUM ) , cursor . getInt ( getColumnIndexForWeek ( _NUM ) ) + _NUM ) ; database . update ( SongPlayCountColumns . NAME , values , WHERE_ID_EQUALS , new String [ ] { stringId } ) ; } cursor . close ( ) ; } else if ( bumpCount ) { createNewPlayedEntry ( database , id ) ; } database . setTransactionSuccessful ( ) ; database . endTransaction ( ) ; }
private void computeWeights ( Node node ) { int wsum = _NUM ; for ( Node child : node . children ) { computeWeights ( child ) ; wsum += child . weight ; } node . weight = Math . max ( _NUM , wsum ) ; }
public Searcher ( ) throws IOException { searcher = new IndexSearcher ( DirectoryReader . open ( FSDirectory . open ( Paths . get ( INDEX_DIR ) ) ) ) ; parser = new QueryParser ( CONTENT_FIELD , new StandardAnalyzer ( ) ) ; }
public QueryStringQueryBuilder field ( String field ) { if ( fields == null ) { fields = new ArrayList < > ( ) ; } fields . add ( field ) ; return this ; }
public static < R , A , B > CompletionStage < R > combine ( CompletionStage < A > a , CompletionStage < B > b , BiFunction < A , B , R > function ) { return a . thenCombine ( b , function ) ; }
protected String buildCreateSchemaStatement ( ) throws ReplicatorException { return null ; }
public void testNegPosFirstShorter ( ) { byte aBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; int aSign = - _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . and ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public StreamInfoManager ( TwitchApi api , StreamInfoListener listener ) { this . listener = listener ; this . api = api ; pendingRequests = new HashMap < > ( ) ; invalidStreamInfo = new StreamInfo ( _STR , listener ) ; invalidStreamInfo . setRequested ( ) ; }
public Sentence asSentence ( ) { return Sentence . newConjunction ( sentences ) ; }
public boolean isPronoun ( ) { return typeString . contains ( SUFFIX_PRONOUN ) ; }
protected void appendShortType ( StringBuilder sb , FieldType fieldType , int fieldWidth ) { sb . append ( _STR ) ; }
public static Vector tokenizeString ( String source , String separator ) { if ( separator . length ( ) == _NUM ) { return tokenizeString ( source , separator . charAt ( _NUM ) ) ; } Vector tokenized = new Vector ( ) ; int len = source . length ( ) ; StringBuilder buf = new StringBuilder ( ) ; for ( int iter = _NUM ; iter < len ; iter ++ ) { char current = source . charAt ( iter ) ; if ( separator . indexOf ( current ) > - _NUM ) { if ( buf . length ( ) > _NUM ) { tokenized . addElement ( buf . toString ( ) ) ; buf = new StringBuilder ( ) ; } } else { buf . append ( current ) ; } } if ( buf . length ( ) > _NUM ) { tokenized . addElement ( buf . toString ( ) ) ; } return tokenized ; }
private void backupFavorites ( BackupDataOutput data ) throws IOException { ContentResolver cr = mContext . getContentResolver ( ) ; Cursor cursor = cr . query ( Favorites . CONTENT_URI , FAVORITE_PROJECTION , getUserSelectionArg ( ) , null , null ) ; try { cursor . moveToPosition ( - _NUM ) ; while ( cursor . moveToNext ( ) ) { final long id = cursor . getLong ( ID_INDEX ) ; final long updateTime = cursor . getLong ( ID_MODIFIED ) ; Key key = getKey ( Key . FAVORITE , id ) ; mKeys . add ( key ) ; final String backupKey = keyToBackupKey ( key ) ; if ( ! mExistingKeys . contains ( backupKey ) || updateTime >= mLastBackupRestoreTime ) { writeRowToBackup ( key , packFavorite ( cursor ) , data ) ; } else { if ( DEBUG ) Log . d ( TAG , _STR + id ) ; } } } finally { cursor . close ( ) ; } }
public void update ( ) { if ( lastTime != - _NUM ) { long delta = System . nanoTime ( ) - lastTime ; rollingAverage . addValue ( delta ) ; } lastTime = System . nanoTime ( ) ; }
public List < ValidationErrorMessage > validate ( ) { errorMessageIds . clear ( ) ; if ( paymentProduct == null ) { throw new NullPointerException ( _STR ) ; } for ( PaymentProductField field : paymentProduct . getPaymentProductFields ( ) ) { if ( ! isFieldInAccountOnFileAndNotAltered ( field ) ) { errorMessageIds . addAll ( field . validateValue ( getValue ( field . getId ( ) ) ) ) ; } } return errorMessageIds ; }
KeyStoreState ( ) { }
CryptoResult ( final T result , final List < K > masterKeys , final CiphertextHeaders headers ) { result_ = result ; masterKeys_ = Collections . unmodifiableList ( masterKeys ) ; headers_ = headers ; encryptionContext_ = headers_ . getEncryptionContextMap ( ) ; }
public void stateChanged ( ChangeEvent e ) { if ( ignoreUpdate ) { return ; } double value = ( double ) ( _NUM - setpointSlider . getValue ( ) ) / _NUM ; setSetPoint ( value ) ; sim . setSetPoint ( value ) ; }
public static String [ ] parseDelimitedList ( String list , char delimiter ) { String delim = _STR + delimiter ; StringTokenizer st = new StringTokenizer ( list + delim + _STR , delim , _BOOL ) ; ArrayList < String > v = new ArrayList < String > ( ) ; String lastToken = _STR ; String word = _STR ; while ( st . hasMoreTokens ( ) ) { String tok = st . nextToken ( ) ; if ( lastToken != null ) { if ( tok . equals ( delim ) ) { word = word + lastToken ; if ( lastToken . equals ( delim ) ) tok = null ; } else { if ( ! word . equals ( _STR ) ) v . add ( word ) ; word = _STR ; } } lastToken = tok ; } return v . toArray ( new String [ _NUM ] ) ; }
private void initializeLayout ( ) { GridLayout gl = new GridLayout ( _NUM , _NUM ) ; gl . setVgap ( _NUM ) ; setLayout ( gl ) ; add ( new JLabel ( _STR ) ) ; add ( frozenDD ) ; add ( new JLabel ( _STR ) ) ; add ( tfUpBound ) ; add ( new JLabel ( _STR ) ) ; add ( tfLowBound ) ; add ( new JLabel ( _STR ) ) ; add ( tfIncrement ) ; add ( new JLabel ( _STR ) ) ; add ( tfDelay ) ; setBorder ( BorderFactory . createEmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; }
@ Override public boolean isRunning ( ) { return ( frame != null && frame . isVisible ( ) ) ; }
public static MosaicDefinition createMosaicDefinition ( final Account creator ) { return createMosaicDefinition ( creator , Utils . createMosaicId ( _STR , _STR ) , createMosaicProperties ( ) ) ; }
public Result result ( SqlNode node , Collection < Clause > clauses , RelNode rel ) { final String alias2 = SqlValidatorUtil . getAlias ( node , - _NUM ) ; final String alias3 = alias2 != null ? alias2 : _STR ; final String alias4 = SqlValidatorUtil . uniquify ( alias3 , aliasSet , SqlValidatorUtil . EXPR_SUGGESTER ) ; final String alias5 = alias2 == null || ! alias2 . equals ( alias4 ) ? alias4 : null ; return new Result ( node , clauses , alias5 , Collections . singletonList ( Pair . of ( alias4 , rel . getRowType ( ) ) ) ) ; }
private static void _trustAllHttpsCertificates ( ) { SSLContext context ; if ( _trustManagers == null ) { _trustManagers = new TrustManager [ ] { new FakeX509TrustManager ( ) } ; } try { context = SSLContext . getInstance ( _STR ) ; context . init ( null , _trustManagers , new SecureRandom ( ) ) ; } catch ( GeneralSecurityException gse ) { throw new IllegalStateException ( gse . getMessage ( ) ) ; } HttpsURLConnection . setDefaultSSLSocketFactory ( context . getSocketFactory ( ) ) ; }
private static boolean isInNeedOfForm ( UIComponent component ) { return ( component instanceof ActionSource || component instanceof ActionSource2 || component instanceof EditableValueHolder ) ; }
private void addInternalListeners ( ) { cbDistribution . addItemListener ( cbItemListener ) ; }
public static double safeSqrt ( double x ) { return ( x < _NUM ? - Math . sqrt ( - x ) : Math . sqrt ( x ) ) ; }
public static long runMultiThreaded ( Iterable < Callable < ? > > calls , GridTestSafeThreadFactory threadFactory ) throws Exception { if ( ! busyLock . enterBusy ( ) ) throw new IllegalStateException ( _STR ) ; Collection < Thread > threads = new ArrayList < > ( ) ; long time ; try { for ( Callable < ? > call : calls ) threads . add ( threadFactory . newThread ( call ) ) ; time = System . currentTimeMillis ( ) ; for ( Thread t : threads ) t . start ( ) ; } finally { busyLock . leaveBusy ( ) ; } for ( Thread t : threads ) t . join ( ) ; time = System . currentTimeMillis ( ) - time ; threadFactory . checkError ( ) ; return time ; }
private void bappend ( char ch ) { try { mBuff [ ++ mBuffIdx ] = ch ; } catch ( Exception exp ) { char buff [ ] = new char [ mBuff . length << _NUM ] ; System . arraycopy ( mBuff , _NUM , buff , _NUM , mBuff . length ) ; mBuff = buff ; mBuff [ mBuffIdx ] = ch ; } }
public void initializeOwnerReferencesForField ( StateManager sm , FieldMetaData fmd ) { if ( fmd . getAssociationType ( ) == FieldMetaData . ONE_TO_MANY ) { Collection < ? > collection = ( Collection < ? > ) sm . fetch ( fmd . getIndex ( ) ) ; if ( collection != null ) { for ( Object item : collection ) { if ( item != null ) { _relationsManager . setOwnerStateManagerForPersistentInstance ( item , sm , fmd ) ; } } } } else if ( fmd . getAssociationType ( ) == FieldMetaData . ONE_TO_ONE || fmd . isEmbeddedPC ( ) ) { Object value = sm . fetch ( fmd . getIndex ( ) ) ; if ( value != null ) { _relationsManager . setOwnerStateManagerForPersistentInstance ( value , sm , fmd ) ; } } }
public String buildUnionSubQuery ( String typeDiscriminatorColumn , String [ ] unionColumns , Set < String > columnsPresentInTable , int computedColumnsOffset , String typeDiscriminatorValue , String selection , String groupBy , String having ) { int unionColumnsCount = unionColumns . length ; String [ ] projectionIn = new String [ unionColumnsCount ] ; for ( int i = _NUM ; i < unionColumnsCount ; i ++ ) { String unionColumn = unionColumns [ i ] ; if ( unionColumn . equals ( typeDiscriminatorColumn ) ) { projectionIn [ i ] = _STR + typeDiscriminatorValue + _STR + typeDiscriminatorColumn ; } else if ( i <= computedColumnsOffset || columnsPresentInTable . contains ( unionColumn ) ) { projectionIn [ i ] = unionColumn ; } else { projectionIn [ i ] = _STR + unionColumn ; } } return buildQuery ( projectionIn , selection , groupBy , having , null , null ) ; }
public Node ( Coordinate pt ) { this ( pt , new DirectedEdgeStar ( ) ) ; }
public synchronized void increase ( ) { if ( accuracy > _NUM ) { long timePassed = System . currentTimeMillis ( ) - lastAdded ; if ( timePassed > accuracy ) { clearUp ( ) ; if ( count > _NUM ) { data . addFirst ( lastAdded + accuracy ) ; } lastAdded = System . currentTimeMillis ( ) ; count = _NUM ; } count ++ ; } else { clearUp ( ) ; data . addFirst ( System . currentTimeMillis ( ) ) ; } }
public void revert ( final VirtualFile root , final List < FilePath > files ) throws VcsException { for ( List < String > paths : VcsFileUtil . chunkPaths ( root , files ) ) { GitSimpleHandler handler = new GitSimpleHandler ( myProject , root , GitCommand . CHECKOUT ) ; handler . addParameters ( _STR ) ; handler . endOptions ( ) ; handler . addParameters ( paths ) ; handler . run ( ) ; } }
public static float [ ] concatAllFloat ( float [ ] ... arrays ) { int totalLength = _NUM ; final int subArrayCount = arrays . length ; for ( int i = _NUM ; i < subArrayCount ; ++ i ) { totalLength += arrays [ i ] . length ; } float [ ] result = Arrays . copyOf ( arrays [ _NUM ] , totalLength ) ; int offset = arrays [ _NUM ] . length ; for ( int i = _NUM ; i < subArrayCount ; ++ i ) { System . arraycopy ( arrays [ i ] , _NUM , result , offset , arrays [ i ] . length ) ; offset += arrays [ i ] . length ; } return result ; }
public TaggedValueIterator ( final String aLine , final boolean attemptFirstWord , final String ... tags ) { this . aLine = aLine ; this . attemptFirstWord = attemptFirstWord ; this . tags = tags ; tagPos = _NUM ; nextResult = getNextResult ( ) ; if ( attemptFirstWord ) { int a = _NUM ; while ( a < aLine . length ( ) ) { if ( aLine . charAt ( a ) == _STR || aLine . charAt ( a ) == _STR || Character . isWhitespace ( aLine . charAt ( a ) ) ) a ++ ; else break ; } int b = a + _NUM ; while ( b < aLine . length ( ) ) { if ( Character . isLetterOrDigit ( aLine . charAt ( b ) ) || aLine . charAt ( b ) == _STR ) b ++ ; else break ; } if ( b - a > _NUM ) { nextResult = aLine . substring ( a , b ) ; } tagPos = b ; } }
public void ascendTree ( ) { if ( null != parentPath ) { parentPath . append ( PARENT_PATH ) ; return ; } File parentTree = calcParentTree ( ) ; if ( null != parentTree ) { treeFile = parentTree ; return ; } parentPath = new StringBuilder ( provideLastName ( ) ) ; parentPath . append ( PARENT_PATH ) ; }
public boolean canRead ( ) { return _is != null ; }
void writeTo ( byte [ ] b , int off ) { System . arraycopy ( buf , _NUM , b , off , count ) ; }
void onItemDismissed ( final int position ) { final T removed = mData . get ( position ) ; final boolean wasRemoved = remove ( position ) ; if ( wasRemoved && mDataChangeListener != null ) { mDataChangeListener . onItemRemoved ( removed , position ) ; } }
public static double normalPDF ( double x , double variance , double meanValue ) { double standardDeviation = Math . sqrt ( variance ) ; return ( _NUM / ( standardDeviation * Math . sqrt ( _NUM * Math . PI ) ) ) * Math . pow ( Math . E , - ( ( x - meanValue ) * ( x - meanValue ) ) / ( _NUM * variance ) ) ; }
public static Object [ ] sortCopy ( Object [ ] objects , Comparer comparer ) { int len = objects . length ; Object [ ] copy = new Object [ len ] ; System . arraycopy ( objects , _NUM , copy , _NUM , len ) ; sort ( copy , comparer ) ; return copy ; }
public synchronized void addZoomListener ( ZoomListener listener ) { mZoomListeners . add ( listener ) ; }
private void clearRegisters ( Instruction start , Instruction end ) { for ( Instruction p = start ; ; p = p . nextInstructionInCodeOrder ( ) ) { for ( Enumeration < Operand > ops = p . getOperands ( ) ; ops . hasMoreElements ( ) ; ) { Operand op = ops . nextElement ( ) ; if ( op instanceof RegisterOperand ) { RegisterOperand rOp = ( RegisterOperand ) op ; clearDepGraphNodeForRegister ( rOp . getRegister ( ) ) ; } } if ( p == end ) break ; } for ( Enumeration < Register > e = GenericPhysicalDefUse . enumerateAllImplicitDefUses ( ir ) ; e . hasMoreElements ( ) ; ) { Register r = e . nextElement ( ) ; clearDepGraphNodeForRegister ( r ) ; } }
public void fireAnnotationSelected ( WorkflowAnnotation anno ) { List < WorkflowAnnotation > list = new LinkedList < > ( ) ; list . add ( anno ) ; fireAnnotationsChanged ( AnnotationEvent . SELECTED_ANNOTATION_CHANGED , list ) ; }
public boolean updateStatsAndReturnIfAllowed ( ) { long now = SystemClock . elapsedRealtime ( ) ; long deltaMs = now - mLastRequestTimestamp ; if ( deltaMs < mDelayMs ) return _BOOL ; mLastRequestTimestamp = now ; if ( deltaMs < _NUM * mDelayMs ) { mDelayMs = Math . min ( MAX_DELAY , mDelayMs * _NUM ) ; } else { mDelayMs = MIN_DELAY ; } return _BOOL ; }
public boolean verifyServerEvidenceMessage ( BigInteger serverM2 ) throws CryptoException { if ( ( this . A == null ) || ( this . M1 == null ) || ( this . S == null ) ) { throw new CryptoException ( _STR + _STR ) ; } BigInteger computedM2 = SRP6Util . calculateM2 ( digest , N , A , M1 , S ) ; if ( computedM2 . equals ( serverM2 ) ) { this . M2 = serverM2 ; return _BOOL ; } return _BOOL ; }
public void handleText ( String text ) { if ( skippingCharacters > _NUM ) { if ( skippingCharacters >= text . length ( ) ) { skippingCharacters -= text . length ( ) ; return ; } else { text = text . substring ( skippingCharacters ) ; skippingCharacters = _NUM ; } } if ( rtfDestination != null ) { rtfDestination . handleText ( text ) ; return ; } warning ( _STR ) ; }
public final boolean remove ( final URI serviceURI ) { boolean modified = _BOOL ; synchronized ( this ) { if ( aliases . remove ( serviceURI ) != null ) { modified = _BOOL ; } final ServiceFactory factory = services . remove ( serviceURI ) ; if ( factory != null ) { modified = _BOOL ; if ( factory instanceof CustomServiceFactory ) { customServices . remove ( factory ) ; } } } return modified ; }
@ Nullable private static String referenceToAttribute ( String attrib , boolean includeDummies ) { while ( attrib . startsWith ( _STR ) ) { attrib = attrib . substring ( _NUM ) ; } if ( attrib . startsWith ( _STR ) ) { if ( includeDummies ) { attrib = attrib . substring ( _NUM ) ; } else return null ; } if ( ! StringUtil . startsWithChar ( attrib , _STR ) ) { return null ; } attrib = attrib . substring ( _NUM ) ; if ( StringUtil . startsWithChar ( attrib , _STR ) ) { String cleanAttribute = null ; for ( int i = _NUM ; i < attrib . length ( ) ; i ++ ) { char currChar = attrib . charAt ( i ) ; if ( currChar == _STR || currChar == _STR ) { cleanAttribute = null ; break ; } else if ( currChar == _STR ) { cleanAttribute = attrib . substring ( _NUM , i ) ; break ; } } attrib = cleanAttribute ; } else { for ( int i = _NUM ; i < attrib . length ( ) ; i ++ ) { char currChar = attrib . charAt ( i ) ; if ( currChar == _STR || currChar == _STR || currChar == _STR ) { attrib = attrib . substring ( _NUM , i ) ; break ; } } } return attrib ; }
public EscapedWriter ( Writer fos ) { super ( fos ) ; }
public boolean isExpired ( final Date date ) { if ( date == null ) { throw new IllegalArgumentException ( _STR ) ; } return ( cookieExpiryDate != null && cookieExpiryDate . getTime ( ) <= date . getTime ( ) ) ; }
public void record ( RecordBuilderImpl recordBuilder ) { storeBitmap ( recordBuilder ) ; OutputStream viewHierarchyDump = null ; try { viewHierarchyDump = mAlbum . openViewHierarchyFile ( recordBuilder . getName ( ) ) ; mViewHierarchy . deflate ( recordBuilder . getView ( ) , viewHierarchyDump ) ; mAlbum . addRecord ( recordBuilder ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } finally { if ( viewHierarchyDump != null ) { try { viewHierarchyDump . close ( ) ; } catch ( IOException e ) { Log . e ( _STR , _STR , e ) ; } } } }
protected boolean isCorrectMethod ( Method method , Object [ ] args ) { return ( proxySignature . equals ( method . getName ( ) ) && args . length == _NUM ) ; }
public void testCase17 ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , - _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . remainder ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public Metadata . Property . Builder clear ( ) { Metadata_Property_Builder _defaults = new Metadata . Property . Builder ( ) ; type = _defaults . type ; boxedType = _defaults . boxedType ; name = _defaults . name ; capitalizedName = _defaults . capitalizedName ; allCapsName = _defaults . allCapsName ; getterName = _defaults . getterName ; codeGenerator = _defaults . codeGenerator ; fullyCheckedCast = _defaults . fullyCheckedCast ; accessorAnnotations . clear ( ) ; _unsetProperties . clear ( ) ; _unsetProperties . addAll ( _defaults . _unsetProperties ) ; return ( Metadata . Property . Builder ) this ; }
public static float r_distance ( vec3 a , vec3 b ) { float x = a . m [ _NUM ] - b . m [ _NUM ] ; float y = a . m [ _NUM ] - b . m [ _NUM ] ; float z = a . m [ _NUM ] - b . m [ _NUM ] ; float result = ( float ) Math . sqrt ( x * x + y * y + z * z ) ; return result ; }
public void checkBackupInfo ( final File backupInfoFile , boolean backupInMultiVdc ) { try ( InputStream fis = new FileInputStream ( backupInfoFile ) ) { Properties properties = new Properties ( ) ; properties . load ( fis ) ; checkVersion ( properties ) ; checkHosts ( properties , backupInMultiVdc ) ; } catch ( IOException ex ) { log . warn ( _STR , ex ) ; } }
static String toLowerCase ( String s ) { int len = s . length ( ) ; StringBuilder sb = null ; for ( int i = _NUM ; i < len ; i ++ ) { char c = s . charAt ( i ) ; if ( ( c >= _STR && c <= _STR ) || ( c == _STR ) ) { if ( sb != null ) sb . append ( c ) ; } else if ( ( c >= _STR && c <= _STR ) || ( c == _STR ) ) { if ( sb != null ) sb . append ( c ) ; } else if ( c >= _STR && c <= _STR ) { if ( sb == null ) { sb = new StringBuilder ( len ) ; sb . append ( s , _NUM , i ) ; } sb . append ( ( char ) ( c - CASE_DIFF ) ) ; } else { throw new IllegalArgumentException ( _STR ) ; } } return sb == null ? s : sb . toString ( ) ; }
public void testConstructorSignBytesNegative3 ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM } ; int aSign = - _NUM ; byte rBytes [ ] = { - _NUM , _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , aNumber . signum ( ) ) ; }
public static byte [ ] buildOpusComment ( String comment ) { byte [ ] data = new byte [ _NUM + comment . length ( ) ] ; writeOpusComment ( data , _NUM , comment ) ; return data ; }
public static void assertProps ( UniformPair < EventBean > received , String [ ] propertyNames , Object [ ] expectedInsert , Object [ ] expectedRemoved ) { assertProps ( received . getFirst ( ) , propertyNames , expectedInsert ) ; assertProps ( received . getSecond ( ) , propertyNames , expectedRemoved ) ; }
public int size ( ) { return al . size ( ) ; }
public static String toUpperCase ( String src ) { if ( src == null ) { return null ; } else { return src . toUpperCase ( ) ; } }
public final Iterator < KnowledgeEdge > requiredEdgesIterator ( ) { Set < KnowledgeEdge > edges = new HashSet < > ( ) ; for ( OrderedPair < Set < MyNode > > o : requiredRulesSpecs ) { final Set < MyNode > first = o . getFirst ( ) ; for ( MyNode s1 : first ) { final Set < MyNode > second = o . getSecond ( ) ; for ( MyNode s2 : second ) { if ( ! s1 . equals ( s2 ) ) { edges . add ( new KnowledgeEdge ( s1 . getName ( ) , s2 . getName ( ) ) ) ; } } } } return edges . iterator ( ) ; }
@ Deprecated public void unlock ( LockState < T > lockState ) { if ( lockState == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( lockState . setLock != this ) { throw new IllegalArgumentException ( _STR ) ; } if ( lockState . thread != Thread . currentThread ( ) ) { throw new IllegalArgumentException ( _STR ) ; } threadSet . remove ( Thread . currentThread ( ) ) ; for ( ReentrantLock lock : lockState . locks ) { lock . unlock ( ) ; } }
public static String formatJavaDocBox ( String text ) { requireNonNull ( text ) ; return formatTextBox ( text , JAVA_DOC_WIDTH , JAVADOC_WORDS , JAVA_DOC_SINGLE_LINE_WORDS ) ; }
private static String forceNumberStringToTwoDigits ( String text ) { while ( text . length ( ) < _NUM ) { text = _STR + text ; } if ( text . length ( ) > _NUM ) { text = text . substring ( text . length ( ) - _NUM , text . length ( ) ) ; } return text ; }
public void addDropItem ( final String name , final double probability , final int min , final int max ) { dropsItems . add ( new DropItem ( name , probability , min , max ) ) ; }
public static < E extends Identifiable > List < E > findByPrimaryKeys ( EntityManager em , List < BigInteger > ids , Class < E > type ) { requireArgument ( em != null , _STR ) ; requireArgument ( ids != null && ! ids . isEmpty ( ) , _STR ) ; requireArgument ( type != null , _STR ) ; TypedQuery < E > query = em . createNamedQuery ( _STR , type ) ; query . setHint ( _STR , _STR ) ; try { query . setParameter ( _STR , ids ) ; query . setParameter ( _STR , _BOOL ) ; return query . getResultList ( ) ; } catch ( NoResultException ex ) { return new ArrayList < > ( _NUM ) ; } }
private void loadWorkflow ( Properties ctx , int AD_Workflow_ID , HttpSession sess ) { MWorkflow wf = new MWorkflow ( ctx , AD_Workflow_ID , null ) ; MWFNode [ ] nodes = wf . getNodes ( _BOOL , Env . getContextAsInt ( ctx , _STR ) ) ; MWFNode wfn = null ; ArrayList nodes_ID = new ArrayList ( ) ; for ( int i = _NUM ; i < nodes . length ; i ++ ) { wfn = nodes [ i ] ; nodes_ID . add ( new Integer ( wfn . getAD_WF_Node_ID ( ) ) ) ; } int imageMap [ ] [ ] = generateImageMap ( nodes_ID ) ; sess . setAttribute ( WORKFLOW , wf ) ; sess . setAttribute ( NODES , nodes ) ; sess . setAttribute ( NODES_ID , nodes_ID ) ; sess . setAttribute ( IMAGE_MAP , imageMap ) ; sess . setAttribute ( ACTIVE_NODE , new Integer ( - _NUM ) ) ; }
public int hashCode ( ) { int h = hash ; if ( h == - _NUM ) { try { h = Arrays . hashCode ( X509CertImpl . getEncodedInternal ( this ) ) ; } catch ( CertificateException e ) { h = _NUM ; } hash = h ; } return h ; }
public void removeFromTags ( String removeTag ) { tags . remove ( removeTag ) ; firePropertyChange ( TAG , null , removeTag ) ; firePropertyChange ( TAGS_AS_STRING , null , removeTag ) ; }
public static boolean verify ( byte [ ] data , byte [ ] signature , byte [ ] pub ) { Preconditions . checkArgument ( data . length == _NUM && signature . length <= _NUM && pub . length <= _NUM ) ; ByteBuffer byteBuff = nativeECDSABuffer . get ( ) ; if ( byteBuff == null ) { byteBuff = ByteBuffer . allocateDirect ( _NUM + _NUM + _NUM + _NUM ) ; byteBuff . order ( ByteOrder . nativeOrder ( ) ) ; nativeECDSABuffer . set ( byteBuff ) ; } byteBuff . rewind ( ) ; byteBuff . put ( data ) ; byteBuff . putInt ( signature . length ) ; byteBuff . putInt ( pub . length ) ; byteBuff . put ( signature ) ; byteBuff . put ( pub ) ; return secp256k1_ecdsa_verify ( byteBuff ) == _NUM ; }
protected void deleteDirectory ( File webAppFile ) { if ( webAppFile . isDirectory ( ) ) { File [ ] children = webAppFile . listFiles ( ) ; for ( File element : children ) { deleteDirectory ( element ) ; } webAppFile . delete ( ) ; } else { webAppFile . delete ( ) ; } }
@ SuppressWarnings ( _STR ) static public void assertSameIteratorAnyOrder ( final Object [ ] expected , final Iterator actual ) { assertSameIteratorAnyOrder ( _STR , expected , actual ) ; }
public static String formattingFinishedPercentage ( final RolloutGroup rolloutGroup , final float finishedPercentage ) { float tmpFinishedPercentage = _NUM ; switch ( rolloutGroup . getStatus ( ) ) { case READY : case SCHEDULED : case ERROR : tmpFinishedPercentage = _NUM ; break ; case FINISHED : tmpFinishedPercentage = _NUM ; break ; case RUNNING : tmpFinishedPercentage = finishedPercentage ; break ; default : break ; } return String . format ( _STR , tmpFinishedPercentage ) ; }
public static String generateHostName ( String vmName , String hostId ) { String hostname = vmName + _STR + hostId ; Preconditions . checkState ( hostname . equals ( hostname . toLowerCase ( ) ) , _STR ) ; return hostname ; }
protected void transferFromFile ( File idFile ) throws IOException { try ( BufferedReader br = new BufferedReader ( new FileReader ( idFile ) ) ) { String line ; while ( ( line = br . readLine ( ) ) != null ) { line = line . trim ( ) ; if ( line . length ( ) > _NUM ) { transfer ( line ) ; } } } }
public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
private static String unwrap ( String expression ) { if ( expression . startsWith ( _STR ) ) { expression = expression . substring ( expression . indexOf ( _STR ) + _NUM , expression . length ( ) - _NUM ) ; if ( expression . endsWith ( _STR ) ) { expression = expression . substring ( _NUM , expression . lastIndexOf ( _STR ) ) ; } else { expression = expression . substring ( _NUM , expression . lastIndexOf ( _STR ) ) ; } } return expression ; }
public boolean areAllSegmentPresent ( int datasetSize ) { return mPieSegmentList . size ( ) == datasetSize ; }
protected int drawNextEventTimeDiff ( ) { int timeDiff = msgInterval [ _NUM ] == msgInterval [ _NUM ] ? _NUM : rng . nextInt ( msgInterval [ _NUM ] - msgInterval [ _NUM ] ) ; return msgInterval [ _NUM ] + timeDiff ; }
private int createLines ( String text , int insertPosition , int offset ) { int count = _NUM ; int start = _NUM ; DelimiterInfo delimiterInfo = nextDelimiterInfo ( text , _NUM ) ; while ( delimiterInfo != null && delimiterInfo . delimiterIndex > - _NUM ) { int index = delimiterInfo . delimiterIndex + ( delimiterInfo . delimiterLength - _NUM ) ; if ( insertPosition + count >= fLines . size ( ) ) fLines . add ( new Line ( offset + start , offset + index , delimiterInfo . delimiter ) ) ; else fLines . add ( insertPosition + count , new Line ( offset + start , offset + index , delimiterInfo . delimiter ) ) ; ++ count ; start = index + _NUM ; delimiterInfo = nextDelimiterInfo ( text , start ) ; } if ( start < text . length ( ) ) { if ( insertPosition + count < fLines . size ( ) ) { Line l = ( Line ) fLines . get ( insertPosition + count ) ; int delta = text . length ( ) - start ; l . offset -= delta ; l . length += delta ; } else { fLines . add ( new Line ( offset + start , offset + text . length ( ) - _NUM , null ) ) ; ++ count ; } } return count ; }
public static double sqrt ( double x ) { return Math . sqrt ( x ) ; }
private ResultPointsAndTransitions transitionsBetween ( ResultPoint from , ResultPoint to ) { int fromX = ( int ) from . getX ( ) ; int fromY = ( int ) from . getY ( ) ; int toX = ( int ) to . getX ( ) ; int toY = ( int ) to . getY ( ) ; boolean steep = Math . abs ( toY - fromY ) > Math . abs ( toX - fromX ) ; if ( steep ) { int temp = fromX ; fromX = fromY ; fromY = temp ; temp = toX ; toX = toY ; toY = temp ; } int dx = Math . abs ( toX - fromX ) ; int dy = Math . abs ( toY - fromY ) ; int error = - dx > > _NUM ; int ystep = fromY < toY ? _NUM : - _NUM ; int xstep = fromX < toX ? _NUM : - _NUM ; int transitions = _NUM ; boolean inBlack = image . get ( steep ? fromY : fromX , steep ? fromX : fromY ) ; for ( int x = fromX , y = fromY ; x != toX ; x += xstep ) { boolean isBlack = image . get ( steep ? y : x , steep ? x : y ) ; if ( isBlack != inBlack ) { transitions ++ ; inBlack = isBlack ; } error += dy ; if ( error > _NUM ) { if ( y == toY ) { break ; } y += ystep ; error -= dx ; } } return new ResultPointsAndTransitions ( from , to , transitions ) ; }
public static String toBits ( final long x ) { final StringBuilder sb = new StringBuilder ( ) ; long t = x ; for ( int i = _NUM ; i < _NUM ; i ++ ) { if ( ( i & _NUM ) == _NUM && i > _NUM ) { sb . append ( _STR ) ; } sb . append ( t < _NUM ? _STR : _STR ) ; t = t << _NUM ; } assert t == _NUM ; return sb . toString ( ) ; }
public static final byte [ ] encodeUrl ( BitSet urlsafe , byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( urlsafe == null ) { urlsafe = WWW_FORM_URL ; } ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; for ( int i = _NUM ; i < bytes . length ; i ++ ) { int b = bytes [ i ] ; if ( b < _NUM ) { b = _NUM + b ; } if ( urlsafe . get ( b ) ) { if ( b == _STR ) { b = _STR ; } buffer . write ( b ) ; } else { buffer . write ( _STR ) ; char hex1 = Character . toUpperCase ( Character . forDigit ( ( b > > _NUM ) & _NUM , _NUM ) ) ; char hex2 = Character . toUpperCase ( Character . forDigit ( b & _NUM , _NUM ) ) ; buffer . write ( hex1 ) ; buffer . write ( hex2 ) ; } } return buffer . toByteArray ( ) ; }
public MessageTokenizer ( IDiscordClient client , String content ) { if ( content == null ) throw new IllegalArgumentException ( _STR ) ; if ( content . length ( ) == _NUM ) throw new IllegalArgumentException ( _STR ) ; if ( client == null ) throw new IllegalArgumentException ( _STR ) ; this . content = content ; this . client = client ; stepForward ( _NUM ) ; }
public void await ( int ID ) throws InterruptedException { if ( parties == _NUM ) return ; final boolean startCondition = competitionCondition ; int competingFor = ( locks . length * _NUM - _NUM - ID ) / _NUM ; while ( competingFor >= _NUM ) { final Lock node = locks [ competingFor ] ; if ( node . tryLock ( ) ) { synchronized ( node ) { while ( competitionCondition == startCondition ) node . wait ( ) ; } node . unlock ( ) ; wakeUpTarget ( competingFor * _NUM + _NUM ) ; wakeUpTarget ( competingFor * _NUM + _NUM ) ; return ; } else { if ( competingFor == _NUM ) break ; competingFor = ( competingFor - _NUM ) / _NUM ; } } competitionCondition = ! competitionCondition ; wakeUpTarget ( _NUM ) ; }
private void loadTranslationsCacheIfEmpty ( ) { if ( translationCache . isEmpty ( ) ) { for ( ObjectTranslation translation : translations ) { if ( translation . getLocale ( ) != null && translation . getProperty ( ) != null && ! StringUtils . isEmpty ( translation . getValue ( ) ) ) { String key = ObjectTranslation . getCacheKey ( translation . getLocale ( ) , translation . getProperty ( ) ) ; translationCache . put ( key , translation . getValue ( ) ) ; } } } }
public NavMouseMode ( boolean shouldConsumeEvents ) { super ( modeID , shouldConsumeEvents ) ; setModeCursor ( Cursor . getPredefinedCursor ( Cursor . CROSSHAIR_CURSOR ) ) ; rectAttributes . setLinePaint ( Color . GRAY ) ; rectAttributes . setMattingPaint ( Color . LIGHT_GRAY ) ; rectAttributes . setMatted ( _BOOL ) ; }
public void addEvent ( SimEvent newEvent ) { newEvent . setSerial ( serial ++ ) ; sortedSet . add ( newEvent ) ; }
public static void stopTimer ( String name ) { long stopTime = System . nanoTime ( ) ; Long startTime = openTimers . remove ( name ) ; if ( startTime == null ) { throw new IllegalArgumentException ( _STR ) ; } SummaryStatistics statistics = data . get ( name ) ; if ( statistics == null ) { statistics = new SummaryStatistics ( ) ; data . put ( name , statistics ) ; } statistics . addValue ( stopTime - startTime ) ; }
public String toStringSummary ( ) { int resultsetLength ; String result ; String titles ; int i ; int j ; if ( m_NonSigWins == null ) return _STR ; resultsetLength = _NUM + Math . max ( ( int ) ( Math . log ( getColCount ( ) ) / Math . log ( _NUM ) ) , ( int ) ( Math . log ( getRowCount ( ) ) / Math . log ( _NUM ) ) ) ; result = _STR ; titles = _STR ; result += _STR ; result += _STR + _STR ; result += _STR ; result += _STR ; for ( i = _NUM ; i < getColCount ( ) ; i ++ ) { if ( getColHidden ( i ) ) continue ; titles += _STR ; result += _STR ; titles += _STR + Utils . padLeft ( _STR + getSummaryTitle ( i ) , resultsetLength * _NUM + _NUM ) ; } result += _STR ; result += titles + _STR ; for ( i = _NUM ; i < getColCount ( ) ; i ++ ) { if ( getColHidden ( i ) ) continue ; for ( j = _NUM ; j < getColCount ( ) ; j ++ ) { if ( getColHidden ( j ) ) continue ; if ( j == _NUM ) result += ( char ) ( ( int ) _STR + i % _NUM ) ; if ( j == i ) result += _STR ; else result += _STR + m_NonSigWins [ i ] [ j ] + _STR + m_Wins [ i ] [ j ] + _STR ; } result += _STR ; } result += _STR ; return result ; }
public static File createTempPath ( String path ) throws IOException { String sep = File . separator ; File tempDir = new File ( System . getProperty ( _STR ) + sep + path ) ; if ( ! tempDir . exists ( ) ) if ( ! tempDir . mkdirs ( ) ) { boolean status = tempDir . delete ( ) ; throw new IOException ( _STR + tempDir + _STR + status ) ; } tempDir . deleteOnExit ( ) ; return tempDir ; }
public void hspan ( double start , double end , Paint color , String legend ) { LegendText legendText = new LegendText ( color , legend ) ; comments . add ( legendText ) ; plotElements . add ( new HSpan ( start , end , color , legendText ) ) ; }
public StateInteractive extent_to_whole_connections ( ) { Set < BrdItem > selected_items = new TreeSet < BrdItem > ( ) ; for ( BrdItem curr_item : items_list ) { if ( curr_item instanceof BrdConnectable ) { selected_items . addAll ( curr_item . get_connection_items ( ) ) ; } } if ( selected_items . isEmpty ( ) ) { return return_state ; } items_list = selected_items ; actlog_start_scope ( LogfileScope . EXTEND_TO_WHOLE_CONNECTIONS ) ; filter ( ) ; i_brd . repaint ( ) ; return this ; }
public static IKeyBuilder newInstance ( int capacity , CollatorEnum collatorChoice , Locale locale , Object strength , DecompositionEnum mode ) { if ( collatorChoice == CollatorEnum . ASCII ) { return new KeyBuilder ( capacity ) ; } if ( locale == null ) { locale = Locale . getDefault ( ) ; if ( log . isInfoEnabled ( ) ) log . info ( _STR + locale . getDisplayName ( ) ) ; } final boolean icu = collatorChoice == CollatorEnum . ICU ; if ( icu && ! DefaultKeyBuilderFactory . isICUAvailable ( ) ) { throw new UnsupportedOperationException ( DefaultKeyBuilderFactory . ICU_NOT_AVAILABLE ) ; } final byte [ ] buf = createBuffer ( capacity ) ; final int len = _NUM ; switch ( collatorChoice ) { case ICU : return new KeyBuilder ( new ICUSortKeyGenerator ( locale , strength , mode ) , len , buf ) ; case JDK : return new KeyBuilder ( new JDKSortKeyGenerator ( locale , strength , mode ) , len , buf ) ; default : throw new UnsupportedOperationException ( _STR + collatorChoice ) ; } }
private List < Node > possibleParents ( Node x , List < Node > nodes , IKnowledge knowledge ) { List < Node > possibleParents = new LinkedList < > ( ) ; String _x = x . getName ( ) ; for ( Node z : nodes ) { String _z = z . getName ( ) ; if ( possibleParentOf ( _z , _x , knowledge ) ) { possibleParents . add ( z ) ; } } return possibleParents ; }
protected void configureFromProperties ( InputStream is , String rootDirectory ) throws IOException { Properties props = new Properties ( ) ; props . load ( is ) ; props . put ( ROOT_DIR_PATH_PROPERTY , rootDirectory ) ; String oldPrefix = getPropertyPrefix ( ) ; setProperties ( null , props ) ; setPropertyPrefix ( oldPrefix ) ; }
Connection openNewConnection ( ) throws SQLException { Connection newConn = DriverManager . getConnection ( url , user , password ) ; if ( url . startsWith ( _STR ) ) { try ( Statement s = newConn . createStatement ( ) ) { } } else if ( url . startsWith ( _STR ) ) { try ( Statement s = newConn . createStatement ( ) ) { s . execute ( _STR ) ; } } return newConn ; }
@ Override public void addRelations ( Task task , Iterable < ObjectId > projectIds , String fieldName ) { List < Project > newProjectList = new LinkedList < > ( ) ; Iterable < Project > projectsToAdd = projectRepository . findAll ( projectIds , null ) ; for ( Project project : projectsToAdd ) { newProjectList . add ( project ) ; } try { if ( PropertyUtils . getProperty ( task , fieldName ) != null ) { Iterable < Project > projects = ( Iterable < Project > ) PropertyUtils . getProperty ( task , fieldName ) ; for ( Project project : projects ) { newProjectList . add ( project ) ; } } } catch ( Exception e ) { throw new RuntimeException ( e ) ; } try { PropertyUtils . setProperty ( task , fieldName , newProjectList ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } taskRepository . save ( task ) ; }
protected void doFloodBDDP ( long pinSwitch , OFPacketIn pi , FloodlightContext cntx ) { TopologyInstance ti = getCurrentInstance ( _BOOL ) ; Set < Long > switches = ti . getSwitchesInOpenflowDomain ( pinSwitch ) ; if ( switches == null ) { switches = new HashSet < Long > ( ) ; switches . add ( pinSwitch ) ; } for ( long sid : switches ) { IOFSwitch sw = floodlightProvider . getSwitch ( sid ) ; if ( sw == null ) continue ; Collection < Short > enabledPorts = sw . getEnabledPortNumbers ( ) ; if ( enabledPorts == null ) continue ; Set < Short > ports = new HashSet < Short > ( ) ; ports . addAll ( enabledPorts ) ; Set < Short > portsKnownToTopo = ti . getPortsWithLinks ( sid ) ; if ( portsKnownToTopo != null ) { for ( short p : portsKnownToTopo ) { NodePortTuple npt = new NodePortTuple ( sid , p ) ; if ( ti . isBroadcastDomainPort ( npt ) == _BOOL ) { ports . remove ( p ) ; } } } Set < Short > portsToEliminate = getPortsToEliminateForBDDP ( sid ) ; if ( portsToEliminate != null ) { ports . removeAll ( portsToEliminate ) ; } if ( pinSwitch == sid ) { ports . remove ( pi . getInPort ( ) ) ; } doMultiActionPacketOut ( pi . getPacketData ( ) , sw , ports , cntx ) ; } }
public void sleepMillis ( final long millis ) { try { Thread . sleep ( millis ) ; } catch ( final InterruptedException e ) { logger . error ( e , e ) ; } }
private static void verifyWriteSetNotFound ( final BTree btree ) { log . info ( _STR ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { if ( btree . contains ( i ) ) { throw new RuntimeException ( _STR + i ) ; } } }
private double calculateEntropy ( double ... masses ) { double res = _NUM ; for ( double d : masses ) { res -= ( d == _NUM ) ? _NUM : d * Math . log ( d ) ; } return res / LOG2 ; }
public static boolean isValidNmtoken ( String nmtoken ) { if ( nmtoken . length ( ) == _NUM ) return _BOOL ; for ( int i = _NUM ; i < nmtoken . length ( ) ; i ++ ) { char ch = nmtoken . charAt ( i ) ; if ( ! isName ( ch ) ) { return _BOOL ; } } return _BOOL ; }
@ Override public void mousePressed ( MouseEvent e ) { m_frameLimiter . setRepeats ( _BOOL ) ; if ( ( e . getModifiers ( ) & InputEvent . BUTTON1_MASK ) != _NUM && ! e . isAltDown ( ) && m_mouseState == _NUM && m_scaling == _NUM ) { if ( ( ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) != _NUM ) && ( ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) == _NUM ) ) { m_mouseState = _NUM ; } else if ( ( ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) != _NUM ) && ( ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) == _NUM ) ) { m_oldMousePos . width = e . getX ( ) ; m_oldMousePos . height = e . getY ( ) ; m_newMousePos . width = e . getX ( ) ; m_newMousePos . height = e . getY ( ) ; m_mouseState = _NUM ; Graphics g = getGraphics ( ) ; if ( m_ZoomBoxColor == null ) { g . setColor ( Color . black ) ; } else { g . setColor ( m_ZoomBoxColor ) ; } if ( m_ZoomBoxXORColor == null ) { g . setXORMode ( Color . white ) ; } else { g . setXORMode ( m_ZoomBoxXORColor ) ; } g . drawRect ( m_oldMousePos . width , m_oldMousePos . height , m_newMousePos . width - m_oldMousePos . width , m_newMousePos . height - m_oldMousePos . height ) ; g . dispose ( ) ; } else { m_oldMousePos . width = e . getX ( ) ; m_oldMousePos . height = e . getY ( ) ; m_newMousePos . width = e . getX ( ) ; m_newMousePos . height = e . getY ( ) ; m_mouseState = _NUM ; m_frameLimiter . start ( ) ; } } else if ( ( e . getButton ( ) == MouseEvent . BUTTON1 ) && e . isAltDown ( ) && e . isShiftDown ( ) && ! e . isControlDown ( ) ) { saveComponent ( ) ; } else if ( m_mouseState == _NUM && m_scaling == _NUM ) { } }
private static double parseDoubleValue ( String parseString , String openTag , String closeTag , DataTypeValidationException exception ) throws DataTypeValidationException { String tagValue ; tagValue = parseStringValue ( parseString , openTag , closeTag , exception ) ; double doubleValue ; try { doubleValue = Double . parseDouble ( tagValue ) ; } catch ( NumberFormatException e ) { throw e ; } return doubleValue ; }
public void putString ( String s ) throws ArrayIndexOutOfBoundsException , UnsupportedEncodingException { byte [ ] bytes = s . getBytes ( _STR ) ; int length = bytes . length ; int endAt = m_index + length + _NUM ; if ( endAt > m_content . length ) throw new ArrayIndexOutOfBoundsException ( endAt + _STR + m_content . length ) ; System . arraycopy ( bytes , _NUM , m_content , m_index , length ) ; m_index += length ; m_content [ m_index ++ ] = _STR ; debugAppendString ( s ) ; }
private void pullEvent ( ) { final int newScrollValue ; final int itemDimension ; final float initialMotionValue , lastMotionValue ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : initialMotionValue = mInitialMotionX ; lastMotionValue = mLastMotionX ; break ; case VERTICAL : default : initialMotionValue = mInitialMotionY ; lastMotionValue = mLastMotionY ; break ; } switch ( mCurrentMode ) { case PULL_FROM_END : newScrollValue = Math . round ( Math . max ( initialMotionValue - lastMotionValue , _NUM ) / FRICTION ) ; itemDimension = getFooterSize ( ) ; break ; case PULL_FROM_START : default : newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , _NUM ) / FRICTION ) ; itemDimension = getHeaderSize ( ) ; break ; } setHeaderScroll ( newScrollValue ) ; if ( newScrollValue != _NUM && ! isRefreshing ( ) ) { float scale = Math . abs ( newScrollValue ) / ( float ) itemDimension ; switch ( mCurrentMode ) { case PULL_FROM_END : mFooterLayout . onPull ( scale ) ; break ; case PULL_FROM_START : default : mHeaderLayout . onPull ( scale ) ; break ; } if ( mState != State . PULL_TO_REFRESH && itemDimension >= Math . abs ( newScrollValue ) ) { setState ( State . PULL_TO_REFRESH ) ; } else if ( mState == State . PULL_TO_REFRESH && itemDimension < Math . abs ( newScrollValue ) ) { setState ( State . RELEASE_TO_REFRESH ) ; } } }
public void addRtcpListener ( RtcpEventListener listener ) { listeners . addElement ( listener ) ; }
@ Override protected void ensureNumberOfColumns ( int numberOfColumns ) { if ( data . length >= numberOfColumns ) { return ; } double [ ] newData = new double [ numberOfColumns ] ; System . arraycopy ( data , _NUM , newData , _NUM , data . length ) ; data = newData ; }
private static BitMatrix extractPureBits ( BitMatrix image ) throws NotFoundException { int [ ] leftTopBlack = image . getTopLeftOnBit ( ) ; int [ ] rightBottomBlack = image . getBottomRightOnBit ( ) ; if ( leftTopBlack == null || rightBottomBlack == null ) { throw NotFoundException . getNotFoundInstance ( ) ; } float moduleSize = moduleSize ( leftTopBlack , image ) ; int top = leftTopBlack [ _NUM ] ; int bottom = rightBottomBlack [ _NUM ] ; int left = leftTopBlack [ _NUM ] ; int right = rightBottomBlack [ _NUM ] ; if ( left >= right || top >= bottom ) { throw NotFoundException . getNotFoundInstance ( ) ; } if ( bottom - top != right - left ) { right = left + ( bottom - top ) ; } int matrixWidth = Math . round ( ( right - left + _NUM ) / moduleSize ) ; int matrixHeight = Math . round ( ( bottom - top + _NUM ) / moduleSize ) ; if ( matrixWidth <= _NUM || matrixHeight <= _NUM ) { throw NotFoundException . getNotFoundInstance ( ) ; } if ( matrixHeight != matrixWidth ) { throw NotFoundException . getNotFoundInstance ( ) ; } int nudge = ( int ) ( moduleSize / _NUM ) ; top += nudge ; left += nudge ; int nudgedTooFarRight = left + ( int ) ( ( matrixWidth - _NUM ) * moduleSize ) - right ; if ( nudgedTooFarRight > _NUM ) { if ( nudgedTooFarRight > nudge ) { throw NotFoundException . getNotFoundInstance ( ) ; } left -= nudgedTooFarRight ; } int nudgedTooFarDown = top + ( int ) ( ( matrixHeight - _NUM ) * moduleSize ) - bottom ; if ( nudgedTooFarDown > _NUM ) { if ( nudgedTooFarDown > nudge ) { throw NotFoundException . getNotFoundInstance ( ) ; } top -= nudgedTooFarDown ; } BitMatrix bits = new BitMatrix ( matrixWidth , matrixHeight ) ; for ( int y = _NUM ; y < matrixHeight ; y ++ ) { int iOffset = top + ( int ) ( y * moduleSize ) ; for ( int x = _NUM ; x < matrixWidth ; x ++ ) { if ( image . get ( left + ( int ) ( x * moduleSize ) , iOffset ) ) { bits . set ( x , y ) ; } } } return bits ; }
@ Override public void error ( String domain , String key , XMLParseException exception ) throws XNIException { if ( fErrorHandler != null ) { SAXParseException saxException = createSAXParseException ( exception ) ; try { fErrorHandler . error ( saxException ) ; } catch ( SAXParseException e ) { throw createXMLParseException ( e ) ; } catch ( SAXException e ) { throw createXNIException ( e ) ; } } }
public static boolean connect ( FileDescriptor fd , InetAddress inetAddress , int port ) throws SocketException { try { return IoBridge . connect ( fd , inetAddress , port , _NUM ) ; } catch ( SocketTimeoutException ex ) { throw new AssertionError ( ex ) ; } }
public boolean isWhitespace ( int nodeHandle ) { int type = getNodeType ( nodeHandle ) ; Node node = getNode ( nodeHandle ) ; if ( TEXT_NODE == type || CDATA_SECTION_NODE == type ) { FastStringBuffer buf = StringBufferPool . get ( ) ; while ( node != null ) { buf . append ( node . getNodeValue ( ) ) ; node = logicalNextDOMTextNode ( node ) ; } boolean b = buf . isWhitespace ( _NUM , buf . length ( ) ) ; StringBufferPool . free ( buf ) ; return b ; } return _BOOL ; }
public CStatusPanel ( final BackEndDebuggerProvider debuggerProvider ) { super ( new BorderLayout ( ) ) ; Preconditions . checkNotNull ( debuggerProvider , _STR ) ; m_label . setForeground ( Color . BLACK ) ; add ( m_label ) ; m_synchronizer = new CStatusLabelSynchronizer ( m_label , debuggerProvider ) ; }
@ Override public boolean open ( String access ) { if ( access . equals ( _STR ) ) { try { iStream = new FileImageInputStream ( new File ( filePath ) ) ; parser = new LabelParser ( ) ; metadata = parser . parseHeader ( iStream ) ; iStream . close ( ) ; iStream = null ; } catch ( IOException e ) { try { iStream . close ( ) ; } catch ( Exception x ) { } return ( _BOOL ) ; } } return ( super . open ( access ) ) ; }
void deregisterSpring ( Spring spring ) { if ( spring == null ) { throw new IllegalArgumentException ( _STR ) ; } mActiveSprings . remove ( spring ) ; mSpringRegistry . remove ( spring . getId ( ) ) ; }
@ Nullable public String fileName ( ) { return JavaLogger . fileName ( delegate ) ; }
public static BNode parseBNode ( String nTriplesBNode , ValueFactory valueFactory ) throws IllegalArgumentException { if ( nTriplesBNode . startsWith ( _STR ) ) { return valueFactory . createBNode ( nTriplesBNode . substring ( _NUM ) ) ; } else { throw new IllegalArgumentException ( _STR + nTriplesBNode ) ; } }
public void resetPSRs ( ) { pilotRolls . removeAllElements ( ) ; }
public static void sort ( byte [ ] array ) { DualPivotQuicksort . sort ( array ) ; }
public void closePopup ( ) { if ( openedSubPopup != null ) { openedSubPopup . closePopup ( ) ; } removeFromParent ( ) ; }
public void freeObject ( int id ) { if ( cacheId == id ) { cacheId = - _NUM ; cache = null ; } map . remove ( id ) ; }
private void stretchViewVertically ( View view , int crossSize ) { LayoutParams lp = ( LayoutParams ) view . getLayoutParams ( ) ; int newHeight = crossSize - lp . topMargin - lp . bottomMargin ; newHeight = Math . max ( newHeight , _NUM ) ; view . measure ( MeasureSpec . makeMeasureSpec ( view . getMeasuredWidth ( ) , MeasureSpec . EXACTLY ) , MeasureSpec . makeMeasureSpec ( newHeight , MeasureSpec . EXACTLY ) ) ; }
public static InetAddress hexToInet6Address ( String addrHexString ) throws IllegalArgumentException { try { return numericToInetAddress ( String . format ( _STR , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) ) ) ; } catch ( Exception e ) { Log . e ( _STR , _STR + addrHexString + _STR + e ) ; throw new IllegalArgumentException ( e ) ; } }
public void trackFailure ( ) { retryTime = Utils . currentTimeMillis ( ) + ( long ) backoff ; backoff = Math . min ( backoff * params . multiplier , params . maximum ) ; }
public double readDouble ( ) throws IOException { return primitiveTypes . readDouble ( ) ; }
private boolean isAtMaximum ( Adjustable bar ) { return ( bar . getValue ( ) + bar . getVisibleAmount ( ) >= bar . getMaximum ( ) ) ; }
public boolean matchesCS ( String seq ) { return queue . startsWith ( seq , pos ) ; }
protected void parseAndAddMapTileSet ( URL tileSetProperties ) throws IOException , MalformedURLException { Properties descProps = new Properties ( ) ; Logger logger = getLogger ( ) ; logger . info ( _STR ) ; InputStream descURLStream = tileSetProperties . openStream ( ) ; descProps . load ( descURLStream ) ; logger . info ( _STR + tileSetProperties . toString ( ) + _STR + descProps . toString ( ) ) ; MapTileSet mts = createMapTileSetFromProperties ( descProps ) ; if ( mts != null && mts . allGood ( ) ) { String mtsName = mts . getName ( ) ; mapTileSets . put ( mts . getName ( ) , mts ) ; logger . info ( _STR + mtsName + _STR ) ; } descURLStream . close ( ) ; }
protected Date compute ( double value ) { if ( Double . isNaN ( value ) ) { return null ; } long dateLong = ( long ) value ; Date date = new Date ( dateLong ) ; Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( date ) ; return cal . getTime ( ) ; }
public void enablePan ( BluetoothAdapter adapter ) { if ( mPan == null ) mPan = ( BluetoothPan ) connectProxy ( adapter , BluetoothProfile . PAN ) ; assertNotNull ( mPan ) ; long start = System . currentTimeMillis ( ) ; mPan . setBluetoothTethering ( _BOOL ) ; long stop = System . currentTimeMillis ( ) ; assertTrue ( mPan . isTetheringOn ( ) ) ; writeOutput ( String . format ( _STR , ( stop - start ) ) ) ; }
private int distBetweenPoints ( int x1 , int z1 , int x2 , int z2 , boolean bAllowDiags ) { int w = Math . abs ( x2 - x1 ) ; int h = Math . abs ( z2 - z1 ) ; if ( bAllowDiags ) { if ( w < h ) w = _NUM ; else h = _NUM ; } return w + h + _NUM ; }
public URL ( String protocol , String host , int port , String file , URLStreamHandler handler ) throws MalformedURLException { if ( port < - _NUM ) { throw new MalformedURLException ( _STR + port ) ; } if ( protocol == null ) { throw new NullPointerException ( _STR ) ; } if ( host != null && host . contains ( _STR ) && host . charAt ( _NUM ) != _STR ) { host = _STR + host + _STR ; } this . protocol = protocol ; this . host = host ; this . port = port ; file = UrlUtils . authoritySafePath ( host , file ) ; int hash = file . indexOf ( _STR ) ; if ( hash != - _NUM ) { this . file = file . substring ( _NUM , hash ) ; this . ref = file . substring ( hash + _NUM ) ; } else { this . file = file ; } fixURL ( _BOOL ) ; if ( handler == null ) { setupStreamHandler ( ) ; if ( streamHandler == null ) { throw new MalformedURLException ( _STR + protocol ) ; } } else { streamHandler = handler ; } }
private Workflow . Method createVolumesMethod ( URI systemURI , URI poolURI , List < URI > volumeURIs , VirtualPoolCapabilityValuesWrapper capabilities ) { return new Workflow . Method ( _STR , systemURI , poolURI , volumeURIs , capabilities ) ; }
public FileCommandInfo ( int fd , String command , int result , String parameters ) { this ( _BOOL , fd , command , result , parameters ) ; }
public void init ( GuiManualHerblore manual ) { for ( ManualWidgetBase widget : widgets ) widget . init ( manual ) ; }
private static SSLSocketFactory trustAllHosts ( HttpsURLConnection connection ) { SSLSocketFactory oldFactory = connection . getSSLSocketFactory ( ) ; try { SSLContext sc = SSLContext . getInstance ( _STR ) ; sc . init ( null , trustAllCerts , new java . security . SecureRandom ( ) ) ; SSLSocketFactory newFactory = sc . getSocketFactory ( ) ; connection . setSSLSocketFactory ( newFactory ) ; } catch ( Exception e ) { Log . e ( LOG_TAG , e . getMessage ( ) , e ) ; } return oldFactory ; }
public final double sampleMax ( ) { return _activeCountMax . getAndSet ( _activeCount . get ( ) ) ; }
@ Get public Representation userCodeForm ( ) throws OAuth2RestletException , InvalidGrantException , NotFoundException , ServerException { final OAuth2Request request = requestFactory . create ( getRequest ( ) ) ; if ( request . getParameter ( OAuth2Constants . DeviceCode . USER_CODE ) != null ) { return verify ( null ) ; } else { return getTemplateRepresentation ( FORM , request , null ) ; } }
public void testMissionNameConstruction ( ) { String xml = _STR ; xml += createStartMissionXml ( _STR , _STR ) ; xml += createEndMissionXml ( ) ; InputStream missionInputStream = new ByteArrayInputStream ( xml . getBytes ( ) ) ; String missionName = null ; try { missionName = MissionParser . getMissionName ( missionInputStream ) ; } catch ( MissionParseException e ) { e . printStackTrace ( ) ; } Assert . assertEquals ( _STR , missionName ) ; }
@ Override public boolean equals ( Object other ) { if ( other == this ) { return _BOOL ; } if ( other instanceof ZoneOffsetTransition ) { ZoneOffsetTransition d = ( ZoneOffsetTransition ) other ; return transition . equals ( d . transition ) && offsetBefore . equals ( d . offsetBefore ) && offsetAfter . equals ( d . offsetAfter ) ; } return _BOOL ; }
public void release ( ) { super . release ( ) ; init ( ) ; }
public double unsafeSabrVolatility ( final double strike , final double forward , final double expiryTime , final double alpha , final double beta , final double nu , final double rho ) { final double oneMinusBeta = _NUM - beta ; final double A = Math . pow ( forward * strike , oneMinusBeta ) ; final double sqrtA = Math . sqrt ( A ) ; double logM ; if ( ! isClose ( forward , strike ) ) logM = Math . log ( forward / strike ) ; else { final double epsilon = ( forward - strike ) / strike ; logM = epsilon - _NUM * epsilon * epsilon ; } final double z = ( nu / alpha ) * sqrtA * logM ; final double B = _NUM - _NUM * rho * z + z * z ; final double C = oneMinusBeta * oneMinusBeta * logM * logM ; final double tmp = ( Math . sqrt ( B ) + z - rho ) / ( _NUM - rho ) ; final double xx = Math . log ( tmp ) ; final double D = sqrtA * ( _NUM + C / _NUM + C * C / _NUM ) ; final double d = _NUM + expiryTime * ( oneMinusBeta * oneMinusBeta * alpha * alpha / ( _NUM * A ) + _NUM * rho * beta * nu * alpha / sqrtA + ( _NUM - _NUM * rho * rho ) * ( nu * nu / _NUM ) ) ; double multiplier ; final double m = _NUM ; if ( Math . abs ( z * z ) > Constants . QL_EPSILON * m ) multiplier = z / xx ; else { final double talpha = ( _NUM - rho * rho ) / ( _NUM - rho ) ; final double tbeta = alpha - _NUM ; final double tgamma = rho / ( _NUM - rho ) ; multiplier = _NUM - beta * z + ( tgamma - talpha + tbeta * tbeta * _NUM ) * z * z ; } return ( alpha / D ) * multiplier * d ; }
public void close ( ) { while ( ! mReceivers . isEmpty ( ) ) { mContext . unregisterReceiver ( mReceivers . remove ( _NUM ) ) ; } if ( mOutputWriter != null ) { try { mOutputWriter . close ( ) ; } catch ( IOException e ) { Log . w ( mTag , _STR , e ) ; } } }
private void resolveFiles ( List < String > classpaths , Map < String , String > files , String [ ] paths , String prefix ) { for ( String path : paths ) { String relativePath = fileHandler . getName ( path ) ; if ( prefix != null ) { relativePath = fileHandler . append ( prefix , relativePath ) ; } if ( classpaths != null ) { classpaths . add ( relativePath ) ; } if ( fileHandler . isDirectory ( path ) ) { String [ ] children = fileHandler . getChildren ( path ) ; if ( children != null && children . length != _NUM ) { resolveFiles ( null , files , children , relativePath ) ; } } else { files . put ( relativePath , path ) ; } } }
public void testGetInstance ( ) throws Exception { try { ExemptionMechanism . getInstance ( ( String ) null , _STR ) ; fail ( _STR ) ; } catch ( NoSuchProviderException pe ) { } try { ExemptionMechanism . getInstance ( _STR , ( String ) null ) ; fail ( _STR ) ; } catch ( IllegalArgumentException e ) { } }
public synchronized void reloadConfiguration ( ) { properties = null ; finalParameters . clear ( ) ; }
protected void removeMessageProcessor ( MessageProcessor oldMessageProcessor ) { synchronized ( messageProcessors ) { if ( messageProcessors . remove ( oldMessageProcessor ) ) { oldMessageProcessor . stop ( ) ; } } }
X509IssuerSerial ( X509Certificate cert ) { this ( cert . getIssuerX500Principal ( ) , cert . getSerialNumber ( ) ) ; }
private void addToSet ( ObjectXmlPersist persist , IFile file , String setName ) throws IOException , CoreException { Collection < GraphEdgeMatcherDescriptor > updateSet = loadEdgeMatchers ( persist , file ) ; persistUpdatedBundle ( persist , file , updateSet , setName ) ; }
public void putBytes ( byte [ ] bytes ) { ensureCapacity ( bytes . length ) ; System . arraycopy ( bytes , _NUM , this . byteBuffer , this . position , bytes . length ) ; this . position += bytes . length ; }
public static String arrayToDelimitedString ( Object [ ] arr , String delim ) { if ( arr == null ) { return _STR ; } StringBuffer sb = new StringBuffer ( ) ; for ( int i = _NUM ; i < arr . length ; i ++ ) { if ( i > _NUM ) { sb . append ( delim ) ; } sb . append ( arr [ i ] ) ; } return sb . toString ( ) ; }
public void clearAll ( ) { final List < EncodedImage > old ; synchronized ( this ) { old = new ArrayList < > ( mMap . values ( ) ) ; mMap . clear ( ) ; } for ( int i = _NUM ; i < old . size ( ) ; i ++ ) { EncodedImage encodedImage = old . get ( i ) ; if ( encodedImage != null ) { encodedImage . close ( ) ; } } }
public static CompiereColor parse ( String attributes ) { CompiereColor cc = new CompiereColor ( ) ; try { if ( attributes != null && attributes . length ( ) > _NUM ) cc . parseAttributres ( attributes ) ; } catch ( Exception e ) { log . severe ( _STR + attributes + _STR + e . toString ( ) ) ; } return cc ; }
public synchronized static LuaState newLuaState ( ) { int i = getNextStateIndex ( ) ; LuaState L = new LuaState ( i ) ; states . add ( i , L ) ; return L ; }
static long checkPreambleSize ( Memory mem ) { final long cap = mem . getCapacity ( ) ; if ( cap < _NUM ) { throwNotBigEnough ( cap , _NUM ) ; } final long pre0 = mem . getLong ( _NUM ) ; final int preLongs = ( int ) ( pre0 & _NUM ) ; final int required = Math . max ( preLongs << _NUM , _NUM ) ; if ( cap < required ) { throwNotBigEnough ( cap , required ) ; } return pre0 ; }
public int read ( ) throws IOException { if ( inputStream == null ) { reopen ( ) ; } count ( _NUM ) ; return inputStream . read ( ) ; }
private void fitImageToView ( ) { Drawable drawable = getDrawable ( ) ; if ( drawable == null || drawable . getIntrinsicWidth ( ) == _NUM || drawable . getIntrinsicHeight ( ) == _NUM ) { return ; } if ( matrix == null || prevMatrix == null ) { return ; } int drawableWidth = drawable . getIntrinsicWidth ( ) ; int drawableHeight = drawable . getIntrinsicHeight ( ) ; float scaleX = ( float ) viewWidth / drawableWidth ; float scaleY = ( float ) viewHeight / drawableHeight ; switch ( mScaleType ) { case CENTER : scaleX = scaleY = _NUM ; break ; case CENTER_CROP : scaleX = scaleY = Math . max ( scaleX , scaleY ) ; break ; case CENTER_INSIDE : scaleX = scaleY = Math . min ( _NUM , Math . min ( scaleX , scaleY ) ) ; case FIT_CENTER : scaleX = scaleY = Math . min ( scaleX , scaleY ) ; break ; case FIT_XY : break ; default : throw new UnsupportedOperationException ( _STR ) ; } float redundantXSpace = viewWidth - ( scaleX * drawableWidth ) ; float redundantYSpace = viewHeight - ( scaleY * drawableHeight ) ; matchViewWidth = viewWidth - redundantXSpace ; matchViewHeight = viewHeight - redundantYSpace ; if ( ! isZoomed ( ) && ! imageRenderedAtLeastOnce ) { matrix . setScale ( scaleX , scaleY ) ; matrix . postTranslate ( redundantXSpace / _NUM , redundantYSpace / _NUM ) ; normalizedScale = _NUM ; } else { if ( prevMatchViewWidth == _NUM || prevMatchViewHeight == _NUM ) { savePreviousImageValues ( ) ; } prevMatrix . getValues ( m ) ; m [ Matrix . MSCALE_X ] = matchViewWidth / drawableWidth * normalizedScale ; m [ Matrix . MSCALE_Y ] = matchViewHeight / drawableHeight * normalizedScale ; float transX = m [ Matrix . MTRANS_X ] ; float transY = m [ Matrix . MTRANS_Y ] ; float prevActualWidth = prevMatchViewWidth * normalizedScale ; float actualWidth = getImageWidth ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_X , transX , prevActualWidth , actualWidth , prevViewWidth , viewWidth , drawableWidth ) ; float prevActualHeight = prevMatchViewHeight * normalizedScale ; float actualHeight = getImageHeight ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_Y , transY , prevActualHeight , actualHeight , prevViewHeight , viewHeight , drawableHeight ) ; matrix . setValues ( m ) ; } fixTrans ( ) ; setImageMatrix ( matrix ) ; }
public void limit ( double x1 , double y1 , double x2 , double y2 ) { clip [ _NUM ] = Math . max ( clip [ _NUM ] , x1 ) ; clip [ _NUM ] = Math . max ( clip [ _NUM ] , y1 ) ; clip [ _NUM ] = Math . min ( clip [ _NUM ] , x2 ) ; clip [ _NUM ] = Math . min ( clip [ _NUM ] , y2 ) ; }
public void shutdown ( ) { final long begin = System . currentTimeMillis ( ) ; log . info ( _STR ) ; log . info ( _STR + getTaskCount ( scheduledPool ) + _STR ) ; log . info ( _STR + getTaskCount ( instantPool ) + _STR ) ; log . info ( _STR + getTaskCount ( longRunningPool ) + _STR ) ; log . info ( _STR + ( workStealingPool . getQueuedTaskCount ( ) + workStealingPool . getQueuedSubmissionCount ( ) ) + _STR ) ; scheduledPool . shutdown ( ) ; instantPool . shutdown ( ) ; longRunningPool . shutdown ( ) ; workStealingPool . shutdown ( ) ; boolean success = _BOOL ; try { success |= awaitTermination ( _NUM ) ; scheduledPool . setExecuteExistingDelayedTasksAfterShutdownPolicy ( _BOOL ) ; scheduledPool . setContinueExistingPeriodicTasksAfterShutdownPolicy ( _BOOL ) ; success |= awaitTermination ( _NUM ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } log . info ( _STR + success + _STR + ( System . currentTimeMillis ( ) - begin ) + _STR ) ; log . info ( _STR + getTaskCount ( scheduledPool ) + _STR ) ; log . info ( _STR + getTaskCount ( instantPool ) + _STR ) ; log . info ( _STR + getTaskCount ( longRunningPool ) + _STR ) ; log . info ( _STR + ( workStealingPool . getQueuedTaskCount ( ) + workStealingPool . getQueuedSubmissionCount ( ) ) + _STR ) ; workStealingPool . shutdownNow ( ) ; }
public static Collection < InetAddress > toInetAddresses ( Collection < String > addrs , Collection < String > hostNames ) throws IgniteCheckedException { Set < InetAddress > res = new HashSet < > ( addrs . size ( ) ) ; Iterator < String > hostNamesIt = hostNames . iterator ( ) ; for ( String addr : addrs ) { String hostName = hostNamesIt . hasNext ( ) ? hostNamesIt . next ( ) : null ; InetAddress inetAddr = null ; if ( ! F . isEmpty ( hostName ) ) { try { inetAddr = InetAddress . getByName ( hostName ) ; } catch ( UnknownHostException ignored ) { } } if ( inetAddr == null || inetAddr . isLoopbackAddress ( ) ) { try { inetAddr = InetAddress . getByName ( addr ) ; } catch ( UnknownHostException ignored ) { } } if ( inetAddr != null ) res . add ( inetAddr ) ; } if ( res . isEmpty ( ) ) throw new IgniteCheckedException ( _STR + addrs + _STR + hostNames + _STR ) ; return res ; }
public static String removeNewLineChars ( String s ) { String retString = null ; if ( ( s != null ) && ( s . length ( ) > _NUM ) && ( s . indexOf ( _STR ) != - _NUM ) ) { char [ ] chars = s . toCharArray ( ) ; int len = chars . length ; StringBuffer sb = new StringBuffer ( len ) ; for ( int i = _NUM ; i < len ; i ++ ) { char c = chars [ i ] ; if ( c != _STR ) { sb . append ( c ) ; } } retString = sb . toString ( ) ; } else { retString = s ; } return retString ; }
void calculateCounters ( ) { if ( ! isDBAvailable ( ) ) return ; long time = System . currentTimeMillis ( ) ; int total = _NUM ; write . lock ( ) ; try { countResetFeedsAndCategories ( ) ; total += countFeedsWithUnread ( ) ; countCategoriesWithUnread ( ) ; countSpecialCategories ( total ) ; } finally { write . unlock ( ) ; } Log . i ( TAG , String . format ( _STR , total , ( System . currentTimeMillis ( ) - time ) ) ) ; }
protected void appendHTML ( final StringBuilder sbuf , final char ch ) { switch ( ch ) { case _STR : sbuf . append ( _STR ) ; break ; case _STR : sbuf . append ( _STR ) ; break ; case _STR : sbuf . append ( _STR ) ; break ; default : sbuf . append ( ch ) ; break ; } }
private Collection < Var > migrateColumns ( SQLTable currentTable ) { List < Var > vars = new ArrayList < > ( ) ; String tableType = currentTable . getEntityType ( ) ; Map < String , ResourceType . DataType > columns = currentTable . getColumns ( ) ; Map < String , String > foreignColumns = currentTable . getForeignKeyColumns ( ) ; for ( String column : columns . keySet ( ) ) { ResourceType . DataType columnType = columns . get ( column ) ; if ( foreignColumns . containsKey ( column ) ) { vars . addAll ( migrateAsRelation ( tableType , column , foreignColumns . get ( column ) ) ) ; } else { vars . addAll ( migrateAsResource ( tableType , columnType , column ) ) ; } } return vars ; }
public int retrieveRowCount ( String tableName ) throws SQLException { ResultSet rs = null ; int rowCount = - _NUM ; try { rs = statement . executeQuery ( _STR + tableName ) ; rs . next ( ) ; rowCount = rs . getInt ( _NUM ) ; } finally { if ( rs != null ) { rs . close ( ) ; } } return rowCount ; }
public JarModifier ( File jarFile ) throws JarException , IOException { this . jarFile = jarFile ; JarFile jar = new JarFile ( jarFile ) ; Enumeration < ? extends JarEntry > enumerator = jar . entries ( ) ; while ( enumerator . hasMoreElements ( ) ) { JarEntry currentEntry = ( JarEntry ) enumerator . nextElement ( ) ; JarEntry resetEntry = new JarEntry ( currentEntry . getName ( ) ) ; jarEntries . put ( currentEntry . getName ( ) , resetEntry ) ; } String manifestPath = META_INF + SEPERATOR + _STR ; JarEntry jarEntry = jar . getJarEntry ( manifestPath ) ; if ( jarEntry != null ) { Enumeration < JarEntry > entries = jar . entries ( ) ; while ( entries . hasMoreElements ( ) ) { jarEntry = ( JarEntry ) entries . nextElement ( ) ; if ( manifestPath . equalsIgnoreCase ( jarEntry . getName ( ) ) ) { break ; } else { jarEntry = null ; } } } Manifest manifest = new Manifest ( ) ; if ( jarEntry != null ) { manifest . read ( jar . getInputStream ( jarEntry ) ) ; } this . manifest = manifest ; jar . close ( ) ; }
@ Override public int addAttribute ( Attribute a ) { if ( a == null ) { throw new IllegalArgumentException ( _STR ) ; } else { int index = - _NUM ; Attribute original = a ; a = ( Attribute ) a . clone ( ) ; if ( unusedColumnList . size ( ) > _NUM ) { synchronized ( unusedColumnList ) { if ( unusedColumnList . size ( ) > _NUM ) { index = unusedColumnList . remove ( _NUM ) ; attributes . set ( index , a ) ; } else { index = attributes . size ( ) ; attributes . add ( a ) ; } } } else { index = attributes . size ( ) ; attributes . add ( a ) ; } a . setTableIndex ( index ) ; original . setTableIndex ( index ) ; return index ; } }
default B with ( String key , int value ) { return with ( key , Integer . toString ( value ) ) ; }
public static < X > void sortTopN ( X [ ] array , int offset , int limit , Comparator < ? super X > comp ) { partitionTopN ( array , offset , limit , comp ) ; Arrays . sort ( array , offset , ( int ) Math . min ( ( long ) offset + limit , array . length ) , comp ) ; }
protected boolean isServerTransaction ( ) { return this instanceof SIPServerTransaction ; }
Object addMarkedOccurrenceHighlight ( int start , int end , MarkOccurrencesHighlightPainter p ) throws BadLocationException { Document doc = textArea . getDocument ( ) ; TextUI mapper = textArea . getUI ( ) ; HighlightInfo i = new LayeredHighlightInfo ( ) ; i . painter = p ; i . p0 = doc . createPosition ( start ) ; i . p1 = doc . createPosition ( end - _NUM ) ; markedOccurrences . add ( i ) ; mapper . damageRange ( textArea , start , end ) ; return i ; }
public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
public static void readFully ( InputStream in , byte buf [ ] , int off , int len ) throws IOException { int toRead = len ; while ( toRead > _NUM ) { int ret = in . read ( buf , off , toRead ) ; if ( ret < _NUM ) { throw new IOException ( _STR ) ; } toRead -= ret ; off += ret ; } }
public static void assumeTrue ( BooleanSupplier assumptionSupplier , Supplier < String > messageSupplier ) throws TestAbortedException { if ( ! assumptionSupplier . getAsBoolean ( ) ) { throwTestAbortedException ( messageSupplier . get ( ) ) ; } }
public static String addToCartBulk ( HttpServletRequest request , HttpServletResponse response ) { String categoryId = request . getParameter ( _STR ) ; ShoppingCart cart = getCartObject ( request ) ; Delegator delegator = ( Delegator ) request . getAttribute ( _STR ) ; LocalDispatcher dispatcher = ( LocalDispatcher ) request . getAttribute ( _STR ) ; ShoppingCartHelper cartHelper = new ShoppingCartHelper ( delegator , dispatcher , cart ) ; String controlDirective ; Map < String , Object > result ; Map < String , Object > paramMap = UtilHttp . getParameterMap ( request ) ; String catalogId = CatalogWorker . getCurrentCatalogId ( request ) ; result = cartHelper . addToCartBulk ( catalogId , categoryId , paramMap ) ; controlDirective = processResult ( result , request ) ; if ( controlDirective . equals ( ERROR ) ) { return _STR ; } else { return _STR ; } }
public void addFrequentSet ( FrequentItemSet itemSet ) { frequentSets . add ( itemSet ) ; maximumSetSize = Math . max ( itemSet . getNumberOfItems ( ) , maximumSetSize ) ; }
private int skipFromPeekBuffer ( int length ) { int bytesSkipped = Math . min ( peekBufferLength , length ) ; updatePeekBuffer ( bytesSkipped ) ; return bytesSkipped ; }
protected Workflow . Method createRemoveVolumesFromCGMethod ( URI vplexURI , URI cgURI , List < URI > vplexVolumeURIs ) { return new Workflow . Method ( REMOVE_VOLUMES_FROM_CG_STEP , vplexURI , cgURI , vplexVolumeURIs ) ; }
private static int showUrlsPrompt ( Component parent , List < String > urls ) { String text = _STR ; for ( String url : urls ) { url = splitUrl ( url ) ; text += url + _STR ; } String okOption = _STR ; if ( urls . size ( ) > _NUM ) { okOption = _STR + urls . size ( ) + _STR ; } String [ ] options = { okOption , _STR } ; if ( urls . size ( ) == _NUM ) { options = new String [ ] { okOption , _STR , _STR } ; } int chosenOption = JOptionPane . showOptionDialog ( parent , text , _STR , JOptionPane . OK_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE , null , options , _NUM ) ; return chosenOption ; }
int convertMouse ( MouseEvent event ) { int result ; if ( panelFont == null ) return ( NO_MOUSE ) ; int colOff = event . getX ( ) - GRID_WIDTH - PANEL_MARGIN ; int colNum = colOff / horizStep ; int colRem = colOff % horizStep ; if ( ( colNum >= panelColumns ) || ( colRem < TEXT_MARGIN ) || ( colRem > ( horizStep - GRID_WIDTH - TEXT_MARGIN ) ) ) { return ( NO_MOUSE ) ; } int rowOff = event . getY ( ) - GRID_WIDTH - PANEL_MARGIN ; int rowNum = rowOff / vertiStep ; int rowRem = rowOff % vertiStep ; if ( ( rowRem < TEXT_MARGIN ) || ( rowRem > ( vertiStep - GRID_WIDTH - TEXT_MARGIN ) ) ) { return ( NO_MOUSE ) ; } result = cornerIndex + ( rowNum * panelColumns ) + colNum ; if ( result >= cellCount ) return ( NO_MOUSE ) ; return ( result ) ; }
private static String computeRegexString ( String originalString , String oldName , String newName ) { StringBuilder builder = new StringBuilder ( originalString . length ( ) ) ; String oldNameOrNewNameRegEx = String . format ( _STR , Pattern . quote ( oldName ) , Pattern . quote ( newName ) ) ; int i = originalString . indexOf ( oldName ) ; if ( i >= _NUM ) { int prevI = _NUM ; while ( i >= _NUM ) { builder . append ( Pattern . quote ( originalString . substring ( prevI , i ) ) ) ; builder . append ( oldNameOrNewNameRegEx ) ; prevI = i ; i = originalString . indexOf ( oldName , i + oldName . length ( ) ) ; } builder . append ( Pattern . quote ( originalString . substring ( prevI + oldName . length ( ) , originalString . length ( ) ) ) ) ; } return builder . toString ( ) ; }
public synchronized String generateCallIdentifier ( String address ) { String date = Long . toString ( System . currentTimeMillis ( ) + callIDCounter ++ + rand . nextLong ( ) ) ; byte cid [ ] = digester . digest ( date . getBytes ( ) ) ; String cidString = Utils . toHexString ( cid ) ; return cidString + _STR + address ; }
int parseHour ( String source , char patternChar , int offset ) throws ParseException { int min = ( patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER ) ? _NUM : _NUM ; int max = ( ( patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER ) ? _NUM : _NUM ) + min ; return parseNumber ( source , offset , _STR , min , max ) - min ; }
public void doHistory ( KeyEvent e ) { if ( e . getSource ( ) == m_Input ) { switch ( e . getKeyCode ( ) ) { case KeyEvent . VK_UP : if ( m_HistoryPos > _NUM ) { m_HistoryPos -- ; String command = m_CommandHistory . elementAt ( m_HistoryPos ) ; m_Input . setText ( command ) ; } break ; case KeyEvent . VK_DOWN : if ( m_HistoryPos < m_CommandHistory . size ( ) ) { m_HistoryPos ++ ; String command = _STR ; if ( m_HistoryPos < m_CommandHistory . size ( ) ) { command = m_CommandHistory . elementAt ( m_HistoryPos ) ; } m_Input . setText ( command ) ; } break ; default : break ; } } }
public static ReferenceBinding [ ] substitute ( Substitution substitution , ReferenceBinding [ ] originalTypes ) { if ( originalTypes == null ) return null ; ReferenceBinding [ ] substitutedTypes = originalTypes ; for ( int i = _NUM , length = originalTypes . length ; i < length ; i ++ ) { ReferenceBinding originalType = originalTypes [ i ] ; TypeBinding substitutedType = substitute ( substitution , originalType ) ; if ( ! ( substitutedType instanceof ReferenceBinding ) ) { return null ; } if ( substitutedType != originalType ) { if ( substitutedTypes == originalTypes ) { System . arraycopy ( originalTypes , _NUM , substitutedTypes = new ReferenceBinding [ length ] , _NUM , i ) ; } substitutedTypes [ i ] = ( ReferenceBinding ) substitutedType ; } else if ( substitutedTypes != originalTypes ) { substitutedTypes [ i ] = originalType ; } } return substitutedTypes ; }
@ Override protected void onDraw ( Canvas canvas ) { super . onDraw ( canvas ) ; if ( mBitmapShader == null ) return ; canvas . drawCircle ( mCenterX , mCenterY , mCoverRadius , mCoverPaint ) ; canvas . drawCircle ( mCenterX , mCenterY , mCoverRadius , mCoverFrontPaint ) ; mDurationText = secondsToTime ( mDurationSecondsCurrent ) ; mDurationPaint . getTextBounds ( mDurationText , _NUM , mDurationText . length ( ) , mRectDuration ) ; canvas . drawText ( mDurationText , ( mCenterX - ( mRectDuration . width ( ) / _NUM ) ) , ( mCenterY + ( mRectDuration . height ( ) / _NUM ) ) , mDurationPaint ) ; if ( mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null ) { canvas . drawBitmap ( isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1 , ( mCenterX - ( _NUM * ( mCenterX / _NUM ) ) ) , mCenterY + ( mCenterY / _NUM ) - ( mCenterY / _NUM ) , mActionPaint ) ; } if ( mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null ) { canvas . drawBitmap ( isAction2Selected ? mBitmapSelectedAction2 : mBitmapUnselectedAction2 , mCenterX - ( mCenterX / _NUM ) , mCenterY + ( mCenterY / _NUM ) - ( mCenterY / _NUM ) , mActionPaint ) ; } if ( mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null ) { canvas . drawBitmap ( isAction3Selected ? mBitmapSelectedAction3 : mBitmapUnselectedAction3 , ( int ) ( mCenterX + ( _NUM * ( mCenterX / _NUM ) ) ) , mCenterY + ( mCenterY / _NUM ) - ( mCenterY / _NUM ) , mActionPaint ) ; } canvas . drawArc ( mProgressRectF , _NUM , _NUM , _BOOL , mPaintEmptyProgress ) ; canvas . drawArc ( mProgressRectF , _NUM , calculatePastProgress ( ) , _BOOL , mPaintLoadedProgress ) ; canvas . drawCircle ( ( float ) ( mCenterX + ( ( mCenterX - _NUM ) * Math . cos ( Math . toRadians ( calculatePastProgress ( ) - _NUM ) ) ) ) , ( float ) ( mCenterY + ( ( mCenterX - _NUM ) * Math . sin ( Math . toRadians ( calculatePastProgress ( ) - _NUM ) ) ) ) , mRadiusToggle , mPaintProgressToggle ) ; }
private static Collection < TCPTransport > allKnownTransports ( ) { Set < TCPTransport > s ; synchronized ( localEndpoints ) { s = new HashSet < TCPTransport > ( localEndpoints . size ( ) ) ; for ( LinkedList < TCPEndpoint > epList : localEndpoints . values ( ) ) { TCPEndpoint ep = epList . getFirst ( ) ; s . add ( ep . transport ) ; } } return s ; }
public void requestSecondsUntilIdleLockout ( ) { operations . add ( PasswordPolicyStateOperationType . GET_SECONDS_UNTIL_IDLE_LOCKOUT ) ; }
@ RequestMapping ( value = _STR , method = { RequestMethod . GET } ) @ ResponseBody private static List < String > showHiveDatabases ( ) throws IOException { IHiveClient hiveClient = HiveClientFactory . getHiveClient ( ) ; List < String > results = null ; try { results = hiveClient . getHiveDbNames ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; throw new IOException ( e ) ; } return results ; }
public void testNegNegFirstShorter ( ) { byte aBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { - _NUM , _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , - _NUM , - _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . and ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , result . signum ( ) ) ; }
private static double hackyAdjuster ( double f ) { double tmp = Math . sqrt ( _NUM - f ) ; return ( f <= _NUM ) ? tmp : tmp + ( _NUM * ( f - _NUM ) ) ; }
private static Object fromString ( String s ) throws IOException , ClassNotFoundException { byte [ ] data = Base64 . decode ( s , Base64 . DEFAULT ) ; ObjectInputStream ois = new ObjectInputStream ( new ByteArrayInputStream ( data ) ) ; Object o = ois . readObject ( ) ; ois . close ( ) ; return o ; }
private boolean copyDocument ( SearchDocument newDocument , SearchDocument document , Map < String , Set < String > > removedProperties ) { boolean mutated = _BOOL ; for ( String oldFieldName : document . getPropertyNames ( ) ) { newDocument . addProperty ( oldFieldName ) ; List < String > oldValues = document . getProperty ( oldFieldName ) ; if ( oldValues != null ) { Set < String > objectsRemoved = ( removedProperties != null ) ? removedProperties . get ( oldFieldName ) : null ; for ( String oldValue : oldValues ) { if ( ( objectsRemoved != null ) && ( objectsRemoved . contains ( oldValue ) ) ) { mutated = _BOOL ; } else { addProperty ( oldFieldName , oldValue , newDocument ) ; } } } } return mutated ; }
public SVDMatrix ( Matrix Arg ) { this ( Arg , _BOOL , _BOOL , _BOOL ) ; }
public void unlockForClear ( InternalDistributedMember locker ) { synchronized ( this . clearLockSync ) { InternalDistributedSystem instance = InternalDistributedSystem . getAnyInstance ( ) ; if ( instance != null && logger . isDebugEnabled ( ) ) { logger . debug ( _STR , locker , System . identityHashCode ( this ) ) ; } if ( this . lockOwner != null && ! locker . equals ( this . lockOwner ) ) { if ( instance != null && logger . isDebugEnabled ( ) ) { logger . debug ( _STR , lockOwner ) ; } return ; } unlockVersionGeneration ( locker ) ; } }
public UnicastRef ( ) { }
private static int lastIndexOf ( Object o , @ NotNull Object [ ] elements , int index ) { if ( o == null ) { for ( int i = index ; i >= _NUM ; i -- ) { if ( elements [ i ] == null ) { return i ; } } } else { for ( int i = index ; i >= _NUM ; i -- ) { if ( o . equals ( elements [ i ] ) ) { return i ; } } } return - _NUM ; }
public void write ( ByteBuffer buffer ) throws IOException { buffer . position ( _NUM ) ; if ( mFileChannel . size ( ) + buffer . capacity ( ) < mMaxSize ) { while ( buffer . hasRemaining ( ) ) { mFileChannel . write ( buffer ) ; } updateWaveFileSize ( ) ; } else { int remaining = ( int ) ( mMaxSize - mFileChannel . size ( ) ) ; remaining -= ( int ) ( remaining % mAudioFormat . getFrameSize ( ) ) ; byte [ ] bytes = buffer . array ( ) ; ByteBuffer current = ByteBuffer . wrap ( Arrays . copyOf ( bytes , remaining ) ) ; ByteBuffer next = ByteBuffer . wrap ( Arrays . copyOfRange ( bytes , remaining , bytes . length ) ) ; while ( current . hasRemaining ( ) ) { mFileChannel . write ( current ) ; } updateWaveFileSize ( ) ; rollover ( ) ; while ( next . hasRemaining ( ) ) { mFileChannel . write ( next ) ; } updateWaveFileSize ( ) ; } }
public static double dmod_d ( double lhs , double rhs ) { return rhs != _NUM ? lhs - rhs * Math . floor ( lhs / rhs ) : Double . NaN ; }
public void testMaxLess ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . max ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertTrue ( _STR , result . signum ( ) == _NUM ) ; }
private synchronized void block ( boolean tf ) { if ( tf ) { try { if ( m_ioThread . isAlive ( ) && m_state != IDLE ) { wait ( ) ; } } catch ( InterruptedException ex ) { } } else { notifyAll ( ) ; } }
public void move ( MouseEvent e ) { Point2D pnt = getProjectionPoint ( e ) ; int x = ( int ) pnt . getX ( ) ; int y = ( int ) pnt . getY ( ) ; if ( poly . getRenderType ( ) == OMGraphic . RENDERTYPE_OFFSET ) { gpm = new OffsetGrabPoint ( x , y ) ; gpm . clear ( ) ; } else { gpm = gpo ; gpm . clear ( ) ; gpm . set ( x , y ) ; } addPolyGrabPointsToOGP ( gpm ) ; movingPoint = gpm ; }
public FloatBuffer put ( float [ ] src , int srcOffset , int floatCount ) { Arrays . checkOffsetAndCount ( src . length , srcOffset , floatCount ) ; if ( floatCount > remaining ( ) ) { throw new BufferOverflowException ( ) ; } for ( int i = srcOffset ; i < srcOffset + floatCount ; ++ i ) { put ( src [ i ] ) ; } return this ; }
public final void dispatchCharactersEvents ( int nodeHandle , ContentHandler ch , boolean normalize ) throws SAXException { int identity = makeNodeIdentity ( nodeHandle ) ; if ( identity == DTM . NULL ) return ; int type = _type2 ( identity ) ; if ( type == DTM . ELEMENT_NODE || type == DTM . DOCUMENT_NODE ) { int startNode = identity ; identity = _firstch2 ( identity ) ; if ( DTM . NULL != identity ) { int offset = - _NUM ; int length = _NUM ; do { type = _exptype2 ( identity ) ; if ( type == DTM . TEXT_NODE || type == DTM . CDATA_SECTION_NODE ) { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex >= _NUM ) { if ( - _NUM == offset ) { offset = dataIndex > > > TEXT_LENGTH_BITS ; } length += dataIndex & TEXT_LENGTH_MAX ; } else { if ( - _NUM == offset ) { offset = m_data . elementAt ( - dataIndex ) ; } length += m_data . elementAt ( - dataIndex + _NUM ) ; } } identity ++ ; } while ( _parent2 ( identity ) >= startNode ) ; if ( length > _NUM ) { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , offset , length ) ; else m_chars . sendSAXcharacters ( ch , offset , length ) ; } } } else if ( DTM . TEXT_NODE == type || DTM . CDATA_SECTION_NODE == type ) { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex >= _NUM ) { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , dataIndex > > > TEXT_LENGTH_BITS , dataIndex & TEXT_LENGTH_MAX ) ; else m_chars . sendSAXcharacters ( ch , dataIndex > > > TEXT_LENGTH_BITS , dataIndex & TEXT_LENGTH_MAX ) ; } else { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , m_data . elementAt ( - dataIndex ) , m_data . elementAt ( - dataIndex + _NUM ) ) ; else m_chars . sendSAXcharacters ( ch , m_data . elementAt ( - dataIndex ) , m_data . elementAt ( - dataIndex + _NUM ) ) ; } } else { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex < _NUM ) { dataIndex = - dataIndex ; dataIndex = m_data . elementAt ( dataIndex + _NUM ) ; } String str = ( String ) m_values . elementAt ( dataIndex ) ; if ( normalize ) FastStringBuffer . sendNormalizedSAXcharacters ( str . toCharArray ( ) , _NUM , str . length ( ) , ch ) ; else ch . characters ( str . toCharArray ( ) , _NUM , str . length ( ) ) ; } }
public static boolean containIP ( int cidrPrefix , int cidrMaskBits , int ip ) { boolean matched = _BOOL ; int bitsToShift = _NUM - cidrMaskBits ; if ( bitsToShift > _NUM ) { cidrPrefix = cidrPrefix > > bitsToShift ; ip = ip > > bitsToShift ; cidrPrefix = cidrPrefix << bitsToShift ; ip = ip << bitsToShift ; } if ( cidrPrefix != ip ) { matched = _BOOL ; } return matched ; }
protected static Boolean lock ( String serviceName , Object name ) { DistributedLockService service = DistributedLockService . getServiceNamed ( serviceName ) ; boolean locked = service . lock ( name , _NUM , - _NUM ) ; return Boolean . valueOf ( locked ) ; }
protected int checkKnownCookie ( ) { int retVal = _NUM ; debug . message ( _STR , ADAPTIVE ) ; HttpServletRequest req = getHttpServletRequest ( ) ; if ( req != null ) { Cookie cookie = CookieUtils . getCookieFromReq ( req , knownCookieName ) ; if ( cookie != null ) { if ( knownCookieValue . equalsIgnoreCase ( CookieUtils . getCookieValue ( cookie ) ) ) { retVal = knownCookieScore ; } } } if ( knownCookieValue == null ) { knownCookieValue = _STR ; } if ( knownCookieSave ) { postAuthNMap . put ( _STR , knownCookieName ) ; postAuthNMap . put ( _STR , knownCookieValue ) ; } if ( ! knownCookieInvert ) { retVal = knownCookieScore - retVal ; } return retVal ; }
public File [ ] selectImportFiles ( final String title , boolean multipleSelection , FileNameExtensionFilter [ ] fileNameExtensionFilters ) { if ( Boolean . parseBoolean ( System . getProperty ( _STR , Boolean . toString ( OSType . isMac ( ) ) ) ) ) { FileDialog importDialog = fileDialogs . get ( title ) ; if ( importDialog == null ) { importDialog = new FileDialog ( this , title , FileDialog . LOAD ) ; fileDialogs . put ( title , importDialog ) ; } importDialog . setVisible ( _BOOL ) ; if ( importDialog . getFile ( ) != null ) { return new File [ ] { new File ( importDialog . getDirectory ( ) , importDialog . getFile ( ) ) } ; } } else { JFileChooser importChooser = fileChoosers . get ( title ) ; if ( importChooser == null ) { importChooser = new JFileChooser ( Utils . getCWD ( ) ) ; importChooser . setMultiSelectionEnabled ( multipleSelection ) ; for ( FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters ) { importChooser . setFileFilter ( fileNameExtensionFilter ) ; } importChooser . setDialogTitle ( title ) ; fileChoosers . put ( title , importChooser ) ; } int returnVal = importChooser . showOpenDialog ( this ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { if ( importChooser . isMultiSelectionEnabled ( ) ) { return importChooser . getSelectedFiles ( ) ; } else { return new File [ ] { importChooser . getSelectedFile ( ) } ; } } } return null ; }
public GT_MetaGenerated_Item ( String aUnlocalized , short aOffset , short aItemAmount ) { super ( aUnlocalized ) ; setCreativeTab ( GregTech_API . TAB_GREGTECH_MATERIALS ) ; setHasSubtypes ( _BOOL ) ; setMaxDamage ( _NUM ) ; mEnabledItems = new BitSet ( aItemAmount ) ; mVisibleItems = new BitSet ( aItemAmount ) ; mOffset = ( short ) Math . min ( _NUM , aOffset ) ; mItemAmount = ( short ) Math . min ( aItemAmount , _NUM - mOffset ) ; mIconList = new IIcon [ aItemAmount ] [ _NUM ] ; sInstances . put ( getUnlocalizedName ( ) , this ) ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( _NUM ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addAll ( Collections . list ( super . listOptions ( ) ) ) ; return newVector . elements ( ) ; }
@ Override public SSLEngineResult wrap ( ByteBuffer [ ] srcs , int offset , int len , ByteBuffer dst ) throws SSLException { if ( engine_was_shutteddown ) { return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , _NUM , _NUM ) ; } if ( ( srcs == null ) || ( dst == null ) ) { throw new IllegalStateException ( _STR ) ; } if ( dst . isReadOnly ( ) ) { throw new ReadOnlyBufferException ( ) ; } if ( ! handshake_started ) { beginHandshake ( ) ; } SSLEngineResult . HandshakeStatus handshakeStatus = getHandshakeStatus ( ) ; if ( ( session == null || engine_was_closed ) && ( handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_UNWRAP ) || handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_TASK ) ) ) { return new SSLEngineResult ( getEngineStatus ( ) , handshakeStatus , _NUM , _NUM ) ; } int capacity = dst . remaining ( ) ; int produced = _NUM ; if ( alertProtocol . hasAlert ( ) ) { if ( capacity < recordProtocol . getRecordSize ( _NUM ) ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } byte [ ] alert_data = alertProtocol . wrap ( ) ; dst . put ( alert_data ) ; if ( alertProtocol . isFatalAlert ( ) ) { alertProtocol . setProcessed ( ) ; if ( session != null ) { session . invalidate ( ) ; } shutdown ( ) ; return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , _NUM , alert_data . length ) ; } else { alertProtocol . setProcessed ( ) ; if ( close_notify_was_sent && close_notify_was_received ) { shutdown ( ) ; return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , _NUM , alert_data . length ) ; } return new SSLEngineResult ( getEngineStatus ( ) , getHandshakeStatus ( ) , _NUM , alert_data . length ) ; } } if ( capacity < recordProtocol . getMinRecordSize ( ) ) { if ( logger != null ) { logger . println ( _STR + capacity + _STR + recordProtocol . getMinRecordSize ( ) + _STR ) ; } return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } try { if ( ! handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_WRAP ) ) { dataStream . setSourceBuffers ( srcs , offset , len ) ; if ( ( capacity < SSLRecordProtocol . MAX_SSL_PACKET_SIZE ) && ( capacity < recordProtocol . getRecordSize ( dataStream . available ( ) ) ) ) { if ( logger != null ) { logger . println ( _STR + capacity + _STR + recordProtocol . getRecordSize ( dataStream . available ( ) ) + _STR ) ; } return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } if ( remaining_wrapped_data == null ) { remaining_wrapped_data = recordProtocol . wrap ( ContentType . APPLICATION_DATA , dataStream ) ; } if ( capacity < remaining_wrapped_data . length ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , dataStream . consumed ( ) , _NUM ) ; } else { dst . put ( remaining_wrapped_data ) ; produced = remaining_wrapped_data . length ; remaining_wrapped_data = null ; return new SSLEngineResult ( getEngineStatus ( ) , handshakeStatus , dataStream . consumed ( ) , produced ) ; } } else { if ( remaining_hsh_data == null ) { remaining_hsh_data = handshakeProtocol . wrap ( ) ; } if ( capacity < remaining_hsh_data . length ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } else { dst . put ( remaining_hsh_data ) ; produced = remaining_hsh_data . length ; remaining_hsh_data = null ; handshakeStatus = handshakeProtocol . getStatus ( ) ; if ( handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . FINISHED ) ) { session = recordProtocol . getSession ( ) ; } } return new SSLEngineResult ( getEngineStatus ( ) , getHandshakeStatus ( ) , _NUM , produced ) ; } } catch ( AlertException e ) { alertProtocol . alert ( AlertProtocol . FATAL , e . getDescriptionCode ( ) ) ; engine_was_closed = _BOOL ; if ( session != null ) { session . invalidate ( ) ; } throw e . getReason ( ) ; } }
public static byte [ ] readFully ( InputStream in ) throws IOException { try { return readFullyNoClose ( in ) ; } finally { in . close ( ) ; } }
public static ParsedSql parseSqlStatement ( String sql ) { Set < String > namedParameters = new HashSet < String > ( ) ; ParsedSql parsedSql = new ParsedSql ( sql ) ; char [ ] statement = sql . toCharArray ( ) ; int namedParameterCount = _NUM ; int unnamedParameterCount = _NUM ; int totalParameterCount = _NUM ; int i = _NUM ; while ( i < statement . length ) { int skipToPosition = skipCommentsAndQuotes ( statement , i ) ; if ( i != skipToPosition ) { if ( skipToPosition >= statement . length ) { break ; } i = skipToPosition ; } char c = statement [ i ] ; if ( c == _STR || c == _STR ) { int j = i + _NUM ; if ( j < statement . length && statement [ j ] == _STR && c == _STR ) { i = i + _NUM ; continue ; } while ( j < statement . length && ! isParameterSeparator ( statement [ j ] ) ) { j ++ ; } if ( j - i > _NUM ) { String parameter = sql . substring ( i + _NUM , j ) ; if ( ! namedParameters . contains ( parameter ) ) { namedParameters . add ( parameter ) ; namedParameterCount ++ ; } parsedSql . addNamedParameter ( parameter , i , j ) ; totalParameterCount ++ ; } i = j - _NUM ; } else { if ( c == _STR ) { unnamedParameterCount ++ ; totalParameterCount ++ ; } } i ++ ; } parsedSql . setNamedParameterCount ( namedParameterCount ) ; parsedSql . setUnnamedParameterCount ( unnamedParameterCount ) ; parsedSql . setTotalParameterCount ( totalParameterCount ) ; return parsedSql ; }
final void putLong ( int offset , long value ) { unsafe . putLong ( offset + address , value ) ; }
public boolean onEvent ( ActionResult result ) { synchronized ( this ) { String requestId = result . getResponseInfo ( ) . mRequestId ; if ( requestId == null ) { return _BOOL ; } boolean eventRemoved = mRequestIds . remove ( requestId ) ; if ( eventRemoved ) { Class key = null ; for ( Class type : mLastRequestIdByType . keySet ( ) ) { if ( requestId . equals ( mLastRequestIdByType . get ( type ) ) ) { key = type ; break ; } } if ( key != null ) { mLastRequestIdByType . remove ( key ) ; } } return eventRemoved ; } }
public static String gensalt ( int log_rounds , SecureRandom random ) { StringBuffer rs = new StringBuffer ( ) ; byte rnd [ ] = new byte [ BCRYPT_SALT_LEN ] ; random . nextBytes ( rnd ) ; rs . append ( _STR ) ; if ( log_rounds < _NUM ) { rs . append ( _STR ) ; } if ( log_rounds > _NUM ) { throw new IllegalArgumentException ( _STR ) ; } rs . append ( Integer . toString ( log_rounds ) ) ; rs . append ( _STR ) ; rs . append ( encode_base64 ( rnd , rnd . length ) ) ; return rs . toString ( ) ; }
public void checkKey ( Object key ) throws PartitionedRegionException { if ( ! hasHash ) { return ; } if ( key == null ) { return ; } int expected = key . hashCode ( ) ; if ( expected == keyHash ) { return ; } throw new PartitionedRegionException ( _STR + expected + _STR + keyHash ) ; }
public StringBuffer numberToString ( final String strNumberToConvert ) { String strNumber = _STR , signBit = _STR ; if ( strNumberToConvert . startsWith ( _STR ) ) { strNumber = _STR + strNumberToConvert . substring ( _NUM , strNumberToConvert . length ( ) ) ; signBit = _STR ; } else strNumber = _STR + strNumberToConvert ; final DecimalFormat dft = new DecimalFormat ( _STR ) ; final String strtemp = _STR + dft . format ( Double . parseDouble ( strNumber ) ) ; StringBuffer strbNumber = new StringBuffer ( strtemp ) ; final int intLen = strbNumber . length ( ) ; for ( int i = intLen - _NUM ; i > _NUM ; i = i - _NUM ) strbNumber . insert ( i , _STR ) ; if ( signBit . equals ( _STR ) ) strbNumber = strbNumber . insert ( _NUM , _STR ) ; return strbNumber ; }
private void runInitScriptIfRequired ( String url , Connection connection ) throws SQLException { Matcher matcher = INITSCRIPT_MATCHING_PATTERN . matcher ( url ) ; if ( matcher . matches ( ) ) { String initScriptPath = matcher . group ( _NUM ) ; try { URL resource = Resources . getResource ( initScriptPath ) ; String sql = Resources . toString ( resource , Charsets . UTF_8 ) ; ScriptUtils . executeSqlScript ( connection , initScriptPath , sql ) ; } catch ( IOException | IllegalArgumentException e ) { LOGGER . warn ( _STR , initScriptPath ) ; throw new SQLException ( _STR + initScriptPath , e ) ; } catch ( ScriptException e ) { LOGGER . error ( _STR , initScriptPath , e ) ; throw new SQLException ( _STR + initScriptPath , e ) ; } } }
private static int parseInt ( String value , int beginIndex , int endIndex ) throws NumberFormatException { if ( beginIndex < _NUM || endIndex > value . length ( ) || beginIndex > endIndex ) { throw new NumberFormatException ( value ) ; } int i = beginIndex ; int result = _NUM ; int digit ; if ( i < endIndex ) { digit = Character . digit ( value . charAt ( i ++ ) , _NUM ) ; if ( digit < _NUM ) { throw new NumberFormatException ( _STR + value ) ; } result = - digit ; } while ( i < endIndex ) { digit = Character . digit ( value . charAt ( i ++ ) , _NUM ) ; if ( digit < _NUM ) { throw new NumberFormatException ( _STR + value ) ; } result *= _NUM ; result -= digit ; } return - result ; }
public static void println ( Object x ) { out . println ( x ) ; }
public static void checkFinite ( final double [ ] val ) throws MathIllegalArgumentException { for ( int i = _NUM ; i < val . length ; i ++ ) { final double x = val [ i ] ; if ( Double . isInfinite ( x ) || Double . isNaN ( x ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . NOT_FINITE_NUMBER , x ) ; } } }
private void initKeyboardButtons ( KeyboardView view ) { mButtons = new ArrayList < > ( ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_0 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_1 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_2 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_3 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_4 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_5 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_6 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_7 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_8 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_9 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_clear ) ) ; for ( View button : mButtons ) { button . setOnClickListener ( this ) ; } }
public static boolean isAutoNew ( Properties ctx , int WindowNo ) { if ( ctx == null ) throw new IllegalArgumentException ( _STR ) ; String s = getContext ( ctx , WindowNo , _STR , _BOOL ) ; if ( s != null ) { if ( s . equals ( _STR ) ) return _BOOL ; else return _BOOL ; } return isAutoNew ( ctx ) ; }
private static String findRelativePath ( String filePath , String dirPath ) { String relPath ; if ( ! dirPath . endsWith ( File . separator ) ) { dirPath = dirPath + File . separator ; } if ( filePath . startsWith ( dirPath ) ) { relPath = filePath . substring ( dirPath . length ( ) ) ; } else { relPath = filePath ; } return relPath ; }
public boolean init ( ) { log . config ( _STR ) ; MClient client = MClient . get ( Env . getCtx ( ) ) ; String ASPFilter = _STR ; if ( client . isUseASP ( ) ) ASPFilter = _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR ; String sql = null ; if ( Env . isBaseLanguage ( Env . getCtx ( ) , _STR ) ) sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + ASPFilter + _STR ; else sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + Env . getAD_Language ( Env . getCtx ( ) ) + _STR + _STR + ASPFilter + _STR ; boolean hasFields = _BOOL ; Rows rows = new Rows ( ) ; try { PreparedStatement pstmt = DB . prepareStatement ( sql , null ) ; pstmt . setInt ( _NUM , m_processInfo . getAD_Process_ID ( ) ) ; ResultSet rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { hasFields = _BOOL ; createField ( rs , rows ) ; isPair = ! isPair ; } rs . close ( ) ; pstmt . close ( ) ; } catch ( SQLException e ) { log . log ( Level . SEVERE , sql , e ) ; } if ( m_mFields . size ( ) != m_mFields2 . size ( ) || m_mFields . size ( ) != m_wEditors . size ( ) || m_mFields2 . size ( ) != m_wEditors2 . size ( ) ) log . log ( Level . SEVERE , _STR ) ; if ( hasFields ) { centerPanel . appendChild ( rows ) ; dynamicDisplay ( ) ; } else dispose ( ) ; return hasFields ; }
private static String doNormalize ( String filename , char separator , boolean keepSeparator ) { if ( filename == null ) { return null ; } int size = filename . length ( ) ; if ( size == _NUM ) { return filename ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < _NUM ) { return null ; } char [ ] array = new char [ size + _NUM ] ; filename . getChars ( _NUM , filename . length ( ) , array , _NUM ) ; char otherSeparator = separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR ; for ( int i = _NUM ; i < array . length ; i ++ ) { if ( array [ i ] == otherSeparator ) { array [ i ] = separator ; } } boolean lastIsDirectory = _BOOL ; if ( array [ size - _NUM ] != separator ) { array [ size ++ ] = separator ; lastIsDirectory = _BOOL ; } for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == separator ) { System . arraycopy ( array , i , array , i - _NUM , size - i ) ; size -- ; i -- ; } } for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == _STR && ( i == prefix + _NUM || array [ i - _NUM ] == separator ) ) { if ( i == size - _NUM ) { lastIsDirectory = _BOOL ; } System . arraycopy ( array , i + _NUM , array , i - _NUM , size - i ) ; size -= _NUM ; i -- ; } } outer : for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == _STR && array [ i - _NUM ] == _STR && ( i == prefix + _NUM || array [ i - _NUM ] == separator ) ) { if ( i == prefix + _NUM ) { return null ; } if ( i == size - _NUM ) { lastIsDirectory = _BOOL ; } int j ; for ( j = i - _NUM ; j >= prefix ; j -- ) { if ( array [ j ] == separator ) { System . arraycopy ( array , i + _NUM , array , j + _NUM , size - i ) ; size -= i - j ; i = j + _NUM ; continue outer ; } } System . arraycopy ( array , i + _NUM , array , prefix , size - i ) ; size -= i + _NUM - prefix ; i = prefix + _NUM ; } } if ( size <= _NUM ) { return _STR ; } if ( size <= prefix ) { return new String ( array , _NUM , size ) ; } if ( lastIsDirectory && keepSeparator ) { return new String ( array , _NUM , size ) ; } return new String ( array , _NUM , size - _NUM ) ; }
public void resetSingleton ( ) { root = null ; tmpFileCounter . set ( _NUM ) ; accessedFiles . clear ( ) ; shouldAllThrowIOException = _BOOL ; classesThatShouldThrowIOException . clear ( ) ; synchronized ( leakingResources ) { for ( LeakingResource resource : leakingResources ) { try { resource . release ( ) ; } catch ( Exception e ) { logger . warn ( _STR + e . getMessage ( ) , e ) ; } } leakingResources . clear ( ) ; } }
public void testAndNotNegNegFirstLonger ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; byte bBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . andNot ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public static String generateStringOfCharacters ( int count ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { sb . append ( CHARACTERS . charAt ( ( int ) ( Math . random ( ) * CHARACTERS . length ( ) ) ) ) ; } return sb . toString ( ) ; }
private ExchangeRateManager ( ) { if ( System . getProperty ( _STR ) == null ) throw new UnsupportedOperationException ( _STR ) ; addKnownRates ( ) ; }
public void removeAttribute ( String name ) { if ( name != null ) if ( attributesList != null ) { for ( int i = _NUM ; i < attributesList . size ( ) ; i ++ ) { Object o = attributesList . elementAt ( i ) ; if ( o instanceof AttributeField ) { AttributeField a = ( AttributeField ) o ; try { String n = a . getName ( ) ; if ( n != null ) { if ( name . equals ( n ) ) { attributesList . remove ( a ) ; } } } catch ( SdpParseException e ) { } } } } }
@ Override public void evict ( String key ) { key = safetyKey ( key ) ; final File file = new File ( cacheDirectory , key ) ; file . delete ( ) ; }
public static boolean isUniqueContraintError ( Exception e ) { if ( DB . isPostgreSQL ( ) ) return isSQLState ( e , _STR ) ; return isErrorCode ( e , _NUM ) ; }
ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
void addFillComponents ( Container panel , int [ ] cols , int [ ] rows ) { Dimension filler = new Dimension ( _NUM , _NUM ) ; boolean filled_cell_11 = _BOOL ; CellConstraints cc = new CellConstraints ( ) ; if ( cols . length > _NUM && rows . length > _NUM ) { if ( cols [ _NUM ] == _NUM && rows [ _NUM ] == _NUM ) { panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , _NUM ) ) ; filled_cell_11 = _BOOL ; } } for ( int index = _NUM ; index < cols . length ; index ++ ) { if ( cols [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( cols [ index ] , _NUM ) ) ; } for ( int index = _NUM ; index < rows . length ; index ++ ) { if ( rows [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , rows [ index ] ) ) ; } }
private void insertUsedContextPrefixes ( ) { int unknownPrefixesCount = unknownPrefixesInXMLLiteral . size ( ) ; if ( unknownPrefixesCount > _NUM ) { StringBuilder contextPrefixes = new StringBuilder ( _NUM ) ; ElementInfo topElement = peekStack ( ) ; for ( int i = _NUM ; i < unknownPrefixesCount ; i ++ ) { String prefix = unknownPrefixesInXMLLiteral . get ( i ) ; String namespace = topElement . getNamespace ( prefix ) ; if ( namespace != null ) { appendNamespaceDecl ( contextPrefixes , prefix , namespace ) ; } } int endOfFirstStartTag = charBuf . indexOf ( _STR ) ; charBuf . insert ( endOfFirstStartTag , contextPrefixes . toString ( ) ) ; } unknownPrefixesInXMLLiteral . clear ( ) ; }
public void addPutTimeNanos ( long duration ) { putTimeNanos . addAndGet ( duration ) ; if ( delegate != null ) delegate . addPutTimeNanos ( duration ) ; }
public static List < Integer > precomputeHashes ( byte [ ] data , long tweak ) { ArrayList < Integer > list = new ArrayList < > ( MAX_HASH_FUNCS ) ; for ( int i = _NUM ; i < MAX_HASH_FUNCS ; ++ i ) { list . add ( murmurhash3bit ( i , data , tweak ) ) ; } return list ; }
@ RequestProcessing ( value = _STR , method = HTTPRequestMethod . GET ) @ Before ( adviceClass = { StopwatchStartAdvice . class , AnonymousViewCheck . class , UserBlockCheck . class } ) @ After ( adviceClass = StopwatchEndAdvice . class ) public void showHomeFollowingTags ( final HTTPRequestContext context , final HttpServletRequest request , final HttpServletResponse response , final String userName ) throws Exception { final JSONObject user = ( JSONObject ) request . getAttribute ( User . USER ) ; request . setAttribute ( Keys . TEMAPLTE_DIR_NAME , Symphonys . get ( _STR ) ) ; final AbstractFreeMarkerRenderer renderer = new SkinRenderer ( ) ; context . setRenderer ( renderer ) ; renderer . setTemplateName ( _STR ) ; final Map < String , Object > dataModel = renderer . getDataModel ( ) ; filler . fillHeaderAndFooter ( request , response , dataModel ) ; String pageNumStr = request . getParameter ( _STR ) ; if ( Strings . isEmptyOrNull ( pageNumStr ) || ! Strings . isNumeric ( pageNumStr ) ) { pageNumStr = _STR ; } final int pageNum = Integer . valueOf ( pageNumStr ) ; final int pageSize = Symphonys . getInt ( _STR ) ; final int windowSize = Symphonys . getInt ( _STR ) ; fillHomeUser ( dataModel , user ) ; final String followingId = user . optString ( Keys . OBJECT_ID ) ; dataModel . put ( Follow . FOLLOWING_ID , followingId ) ; avatarQueryService . fillUserAvatarURL ( user ) ; final JSONObject followingTagsResult = followQueryService . getFollowingTags ( followingId , pageNum , pageSize ) ; final List < JSONObject > followingTags = ( List < JSONObject > ) followingTagsResult . opt ( Keys . RESULTS ) ; dataModel . put ( Common . USER_HOME_FOLLOWING_TAGS , followingTags ) ; final boolean isLoggedIn = ( Boolean ) dataModel . get ( Common . IS_LOGGED_IN ) ; if ( isLoggedIn ) { final JSONObject currentUser = ( JSONObject ) dataModel . get ( Common . CURRENT_USER ) ; final String followerId = currentUser . optString ( Keys . OBJECT_ID ) ; final boolean isFollowing = followQueryService . isFollowing ( followerId , followingId ) ; dataModel . put ( Common . IS_FOLLOWING , isFollowing ) ; for ( final JSONObject followingTag : followingTags ) { final String homeUserFollowingTagId = followingTag . optString ( Keys . OBJECT_ID ) ; followingTag . put ( Common . IS_FOLLOWING , followQueryService . isFollowing ( followerId , homeUserFollowingTagId ) ) ; } } user . put ( UserExt . USER_T_CREATE_TIME , new Date ( user . getLong ( Keys . OBJECT_ID ) ) ) ; final int followingTagCnt = followingTagsResult . optInt ( Pagination . PAGINATION_RECORD_COUNT ) ; final int pageCount = ( int ) Math . ceil ( followingTagCnt / ( double ) pageSize ) ; final List < Integer > pageNums = Paginator . paginate ( pageNum , pageSize , pageCount , windowSize ) ; if ( ! pageNums . isEmpty ( ) ) { dataModel . put ( Pagination . PAGINATION_FIRST_PAGE_NUM , pageNums . get ( _NUM ) ) ; dataModel . put ( Pagination . PAGINATION_LAST_PAGE_NUM , pageNums . get ( pageNums . size ( ) - _NUM ) ) ; } dataModel . put ( Pagination . PAGINATION_CURRENT_PAGE_NUM , pageNum ) ; dataModel . put ( Pagination . PAGINATION_PAGE_COUNT , pageCount ) ; dataModel . put ( Pagination . PAGINATION_PAGE_NUMS , pageNums ) ; }
public int elevationAt ( float lat , float lon ) { if ( frame_is_valid == _BOOL ) { if ( lat >= dsi . sw_lat && lat <= dsi . ne_lat && lon >= dsi . sw_lon && lon <= dsi . ne_lon ) { int lat_index = Math . round ( ( lat - dsi . sw_lat ) * _NUM / uhl . lat_post_interval ) ; int lon_index = Math . round ( ( lon - dsi . sw_lon ) * _NUM / uhl . lon_post_interval ) ; if ( elevations [ lon_index ] == null ) readDataRecord ( lon_index ) ; return ( int ) elevations [ lon_index ] [ lat_index ] ; } } return - _NUM ; }
ObservedObject createObservedObject ( ObjectName object ) { return new ObservedObject ( object ) ; }
private void deleteChildren ( Element container ) { while ( container . hasChildNodes ( ) ) { container . removeChild ( container . getLastChild ( ) ) ; } }
private void saveInitialChildState ( FacesContext facesContext , UIComponent component ) { if ( component instanceof EditableValueHolder && ! component . isTransient ( ) ) { String clientId = component . getClientId ( facesContext ) ; SavedState state = new SavedState ( ) ; initialChildState . put ( clientId , state ) ; state . populate ( ( EditableValueHolder ) component ) ; } Iterator < UIComponent > iterator = component . getFacetsAndChildren ( ) ; while ( iterator . hasNext ( ) ) { saveChildState ( facesContext , iterator . next ( ) ) ; } }
public boolean is_overlap ( ) { Set < BrdItem > start_contacts = get_start_contacts ( ) ; Set < BrdItem > end_contacts = get_end_contacts ( ) ; for ( BrdItem end_contact : end_contacts ) { if ( start_contacts . contains ( end_contact ) ) return _BOOL ; } return _BOOL ; }
static Object ensureNotNull ( Location location , Object value ) { if ( value == null ) { throw new EvalException ( location , _STR ) ; } return value ; }
public static final ArrayList readListXml ( InputStream in ) throws XmlPullParserException , IOException { XmlPullParser parser = Xml . newPullParser ( ) ; parser . setInput ( in , null ) ; return ( ArrayList ) readValueXml ( parser , new String [ _NUM ] ) ; }
private static String padRight ( String s , int minLength ) { return String . format ( _STR + minLength + _STR , s ) ; }
@ Override public Enumeration < String > enumerateMeasures ( ) { Vector < String > newVector = new Vector < String > ( _NUM ) ; newVector . addElement ( _STR ) ; return newVector . elements ( ) ; }
protected synchronized void onSendTaskCompleted ( RecordBuffer < R > buffer ) { logger . trace ( _STR , name ( ) , buffer ) ; activeSendTasks . decrementAndGet ( ) ; }
public void addPreferencesButton ( ) { JButton prefsButton = new JButton ( _STR ) ; prefsButton . setHideActionText ( _BOOL ) ; prefsButton . setAction ( RasterPlotActions . getPropertiesDialogAction ( this ) ) ; buttonPanel . add ( prefsButton ) ; }
public void clearUnused ( ConfigImpl config ) { SystemOut . printDate ( config . getOutWriter ( ) , _STR + size ( ) + _STR + maxSize + _STR ) ; if ( size ( ) > maxSize ) { Object [ ] keys = keys ( ) ; LongKeyList list = new LongKeyList ( ) ; for ( int i = _NUM ; i < keys . length ; i ++ ) { PageSource ps = getPageSource ( keys [ i ] , _BOOL ) ; long updateTime = ps . getLastAccessTime ( ) ; if ( updateTime + timeout < System . currentTimeMillis ( ) ) { long add = ( ( ps . getAccessCount ( ) - _NUM ) * _NUM ) ; if ( add > timeout ) add = timeout ; list . add ( updateTime + add , keys [ i ] ) ; } } while ( size ( ) > maxSize ) { Object key = list . shift ( ) ; if ( key == null ) break ; remove ( key ) ; } } }
public static GridField [ ] createFields ( Properties ctx , int WindowNo , int TabNo , int AD_Tab_ID ) { ArrayList < GridFieldVO > listVO = new ArrayList < GridFieldVO > ( ) ; int AD_Window_ID = _NUM ; boolean readOnly = _BOOL ; String sql = GridFieldVO . getSQL ( ctx ) ; PreparedStatement pstmt = null ; try { pstmt = DB . prepareStatement ( sql , null ) ; pstmt . setInt ( _NUM , AD_Tab_ID ) ; ResultSet rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { GridFieldVO vo = GridFieldVO . create ( ctx , WindowNo , TabNo , AD_Window_ID , AD_Tab_ID , readOnly , rs ) ; listVO . add ( vo ) ; } rs . close ( ) ; pstmt . close ( ) ; pstmt = null ; } catch ( Exception e ) { log . log ( Level . SEVERE , sql , e ) ; } try { if ( pstmt != null ) pstmt . close ( ) ; pstmt = null ; } catch ( Exception e ) { pstmt = null ; } GridField [ ] retValue = new GridField [ listVO . size ( ) ] ; for ( int i = _NUM ; i < listVO . size ( ) ; i ++ ) retValue [ i ] = new GridField ( ( GridFieldVO ) listVO . get ( i ) ) ; return retValue ; }
public ShortInterleavedRaster ( SampleModel sampleModel , DataBuffer dataBuffer , Point origin ) { this ( sampleModel , dataBuffer , new Rectangle ( origin . x , origin . y , sampleModel . getWidth ( ) , sampleModel . getHeight ( ) ) , origin , null ) ; }
private void copyCarbonDataFileToCarbonStorePath ( String localFileName ) throws CarbonDataWriterException { long copyStartTime = System . currentTimeMillis ( ) ; LOGGER . info ( _STR + localFileName + _STR + carbonDataDirectoryPath ) ; try { CarbonFile localCarbonFile = FileFactory . getCarbonFile ( localFileName , FileFactory . getFileType ( localFileName ) ) ; String carbonFilePath = carbonDataDirectoryPath + localFileName . substring ( localFileName . lastIndexOf ( File . separator ) ) ; copyLocalFileToCarbonStore ( carbonFilePath , localFileName , CarbonCommonConstants . BYTEBUFFER_SIZE , getMaxOfBlockAndFileSize ( fileSizeInBytes , localCarbonFile . getSize ( ) ) ) ; } catch ( IOException e ) { throw new CarbonDataWriterException ( _STR ) ; } LOGGER . info ( _STR + localFileName + _STR + ( System . currentTimeMillis ( ) - copyStartTime ) ) ; }
@ Override public boolean flingBackward ( Selector obj , boolean isVertical ) throws UiObjectNotFoundException { UiScrollable scrollable = new UiScrollable ( obj . toUiSelector ( ) ) ; if ( isVertical ) scrollable . setAsVerticalList ( ) ; else scrollable . setAsHorizontalList ( ) ; return scrollable . flingBackward ( ) ; }
protected static double toDouble ( String s ) { try { return Double . parseDouble ( s ) ; } catch ( Exception e ) { TestCase . fail ( _STR + s + _STR + throwableToString ( e ) ) ; return Double . NaN ; } }
public void addListener ( final IFilterPanelListener < T > listener ) { m_listeners . addListener ( listener ) ; }
public void testmirror ( File orig , File origni , File truecolor ) { File mirror = TestSupport . addSuffixToName ( orig , _STR ) ; File recov = TestSupport . addSuffixToName ( orig , _STR ) ; long crc0 = _NUM ; boolean interlaced ; boolean palete ; { PngReader pngr = new PngReader ( orig ) ; PngWriter pngw = null ; try { if ( rand . nextBoolean ( ) ) pngr . setLineSetFactory ( ImageLineSetDefault . getFactoryByte ( ) ) ; palete = pngr . imgInfo . indexed ; pngr . prepareSimpleDigestComputation ( ) ; interlaced = pngr . isInterlaced ( ) ; pngw = new PngWriter ( mirror , pngr . imgInfo , _BOOL ) ; pngw . setFilterType ( FilterType . FILTER_CYCLIC ) ; pngw . copyChunksFrom ( pngr . getChunksList ( ) ) ; IImageLineSet < ? extends IImageLine > lines = pngr . readRows ( ) ; for ( int row = _NUM ; row < pngr . imgInfo . rows ; row ++ ) { mirrorLine ( lines . getImageLine ( row ) , pngr . imgInfo ) ; pngw . writeRow ( lines . getImageLine ( row ) ) ; } pngr . end ( ) ; crc0 = PngHelperInternal . getDigest ( pngr ) ; pngw . end ( ) ; } finally { pngr . close ( ) ; if ( pngw != null ) pngw . close ( ) ; } } { PngReader pngr2 = new PngReader ( mirror ) ; PngWriter pngw = null ; try { if ( pngr2 . imgInfo . bitDepth < _NUM && rand . nextBoolean ( ) ) pngr2 . setLineSetFactory ( ImageLineSetDefault . getFactoryByte ( ) ) ; pngw = new PngWriter ( recov , pngr2 . imgInfo , _BOOL ) ; pngw . setFilterType ( FilterType . FILTER_DEFAULT ) ; pngw . copyChunksFrom ( pngr2 . getChunksList ( ) ) ; for ( int row = _NUM ; row < pngr2 . imgInfo . rows ; row ++ ) { IImageLine line = pngr2 . readRow ( ) ; mirrorLine ( line , pngr2 . imgInfo ) ; pngw . writeRow ( line ) ; } pngr2 . end ( ) ; pngw . end ( ) ; } finally { pngr2 . close ( ) ; if ( pngw != null ) pngw . close ( ) ; } } if ( ! interlaced ) TestSupport . testCrcEquals ( recov , crc0 ) ; else TestSupport . testSameCrc ( recov , origni ) ; if ( interlaced ) additionalTestInterlaced ( orig , origni ) ; if ( palete && truecolor . exists ( ) ) additionalTestPalette ( orig , truecolor ) ; }
public boolean isStable ( ) { return myFeatures . contains ( FEATURE_STABLE ) ; }
public static void calcTextSize ( Paint paint , String demoText , FSize outputFSize ) { Rect r = mCalcTextSizeRect ; r . set ( _NUM , _NUM , _NUM , _NUM ) ; paint . getTextBounds ( demoText , _NUM , demoText . length ( ) , r ) ; outputFSize . width = r . width ( ) ; outputFSize . height = r . height ( ) ; }
protected void performDefaults ( ) { super . performDefaults ( ) ; initializeValues ( ) ; verifyValidation ( ) ; }
public String toString ( ) { final StringBuilder buf = new StringBuilder ( _STR ) ; for ( int i = _NUM , end = _pos - _NUM ; i < end ; i ++ ) { buf . append ( _data [ i ] ) ; buf . append ( _STR ) ; } if ( size ( ) > _NUM ) { buf . append ( _data [ _pos - _NUM ] ) ; } buf . append ( _STR ) ; return buf . toString ( ) ; }
public static void write ( int x1 , int y1 , Image image , int image_width , int image_height , LinkProperties properties , DataOutputStream dos ) throws IOException , InterruptedException { int [ ] pixels = new int [ image_width * image_height ] ; PixelGrabber pixelgrabber = new PixelGrabber ( image , _NUM , _NUM , image_width , image_height , pixels , _NUM , image_width ) ; pixelgrabber . grabPixels ( ) ; LinkRaster . write ( x1 , y1 , image_width , image_height , pixels , properties , dos ) ; }
@ SuppressWarnings ( _STR ) public void testProjectionPredicateDifferentClassLoaders ( ) throws Exception { final Ignite ignite3 = startGrid ( _NUM ) ; URL [ ] clsLdrUrls ; try { clsLdrUrls = new URL [ ] { new URL ( GridTestProperties . getProperty ( _STR ) ) } ; } catch ( MalformedURLException e ) { throw new RuntimeException ( _STR , e ) ; } ClassLoader ldr1 = new URLClassLoader ( clsLdrUrls , getClass ( ) . getClassLoader ( ) ) ; Class taskCls = ldr1 . loadClass ( _STR ) ; Class nodeFilterCls = ldr1 . loadClass ( _STR ) ; IgnitePredicate < ClusterNode > nodeFilter = ( IgnitePredicate < ClusterNode > ) nodeFilterCls . getConstructor ( UUID . class ) . newInstance ( ignite2 . cluster ( ) . localNode ( ) . id ( ) ) ; Map < UUID , Integer > ret = ( Map < UUID , Integer > ) executeAsync ( compute ( ignite1 . cluster ( ) . forPredicate ( nodeFilter ) ) , taskCls , null ) . get ( TASK_EXEC_TIMEOUT_MS ) ; assert ret != null ; assert ret . get ( ignite1 . cluster ( ) . localNode ( ) . id ( ) ) != null && ret . get ( ignite1 . cluster ( ) . localNode ( ) . id ( ) ) == _NUM : ret . get ( ignite1 . cluster ( ) . localNode ( ) . id ( ) ) ; assert ret . get ( ignite3 . cluster ( ) . localNode ( ) . id ( ) ) != null && ret . get ( ignite3 . cluster ( ) . localNode ( ) . id ( ) ) == _NUM : ret . get ( ignite3 . cluster ( ) . localNode ( ) . id ( ) ) ; }
public void stateChanged ( ChangeEvent evt ) { int scale = slider . getValue ( ) ; value . setText ( _STR + String . valueOf ( scale ) ) ; size . setText ( _STR + ( width * scale ) + _STR + ( height * scale ) + _STR ) ; preview . repaint ( ) ; }
public static void writeToFile ( String content , File dstFile ) throws IOException { BufferedWriter bufferedWriter = new BufferedWriter ( new FileWriter ( dstFile , _BOOL ) ) ; bufferedWriter . write ( content ) ; bufferedWriter . close ( ) ; }
public static boolean isFileURL ( URL url ) { String protocol = url . getProtocol ( ) ; return ( URL_PROTOCOL_FILE . equals ( protocol ) || URL_PROTOCOL_VFSFILE . equals ( protocol ) || URL_PROTOCOL_VFS . equals ( protocol ) ) ; }
private void updateStatus ( String relayState , int currentStatus ) { Integer tmp = ( Integer ) currentStatusMap . get ( relayState ) ; if ( tmp != null ) { int previousStatus = tmp . intValue ( ) ; switch ( previousStatus ) { case LOGOUT_SUCCEEDED_STATUS : if ( currentStatus > previousStatus ) { currentStatusMap . put ( relayState , new Integer ( currentStatus ) ) ; } break ; case LOGOUT_FAILED_STATUS : if ( currentStatus < LOGOUT_FAILED_STATUS ) { currentStatusMap . put ( relayState , new Integer ( LOGOUT_PARTIAL_STATUS ) ) ; } break ; default : break ; } } else { currentStatusMap . put ( relayState , new Integer ( currentStatus ) ) ; } }
public static int [ ] oidStrToInts ( String oid ) throws IOException { int length = oid . length ( ) ; if ( oid . charAt ( length - _NUM ) == _STR ) { throw new IOException ( _STR + oid ) ; } int [ ] result = new int [ length / _NUM + _NUM ] ; int number = _NUM ; for ( int i = _NUM ; i < length ; i ++ ) { int value = _NUM ; int pos = i ; for ( ; i < length ; i ++ ) { char ch = oid . charAt ( i ) ; if ( ( ch < _STR ) || ( ch > _STR ) ) { break ; } value = _NUM * value + ( ch - _STR ) ; } if ( i == pos ) { throw new IOException ( _STR + oid ) ; } result [ number ++ ] = value ; if ( i == length ) { break ; } char ch = oid . charAt ( i ) ; if ( ch != _STR ) { throw new IOException ( _STR + oid ) ; } } if ( number < _NUM ) { throw new IOException ( _STR + oid ) ; } return Arrays . copyOfRange ( result , _NUM , number ) ; }
public static Set < String > listServers ( SSOToken ssoToken , String siteName ) throws SMSException , SSOException , ConfigurationException { Set < String > members = new HashSet < > ( ) ; String siteId = getSiteId ( ssoToken , siteName ) ; if ( siteId != null ) { Set < String > allServers = ServerConfiguration . getServers ( ssoToken ) ; for ( String svr : allServers ) { if ( ServerConfiguration . belongToSite ( ssoToken , svr , siteName ) ) { members . add ( svr ) ; } } } return members ; }
public static GenericObjectEditorDialog createDialog ( Container parent ) { return createDialog ( parent , null ) ; }
public static boolean containsInLineFeatures ( StyledLayerDescriptor sld ) { if ( sld != null ) { for ( StyledLayer layer : sld . layers ( ) ) { if ( layer instanceof UserLayer ) { UserLayer userLayer = ( UserLayer ) layer ; if ( userLayer . getInlineFeatureDatastore ( ) != null ) { return _BOOL ; } } } } return _BOOL ; }
public byte decodeBuffer ( InputStream in ) [ ] throws IOException { ByteArrayOutputStream outStream = new ByteArrayOutputStream ( ) ; decodeBuffer ( in , outStream ) ; return ( outStream . toByteArray ( ) ) ; }
public static void runFinalization ( ) { RUNTIME . runFinalization ( ) ; }
private void displayAllStringDefinedInStringXml ( ) { SimpleIconFontTextView textView = ( SimpleIconFontTextView ) findViewById ( R . id . text_view_1 ) ; List < String > list = new ArrayList < > ( ) ; list . add ( getString ( R . string . gems_logo ) ) ; String text = TextUtils . join ( _STR , list ) ; textView . setText ( text ) ; }
public static void checkHTTPRequestLength ( HttpServletRequest request ) throws ServletException { int maxContentLength = SAMLUtils . getMaxContentLength ( ) ; if ( maxContentLength != _NUM ) { int length = request . getContentLength ( ) ; if ( length == - _NUM ) { throw new ServletException ( bundle . getString ( _STR ) ) ; } if ( length > maxContentLength ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + length ) ; } throw new ServletException ( bundle . getString ( _STR ) ) ; } } }
public void addForeignKeyConstraint ( String name , String sourceField , String targetField , String targetTable ) { ForeignKeyConstraint foreignKey = new ForeignKeyConstraint ( name , sourceField , targetField , targetTable ) ; addForeignKeyConstraint ( foreignKey ) ; }
@ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mHandler = new Handler ( ) ; setContentView ( R . layout . voice_recognition ) ; Button speakButton = ( Button ) findViewById ( R . id . btn_speak ) ; mList = ( ListView ) findViewById ( R . id . list ) ; mSupportedLanguageView = ( Spinner ) findViewById ( R . id . supported_languages ) ; PackageManager pm = getPackageManager ( ) ; List < ResolveInfo > activities = pm . queryIntentActivities ( new Intent ( RecognizerIntent . ACTION_RECOGNIZE_SPEECH ) , _NUM ) ; if ( activities . size ( ) != _NUM ) { speakButton . setOnClickListener ( this ) ; } else { speakButton . setEnabled ( _BOOL ) ; speakButton . setText ( _STR ) ; } refreshVoiceSettings ( ) ; }
public void push ( Notification notification , NotificationResponseListener listener ) { final String notificationTopic = notification . getTopic ( ) ; final String topic = notificationTopic == null ? defaultTopic : notificationTopic ; Request req = Utils . buildRequest ( client , topic , notification , gateway ) ; semaphore . acquireUninterruptibly ( ) ; req . send ( new ResponseListener ( semaphore , notification , listener ) ) ; }
private static void appendJSONPair ( StringBuilder json , String key , String value ) throws UnsupportedEncodingException { boolean isValueNumeric = _BOOL ; try { if ( value . equals ( _STR ) || ! value . endsWith ( _STR ) ) { Double . parseDouble ( value ) ; isValueNumeric = _BOOL ; } } catch ( NumberFormatException e ) { isValueNumeric = _BOOL ; } if ( json . charAt ( json . length ( ) - _NUM ) != _STR ) { json . append ( _STR ) ; } json . append ( escapeJSON ( key ) ) ; json . append ( _STR ) ; if ( isValueNumeric ) { json . append ( value ) ; } else { json . append ( escapeJSON ( value ) ) ; } }
public void updateFromResource ( ) { for ( String resource : resources ) { InputStream is = ClassLoader . getSystemResourceAsStream ( resource ) ; LinkedHashMap < EntryType , LinkedHashMap < String , ConfigEntry > > parseResult = parse ( is ) ; for ( EntryType type : myMap . keySet ( ) ) { LinkedHashMap < String , ConfigEntry > dataMappings = myMap . get ( type ) ; LinkedHashMap < String , ConfigEntry > resourceMappings = parseResult . get ( type ) ; LinkedHashMap < String , ConfigEntry > tempMappings = new LinkedHashMap < String , ConfigEntry > ( ) ; LinkedHashSet < String > keys = new LinkedHashSet < String > ( ) ; keys . addAll ( dataMappings . keySet ( ) ) ; keys . addAll ( resourceMappings . keySet ( ) ) ; for ( String key : keys ) { if ( resourceMappings . containsKey ( key ) ) { tempMappings . put ( key , resourceMappings . get ( key ) ) ; } else { tempMappings . put ( key , dataMappings . get ( key ) ) ; } } myMap . put ( type , tempMappings ) ; } } }
private void deselect ( final int index , final boolean shouldFireEvents ) { checkWidget ( ) ; if ( index < _NUM || index >= items . size ( ) ) { return ; } final DLItem item = selection . remove ( index ) ; if ( shouldFireEvents ) { fireSelectionEvent ( item ) ; } final List < DLItem > deselectedItems = new ArrayList < DLItem > ( ) ; item . setLastAction ( LAST_ACTION . DESELECTION ) ; deselectedItems . add ( item ) ; if ( shouldFireEvents ) { fireSelectionChangeEvent ( deselectedItems ) ; } redrawTables ( ) ; }
public boolean isLeaf ( Object nd ) { Node node = ( Node ) nd ; return ! node . hasChildNodes ( ) ; }
public void addListener ( Listener listener ) { mListeners . add ( listener ) ; notifyServiceDiscovered ( mMatchingDrones ) ; }
@ Override boolean equals ( Object obj ) ;
private double [ ] parseVector ( String s ) { String [ ] entries = WHITESPACE_PATTERN . split ( s ) ; double [ ] d = new double [ entries . length ] ; for ( int i = _NUM ; i < entries . length ; i ++ ) { try { d [ i ] = ParseUtil . parseDouble ( entries [ i ] ) ; } catch ( NumberFormatException e ) { throw new AbortException ( _STR ) ; } } return d ; }
public void test_create_update ( ) throws IOException { final String id = _STR ; final Map < String , Object > metadata = new HashMap < String , Object > ( ) ; metadata . put ( FileMetadataSchema . ID , id ) ; metadata . put ( _STR , _STR ) ; final int version0 ; final long createTime0 ; final byte [ ] expected0 = new byte [ ] { _NUM , _NUM , _NUM } ; { version0 = repo . create ( metadata ) ; metadata . put ( FileMetadataSchema . VERSION , Integer . valueOf ( version0 ) ) ; assertEquals ( _STR , _NUM , version0 ) ; RepositoryDocumentImpl doc = ( RepositoryDocumentImpl ) repo . read ( id ) ; createTime0 = doc . getVersionCreateTime ( ) ; Map < String , Object > actual = doc . asMap ( ) ; assertEquals ( _STR , id , actual . get ( FileMetadataSchema . ID ) ) ; assertEquals ( _STR , version0 , actual . get ( FileMetadataSchema . VERSION ) ) ; assertEquals ( _STR , _STR , actual . get ( _STR ) ) ; assertEquals ( _STR , metadata . size ( ) , actual . size ( ) ) ; repo . copyStream ( id , version0 , new ByteArrayInputStream ( expected0 ) ) ; assertEquals ( _STR , expected0 , read ( repo . inputStream ( id , version0 ) ) ) ; } final int version1 ; final long createTime1 ; final byte [ ] expected1 = new byte [ ] { _NUM , _NUM , _NUM } ; { metadata . put ( _STR , _STR ) ; DocumentImpl doc1 = new DocumentImpl ( metadata ) ; doc1 . copyStream ( expected1 ) ; version1 = repo . update ( doc1 ) ; assertEquals ( _STR , _NUM , version1 ) ; metadata . put ( FileMetadataSchema . VERSION , Integer . valueOf ( version1 ) ) ; RepositoryDocumentImpl doc = ( RepositoryDocumentImpl ) repo . read ( id ) ; createTime1 = doc . getVersionCreateTime ( ) ; assertNotSame ( _STR , _NUM , createTime1 ) ; assertNotSame ( _STR , createTime0 , createTime1 ) ; Map < String , Object > actual = doc . asMap ( ) ; assertEquals ( _STR , id , actual . get ( FileMetadataSchema . ID ) ) ; assertEquals ( _STR , version1 , actual . get ( FileMetadataSchema . VERSION ) ) ; assertEquals ( _STR , _STR , actual . get ( _STR ) ) ; assertEquals ( _STR , metadata . size ( ) , actual . size ( ) ) ; assertEquals ( _STR , expected1 , read ( repo . inputStream ( id , version1 ) ) ) ; assertEquals ( _STR , new byte [ ] { } , read ( repo . inputStream ( id , version0 ) ) ) ; { ITPS tps = repo . readMetadata ( id , createTime1 - _NUM ) ; ITPV tpv = tps . get ( FileMetadataSchema . VERSION ) ; assertEquals ( _STR , null , tpv . getValue ( ) ) ; } } }
@ Override public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeDouble ( knnDistance ) ; }
public SessionWrapper ( Session ses ) { this . ses = ses ; this . time = System . currentTimeMillis ( ) ; }
public static List < BatchResponse > postWithSingleRequest ( final RequestSpecification requestSpec , final ResponseSpecification responseSpec , final BatchRequest br ) { final List < BatchRequest > batchRequests = new ArrayList < > ( ) ; batchRequests . add ( br ) ; final String jsonifiedRequest = BatchHelper . toJsonString ( batchRequests ) ; final List < BatchResponse > response = BatchHelper . postBatchRequestsWithoutEnclosingTransaction ( requestSpec , responseSpec , jsonifiedRequest ) ; Assert . assertNotNull ( response ) ; Assert . assertTrue ( response . size ( ) > _NUM ) ; return response ; }
public File programDirectory ( ) { return programDirectory ; }
@ Override public void clearRouteSensors ( ) { _controlSensorList = new ArrayList < > ( ) ; }
public static KEYSTORE_TYPE fromString ( String x ) throws ConfigurationException { for ( KEYSTORE_TYPE currentType : KEYSTORE_TYPE . values ( ) ) { if ( x . equalsIgnoreCase ( currentType . toString ( ) ) ) return currentType ; } throw new ConfigurationException ( MessageFormat . format ( _STR , x ) ) ; }
public ObjectMapper nextLevel ( ObjectMapper level ) { ObjectMapper previous = levelStack . peek ( ) ; levelStack . push ( level ) ; return previous ; }
protected static int toDigit ( final char ch , final int index ) throws HexDecodeException { final int digit = Character . digit ( ch , _NUM ) ; if ( digit == - _NUM ) { throw new HexDecodeException ( _STR + ch + _STR + index ) ; } return digit ; }
public JSONObject toJson ( ) throws JSONException { JSONObject json = new JSONObject ( ) ; JSONArray jpods = new JSONArray ( ) ; for ( DiasporaPod pod : pods ) { jpods . put ( pod . toJson ( ) ) ; } json . put ( _STR , jpods ) ; json . put ( _STR , System . currentTimeMillis ( ) ) ; return json ; }
public static KeyStore load ( File keyStoreFile , Password password ) throws CryptoException , FileNotFoundException { KeyStoreType keyStoreType = null ; try { keyStoreType = CryptoFileUtil . detectKeyStoreType ( new FileInputStream ( keyStoreFile ) ) ; } catch ( FileNotFoundException ex ) { throw ex ; } catch ( IOException ex ) { throw new CryptoException ( res . getString ( _STR ) , ex ) ; } if ( keyStoreType == null ) { return null ; } return load ( keyStoreFile , password , keyStoreType ) ; }
@ Override public void removePropertyChangeListener ( PropertyChangeListener pcl ) { m_pcSupport . removePropertyChangeListener ( pcl ) ; }
@ VisibleForTesting static boolean isPrecachingEnabled ( Context context ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( context ) ; return prefs . getBoolean ( PREF_IS_PRECACHING_ENABLED , _BOOL ) ; }
public void and ( LongBitSet other ) { int pos = Math . min ( numWords , other . numWords ) ; while ( -- pos >= _NUM ) { bits [ pos ] &= other . bits [ pos ] ; } if ( numWords > other . numWords ) { Arrays . fill ( bits , other . numWords , numWords , _NUM ) ; } }
@ Override public boolean equals ( Object obj ) { if ( this == obj ) return _BOOL ; if ( ! ( obj instanceof PrincipalEntry ) ) return _BOOL ; PrincipalEntry that = ( PrincipalEntry ) obj ; return ( principalClass . equals ( that . principalClass ) && principalName . equals ( that . principalName ) ) ; }
public boolean isValidLockdownProfile ( ) { try { return _BOOL ; } catch ( IllegalArgumentException e ) { Log . w ( TAG , _STR , e ) ; return _BOOL ; } }
private int readServerResponse ( ) throws IOException { StringBuffer replyBuf = new StringBuffer ( _NUM ) ; int c ; int continuingCode = - _NUM ; int code ; String response ; serverResponse . setSize ( _NUM ) ; while ( _BOOL ) { while ( ( c = in . read ( ) ) != - _NUM ) { if ( c == _STR ) { if ( ( c = in . read ( ) ) != _STR ) { replyBuf . append ( _STR ) ; } } replyBuf . append ( ( char ) c ) ; if ( c == _STR ) { break ; } } response = replyBuf . toString ( ) ; replyBuf . setLength ( _NUM ) ; if ( logger . isLoggable ( PlatformLogger . Level . FINEST ) ) { logger . finest ( _STR + serverAddr + _STR + response ) ; } if ( response . length ( ) == _NUM ) { code = - _NUM ; } else { try { code = Integer . parseInt ( response . substring ( _NUM , _NUM ) ) ; } catch ( NumberFormatException e ) { code = - _NUM ; } catch ( StringIndexOutOfBoundsException e ) { continue ; } } serverResponse . addElement ( response ) ; if ( continuingCode != - _NUM ) { if ( code != continuingCode || ( response . length ( ) >= _NUM && response . charAt ( _NUM ) == _STR ) ) { continue ; } else { continuingCode = - _NUM ; break ; } } else if ( response . length ( ) >= _NUM && response . charAt ( _NUM ) == _STR ) { continuingCode = code ; continue ; } else { break ; } } return code ; }
public static boolean isExtension ( String filename , String [ ] extensions ) { if ( filename == null ) { return _BOOL ; } if ( extensions == null || extensions . length == _NUM ) { return indexOfExtension ( filename ) == - _NUM ; } String fileExt = getExtension ( filename ) ; for ( String extension : extensions ) { if ( fileExt . equals ( extension ) ) { return _BOOL ; } } return _BOOL ; }
public FromClause ( Stream streamOne , OuterJoinQualifier outerJoinQualifier , Stream streamTwo ) { this ( streamOne ) ; add ( streamTwo ) ; outerJoinQualifiers . add ( outerJoinQualifier ) ; }
private static void decodeAnsiX12Segment ( BitSource bits , StringBuilder result ) throws FormatException { int [ ] cValues = new int [ _NUM ] ; do { if ( bits . available ( ) == _NUM ) { return ; } int firstByte = bits . readBits ( _NUM ) ; if ( firstByte == _NUM ) { return ; } parseTwoBytes ( firstByte , bits . readBits ( _NUM ) , cValues ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { int cValue = cValues [ i ] ; if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else { throw FormatException . getFormatInstance ( ) ; } } } while ( bits . available ( ) > _NUM ) ; }
public static KdbDatabase createKdbDatabase ( Credentials credentials , KdbHeader kdbHeader , InputStream inputStream ) throws IOException { DataInput dataInput = new LittleEndianDataInputStream ( inputStream ) ; checkSignature ( dataInput ) ; deserializeHeader ( kdbHeader , dataInput ) ; InputStream decryptedInputStream = kdbHeader . createDecryptedInputStream ( credentials . getKey ( ) , inputStream ) ; MessageDigest digest = Encryption . getMessageDigestInstance ( ) ; DigestInputStream digestInputStream = new DigestInputStream ( decryptedInputStream , digest ) ; dataInput = new LittleEndianDataInputStream ( digestInputStream ) ; KdbDatabase kdbDatabase = new KdbDatabase ( ) ; KdbGroup lastGroup = ( KdbGroup ) kdbDatabase . getRootGroup ( ) ; for ( long group = _NUM ; group < kdbHeader . getGroupCount ( ) ; group ++ ) { lastGroup = deserializeGroup ( lastGroup , dataInput ) ; } for ( long entry = _NUM ; entry < kdbHeader . getEntryCount ( ) ; entry ++ ) { deserializeEntry ( kdbDatabase , dataInput ) ; } if ( ! Arrays . equals ( digest . digest ( ) , kdbHeader . getContentHash ( ) ) ) { throw new IllegalStateException ( _STR ) ; } digestInputStream . close ( ) ; return kdbDatabase ; }
private DiffPart decodeAdd ( final int blockSize_S , final int blockSize_L ) throws UnsupportedEncodingException , DecodingException { if ( blockSize_S < _NUM || blockSize_L < _NUM ) { throw new DecodingException ( _STR + blockSize_S + _STR + blockSize_L ) ; } int s = r . read ( blockSize_S ) ; int l = r . read ( blockSize_L ) ; ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; for ( int i = _NUM ; i < l ; i ++ ) { output . write ( r . readByte ( ) ) ; } DiffPart part = new DiffPart ( DiffAction . INSERT ) ; part . setStart ( s ) ; part . setText ( output . toString ( WIKIPEDIA_ENCODING ) ) ; return part ; }
public void sort ( ) { Arrays . sort ( V , _NUM , size ( ) ) ; }
public void rebuildPanel ( ) { if ( activeWorker != null && ! activeWorker . isDone ( ) ) { activeWorker . cancel ( _BOOL ) ; } panelImages . removeAll ( ) ; panelImages . revalidate ( ) ; scrollPane . repaint ( ) ; activeWorker = new ImageLoader ( mediaFiles ) ; activeWorker . execute ( ) ; }
protected void processBytes ( byte [ ] buf , int off , int len ) { nBytesIn += len ; if ( len < _NUM || state . isDone ( ) ) return ; if ( state == State . ROW_READY ) throw new PngjInputException ( _STR ) ; if ( inf . needsDictionary ( ) || ! inf . needsInput ( ) ) throw new RuntimeException ( _STR ) ; inf . setInput ( buf , off , len ) ; if ( isCallbackMode ( ) ) { while ( inflateData ( ) ) { int nextRowLen = processRowCallback ( ) ; prepareForNextRow ( nextRowLen ) ; if ( isDone ( ) ) processDoneCallback ( ) ; } } else inflateData ( ) ; }
@ Override protected String toString ( File obj ) { return obj . getAbsolutePath ( ) ; }
public final void goToNextPage ( ) { final boolean isLastPage = viewPager . getCurrentItem ( ) == ( pages . size ( ) - _NUM ) ; if ( ! isLastPage ) { viewPager . setCurrentItem ( viewPager . getCurrentItem ( ) + _NUM , _BOOL ) ; } }
private static InputStream nullInputStream ( ) throws NullPointerException { if ( currentTimeMillis ( ) > _NUM ) { return null ; } throw new NullPointerException ( ) ; }
public List < TypeId < ? > > asList ( ) { return Collections . unmodifiableList ( Arrays . asList ( types ) ) ; }
private static void deleteRules ( List < String > batchList , List < Rule > rulesToDelete ) { String deleteStatement = _STR + RULES_TABLE + _STR ; for ( Rule rule : rulesToDelete ) { batchList . add ( String . format ( deleteStatement , rule . getUid ( ) ) ) ; } }
public boolean isVisited ( Object element ) { return myVisitedElements . containsKey ( element ) ; }
public AwsIotConnection ( AbstractAwsIotClient client ) { this . client = client ; }
public static < T > CompletableFuture < T > exceptionallyCompletedFuture ( Throwable throwable ) { final CompletableFuture < T > future = new CompletableFuture < T > ( ) ; future . completeExceptionally ( throwable ) ; return future ; }
protected void initForecastErrors ( ArrayList < Float > model , TimeSeries . DataSequence data ) { double sumErr = _NUM ; double sumAbsErr = _NUM ; double sumAbsPercentErr = _NUM ; double sumErrSquared = _NUM ; int processedPoints = _NUM ; int n = data . size ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { double error = model . get ( i ) - data . get ( i ) . value ; sumErr += error ; sumAbsErr += Math . abs ( error ) ; sumAbsPercentErr += Math . abs ( error / data . get ( i ) . value ) ; sumErrSquared += error * error ; processedPoints ++ ; } this . bias = sumErr / processedPoints ; this . mad = sumAbsErr / processedPoints ; this . mape = sumAbsPercentErr / processedPoints ; this . mse = sumErrSquared / processedPoints ; this . sae = sumAbsErr ; errorsInit = _BOOL ; }
public boolean checkModifiers ( MouseEvent e ) { return e . getModifiers ( ) == modifiers ; }
public void emitRetainedVars ( GenerateJsVisitor gen ) { if ( ! retainedVars . isEmpty ( ) ) { gen . out ( _STR ) ; boolean first = _BOOL ; for ( String varName : retainedVars ) { if ( ! first ) { gen . out ( _STR ) ; } first = _BOOL ; gen . out ( varName ) ; } gen . endLine ( _BOOL ) ; retainedVars . clear ( ) ; } }
public URI ( String scheme , String authority , String path , String query , String fragment ) throws URISyntaxException { if ( scheme != null && path != null && ! path . isEmpty ( ) && path . charAt ( _NUM ) != _STR ) { throw new URISyntaxException ( path , _STR ) ; } StringBuilder uri = new StringBuilder ( ) ; if ( scheme != null ) { uri . append ( scheme ) ; uri . append ( _STR ) ; } if ( authority != null ) { uri . append ( _STR ) ; AUTHORITY_ENCODER . appendEncoded ( uri , authority ) ; } if ( path != null ) { PATH_ENCODER . appendEncoded ( uri , path ) ; } if ( query != null ) { uri . append ( _STR ) ; ALL_LEGAL_ENCODER . appendEncoded ( uri , query ) ; } if ( fragment != null ) { uri . append ( _STR ) ; ALL_LEGAL_ENCODER . appendEncoded ( uri , fragment ) ; } parseURI ( uri . toString ( ) , _BOOL ) ; }
public List < StructuredTranslation > KbestExtractOnHG ( HyperGraph hg , int topN ) { resetState ( ) ; if ( hg == null || hg . goalNode == null ) { return emptyList ( ) ; } final List < StructuredTranslation > kbest = new ArrayList < > ( topN ) ; for ( int k = _NUM ; k <= topN ; k ++ ) { StructuredTranslation translation = getKthStructuredTranslation ( hg . goalNode , k ) ; if ( translation == null ) { break ; } kbest . add ( translation ) ; } return kbest ; }
@ Override public int read ( ) throws IOException { synchronized ( lock ) { checkNotClosed ( ) ; if ( pos != count ) { return str . charAt ( pos ++ ) ; } return - _NUM ; } }
public static boolean isSnapshotFullCopySupported ( URI blockSnapURI , DbClient dbClient ) { BlockSnapshot blockObj = dbClient . queryObject ( BlockSnapshot . class , blockSnapURI ) ; StorageSystem storage = dbClient . queryObject ( StorageSystem . class , blockObj . getStorageController ( ) ) ; return ( storage != null && ( storage . deviceIsType ( Type . openstack ) || storage . deviceIsType ( Type . vnxblock ) || storage . deviceIsType ( Type . ibmxiv ) || storage . deviceIsType ( Type . vmax ) ) ) ; }
public Iterable < ServiceDescriptor > listServices ( ) { ArrayList < ServiceDescriptor > serviceDescriptors = new ArrayList < ServiceDescriptor > ( ) ; for ( FileDescriptor fileDescriptor : fileDescriptors ) { serviceDescriptors . addAll ( fileDescriptor . getServices ( ) ) ; } return serviceDescriptors ; }
private String stripCodeValueSentences ( String string ) { return string . replaceAll ( _STR , _STR ) ; }
public void testDivideRoundHalfEvenNeg2 ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = _NUM ; String c = _STR ; int resScale = - _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_HALF_EVEN ) ; assertEquals ( _STR , c , result . toString ( ) ) ; assertEquals ( _STR , resScale , result . scale ( ) ) ; }
public static double quantile ( double p , double alpha , double beta ) { if ( Double . isNaN ( alpha ) || Double . isNaN ( beta ) || Double . isNaN ( p ) || alpha < _NUM || beta < _NUM ) { return Double . NaN ; } if ( p < _NUM || p > _NUM ) { return Double . NaN ; } if ( p == _NUM ) { return _NUM ; } if ( p == _NUM ) { return _NUM ; } if ( p > _NUM ) { return _NUM - rawQuantile ( _NUM - p , beta , alpha , logBeta ( beta , alpha ) ) ; } else { return rawQuantile ( p , alpha , beta , logBeta ( alpha , beta ) ) ; } }
public boolean validate ( String cert , String signedData , String signature ) throws NoSuchAlgorithmException , IOException , Exception { byte [ ] certBytes = Base64 . decode ( cert ) ; byte [ ] signedDataBytes = Base64 . decode ( signedData ) ; byte [ ] signatureBytes = Base64 . decode ( signature ) ; return validate ( certBytes , signedDataBytes , signatureBytes ) ; }
private SharedDeployment createNewDeployment ( GridDeploymentMetadata meta , boolean isCache ) { assert Thread . holdsLock ( mux ) ; assert meta . parentLoader ( ) == null ; IgniteUuid ldrId = IgniteUuid . fromUuid ( ctx . localNodeId ( ) ) ; GridDeploymentClassLoader clsLdr ; if ( meta . deploymentMode ( ) == CONTINUOUS || meta . participants ( ) == null ) { clsLdr = new GridDeploymentClassLoader ( ldrId , meta . userVersion ( ) , meta . deploymentMode ( ) , _BOOL , ctx , ctx . config ( ) . getClassLoader ( ) != null ? ctx . config ( ) . getClassLoader ( ) : U . gridClassLoader ( ) , meta . classLoaderId ( ) , meta . senderNodeId ( ) , comm , ctx . config ( ) . getNetworkTimeout ( ) , log , ctx . config ( ) . getPeerClassLoadingLocalClassPathExclude ( ) , ctx . config ( ) . getPeerClassLoadingMissedResourcesCacheSize ( ) , meta . deploymentMode ( ) == CONTINUOUS , _BOOL ) ; if ( meta . participants ( ) != null ) for ( Map . Entry < UUID , IgniteUuid > e : meta . participants ( ) . entrySet ( ) ) clsLdr . register ( e . getKey ( ) , e . getValue ( ) ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + _STR + clsLdr + _STR + meta + _STR ) ; } else { assert meta . deploymentMode ( ) == SHARED ; clsLdr = new GridDeploymentClassLoader ( ldrId , meta . userVersion ( ) , meta . deploymentMode ( ) , _BOOL , ctx , U . gridClassLoader ( ) , meta . participants ( ) , comm , ctx . config ( ) . getNetworkTimeout ( ) , log , ctx . config ( ) . getPeerClassLoadingLocalClassPathExclude ( ) , ctx . config ( ) . getPeerClassLoadingMissedResourcesCacheSize ( ) , _BOOL , _BOOL ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + _STR + clsLdr + _STR + meta + _STR ) ; } SharedDeployment dep = new SharedDeployment ( meta . deploymentMode ( ) , clsLdr , ldrId , meta . userVersion ( ) , meta . alias ( ) ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + dep ) ; if ( isCache ) { List < SharedDeployment > deps = F . addIfAbsent ( cache , meta . userVersion ( ) , new LinkedList < SharedDeployment > ( ) ) ; assert deps != null ; deps . add ( dep ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + cache ) ; } return dep ; }
public int size ( ) { return seq . size ( ) ; }
public void testAddServletRunAsRole ( ) throws Exception { String xml = WEBAPP_TEST_HEADER + _STR + _STR + _STR + _STR + _STR ; WebXml webXml = WebXmlIo . parseWebXml ( new ByteArrayInputStream ( xml . getBytes ( _STR ) ) , getEntityResolver ( ) ) ; WebXmlUtils . addServletRunAsRoleName ( webXml , _STR , _STR ) ; String roleName = WebXmlUtils . getServletRunAsRoleName ( webXml , _STR ) ; assertEquals ( _STR , roleName ) ; }
public void testCase15 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . subtract ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( - _NUM , result . signum ( ) ) ; }
public MultiTermQuery ( final String field ) { this . field = Objects . requireNonNull ( field , _STR ) ; }
public static void printLine ( Object message ) { if ( ! isDisabled ( ) ) { printLine ( String . valueOf ( message ) ) ; } }
public void accumulate ( TaggedLogAPIEntity entity ) throws Exception { AggregateAPIEntity current = root ; for ( String groupby : groupbys ) { String tagv = locateGroupbyField ( groupby , entity ) ; if ( tagv == null || tagv . isEmpty ( ) ) { tagv = UNASSIGNED_GROUPBY_ROOT_FIELD_NAME ; } Map < String , AggregateAPIEntity > children = current . getEntityList ( ) ; if ( children . get ( tagv ) == null ) { children . put ( tagv , factory . create ( ) ) ; current . setNumDirectDescendants ( current . getNumDirectDescendants ( ) + _NUM ) ; } AggregateAPIEntity child = children . get ( tagv ) ; if ( counting ) count ( child ) ; for ( String sumFunctionField : sumFunctionFields ) { sum ( child , entity , sumFunctionField ) ; } current = child ; } }
public void testInvalidXml ( ) throws Exception { testInvalidGpx ( INVALID_XML_GPX ) ; }
public String toString ( boolean expand ) { StringBuilder acc = new StringBuilder ( ) ; toString ( acc , _NUM , expand ) ; return acc . toString ( ) ; }
public static boolean isAccessorPair ( TMember member , TMember member2 ) { return ( member instanceof TGetter && member2 instanceof TSetter ) || ( member instanceof TSetter && member2 instanceof TGetter ) ; }
public static DateFormat createUTCDateFormatter ( String dateFormat ) { DateFormat formatter = new SimpleDateFormat ( dateFormat ) ; formatter . setTimeZone ( TimeZone . getTimeZone ( _STR ) ) ; return formatter ; }
public void writeLinkedKml ( final String filename , final KmlType kml ) { if ( filename . equals ( _STR ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( filename . equals ( _STR ) ) { throw new IllegalArgumentException ( _STR ) ; } writeKml ( filename , kml ) ; }
String destinationFilePath ( ) { return destinationFilePath ; }
@ Override public void refreshUsersOrGroupsListFromServer ( ) { showLoadingDialog ( getString ( R . string . common_loading ) ) ; GetShareWithUsersAsyncTask getTask = new GetShareWithUsersAsyncTask ( this ) ; Object [ ] params = { getFile ( ) , getAccount ( ) , getStorageManager ( ) } ; getTask . execute ( params ) ; }
public BootPanel ( ) { initComponents ( ) ; }
private List < Header > defaultHeaders ( ) { DateFormat dateFormat = new SimpleDateFormat ( _STR ) ; List < Header > headers = new ArrayList < > ( ) ; headers . add ( new BasicHeader ( _STR , dateFormat . format ( new Date ( ) ) ) ) ; return headers ; }
public AemParsys clear ( ) { List < WebElement > list = currentScope . findElements ( By . cssSelector ( SELECTOR_FOR_COMPONENT_IN_PARSYS ) ) ; list . forEach ( null ) ; return this ; }
protected RequestHandle sendRequest ( DefaultHttpClient client , HttpContext httpContext , HttpUriRequest uriRequest , String contentType , ResponseHandlerInterface responseHandler , Context context ) { if ( contentType != null ) { uriRequest . setHeader ( _STR , contentType ) ; } responseHandler . setRequestHeaders ( uriRequest . getAllHeaders ( ) ) ; responseHandler . setRequestURI ( uriRequest . getURI ( ) ) ; Future < ? > request = threadPool . submit ( new AsyncHttpRequest ( client , httpContext , uriRequest , responseHandler ) ) ; if ( context != null ) { List < WeakReference < Future < ? > > > requestList = requestMap . get ( context ) ; if ( requestList == null ) { requestList = new LinkedList < WeakReference < Future < ? > > > ( ) ; requestMap . put ( context , requestList ) ; } requestList . add ( new WeakReference < Future < ? > > ( request ) ) ; } return new RequestHandle ( request ) ; }
private void registerNewClient ( JsonObject jData ) { Client newClient = gson . fromJson ( jData , Client . class ) ; if ( newClient . isValid ( ) ) { addClient ( newClient ) ; broadcastNewClient ( newClient ) ; sendClientList ( newClient ) ; } else { logger . log ( Level . WARNING , _STR ) ; } }
@ Override public void parse ( InputStream in , String baseURI ) throws IOException , RDFParseException , RDFHandlerException { if ( in == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( baseURI == null ) { throw new IllegalArgumentException ( _STR ) ; } InputSource inputSource = new InputSource ( new BOMInputStream ( in , _BOOL ) ) ; inputSource . setSystemId ( baseURI ) ; parse ( inputSource ) ; }
public static Date parseDate ( String dateValue , Collection dateFormats ) throws DateParseException { if ( dateValue == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( dateFormats == null ) { dateFormats = DEFAULT_PATTERNS ; } if ( dateValue . length ( ) > _NUM && dateValue . startsWith ( _STR ) && dateValue . endsWith ( _STR ) ) { dateValue = dateValue . substring ( _NUM , dateValue . length ( ) - _NUM ) ; } SimpleDateFormat dateParser = null ; final Iterator formatIter = dateFormats . iterator ( ) ; while ( formatIter . hasNext ( ) ) { final String format = ( String ) formatIter . next ( ) ; if ( dateParser == null ) { dateParser = new SimpleDateFormat ( format , Locale . US ) ; dateParser . setTimeZone ( TimeZone . getTimeZone ( _STR ) ) ; } else { dateParser . applyPattern ( format ) ; } try { return dateParser . parse ( dateValue ) ; } catch ( final ParseException pe ) { } } throw new DateParseException ( _STR + dateValue ) ; }
public JSONObject remove ( String name ) { if ( name == null ) { throw new NullPointerException ( _STR ) ; } int index = indexOf ( name ) ; if ( index != - _NUM ) { table . remove ( index ) ; names . remove ( index ) ; values . remove ( index ) ; } return this ; }
EdgeMap < Block > findLoops ( Deque < Block > code , Map < Block , Block > idom , SetMap < Block , Edge > pred ) { EdgeMap < Block > loops = new EdgeMap < Block > ( ) ; for ( Block b : code ) for ( Edge s : b . succ ( ) ) if ( isLoop ( s , idom ) ) { verboseStatus ( _STR + s ) ; Block h = s . to ; Set < Block > loop = loops . get ( h ) ; Set < Block > work = new TreeSet < Block > ( ) ; for ( Edge p : pred . get ( h ) ) { if ( isLoop ( p , idom ) && ! loop . contains ( p . from ) && p . from != h ) { loop . add ( p . from ) ; work . add ( p . from ) ; } } while ( ! work . isEmpty ( ) ) { Block x = getBlock ( work ) ; for ( Edge p : pred . get ( x ) ) { if ( p . from != h && ! loop . contains ( p . from ) ) { loop . add ( p . from ) ; work . add ( p . from ) ; } } } } return loops ; }
public int [ ] readLine ( ) { int record [ ] = new int [ MAX_LEN ] ; int checksum = _NUM ; try { while ( ( ( charIn = buffIn . read ( ) ) == _NUM ) || ( charIn == _NUM ) ) { } if ( charIn != _STR ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + lineNo ) ; } return new int [ ] { - _NUM } ; } } catch ( IOException e ) { JOptionPane . showMessageDialog ( this , _STR , _STR , JOptionPane . ERROR_MESSAGE ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + e . toString ( ) ) ; } } record [ LEN ] = rdHexByte ( ) ; checksum += record [ LEN ] ; record [ ADDRH ] = rdHexByte ( ) ; checksum += record [ ADDRH ] ; record [ ADDRL ] = rdHexByte ( ) ; checksum += record [ ADDRL ] ; record [ TYPE ] = rdHexByte ( ) ; checksum += record [ TYPE ] ; address = ( address & _NUM ) + record [ ADDRH ] * _NUM + record [ ADDRL ] ; type = record [ TYPE ] ; if ( type != END ) { len = record [ LEN ] ; for ( int i = _NUM ; i <= len ; i ++ ) { record [ TYPE + i ] = rdHexByte ( ) ; checksum += record [ TYPE + i ] ; } } int fileCheck = rdHexByte ( ) ; if ( ( ( checksum + fileCheck ) & _NUM ) != _NUM ) { log . error ( _STR + lineNo ) ; } lineNo ++ ; return record ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
private void generateHiveTestFiles ( ) throws FileNotFoundException { try ( PrintWriter writerA = new PrintWriter ( new File ( testWorkDir , _STR ) ) ; PrintWriter writerB = new PrintWriter ( new File ( testWorkDir , _STR ) ) ) { char sep = _STR ; int idB = _NUM ; int idA = _NUM ; int v = _NUM ; for ( int i = _NUM ; i < _NUM ; i ++ ) { writerA . print ( idA ++ ) ; writerA . print ( sep ) ; writerA . println ( idB ) ; writerB . print ( idB ++ ) ; writerB . print ( sep ) ; writerB . println ( v += _NUM ) ; writerB . print ( idB ++ ) ; writerB . print ( sep ) ; writerB . println ( v += _NUM ) ; } writerA . flush ( ) ; writerB . flush ( ) ; } }
public void renameEditorPanel ( Editor panel ) { if ( panelsList . size ( ) == _NUM ) { return ; } for ( int i = _NUM ; i < panelsList . size ( ) ; i ++ ) { Object o = panelsList . get ( i ) ; if ( o == panel ) { JCheckBoxMenuItem r = ( JCheckBoxMenuItem ) panelsSubMenu . getItem ( i ) ; r . setText ( panel . getTitle ( ) ) ; return ; } } }
private boolean fitsAsSingleLine ( int col ) { return ( col + singleLineWidth ( ) <= PcalTLAGen . wrapColumn ) || ( bodyFormulas . sf == null && ( prcdFormulas == null || prcdFormulas . size ( ) == _NUM ) ) ; }
@ Override protected void before ( ) throws Throwable { previousThreads = Thread . getAllStackTraces ( ) ; }
public void sphericalToWorld ( Vector3 vec ) { if ( pjUnprojected == null ) { String projStr = _STR + projInfo . getSemiMajorAxis ( ) + _STR + projInfo . getSemiMinorAxis ( ) + _STR ; pjUnprojected = Proj4 . newInstance ( projStr ) ; } if ( pjProjected == null ) { pjProjected = Proj4 . newInstance ( proj4String ) ; } try { vec . toArray ( coord ) ; coord [ _NUM ] = Math . toRadians ( coord [ _NUM ] ) ; coord [ _NUM ] = Math . toRadians ( coord [ _NUM ] ) ; pjUnprojected . transform ( pjProjected , coord ) ; vec . setX ( coord [ _NUM ] ) ; vec . setY ( coord [ _NUM ] ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public String replace ( CharSequence target , CharSequence replacement ) { if ( target == null ) { throw new NullPointerException ( _STR ) ; } if ( replacement == null ) { throw new NullPointerException ( _STR ) ; } String targetString = target . toString ( ) ; int matchStart = indexOf ( targetString , _NUM ) ; if ( matchStart == - _NUM ) { return this ; } String replacementString = replacement . toString ( ) ; int targetLength = targetString . length ( ) ; if ( targetLength == _NUM ) { int resultLength = count + ( count + _NUM ) * replacementString . length ( ) ; StringBuilder result = new StringBuilder ( resultLength ) ; result . append ( replacementString ) ; int end = offset + count ; for ( int i = offset ; i != end ; ++ i ) { result . append ( value [ i ] ) ; result . append ( replacementString ) ; } return result . toString ( ) ; } StringBuilder result = new StringBuilder ( count ) ; int searchStart = _NUM ; do { result . append ( value , offset + searchStart , matchStart - searchStart ) ; result . append ( replacementString ) ; searchStart = matchStart + targetLength ; } while ( ( matchStart = indexOf ( targetString , searchStart ) ) != - _NUM ) ; result . append ( value , offset + searchStart , count - searchStart ) ; return result . toString ( ) ; }
public static String encodeUrl ( final String str ) { return encode ( str , _STR ) ; }
public void drawRenderedImage ( RenderedImage img , AffineTransform xform ) { if ( img == null ) { return ; } mPrintMetrics . drawImage ( this , img ) ; mDrawingArea . addInfinite ( ) ; }
private long buildSize ( int durationInSeconds , LinkInfo linfo ) { long result = - _NUM ; double bitRateSum = _NUM ; switch ( linfo . fmt ) { case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM / _NUM ; break ; } bitRateSum = bitRateSum * _NUM * _NUM ; result = ( long ) ( Math . ceil ( ( bitRateSum * durationInSeconds ) / _NUM ) ) ; return result ; }
private void skipToEndOfLine ( ) { for ( ; pos < in . length ( ) ; pos ++ ) { char c = in . charAt ( pos ) ; if ( c == _STR || c == _STR ) { pos ++ ; break ; } } }
public IndependenceTest indTestSubset ( List vars ) { return null ; }
@ Override public void actOn ( File f ) { BufferedReader reader = null ; try { reader = new BufferedReader ( new FileReader ( f ) ) ; announceSeedsFromReader ( reader ) ; } catch ( FileNotFoundException fnf ) { logger . log ( Level . SEVERE , _STR , fnf ) ; } finally { IOUtils . closeQuietly ( reader ) ; } }
public static String formatMillis ( int millis ) { String result = _STR ; int hr = millis / _NUM ; millis %= _NUM ; int min = millis / _NUM ; millis %= _NUM ; int sec = millis / _NUM ; if ( hr > _NUM ) { result += hr + _STR ; } if ( min >= _NUM ) { if ( min > _NUM ) { result += min + _STR ; } else { result += _STR + min + _STR ; } } if ( sec > _NUM ) { result += sec ; } else { result += _STR + sec ; } return result ; }
public void addPropertyChangeListener ( String propertyName , PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( propertyName , listener ) ; }
public File createNewFolder ( File containingDir ) throws IOException { if ( containingDir == null ) { throw new IOException ( _STR ) ; } File newFolder = createFileObject ( containingDir , newFolderString ) ; int i = _NUM ; while ( newFolder . exists ( ) && i < _NUM ) { newFolder = createFileObject ( containingDir , MessageFormat . format ( newFolderNextString , new Integer ( i ) ) ) ; i ++ ; } if ( newFolder . exists ( ) ) { throw new IOException ( _STR + newFolder . getAbsolutePath ( ) ) ; } else { newFolder . mkdirs ( ) ; } return newFolder ; }
public ResourcesPoet addTypedArray ( String name , @ NotNull List < String > values ) { Element element = document . createElement ( _STR ) ; element . setAttribute ( _STR , name ) ; for ( String value : values ) { Element valueElement = document . createElement ( _STR ) ; valueElement . appendChild ( document . createTextNode ( value ) ) ; element . appendChild ( valueElement ) ; } resourceElement . appendChild ( element ) ; return this ; }
public boolean addSubAction ( final ConfAction actionConf ) throws GeneralException , ConfigurationException { if ( actionConf . getType ( ) != null ) { final SubAction sub = SubAction . factory ( actionConf . getType ( ) , actionConf ) ; if ( sub == null ) { if ( Cfg . DEBUG ) { Check . log ( TAG + _STR + actionConf . getType ( ) ) ; } return _BOOL ; } list . add ( sub ) ; if ( sub instanceof SubActionSlow ) { setQueue ( MAIN_QUEUE ) ; } return _BOOL ; } else { if ( Cfg . DEBUG ) { Check . log ( TAG + _STR ) ; } return _BOOL ; } }
void fillEntryTree ( Set < PageLeafEntry > entries , Row row ) { int ptr = _rowHead ; byte [ ] buffer = _buffer ; while ( ptr < BLOCK_SIZE ) { int code = buffer [ ptr ] & CODE_MASK ; int len = getLength ( code , row ) ; if ( code == INSERT || code == REMOVE ) { PageLeafEntry entry = new PageLeafEntry ( this , row , ptr , len , code ) ; entries . add ( entry ) ; } ptr += len ; } }
public static < S > boolean containsAtleastOne ( Collection < S > left , Collection < S > right ) { if ( left == null || right == null ) { return _BOOL ; } for ( S id : left ) { if ( right . contains ( id ) ) { return _BOOL ; } } return _BOOL ; }
private boolean processKeyUp ( int keyCode ) { if ( keyCode == KeyEvent . KEYCODE_ESCAPE || keyCode == KeyEvent . KEYCODE_BACK ) { dismiss ( ) ; return _BOOL ; } else if ( keyCode == KeyEvent . KEYCODE_TAB ) { if ( mInKbMode ) { if ( isTypedTimeFullyLegal ( ) ) { finishKbMode ( _BOOL ) ; } return _BOOL ; } } else if ( keyCode == KeyEvent . KEYCODE_ENTER ) { if ( mInKbMode ) { if ( ! isTypedTimeFullyLegal ( ) ) { return _BOOL ; } finishKbMode ( _BOOL ) ; } if ( mCallback != null ) { mCallback . onTimeSet ( mTimePicker , mTimePicker . getHours ( ) , mTimePicker . getMinutes ( ) ) ; } dismiss ( ) ; return _BOOL ; } else if ( keyCode == KeyEvent . KEYCODE_DEL ) { if ( mInKbMode ) { if ( ! mTypedTimes . isEmpty ( ) ) { int deleted = deleteLastTypedKey ( ) ; String deletedKeyStr ; if ( deleted == getAmOrPmKeyCode ( AM ) ) { deletedKeyStr = mAmText ; } else if ( deleted == getAmOrPmKeyCode ( PM ) ) { deletedKeyStr = mPmText ; } else { deletedKeyStr = String . format ( _STR , getValFromKeyCode ( deleted ) ) ; } Utils . tryAccessibilityAnnounce ( mTimePicker , String . format ( mDeletedKeyFormat , deletedKeyStr ) ) ; updateDisplay ( _BOOL ) ; } } } else if ( keyCode == KeyEvent . KEYCODE_0 || keyCode == KeyEvent . KEYCODE_1 || keyCode == KeyEvent . KEYCODE_2 || keyCode == KeyEvent . KEYCODE_3 || keyCode == KeyEvent . KEYCODE_4 || keyCode == KeyEvent . KEYCODE_5 || keyCode == KeyEvent . KEYCODE_6 || keyCode == KeyEvent . KEYCODE_7 || keyCode == KeyEvent . KEYCODE_8 || keyCode == KeyEvent . KEYCODE_9 || ( ! mIs24HourMode && ( keyCode == getAmOrPmKeyCode ( AM ) || keyCode == getAmOrPmKeyCode ( PM ) ) ) ) { if ( ! mInKbMode ) { if ( mTimePicker == null ) { Log . e ( TAG , _STR ) ; return _BOOL ; } mTypedTimes . clear ( ) ; tryStartingKbMode ( keyCode ) ; return _BOOL ; } if ( addKeyIfLegal ( keyCode ) ) { updateDisplay ( _BOOL ) ; } return _BOOL ; } return _BOOL ; }
public void assertDurationIsInRange ( long expectedMillis ) { long minimum = ( long ) ( ( double ) expectedMillis * _NUM ) ; long maximum = Math . max ( ( long ) ( ( double ) expectedMillis * _NUM ) , _NUM ) ; long waitMillis = Math . max ( expectedMillis * _NUM , _NUM ) ; long duration = getDurationMillis ( waitMillis ) ; if ( duration < minimum ) { Assert . fail ( _STR + expectedMillis + _STR + minimum + _STR + duration ) ; } else if ( duration > maximum ) { Assert . fail ( _STR + expectedMillis + _STR + maximum + _STR + duration ) ; } }
public void logDiff ( String id , String field , String db , String hw ) { StringBuffer diffBuffer = new StringBuffer ( String . format ( _STR , id , field ) ) ; if ( db == null || db . isEmpty ( ) || db . equalsIgnoreCase ( NO_MATCHING_ENTRY ) ) { diffBuffer . append ( String . format ( _STR , hw ) ) ; } else if ( hw == null || hw . isEmpty ( ) || hw . equalsIgnoreCase ( NO_MATCHING_ENTRY ) ) { diffBuffer . append ( String . format ( _STR , db ) ) ; } else { diffBuffer . append ( String . format ( _STR , db != null ? db : _STR , hw != null ? hw : _STR ) ) ; } msgs . append ( diffBuffer . toString ( ) + _STR ) ; if ( log != null ) { log . info ( diffBuffer . toString ( ) ) ; } }
public FieldFrameBodyIMG ( Lyrics3Image image ) { images . add ( image ) ; }
public AbstractResource ( String mimetype ) { this ( mimetype , System . currentTimeMillis ( ) ) ; }
private Parameters ( ) { for ( Iterator i = arguments . iterator ( ) ; i . hasNext ( ) ; ) { String arg = ( String ) i . next ( ) ; arg = arg . toLowerCase ( ) ; if ( ! arg . startsWith ( _STR ) ) throw new IllegalArgumentException ( _STR + arg ) ; int colonIndex = arg . indexOf ( _STR ) ; String key ; String value ; if ( colonIndex >= _NUM ) { key = arg . substring ( _NUM , colonIndex ) ; value = arg . substring ( colonIndex + _NUM ) ; } else { key = arg . substring ( _NUM ) ; value = _STR ; } if ( ! allowedKeys . contains ( key ) ) throw new IllegalArgumentException ( _STR + arg . substring ( _NUM ) + _STR + StringUtil . toCommaDelimitedString ( allowedKeys ) ) ; hashtable . put ( key , value ) ; } for ( Iterator i = requiredKeys . iterator ( ) ; i . hasNext ( ) ; ) { String requiredKey = ( String ) i . next ( ) ; if ( ! hashtable . containsKey ( requiredKey ) ) throw new IllegalArgumentException ( _STR + requiredKey ) ; } }
public List < TLV > initRespondSmp ( String question , String secret , boolean initiating ) throws OtrException { if ( question != null && ! initiating ) throw new IllegalArgumentException ( _STR ) ; byte [ ] our_fp = Hex . decode ( keyManager . getLocalFingerprint ( sessionID ) ) ; String remoteFingerprint = keyManager . getRemoteFingerprint ( sessionID ) ; if ( remoteFingerprint == null ) throw new OtrException ( _STR ) ; byte [ ] their_fp = Hex . decode ( remoteFingerprint ) ; byte [ ] sessionId ; try { sessionId = computeSessionId ( session . getS ( ) ) ; } catch ( SMException ex ) { throw new OtrException ( ex ) ; } byte [ ] bytes = secret . getBytes ( SerializationUtils . UTF8 ) ; int combined_buf_len = _NUM + sessionId . length + bytes . length ; byte [ ] combined_buf = new byte [ combined_buf_len ] ; combined_buf [ _NUM ] = _NUM ; if ( initiating ) { System . arraycopy ( our_fp , _NUM , combined_buf , _NUM , _NUM ) ; System . arraycopy ( their_fp , _NUM , combined_buf , _NUM , _NUM ) ; } else { System . arraycopy ( their_fp , _NUM , combined_buf , _NUM , _NUM ) ; System . arraycopy ( our_fp , _NUM , combined_buf , _NUM , _NUM ) ; } System . arraycopy ( sessionId , _NUM , combined_buf , _NUM , sessionId . length ) ; System . arraycopy ( bytes , _NUM , combined_buf , _NUM + sessionId . length , bytes . length ) ; MessageDigest sha256 ; try { sha256 = MessageDigest . getInstance ( _STR ) ; } catch ( NoSuchAlgorithmException ex ) { throw new OtrException ( ex ) ; } byte [ ] combined_secret = sha256 . digest ( combined_buf ) ; byte [ ] smpmsg ; try { if ( initiating ) { smpmsg = SM . step1 ( smstate , combined_secret ) ; } else { smpmsg = SM . step2b ( smstate , combined_secret ) ; } } catch ( SMException ex ) { throw new OtrException ( ex ) ; } if ( question != null ) { bytes = question . getBytes ( SerializationUtils . UTF8 ) ; byte [ ] qsmpmsg = new byte [ bytes . length + _NUM + smpmsg . length ] ; System . arraycopy ( bytes , _NUM , qsmpmsg , _NUM , bytes . length ) ; System . arraycopy ( smpmsg , _NUM , qsmpmsg , bytes . length + _NUM , smpmsg . length ) ; smpmsg = qsmpmsg ; } TLV sendtlv = new TLV ( initiating ? ( question != null ? TLV . SMP1Q : TLV . SMP1 ) : TLV . SMP2 , smpmsg ) ; smstate . nextExpected = initiating ? SM . EXPECT2 : SM . EXPECT3 ; return makeTlvList ( sendtlv ) ; }
private double melToLinFreq ( double inputFreq ) { return ( _NUM * ( Math . pow ( _NUM , ( inputFreq / _NUM ) ) - _NUM ) ) ; }
public RoundedIconGenerator ( int iconWidthPx , int iconHeightPx , int cornerRadiusPx , int backgroundColor , float textSizePx ) { mIconWidthPx = iconWidthPx ; mIconHeightPx = iconHeightPx ; mCornerRadiusPx = cornerRadiusPx ; mBackgroundRect = new RectF ( _NUM , _NUM , mIconWidthPx , mIconHeightPx ) ; mBackgroundPaint = new Paint ( Paint . ANTI_ALIAS_FLAG ) ; mBackgroundPaint . setColor ( backgroundColor ) ; mTextPaint = new TextPaint ( Paint . ANTI_ALIAS_FLAG ) ; mTextPaint . setColor ( Color . WHITE ) ; mTextPaint . setFakeBoldText ( _BOOL ) ; mTextPaint . setTextSize ( textSizePx ) ; FontMetrics textFontMetrics = mTextPaint . getFontMetrics ( ) ; mTextHeight = ( float ) Math . ceil ( textFontMetrics . bottom - textFontMetrics . top ) ; mTextYOffset = - textFontMetrics . top ; }
public static byte [ ] randomBytes ( int size ) { byte [ ] bytes = new byte [ size ] ; seededRandom . nextBytes ( bytes ) ; return bytes ; }
@ Override public String toString ( ) { StringBuffer BfString = new StringBuffer ( ) ; BfString . append ( _STR ) ; if ( m_starting != null ) { BfString . append ( _STR ) ; BfString . append ( startSetToString ( ) ) ; BfString . append ( _STR ) ; } if ( m_threshold != - Double . MAX_VALUE ) { BfString . append ( _STR + Utils . doubleToString ( m_threshold , _NUM , _NUM ) + _STR ) ; } return BfString . toString ( ) ; }
protected void arraycopy ( byte [ ] buf , int pos , int length ) { mMessage . write ( buf , pos , length ) ; mPosition = mPosition + length ; }
public boolean expired ( ) { return System . currentTimeMillis ( ) - time > DFLT_EXPIRATION_TIMEOUT ; }
public JSONObject put ( String key , boolean value ) throws JSONException { put ( key , value ? Boolean . TRUE : Boolean . FALSE ) ; return this ; }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
private void handleSelection ( View view , Item item , int position ) { if ( ! item . isSelectable ( ) ) { return ; } if ( item . isSelected ( ) && ! mAllowDeselection ) { return ; } boolean selected = _BOOL ; if ( mPositionBasedStateManagement ) { selected = mSelections . contains ( position ) ; } else { selected = item . isSelected ( ) ; } if ( mSelectWithItemUpdate || view == null ) { if ( ! mMultiSelect ) { deselect ( ) ; } if ( selected ) { deselect ( position ) ; } else { select ( position ) ; } } else { if ( ! mMultiSelect ) { if ( mPositionBasedStateManagement ) { Iterator < Integer > entries = mSelections . iterator ( ) ; while ( entries . hasNext ( ) ) { Integer pos = entries . next ( ) ; if ( pos != position ) { deselect ( pos , entries ) ; } } } else { Set < Integer > selections = getSelections ( ) ; for ( int pos : selections ) { if ( pos != position ) { deselect ( pos ) ; } } } } item . withSetSelected ( ! selected ) ; view . setSelected ( ! selected ) ; if ( mSelectionListener != null ) mSelectionListener . onSelectionChanged ( item , ! selected ) ; if ( mPositionBasedStateManagement ) { if ( selected ) { if ( mSelections . contains ( position ) ) { mSelections . remove ( position ) ; } } else { mSelections . add ( position ) ; } } } }
public boolean canInvoke ( MDepreciationWorkfile assetwk , MAssetAcct assetAcct , int A_Current_Period , BigDecimal Accum_Dep ) { if ( assetwk == null ) { log . warning ( _STR ) ; return _BOOL ; } int offset = _NUM ; int lifePeriods = assetwk . getUseLifeMonths ( assetwk . isFiscal ( ) ) ; boolean ok = ( offset <= A_Current_Period ) ; if ( CLogMgt . isLevelFinest ( ) ) log . finest ( _STR + A_Current_Period + _STR + lifePeriods + _STR + offset + _STR + ok ) ; return ok ; }
public boolean writeHeader ( OutputStream os ) { try { writeInt ( os , CACHE_MAGIC ) ; writeString ( os , key ) ; writeString ( os , etag == null ? _STR : etag ) ; writeLong ( os , serverDate ) ; writeLong ( os , lastModified ) ; writeLong ( os , ttl ) ; writeLong ( os , softTtl ) ; writeStringStringMap ( responseHeaders , os ) ; os . flush ( ) ; return _BOOL ; } catch ( IOException e ) { VolleyLog . d ( _STR , e . toString ( ) ) ; return _BOOL ; } }
public byte [ ] bytes ( ) throws HttpRequestException { final ByteArrayOutputStream output = byteStream ( ) ; try { copy ( buffer ( ) , output ) ; } catch ( IOException e ) { throw new HttpRequestException ( e ) ; } return output . toByteArray ( ) ; }
public void fadeOutAllLayers ( ) { mTransitionState = TRANSITION_STARTING ; Arrays . fill ( mIsLayerOn , _BOOL ) ; invalidateSelf ( ) ; }
public TreeMap < Float , List < List < Integer > > > packModifiedFirstFitDescending ( ) { throw new UnsupportedOperationException ( _STR ) ; }
public void addTextChangeListener ( final FilterQueryChangeListener textChangeListener ) { listeners . add ( textChangeListener ) ; }
@ Override public Iterator < Profile > iterator ( ) { return profiles . iterator ( ) ; }
private boolean startsWithSpace ( String str ) { return str . length ( ) != _NUM && str . charAt ( _NUM ) == _STR ; }
public String wrap ( String path ) { return uriPrefix + path ; }
private int keyToLevel ( String key ) { String [ ] token = key . split ( _STR ) ; return ( token . length - _NUM ) ; }
public boolean mouseDragged ( MouseEvent e ) { if ( grabbed_plot_graphics_ ) { int x = e . getX ( ) ; int y = e . getY ( ) ; int dx = x - prevX ; int dy = y - prevY ; plotX += dx ; plotY += dy ; prevX = x ; prevY = y ; graph . resize ( plotX , plotY , plotWidth , plotHeight ) ; OMGraphicList plotGraphics = graph . getPlotGraphics ( ) ; plotGraphics . generate ( getProjection ( ) , _BOOL ) ; repaint ( ) ; } return _BOOL ; }
private void initCachingHttpHeadersFilter ( ServletContext servletContext , EnumSet < DispatcherType > disps ) { log . debug ( _STR ) ; FilterRegistration . Dynamic cachingHttpHeadersFilter = servletContext . addFilter ( _STR , new CachingHttpHeadersFilter ( jHipsterProperties ) ) ; cachingHttpHeadersFilter . addMappingForUrlPatterns ( disps , _BOOL , _STR ) ; cachingHttpHeadersFilter . addMappingForUrlPatterns ( disps , _BOOL , _STR ) ; cachingHttpHeadersFilter . setAsyncSupported ( _BOOL ) ; }
protected void addCommonComponent ( XMLComponent component ) { if ( fCommonComponents . contains ( component ) ) { return ; } fCommonComponents . add ( component ) ; addRecognizedParamsAndSetDefaults ( component ) ; }
SNode awaitFulfill ( SNode s , boolean timed , long nanos ) { final long deadline = timed ? System . nanoTime ( ) + nanos : _NUM ; Thread w = Thread . currentThread ( ) ; int spins = ( shouldSpin ( s ) ? ( timed ? maxTimedSpins : maxUntimedSpins ) : _NUM ) ; for ( ; ; ) { if ( w . isInterrupted ( ) ) s . tryCancel ( ) ; SNode m = s . match ; if ( m != null ) return m ; if ( timed ) { nanos = deadline - System . nanoTime ( ) ; if ( nanos <= _NUM ) { s . tryCancel ( ) ; continue ; } } if ( spins > _NUM ) spins = shouldSpin ( s ) ? ( spins - _NUM ) : _NUM ; else if ( s . waiter == null ) s . waiter = w ; else if ( ! timed ) LockSupport . park ( this ) ; else if ( nanos > spinForTimeoutThreshold ) LockSupport . parkNanos ( this , nanos ) ; } }
public void load ( GeneralSubtrees generalSubtrees ) { List < GeneralSubtree > generalSubtreesList = generalSubtrees . getGeneralSubtrees ( ) ; Collections . sort ( generalSubtreesList , new GeneralSubtreeBaseComparator ( ) ) ; data = new Object [ generalSubtreesList . size ( ) ] [ _NUM ] ; int i = _NUM ; for ( GeneralSubtree generalSubtree : generalSubtreesList ) { data [ i ] [ _NUM ] = generalSubtree ; data [ i ] [ _NUM ] = generalSubtree ; data [ i ] [ _NUM ] = generalSubtree ; i ++ ; } fireTableDataChanged ( ) ; }
@ Override public synchronized int read ( ) { return pos < count ? buffer . charAt ( pos ++ ) & _NUM : - _NUM ; }
public boolean isPingDisabled ( ) { return ( null != healthcheck && ! healthcheck . exists ( ) ) ; }
public static void writeToFile ( File file , String contents ) throws IOException { FileOutputStream fos = new FileOutputStream ( file ) ; fos . write ( contents . getBytes ( ) ) ; fos . close ( ) ; }
public void makeTreeOfWritables ( Iterable < Pair < String , Integer > > flatData ) { Text key = new Text ( ) ; for ( Pair < String , Integer > pair : flatData ) { key . set ( pair . key ) ; ArrayList < IntWritable > valList ; if ( ! mockInput . containsKey ( key ) ) { valList = new ArrayList < > ( ) ; mockInput . put ( key , valList ) ; key = new Text ( ) ; } else valList = ( ArrayList < IntWritable > ) mockInput . get ( key ) ; valList . add ( new IntWritable ( pair . value ( ) ) ) ; } }
public static double angle ( Coordinate p0 , Coordinate p1 ) { double dx = p1 . x - p0 . x ; double dy = p1 . y - p0 . y ; return Math . atan2 ( dy , dx ) ; }
public InMemoryCursor ( String [ ] columnNames ) { mCurrentPosition = - _NUM ; mColumnNames = columnNames ; }
@ Override public boolean isEnabled ( ) { if ( ( attributeSelectionPanel != null ) && ! isValueOnly ( ) ) { return attributeSelectionPanel . isEnabled ( ) ; } else { if ( slider != null ) { return slider . isEnabled ( ) ; } } return _BOOL ; }
private void renderForeground ( final ExecutionUnit process , final Graphics2D g2 , boolean printing ) { if ( drawHighlight && ! printing && ( model . isDragStarted ( ) || model . isDropTargetSet ( ) && model . isImportDragged ( ) ) || model . isOperatorSourceHovered ( ) ) { switch ( RapidMinerGUI . getDragHighlighteMode ( ) ) { case FULL : case BORDER : drawDragBorder ( process , g2 ) ; break ; case NONE : default : break ; } } }
public ModbusTransaction createTransaction ( ) { ModbusSerialTransaction transaction = new ModbusSerialTransaction ( ) ; transaction . setTransport ( this ) ; return transaction ; }
public void start ( ) { if ( runner == null ) { runner = new Thread ( this , _STR ) ; runner . start ( ) ; } }
public synchronized int exportObject ( String name , Object obj ) throws CannotCompileException { Class clazz = obj . getClass ( ) ; ExportedObject eo = new ExportedObject ( ) ; eo . object = obj ; eo . methods = clazz . getMethods ( ) ; exportedObjects . addElement ( eo ) ; eo . identifier = exportedObjects . size ( ) - _NUM ; if ( name != null ) exportedNames . put ( name , eo ) ; try { stubGen . makeProxyClass ( clazz ) ; } catch ( NotFoundException e ) { throw new CannotCompileException ( e ) ; } return eo . identifier ; }
protected final File createDBFFDCDirectory ( ) { File dbffdcDir = new File ( ffdcDirectoryName ) ; if ( ! dbffdcDir . exists ( ) ) { final boolean isDBFFDcDirCreated = dbffdcDir . mkdirs ( ) ; if ( isDBFFDcDirCreated ) { dbffdcDir = new File ( ffdcDirectoryName ) ; return dbffdcDir ; } } else if ( ! dbffdcDir . isDirectory ( ) ) { return null ; } return dbffdcDir ; }
public static String readCharacterSizedString ( InputStream stream ) throws IOException { StringBuilder result = new StringBuilder ( ) ; int strLen = readUINT16 ( stream ) ; int character = stream . read ( ) ; character |= stream . read ( ) << _NUM ; do { if ( character != _NUM ) { result . append ( ( char ) character ) ; character = stream . read ( ) ; character |= stream . read ( ) << _NUM ; } } while ( character != _NUM || ( result . length ( ) + _NUM ) > strLen ) ; if ( strLen != ( result . length ( ) + _NUM ) ) { throw new IllegalStateException ( _STR ) ; } return result . toString ( ) ; }
protected void processChildren ( QueryNode queryTree ) throws QueryNodeException { List < QueryNode > children = queryTree . getChildren ( ) ; ChildrenList newChildren ; if ( children != null && children . size ( ) > _NUM ) { newChildren = allocateChildrenList ( ) ; try { for ( QueryNode child : children ) { child = processIteration ( child ) ; if ( child == null ) { throw new NullPointerException ( ) ; } newChildren . add ( child ) ; } List < QueryNode > orderedChildrenList = setChildrenOrder ( newChildren ) ; queryTree . set ( orderedChildrenList ) ; } finally { newChildren . beingUsed = _BOOL ; } } }
private void initializeMessages ( List < String > messages ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getGeneralMessages ( ) ) ) ; if ( OSUtils . isWindows ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getWindowsMessages ( ) ) ) ; } else if ( OSUtils . isMacOSX ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getMacOSXMessages ( ) ) ) ; } else if ( OSUtils . isLinux ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getLinuxMessages ( ) ) ) ; } else { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getOtherMessages ( ) ) ) ; } if ( ! OSUtils . isMacOSX ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getNonMacOSXMessages ( ) ) ) ; } messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getFrostWireMessages ( ) ) ) ; Collections . shuffle ( messages ) ; _currentTip = - _NUM ; }
public PersistedQueue ( final File queueEnvPath , final String queueName , final int cacheSize ) { queueEnvPath . mkdirs ( ) ; final EnvironmentConfig dbEnvConfig = new EnvironmentConfig ( ) ; dbEnvConfig . setTransactional ( _BOOL ) ; dbEnvConfig . setAllowCreate ( _BOOL ) ; this . dbEnv = new Environment ( queueEnvPath , dbEnvConfig ) ; DatabaseConfig dbConfig = new DatabaseConfig ( ) ; dbConfig . setTransactional ( _BOOL ) ; dbConfig . setAllowCreate ( _BOOL ) ; dbConfig . setDeferredWrite ( _BOOL ) ; this . queueDatabase = dbEnv . openDatabase ( null , queueName , dbConfig ) ; this . queueName = queueName ; this . cacheSize = cacheSize ; this . opsCounter = _NUM ; }
protected final StringBuilder write ( StringBuilder sb , final Object ... objects ) { for ( Object string : objects ) sb . append ( string ) ; return sb ; }
@ Override public boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
public static Request newPostOpenGraphActionRequest ( Session session , OpenGraphAction openGraphAction , Callback callback ) { if ( openGraphAction == null ) { throw new FacebookException ( _STR ) ; } if ( Utility . isNullOrEmpty ( openGraphAction . getType ( ) ) ) { throw new FacebookException ( _STR ) ; } String path = String . format ( MY_ACTION_FORMAT , openGraphAction . getType ( ) ) ; return newPostRequest ( session , path , openGraphAction , callback ) ; }
public void showLoading ( ) { switchState ( LOADING , null , null , null , null , null , Collections . < Integer > emptyList ( ) ) ; }
public void readExternal ( ObjectInput in ) throws IOException , ClassNotFoundException { int vocabSize = in . readInt ( ) ; for ( int i = _NUM ; i < vocabSize ; i ++ ) { String line = in . readUTF ( ) ; Vocabulary . id ( line ) ; } numTokens = in . readDouble ( ) ; countFuncs = new long [ in . readInt ( ) ] [ _NUM ] ; for ( int i = _NUM ; i < countFuncs . length ; i ++ ) { countFuncs [ i ] [ _NUM ] = in . readLong ( ) ; countFuncs [ i ] [ _NUM ] = in . readLong ( ) ; } typesFuncs = new long [ in . readInt ( ) ] [ _NUM ] ; for ( int i = _NUM ; i < typesFuncs . length ; i ++ ) { typesFuncs [ i ] [ _NUM ] = in . readLong ( ) ; typesFuncs [ i ] [ _NUM ] = in . readLong ( ) ; } quantizationBase = in . readDouble ( ) ; bf = new BloomFilter ( ) ; bf . readExternal ( in ) ; }
public static double computeMAD ( double [ ] x , double median ) { for ( int i = _NUM ; i < x . length ; i ++ ) { x [ i ] = Math . abs ( x [ i ] - median ) ; } double mad = QuickSelect . median ( x ) ; if ( ! ( mad > _NUM ) ) { double min = Double . POSITIVE_INFINITY ; for ( double xi : x ) { if ( xi > _NUM && xi < min ) { min = xi ; } } if ( min < Double . POSITIVE_INFINITY ) { mad = min ; } else { mad = _NUM ; } } if ( mad == Double . POSITIVE_INFINITY ) { double max = _NUM ; for ( double xi : x ) { if ( xi < Double . POSITIVE_INFINITY && xi > max ) { max = xi ; } } if ( max < Double . POSITIVE_INFINITY ) { mad = max ; } else { mad = _NUM ; } } return mad ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public SdpException ( Throwable rootCause ) { super ( rootCause . getLocalizedMessage ( ) ) ; }
private boolean linkFirst ( Node < E > node ) { if ( count >= capacity ) return _BOOL ; Node < E > f = first ; node . next = f ; first = node ; if ( last == null ) last = node ; else f . prev = node ; ++ count ; notEmpty . signal ( ) ; return _BOOL ; }
protected void notifyPropertyChangeListener ( String property , Object oldValue , Object newValue ) { Set < PropertyChangeListener > v ; synchronized ( this ) { v = new HashSet < > ( listeners ) ; } for ( PropertyChangeListener listener : v ) { listener . propertyChange ( new PropertyChangeEvent ( this , property , oldValue , newValue ) ) ; } }
public boolean indicateDirtyRead ( ITemplateHolder template ) { return ( ( template . isReadOperation ( ) && _useDirtyRead ) || template . isDirtyReadRequested ( ) ) ; }
public JValueSlider ( String title , int min , int max , int value ) { this ( title , new Integer ( min ) , new Integer ( max ) , new Integer ( value ) ) ; m_smin = min ; m_srange = max - min ; m_slider . setMinimum ( min ) ; m_slider . setMaximum ( max ) ; setValue ( new Integer ( value ) ) ; }
protected void applyAttributesToSymbol ( TacticalGraphicAttributes graphicAttributes , TacticalSymbolAttributes symbolAttributes ) { Double value = graphicAttributes . getInteriorOpacity ( ) ; if ( value != null ) { symbolAttributes . setOpacity ( value ) ; } value = graphicAttributes . getScale ( ) ; if ( value != null ) { symbolAttributes . setScale ( value ) ; } Material material = graphicAttributes . getInteriorMaterial ( ) ; symbolAttributes . setInteriorMaterial ( material ) ; Font font = graphicAttributes . getTextModifierFont ( ) ; if ( font != null ) { symbolAttributes . setTextModifierFont ( font ) ; } material = graphicAttributes . getTextModifierMaterial ( ) ; if ( material != null ) { symbolAttributes . setTextModifierMaterial ( material ) ; } }
public final void increaseIdleCount ( IdleStatus status , long currentTime ) { if ( status == IdleStatus . BOTH_IDLE ) { idleCountForBoth . incrementAndGet ( ) ; lastIdleTimeForBoth = currentTime ; } else if ( status == IdleStatus . READER_IDLE ) { idleCountForRead . incrementAndGet ( ) ; lastIdleTimeForRead = currentTime ; } else if ( status == IdleStatus . WRITER_IDLE ) { idleCountForWrite . incrementAndGet ( ) ; lastIdleTimeForWrite = currentTime ; } else { throw new IllegalArgumentException ( _STR + status ) ; } }
public RemoteServiceDescriptor ( String baseUrl , HttpJsonRequestFactory requestFactory ) throws IllegalArgumentException { this . baseUrl = baseUrl ; this . requestFactory = requestFactory ; try { final URL baseUrlURL = new URL ( baseUrl ) ; final String protocol = baseUrlURL . getProtocol ( ) ; if ( ! ( protocol . equals ( _STR ) || protocol . equals ( _STR ) ) ) { throw new IllegalArgumentException ( String . format ( _STR , baseUrl ) ) ; } } catch ( MalformedURLException e ) { throw new IllegalArgumentException ( String . format ( _STR , baseUrl ) ) ; } }
private Journal readJournal ( ParcelFileDescriptor oldState ) { Journal journal = new Journal ( ) ; if ( oldState == null ) { return journal ; } FileInputStream inStream = new FileInputStream ( oldState . getFileDescriptor ( ) ) ; try { int availableBytes = inStream . available ( ) ; if ( DEBUG ) Log . d ( TAG , _STR + availableBytes ) ; if ( availableBytes < MAX_JOURNAL_SIZE ) { byte [ ] buffer = new byte [ availableBytes ] ; int bytesRead = _NUM ; boolean valid = _BOOL ; InvalidProtocolBufferNanoException lastProtoException = null ; while ( availableBytes > _NUM ) { try { int result = inStream . read ( buffer , bytesRead , _NUM ) ; if ( result > _NUM ) { availableBytes -= result ; bytesRead += result ; } else { Log . w ( TAG , _STR ) ; availableBytes = _NUM ; } } catch ( IOException e ) { buffer = null ; availableBytes = _NUM ; } try { MessageNano . mergeFrom ( journal , readCheckedBytes ( buffer , bytesRead ) ) ; valid = _BOOL ; availableBytes = _NUM ; if ( VERBOSE ) Log . v ( TAG , _STR + bytesRead + _STR ) ; } catch ( InvalidProtocolBufferNanoException e ) { lastProtoException = e ; journal . clear ( ) ; } } if ( DEBUG ) Log . d ( TAG , _STR + bytesRead ) ; if ( ! valid ) { Log . w ( TAG , _STR , lastProtoException ) ; } } } catch ( IOException e ) { Log . w ( TAG , _STR , e ) ; } return journal ; }
public Server start ( ) throws SQLException { try { started = _BOOL ; service . start ( ) ; String name = service . getName ( ) + _STR + service . getURL ( ) + _STR ; Thread t = new Thread ( this , name ) ; t . setDaemon ( service . isDaemon ( ) ) ; t . start ( ) ; for ( int i = _NUM ; i < _NUM ; i += i ) { wait ( i ) ; if ( isRunning ( _BOOL ) ) { return this ; } } if ( isRunning ( _BOOL ) ) { return this ; } throw DbException . get ( ErrorCode . EXCEPTION_OPENING_PORT_2 , name , _STR + _STR ) ; } catch ( DbException e ) { throw DbException . toSQLException ( e ) ; } }
@ Override public boolean isComplete ( ) { return _BOOL ; }
public ByteMatrix encode ( String contents , int width , int height , Map < EncodeHintType , Object > hints ) throws WriterException { if ( contents == null || contents . length ( ) == _NUM ) { throw new IllegalArgumentException ( _STR ) ; } if ( width < _NUM || height < _NUM ) { throw new IllegalArgumentException ( _STR + width + _STR + height ) ; } ErrorCorrectionLevel errorCorrectionLevel = ErrorCorrectionLevel . L ; if ( hints != null ) { ErrorCorrectionLevel requestedECLevel = ( ErrorCorrectionLevel ) hints . get ( EncodeHintType . ERROR_CORRECTION ) ; if ( requestedECLevel != null ) { errorCorrectionLevel = requestedECLevel ; } } QRCode code = new QRCode ( ) ; Encoder . encode ( contents , errorCorrectionLevel , hints , code ) ; return renderResult ( code , width , height ) ; }
public IntBuffer put ( int [ ] src , int srcOffset , int intCount ) { if ( isReadOnly ( ) ) { throw new ReadOnlyBufferException ( ) ; } Arrays . checkOffsetAndCount ( src . length , srcOffset , intCount ) ; if ( intCount > remaining ( ) ) { throw new BufferOverflowException ( ) ; } for ( int i = srcOffset ; i < srcOffset + intCount ; ++ i ) { put ( src [ i ] ) ; } return this ; }
public Request header ( String key , String value ) { Objects . requireNonNull ( key ) ; Objects . requireNonNull ( value ) ; _headers . put ( key , value ) ; return this ; }
public void updateUI ( ) { super . updateUI ( ) ; setBackground ( new Color ( _NUM , _NUM , _NUM , _NUM ) ) ; setWrapStyleWord ( _BOOL ) ; setHighlighter ( null ) ; setEditable ( _BOOL ) ; LookAndFeel . installBorder ( this , _STR ) ; LookAndFeel . installColorsAndFont ( this , _STR , _STR , _STR ) ; if ( resizeHandler != null ) { resizeHandler . componentResized ( null ) ; } SizePolicy policy = ( SizePolicy ) getClientProperty ( SizePolicy . class ) ; if ( policy != null ) { GUIUtils . restrictSize ( this , policy ) ; } }
public static void generateExtensionManager ( File rootFolder ) throws IOException { File outFile = new File ( rootFolder , REGISTRY_PATH ) ; StringBuilder builder = new StringBuilder ( ) ; builder . append ( _STR ) ; generateImports ( builder ) ; generateClass ( builder ) ; FileUtils . writeStringToFile ( outFile , builder . toString ( ) ) ; }
public synchronized Future < V > submit ( Callable < V > task ) throws RejectedExecutionException { return pool . submit ( task ) ; }
private void checkBucketName ( String name ) throws InvalidBucketNameException { if ( name == null ) { throw new InvalidBucketNameException ( NULL_STRING , _STR ) ; } if ( name . length ( ) < _NUM || name . length ( ) > _NUM ) { String msg = _STR ; throw new InvalidBucketNameException ( name , msg ) ; } if ( name . matches ( _STR ) ) { String msg = _STR + _STR ; throw new InvalidBucketNameException ( name , msg ) ; } if ( ! name . matches ( _STR ) ) { String msg = _STR + _STR ; throw new InvalidBucketNameException ( name , msg ) ; } }
private void validateUserNamespaceAuthorizationCreateRequest ( UserNamespaceAuthorizationCreateRequest request ) { Assert . notNull ( request , _STR ) ; validateUserNamespaceAuthorizationKey ( request . getUserNamespaceAuthorizationKey ( ) ) ; validateNamespacePermissions ( request . getNamespacePermissions ( ) ) ; }
protected String format ( Object o ) { return o . toString ( ) ; }
public void calculateDerived ( ) { xStats . calculateDerived ( ) ; yStats . calculateDerived ( ) ; differencesStats . calculateDerived ( ) ; correlation = Double . NaN ; if ( ! Double . isNaN ( xStats . stdDev ) && ! Double . isNaN ( yStats . stdDev ) && ! Utils . eq ( xStats . stdDev , _NUM ) ) { double slope = ( xySum - xStats . sum * yStats . sum / count ) / ( xStats . sumSq - xStats . sum * xStats . mean ) ; if ( ! Utils . eq ( yStats . stdDev , _NUM ) ) { correlation = slope * xStats . stdDev / yStats . stdDev ; } else { correlation = _NUM ; } } if ( Utils . gr ( differencesStats . stdDev , _NUM ) ) { double tval = differencesStats . mean * Math . sqrt ( count ) / differencesStats . stdDev ; if ( m_degreesOfFreedom >= _NUM ) { differencesProbability = Statistics . FProbability ( tval * tval , _NUM , m_degreesOfFreedom ) ; } else { if ( count > _NUM ) { differencesProbability = Statistics . FProbability ( tval * tval , _NUM , ( int ) count - _NUM ) ; } else { differencesProbability = _NUM ; } } } else { if ( differencesStats . sumSq == _NUM ) { differencesProbability = _NUM ; } else { differencesProbability = _NUM ; } } differencesSignificance = _NUM ; if ( differencesProbability <= sigLevel ) { if ( xStats . mean > yStats . mean ) { differencesSignificance = _NUM ; } else { differencesSignificance = - _NUM ; } } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
protected boolean canDeleteConsistencyGroup ( final BlockConsistencyGroup consistencyGroup ) { return ( ! consistencyGroup . getInactive ( ) && ! consistencyGroup . created ( ) ) ; }
public static void closeQuietly ( Closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( RuntimeException rethrown ) { throw rethrown ; } catch ( Exception ignored ) { } } }
public AmqpMessage receiveNoWait ( ) throws Exception { checkClosed ( ) ; return prefetch . poll ( ) ; }
@ Override protected void removeRange ( int start , int end ) { if ( start < _NUM ) { throw new IndexOutOfBoundsException ( _STR + start ) ; } else if ( end > size ) { throw new IndexOutOfBoundsException ( _STR + end + _STR + size ) ; } else if ( start > end ) { throw new IndexOutOfBoundsException ( _STR + start + _STR + end ) ; } if ( start == end ) { return ; } if ( end == size ) { Arrays . fill ( array , firstIndex + start , firstIndex + size , null ) ; } else if ( start == _NUM ) { Arrays . fill ( array , firstIndex , firstIndex + end , null ) ; firstIndex += end ; } else { System . arraycopy ( array , firstIndex + end , array , firstIndex + start , size - end ) ; int lastIndex = firstIndex + size ; int newLast = lastIndex + start - end ; Arrays . fill ( array , newLast , lastIndex , null ) ; } size -= end - start ; modCount ++ ; }
private boolean zzRefill ( ) throws java . io . IOException { if ( zzStartRead > _NUM ) { System . arraycopy ( zzBuffer , zzStartRead , zzBuffer , _NUM , zzEndRead - zzStartRead ) ; zzEndRead -= zzStartRead ; zzCurrentPos -= zzStartRead ; zzMarkedPos -= zzStartRead ; zzPushbackPos -= zzStartRead ; zzStartRead = _NUM ; } if ( zzCurrentPos >= zzBuffer . length ) { final char newBuffer [ ] = new char [ zzCurrentPos * _NUM ] ; System . arraycopy ( zzBuffer , _NUM , newBuffer , _NUM , zzBuffer . length ) ; zzBuffer = newBuffer ; } final int numRead = zzReader . read ( zzBuffer , zzEndRead , zzBuffer . length - zzEndRead ) ; if ( numRead < _NUM ) { return _BOOL ; } else { zzEndRead += numRead ; return _BOOL ; } }
private void checkDuplicateNamesDuringDelete ( List < Integer > ids ) { ArrayList < Entity > myEntities = game . getPlayerEntities ( game . getPlayer ( localPlayerNumber ) , _BOOL ) ; Hashtable < String , ArrayList < Integer > > rawNameToId = new Hashtable < String , ArrayList < Integer > > ( ( int ) ( myEntities . size ( ) * _NUM ) ) ; for ( Entity e : myEntities ) { String rawName = e . getShortNameRaw ( ) ; ArrayList < Integer > namedIds = rawNameToId . get ( rawName ) ; if ( namedIds == null ) { namedIds = new ArrayList < Integer > ( ) ; } namedIds . add ( e . getId ( ) ) ; rawNameToId . put ( rawName , namedIds ) ; } for ( int id : ids ) { Entity removedEntity = game . getEntity ( id ) ; if ( removedEntity == null ) { continue ; } String removedRawName = removedEntity . getShortNameRaw ( ) ; Integer count = duplicateNameHash . get ( removedEntity . getShortNameRaw ( ) ) ; if ( ( count != null ) && ( count > _NUM ) ) { ArrayList < Integer > namedIds = rawNameToId . get ( removedRawName ) ; for ( Integer i : namedIds ) { Entity e = game . getEntity ( i ) ; String eRawName = e . getShortNameRaw ( ) ; if ( eRawName . equals ( removedRawName ) && ( e . duplicateMarker > removedEntity . duplicateMarker ) ) { e . duplicateMarker -- ; e . generateShortName ( ) ; e . generateDisplayName ( ) ; if ( ! ids . contains ( e . getId ( ) ) ) { sendUpdateEntity ( e ) ; } } } duplicateNameHash . put ( removedEntity . getShortNameRaw ( ) , new Integer ( count - _NUM ) ) ; } else if ( count != null ) { duplicateNameHash . remove ( removedEntity . getShortNameRaw ( ) ) ; } } }
protected void stopBKCluster ( ) throws Exception { if ( bkc != null ) { bkc . close ( ) ; } for ( BookieServer server : bs ) { server . shutdown ( ) ; AutoRecoveryMain autoRecovery = autoRecoveryProcesses . get ( server ) ; if ( autoRecovery != null && isAutoRecoveryEnabled ( ) ) { autoRecovery . shutdown ( ) ; LOG . debug ( _STR + server . getLocalAddress ( ) ) ; } } bs . clear ( ) ; for ( File f : tmpDirs ) { FileUtils . deleteDirectory ( f ) ; } }
public void or ( Criteria criteria ) { oredCriteria . add ( criteria ) ; }
public void releaseSelections ( Set < Entity > items ) { for ( Entity item : items ) { releaseSelection ( item ) ; } }
public HubLinkMapping ( String fileName , int numberOfHubs , Network network ) { this . numberOfHubs = numberOfHubs ; if ( fileName . contains ( _STR ) ) { readMappingTable ( fileName ) ; unMappedLinksAtZeroHub = _BOOL ; return ; } handleUnmappedLinksStart ( ) ; try { FileReader fr = new FileReader ( fileName ) ; BufferedReader br = new BufferedReader ( fr ) ; String line ; StringTokenizer tokenizer ; String token ; int linkId ; line = br . readLine ( ) ; while ( line != null ) { tokenizer = new StringTokenizer ( line ) ; for ( int i = _NUM ; i < this . numberOfHubs ; i ++ ) { token = tokenizer . nextToken ( ) ; linkId = ( int ) Double . parseDouble ( token ) ; linkHubMapping . put ( Integer . toString ( linkId ) , i ) ; } if ( tokenizer . hasMoreTokens ( ) ) { throw new RuntimeException ( _STR ) ; } line = br . readLine ( ) ; } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( _STR ) ; } linkHubMapping . remove ( _STR ) ; handleUnmappedLinksEnd ( network ) ; }
public boolean deleteLoadName ( String load ) { if ( ! _loadList . contains ( load ) ) { return _BOOL ; } _loadList . remove ( load ) ; log . debug ( _STR + getName ( ) + _STR + load ) ; setDirtyAndFirePropertyChange ( LOADS_CHANGED_PROPERTY , _loadList . size ( ) + _NUM , _loadList . size ( ) ) ; return _BOOL ; }
private ComputeState validateComputeName ( String awsId , String vmName ) throws Throwable { if ( this . isAwsClientMock ) { return null ; } ComputeState computeState = getComputeByAWSId ( this . host , awsId ) ; String tagNameValue = computeState . name ; assertNotNull ( _STR , tagNameValue ) ; assertEquals ( vmName , tagNameValue ) ; return computeState ; }
public static String fromTag ( IntArrayTag tag ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( ARRAY_START ) ; boolean start = _BOOL ; for ( int value : tag . getValue ( ) ) { IntTag i = new IntTag ( value ) ; if ( start ) { start = _BOOL ; } else { builder . append ( ELEMENT_SEPERATOR ) ; } builder . append ( fromTag ( i ) ) ; } builder . append ( ARRAY_END ) ; return builder . toString ( ) ; }
public static int removeArgsAndReturnInsertionIndex ( List < String > args , int argIndex , boolean tryRemovingArgValue ) { if ( argIndex < _NUM || argIndex >= args . size ( ) ) { return _NUM ; } if ( tryRemovingArgValue ) { String argValue = getArgValue ( args , argIndex + _NUM ) ; if ( argValue != null ) { args . remove ( argIndex + _NUM ) ; } } args . remove ( argIndex ) ; return argIndex ; }
void replacePolicyInResourceTree ( ServiceTypeManager svtm , SSOToken token , Policy oldPolicy , Policy newPolicy ) throws PolicyException , SSOException { removePolicyFromResourceTree ( svtm , token , oldPolicy ) ; addPolicyToResourceTree ( svtm , token , newPolicy ) ; }
public AtomicDoubleArray ( int length ) { larray = new AtomicLongArray ( length ) ; long ZERO = Double . doubleToRawLongBits ( _NUM ) ; for ( int i = _NUM ; i < length ; i ++ ) larray . set ( i , ZERO ) ; }
private void copyAction ( File srcFile , File destFile ) throws FileNotFoundException , IOException { FileInputStream istream = new FileInputStream ( srcFile ) ; FileOutputStream ostream = new FileOutputStream ( destFile ) ; FileChannel input = istream . getChannel ( ) ; FileChannel output = ostream . getChannel ( ) ; try { input . transferTo ( _NUM , input . size ( ) , output ) ; } finally { istream . close ( ) ; ostream . close ( ) ; input . close ( ) ; output . close ( ) ; } }
private void recomputeSeperation ( double [ ] [ ] means , double [ ] [ ] cdist , LongStatistic diststat ) { final int k = means . length ; for ( int i = _NUM ; i < k ; i ++ ) { DoubleVector mi = DoubleVector . wrap ( means [ i ] ) ; for ( int j = _NUM ; j < i ; j ++ ) { cdist [ i ] [ j ] = cdist [ j ] [ i ] = distanceFunction . distance ( mi , DoubleVector . wrap ( means [ j ] ) ) ; } } if ( diststat != null ) { diststat . increment ( ( k * ( k - _NUM ) ) > > _NUM ) ; } }
private static BufferedImage makeSquare ( BufferedImage input ) { if ( input . getHeight ( ) == input . getWidth ( ) ) { return input ; } else { int max = Math . max ( input . getHeight ( ) , input . getWidth ( ) ) ; int dx = ( max - input . getWidth ( ) ) / _NUM ; int dy = ( max - input . getHeight ( ) ) / _NUM ; return createImg ( max , max , input . getType ( ) , null ) ; } }
protected abstract void handleLostEntry ( HttpRoute route ) ;
public void writeStartElement ( String localName ) throws XMLStreamException { if ( localName == null || localName . length ( ) == _NUM ) { throw new XMLStreamException ( _STR ) ; } _state = STATE_ELEMENT ; if ( _currentEle != null && _currentEle . getState ( ) == ELEMENT_STARTTAG_OPEN ) { closeStartTag ( ) ; } _currentEle = new Element ( _currentEle , localName , _BOOL ) ; openStartTag ( ) ; _writer . write ( localName ) ; }
public void addProcessInteractionListener ( final ProcessInteractionListener l ) { if ( l == null ) { throw new IllegalArgumentException ( _STR ) ; } processInteractionListeners . add ( l ) ; }
private void traverseInternal ( Object root , boolean yieldRoot , IdentityHashMap < Object , Object > seen ) { if ( root == null || seen . containsKey ( root ) ) { return ; } if ( yieldRoot ) { if ( ! visit ( root ) ) { return ; } } seen . put ( root , root ) ; if ( root instanceof JSONObject ) { JSONObject json = ( JSONObject ) root ; Iterator < String > keys = json . keys ( ) ; while ( keys . hasNext ( ) ) { String key = keys . next ( ) ; try { traverseInternal ( json . get ( key ) , _BOOL , seen ) ; } catch ( JSONException e ) { throw new RuntimeException ( e ) ; } } } else if ( root instanceof JSONArray ) { JSONArray array = ( JSONArray ) root ; for ( int i = _NUM ; i < array . length ( ) ; ++ i ) { try { traverseInternal ( array . get ( i ) , _BOOL , seen ) ; } catch ( JSONException e ) { throw new RuntimeException ( e ) ; } } } else if ( root instanceof Map ) { Map < ? , ? > map = ( Map < ? , ? > ) root ; for ( Object value : map . values ( ) ) { traverseInternal ( value , _BOOL , seen ) ; } } else if ( root instanceof List ) { List < ? > list = ( List < ? > ) root ; for ( Object value : list ) { traverseInternal ( value , _BOOL , seen ) ; } } else if ( root instanceof ParseObject ) { if ( traverseParseObjects ) { ParseObject object = ( ParseObject ) root ; for ( String key : object . keySet ( ) ) { traverseInternal ( object . get ( key ) , _BOOL , seen ) ; } } } else if ( root instanceof ParseACL ) { ParseACL acl = ( ParseACL ) root ; ParseUser user = acl . getUnresolvedUser ( ) ; if ( user != null && user . isCurrentUser ( ) ) { traverseInternal ( user , _BOOL , seen ) ; } } }
public StrBuilder replaceFirst ( final String searchStr , final String replaceStr ) { final int searchLen = ( searchStr == null ? _NUM : searchStr . length ( ) ) ; if ( searchLen > _NUM ) { final int index = indexOf ( searchStr , _NUM ) ; if ( index >= _NUM ) { final int replaceLen = ( replaceStr == null ? _NUM : replaceStr . length ( ) ) ; replaceImpl ( index , index + searchLen , searchLen , replaceStr , replaceLen ) ; } } return this ; }
protected abstract void internalPut ( int index , byte b ) ;
public CommonTurnoutOperationConfig ( TurnoutOperation op ) { super ( op ) ; myOp = ( CommonTurnoutOperation ) op ; maxTriesSpinner = new JSpinner ( ) ; intervalSpinner = new JSpinner ( ) ; Box vbox = Box . createVerticalBox ( ) ; Box hbox1 = Box . createHorizontalBox ( ) ; Box hbox2 = Box . createHorizontalBox ( ) ; vbox . add ( hbox2 ) ; vbox . add ( hbox1 ) ; vbox . add ( Box . createVerticalGlue ( ) ) ; hbox1 . add ( new JLabel ( Bundle . getMessage ( _STR ) ) ) ; hbox1 . add ( Box . createHorizontalGlue ( ) ) ; intervalSpinner . setMinimumSize ( new Dimension ( _NUM , _NUM ) ) ; intervalSpinner . setModel ( new SpinnerNumberModel ( myOp . getInterval ( ) , CommonTurnoutOperation . minInterval , CommonTurnoutOperation . maxInterval , CommonTurnoutOperation . intervalStepSize ) ) ; hbox1 . add ( intervalSpinner ) ; hbox2 . add ( new JLabel ( Bundle . getMessage ( _STR ) ) ) ; hbox2 . add ( Box . createHorizontalGlue ( ) ) ; maxTriesSpinner . setMinimumSize ( new Dimension ( _NUM , _NUM ) ) ; maxTriesSpinner . setModel ( new SpinnerNumberModel ( myOp . getMaxTries ( ) , CommonTurnoutOperation . minMaxTries , CommonTurnoutOperation . maxMaxTries , _NUM ) ) ; hbox2 . add ( maxTriesSpinner ) ; Box hbox3 = Box . createHorizontalBox ( ) ; hbox3 . add ( Box . createHorizontalStrut ( _NUM ) ) ; vbox . add ( hbox3 ) ; add ( vbox ) ; }
public static String gensalt ( int log_rounds , SecureRandom random ) { if ( log_rounds < _NUM || log_rounds > _NUM ) { throw new IllegalArgumentException ( _STR ) ; } StringBuilder rs = new StringBuilder ( ) ; byte rnd [ ] = new byte [ BCRYPT_SALT_LEN ] ; random . nextBytes ( rnd ) ; rs . append ( _STR ) ; if ( log_rounds < _NUM ) { rs . append ( _STR ) ; } rs . append ( log_rounds ) ; rs . append ( _STR ) ; encode_base64 ( rnd , rnd . length , rs ) ; return rs . toString ( ) ; }
protected void drawDescription ( Canvas c ) { if ( ! mDescription . equals ( _STR ) ) { if ( mDescriptionPosition == null ) { c . drawText ( mDescription , getWidth ( ) - mViewPortHandler . offsetRight ( ) - _NUM , getHeight ( ) - mViewPortHandler . offsetBottom ( ) - _NUM , mDescPaint ) ; } else { c . drawText ( mDescription , mDescriptionPosition . x , mDescriptionPosition . y , mDescPaint ) ; } } }
long parseBytes ( String freeSpace , String path ) throws IOException { try { long bytes = Long . parseLong ( freeSpace ) ; if ( bytes < _NUM ) { throw new IOException ( _STR + DF + _STR + _STR + path + _STR ) ; } return bytes ; } catch ( NumberFormatException ex ) { throw new IOExceptionWithCause ( _STR + DF + _STR + _STR + path + _STR , ex ) ; } }
public String findInterlanguageLink ( String lang ) { int start = page . indexOf ( _STR + lang + _STR ) ; if ( start < _NUM ) return null ; int end = page . indexOf ( _STR , start ) ; if ( end < _NUM ) return null ; String link = page . substring ( start + _NUM + lang . length ( ) , end ) ; if ( link . indexOf ( _STR ) != - _NUM ) { return null ; } if ( link . length ( ) == _NUM ) return null ; return link ; }
private void updateActions ( final INaviAddressSpace addressSpace ) { m_loadAddressSpaceAction . setEnabled ( ! addressSpace . isLoaded ( ) ) ; }
public static < T > ParallelFlux < T > from ( Publisher < ? extends T > source , int parallelism ) { return from ( source , parallelism , QueueSupplier . SMALL_BUFFER_SIZE , QueueSupplier . small ( ) ) ; }
private static void cleanDirectoryOnExit ( File directory ) throws IOException { if ( ! directory . exists ( ) ) { String message = directory + _STR ; throw new IllegalArgumentException ( message ) ; } if ( ! directory . isDirectory ( ) ) { String message = directory + _STR ; throw new IllegalArgumentException ( message ) ; } File [ ] files = directory . listFiles ( ) ; if ( files == null ) { throw new IOException ( _STR + directory ) ; } IOException exception = null ; for ( File file : files ) { try { forceDeleteOnExit ( file ) ; } catch ( IOException ioe ) { exception = ioe ; } } if ( null != exception ) { throw exception ; } }
private void addGumball ( float xPos , float yPos ) { Gumball gumball = new Gumball ( ) ; gumball . mXInitPos = xPos ; gumball . mYInitPos = yPos ; gumball . mSoundPoolId = UUID . randomUUID ( ) ; mSoundPoolId . put ( gumball . mSoundPoolId , _BOOL ) ; mGameView . addGumball ( gumball ) ; mSoundPool . play ( mSoundBallDrop , _NUM , _NUM , _NUM , _NUM , _NUM ) ; }
int put ( T segment , List < ? super T > recycleBin ) { int count ; if ( lastCount == _NUM ) { count = _NUM ; lastCount = _NUM ; last = segment ; } else if ( Objects . deepEquals ( last , segment ) ) { ++ lastCount ; count = _NUM ; recycleBin . add ( segment ) ; } else { count = lastCount ; lastCount = _NUM ; last = segment ; } return count ; }
@ KnownFailure ( _STR ) public void testDelete6 ( ) throws SQLException { DatabaseCreator . fillFKStrictTable ( conn ) ; statement . execute ( _STR + DatabaseCreator . FKSTRICT_TABLE + _STR + DatabaseCreator . PARENT_TABLE + _STR ) ; ResultSet r = statement . executeQuery ( _STR + DatabaseCreator . FKSTRICT_TABLE + _STR ) ; r . next ( ) ; assertEquals ( _STR , _NUM , r . getInt ( _NUM ) ) ; r . close ( ) ; }
public Channel chan ( final String topic , final JsonNode payload ) { LOG . log ( Level . FINE , _STR , new Object [ ] { topic , payload } ) ; final Channel channel = new Channel ( topic , payload , Socket . this ) ; synchronized ( channels ) { channels . add ( channel ) ; } return channel ; }
public PlaPointFloat change_size ( double p_new_size ) { if ( v_x == _NUM && v_y == _NUM ) { return this ; } double length = Math . sqrt ( v_x * v_x + v_y * v_y ) ; double new_x = ( v_x * p_new_size ) / length ; double new_y = ( v_y * p_new_size ) / length ; return new PlaPointFloat ( new_x , new_y ) ; }
int insert ( Row row , byte [ ] sourceBuffer , int sourceOffset , BlobOutputStream [ ] blobs ) { int rowHead = _rowHead ; int blobTail = _blobTail ; int rowLength = row . length ( ) ; rowHead -= rowLength ; if ( rowHead < blobTail ) { return - _NUM ; } byte [ ] buffer = _buffer ; System . arraycopy ( sourceBuffer , sourceOffset , buffer , rowHead , rowLength ) ; buffer [ rowHead ] = ( byte ) ( ( buffer [ rowHead ] & ~ CODE_MASK ) | INSERT ) ; blobTail = row . insertBlobs ( buffer , rowHead , blobTail , blobs ) ; if ( blobTail < _NUM ) { return - _NUM ; } setBlobTail ( blobTail ) ; rowHead ( rowHead ) ; validateBlock ( row ) ; return rowHead ; }
private void addDefaultUri ( ) throws IgniteSpiException { assert uriEncodedList != null ; URI uri ; try { uri = U . resolveWorkDirectory ( DFLT_DEPLOY_DIR , _BOOL ) . toURI ( ) ; } catch ( IgniteCheckedException e ) { throw new IgniteSpiException ( _STR , e ) ; } uriEncodedList . add ( uri ) ; }
protected void transfer ( String seqRange ) throws IOException { try { final int rangePos = seqRange . indexOf ( _STR ) ; if ( rangePos == - _NUM ) { transfer ( Long . parseLong ( seqRange ) ) ; } else { final String start = seqRange . substring ( _NUM , rangePos ) ; final String end = seqRange . substring ( rangePos + _NUM ) ; final long startIdx ; if ( start . length ( ) == _NUM ) { startIdx = _NUM ; } else { startIdx = Long . parseLong ( start ) ; } final long endIdx ; if ( end . length ( ) == _NUM ) { endIdx = mReader . numberSequences ( ) - _NUM ; } else { endIdx = Long . parseLong ( end ) ; } if ( startIdx > endIdx ) { throw new NumberFormatException ( _STR + seqRange ) ; } for ( long i = startIdx ; i <= endIdx ; i ++ ) { transfer ( i ) ; } } } catch ( final NumberFormatException e ) { warnInvalidSequence ( seqRange ) ; } }
public static double distancePointLinePerpendicular ( Coordinate p , Coordinate A , Coordinate B ) { double len2 = ( B . x - A . x ) * ( B . x - A . x ) + ( B . y - A . y ) * ( B . y - A . y ) ; double s = ( ( A . y - p . y ) * ( B . x - A . x ) - ( A . x - p . x ) * ( B . y - A . y ) ) / len2 ; return Math . abs ( s ) * Math . sqrt ( len2 ) ; }
BigInteger copy ( ) { prepareJavaRepresentation ( ) ; int [ ] copyDigits = new int [ numberLength ] ; System . arraycopy ( digits , _NUM , copyDigits , _NUM , numberLength ) ; return new BigInteger ( sign , numberLength , copyDigits ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . replaceData ( _NUM , _NUM , _STR ) ; childData = child . getData ( ) ; assertEquals ( _STR , _STR , childData ) ; }
public String patchFixIds ( ) { return properties . getProperty ( _STR ) ; }
public final void readFully ( byte [ ] b ) throws java . io . IOException { readFully ( b , _NUM , b . length ) ; }
private void createGui ( ) { final JPanel outerNamePanel = new JPanel ( new BorderLayout ( ) ) ; outerNamePanel . setBorder ( new TitledBorder ( _STR ) ) ; final JPanel namePanel = new JPanel ( new BorderLayout ( ) ) ; namePanel . setBorder ( new EmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; final JLabel nameLabel = new CHelpLabel ( _STR + _STR , new CNameHelp ( ) ) ; nameLabel . setPreferredSize ( new Dimension ( _NUM , _NUM ) ) ; namePanel . add ( nameLabel , BorderLayout . WEST ) ; namePanel . add ( m_nameTextField , BorderLayout . CENTER ) ; outerNamePanel . add ( namePanel , BorderLayout . CENTER ) ; final JPanel outerDescriptionPanel = new JPanel ( new BorderLayout ( ) ) ; outerDescriptionPanel . setBorder ( new EmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; final JPanel descriptionPanel = new JPanel ( new BorderLayout ( ) ) ; descriptionPanel . setBorder ( new TitledBorder ( _STR ) ) ; descriptionPanel . setMinimumSize ( new Dimension ( _NUM , _NUM ) ) ; descriptionPanel . add ( new JScrollPane ( m_descriptionField ) ) ; outerDescriptionPanel . add ( descriptionPanel , BorderLayout . CENTER ) ; final JPanel buttonPanel = new JPanel ( new GridLayout ( _NUM , _NUM ) ) ; buttonPanel . add ( new JPanel ( ) ) ; buttonPanel . setBorder ( new EmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; buttonPanel . add ( m_saveButton ) ; final JPanel topPanel = new JPanel ( new BorderLayout ( ) ) ; topPanel . add ( outerNamePanel , BorderLayout . NORTH ) ; topPanel . add ( outerDescriptionPanel , BorderLayout . CENTER ) ; topPanel . add ( buttonPanel , BorderLayout . SOUTH ) ; final JPanel bottomPanel = new JPanel ( new BorderLayout ( ) ) ; bottomPanel . setBorder ( m_tableBorder ) ; final JScrollPane scrollPane = new JScrollPane ( m_childrenTagTable ) ; bottomPanel . add ( scrollPane , BorderLayout . CENTER ) ; final JSplitPane splitPane = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , _BOOL , topPanel , bottomPanel ) ; splitPane . setOneTouchExpandable ( _BOOL ) ; splitPane . setDividerLocation ( splitPane . getMinimumDividerLocation ( ) ) ; splitPane . setResizeWeight ( _NUM ) ; add ( splitPane ) ; }
public static boolean isJellybeanOrLater ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN ; }
public PartialCorrelationPdf ( int n , int k ) { this . n = n ; this . k = k ; double gammaRatio = gammaRatio ( n , k ) ; this . constant = ( _NUM / Math . pow ( Math . PI , _NUM ) ) * gammaRatio ; this . outsideExp = ( double ) ( n - k - _NUM ) / _NUM ; }
private static boolean isEnabled ( ) { if ( SystemUtils . IS_OS_WINDOWS ) { return _BOOL ; } try { List < String > lines = CommandUtil . executeCommandAndGetLines ( Collections . singletonList ( _STR ) ) ; for ( String line : lines ) { if ( line . contains ( _STR ) ) { if ( line . contains ( _STR ) ) { Logger . info ( _STR ) ; return _BOOL ; } return _BOOL ; } } } catch ( Exception ex ) { } return _BOOL ; }
public boolean validate ( ) { outputFile = new File ( outputPath ) ; if ( outputFile . exists ( ) || outputFile . isDirectory ( ) ) { invalidMessage = _STR ; return valid = _BOOL ; } if ( ! signMode ) { keyFile = new File ( keyFilePath ) ; if ( ! keyFile . exists ( ) || keyFile . isDirectory ( ) ) { invalidMessage = _STR ; return valid = _BOOL ; } } return valid = _BOOL ; }
public void addResponseCodeListener ( ActionListener a ) { responseCodeListeners . addElement ( a ) ; }
public double calculateLogLikelihood ( ) { double logL = _NUM ; for ( Statistic statistic : dataList ) { for ( int j = _NUM ; j < statistic . getDimension ( ) ; j ++ ) { logL -= Math . log ( statistic . getStatisticValue ( j ) ) ; } } return logL ; }
public static boolean hasDeadStatesFromInitial ( Automaton a ) { BitSet reachableFromInitial = getLiveStatesFromInitial ( a ) ; BitSet reachableFromAccept = getLiveStatesToAccept ( a ) ; reachableFromInitial . andNot ( reachableFromAccept ) ; return reachableFromInitial . isEmpty ( ) == _BOOL ; }
public Decimal subtract ( Decimal decimal ) { assertDefined ( ) ; if ( null == m_value ) { return ( decimal ) ; } BigDecimal value = m_value . subtract ( decimal . getBigDecimalValue ( ) ) ; return new Decimal ( value , SCALE ) ; }
public final boolean equals ( Object object ) { if ( object == null ) { return _BOOL ; } if ( ! ( object instanceof KnowledgeEdge ) ) { return _BOOL ; } KnowledgeEdge pair = ( KnowledgeEdge ) object ; return from . equals ( pair . from ) && to . equals ( pair . to ) ; }
protected int skipLine ( int c ) throws IOException { while ( c != - _NUM && c != _STR && c != _STR ) { c = reader . read ( ) ; } if ( c == _STR ) { c = reader . read ( ) ; lineNo ++ ; reportLocation ( lineNo , _NUM ) ; } else if ( c == _STR ) { c = reader . read ( ) ; if ( c == _STR ) { c = reader . read ( ) ; } lineNo ++ ; reportLocation ( lineNo , _NUM ) ; } return c ; }
@ Override public void listVolumes ( CommandInput input , CompletionHandler completionHandler ) { createOrUpdateTargetSsl ( input ) ; URI uri = UriUtils . extendUri ( input . getDockerUri ( ) , _STR ) ; sendGet ( uri , null , completionHandler ) ; }
public static ByteBuffer base64StringToByteBuffer ( String base64EncodedKey ) { return ByteBuffer . wrap ( base64DecodeString ( base64EncodedKey ) ) ; }
public boolean step ( ) { long current = System . currentTimeMillis ( ) ; if ( mStart == _NUM || ( current - mStart < _NUM ) ) { mProgress = _NUM ; } else if ( current - mStart > mDuration ) { if ( mLoop ) { mProgress = _NUM ; start ( ) ; return _BOOL ; } mProgress = _NUM ; return _BOOL ; } else { mProgress = ( current - mStart ) / ( double ) mDuration ; } return _BOOL ; }
protected void load_raw_characters ( StringBuilder sb ) throws IOException { int c = read_char ( ) ; for ( ; ; ) { c = read_char ( ) ; switch ( c ) { case CharacterSequence . CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1 : case CharacterSequence . CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2 : case CharacterSequence . CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3 : continue ; case - _NUM : return ; default : if ( ! IonTokenConstsX . is7bitValue ( c ) ) { c = read_large_char_sequence ( c ) ; } } if ( IonUTF8 . needsSurrogateEncoding ( c ) ) { sb . append ( IonUTF8 . highSurrogate ( c ) ) ; c = IonUTF8 . lowSurrogate ( c ) ; } sb . append ( ( char ) c ) ; } }
public SignatureFakingOracle ( final String documentString ) throws SignatureFakingException { Security . addProvider ( new BouncyCastleProvider ( ) ) ; signatureValueElements = new LinkedList < Node > ( ) ; keyInfoElements = new LinkedList < Node > ( ) ; certificates = new LinkedList < String > ( ) ; certHandlers = new LinkedList < CertificateHandler > ( ) ; try { doc = DomUtilities . stringToDom ( documentString ) ; crawlSignatureElements ( ) ; log . debug ( _STR + signatureValueElements . size ( ) + _STR ) ; crawlKeyInfoElements ( ) ; log . debug ( _STR + keyInfoElements . size ( ) + _STR ) ; } catch ( SAXException e ) { throw new SignatureFakingException ( e ) ; } }
public ArbitraryLengthPathNode ( final TermNode left , final TermNode right , final VarNode tVarLeft , final VarNode tVarRight , final long lowerBound , final long upperBound ) { this ( new BOp [ ] { new JoinGroupNode ( ) } , NV . asMap ( new NV ( Annotations . LEFT_TERM , left ) , new NV ( Annotations . RIGHT_TERM , right ) , new NV ( Annotations . TRANSITIVITY_VAR_LEFT , tVarLeft ) , new NV ( Annotations . TRANSITIVITY_VAR_RIGHT , tVarRight ) , new NV ( Annotations . DROP_VARS , new ArrayList < VarNode > ( ) ) , new NV ( Annotations . LOWER_BOUND , lowerBound ) , new NV ( Annotations . UPPER_BOUND , upperBound ) ) ) ; final Set < VarNode > dropVars = new LinkedHashSet < > ( ) ; dropVars . add ( tVarLeft ) ; dropVars . add ( tVarRight ) ; setProperty ( Annotations . DROP_VARS , dropVars ) ; }
public void addChangingListener ( OnWheelChangedListener listener ) { changingListeners . add ( listener ) ; }
private Integer scanYamlDirectiveNumber ( Mark startMark ) { char ch = reader . peek ( ) ; if ( ! Character . isDigit ( ch ) ) { throw new ScannerException ( _STR , startMark , _STR + ch + _STR + ( ( int ) ch ) + _STR , reader . getMark ( ) ) ; } int length = _NUM ; while ( Character . isDigit ( reader . peek ( length ) ) ) { length ++ ; } Integer value = Integer . parseInt ( reader . prefixForward ( length ) ) ; return value ; }
public static final String toBitString ( int i [ ] ) { StringBuilder sb = new StringBuilder ( i . length ) ; for ( int b : i ) { sb . append ( b ) ; } return sb . toString ( ) ; }
public static ByteBuffer convertToSigned16BitSamples ( Buffer buffer ) { return convertToSigned16BitSamples ( buffer . getSamples ( ) ) ; }
boolean checkToken ( ByteWrapper token , Key nodeId , InetAddress ip , int port , Key lookupKey ) { updateTokenTimestamps ( ) ; boolean valid = checkToken ( token , nodeId , ip , port , lookupKey , timestampCurrent . get ( ) ) || checkToken ( token , nodeId , ip , port , lookupKey , timestampPrevious ) ; if ( ! valid ) DHT . logDebug ( _STR + ip . getHostAddress ( ) ) ; return valid ; }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( _STR ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
public void expandAll ( ) { cancelEditing ( ) ; final TreeModel tm = getModel ( ) ; final Object root = tm . getRoot ( ) ; if ( root != null ) { expandAllPaths ( new TreePath ( root ) , tm ) ; } }
protected void describeVocabularies ( final IVCount [ ] predicatePartitionCounts ) { final Set < String > namespaces = new LinkedHashSet < String > ( ) ; { for ( IVCount tmp : predicatePartitionCounts ) { final URI p = ( URI ) tmp . getValue ( ) ; String namespace = p . getNamespace ( ) ; if ( namespace . endsWith ( _STR ) ) { namespace = namespace . substring ( _NUM , namespace . length ( ) - _NUM ) ; } namespaces . add ( namespace ) ; } } final String [ ] a = namespaces . toArray ( new String [ namespaces . size ( ) ] ) ; Arrays . sort ( a ) ; for ( String namespace : a ) { g . add ( aDataset , VoidVocabularyDecl . vocabulary , f . createURI ( namespace ) ) ; } }
public void testInvokeAny4 ( ) throws Throwable { CountDownLatch latch = new CountDownLatch ( _NUM ) ; ExecutorService e = new ForkJoinPool ( _NUM ) ; PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; List < Callable < String > > l = new ArrayList < Callable < String > > ( ) ; l . add ( latchAwaitingStringTask ( latch ) ) ; l . add ( null ) ; try { e . invokeAny ( l ) ; shouldThrow ( ) ; } catch ( NullPointerException success ) { } latch . countDown ( ) ; } finally { if ( cleaner != null ) { cleaner . close ( ) ; } } }
private static void solve_l2r_l1l2_svr ( Problem prob , double [ ] w , Parameter param ) { int l = prob . l ; double C = param . C ; double p = param . p ; int w_size = prob . n ; double eps = param . eps ; int i , s , iter = _NUM ; int max_iter = _NUM ; int active_size = l ; int [ ] index = new int [ l ] ; double d , G , H ; double Gmax_old = Double . POSITIVE_INFINITY ; double Gmax_new , Gnorm1_new ; double Gnorm1_init = _NUM ; double [ ] beta = new double [ l ] ; double [ ] QD = new double [ l ] ; double [ ] y = prob . y ; double [ ] lambda = new double [ ] { _NUM / C } ; double [ ] upper_bound = new double [ ] { Double . POSITIVE_INFINITY } ; if ( param . solverType == SolverType . L2R_L1LOSS_SVR_DUAL ) { lambda [ _NUM ] = _NUM ; upper_bound [ _NUM ] = C ; } for ( i = _NUM ; i < l ; i ++ ) { beta [ i ] = _NUM ; } for ( i = _NUM ; i < w_size ; i ++ ) { w [ i ] = _NUM ; } for ( i = _NUM ; i < l ; i ++ ) { QD [ i ] = _NUM ; for ( Feature xi : prob . x [ i ] ) { double val = xi . getValue ( ) ; QD [ i ] += val * val ; w [ xi . getIndex ( ) - _NUM ] += beta [ i ] * val ; } index [ i ] = i ; } while ( iter < max_iter ) { Gmax_new = _NUM ; Gnorm1_new = _NUM ; for ( i = _NUM ; i < active_size ; i ++ ) { int j = i + random . nextInt ( active_size - i ) ; swap ( index , i , j ) ; } for ( s = _NUM ; s < active_size ; s ++ ) { i = index [ s ] ; G = - y [ i ] + lambda [ GETI_SVR ( i ) ] * beta [ i ] ; H = QD [ i ] + lambda [ GETI_SVR ( i ) ] ; for ( Feature xi : prob . x [ i ] ) { int ind = xi . getIndex ( ) - _NUM ; double val = xi . getValue ( ) ; G += val * w [ ind ] ; } double Gp = G + p ; double Gn = G - p ; double violation = _NUM ; if ( beta [ i ] == _NUM ) { if ( Gp < _NUM ) { violation = - Gp ; } else if ( Gn > _NUM ) { violation = Gn ; } else if ( Gp > Gmax_old && Gn < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] >= upper_bound [ GETI_SVR ( i ) ] ) { if ( Gp > _NUM ) { violation = Gp ; } else if ( Gp < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] <= - upper_bound [ GETI_SVR ( i ) ] ) { if ( Gn < _NUM ) { violation = - Gn ; } else if ( Gn > Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] > _NUM ) { violation = Math . abs ( Gp ) ; } else { violation = Math . abs ( Gn ) ; } Gmax_new = Math . max ( Gmax_new , violation ) ; Gnorm1_new += violation ; if ( Gp < H * beta [ i ] ) { d = - Gp / H ; } else if ( Gn > H * beta [ i ] ) { d = - Gn / H ; } else { d = - beta [ i ] ; } if ( Math . abs ( d ) < _NUM ) { continue ; } double beta_old = beta [ i ] ; beta [ i ] = Math . min ( Math . max ( beta [ i ] + d , - upper_bound [ GETI_SVR ( i ) ] ) , upper_bound [ GETI_SVR ( i ) ] ) ; d = beta [ i ] - beta_old ; if ( d != _NUM ) { for ( Feature xi : prob . x [ i ] ) { w [ xi . getIndex ( ) - _NUM ] += d * xi . getValue ( ) ; } } } if ( iter == _NUM ) { Gnorm1_init = Gnorm1_new ; } iter ++ ; if ( iter % _NUM == _NUM ) { info ( _STR ) ; } if ( Gnorm1_new <= eps * Gnorm1_init ) { if ( active_size == l ) { break ; } else { active_size = l ; info ( _STR ) ; Gmax_old = Double . POSITIVE_INFINITY ; continue ; } } Gmax_old = Gmax_new ; } info ( _STR , iter ) ; if ( iter >= max_iter ) { info ( _STR ) ; } double v = _NUM ; int nSV = _NUM ; for ( i = _NUM ; i < w_size ; i ++ ) { v += w [ i ] * w [ i ] ; } v = _NUM * v ; for ( i = _NUM ; i < l ; i ++ ) { v += p * Math . abs ( beta [ i ] ) - y [ i ] * beta [ i ] + _NUM * lambda [ GETI_SVR ( i ) ] * beta [ i ] * beta [ i ] ; if ( beta [ i ] != _NUM ) { nSV ++ ; } } info ( _STR , v ) ; info ( _STR , nSV ) ; }
public SignalGroupSubTableAction ( String s ) { }
public static List < String > generateXVals ( int from , int to ) { List < String > xvals = new ArrayList < String > ( ) ; for ( int i = from ; i < to ; i ++ ) { xvals . add ( _STR + i ) ; } return xvals ; }
public void testCompareToDiffSigns1 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = - _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; assertEquals ( _NUM , aNumber . compareTo ( bNumber ) ) ; }
private HashMap addAttr ( SvcReg reg , EntryClass eclass , int fldidx , Object value ) { HashMap [ ] attrMaps = serviceByAttr . get ( eclass ) ; if ( attrMaps == null ) { attrMaps = new HashMap [ eclass . getNumFields ( ) ] ; serviceByAttr . put ( eclass , attrMaps ) ; } HashMap map = attrMaps [ fldidx ] ; if ( map == null ) { map = new HashMap ( _NUM ) ; attrMaps [ fldidx ] = map ; } ArrayList regs = ( ArrayList ) map . get ( value ) ; if ( regs == null ) { regs = new ArrayList ( _NUM ) ; map . put ( value , regs ) ; } else if ( regs . contains ( reg ) ) return map ; regs . add ( reg ) ; return map ; }
public QueryStringDecoderUtil ( URI uri ) { this ( uri , Charset . defaultCharset ( ) ) ; }
public static float [ ] cmykFromRgb ( int rgbColor ) { int red = ( _NUM & rgbColor ) > > _NUM ; int green = ( _NUM & rgbColor ) > > _NUM ; int blue = ( _NUM & rgbColor ) ; float black = Math . min ( _NUM - red / _NUM , Math . min ( _NUM - green / _NUM , _NUM - blue / _NUM ) ) ; float cyan = _NUM ; float magenta = _NUM ; float yellow = _NUM ; if ( black != _NUM ) { cyan = ( _NUM - ( red / _NUM ) - black ) / ( _NUM - black ) ; magenta = ( _NUM - ( green / _NUM ) - black ) / ( _NUM - black ) ; yellow = ( _NUM - ( blue / _NUM ) - black ) / ( _NUM - black ) ; } return new float [ ] { cyan , magenta , yellow , black } ; }
public void removeSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { return ; } mListeners . remove ( listener ) ; }
public static void showErrorMessage ( String msg ) { showErrorMessage ( msg , _NUM ) ; }
public final static NameValuePair parseNameValuePair ( final String value , HeaderValueParser parser ) throws ParseException { if ( value == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( parser == null ) parser = BasicHeaderValueParser . DEFAULT ; CharArrayBuffer buffer = new CharArrayBuffer ( value . length ( ) ) ; buffer . append ( value ) ; ParserCursor cursor = new ParserCursor ( _NUM , value . length ( ) ) ; return parser . parseNameValuePair ( buffer , cursor ) ; }
public static String stripCharsInBag ( String s , String bag ) { int i ; StringBuilder stringBuilder = new StringBuilder ( _STR ) ; for ( i = _NUM ; i < s . length ( ) ; i ++ ) { char c = s . charAt ( i ) ; if ( bag . indexOf ( c ) == - _NUM ) stringBuilder . append ( c ) ; } return stringBuilder . toString ( ) ; }
public static double cos ( double radians ) { return Math . cos ( radians ) ; }
public static String formatNumber ( float number , int digitCount , boolean separateThousands ) { char [ ] out = new char [ _NUM ] ; boolean neg = _BOOL ; if ( number == _NUM ) { return _STR ; } boolean zero = _BOOL ; if ( number < _NUM && number > - _NUM ) { zero = _BOOL ; } if ( number < _NUM ) { neg = _BOOL ; number = - number ; } if ( digitCount > POW_10 . length ) { digitCount = POW_10 . length - _NUM ; } number *= POW_10 [ digitCount ] ; long lval = Math . round ( number ) ; int ind = out . length - _NUM ; int charCount = _NUM ; boolean decimalPointAdded = _BOOL ; while ( lval != _NUM || charCount < ( digitCount + _NUM ) ) { int digit = ( int ) ( lval % _NUM ) ; lval = lval / _NUM ; out [ ind -- ] = ( char ) ( digit + _STR ) ; charCount ++ ; if ( charCount == digitCount ) { out [ ind -- ] = _STR ; charCount ++ ; decimalPointAdded = _BOOL ; } else if ( separateThousands && lval != _NUM && charCount > digitCount ) { if ( decimalPointAdded ) { if ( ( charCount - digitCount ) % _NUM == _NUM ) { out [ ind -- ] = _STR ; charCount ++ ; } } else { if ( ( charCount - digitCount ) % _NUM == _NUM ) { out [ ind -- ] = _STR ; charCount ++ ; } } } } if ( zero ) { out [ ind -- ] = _STR ; charCount += _NUM ; } if ( neg ) { out [ ind -- ] = _STR ; charCount += _NUM ; } int start = out . length - charCount ; return String . valueOf ( out , start , out . length - start ) ; }
@ Override protected void onDestroy ( ) { super . onDestroy ( ) ; doReallyStop ( _BOOL ) ; mFragments . dispatchDestroy ( ) ; if ( mLoaderManager != null ) { mLoaderManager . doDestroy ( ) ; } }
public void removeVetoableChangeListener ( String propertyName , VetoableChangeListener in_vcl ) { beanContextChildSupport . removeVetoableChangeListener ( propertyName , in_vcl ) ; }
static public boolean doesFileExist ( Context c , String fileName , long fileSize , boolean deleteFileOnMismatch ) { File fileForNewFile = new File ( Helpers . generateSaveFileName ( c , fileName ) ) ; if ( fileForNewFile . exists ( ) ) { if ( fileForNewFile . length ( ) == fileSize ) { return _BOOL ; } if ( deleteFileOnMismatch ) { fileForNewFile . delete ( ) ; } } return _BOOL ; }
static WindowsFileAttributes fromFindData ( long address ) { int fileAttrs = unsafe . getInt ( address + OFFSETOF_FIND_DATA_ATTRIBUTES ) ; long creationTime = unsafe . getLong ( address + OFFSETOF_FIND_DATA_CREATETIME ) ; long lastAccessTime = unsafe . getLong ( address + OFFSETOF_FIND_DATA_LASTACCESSTIME ) ; long lastWriteTime = unsafe . getLong ( address + OFFSETOF_FIND_DATA_LASTWRITETIME ) ; long size = ( ( long ) ( unsafe . getInt ( address + OFFSETOF_FIND_DATA_SIZEHIGH ) ) << _NUM ) + ( unsafe . getInt ( address + OFFSETOF_FIND_DATA_SIZELOW ) & _NUM ) ; int reparseTag = isReparsePoint ( fileAttrs ) ? unsafe . getInt ( address + OFFSETOF_FIND_DATA_RESERVED0 ) : _NUM ; return new WindowsFileAttributes ( fileAttrs , creationTime , lastAccessTime , lastWriteTime , size , reparseTag , _NUM , _NUM , _NUM ) ; }
public static final void writeMapXml ( Map val , XmlSerializer out , WriteMapCallback callback ) throws XmlPullParserException , IOException { if ( val == null ) { return ; } Set s = val . entrySet ( ) ; Iterator i = s . iterator ( ) ; while ( i . hasNext ( ) ) { Map . Entry e = ( Map . Entry ) i . next ( ) ; writeValueXml ( e . getValue ( ) , ( String ) e . getKey ( ) , out , callback ) ; } }
public void fireEventProgrammatically ( Event event ) { if ( ! event . isConsumed ( ) ) ripplerPane . fireEvent ( event ) ; }
private boolean hasFullEntry ( JsonValue entry , QuerySide querySide ) { if ( querySide == QuerySide . SOURCE && sourceQueryFullEntry != null ) { return sourceQueryFullEntry ; } else if ( querySide == QuerySide . TARGET && targetQueryFullEntry != null ) { return targetQueryFullEntry ; } if ( entry != null ) { short ignoreFields = _NUM ; if ( entry . isDefined ( _STR ) ) { ignoreFields ++ ; } if ( entry . isDefined ( _STR ) ) { ignoreFields ++ ; } ignoreFields += _NUM ; return entry . size ( ) > ignoreFields ; } else { return _BOOL ; } }
public static boolean isModule ( IResource resource ) { return ( resource != null && TLA_EXTENSION . equals ( resource . getFileExtension ( ) ) ) ; }
public int writeAnnotation ( Annotation annotation ) { int off = data . position ( ) ; writeByte ( annotation . visibility ) ; writeEncodedArray ( annotation . encodedAnnotation ) ; return off ; }
public static long fromInet4Address ( final InetAddress inetAddress ) { ensureIsInet4Address ( inetAddress ) ; return Integer . toUnsignedLong ( inetAddress . hashCode ( ) ) ; }
public boolean revisionContainsTemplateName ( int revId , String templateName ) throws WikiApiException { return revisionContainsTemplateNames ( revId , Arrays . asList ( new String [ ] { templateName } ) ) ; }
public List < GenericEntry > retrieveAllAccountInfoRequests ( Date fromDate ) throws AppsForYourDomainException , IOException , ServiceException { String url = BASE_URL + _STR + domain ; if ( fromDate != null ) { url += _STR + DATE_FORMAT . format ( fromDate ) ; } return getAllPages ( new URL ( url ) , GenericFeed . class ) ; }
protected void drawCylinder ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean isShadow ) { int h4 = h / _NUM ; int r = w - _NUM ; if ( fillColor != null || fillPaint != null ) { Area area = new Area ( new Rectangle ( x , y + h4 / _NUM , r , h - h4 ) ) ; area . add ( new Area ( new Rectangle ( x , y + h4 / _NUM , r , h - h4 ) ) ) ; area . add ( new Area ( new Ellipse2D . Double ( x , y , r , h4 ) ) ) ; area . add ( new Area ( new Ellipse2D . Double ( x , y + h - h4 , r , h4 ) ) ) ; if ( isShadow ) { g . setColor ( mxConstants . SHADOW_COLOR ) ; g . translate ( mxConstants . SHADOW_OFFSETX , mxConstants . SHADOW_OFFSETY ) ; g . fill ( area ) ; g . translate ( - mxConstants . SHADOW_OFFSETX , - mxConstants . SHADOW_OFFSETY ) ; } if ( fillPaint != null ) { g . setPaint ( fillPaint ) ; } else { g . setColor ( fillColor ) ; } g . fill ( area ) ; } if ( penColor != null ) { g . setColor ( penColor ) ; int h2 = h4 / _NUM ; g . drawOval ( x , y , r , h4 ) ; g . drawLine ( x , y + h2 , x , y + h - h2 ) ; g . drawLine ( x + w - _NUM , y + h2 , x + w - _NUM , y + h - h2 ) ; g . drawArc ( x , y + h - h4 , r , h4 , _NUM , - _NUM ) ; } }
public StringList plus ( String ... args ) { StringList newList = new StringList ( ) ; newList . addAll ( this ) ; newList . addAll ( Arrays . asList ( args ) ) ; return newList ; }
private void walkParseTree ( List < SwiftBaseListener > listeners , TopLevelContext tree ) { ParseTreeWalker walker = new ParseTreeWalker ( ) ; listeners . forEach ( null ) ; }
@ Override public final char readChar ( ) throws IOException { dis . readFully ( work , _NUM , _NUM ) ; return ( char ) ( ( work [ _NUM ] & _NUM ) << _NUM | ( work [ _NUM ] & _NUM ) ) ; }
public static int truncatedCompareTo ( final Date date1 , final Date date2 , final int field ) { final Date truncatedDate1 = truncate ( date1 , field ) ; final Date truncatedDate2 = truncate ( date2 , field ) ; return truncatedDate1 . compareTo ( truncatedDate2 ) ; }
protected List < DecompoundedWord > makeSplit ( String aWord ) { List < DecompoundedWord > result = new ArrayList < DecompoundedWord > ( ) ; for ( int i = _NUM ; i < aWord . length ( ) ; i ++ ) { String leftWord = aWord . substring ( _NUM , i + _NUM ) ; String rightWord = aWord . substring ( i + _NUM ) ; boolean leftGood = dict . contains ( leftWord ) && leftWord . length ( ) >= minWordLength ; boolean rightGood = rightWord . length ( ) > minRestLength || rightWord . length ( ) == _NUM ; if ( leftGood && rightGood ) { DecompoundedWord split = DecompoundedWord . createFromString ( leftWord + _STR + rightWord ) ; split . setSplitPos ( i ) ; result . add ( split ) ; } for ( String morpheme : morphemes . getAll ( ) ) { try { String leftWithoutMorpheme = leftWord . substring ( _NUM , leftWord . length ( ) - morpheme . length ( ) ) ; if ( leftWord . endsWith ( morpheme ) && dict . contains ( leftWithoutMorpheme ) && rightGood ) { DecompoundedWord split = DecompoundedWord . createFromString ( leftWithoutMorpheme + _STR + morpheme + _STR + rightWord ) ; split . setSplitPos ( i ) ; result . add ( split ) ; } } catch ( StringIndexOutOfBoundsException e ) { continue ; } } } return result ; }
public static boolean isBookSearchUrl ( String url ) { return url . startsWith ( _STR ) || url . startsWith ( _STR ) ; }
public static String classNamePath ( String className ) { String filename = className . replace ( _STR , File . separator ) ; filename = filename . replaceFirst ( _STR , _STR ) ; if ( filename . indexOf ( _STR ) > _NUM ) { filename = filename . substring ( _NUM , filename . indexOf ( _STR ) ) ; } return _STR + File . separator + filename + _STR ; }
public void removeTitlePrefix ( String prfx ) { titlePrefix . remove ( prfx ) ; firePropertyChange ( TITLE_PREFIX , null , titlePrefix ) ; }
public void send ( Set recipients , boolean multicast ) throws InterruptedException , ReplyException { final boolean isDebugEnabled = logger . isDebugEnabled ( ) ; if ( Thread . interrupted ( ) ) throw new InterruptedException ( ) ; recipients = new HashSet ( recipients ) ; DistributedMember me = originDm . getDistributionManagerId ( ) ; if ( recipients . contains ( me ) ) { recipients . remove ( me ) ; } if ( isDebugEnabled ) { logger . debug ( _STR , recipients ) ; } rp = new ReplyProcessor21 ( originDm , recipients ) ; processorId = rp . getProcessorId ( ) ; setRecipients ( recipients ) ; setMulticast ( multicast ) ; Set failures = originDm . putOutgoing ( this ) ; if ( failures != null && failures . size ( ) > _NUM ) { for ( Iterator i = failures . iterator ( ) ; i . hasNext ( ) ; ) { InternalDistributedMember mbr = ( InternalDistributedMember ) i . next ( ) ; if ( isDebugEnabled ) { logger . debug ( _STR , mbr ) ; } } } rp . waitForReplies ( ) ; }
private boolean isRelevant ( Object service , Entry [ ] attributes ) { LOOP : for ( Entry e : _serviceAttributes ) { for ( Entry en : attributes ) { if ( e . equals ( en ) ) continue LOOP ; } return _BOOL ; } boolean flag = _BOOL ; for ( Entry en : attributes ) { if ( _serviceName . equals ( en ) ) { flag = _BOOL ; break ; } } if ( ! flag ) return _BOOL ; flag = _BOOL ; for ( Class cl : _classes ) { if ( cl . isInstance ( service ) ) { flag = _BOOL ; break ; } } return flag ; }
private static boolean eq ( Object o1 , Object o2 ) { return o1 == null ? o2 == null : o1 . equals ( o2 ) ; }
public int findCarByRoadNumber ( String roadNumber ) { if ( sysList != null ) { if ( ! roadNumber . equals ( _roadNumber ) ) { return getIndex ( _NUM , roadNumber ) ; } int index = getIndex ( _index , roadNumber ) ; if ( index > _NUM ) { return index ; } return getIndex ( _NUM , roadNumber ) ; } return - _NUM ; }
@ SlashedClassName @ SuppressFBWarnings ( _STR ) public static String toSlashedClassName ( @ SlashedClassName ( when = When . UNKNOWN ) String className ) { if ( className . indexOf ( _STR ) >= _NUM ) { return DescriptorFactory . canonicalizeString ( className . replace ( _STR , _STR ) ) ; } return className ; }
public static double P_AveragePrecision ( int y [ ] , int r [ ] ) { double avg_prec = _NUM ; int L = y . length ; List < Integer > ones = new ArrayList < Integer > ( ) ; for ( int j = _NUM ; j < L ; j ++ ) { if ( y [ j ] == _NUM ) { ones . add ( j ) ; } } if ( ones . size ( ) <= _NUM ) return _NUM ; for ( int j : ones ) { double s = _NUM ; for ( int k : ones ) { if ( r [ k ] <= r [ j ] ) { s ++ ; } } avg_prec += ( s / ( _NUM + r [ j ] ) ) ; } avg_prec /= ones . size ( ) ; return avg_prec ; }
public Location newLocation ( String name ) { Location location = getLocationByName ( name ) ; if ( location == null ) { _id ++ ; location = new Location ( Integer . toString ( _id ) , name ) ; Integer oldSize = Integer . valueOf ( _locationHashTable . size ( ) ) ; _locationHashTable . put ( location . getId ( ) , location ) ; setDirtyAndFirePropertyChange ( LISTLENGTH_CHANGED_PROPERTY , oldSize , Integer . valueOf ( _locationHashTable . size ( ) ) ) ; } return location ; }
@ Override public void close ( ) { closing = _BOOL ; if ( reservations == null || reservations . compareAndSet ( _NUM , - _NUM ) ) doClose ( ) ; }
private void removeOMADownloadFromSharedPrefs ( long downloadId ) { Set < String > omaDownloads = getStoredDownloadInfo ( PENDING_OMA_DOWNLOADS ) ; for ( String omaDownload : omaDownloads ) { OMAEntry entry = OMAEntry . parseOMAEntry ( omaDownload ) ; if ( entry . mDownloadId == downloadId ) { omaDownloads . remove ( omaDownload ) ; storeDownloadInfo ( PENDING_OMA_DOWNLOADS , omaDownloads ) ; return ; } } }
public static boolean isAndroidSdkDirInLocalPropertiesFile ( @ NotNull File projectDir ) { String androidHome = getAndroidHomeFromLocalPropertiesFile ( projectDir ) ; if ( ! Strings . isNullOrEmpty ( androidHome ) ) { String msg = String . format ( _STR , androidHome ) ; LOG . info ( msg ) ; return _BOOL ; } return _BOOL ; }
public static boolean hasTokenInformation ( Bundle bundle ) { if ( bundle == null ) { return _BOOL ; } String token = bundle . getString ( TOKEN_KEY ) ; if ( ( token == null ) || ( token . length ( ) == _NUM ) ) { return _BOOL ; } long expiresMilliseconds = bundle . getLong ( EXPIRATION_DATE_KEY , _NUM ) ; if ( expiresMilliseconds == _NUM ) { return _BOOL ; } return _BOOL ; }
public void resetPolicy ( ) { mPreferences . putString ( PREF_LAST_RESPONSE , Integer . toString ( Policy . RETRY ) ) ; setRetryUntil ( DEFAULT_RETRY_UNTIL ) ; setMaxRetries ( DEFAULT_MAX_RETRIES ) ; setRetryCount ( Long . parseLong ( DEFAULT_RETRY_COUNT ) ) ; setValidityTimestamp ( DEFAULT_VALIDITY_TIMESTAMP ) ; mPreferences . commit ( ) ; }
@ Override public boolean connectionAllowed ( String eventName ) { if ( eventName . equals ( _STR ) && m_listenees . containsKey ( eventName ) ) { return _BOOL ; } return _BOOL ; }
public static Vector2 pow ( Vector2 o , double power ) { return new Vector2 ( Math . pow ( o . x , power ) , Math . pow ( o . z , power ) ) ; }
public static Object invokeStatic ( String clazz , String methodName , Class [ ] types , Object [ ] values ) throws NoSuchMethodException { try { return invokeStatic ( Class . forName ( clazz ) , methodName , types , values ) ; } catch ( ClassNotFoundException e ) { throw new NoSuchMethodException ( _STR + clazz + _STR ) ; } }
public Prototype undump ( InputStream stream , String chunkname ) throws IOException { if ( stream . read ( ) != LUA_SIGNATURE [ _NUM ] || stream . read ( ) != LUA_SIGNATURE [ _NUM ] || stream . read ( ) != LUA_SIGNATURE [ _NUM ] || stream . read ( ) != LUA_SIGNATURE [ _NUM ] ) return null ; String sname = getSourceName ( chunkname ) ; LoadState s = new LoadState ( stream , sname ) ; s . loadHeader ( ) ; switch ( s . luacNumberFormat ) { case NUMBER_FORMAT_FLOATS_OR_DOUBLES : case NUMBER_FORMAT_INTS_ONLY : case NUMBER_FORMAT_NUM_PATCH_INT32 : break ; default : throw new LuaError ( _STR ) ; } return s . loadFunction ( LuaString . valueOf ( sname ) ) ; }
public void addButton ( URL url , String info , ActionListener al ) { JButton b = new JButton ( new ImageIcon ( url , info ) ) ; b . setToolTipText ( info ) ; b . setMargin ( new Insets ( _NUM , _NUM , _NUM , _NUM ) ) ; b . addActionListener ( al ) ; b . setBorderPainted ( _BOOL ) ; add ( b ) ; }
private void mapRequestToResponses ( Matcher < Request > requestMatcher , ResponseSource responses ) { mappings . add ( new MatcherResponseSourcePair ( requestMatcher , responses ) ) ; }
@ Override protected void commitToInput ( ) { JmxBeanSensorAssignment assignment = getInput ( ) ; if ( null != assignment ) { assignment . setDomain ( domainText . getText ( ) ) ; assignment . setObjectNameParameters ( new HashMap < > ( parametersMap ) ) ; if ( allAttributesButton . getSelection ( ) ) { assignment . setAttributes ( Collections . < String > emptySet ( ) ) ; } else { assignment . setAttributes ( new HashSet < > ( attributesSet ) ) ; } } }
public static String [ ] split ( String original , String separator ) { Vector nodes = new Vector ( ) ; int index = original . indexOf ( separator ) ; while ( index >= _NUM ) { nodes . addElement ( original . substring ( _NUM , index ) ) ; original = original . substring ( index + separator . length ( ) ) ; index = original . indexOf ( separator ) ; } nodes . addElement ( original ) ; String [ ] ret = new String [ nodes . size ( ) ] ; for ( int i = _NUM ; i < nodes . size ( ) ; i ++ ) { ret [ i ] = ( String ) nodes . elementAt ( i ) ; } return ret ; }
public void insertTwin ( Instruction inst , Instruction twin ) { ListIterator < GCIRMapElement > iter = list . listIterator ( ) ; while ( iter . hasNext ( ) ) { GCIRMapElement newPtr = iter . next ( ) ; if ( newPtr . getInstruction ( ) == inst ) { iter . add ( newPtr . createTwin ( twin ) ) ; return ; } } throw new OptimizingCompilerException ( _STR + inst + _STR ) ; }
public java . lang . Object newInstance ( ) throws java . lang . InstantiationException , java . lang . IllegalAccessException { Object o = newInstanceImpl ( ) ; if ( o == null ) { throw new InstantiationException ( ) ; } return o ; }
FormatSpecifierParser ( String format ) { this . format = format ; this . length = format . length ( ) ; }
public static void toString ( Iterator < ? > iter , String separator , StringBuilder sb ) { while ( iter . hasNext ( ) ) { sb . append ( iter . next ( ) ) ; if ( iter . hasNext ( ) ) { sb . append ( separator ) ; } } }
public boolean isFull ( ) { if ( maxSize > _NUM && notifications . size ( ) >= maxSize ) { return _BOOL ; } return _BOOL ; }
private void schedulePlaylistSave ( ) { if ( ! mPlaylistLoading ) { if ( mPlaylistSavePending . compareAndSet ( _BOOL , _BOOL ) ) { mThreadPoolManager . scheduleOnce ( new PlaylistSaveTask ( ) , _NUM , TimeUnit . SECONDS ) ; } } }
public boolean isToRead ( ) { Iterator < VariableValue > i = variables . iterator ( ) ; while ( i . hasNext ( ) ) { VariableValue v = i . next ( ) ; if ( v . isToRead ( ) ) { return _BOOL ; } } return _BOOL ; }
public void actionPerformed ( ActionEvent e ) { navigateToPriorDemo ( ) ; }
public String toString ( ) { StringBuffer text = new StringBuffer ( ) ; for ( int i = _NUM ; i < m_Elements . length ; i ++ ) { if ( i > _NUM ) text . append ( _STR ) ; text . append ( Utils . doubleToString ( m_Elements [ i ] , _NUM ) ) ; } text . append ( _STR ) ; return text . toString ( ) ; }
@ Deprecated public static Integer Integer ( int i ) { return Integer . valueOf ( i ) ; }
public void or ( Criteria criteria ) { oredCriteria . add ( criteria ) ; }
public static void v ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . v ( tag , msg ) ; }
public void saveIndexes ( ) { ArrayList toSave = new ArrayList ( ) ; synchronized ( this ) { Object [ ] valueTable = this . indexes . valueTable ; for ( int i = _NUM , l = valueTable . length ; i < l ; i ++ ) { Index index = ( Index ) valueTable [ i ] ; if ( index != null ) toSave . add ( index ) ; } } boolean allSaved = _BOOL ; for ( int i = _NUM , length = toSave . size ( ) ; i < length ; i ++ ) { Index index = ( Index ) toSave . get ( i ) ; ReadWriteMonitor monitor = index . monitor ; if ( monitor == null ) continue ; try { monitor . enterRead ( ) ; if ( index . hasChanged ( ) ) { if ( monitor . exitReadEnterWrite ( ) ) { try { saveIndex ( index ) ; } catch ( IOException e ) { if ( VERBOSE ) { Util . verbose ( _STR , System . err ) ; e . printStackTrace ( ) ; } allSaved = _BOOL ; } finally { monitor . exitWriteEnterRead ( ) ; } } else { allSaved = _BOOL ; } } } finally { monitor . exitRead ( ) ; } } if ( this . participantsContainers != null && this . participantUpdated ) { writeParticipantsIndexNamesFile ( ) ; this . participantUpdated = _BOOL ; } this . needToSave = ! allSaved ; }
private double match_bitapScore ( int e , int x , int loc , String pattern ) { float accuracy = ( float ) e / pattern . length ( ) ; int proximity = Math . abs ( loc - x ) ; if ( Match_Distance == _NUM ) { return proximity == _NUM ? accuracy : _NUM ; } return accuracy + ( proximity / ( float ) Match_Distance ) ; }
private void movePos ( float deltaY ) { if ( ( deltaY < _NUM && mPtrIndicator . isInStartPosition ( ) ) ) { if ( DEBUG ) { PtrCLog . e ( LOG_TAG , String . format ( _STR ) ) ; } return ; } int to = mPtrIndicator . getCurrentPosY ( ) + ( int ) deltaY ; if ( mPtrIndicator . willOverTop ( to ) ) { if ( DEBUG ) { PtrCLog . e ( LOG_TAG , String . format ( _STR ) ) ; } to = PtrIndicator . POS_START ; } mPtrIndicator . setCurrentPos ( to ) ; int change = to - mPtrIndicator . getLastPosY ( ) ; updatePos ( change ) ; }
public void putAll ( Map < ? extends K , ? extends V > m ) { tryPresize ( m . size ( ) ) ; for ( Map . Entry < ? extends K , ? extends V > e : m . entrySet ( ) ) putVal ( e . getKey ( ) , e . getValue ( ) , _BOOL ) ; }
public UndoableEdit insertString ( int where , String str ) throws BadLocationException { if ( where >= count || where < _NUM ) { throw new BadLocationException ( _STR , count ) ; } char [ ] chars = str . toCharArray ( ) ; replace ( where , _NUM , chars , _NUM , chars . length ) ; if ( marks != null ) { updateMarksForInsert ( where , str . length ( ) ) ; } return new InsertUndo ( where , str . length ( ) ) ; }
public String toString ( ) { return Byte . toString ( getValue ( ) ) ; }
boolean writeData ( ) throws IOException { int tosend ; int sent ; byte [ ] block = new byte [ kBlockSize ] ; do { tosend = Math . min ( sendStreamSize - totalSent , block . length ) ; System . arraycopy ( sendData , totalSent , block , _NUM , tosend ) ; if ( tosend > _NUM ) { sent = localSend ( block , tosend ) ; updateLocalClock ( ) ; if ( sent != - _NUM ) { totalSent += sent ; } else { logger . log ( Level . FINE , _STR ) ; } } else { sent = tosend = _NUM ; } } while ( sent > _NUM ) ; if ( logger . isLoggable ( Level . FINER ) ) { logger . log ( Level . FINER , _STR + totalSent + _STR + ( sendStreamSize - totalSent ) ) ; } return tosend == _NUM ; }
public static int copyAndCloseOutput ( Reader input , Writer output ) throws IOException { try { return copy ( input , output ) ; } finally { output . close ( ) ; } }
public int checkBookiesUp ( int count , int timeout ) throws Exception { ZooKeeper zkc = connectZooKeeper ( zkHost , zkPort , zkTimeoutSec ) ; try { int mostRecentSize = _NUM ; for ( int i = _NUM ; i < timeout ; i ++ ) { try { List < String > children = zkc . getChildren ( _STR , _BOOL ) ; children . remove ( _STR ) ; mostRecentSize = children . size ( ) ; if ( ( mostRecentSize > count ) || LOG . isDebugEnabled ( ) ) { LOG . info ( _STR + mostRecentSize + _STR + _STR + count ) ; if ( ( mostRecentSize > count ) || LOG . isTraceEnabled ( ) ) { for ( String child : children ) { LOG . info ( _STR + child ) ; } } } if ( mostRecentSize == count ) { break ; } } catch ( KeeperException e ) { } Thread . sleep ( _NUM ) ; } return mostRecentSize ; } finally { zkc . close ( ) ; } }
public Point2D inverseTransform ( Point2D src , Point2D dst ) { try { src . setLocation ( src . getX ( ) + rotXOffset , src . getY ( ) + rotYOffset ) ; dst = rotTransform . inverseTransform ( src , dst ) ; } catch ( NoninvertibleTransformException e ) { logger . log ( Level . FINE , e . getMessage ( ) , e ) ; } return dst ; }
public static Throwable shouldFail ( Class clazz , Closure code ) { Throwable th = null ; try { code . call ( ) ; } catch ( GroovyRuntimeException gre ) { th = ScriptBytecodeAdapter . unwrap ( gre ) ; } catch ( Throwable e ) { th = e ; } if ( th == null ) { fail ( _STR + code + _STR + clazz . getName ( ) ) ; } else if ( ! clazz . isInstance ( th ) ) { fail ( _STR + code + _STR + clazz . getName ( ) + _STR + th ) ; } return th ; }
public int write ( byte [ ] destMac , byte [ ] packet , int offset , int byteCount ) { if ( destMac == null ) { throw new NullPointerException ( _STR ) ; } if ( packet == null ) { throw new NullPointerException ( _STR ) ; } Arrays . checkOffsetAndCount ( packet . length , offset , byteCount ) ; if ( destMac . length != _NUM ) { throw new IllegalArgumentException ( _STR + destMac . length ) ; } return sendPacket ( fd , mInterfaceName , mProtocolType , destMac , packet , offset , byteCount ) ; }
private Boolean processYESNO ( StylesheetHandler handler , String uri , String name , String rawName , String value ) throws org . xml . sax . SAXException { if ( ! ( value . equals ( _STR ) || value . equals ( _STR ) ) ) { handleError ( handler , XSLTErrorResources . INVALID_BOOLEAN , new Object [ ] { name , value } , null ) ; return null ; } return new Boolean ( value . equals ( _STR ) ? _BOOL : _BOOL ) ; }
protected ArrayList < KeyNamePair > loadRMAData ( int C_BPartner_ID ) { ArrayList < KeyNamePair > list = new ArrayList < KeyNamePair > ( ) ; String sqlStmt = _STR + _STR + _STR + _STR + _STR ; PreparedStatement pstmt = null ; try { pstmt = DB . prepareStatement ( sqlStmt , null ) ; pstmt . setInt ( _NUM , C_BPartner_ID ) ; ResultSet rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { list . add ( new KeyNamePair ( rs . getInt ( _NUM ) , rs . getString ( _NUM ) ) ) ; } rs . close ( ) ; } catch ( SQLException e ) { log . log ( Level . SEVERE , sqlStmt . toString ( ) , e ) ; } finally { if ( pstmt != null ) { try { pstmt . close ( ) ; } catch ( Exception ex ) { log . severe ( _STR ) ; } } } return list ; }
@ Override public List < WorkOrder > searchWOForBilling ( final Map < String , Object > criteriaMap ) { logger . debug ( _STR ) ; final List < WorkOrder > filteredList = new ArrayList < WorkOrder > ( ) ; criteriaMap . put ( ACTION_FLAG , _STR ) ; for ( final WorkOrder workorder : searchWO ( criteriaMap ) ) if ( ! isWOValidforBill ( workorder . getId ( ) ) ) filteredList . add ( workorder ) ; return filteredList ; }
public Week ( Date time , TimeZone zone , Locale locale ) { ParamChecks . nullNotPermitted ( time , _STR ) ; ParamChecks . nullNotPermitted ( zone , _STR ) ; ParamChecks . nullNotPermitted ( locale , _STR ) ; Calendar calendar = Calendar . getInstance ( zone , locale ) ; calendar . setTime ( time ) ; int tempWeek = calendar . get ( Calendar . WEEK_OF_YEAR ) ; if ( tempWeek == _NUM && calendar . get ( Calendar . MONTH ) == Calendar . DECEMBER ) { this . week = _NUM ; this . year = ( short ) ( calendar . get ( Calendar . YEAR ) + _NUM ) ; } else { this . week = ( byte ) Math . min ( tempWeek , LAST_WEEK_IN_YEAR ) ; int yyyy = calendar . get ( Calendar . YEAR ) ; if ( calendar . get ( Calendar . MONTH ) == Calendar . JANUARY && this . week >= _NUM ) { yyyy -- ; } this . year = ( short ) yyyy ; } peg ( calendar ) ; }
public ResourceQueue ( final NonBlockingLockManagerWithNewDesign < R > lockService , final R resource ) { if ( lockService == null ) throw new IllegalArgumentException ( ) ; if ( resource == null ) throw new IllegalArgumentException ( ) ; this . lockService = lockService ; this . resource = resource ; this . queue = new LinkedBlockingQueue < T > ( ) ; this . statisticsTask = new QueueSizeMovingAverageTask ( resource . toString ( ) , queue ) ; }
public void encodeAndSign ( X500Name subject , Signature signature ) throws CertificateException , IOException , SignatureException { DerOutputStream out , scratch ; byte [ ] certificateRequestInfo ; byte [ ] sig ; if ( encoded != null ) throw new SignatureException ( _STR ) ; this . subject = subject ; scratch = new DerOutputStream ( ) ; scratch . putInteger ( BigInteger . ZERO ) ; subject . encode ( scratch ) ; scratch . write ( subjectPublicKeyInfo . getEncoded ( ) ) ; attributeSet . encode ( scratch ) ; out = new DerOutputStream ( ) ; out . write ( DerValue . tag_Sequence , scratch ) ; certificateRequestInfo = out . toByteArray ( ) ; scratch = out ; signature . update ( certificateRequestInfo , _NUM , certificateRequestInfo . length ) ; sig = signature . sign ( ) ; AlgorithmId algId = null ; try { algId = AlgorithmId . get ( signature . getAlgorithm ( ) ) ; } catch ( NoSuchAlgorithmException nsae ) { throw new SignatureException ( nsae ) ; } algId . encode ( scratch ) ; scratch . putBitString ( sig ) ; out = new DerOutputStream ( ) ; out . write ( DerValue . tag_Sequence , scratch ) ; encoded = out . toByteArray ( ) ; }
public synchronized void schedulePeriodicTask ( TimerTask task , long period ) { try { m_timer . scheduleAtFixedRate ( task , _NUM , period ) ; } catch ( IllegalStateException ie ) { m_timer = new Timer ( ) ; m_timer . scheduleAtFixedRate ( task , _NUM , period ) ; } }
public static String abbreviate ( String str , FontMetrics fm , int width ) { int lastblank = _NUM , nchars = _NUM , cumx = _NUM ; while ( cumx < width && nchars < str . length ( ) ) { if ( Character . isWhitespace ( str . charAt ( nchars ) ) ) { lastblank = nchars ; } cumx += fm . charWidth ( str . charAt ( nchars ) ) ; nchars ++ ; } if ( nchars < str . length ( ) && lastblank > _NUM ) { nchars = lastblank ; } return ( nchars > _NUM ? str . substring ( _NUM , nchars ) : str ) ; }
protected void stopWraparoundTest ( ) { if ( testRunning && wrapTest ) { wrapTimer . stop ( ) ; statusText1 . setText ( _STR + Integer . toString ( numErrors ) + _STR ) ; statusText1 . setVisible ( _BOOL ) ; statusText2 . setText ( Integer . toString ( numIterations ) + _STR ) ; statusText2 . setVisible ( _BOOL ) ; } }
protected void checkRowIndex ( final int row ) throws MathIllegalArgumentException { if ( row < _NUM || row >= getRowDimension ( ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . ROW_INDEX , row , _NUM , getRowDimension ( ) - _NUM ) ; } }
private void nukeSymbols ( ) { _count = _NUM ; _longestCollisionList = _NUM ; Arrays . fill ( _mainHash , _NUM ) ; Arrays . fill ( _mainNames , null ) ; Arrays . fill ( _collList , null ) ; _collCount = _NUM ; _collEnd = _NUM ; }
private static float determineEnemyBlitzStrength ( final Territory blitzHere , final List < Route > blitzTerrRoutes , final List < Territory > blockTerr , final GameData data , final PlayerID ePlayer ) { final HashSet < Integer > ignore = new HashSet < > ( ) ; ignore . add ( _NUM ) ; final CompositeMatch < Unit > blitzUnit = new CompositeMatchAnd < > ( Matches . unitIsOwnedBy ( ePlayer ) , Matches . UnitCanBlitz , Matches . UnitCanMove ) ; final CompositeMatch < Territory > validBlitzRoute = new CompositeMatchAnd < > ( Matches . territoryHasNoEnemyUnits ( ePlayer , data ) , Matches . TerritoryIsNotImpassableToLandUnits ( ePlayer , data ) ) ; final List < Route > routes = new ArrayList < > ( ) ; final List < Unit > blitzUnits = findAttackers ( blitzHere , _NUM , ignore , ePlayer , data , blitzUnit , validBlitzRoute , blockTerr , routes , _BOOL ) ; for ( final Route r : routes ) { if ( r . numberOfSteps ( ) == _NUM ) { blitzTerrRoutes . add ( r ) ; } } return strength ( blitzUnits , _BOOL , _BOOL , _BOOL ) ; }
public Name join ( String identifier ) { validateLowerUnderscore ( identifier ) ; List < NamePiece > newPieceList = new ArrayList < > ( ) ; newPieceList . addAll ( namePieces ) ; newPieceList . add ( new NamePiece ( identifier , CaseFormat . LOWER_UNDERSCORE ) ) ; return new Name ( newPieceList ) ; }
private LocalDateTime parseDate ( String dateStr , boolean tryAgain ) { LocalDateTime date = LocalDateTime . now ( ZoneId . of ( _STR ) ) ; if ( mDateTimeFormatter == null ) { initFormatter ( dateStr ) ; } if ( mDateTimeFormatter != null ) { try { date = LocalDateTime . parse ( dateStr , mDateTimeFormatter ) ; } catch ( DateTimeParseException e ) { Timber . d ( String . format ( _STR , dateStr ) ) ; if ( tryAgain ) { Timber . d ( _STR ) ; mDateTimeFormatter = null ; parseDate ( dateStr , _BOOL ) ; } } } return date ; }
public String toString ( ) { String string = caller ; if ( level > _NUM || thread != - _NUM ) { string += _STR ; } if ( level > _NUM ) { string += level ; } if ( thread != - _NUM ) { string += _STR + thread ; } if ( level > _NUM || thread != - _NUM ) { string += _STR ; } string += _STR ; if ( spawnMessage ) { string += _STR ; } if ( answer . length ( ) > _NUM ) { string += answer + _STR ; } if ( callee . length ( ) > _NUM ) { string += callee + _STR ; } string += message ; if ( returnsInstantly ) { string += _STR ; } return string ; }
public static boolean isWhiteSpace ( int c ) { switch ( c ) { case NUL_CHAR : case _STR : case _STR : case FF_CHAR : case _STR : case _STR : return _BOOL ; default : return _BOOL ; } }
public void remove ( RequestFilter filter ) { filters . remove ( filter ) ; }
protected void removeClassifiers ( int [ ] indices ) { int i ; if ( indices == null ) { m_ModelClassifiers . removeAllElements ( ) ; } else { for ( i = indices . length - _NUM ; i >= _NUM ; i -- ) m_ModelClassifiers . remove ( indices [ i ] ) ; } setModified ( _BOOL ) ; }
@ Override public void addPropertyChangeListener ( PropertyChangeListener pcl ) { m_pcSupport . addPropertyChangeListener ( pcl ) ; }
public int numCheckpoints ( ) { return checkpoints . size ( ) ; }
public void addElement ( Object anObject ) { p_data . add ( anObject ) ; fireIntervalAdded ( this , p_data . size ( ) - _NUM , p_data . size ( ) - _NUM ) ; if ( p_data . size ( ) == _NUM && m_selectedObject == null && anObject != null ) setSelectedItem ( anObject ) ; }
public Builder addListenUrls ( List < String > urls ) { List < String > needAdd = new ArrayList < String > ( ) ; for ( String url : urls ) { if ( ! UrlUtil . isUrl ( url ) ) { continue ; } needAdd . add ( url ) ; } if ( ! CollectionUtil . isEmpty ( needAdd ) ) { if ( mListenUrls == null ) { mListenUrls = new HashSet < String > ( ) ; } mListenUrls . addAll ( needAdd ) ; } return this ; }
public void addAssignedVirtualArrays ( Set < String > virtualArrayURIs ) { if ( ( virtualArrayURIs != null ) && ( ! virtualArrayURIs . isEmpty ( ) ) ) { HashSet < String > addVirtualArrays = new HashSet < String > ( ) ; addVirtualArrays . addAll ( virtualArrayURIs ) ; if ( _assignedVirtualArrays == null ) { setAssignedVirtualArrays ( new StringSet ( ) ) ; _assignedVirtualArrays . addAll ( addVirtualArrays ) ; } else { _assignedVirtualArrays . addAll ( addVirtualArrays ) ; } updateVirtualArrayTags ( ) ; } }
@ Override public boolean isCellEditable ( int row , int column ) { EnvVar envVar = dataList . get ( row ) ; if ( column == COL_VALUE ) { return _BOOL ; } return ! envVar . isPredefined ( ) ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
private boolean dropInTrash ( ) { if ( mHighlightedBlockView != null ) { mHighlightedBlockView . setHighlightedConnection ( null ) ; mHighlightedBlockView = null ; } mDraggedConnections . clear ( ) ; return mController . trashRootBlock ( mPendingDrag . getRootDraggedBlock ( ) ) ; }
< T > List < T > concatValues ( final T [ ] ... data ) { final List < T > rv = new ArrayList < > ( ) ; for ( T [ ] values : data ) { rv . addAll ( Arrays . asList ( values ) ) ; } return rv ; }
public DagIterator ( Graph pattern ) { for ( Edge edge : pattern . getEdges ( ) ) { if ( Edges . isDirectedEdge ( edge ) || Edges . isUndirectedEdge ( edge ) ) { continue ; } throw new IllegalArgumentException ( _STR + _STR + edge ) ; } decoratedGraphs . add ( new DecoratedGraph ( pattern ) ) ; }
private boolean validateCustomCatalog ( String title , String value ) { return _BOOL ; }
public FunctionExecutionPooledExecutor ( BlockingQueue < Runnable > q , int poolSize , PoolStatHelper stats , ThreadFactory tf ) { this ( q , poolSize , stats , tf , Integer . getInteger ( DistributionConfig . GEMFIRE_PREFIX + _STR , _NUM * _NUM ) , _BOOL ) ; }
protected boolean isSSDPDiscovery ( String body ) { if ( body != null && body . startsWith ( _STR ) && body . contains ( _STR ) ) { return _BOOL ; } return _BOOL ; }
@ Override public void addChild ( WXComponent child , int index ) { if ( child == null || index < - _NUM ) { return ; } if ( child instanceof WXBaseRefresh ) { if ( ! checkRefreshOrLoading ( child ) ) { mRefreshs . add ( child ) ; } return ; } if ( mChildren == null ) { mChildren = new ArrayList < > ( ) ; } int count = mChildren . size ( ) ; index = index >= count ? - _NUM : index ; if ( index == - _NUM ) { mChildren . add ( child ) ; } else { mChildren . add ( index , child ) ; } }
private void restoreSortingSelection ( int [ ] selection , int lead , ModelChange change ) { for ( int i = selection . length - _NUM ; i >= _NUM ; i -- ) { selection [ i ] = convertRowIndexToView ( selection [ i ] , change ) ; } lead = convertRowIndexToView ( lead , change ) ; if ( selection . length == _NUM || ( selection . length == _NUM && selection [ _NUM ] == getSelectedRow ( ) ) ) { return ; } selectionModel . setValueIsAdjusting ( _BOOL ) ; selectionModel . clearSelection ( ) ; for ( int i = selection . length - _NUM ; i >= _NUM ; i -- ) { if ( selection [ i ] != - _NUM ) { selectionModel . addSelectionInterval ( selection [ i ] , selection [ i ] ) ; } } SwingUtilities2 . setLeadAnchorWithoutSelection ( selectionModel , lead , lead ) ; selectionModel . setValueIsAdjusting ( _BOOL ) ; }
public synchronized byte [ ] toByteArray ( ) { int remaining = count ; if ( remaining == _NUM ) { return EMPTY_BYTE_ARRAY ; } byte newbuf [ ] = new byte [ remaining ] ; int pos = _NUM ; for ( byte [ ] buf : buffers ) { int c = Math . min ( buf . length , remaining ) ; System . arraycopy ( buf , _NUM , newbuf , pos , c ) ; pos += c ; remaining -= c ; if ( remaining == _NUM ) { break ; } } return newbuf ; }
@ After public void clean ( ) { mute ( null ) ; mute ( null ) ; mute ( null ) ; }
public void consume ( int eventCount , long timeoutInMillis , Predicate < Event > condition ) throws TimeoutException { if ( eventCount < _NUM ) throw new IllegalArgumentException ( _STR ) ; if ( eventCount == _NUM ) return ; int eventsRemaining = eventCount ; final long stopTime = System . currentTimeMillis ( ) + timeoutInMillis ; while ( eventsRemaining > _NUM && System . currentTimeMillis ( ) < stopTime ) { Event nextEvent = queue . poll ( ) ; if ( nextEvent != null ) { if ( condition . test ( nextEvent ) ) { -- eventsRemaining ; consumedEvents . accept ( nextEvent ) ; } else { ignoredEvents . accept ( nextEvent ) ; } } } if ( eventsRemaining > _NUM ) { throw new TimeoutException ( _STR + ( eventCount - eventsRemaining ) + _STR + eventCount + _STR + timeoutInMillis + _STR ) ; } }
private void updateUiFromCommand ( Command command ) { if ( command == null ) { return ; } actionsComboBox . setText ( command . getAction ( ) ) ; dataTextField . setText ( command . getData ( ) ) ; categoryTextField . setText ( command . getCategory ( ) ) ; mimeTextField . setText ( command . getMimeType ( ) ) ; componentTextField . setText ( command . getComponent ( ) ) ; userTextField . setText ( command . getUser ( ) ) ; flagsList_ . removeSelectionInterval ( _NUM , flagsList_ . getItemsCount ( ) ) ; List < IntentFlags > flags = command . getFlags ( ) ; if ( flags != null && flags . size ( ) > _NUM ) { for ( IntentFlags flag : command . getFlags ( ) ) { flagsList_ . setSelectedValue ( flag , _BOOL ) ; } } else { flagsList_ . setSelectedIndex ( _NUM ) ; } updateFlagsTextField ( ) ; tableModel_ . removeAllRows ( ) ; List < ExtraField > extras = command . getExtras ( ) ; if ( extras != null && extras . size ( ) > _NUM ) { for ( ExtraField extra : extras ) { tableModel_ . addRow ( extra ) ; } } updateTableVisibility ( ) ; }
public void testCompareToZeroZero ( ) { BigInteger aNumber = BigInteger . ZERO ; BigInteger bNumber = BigInteger . ZERO ; assertEquals ( _NUM , aNumber . compareTo ( bNumber ) ) ; }
public static int randGaussian ( final int mean , final int sd ) { return ( int ) ( rand . nextGaussian ( ) * sd + mean ) ; }
private float computeOverscrollPercent ( ) { if ( mOverScrollOffset >= _NUM ) { return mOverScrollOffset / mMaxOverScroll ; } else { return mOverScrollOffset / mMaxUnderScroll ; } }
public IVector ( int c ) { vector = new int [ Math . max ( defaultCapacity , c ) ] ; }
public void processInvite ( RequestEvent requestEvent , ServerTransaction serverTransaction ) { final Request request = requestEvent . getRequest ( ) ; final SipProvider sipProvider = ( SipProvider ) requestEvent . getSource ( ) ; ServerTransaction st = serverTransaction ; try { if ( st == null ) { try { st = sipProvider . getNewServerTransaction ( request ) ; } catch ( TransactionUnavailableException tae ) { tae . printStackTrace ( ) ; return ; } catch ( TransactionAlreadyExistsException taex ) { return ; } } final String toTag = _STR + System . nanoTime ( ) ; Response response = messageFactory . createResponse ( Response . RINGING , request ) ; ToHeader toHeader = ( ToHeader ) response . getHeader ( ToHeader . NAME ) ; toHeader . setTag ( toTag ) ; st . sendResponse ( response ) ; response = messageFactory . createResponse ( Response . OK , request ) ; final Address address = addressFactory . createAddress ( _STR + myAddress + _STR + myPort + _STR ) ; final ContactHeader contactHeader = headerFactory . createContactHeader ( address ) ; response . addHeader ( contactHeader ) ; toHeader = ( ToHeader ) response . getHeader ( ToHeader . NAME ) ; toHeader . setTag ( toTag ) ; st . sendResponse ( response ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } }
public static IgniteLogger logger ( GridKernalContext ctx , AtomicReference < IgniteLogger > logRef , Object obj ) { IgniteLogger log = logRef . get ( ) ; if ( log == null ) { logRef . compareAndSet ( null , ctx . log ( obj . getClass ( ) ) ) ; log = logRef . get ( ) ; } return log ; }
protected boolean readReceiveDelay ( ) { try { receiveDelay = Integer . parseInt ( receiveDelayField . getText ( ) ) ; } catch ( Exception e ) { statusText1 . setText ( rb . getString ( _STR ) ) ; statusText1 . setVisible ( _BOOL ) ; receiveDelay = _NUM ; errorInStatus1 = _BOOL ; resetNotes2 ( ) ; return ( _BOOL ) ; } if ( receiveDelay < _NUM ) { statusText1 . setText ( rb . getString ( _STR ) ) ; statusText1 . setVisible ( _BOOL ) ; receiveDelay = _NUM ; errorInStatus1 = _BOOL ; resetNotes2 ( ) ; return ( _BOOL ) ; } if ( receiveDelay > _NUM ) { statusText1 . setText ( rb . getString ( _STR ) ) ; statusText1 . setVisible ( _BOOL ) ; receiveDelay = _NUM ; errorInStatus1 = _BOOL ; resetNotes2 ( ) ; return ( _BOOL ) ; } return _BOOL ; }
private void writeIndent ( int times ) throws IOException { for ( int i = options . getBaseIndent ( ) + times ; i > _NUM ; i -- ) { writer . write ( options . getIndent ( ) ) ; } }
@ Override public int hashCode ( ) { int result = _NUM ; Iterator < ? > it = iterator ( ) ; while ( it . hasNext ( ) ) { Object object = it . next ( ) ; result = ( _NUM * result ) + ( object == null ? _NUM : object . hashCode ( ) ) ; } return result ; }
public static int parseString ( String value ) { return Integer . parseInt ( value ) ; }
void doHandleJavaMouseEvent ( MouseEvent mouseEvent ) { if ( ! XToolkit . isLeftMouseButton ( mouseEvent ) && ! XToolkit . isRightMouseButton ( mouseEvent ) ) { return ; } XBaseWindow grabWindow = XAwtState . getGrabWindow ( ) ; Point ptGlobal = mouseEvent . getLocationOnScreen ( ) ; if ( ! hasPointerMoved ) { if ( grabInputPoint == null || ( Math . abs ( ptGlobal . x - grabInputPoint . x ) > getMouseMovementSmudge ( ) ) || ( Math . abs ( ptGlobal . y - grabInputPoint . y ) > getMouseMovementSmudge ( ) ) ) { hasPointerMoved = _BOOL ; } } XBaseMenuWindow wnd = getMenuWindowFromPoint ( ptGlobal ) ; XMenuItemPeer item = ( wnd != null ) ? wnd . getItemFromPoint ( wnd . toLocal ( ptGlobal ) ) : null ; XBaseMenuWindow cwnd = getShowingLeaf ( ) ; switch ( mouseEvent . getID ( ) ) { case MouseEvent . MOUSE_PRESSED : showingMousePressedSubmenu = null ; if ( ( grabWindow == this ) && ( wnd == null ) ) { ungrabInput ( ) ; } else { grabInput ( ) ; if ( item != null && ! item . isSeparator ( ) && item . isTargetItemEnabled ( ) ) { if ( wnd . getShowingSubmenu ( ) == item ) { showingMousePressedSubmenu = ( XMenuPeer ) item ; } wnd . selectItem ( item , _BOOL ) ; } else { if ( wnd != null ) { wnd . selectItem ( null , _BOOL ) ; } } } break ; case MouseEvent . MOUSE_RELEASED : if ( item != null && ! item . isSeparator ( ) && item . isTargetItemEnabled ( ) ) { if ( item instanceof XMenuPeer ) { if ( showingMousePressedSubmenu == item ) { if ( wnd instanceof XMenuBarPeer ) { ungrabInput ( ) ; } else { wnd . selectItem ( item , _BOOL ) ; } } } else { item . action ( mouseEvent . getWhen ( ) ) ; ungrabInput ( ) ; } } else { if ( hasPointerMoved || ( wnd instanceof XMenuBarPeer ) ) { ungrabInput ( ) ; } } showingMousePressedSubmenu = null ; break ; case MouseEvent . MOUSE_DRAGGED : if ( wnd != null ) { if ( item != null && ! item . isSeparator ( ) && item . isTargetItemEnabled ( ) ) { if ( grabWindow == this ) { wnd . selectItem ( item , _BOOL ) ; } } else { wnd . selectItem ( null , _BOOL ) ; } } else { if ( cwnd != null ) { cwnd . selectItem ( null , _BOOL ) ; } } break ; } }
public boolean isInvalidNode ( ) { ASTNode first = fNodes . get ( _NUM ) ; ASTNode candidate = first . getParent ( ) ; if ( candidate == null ) return _BOOL ; if ( candidate . getNodeType ( ) == ASTNode . METHOD_DECLARATION ) return _BOOL ; return _BOOL ; }
public void push ( final float value ) { int bits = Float . floatToIntBits ( value ) ; if ( bits == _NUM || bits == _NUM || bits == _NUM ) { mv . visitInsn ( Opcodes . FCONST_0 + ( int ) value ) ; } else { mv . visitLdcInsn ( value ) ; } }
public void onMotion ( MotionEvent event , Interaction iact ) { }
public synchronized void removeBatchClustererListener ( BatchClustererListener cl ) { m_batchClustererListeners . remove ( cl ) ; }
public HeldLocksGrant refresh ( long expirationDateMs ) { return new HeldLocksGrant ( grantId , creationDateMs , expirationDateMs , lockMap , lockTimeout , versionId ) ; }
void removeKnownObject ( ParseObject object ) { synchronized ( mutex ) { knownObjects . remove ( object ) ; } }
static HeapBytesStore < byte [ ] > wrap ( @ NotNull byte [ ] bytes ) { return HeapBytesStore . wrap ( bytes ) ; }
private static String parse ( JsonValue base ) { if ( ! base . isString ( ) ) { return null ; } return buildString ( base . asString ( ) ) ; }
public void testValueOfLongNegative2 ( ) { long longVal = - _NUM ; BigInteger aNumber = BigInteger . valueOf ( longVal ) ; byte rBytes [ ] = { - _NUM , _NUM , - _NUM , - _NUM } ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , aNumber . signum ( ) ) ; }
public void beforeInsert ( int index , char element ) { if ( index > size || index < _NUM ) throw new IndexOutOfBoundsException ( _STR + index + _STR + size ) ; ensureCapacity ( size + _NUM ) ; System . arraycopy ( elements , index , elements , index + _NUM , size - index ) ; elements [ index ] = element ; size ++ ; }
private void growEntries ( ) { int newLen = ( next . length << _NUM ) + _NUM ; int [ ] newNext = new int [ newLen ] ; GridUnsafe . copyMemory ( next , INT_ARR_OFF , newNext , INT_ARR_OFF , size << _NUM ) ; next = newNext ; nextEmpty = new int [ newLen ] ; Arrays . fill ( nextEmpty , - _NUM ) ; Object [ ] newObjs = new Object [ newLen ] ; System . arraycopy ( objs , _NUM , newObjs , _NUM , size ) ; objs = newObjs ; }
public SidedPlane ( final Vector p , final boolean onSide , final Vector A , final Vector B ) { super ( A , B ) ; sigNum = onSide ? Math . signum ( evaluate ( p ) ) : - Math . signum ( evaluate ( p ) ) ; if ( sigNum == _NUM ) throw new IllegalArgumentException ( _STR ) ; }
public static boolean isInputStreamGZIPCompressed ( final PushbackInputStream inputStream ) throws IOException { if ( inputStream == null ) return _BOOL ; byte [ ] signature = new byte [ _NUM ] ; int readStatus = inputStream . read ( signature ) ; inputStream . unread ( signature ) ; int streamHeader = ( ( int ) signature [ _NUM ] & _NUM ) | ( ( signature [ _NUM ] << _NUM ) & _NUM ) ; return readStatus == _NUM && GZIPInputStream . GZIP_MAGIC == streamHeader ; }
void insertOp ( int pos , int length , int op ) { int totalLen = m_ops . getOp ( OpMap . MAPINDEX_LENGTH ) ; for ( int i = totalLen - _NUM ; i >= pos ; i -- ) { m_ops . setOp ( i + length , m_ops . getOp ( i ) ) ; } m_ops . setOp ( pos , op ) ; m_ops . setOp ( OpMap . MAPINDEX_LENGTH , totalLen + length ) ; }
private void clear ( ) { valid = _BOOL ; if ( ( listenerObjects == null ) || listenerObjects . isEmpty ( ) ) { deregisterListener ( ) ; } ssm = null ; if ( SMSEntry . cacheSMSEntries ) { orgConfigs . clear ( ) ; globalConfigs . clear ( ) ; } }
public static void registerDecayableObject ( Decayable obj ) { decayObjects . add ( obj ) ; }
public static void assertExpectedOutputContains ( String expectedString , String x ) { if ( ! x . contains ( expectedString ) ) { fail ( _STR + expectedString + _STR + x + _STR ) ; } }
public boolean remove ( String classname ) { String pkgname ; HashSet < String > names ; classname = cleanUp ( classname ) ; pkgname = extractPackage ( classname ) ; names = m_Cache . get ( pkgname ) ; if ( names != null ) { return names . remove ( classname ) ; } else { return _BOOL ; } }
public void testFailedStage ( ) { CFException ex = new CFException ( ) ; CompletionStage < Integer > f = CompletableFuture . failedStage ( ex ) ; AtomicInteger x = new AtomicInteger ( _NUM ) ; AtomicReference < Throwable > r = new AtomicReference < Throwable > ( ) ; f . whenComplete ( null ) ; assertEquals ( x . get ( ) , _NUM ) ; assertEquals ( r . get ( ) , ex ) ; }
@ Override public void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; Graphics2D graphics = ( Graphics2D ) g ; graphics . setBackground ( mColorSpectrumBackground ) ; RenderingHints renderHints = new RenderingHints ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; renderHints . put ( RenderingHints . KEY_RENDERING , RenderingHints . VALUE_RENDER_QUALITY ) ; graphics . setRenderingHints ( renderHints ) ; drawFrequencies ( graphics ) ; drawCursor ( graphics ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public void classLoaderDestroy ( DynamicClassLoader loader ) { Method destroy = getDestroyMethod ( _resource . getClass ( ) ) ; if ( destroy == null ) return ; try { destroy . invoke ( _resource ) ; } catch ( Throwable e ) { log . log ( Level . WARNING , e . toString ( ) , e ) ; } }
public boolean deleteAttachmentPoint ( DatapathId sw , OFPort port ) { AttachmentPoint ap = new AttachmentPoint ( sw , port , new Date ( _NUM ) ) ; if ( this . oldAPs != null ) { ArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > ( ) ; apList . addAll ( this . oldAPs ) ; int index = apList . indexOf ( ap ) ; if ( index > _NUM ) { apList . remove ( index ) ; this . oldAPs = apList ; } } if ( this . attachmentPoints != null ) { ArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > ( ) ; apList . addAll ( this . attachmentPoints ) ; int index = apList . indexOf ( ap ) ; if ( index > _NUM ) { apList . remove ( index ) ; this . attachmentPoints = apList ; return _BOOL ; } } return _BOOL ; }
static boolean isAssignableTo ( ClassNode type , ClassNode toBeAssignedTo ) { if ( UNKNOWN_PARAMETER_TYPE == type ) return _BOOL ; if ( type == toBeAssignedTo ) return _BOOL ; if ( toBeAssignedTo . redirect ( ) == STRING_TYPE && type . redirect ( ) == GSTRING_TYPE ) { return _BOOL ; } if ( isPrimitiveType ( toBeAssignedTo ) ) toBeAssignedTo = getWrapper ( toBeAssignedTo ) ; if ( isPrimitiveType ( type ) ) type = getWrapper ( type ) ; if ( Double_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) ; } if ( Float_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) ; } if ( Long_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) && Float_TYPE != type . redirect ( ) ; } if ( Integer_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) && Float_TYPE != type . redirect ( ) && Long_TYPE != type . redirect ( ) ; } if ( Short_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) && Float_TYPE != type . redirect ( ) && Long_TYPE != type . redirect ( ) && Integer_TYPE != type . redirect ( ) ; } if ( Byte_TYPE == toBeAssignedTo ) { return type . redirect ( ) == Byte_TYPE ; } if ( type . isArray ( ) && toBeAssignedTo . isArray ( ) ) { return isAssignableTo ( type . getComponentType ( ) , toBeAssignedTo . getComponentType ( ) ) ; } if ( type . isDerivedFrom ( GSTRING_TYPE ) && STRING_TYPE . equals ( toBeAssignedTo ) ) { return _BOOL ; } if ( toBeAssignedTo . isDerivedFrom ( GSTRING_TYPE ) && STRING_TYPE . equals ( type ) ) { return _BOOL ; } if ( implementsInterfaceOrIsSubclassOf ( type , toBeAssignedTo ) ) { if ( OBJECT_TYPE . equals ( toBeAssignedTo ) ) return _BOOL ; if ( toBeAssignedTo . isUsingGenerics ( ) ) { GenericsType gt = GenericsUtils . buildWildcardType ( toBeAssignedTo ) ; return gt . isCompatibleWith ( type ) ; } return _BOOL ; } if ( type . isDerivedFrom ( CLOSURE_TYPE ) && isSAMType ( toBeAssignedTo ) ) { return _BOOL ; } return _BOOL ; }
public synchronized int totalRecoverFiles ( ) { int total = _NUM ; for ( File file : fileDetails . values ( ) ) { if ( file . reused ( ) == _BOOL ) { total ++ ; } } return total ; }
public static AnimGameItem process ( MD5Model md5Model , MD5AnimModel animModel , Vector3f defaultColour ) throws Exception { List < Matrix4f > invJointMatrices = calcInJointMatrices ( md5Model ) ; List < AnimatedFrame > animatedFrames = processAnimationFrames ( md5Model , animModel , invJointMatrices ) ; List < Mesh > list = new ArrayList < > ( ) ; for ( MD5Mesh md5Mesh : md5Model . getMeshes ( ) ) { Mesh mesh = generateMesh ( md5Model , md5Mesh ) ; handleTexture ( mesh , md5Mesh , defaultColour ) ; list . add ( mesh ) ; } Mesh [ ] meshes = new Mesh [ list . size ( ) ] ; meshes = list . toArray ( meshes ) ; AnimGameItem result = new AnimGameItem ( meshes , animatedFrames , invJointMatrices ) ; return result ; }
ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
@ Override @ Timed public void deleteAssignment ( Experiment experiment , User . ID userID , Context context , Application . Name appName , Assignment currentAssignment ) { deleteUserFromLookUp ( experiment . getID ( ) , userID , context ) ; boolean countUp = _BOOL ; assignmentsCountExecutor . execute ( new AssignmentCountEnvelope ( assignmentsRepository , experimentRepository , dbRepository , experiment , currentAssignment , countUp , eventLog , null , assignUserToExport , assignBucketCount ) ) ; deleteAssignmentOld ( experiment . getID ( ) , userID , context , appName , currentAssignment . getBucketLabel ( ) ) ; removeIndexUserToExperiment ( userID , experiment . getID ( ) , context , appName ) ; removeIndexUserToBucket ( userID , experiment . getID ( ) , context , currentAssignment . getBucketLabel ( ) ) ; removeIndexExperimentsToUser ( userID , experiment . getID ( ) , context , appName ) ; }
String format ( Object obj , StringBuffer toAppendTo ) throws IllegalArgumentException { Date source = null ; if ( obj instanceof Date ) { source = ( Date ) obj ; } else if ( obj instanceof String ) { try { source = parse ( ( String ) obj ) ; } catch ( ParseException pe ) { throw new RuntimeException ( pe . toString ( ) ) ; } } if ( source == null ) { throw new IllegalArgumentException ( ( obj == null ) ? _STR : obj . toString ( ) ) ; } return format ( source , toAppendTo ) ; }
private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { return unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; }
public static ThreadDump create ( ) { ThreadDump threadDump = _threadDumpRef . get ( ) ; if ( threadDump == null ) { threadDump = new ThreadDumpPro ( ) ; _threadDumpRef . compareAndSet ( null , threadDump ) ; threadDump = _threadDumpRef . get ( ) ; } return threadDump ; }
private void checkStart ( ) { if ( mCanProcessAudio && ! mOutput . isRunning ( ) && mOutput . available ( ) <= mBufferStartThreshold ) { mOutput . start ( ) ; } }
protected boolean matchesFilter ( final String input , final String [ ] filter ) { for ( final String match : filter ) { if ( ! input . contains ( match ) ) return _BOOL ; } return _BOOL ; }
private E unlinkFirst ( ) { Node < E > f = first ; if ( f == null ) return null ; Node < E > n = f . next ; E item = f . item ; f . item = null ; f . next = f ; first = n ; if ( n == null ) last = null ; else n . prev = null ; -- count ; notFull . signal ( ) ; return item ; }
public IStatus run ( IProgressMonitor monitor ) { InputStream input = null ; FileOutputStream output = null ; IStatus jobStatus = Status . OK_STATUS ; byte [ ] b = new byte [ _NUM ] ; int bytesRead ; try { HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; input = url . openStream ( ) ; long totalBytesRead = _NUM ; int responseStatusCode = connection . getResponseCode ( ) ; if ( responseStatusCode >= HttpURLConnection . HTTP_BAD_REQUEST ) { jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , MessageFormat . format ( _STR , responseStatusCode , connection . getResponseMessage ( ) ) ) ; } long contentLength = connection . getContentLength ( ) ; output = new FileOutputStream ( target ) ; monitor . beginTask ( _STR + url . toString ( ) , ( int ) contentLength ) ; while ( jobStatus == Status . OK_STATUS ) { if ( contentLength > _NUM && totalBytesRead >= contentLength ) { break ; } bytesRead = input . read ( b ) ; if ( bytesRead == - _NUM ) { break ; } output . write ( b , _NUM , bytesRead ) ; totalBytesRead += bytesRead ; monitor . worked ( bytesRead ) ; if ( monitor . isCanceled ( ) ) { jobStatus = Status . CANCEL_STATUS ; break ; } } } catch ( MalformedURLException e ) { jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , _STR + url . toExternalForm ( ) , e ) ; } catch ( IOException e ) { jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , _STR + url . toExternalForm ( ) , e ) ; } closeStreams ( input , output ) ; return jobStatus ; }
private static synchronized void initDocBuilderFactory ( ) { docBuilderFactory = DocumentBuilderFactory . newInstance ( ) ; docBuilderFactory . setIgnoringComments ( _BOOL ) ; docBuilderFactory . setCoalescing ( _BOOL ) ; }
public double interceptStdErr ( ) { return Math . sqrt ( svar0 ) ; }
private void createMissingValues ( ) { String sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR ; PreparedStatement pstmt = null ; try { pstmt = DB . prepareStatement ( sql , get_TrxName ( ) ) ; pstmt . setInt ( _NUM , getA_Registration_ID ( ) ) ; ResultSet rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { MRegistrationValue v = new MRegistrationValue ( this , rs . getInt ( _NUM ) , _STR ) ; v . saveEx ( ) ; } rs . close ( ) ; pstmt . close ( ) ; pstmt = null ; } catch ( Exception e ) { log . log ( Level . SEVERE , null , e ) ; } try { if ( pstmt != null ) pstmt . close ( ) ; pstmt = null ; } catch ( Exception e ) { pstmt = null ; } }
private static String normalisePath ( String path ) { return path . replace ( _STR , _STR ) ; }
public void startLaunchNotifier ( ) { if ( m_launchNotification == null ) throw new NullPointerException ( ) ; m_launchNotifierThread . setDaemon ( _BOOL ) ; m_launchNotifierThread . start ( ) ; }
private static void encode ( List < AclEntry > acl , long address ) { long offset = address ; for ( AclEntry ace : acl ) { int flags = _NUM ; UserPrincipal who = ace . principal ( ) ; if ( ! ( who instanceof UnixUserPrincipals . User ) ) throw new ProviderMismatchException ( ) ; UnixUserPrincipals . User user = ( UnixUserPrincipals . User ) who ; int uid ; if ( user . isSpecial ( ) ) { uid = - _NUM ; if ( who == UnixUserPrincipals . SPECIAL_OWNER ) flags |= ACE_OWNER ; else if ( who == UnixUserPrincipals . SPECIAL_GROUP ) flags |= ( ACE_GROUP | ACE_IDENTIFIER_GROUP ) ; else if ( who == UnixUserPrincipals . SPECIAL_EVERYONE ) flags |= ACE_EVERYONE ; else throw new AssertionError ( _STR ) ; } else { if ( user instanceof UnixUserPrincipals . Group ) { uid = user . gid ( ) ; flags |= ACE_IDENTIFIER_GROUP ; } else { uid = user . uid ( ) ; } } int type ; switch ( ace . type ( ) ) { case ALLOW : type = ACE_ACCESS_ALLOWED_ACE_TYPE ; break ; case DENY : type = ACE_ACCESS_DENIED_ACE_TYPE ; break ; case AUDIT : type = ACE_SYSTEM_AUDIT_ACE_TYPE ; break ; case ALARM : type = ACE_SYSTEM_ALARM_ACE_TYPE ; break ; default : throw new AssertionError ( _STR ) ; } Set < AclEntryPermission > aceMask = ace . permissions ( ) ; int mask = _NUM ; if ( aceMask . contains ( AclEntryPermission . READ_DATA ) ) mask |= ACE_READ_DATA ; if ( aceMask . contains ( AclEntryPermission . WRITE_DATA ) ) mask |= ACE_WRITE_DATA ; if ( aceMask . contains ( AclEntryPermission . APPEND_DATA ) ) mask |= ACE_APPEND_DATA ; if ( aceMask . contains ( AclEntryPermission . READ_NAMED_ATTRS ) ) mask |= ACE_READ_NAMED_ATTRS ; if ( aceMask . contains ( AclEntryPermission . WRITE_NAMED_ATTRS ) ) mask |= ACE_WRITE_NAMED_ATTRS ; if ( aceMask . contains ( AclEntryPermission . EXECUTE ) ) mask |= ACE_EXECUTE ; if ( aceMask . contains ( AclEntryPermission . DELETE_CHILD ) ) mask |= ACE_DELETE_CHILD ; if ( aceMask . contains ( AclEntryPermission . READ_ATTRIBUTES ) ) mask |= ACE_READ_ATTRIBUTES ; if ( aceMask . contains ( AclEntryPermission . WRITE_ATTRIBUTES ) ) mask |= ACE_WRITE_ATTRIBUTES ; if ( aceMask . contains ( AclEntryPermission . DELETE ) ) mask |= ACE_DELETE ; if ( aceMask . contains ( AclEntryPermission . READ_ACL ) ) mask |= ACE_READ_ACL ; if ( aceMask . contains ( AclEntryPermission . WRITE_ACL ) ) mask |= ACE_WRITE_ACL ; if ( aceMask . contains ( AclEntryPermission . WRITE_OWNER ) ) mask |= ACE_WRITE_OWNER ; if ( aceMask . contains ( AclEntryPermission . SYNCHRONIZE ) ) mask |= ACE_SYNCHRONIZE ; Set < AclEntryFlag > aceFlags = ace . flags ( ) ; if ( aceFlags . contains ( AclEntryFlag . FILE_INHERIT ) ) flags |= ACE_FILE_INHERIT_ACE ; if ( aceFlags . contains ( AclEntryFlag . DIRECTORY_INHERIT ) ) flags |= ACE_DIRECTORY_INHERIT_ACE ; if ( aceFlags . contains ( AclEntryFlag . NO_PROPAGATE_INHERIT ) ) flags |= ACE_NO_PROPAGATE_INHERIT_ACE ; if ( aceFlags . contains ( AclEntryFlag . INHERIT_ONLY ) ) flags |= ACE_INHERIT_ONLY_ACE ; unsafe . putInt ( offset + OFFSETOF_UID , uid ) ; unsafe . putInt ( offset + OFFSETOF_MASK , mask ) ; unsafe . putShort ( offset + OFFSETOF_FLAGS , ( short ) flags ) ; unsafe . putShort ( offset + OFFSETOF_TYPE , ( short ) type ) ; offset += SIZEOF_ACE_T ; } }
public static String expandHiddenDir ( final String filename ) { final int macro = filename . indexOf ( hiddenDirMacro , _NUM ) ; String expandedFilter ; if ( macro == - _NUM ) { return filename ; } if ( Cfg . DEBUG ) { Check . log ( TAG + _STR ) ; } expandedFilter = filename . replaceFirst ( _STR , StringUtils . chomp ( Path . hidden ( ) , _STR ) ) ; if ( Cfg . DEBUG ) { Check . log ( TAG + _STR + expandedFilter ) ; } return expandedFilter ; }
private boolean tryQueueCurrentBuffer ( long elapsedWaiting ) { if ( currentBuffer . isEmpty ( ) ) return _BOOL ; if ( isOpen && neverPubQueue . size ( ) < neverPubCapacity ) { neverPubQueue . add ( currentBuffer ) ; totalQueuedRecords . addAndGet ( currentBuffer . sizeRecords ( ) ) ; totalQueuedBuffers . incrementAndGet ( ) ; onQueueBufferSuccess ( currentBuffer , elapsedWaiting ) ; currentBuffer = new RecordBuffer < > ( flow ) ; return _BOOL ; } else if ( elapsedWaiting > _NUM ) { onQueueBufferTimeout ( currentBuffer , elapsedWaiting ) ; return _BOOL ; } else return _BOOL ; }
public void updateValue ( final Object value , final boolean isSelected , boolean sync ) { if ( isReadOnly ( ) ) { return ; } if ( GenericFormFactory . isTextForm ( formType ) ) { textString = ( String ) value ; if ( textString != null && textString . equals ( lastTextString ) ) { sync = _BOOL ; } lastTextString = textString ; } else { textString = ( String ) value ; this . isSelected = isSelected ; if ( isSelected != lastIsSelected && lastTextString != null && textString != null && textString . equals ( lastTextString ) ) { sync = _BOOL ; } lastTextString = textString ; lastIsSelected = isSelected ; } if ( ( sync && guiType != FormFactory . ULC ) && guiComp != null ) { syncGUI ( value ) ; } }
public boolean hasNext ( ) throws IOException { dataInputStream . mark ( _NUM ) ; int val = dataInputStream . read ( ) ; dataInputStream . reset ( ) ; return val != - _NUM ; }
private final StringBuilder appendParameterSignature ( StringBuilder buffer , char [ ] [ ] parameterTypes , char [ ] [ ] parameterNames ) { if ( parameterTypes != null ) { for ( int i = _NUM ; i < parameterTypes . length ; i ++ ) { if ( i > _NUM ) { buffer . append ( _STR ) ; buffer . append ( _STR ) ; } buffer . append ( parameterTypes [ i ] ) ; if ( parameterNames != null && parameterNames [ i ] != null ) { buffer . append ( _STR ) ; buffer . append ( parameterNames [ i ] ) ; } } } return buffer ; }
public void completeHeartbeat ( Database database , long seqno , String eventId ) throws SQLException { if ( logger . isDebugEnabled ( ) ) logger . debug ( _STR ) ; Statement st = null ; ResultSet rs = null ; Timestamp sts = new Timestamp ( _NUM ) ; Timestamp now = new Timestamp ( System . currentTimeMillis ( ) ) ; ArrayList < Column > whereClause = new ArrayList < Column > ( ) ; ArrayList < Column > values = new ArrayList < Column > ( ) ; if ( logger . isDebugEnabled ( ) ) logger . debug ( _STR + now ) ; try { st = database . createStatement ( ) ; rs = st . executeQuery ( sourceTsQuery ) ; if ( rs . next ( ) ) sts = rs . getTimestamp ( _NUM ) ; } finally { if ( rs != null ) { try { rs . close ( ) ; } catch ( SQLException e ) { } } if ( st != null ) { try { st . close ( ) ; } catch ( SQLException e ) { } } } long lag_millis = now . getTime ( ) - sts . getTime ( ) ; hbId . setValue ( KEY ) ; whereClause . add ( hbId ) ; hbSeqno . setValue ( seqno ) ; hbEventId . setValue ( eventId ) ; hbTargetTstamp . setValue ( now ) ; hbLagMillis . setValue ( lag_millis ) ; values . add ( hbSeqno ) ; values . add ( hbEventId ) ; values . add ( hbTargetTstamp ) ; values . add ( hbLagMillis ) ; database . update ( hbTable , whereClause , values ) ; }
public CipherParameters decrypt ( byte [ ] in , int inOff , int inLen , int keyLen ) throws IllegalArgumentException { if ( ! key . isPrivate ( ) ) { throw new IllegalArgumentException ( _STR ) ; } BigInteger n = key . getModulus ( ) ; BigInteger d = key . getExponent ( ) ; byte [ ] C = new byte [ inLen ] ; System . arraycopy ( in , inOff , C , _NUM , C . length ) ; BigInteger c = new BigInteger ( _NUM , C ) ; BigInteger r = c . modPow ( d , n ) ; return generateKey ( n , r , keyLen ) ; }
public PrivateKey loadPrivateKey ( ) throws Exception { if ( defaultKeys ) { return getPrivateKeyFromString ( RSAKeyLoader . DEFAULT_PKEY ) ; } if ( priKey == null ) { FileReader f = new FileReader ( path + _STR + this . id ) ; BufferedReader r = new BufferedReader ( f ) ; String tmp = _STR ; String key = _STR ; while ( ( tmp = r . readLine ( ) ) != null ) { key = key + tmp ; } f . close ( ) ; r . close ( ) ; priKey = getPrivateKeyFromString ( key ) ; } return priKey ; }
public void removeCategoriesListener ( SnapshotCategoriesListener listener ) { listeners . remove ( listener ) ; }
public boolean hasUnsupportedCriticalExtension ( ) { Set extns = getCriticalExtensionOIDs ( ) ; if ( extns == null ) { return _BOOL ; } extns . remove ( RFC3280CertPathUtilities . ISSUING_DISTRIBUTION_POINT ) ; extns . remove ( RFC3280CertPathUtilities . DELTA_CRL_INDICATOR ) ; return ! extns . isEmpty ( ) ; }
private Integer zGetWeekNumberForASevenDayRange ( LocalDate firstDateInRange , WeekFields weekFieldRules , boolean requireUnanimousWeekNumber ) { ArrayList < Integer > weekNumbersList = new ArrayList < Integer > ( ) ; for ( int daysIntoTheFuture = _NUM ; daysIntoTheFuture <= _NUM ; ++ daysIntoTheFuture ) { LocalDate currentDateInRange ; try { currentDateInRange = firstDateInRange . plusDays ( daysIntoTheFuture ) ; int currentWeekNumber = currentDateInRange . get ( weekFieldRules . weekOfWeekBasedYear ( ) ) ; weekNumbersList . add ( currentWeekNumber ) ; } catch ( Exception ex ) { return _NUM ; } } boolean isUnanimous = ( InternalUtilities . areObjectsEqual ( weekNumbersList . get ( _NUM ) , weekNumbersList . get ( _NUM ) ) ) ; if ( isUnanimous ) { return weekNumbersList . get ( _NUM ) ; } if ( requireUnanimousWeekNumber ) { return null ; } int mostCommonWeekNumber = InternalUtilities . getMostCommonElementInList ( weekNumbersList ) ; return mostCommonWeekNumber ; }
private boolean isNotInArray ( String str , String [ ] array ) { for ( int i = _NUM ; i < array . length ; i ++ ) { if ( str . equals ( array [ i ] ) ) { return _BOOL ; } } return _BOOL ; }
Node cloneOrImportNode ( short operation , Node node , boolean deep ) { NodeImpl copy = shallowCopy ( operation , node ) ; if ( deep ) { NodeList list = node . getChildNodes ( ) ; for ( int i = _NUM ; i < list . getLength ( ) ; i ++ ) { copy . appendChild ( cloneOrImportNode ( operation , list . item ( i ) , deep ) ) ; } } notifyUserDataHandlers ( operation , node , copy ) ; return copy ; }
public static synchronized void cleanup ( ) { w . lock ( ) ; try { secp256k1_destroy_context ( Secp256k1Context . getContext ( ) ) ; } finally { w . unlock ( ) ; } }
public void init ( ) throws Exception { loadParameterFromZK ( ) ; _invalidLoginCleanupExecutor . scheduleWithFixedDelay ( new InvalidLoginCleaner ( ) , CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS , CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS , TimeUnit . MINUTES ) ; _log . info ( _STR , _maxAuthnLoginAttemtsCount ) ; _log . info ( _STR , _maxAuthnLoginAttemtsLifeTimeInMins ) ; _log . info ( _STR , CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS ) ; }
public List < String > makeURLList ( String shard ) { List < String > urls = StrUtils . splitSmart ( shard , _STR , _BOOL ) ; for ( int i = _NUM ; i < urls . size ( ) ; i ++ ) { urls . set ( i , buildUrl ( urls . get ( i ) ) ) ; } if ( urls . size ( ) > _NUM ) Collections . shuffle ( urls , r ) ; return urls ; }
public InputStreamReader reader ( final String charset ) throws HttpRequestException { try { return new InputStreamReader ( stream ( ) , getValidCharset ( charset ) ) ; } catch ( UnsupportedEncodingException e ) { throw new HttpRequestException ( e ) ; } }
private byte [ ] toZLIB ( RenderedImage image , Color bkg , String colorModel ) throws IOException { return ImageGraphics2D . toByteArray ( image , ImageConstants . RAW , ImageConstants . ENCODING_FLATE_ASCII85 , ImageGraphics2D . getRAWProperties ( bkg , colorModel ) ) ; }
public void addVertex ( Object id ) throws IllegalArgumentException { if ( initialized ) { throw new IllegalArgumentException ( ) ; } Vertex vertex = new Vertex ( id ) ; Object existing = vertexMap . put ( id , vertex ) ; if ( existing != null ) { throw new IllegalArgumentException ( ) ; } vertexList . add ( vertex ) ; }
public void configureLocalServices ( ) { clientMemo . setLnTrafficController ( this ) ; clientMemo . configureCommandStation ( LnCommandStationType . COMMAND_STATION_DCS100 , _BOOL , _BOOL ) ; clientMemo . configureManagers ( ) ; }
private static int indexOf ( int fromIndex , CharSequence csq ) { if ( csq == null ) return _NUM ; int length = csq . length ( ) ; int j = fromIndex ; int i = ( j < length ) ? csq . charAt ( j ++ ) : _NUM ; i <<= _NUM ; i |= ( j < length ) ? csq . charAt ( j ++ ) : _NUM ; return i ; }
protected SizeRequirements calculateMinorAxisRequirements ( int axis , SizeRequirements r ) { updateGrid ( ) ; calculateColumnRequirements ( axis ) ; if ( r == null ) { r = new SizeRequirements ( ) ; } long min = _NUM ; long pref = _NUM ; int n = columnRequirements . length ; for ( int i = _NUM ; i < n ; i ++ ) { SizeRequirements req = columnRequirements [ i ] ; min += req . minimum ; pref += req . preferred ; } int adjust = ( n + _NUM ) * cellSpacing + _NUM * borderWidth ; min += adjust ; pref += adjust ; r . minimum = ( int ) min ; r . preferred = ( int ) pref ; r . maximum = ( int ) pref ; AttributeSet attr = getAttributes ( ) ; CSS . LengthValue cssWidth = ( CSS . LengthValue ) attr . getAttribute ( CSS . Attribute . WIDTH ) ; if ( BlockView . spanSetFromAttributes ( axis , r , cssWidth , null ) ) { if ( r . minimum < ( int ) min ) { r . maximum = r . minimum = r . preferred = ( int ) min ; } } totalColumnRequirements . minimum = r . minimum ; totalColumnRequirements . preferred = r . preferred ; totalColumnRequirements . maximum = r . maximum ; Object o = attr . getAttribute ( CSS . Attribute . TEXT_ALIGN ) ; if ( o != null ) { String ta = o . toString ( ) ; if ( ta . equals ( _STR ) ) { r . alignment = _NUM ; } else if ( ta . equals ( _STR ) ) { r . alignment = _NUM ; } else if ( ta . equals ( _STR ) ) { r . alignment = _NUM ; } else { r . alignment = _NUM ; } } else { r . alignment = _NUM ; } return r ; }
public void append ( String string ) { for ( int i = _NUM ; i < string . length ( ) ; i ++ ) append ( string . charAt ( i ) ) ; }
public ListenableFuture < String > push ( final String name , final Expression func ) { String let = String . format ( _STR , name , func . toHaskell ( ) ) ; return pullRaw ( let ) ; }
public final String toString ( int depth ) { if ( depth <= _NUM ) return _STR ; return ( _STR + super . toString ( depth ) + _STR + mantissa + _STR + exponent + _STR + ( bigVal != null ? bigVal . toString ( ) : _STR ) + _STR + image ) ; }
public MetaDataColumnDescriptor ( String columnName , int jdbcType , Object defaultValue ) { _columnName = columnName . toUpperCase ( ) ; _jdbcType = jdbcType ; _defaultValue = defaultValue ; }
private void bulkLoad ( double [ ] lmin , double [ ] lmax , List < Node > children , ArrayModifiableDBIDs ids , int start , int end , int dim , int level , int code ) { if ( dim == _NUM ) { DBIDArrayIter iter = ids . iter ( ) ; iter . seek ( start ) ; NumberVector first = relation . get ( iter ) ; iter . advance ( ) ; boolean degenerate = _BOOL ; loop : for ( ; iter . getOffset ( ) < end ; iter . advance ( ) ) { NumberVector other = relation . get ( iter ) ; for ( int d = _NUM ; d < lmin . length ; d ++ ) { if ( Math . abs ( first . doubleValue ( d ) - other . doubleValue ( d ) ) > _NUM ) { degenerate = _BOOL ; break loop ; } } } if ( degenerate ) { double [ ] center = new double [ lmin . length ] ; for ( int d = _NUM ; d < lmin . length ; d ++ ) { center [ d ] = lmin [ d ] * _NUM + lmax [ d ] * _NUM + shift [ d ] ; if ( center [ d ] > min [ d ] + width [ d ] ) { center [ d ] -= width [ d ] ; } } children . add ( new Node ( code , center , end - start , level , null ) ) ; return ; } } if ( dim == lmin . length ) { double [ ] center = new double [ lmin . length ] ; for ( int d = _NUM ; d < lmin . length ; d ++ ) { center [ d ] = lmin [ d ] * _NUM + lmax [ d ] * _NUM + shift [ d ] ; if ( center [ d ] > min [ d ] + width [ d ] ) { center [ d ] -= width [ d ] ; } } if ( end - start < nmin ) { children . add ( new Node ( code , center , end - start , level , null ) ) ; return ; } else { List < Node > newchildren = new ArrayList < > ( ) ; bulkLoad ( lmin , lmax , newchildren , ids , start , end , _NUM , level + _NUM , _NUM ) ; children . add ( new Node ( code , center , end - start , level , newchildren ) ) ; return ; } } else { DBIDArrayIter siter = ids . iter ( ) , eiter = ids . iter ( ) ; siter . seek ( start ) ; eiter . seek ( end - _NUM ) ; while ( siter . getOffset ( ) < eiter . getOffset ( ) ) { if ( getShiftedDim ( relation . get ( siter ) , dim , level ) <= _NUM ) { siter . advance ( ) ; continue ; } if ( getShiftedDim ( relation . get ( eiter ) , dim , level ) > _NUM ) { eiter . retract ( ) ; continue ; } ids . swap ( siter . getOffset ( ) , eiter . getOffset ( ) - _NUM ) ; siter . advance ( ) ; eiter . retract ( ) ; } final int spos = siter . getOffset ( ) ; if ( start < spos ) { final double tmp = lmax [ dim ] ; lmax [ dim ] = lmax [ dim ] * _NUM + lmin [ dim ] * _NUM ; bulkLoad ( lmin , lmax , children , ids , start , spos , dim + _NUM , level , code ) ; lmax [ dim ] = tmp ; } if ( spos < end ) { final double tmp = lmin [ dim ] ; lmin [ dim ] = lmax [ dim ] * _NUM + lmin [ dim ] * _NUM ; bulkLoad ( lmin , lmax , children , ids , spos , end , dim + _NUM , level , code | ( _NUM << dim ) ) ; lmin [ dim ] = tmp ; } } }
protected ArrayList < float [ ] > _forwardPoly ( float [ ] rawllpts , int ltype , int nsegs , boolean isFilled ) { boolean DEBUG = Debug . debugging ( _STR ) ; int len = rawllpts . length > > > _NUM ; if ( len < _NUM ) return new ArrayList < float [ ] > ( _NUM ) ; if ( isComplicatedLineType ( ltype ) ) return doPolyDispatch ( rawllpts , ltype , nsegs , isFilled ) ; int invalid_count = _NUM ; boolean curr_invalid , prev_invalid = _BOOL ; Point temp = new Point ( ) ; AzimuthVar az_first = null , az_save = null , azVar = new AzimuthVar ( ) ; ArrayList < AzimuthVar > sections = new ArrayList < AzimuthVar > ( _NUM ) ; float [ ] x_ , xs = new float [ len ] ; float [ ] y_ , ys = new float [ len ] ; _forward ( rawllpts [ _NUM ] , rawllpts [ _NUM ] , temp , azVar ) ; xs [ _NUM ] = temp . x ; ys [ _NUM ] = temp . y ; prev_invalid = azVar . invalid_forward ; if ( prev_invalid ) { ++ invalid_count ; } else { azVar . index = _NUM ; azVar . current_azimuth = GreatCircle . sphericalAzimuth ( ( float ) centerY , ( float ) centerX , rawllpts [ _NUM ] , rawllpts [ _NUM ] ) ; if ( ! isFilled ) { sections . add ( azVar ) ; } else { az_first = azVar ; } azVar = new AzimuthVar ( ) ; } int i = _NUM , j = _NUM ; for ( i = _NUM , j = _NUM ; i < len ; i ++ , j += _NUM ) { azVar . invalid_forward = _BOOL ; _forward ( rawllpts [ j ] , rawllpts [ j + _NUM ] , temp , azVar ) ; curr_invalid = azVar . invalid_forward ; xs [ i ] = temp . x ; ys [ i ] = temp . y ; if ( ! curr_invalid && prev_invalid ) { azVar . index = i - _NUM ; azVar . current_azimuth = GreatCircle . sphericalAzimuth ( ( float ) centerY , ( float ) centerX , rawllpts [ j - _NUM ] , rawllpts [ j - _NUM ] ) ; sections . add ( azVar ) ; azVar = new AzimuthVar ( ) ; } else if ( curr_invalid ) { if ( ! prev_invalid ) { azVar . index = i ; if ( isFilled && ( invalid_count == _NUM ) ) { az_save = azVar ; } else { sections . add ( azVar ) ; } azVar = new AzimuthVar ( ) ; } ++ invalid_count ; } prev_invalid = curr_invalid ; } if ( invalid_count == _NUM ) { ArrayList < float [ ] > ret_val = new ArrayList < float [ ] > ( _NUM ) ; ret_val . add ( xs ) ; ret_val . add ( ys ) ; return ret_val ; } if ( invalid_count == len ) { return new ArrayList < float [ ] > ( _NUM ) ; } if ( ! prev_invalid ) { if ( isFilled && ( az_save != null ) ) { int l = az_save . index ; x_ = new float [ len + l ] ; y_ = new float [ len + l ] ; System . arraycopy ( xs , _NUM , x_ , _NUM , len ) ; System . arraycopy ( ys , _NUM , y_ , _NUM , len ) ; System . arraycopy ( xs , _NUM , x_ , len , l ) ; System . arraycopy ( ys , _NUM , y_ , len , l ) ; az_save . index = len + l ; sections . add ( az_save ) ; xs = x_ ; ys = y_ ; } else { if ( DEBUG && isFilled && ( az_save == null ) ) { Debug . output ( _STR ) ; } azVar . index = i ; j = rawllpts . length ; azVar . current_azimuth = GreatCircle . sphericalAzimuth ( ( float ) centerY , ( float ) centerX , rawllpts [ j - _NUM ] , rawllpts [ j - _NUM ] ) ; sections . add ( azVar ) ; } } else if ( az_save != null ) { if ( DEBUG ) Debug . output ( _STR ) ; sections . add ( az_first ) ; sections . add ( az_save ) ; } int size = sections . size ( ) ; ArrayList < float [ ] > ret_val = new ArrayList < float [ ] > ( size ) ; if ( isFilled && ( len > _NUM ) ) { generateFilledPoly ( xs , ys , sections , ret_val ) ; return ret_val ; } for ( j = _NUM ; j < size ; j += _NUM ) { AzimuthVar az1 = ( AzimuthVar ) sections . get ( j ) ; AzimuthVar az2 = ( AzimuthVar ) sections . get ( j + _NUM ) ; int off1 = az1 . index ; int off2 = az2 . index ; int l = off2 - off1 ; x_ = new float [ l ] ; y_ = new float [ l ] ; System . arraycopy ( xs , off1 , x_ , _NUM , l ) ; System . arraycopy ( ys , off1 , y_ , _NUM , l ) ; ret_val . add ( x_ ) ; ret_val . add ( y_ ) ; } return ret_val ; }
private ArrayList < String > filterYears ( ArrayList < String > items ) { Iterator < String > iterator ; Calendar now = Calendar . getInstance ( ) ; int year = now . get ( Calendar . YEAR ) ; String yearInString = String . valueOf ( year ) ; Log . d ( TAG , _STR + yearInString ) ; int prevYear = year - _NUM ; String prevYearInString = String . valueOf ( prevYear ) ; Log . d ( TAG , _STR + prevYearInString ) ; for ( iterator = items . iterator ( ) ; iterator . hasNext ( ) ; ) { String s = iterator . next ( ) ; if ( s . matches ( _STR ) && ! s . contains ( yearInString ) && ! s . contains ( prevYearInString ) ) { Log . d ( TAG , _STR + s ) ; iterator . remove ( ) ; } } Log . d ( TAG , _STR + items . toString ( ) ) ; return items ; }
public DataProviderEvent ( final LocalizableMessage reason , final Set < Type > types ) { Reject . ifNull ( reason , types ) ; Reject . ifTrue ( types . isEmpty ( ) ) ; this . reason = reason ; final EnumSet < Type > tmp = EnumSet . noneOf ( Type . class ) ; tmp . addAll ( types ) ; this . types = Collections . unmodifiableSet ( tmp ) ; }
public < T > List < String > validateBean ( T bean , String errIfBeanNull ) { List < String > errors = new ArrayList < String > ( ) ; if ( bean == null ) { errors . add ( errIfBeanNull ) ; return errors ; } Set < ConstraintViolation < T > > violations = validator . validate ( bean ) ; for ( ConstraintViolation < T > violation : violations ) { errors . add ( violation . getMessage ( ) ) ; } return errors ; }
protected void smartInsertAfterBracket ( IDocument document , DocumentCommand command ) { if ( command . offset == - _NUM || document . getLength ( ) == _NUM ) { return ; } try { int p = ( command . offset == document . getLength ( ) ? command . offset - _NUM : command . offset ) ; int line = document . getLineOfOffset ( p ) ; int start = document . getLineOffset ( line ) ; int whiteend = findEndOfWhiteSpace ( document , start , command . offset ) ; if ( whiteend == command . offset ) { int indLine = findMatchingOpenBracket ( document , line , command . offset , _NUM ) ; if ( indLine != - _NUM && indLine != line ) { StringBuffer replaceText = new StringBuffer ( getIndentOfLine ( document , indLine ) ) ; replaceText . append ( document . get ( whiteend , command . offset - whiteend ) ) ; replaceText . append ( command . text ) ; command . length = command . offset - start ; command . offset = start ; command . text = replaceText . toString ( ) ; } } } catch ( BadLocationException e ) { GWTPluginLog . logError ( e ) ; } }
private String attemptToChooseFormattingPattern ( ) { if ( nationalNumber . length ( ) >= MIN_LEADING_DIGITS_LENGTH ) { getAvailableFormats ( nationalNumber . toString ( ) ) ; String formattedNumber = attemptToFormatAccruedDigits ( ) ; if ( formattedNumber . length ( ) > _NUM ) { return formattedNumber ; } return maybeCreateNewTemplate ( ) ? inputAccruedNationalNumber ( ) : accruedInput . toString ( ) ; } else { return appendNationalNumber ( nationalNumber . toString ( ) ) ; } }
private void fillPicks ( ) throws Exception { MLookup orgL = MLookupFactory . get ( Env . getCtx ( ) , m_WindowNo , _NUM , _NUM , DisplayType . TableDir ) ; fWarehouse = new VLookup ( _STR , _BOOL , _BOOL , _BOOL , orgL ) ; lWarehouse . setText ( Msg . translate ( Env . getCtx ( ) , _STR ) ) ; fWarehouse . addVetoableChangeListener ( this ) ; m_M_Warehouse_ID = fWarehouse . getValue ( ) ; MLookup bpL = MLookupFactory . get ( Env . getCtx ( ) , m_WindowNo , _NUM , _NUM , DisplayType . Search ) ; fBPartner = new VLookup ( _STR , _BOOL , _BOOL , _BOOL , bpL ) ; lBPartner . setText ( Msg . translate ( Env . getCtx ( ) , _STR ) ) ; fBPartner . addVetoableChangeListener ( this ) ; lDocType . setText ( Msg . translate ( Env . getCtx ( ) , _STR ) ) ; cmbDocType . addItem ( new KeyNamePair ( MOrder . Table_ID , Msg . translate ( Env . getCtx ( ) , _STR ) ) ) ; cmbDocType . addItem ( new KeyNamePair ( MRMA . Table_ID , Msg . translate ( Env . getCtx ( ) , _STR ) ) ) ; cmbDocType . addActionListener ( this ) ; }
@ Override protected FieldConfigBase createCopy ( FieldConfigBase fieldConfigBase ) { FieldConfigFontPreview copy = null ; if ( fieldConfigBase != null ) { copy = new FieldConfigFontPreview ( fieldConfigBase . getCommonData ( ) ) ; } return copy ; }
public void testConstructorSignBytesZeroNull3 ( ) { byte aBytes [ ] = { } ; int aSign = _NUM ; byte rBytes [ ] = { _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , aNumber . signum ( ) ) ; }
public Object castToType ( int t , XPathContext support ) throws javax . xml . transform . TransformerException { Object result ; switch ( t ) { case CLASS_STRING : result = str ( ) ; break ; case CLASS_NUMBER : result = new Double ( num ( ) ) ; break ; case CLASS_NODESET : result = iter ( ) ; break ; case CLASS_BOOLEAN : result = new Boolean ( bool ( ) ) ; break ; case CLASS_UNKNOWN : result = m_obj ; break ; default : error ( XPATHErrorResources . ER_CANT_CONVERT_TO_TYPE , new Object [ ] { getTypeString ( ) , Integer . toString ( t ) } ) ; result = null ; } return result ; }
public static void forceDeleteOnExit ( File file ) throws IOException { if ( file . isDirectory ( ) ) { deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit ( ) ; } }
public boolean init ( StepMetaInterface smi , StepDataInterface sdi ) { this . meta = ( ( SortKeyStepMeta ) smi ) ; this . data = ( ( SortKeyStepData ) sdi ) ; return super . init ( smi , sdi ) ; }
private void printAnnotationFromEditor ( final WorkflowAnnotation anno , final Graphics2D g2 ) { Graphics2D gPr = ( Graphics2D ) g2 . create ( ) ; Rectangle2D loc = anno . getLocation ( ) ; gPr . translate ( loc . getX ( ) , loc . getY ( ) ) ; gPr . setClip ( _NUM , _NUM , ( int ) loc . getWidth ( ) , ( int ) loc . getHeight ( ) ) ; Dimension size = new Dimension ( ( int ) loc . getWidth ( ) , ( int ) loc . getHeight ( ) ) ; pane . setSize ( size ) ; pane . setText ( AnnotationDrawUtils . createStyledCommentString ( anno ) ) ; pane . setCaretPosition ( _NUM ) ; pane . paint ( gPr ) ; gPr . dispose ( ) ; }
public void add ( IPoint pt ) { if ( inProgress ) { throw new ConcurrentModificationException ( _STR ) ; } points . add ( pt ) ; }
public static Configuration load ( Reader reader ) throws IOException { try { Properties properties = new Properties ( ) ; properties . load ( reader ) ; return from ( properties ) ; } finally { reader . close ( ) ; } }
public void add ( OffsettedItem item ) { throwIfPrepared ( ) ; try { if ( item . getAlignment ( ) > getAlignment ( ) ) { throw new IllegalArgumentException ( _STR ) ; } } catch ( NullPointerException ex ) { throw new NullPointerException ( _STR ) ; } items . add ( item ) ; }
public static void addAnnotationToXML ( Element annotationsElement , String name , String value ) { if ( value == null ) { deleteAnnotationFromXML ( annotationsElement , name ) ; } else { final Document doc = annotationsElement . getOwnerDocument ( ) ; Element elem = doc . createElement ( _STR ) ; annotationsElement . appendChild ( elem ) ; elem . setAttribute ( _STR , name ) ; elem . setTextContent ( value ) ; } }
public boolean readBoolean ( ) throws IOException { return primitiveTypes . readBoolean ( ) ; }
public Enumeration < String > enumerateMeasures ( ) { Vector < String > newVector = new Vector < String > ( _NUM ) ; newVector . addElement ( _STR ) ; return newVector . elements ( ) ; }
@ Override public Instances defineDataFormat ( ) throws Exception { ArrayList < Attribute > atts ; ArrayList < String > attValues ; int i ; m_Random = new Random ( getSeed ( ) ) ; m_nextClassShouldBeZero = _BOOL ; m_lastLabel = Double . NaN ; setNumExamplesAct ( getNumExamples ( ) ) ; atts = new ArrayList < Attribute > ( ) ; atts . add ( new Attribute ( _STR ) ) ; atts . add ( new Attribute ( _STR ) ) ; atts . add ( new Attribute ( _STR ) ) ; attValues = new ArrayList < String > ( ) ; for ( i = _NUM ; i < _NUM ; i ++ ) { attValues . add ( _STR + i ) ; } atts . add ( new Attribute ( _STR , attValues ) ) ; attValues = new ArrayList < String > ( ) ; for ( i = _NUM ; i <= _NUM ; i ++ ) { attValues . add ( _STR + i ) ; } atts . add ( new Attribute ( _STR , attValues ) ) ; attValues = new ArrayList < String > ( ) ; for ( i = _NUM ; i < _NUM ; i ++ ) { attValues . add ( _STR + i ) ; } atts . add ( new Attribute ( _STR , attValues ) ) ; atts . add ( new Attribute ( _STR ) ) ; atts . add ( new Attribute ( _STR ) ) ; atts . add ( new Attribute ( _STR ) ) ; attValues = new ArrayList < String > ( ) ; for ( i = _NUM ; i < _NUM ; i ++ ) { attValues . add ( _STR + i ) ; } atts . add ( new Attribute ( _STR , attValues ) ) ; m_DatasetFormat = new Instances ( getRelationNameToUse ( ) , atts , _NUM ) ; return m_DatasetFormat ; }
public static double lnGamma ( double alpha ) { double x = alpha , f = _NUM , z ; if ( x < _NUM ) { f = _NUM ; z = x - _NUM ; while ( ++ z < _NUM ) { f *= z ; } x = z ; f = - Math . log ( f ) ; } z = _NUM / ( x * x ) ; return f + ( x - _NUM ) * Math . log ( x ) - x + _NUM + ( ( ( - _NUM * z + _NUM ) * z - _NUM ) * z + _NUM ) / x ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
public void startTicker ( long delay , boolean rightToLeft ) { if ( ! tickerEnabled ) { return ; } if ( ! isCellRenderer ( ) ) { Form parent = getComponentForm ( ) ; if ( parent != null ) { parent . registerAnimatedInternal ( this ) ; } } tickerStartTime = System . currentTimeMillis ( ) ; tickerDelay = delay ; tickerRunning = _BOOL ; this . rightToLeft = rightToLeft ; if ( isRTL ( ) ) { this . rightToLeft = ! this . rightToLeft ; } }
static CipherSuite valueOf ( int id1 , int id2 ) { id1 &= _NUM ; id2 &= _NUM ; int id = ( id1 << _NUM ) | id2 ; CipherSuite c = idMap . get ( id ) ; if ( c == null ) { String h1 = Integer . toString ( id1 , _NUM ) ; String h2 = Integer . toString ( id2 , _NUM ) ; c = new CipherSuite ( _STR + h1 + _STR + h2 , id ) ; } return c ; }
public static Context createPendingActionContext ( Context context , ReconAction action , String mappingName , JsonValue sourceObject , String reconId , Situation situation ) { Map < String , Object > pendingActionMap = new HashMap < String , Object > ( ) ; pendingActionMap . put ( MAPPING_NAME , mappingName ) ; pendingActionMap . put ( SOURCE_OBJECT , sourceObject ) ; pendingActionMap . put ( RECON_ID , reconId ) ; pendingActionMap . put ( ORIGINAL_SITUATION , situation . toString ( ) ) ; PendingActionContext pendingActionContext = new PendingActionContext ( context , pendingActionMap , action . toString ( ) ) ; return pendingActionContext ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
public void showDroidsafeTextMarkers ( IEditorPart openedEditor , String className ) { if ( openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null ) { ITextEditor editor = ( ITextEditor ) openedEditor ; if ( fProcessedClasses . contains ( className ) ) { if ( fClassesNeedUpdate . contains ( className ) ) { ClassMarkerProcessor classProcessor = get ( className ) ; classProcessor . updateTaintMarkers ( editor ) ; fClassesNeedUpdate . remove ( className ) ; } } else { fProcessedClasses . add ( className ) ; Map < String , Map < IntRange , Map < String , Set < CallLocationModel > > > > classTaintedDataMap = fTaintedDataMap . get ( className ) ; Map < String , Set < IntRange > > classUnreachableMethodMap = fUnreachableSourceMethodMap . get ( className ) ; if ( classTaintedDataMap != null || classUnreachableMethodMap != null ) { IEditorInput input = editor . getEditorInput ( ) ; if ( input instanceof FileEditorInput ) { ClassMarkerProcessor classProcessor = get ( className ) ; classProcessor . showDroidsafeTextMarkers ( editor ) ; } } } } }
private static void resolveNewExpression ( NewExpression objSubjectExpression , HashSet < String > objTypesSet ) { ClassReference objClassRef = objSubjectExpression . getClassReference ( ) ; if ( null == objClassRef || null == objClassRef . getFQN ( ) ) { objTypesSet . add ( Types . strResolvingAbortedOnPsiLevel ) ; return ; } objTypesSet . add ( objClassRef . getFQN ( ) ) ; }
private static List < Size > pickUpToThree ( List < Size > sizes ) { List < Size > result = new ArrayList < Size > ( ) ; Size largest = sizes . get ( _NUM ) ; result . add ( largest ) ; Size lastSize = largest ; for ( Size size : sizes ) { double targetArea = Math . pow ( _NUM , result . size ( ) ) * area ( largest ) ; if ( area ( size ) < targetArea ) { if ( ! result . contains ( lastSize ) && ( targetArea - area ( lastSize ) < area ( size ) - targetArea ) ) { result . add ( lastSize ) ; } else { result . add ( size ) ; } } lastSize = size ; if ( result . size ( ) == _NUM ) { break ; } } if ( result . size ( ) < _NUM && ! result . contains ( lastSize ) ) { result . add ( lastSize ) ; } return result ; }
private boolean verifyLogRecord ( String [ ] record , int macPos ) throws Exception { StringBuilder data = new StringBuilder ( ) ; for ( int m = _NUM ; m < record . length - _NUM ; m ++ ) { data . append ( record [ m ] ) ; } curMAC = record [ macPos ] ; verified = helper . verifyMAC ( data . toString ( ) , helper . toByteArray ( curMAC ) ) ; return verified ; }
public static void copyToClipboard ( Transferable t ) { ClipboardHelper . copyToClipboard ( t ) ; }
public static String formatPercent ( int downloadSize , int fileSize ) { float num = ( float ) downloadSize / fileSize ; float percent = ( ( float ) ( int ) ( num * _NUM ) ) / _NUM ; return String . valueOf ( percent + _STR ) ; }
final private String attrDef2AttrDesc ( Attributes attrs ) throws NamingException { StringBuffer attrDesc = new StringBuffer ( _STR ) ; Attribute attr = null ; int count = _NUM ; attr = attrs . get ( NUMERICOID_ID ) ; if ( attr != null ) { attrDesc . append ( writeNumericOID ( attr ) ) ; count ++ ; } else { throw new ConfigurationException ( _STR + _STR ) ; } attr = attrs . get ( NAME_ID ) ; if ( attr != null ) { attrDesc . append ( writeQDescrs ( attr ) ) ; count ++ ; } attr = attrs . get ( DESC_ID ) ; if ( attr != null ) { attrDesc . append ( writeQDString ( attr ) ) ; count ++ ; } attr = attrs . get ( OBSOLETE_ID ) ; if ( attr != null ) { attrDesc . append ( writeBoolean ( attr ) ) ; count ++ ; } attr = attrs . get ( SUP_ID ) ; if ( attr != null ) { attrDesc . append ( writeWOID ( attr ) ) ; count ++ ; } attr = attrs . get ( EQUALITY_ID ) ; if ( attr != null ) { attrDesc . append ( writeWOID ( attr ) ) ; count ++ ; } attr = attrs . get ( ORDERING_ID ) ; if ( attr != null ) { attrDesc . append ( writeWOID ( attr ) ) ; count ++ ; } attr = attrs . get ( SUBSTR_ID ) ; if ( attr != null ) { attrDesc . append ( writeWOID ( attr ) ) ; count ++ ; } attr = attrs . get ( SYNTAX_ID ) ; if ( attr != null ) { attrDesc . append ( writeWOID ( attr ) ) ; count ++ ; } attr = attrs . get ( SINGLE_VAL_ID ) ; if ( attr != null ) { attrDesc . append ( writeBoolean ( attr ) ) ; count ++ ; } attr = attrs . get ( COLLECTIVE_ID ) ; if ( attr != null ) { attrDesc . append ( writeBoolean ( attr ) ) ; count ++ ; } attr = attrs . get ( NO_USER_MOD_ID ) ; if ( attr != null ) { attrDesc . append ( writeBoolean ( attr ) ) ; count ++ ; } attr = attrs . get ( USAGE_ID ) ; if ( attr != null ) { attrDesc . append ( writeQDString ( attr ) ) ; count ++ ; } if ( count < attrs . size ( ) ) { String attrId = null ; for ( NamingEnumeration < ? extends Attribute > ae = attrs . getAll ( ) ; ae . hasMoreElements ( ) ; ) { attr = ae . next ( ) ; attrId = attr . getID ( ) ; if ( attrId . equals ( NUMERICOID_ID ) || attrId . equals ( NAME_ID ) || attrId . equals ( SYNTAX_ID ) || attrId . equals ( DESC_ID ) || attrId . equals ( SINGLE_VAL_ID ) || attrId . equals ( EQUALITY_ID ) || attrId . equals ( ORDERING_ID ) || attrId . equals ( SUBSTR_ID ) || attrId . equals ( NO_USER_MOD_ID ) || attrId . equals ( USAGE_ID ) || attrId . equals ( SUP_ID ) || attrId . equals ( COLLECTIVE_ID ) || attrId . equals ( OBSOLETE_ID ) ) { continue ; } else { attrDesc . append ( writeQDStrings ( attr ) ) ; } } } attrDesc . append ( _STR ) ; return attrDesc . toString ( ) ; }
private void updateActions ( ) { String selectedText = getSelectedText ( ) ; if ( selectedText == null ) selectedText = _STR ; boolean stuffSelected = ! selectedText . equals ( _STR ) ; boolean allSelected = selectedText . equals ( getText ( ) ) ; UNDO_ACTION . setEnabled ( isEnabled ( ) && isEditable ( ) && isUndoAvailable ( ) ) ; CUT_ACTION . setEnabled ( isEnabled ( ) && isEditable ( ) && stuffSelected ) ; COPY_ACTION . setEnabled ( isEnabled ( ) && stuffSelected ) ; PASTE_ACTION . setEnabled ( isEnabled ( ) && isEditable ( ) && isPasteAvailable ( ) ) ; DELETE_ACTION . setEnabled ( isEnabled ( ) && stuffSelected ) ; SELECT_ALL_ACTION . setEnabled ( isEnabled ( ) && ! allSelected ) ; }
public static < T > Collection < T > makeImmutable ( Collection < T > mutableCollection ) { Collection < T > newCollection ; try { @ SuppressWarnings ( _STR ) Class < Collection < T > > cls = ( Class < Collection < T > > ) mutableCollection . getClass ( ) ; newCollection = cls . newInstance ( ) ; } catch ( InstantiationException | IllegalAccessException e ) { throw new IllegalStateException ( e ) ; } for ( T element : mutableCollection ) { newCollection . add ( Utils . makeImmutable ( element ) ) ; } return Collections . unmodifiableCollection ( newCollection ) ; }
public synchronized void trackHexImages ( IHex hex , MediaTracker tracker ) { Image base = hexToImageCache . get ( hex ) ; List < Image > superImgs = hexToImageListCache . get ( hex ) ; List < Image > orthoImgs = orthoListCache . get ( hex ) ; tracker . addImage ( base , _NUM ) ; if ( superImgs != null ) { for ( Iterator < Image > i = superImgs . iterator ( ) ; i . hasNext ( ) ; ) { tracker . addImage ( i . next ( ) , _NUM ) ; } } if ( orthoImgs != null ) { for ( Iterator < Image > i = orthoImgs . iterator ( ) ; i . hasNext ( ) ; ) { tracker . addImage ( i . next ( ) , _NUM ) ; } } }
public static Date parseText ( String dateStr ) { try { return mSimpleTextFormat . parse ( dateStr ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; throw new RuntimeException ( _STR ) ; } }
public boolean isProcessed ( Trace trace , Node node , Direction direction ) { boolean ret = _BOOL ; if ( processor . getNodeType ( ) == node . getType ( ) && processor . getDirection ( ) == direction ) { if ( uriFilter == null || uriFilter . test ( node . getUri ( ) ) ) { ret = _BOOL ; } } if ( log . isLoggable ( Level . FINEST ) ) { log . finest ( _STR + trace + _STR + node + _STR + direction + _STR + ret ) ; } return ret ; }
@ Override public synchronized void powerOnSelfTest ( ) throws Error { for ( Iterator < WaveformSynthesizer > it = waveformSynthesizers . iterator ( ) ; it . hasNext ( ) ; ) { WaveformSynthesizer ws = it . next ( ) ; ws . powerOnSelfTest ( ) ; } }
private QuadEdge [ ] fetchTriangleToVisit ( QuadEdge edge , Stack edgeStack , boolean includeFrame , Set visitedEdges ) { QuadEdge curr = edge ; int edgeCount = _NUM ; boolean isFrame = _BOOL ; do { triEdges [ edgeCount ] = curr ; if ( isFrameEdge ( curr ) ) isFrame = _BOOL ; QuadEdge sym = curr . sym ( ) ; if ( ! visitedEdges . contains ( sym ) ) edgeStack . push ( sym ) ; visitedEdges . add ( curr ) ; edgeCount ++ ; curr = curr . lNext ( ) ; } while ( curr != edge ) ; if ( isFrame && ! includeFrame ) return null ; return triEdges ; }
public Collection engineGenerateCRLs ( InputStream inStream ) throws CRLException { CRL crl ; List crls = new ArrayList ( ) ; while ( ( crl = engineGenerateCRL ( inStream ) ) != null ) { crls . add ( crl ) ; } return crls ; }
public void deleteEntityConfig ( String realm , String federationId ) throws WSFederationMetaException { if ( federationId == null ) { return ; } if ( realm == null ) { realm = _STR ; } String [ ] objs = { federationId , realm } ; try { Map oldAttrs = configInst . getConfiguration ( realm , federationId ) ; Set oldValues = ( Set ) oldAttrs . get ( ATTR_ENTITY_CONFIG ) ; if ( oldValues == null || oldValues . isEmpty ( ) ) { LogUtil . error ( Level . INFO , LogUtil . NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG , objs , null ) ; throw new WSFederationMetaException ( _STR , objs ) ; } IDPSSOConfigElement idpconfig = getIDPSSOConfig ( realm , federationId ) ; if ( idpconfig != null ) { removeFromCircleOfTrust ( idpconfig , realm , federationId ) ; } SPSSOConfigElement spconfig = getSPSSOConfig ( realm , federationId ) ; if ( spconfig != null ) { removeFromCircleOfTrust ( spconfig , realm , federationId ) ; } Set attr = new HashSet ( ) ; attr . add ( ATTR_ENTITY_CONFIG ) ; configInst . deleteConfiguration ( realm , federationId , attr ) ; LogUtil . access ( Level . INFO , LogUtil . ENTITY_CONFIG_DELETED , objs , null ) ; WSFederationMetaCache . putEntityConfig ( realm , federationId , null ) ; } catch ( ConfigurationException e ) { debug . error ( _STR , e ) ; String [ ] data = { e . getMessage ( ) , federationId , realm } ; LogUtil . error ( Level . INFO , LogUtil . CONFIG_ERROR_DELETE_ENTITY_CONFIG , data , null ) ; throw new WSFederationMetaException ( e ) ; } }
public static synchronized DataSourceViewsManager sharedInstance ( ) { if ( sharedInstance == null ) sharedInstance = new DataSourceViewsManager ( ) ; return sharedInstance ; }
public String tag ( String inner , String c1 , String c2 ) { boolean color = ( ( attr & ATTR_COLOR ) == ATTR_COLOR ) && ToastBootstrap . color ; String s = _STR ; if ( color ) s += _STR + c1 + _STR ; s += inner ; if ( color ) s += _STR + c2 + _STR ; s += _STR ; if ( color ) s += _STR + c1 + _STR ; return color ? Pretty . format ( s ) : s ; }
private final String loadXmlDefinition ( ) { final Cache cache = CacheFactory . getAnyInstance ( ) ; final StringWriter stringWriter = new StringWriter ( ) ; final PrintWriter printWriter = new PrintWriter ( stringWriter ) ; CacheXmlGenerator . generate ( cache , printWriter , _BOOL , _BOOL , _BOOL ) ; printWriter . close ( ) ; return loadXmlDefinition ( stringWriter . toString ( ) ) ; }
private Long id ( HttpServletRequest request ) { Long id = null ; String pathInfo = request . getPathInfo ( ) ; if ( pathInfo != null && pathInfo . length ( ) > _NUM ) { String idString = pathInfo . substring ( _NUM ) ; id = Long . valueOf ( idString ) ; } return id ; }
public void uncompress ( ) { data . position ( _NUM ) ; InflaterInputStream inflater = new InflaterInputStream ( data . asInputStream ( ) ) ; byte [ ] buffer = new byte [ _NUM ] ; IoBuffer tmp = IoBuffer . allocate ( _NUM ) ; tmp . setAutoExpand ( _BOOL ) ; try { while ( inflater . available ( ) > _NUM ) { int decompressed = inflater . read ( buffer ) ; if ( decompressed <= _NUM ) { break ; } tmp . put ( buffer , _NUM , decompressed ) ; } } catch ( IOException e ) { tmp . free ( ) ; throw new RuntimeException ( _STR , e ) ; } finally { if ( inflater != null ) { try { inflater . close ( ) ; } catch ( IOException e1 ) { } } } data . free ( ) ; data = tmp ; data . flip ( ) ; prepareIO ( ) ; }
public void poll ( final TcpSocketStatisticsHandler handler ) { this . statisticsHandler = handler ; try { fileLoader . load ( ) ; final ByteBuffer buffer = fileLoader . getBuffer ( ) ; lineParser . reset ( ) ; lineParser . handleToken ( buffer , buffer . position ( ) , buffer . limit ( ) ) ; } finally { this . statisticsHandler = null ; } monitoredSockets . purgeEntriesOlderThan ( updateCount ) ; updateCount ++ ; }
@ Override public void close ( ) throws IOException { synchronized ( lock ) { if ( ! isClosed ( ) ) { in . close ( ) ; buf = null ; } } }
public int compareTo ( CharBuffer otherBuffer ) { int compareRemaining = ( remaining ( ) < otherBuffer . remaining ( ) ) ? remaining ( ) : otherBuffer . remaining ( ) ; int thisPos = position ; int otherPos = otherBuffer . position ; char thisByte , otherByte ; while ( compareRemaining > _NUM ) { thisByte = get ( thisPos ) ; otherByte = otherBuffer . get ( otherPos ) ; if ( thisByte != otherByte ) { return thisByte < otherByte ? - _NUM : _NUM ; } thisPos ++ ; otherPos ++ ; compareRemaining -- ; } return remaining ( ) - otherBuffer . remaining ( ) ; }
public UrbanSimZoneCSVWriterV2 ( String matsim4opusTempDirectory , String matsimOutputDirectory ) { this . matsim4opusTempDirectory = matsim4opusTempDirectory ; this . matsimOutputDirectory = matsimOutputDirectory ; try { log . info ( _STR ) ; zoneWriter = IOUtils . getBufferedWriter ( matsim4opusTempDirectory + FILE_NAME ) ; log . info ( _STR + matsim4opusTempDirectory + FILE_NAME + _STR ) ; zoneWriter . write ( Labels . ZONE_ID + _STR + Labels . ACCESSIBILITY_BY_FREESPEED + _STR + Labels . ACCESSIBILITY_BY_CAR + _STR + Labels . ACCESSIBILITY_BY_BIKE + _STR + Labels . ACCESSIBILITY_BY_WALK + _STR + Labels . ACCESSIBILITY_BY_PT ) ; zoneWriter . newLine ( ) ; log . info ( _STR ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
@ Override public void agg ( Object newVal ) { if ( newVal instanceof byte [ ] ) { ByteBuffer buffer = ByteBuffer . wrap ( ( byte [ ] ) newVal ) ; buffer . rewind ( ) ; while ( buffer . hasRemaining ( ) ) { aggVal += buffer . getLong ( ) ; count += buffer . getDouble ( ) ; firstTime = _BOOL ; } return ; } aggVal += ( Long ) newVal ; count ++ ; firstTime = _BOOL ; }
private static PolicyNotification extractPolicyNotification ( String xml ) throws PolicyEvaluationException { PolicyNotification policyNotification = null ; try { String notificationDataBlock = getNotificationDataBlock ( xml ) ; if ( notificationDataBlock != null ) { Document doc = XMLUtils . getXMLDocument ( new ByteArrayInputStream ( notificationDataBlock . getBytes ( ) ) ) ; Node rootNode = XMLUtils . getRootNode ( doc , NODE_POLICY_SERVICE ) ; if ( rootNode != null ) { Node notificationNode = XMLUtils . getChildNode ( rootNode , NODE_POLICY_NOTIFICATION ) ; if ( notificationNode != null ) { policyNotification = PolicyNotification . parseXML ( notificationNode ) ; } else { debug . error ( _STR + _STR + _STR ) ; throw new PolicyEvaluationException ( ResBundleUtils . rbName , _STR , null , null ) ; } } else { debug . error ( _STR + _STR ) ; } } else { debug . error ( _STR + _STR + _STR ) ; } } catch ( Exception xe ) { debug . error ( _STR , xe ) ; throw new PolicyEvaluationException ( ResBundleUtils . rbName , _STR , null , xe ) ; } return policyNotification ; }
public synchronized void flush ( ) throws IOException { checkNotClosed ( ) ; trimToSize ( ) ; journalWriter . flush ( ) ; }
private Object findParcel ( @ NonNull byte [ ] objectArray , @ NonNull String className ) { try { Class classTmp = getClassForName ( className ) ; Constructor declaredConstructor = classTmp . getDeclaredConstructor ( Parcel . class ) ; declaredConstructor . setAccessible ( _BOOL ) ; return declaredConstructor . newInstance ( WearBusTools . byteToParcel ( objectArray ) ) ; } catch ( Exception e ) { Log . d ( WearBusTools . BUSWEAR_TAG , _STR + e . getMessage ( ) ) ; } return null ; }
private static final String decodeFieldName ( final String pXmlFieldName ) { StringBuilder str = new StringBuilder ( ) ; int fieldNameLength = pXmlFieldName . length ( ) ; char currentChar ; for ( int i = _NUM ; i < fieldNameLength ; i ++ ) { currentChar = pXmlFieldName . charAt ( i ) ; if ( currentChar == _STR ) { str . append ( Character . toUpperCase ( pXmlFieldName . charAt ( ++ i ) ) ) ; } else { str . append ( currentChar ) ; } } return str . toString ( ) ; }
public boolean isLoginSet ( ) { return ( username != null && ( password != null && ! username . equals ( _STR ) && ! password . equals ( _STR ) ) ) || oauth ; }
public void addContentItem ( ContentItem contentItem ) { if ( contentItems == null ) { contentItems = new ArrayList < ContentItem > ( ) ; } contentItems . add ( contentItem ) ; }
public static String canonicalizeClassName ( String name ) { String classname = name . replace ( _STR , _STR ) ; classname = classname . replace ( _STR , _STR ) ; if ( classname . startsWith ( _STR ) ) classname = classname . substring ( _NUM ) ; if ( classname . endsWith ( _STR ) ) classname = classname . substring ( _NUM , classname . length ( ) - _NUM ) ; return classname ; }
public static final void pause ( final int milliseconds ) { if ( milliseconds >= _NUM || logger . isDebugEnabled ( ) ) { logger . info ( _STR , milliseconds ) ; } final long target = System . currentTimeMillis ( ) + milliseconds ; try { for ( ; ; ) { long msLeft = target - System . currentTimeMillis ( ) ; if ( msLeft <= _NUM ) { break ; } Thread . sleep ( msLeft ) ; } } catch ( InterruptedException e ) { Assert . fail ( _STR , e ) ; } }
public boolean isHighlightWithInvisibleEdge ( ) { return highlightWithInvisibleEdge ; }
private Configuration prepareJobForCancelling ( ) throws Exception { prepareFile ( _STR , _NUM ) ; executedTasks . set ( _NUM ) ; cancelledTasks . set ( _NUM ) ; failMapperId . set ( _NUM ) ; splitsCount . set ( _NUM ) ; Configuration cfg = new Configuration ( ) ; setupFileSystems ( cfg ) ; Job job = Job . getInstance ( cfg ) ; job . setOutputKeyClass ( Text . class ) ; job . setOutputValueClass ( IntWritable . class ) ; job . setMapperClass ( CancellingTestMapper . class ) ; job . setNumReduceTasks ( _NUM ) ; job . setInputFormatClass ( InFormat . class ) ; FileInputFormat . setInputPaths ( job , new Path ( _STR + getTestGridName ( _NUM ) + _STR ) ) ; FileOutputFormat . setOutputPath ( job , new Path ( _STR + getTestGridName ( _NUM ) + _STR ) ) ; job . setJarByClass ( getClass ( ) ) ; return job . getConfiguration ( ) ; }
public void removeChangingListener ( OnWheelChangedListener listener ) { changingListeners . remove ( listener ) ; }
public static double [ ] lsf2lpc ( double [ ] lsf ) { MathUtils . quickSort ( lsf ) ; int P = lsf . length ; int half_order = P / _NUM ; int i , j ; double xf , xx ; double [ ] a = new double [ P / _NUM + _NUM ] ; double [ ] a1 = new double [ P / _NUM + _NUM ] ; double [ ] a2 = new double [ P / _NUM + _NUM ] ; double [ ] b = new double [ P / _NUM + _NUM ] ; double [ ] b1 = new double [ P / _NUM + _NUM ] ; double [ ] b2 = new double [ P / _NUM + _NUM ] ; double [ ] p = new double [ P / _NUM ] ; double [ ] q = new double [ P / _NUM ] ; double [ ] oneMinusA = new double [ P + _NUM ] ; oneMinusA [ _NUM ] = _NUM ; if ( ( lsf [ _NUM ] <= _NUM ) || ( lsf [ _NUM ] >= _NUM ) ) { throw new IllegalArgumentException ( _STR + lsf [ _NUM ] ) ; } for ( i = _NUM ; i < P ; i ++ ) { if ( lsf [ i ] <= lsf [ i - _NUM ] ) throw new IllegalArgumentException ( _STR ) ; if ( ( lsf [ i ] <= _NUM ) || ( lsf [ i ] >= _NUM ) ) throw new IllegalArgumentException ( _STR + i + _STR + lsf [ i ] ) ; } for ( i = _NUM ; i < half_order ; i ++ ) { p [ i ] = - _NUM * Math . cos ( MathUtils . TWOPI * lsf [ _NUM * i ] ) ; q [ i ] = - _NUM * Math . cos ( MathUtils . TWOPI * lsf [ _NUM * i + _NUM ] ) ; } xf = _NUM ; for ( i = _NUM ; i <= P ; i ++ ) { if ( i == _NUM ) xx = _NUM ; else xx = _NUM ; a [ _NUM ] = xx + xf ; b [ _NUM ] = xx - xf ; xf = xx ; for ( j = _NUM ; j < half_order ; j ++ ) { a [ j + _NUM ] = a [ j ] + p [ j ] * a1 [ j ] + a2 [ j ] ; b [ j + _NUM ] = b [ j ] + q [ j ] * b1 [ j ] + b2 [ j ] ; a2 [ j ] = a1 [ j ] ; a1 [ j ] = a [ j ] ; b2 [ j ] = b1 [ j ] ; b1 [ j ] = b [ j ] ; } if ( i > _NUM ) oneMinusA [ i ] = _NUM * ( a [ half_order ] + b [ half_order ] ) ; } return oneMinusA ; }
protected void generateFields ( ) { for ( Iterator < Element > iterator = mElements . iterator ( ) ; iterator . hasNext ( ) ; ) { Element element = iterator . next ( ) ; if ( ! element . used ) { iterator . remove ( ) ; continue ; } PsiField [ ] fields = mClass . getFields ( ) ; boolean duplicateField = _BOOL ; for ( PsiField field : fields ) { String name = field . getName ( ) ; if ( name != null && name . equals ( element . getFieldName ( ) ) ) { duplicateField = _BOOL ; break ; } } if ( duplicateField ) { iterator . remove ( ) ; continue ; } mClass . add ( mFactory . createFieldFromText ( _STR + element . name + _STR + element . getFieldName ( ) + _STR , mClass ) ) ; } }
public boolean isFlying ( ) { return ( flyThroughDialog != null ) ; }
public synchronized void init ( ) { channelFactory = new NioClientSocketChannelFactory ( Executors . newCachedThreadPool ( ) , Executors . newCachedThreadPool ( ) ) ; datagramChannelFactory = new NioDatagramChannelFactory ( Executors . newCachedThreadPool ( ) ) ; timer = new HashedWheelTimer ( ) ; }
public static String removePattern ( final String source , final String regex ) { return replacePattern ( source , regex , StringUtils . EMPTY ) ; }
private void consumeNestedScroll ( int dxUnconsumed , int dyUnconsumed , int dxFinalUnconsumed , int dyFinalUnconsumed ) { if ( mOverScrollEffect == OverScrollEffect . BOUNCE && dyFinalUnconsumed != _NUM ) { mUnconsumedOverScrollOffset += - dyFinalUnconsumed ; int maxOffset = mOverScrollOffsetLimit ; if ( mUnconsumedOverScrollOffset > _NUM ) { mUnconsumedOverScrollOffset = Math . min ( maxOffset , mUnconsumedOverScrollOffset ) ; } else if ( mUnconsumedOverScrollOffset < _NUM ) { mUnconsumedOverScrollOffset = Math . max ( - maxOffset , mUnconsumedOverScrollOffset ) ; } setScrollingOffset ( getUnconsumedScrollingOffset ( ) ) ; } pullEdgeEffects ( dxUnconsumed , dyUnconsumed ) ; }
private void retrieveWaypoints ( SearchQuery query , ArrayList < Waypoint > waypoints ) { String queryLikeSelection2 = _STR + query . textQuery + _STR ; String [ ] waypointSelectionArgs = new String [ ] { queryLikeSelection2 , queryLikeSelection2 , queryLikeSelection2 } ; Cursor cursor = null ; try { cursor = providerUtils . getWaypointCursor ( WAYPOINT_SELECTION_QUERY , waypointSelectionArgs , WAYPOINT_SELECTION_ORDER , MAX_SCORED_WAYPOINTS ) ; if ( cursor != null ) { waypoints . ensureCapacity ( cursor . getCount ( ) ) ; while ( cursor . moveToNext ( ) ) { Waypoint waypoint = providerUtils . createWaypoint ( cursor ) ; if ( LocationUtils . isValidLocation ( waypoint . getLocation ( ) ) ) { waypoints . add ( waypoint ) ; } } } } finally { if ( cursor != null ) { cursor . close ( ) ; } } }
void release ( ) { imageLoader . cancelPendingRequests ( ) ; loading = new boolean [ noxItems . size ( ) ] ; }
public int size ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { return count ; } finally { lock . unlock ( ) ; } }
public void add ( String name , long cnt ) { if ( _values == null ) { _values = new ArrayList < > ( _NUM ) ; } _values . add ( new Count ( this , name , cnt ) ) ; }
void closeDialog ( ) ;
private static void decodeTextCompaction ( int [ ] textCompactionData , int [ ] byteCompactionData , int length , StringBuilder result ) { Mode subMode = Mode . ALPHA ; Mode priorToShiftMode = Mode . ALPHA ; int i = _NUM ; while ( i < length ) { int subModeCh = textCompactionData [ i ] ; char ch = _NUM ; switch ( subMode ) { case ALPHA : if ( subModeCh < _NUM ) { ch = ( char ) ( _STR + subModeCh ) ; } else { if ( subModeCh == _NUM ) { ch = _STR ; } else if ( subModeCh == LL ) { subMode = Mode . LOWER ; } else if ( subModeCh == ML ) { subMode = Mode . MIXED ; } else if ( subModeCh == PS ) { priorToShiftMode = subMode ; subMode = Mode . PUNCT_SHIFT ; } else if ( subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE ) { result . append ( ( char ) byteCompactionData [ i ] ) ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; case LOWER : if ( subModeCh < _NUM ) { ch = ( char ) ( _STR + subModeCh ) ; } else { if ( subModeCh == _NUM ) { ch = _STR ; } else if ( subModeCh == AS ) { priorToShiftMode = subMode ; subMode = Mode . ALPHA_SHIFT ; } else if ( subModeCh == ML ) { subMode = Mode . MIXED ; } else if ( subModeCh == PS ) { priorToShiftMode = subMode ; subMode = Mode . PUNCT_SHIFT ; } else if ( subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE ) { result . append ( ( char ) byteCompactionData [ i ] ) ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; case MIXED : if ( subModeCh < PL ) { ch = MIXED_CHARS [ subModeCh ] ; } else { if ( subModeCh == PL ) { subMode = Mode . PUNCT ; } else if ( subModeCh == _NUM ) { ch = _STR ; } else if ( subModeCh == LL ) { subMode = Mode . LOWER ; } else if ( subModeCh == AL ) { subMode = Mode . ALPHA ; } else if ( subModeCh == PS ) { priorToShiftMode = subMode ; subMode = Mode . PUNCT_SHIFT ; } else if ( subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE ) { result . append ( ( char ) byteCompactionData [ i ] ) ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; case PUNCT : if ( subModeCh < PAL ) { ch = PUNCT_CHARS [ subModeCh ] ; } else { if ( subModeCh == PAL ) { subMode = Mode . ALPHA ; } else if ( subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE ) { result . append ( ( char ) byteCompactionData [ i ] ) ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; case ALPHA_SHIFT : subMode = priorToShiftMode ; if ( subModeCh < _NUM ) { ch = ( char ) ( _STR + subModeCh ) ; } else { if ( subModeCh == _NUM ) { ch = _STR ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; case PUNCT_SHIFT : subMode = priorToShiftMode ; if ( subModeCh < PAL ) { ch = PUNCT_CHARS [ subModeCh ] ; } else { if ( subModeCh == PAL ) { subMode = Mode . ALPHA ; } else if ( subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE ) { result . append ( ( char ) byteCompactionData [ i ] ) ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; } if ( ch != _NUM ) { result . append ( ch ) ; } i ++ ; } }
public MediaConfig createChannelFileAttachment ( String file , MediaConfig config ) { config . addCredentials ( this ) ; String xml = POSTFILE ( this . url + _STR , file , config . name , config . toXML ( ) ) ; Element root = parse ( xml ) ; if ( root == null ) { return null ; } try { MediaConfig media = new MediaConfig ( ) ; media . parseXML ( root ) ; return media ; } catch ( Exception exception ) { this . exception = SDKException . parseFailure ( exception ) ; throw this . exception ; } }
public void addParam ( AstNode param ) { assertNotNull ( param ) ; if ( params == null ) { params = new ArrayList < AstNode > ( ) ; } params . add ( param ) ; param . setParent ( this ) ; }
DeleteEvent ( @ NonNull JSONObject json ) throws JSONException { super ( TYPE_DELETE , json ) ; if ( TextUtils . isEmpty ( mBlockId ) ) { throw new JSONException ( TYPENAME_DELETE + _STR + JSON_BLOCK_ID ) ; } mOldXml = json . optString ( JSON_OLD_VALUE ) ; JSONArray ids = json . getJSONArray ( JSON_IDS ) ; int count = ids . length ( ) ; List < String > temp = new ArrayList < > ( count ) ; for ( int i = _NUM ; i < count ; ++ i ) { temp . add ( ids . getString ( i ) ) ; } mIds = Collections . unmodifiableList ( temp ) ; }
public static boolean isFullCopyRestorable ( Volume volume , DbClient dbClient ) { boolean result = _BOOL ; String replicaState = volume . getReplicaState ( ) ; if ( isVolumeFullCopy ( volume , dbClient ) && replicaState != null && ! replicaState . isEmpty ( ) ) { ReplicationState state = ReplicationState . getEnumValue ( replicaState ) ; if ( state != null && state == ReplicationState . SYNCHRONIZED ) { result = _BOOL ; } } return result ; }
private final static String [ ] readQDStrings ( String string , int [ ] pos ) throws NamingException { return readQDescrs ( string , pos ) ; }
private static boolean isBufferTooLarge ( ByteBuffer buf ) { return isBufferTooLarge ( buf . capacity ( ) ) ; }
public static void resetIndexBufferTime ( ) { SAFE_QUERY_TIME . set ( _NUM ) ; }
protected abstract AdminResponse createResponse ( DistributionManager dm ) ;
protected boolean checkExternalStorageAndNotify ( String fileName ) { if ( fileName != null && fileName . startsWith ( _STR ) ) { alertDownloadFailure ( R . string . download_no_sdcard_dlg_title ) ; return _BOOL ; } String status = Environment . getExternalStorageState ( ) ; if ( ! status . equals ( Environment . MEDIA_MOUNTED ) ) { int title ; if ( status . equals ( Environment . MEDIA_SHARED ) ) { title = R . string . download_sdcard_busy_dlg_title ; } else { title = R . string . download_no_sdcard_dlg_title ; } alertDownloadFailure ( title ) ; return _BOOL ; } return _BOOL ; }
public static String plnoun ( final int quantity , final String noun ) { final String enoun = fullForm ( noun ) ; if ( quantity == _NUM ) { return singular ( enoun ) ; } else { return plural ( noun ) ; } }
public boolean verifyXMLSignature ( org . w3c . dom . Element element , java . lang . String certAlias ) throws XMLSignatureException { return verifyXMLSignature ( element , DEF_ID_ATTRIBUTE , certAlias ) ; }
public void add ( Video video ) { videoList . add ( video ) ; notifyDataSetChanged ( ) ; }
private static boolean isInHorizontalTargetZone ( float x , float y , float handleXStart , float handleXEnd , float handleY , float targetRadius ) { if ( x > handleXStart && x < handleXEnd && Math . abs ( y - handleY ) <= targetRadius ) { return _BOOL ; } return _BOOL ; }
public void readTransportSystems ( final int [ ] columnsIndices , final BufferedReader reader ) throws IOException { String line = reader . readLine ( ) ; while ( line != null && line . length ( ) > _NUM ) { line = reader . readLine ( ) ; } }
private boolean hasPrefix ( byte [ ] nal ) { if ( nal [ _NUM ] == _NUM && nal [ _NUM ] == _NUM && nal [ _NUM ] == _NUM && nal [ _NUM ] == _NUM ) return _BOOL ; else return _BOOL ; }
private void unshareMain ( ) { int [ ] old = _mainHash ; int len = _mainHash . length ; _mainHash = new int [ len ] ; System . arraycopy ( old , _NUM , _mainHash , _NUM , len ) ; _mainHashShared = _BOOL ; }
public ComponentConfigBuilder addItemInMultifield ( String multifieldLabel , int index , String itemType , String itemLabel , String value ) { String type = String . format ( _STR , index , itemType ) ; String label = String . format ( _STR , multifieldLabel , itemLabel ) ; config . add ( new ConfigurationEntry ( currentTab , type , label , value ) ) ; return this ; }
public int size ( ) { return names . size ( ) ; }
public static IMultiPoint [ ] randomPoints ( int n , int d , int scale ) { IMultiPoint points [ ] = new IMultiPoint [ n ] ; for ( int i = _NUM ; i < n ; i ++ ) { StringBuilder sb = new StringBuilder ( ) ; for ( int j = _NUM ; j < d ; j ++ ) { sb . append ( rGen . nextDouble ( ) * scale ) ; if ( j < d - _NUM ) { sb . append ( _STR ) ; } } points [ i ] = new Hyperpoint ( sb . toString ( ) ) ; } return points ; }
private void parseParameters ( String parameters ) { Log . v ( _STR , _STR + _STR + parameters ) ; if ( parameters != null ) { int i ; do { i = parameters . indexOf ( _STR ) ; if ( i < _NUM ) { parseParameter ( parameters ) ; } else { parseParameter ( parameters . substring ( _NUM , i ) ) ; parameters = parameters . substring ( i + _NUM ) ; } } while ( i >= _NUM ) ; } }
public void addHttpSessionToken ( String site , String token ) { if ( ! site . contains ( _STR ) ) { site = site + ( _STR ) ; } HttpSessionTokensSet siteTokens = sessionTokens . get ( site ) ; if ( siteTokens == null ) { siteTokens = new HttpSessionTokensSet ( ) ; sessionTokens . put ( site , siteTokens ) ; } log . info ( _STR + site + _STR + token ) ; siteTokens . addToken ( token ) ; unmarkRemovedDefaultSessionToken ( site , token ) ; }
public GradleDistribution deserializeFromString ( String distributionString ) { Preconditions . checkNotNull ( distributionString ) ; String localInstallationPrefix = _STR ; if ( distributionString . startsWith ( localInstallationPrefix ) && distributionString . endsWith ( _STR ) ) { String localInstallationDir = distributionString . substring ( localInstallationPrefix . length ( ) , distributionString . length ( ) - _NUM ) ; return GradleDistribution . forLocalInstallation ( new File ( localInstallationDir ) ) ; } String remoteDistributionPrefix = _STR ; if ( distributionString . startsWith ( remoteDistributionPrefix ) && distributionString . endsWith ( _STR ) ) { String remoteDistributionUri = distributionString . substring ( remoteDistributionPrefix . length ( ) , distributionString . length ( ) - _NUM ) ; return GradleDistribution . forRemoteDistribution ( createURI ( remoteDistributionUri ) ) ; } String versionPrefix = _STR ; if ( distributionString . startsWith ( versionPrefix ) && distributionString . endsWith ( _STR ) ) { String version = distributionString . substring ( versionPrefix . length ( ) , distributionString . length ( ) - _NUM ) ; return GradleDistribution . forVersion ( version ) ; } String wrapperString = _STR ; if ( distributionString . equals ( wrapperString ) ) { return GradleDistribution . fromBuild ( ) ; } String message = String . format ( _STR , distributionString ) ; throw new RuntimeException ( message ) ; }
public double metersToPixels ( ) { double screenCenterLat = screenTopLeft . latitude - screenSize . latitude / _NUM ; double metersToLon = _NUM / ( Util . LON_TO_METERS_AT_EQUATOR * Math . cos ( screenCenterLat / _NUM * Math . PI ) ) ; return screenSize . longitude / windowWidth * metersToLon ; }
public boolean sendViaDataSocket ( byte [ ] bytes , int start , int len ) { if ( dataOutputStream == null ) { Log . i ( TAG , _STR ) ; return _BOOL ; } if ( len == _NUM ) { return _BOOL ; } try { dataOutputStream . write ( bytes , start , len ) ; } catch ( IOException e ) { Log . i ( TAG , _STR ) ; Log . i ( TAG , e . toString ( ) ) ; return _BOOL ; } localDataSocket . reportTraffic ( len ) ; return _BOOL ; }
private void pushContext ( BaseContext c ) { contextStack . push ( c ) ; }
@ Override public void bookmarksOrHistoryPicker ( ComboViews startView ) { if ( mTabControl . getCurrentWebView ( ) == null ) { return ; } if ( isInCustomActionMode ( ) ) { endActionMode ( ) ; } Bundle extras = new Bundle ( ) ; extras . putBoolean ( BrowserBookmarksPage . EXTRA_DISABLE_WINDOW , ! mTabControl . canCreateNewTab ( ) ) ; mUi . showComboView ( startView , extras ) ; }
public FST ( String fileName , String encoding , boolean verbose ) throws IOException { FileInputStream fis = new FileInputStream ( fileName ) ; try { loadHeaderless ( fis , encoding , verbose ) ; } finally { fis . close ( ) ; } }
public static double [ ] normalizeZscore ( double [ ] x ) { double mn = mean ( x , _NUM ) ; double sd = standardDeviation ( x , _NUM ) ; for ( int i = _NUM ; i < x . length ; i ++ ) if ( ! Double . isNaN ( x [ i ] ) ) x [ i ] = ( x [ i ] - mn ) / sd ; return x ; }
void addLocation ( String location ) { if ( fLocationList . contains ( location ) ) { return ; } fLocationList . add ( location ) ; fTableViewer . refresh ( ) ; fTableViewer . setChecked ( location , _BOOL ) ; fTableViewer . setSelection ( new StructuredSelection ( location ) ) ; validateLocations ( ) ; }
public JavaFormatter ( String lineDelimiter , int initialIndentLevel , boolean useCodeFormatter , IJavaProject project ) { fLineDelimiter = lineDelimiter ; fUseCodeFormatter = useCodeFormatter ; fInitialIndentLevel = initialIndentLevel ; fProject = project ; }
public String encode ( final String pString , final String charset ) throws EncoderException { if ( pString == null ) { return null ; } try { return encodeText ( pString , charset ) ; } catch ( UnsupportedEncodingException e ) { throw new EncoderException ( e . getMessage ( ) ) ; } }
private static void checkPathNeed ( ) { if ( samplingInterval == - _NUM ) { lastPreloadTime = readMorePaths ( ) ; } if ( ! Double . isNaN ( lastPreloadTime ) && SimClock . getTime ( ) >= lastPreloadTime - ( samplingInterval * MIN_AHEAD_INTERVALS ) ) { for ( int i = _NUM ; i < nrofPreload && ! Double . isNaN ( lastPreloadTime ) ; i ++ ) { lastPreloadTime = readMorePaths ( ) ; } } }
public double wide ( Prior prior , Likelihood likelihood ) throws OperatorFailedException { final int nodeCount = tree . getNodeCount ( ) ; final NodeRef root = tree . getRoot ( ) ; NodeRef i ; int indexI ; do { indexI = MathUtils . nextInt ( nodeCount ) ; i = tree . getNode ( indexI ) ; } while ( root == i || ( tree . getParent ( i ) == root && tree . getNodeHeight ( i ) > tree . getNodeHeight ( getOtherChild ( tree , tree . getParent ( i ) , i ) ) ) ) ; List < Integer > secondNodeIndices = new ArrayList < Integer > ( ) ; List < Double > probabilities = new ArrayList < Double > ( ) ; NodeRef j , jP ; NodeRef iP = tree . getParent ( i ) ; double heightIP = tree . getNodeHeight ( iP ) ; double heightI = tree . getNodeHeight ( i ) ; double sum = _NUM ; double backward = calculateTreeLikelihood ( prior , likelihood , tree ) ; int offset = ( int ) - backward ; backward = Math . exp ( backward + offset ) ; for ( int n = _NUM ; n < nodeCount ; n ++ ) { j = tree . getNode ( n ) ; if ( j != root ) { jP = tree . getParent ( j ) ; if ( ( iP != jP ) && ( tree . getNodeHeight ( j ) < heightIP ) && ( heightI < tree . getNodeHeight ( jP ) ) ) { secondNodeIndices . add ( n ) ; swap ( tree , i , j , iP , jP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; probabilities . add ( prob ) ; swap ( tree , i , j , jP , iP ) ; sum += prob ; } } } if ( sum <= _NUM ) { throw new OperatorFailedException ( _STR ) ; } double ran = Math . random ( ) * sum ; int index = _NUM ; while ( ran > _NUM ) { ran -= probabilities . get ( index ) ; index ++ ; } index -- ; j = tree . getNode ( secondNodeIndices . get ( index ) ) ; jP = tree . getParent ( j ) ; double heightJP = tree . getNodeHeight ( jP ) ; double heightJ = tree . getNodeHeight ( j ) ; double sumForward2 = _NUM ; NodeRef k , kP ; for ( int n = _NUM ; n < nodeCount ; n ++ ) { k = tree . getNode ( n ) ; if ( k != root ) { kP = tree . getParent ( k ) ; if ( ( jP != kP ) && ( tree . getNodeHeight ( k ) < heightJP ) && ( heightJ < tree . getNodeHeight ( kP ) ) ) { swap ( tree , j , k , jP , kP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; sumForward2 += prob ; swap ( tree , j , k , kP , jP ) ; } } } swap ( tree , i , j , iP , jP ) ; double forward = probabilities . get ( index ) ; iP = jP ; heightIP = heightJP ; double sumBackward = _NUM ; for ( int n = _NUM ; n < nodeCount ; n ++ ) { j = tree . getNode ( n ) ; if ( j != root ) { jP = tree . getParent ( j ) ; if ( ( iP != jP ) && ( tree . getNodeHeight ( j ) < heightIP ) && ( heightI < tree . getNodeHeight ( jP ) ) ) { swap ( tree , i , j , iP , jP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; sumBackward += prob ; swap ( tree , i , j , jP , iP ) ; } } } double sumBackward2 = _NUM ; j = tree . getNode ( secondNodeIndices . get ( index ) ) ; jP = tree . getParent ( j ) ; heightJP = tree . getNodeHeight ( jP ) ; heightJ = tree . getNodeHeight ( j ) ; for ( int n = _NUM ; n < nodeCount ; n ++ ) { k = tree . getNode ( n ) ; if ( k != root ) { kP = tree . getParent ( k ) ; if ( ( jP != kP ) && ( tree . getNodeHeight ( k ) < heightJP ) && ( heightJ < tree . getNodeHeight ( kP ) ) ) { swap ( tree , j , k , jP , kP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; sumBackward2 += prob ; swap ( tree , j , k , kP , jP ) ; } } } double forwardProb = ( forward / sum ) + ( forward / sumForward2 ) ; double backwardProb = ( backward / sumBackward ) + ( backward / sumBackward2 ) ; double hastingsRatio = Math . log ( backwardProb / forwardProb ) ; return hastingsRatio ; }
public boolean isInputColumnNameAllowed ( String columnName ) { if ( columnName == null || columnName . length ( ) == _NUM ) return _BOOL ; getInputColumnNames ( _BOOL ) ; for ( int i = _NUM ; i < m_inputcolumnnames . length ; i ++ ) { if ( columnName . equals ( m_inputcolumnnames [ i ] ) ) return _BOOL ; } return _BOOL ; }
public static int rgb ( String hex ) { int color = ( int ) Long . parseLong ( hex . replace ( _STR , _STR ) , _NUM ) ; int r = ( color > > _NUM ) & _NUM ; int g = ( color > > _NUM ) & _NUM ; int b = ( color > > _NUM ) & _NUM ; return Color . rgb ( r , g , b ) ; }
@ Override public void addPropertyChangeListener ( String name , PropertyChangeListener pcl ) { m_bcSupport . addPropertyChangeListener ( name , pcl ) ; }
public void testEmptyOrNullBlob ( ) throws Exception { try { PreparedStatement stmt = connection . prepareStatement ( _STR ) ; try { stmt . setInt ( _NUM , _NUM ) ; stmt . setBytes ( _NUM , new byte [ _NUM ] ) ; int insertedCount = stmt . executeUpdate ( ) ; assertTrue ( _STR , insertedCount == _NUM ) ; stmt . setInt ( _NUM , _NUM ) ; stmt . setNull ( _NUM , Types . BINARY ) ; insertedCount = stmt . executeUpdate ( ) ; assertTrue ( _STR , insertedCount == _NUM ) ; } finally { stmt . close ( ) ; } stmt = connection . prepareStatement ( _STR ) ; stmt . setInt ( _NUM , _NUM ) ; try { ResultSet rs = stmt . executeQuery ( ) ; assertTrue ( _STR , rs . next ( ) ) ; assertTrue ( _STR , Arrays . equals ( rs . getBytes ( _NUM ) , new byte [ _NUM ] ) ) ; rs . close ( ) ; stmt . setInt ( _NUM , _NUM ) ; rs = stmt . executeQuery ( ) ; assertTrue ( _STR , rs . next ( ) ) ; assertTrue ( _STR , rs . getObject ( _NUM ) == null ) ; rs . close ( ) ; } finally { stmt . close ( ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; throw ex ; } }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( _STR ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
private synchronized void rebuildJournal ( ) throws IOException { if ( journalWriter != null ) { journalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFileTmp ) , Utils . US_ASCII ) ) ; try { writer . write ( MAGIC ) ; writer . write ( _STR ) ; writer . write ( VERSION_1 ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( appVersion ) ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( valueCount ) ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; for ( Entry entry : lruEntries . values ( ) ) { if ( entry . currentEditor != null ) { writer . write ( DIRTY + _STR + entry . key + _STR ) ; } else { writer . write ( CLEAN + _STR + entry . key + entry . getLengths ( ) + _STR ) ; } } } finally { writer . close ( ) ; } if ( journalFile . exists ( ) ) { renameTo ( journalFile , journalFileBackup , _BOOL ) ; } renameTo ( journalFileTmp , journalFile , _BOOL ) ; journalFileBackup . delete ( ) ; journalWriter = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFile , _BOOL ) , Utils . US_ASCII ) ) ; }
public void testCase22 ( ) { byte bBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM } ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM } ; int bSign = - _NUM ; BigInteger aNumber = BigInteger . ZERO ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . subtract ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _NUM , result . signum ( ) ) ; }
@ SuppressWarnings ( _STR ) public void restore ( String fileName ) throws IOException , ClassNotFoundException { ObjectInputStream ois = new ObjectInputStream ( new FileInputStream ( fileName ) ) ; locations = ( Map < V , Point > ) ois . readObject ( ) ; ois . close ( ) ; initializeLocations ( ) ; locked = _BOOL ; fireStateChanged ( ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public void waitForData ( ) { if ( this . initialized ) { return ; } waitOnInitialization ( this . initializationLatchAfterGetInitialImage ) ; }
private void blackmanHarris4sMin ( int size ) { int start = ( windowFunction . length - size ) / _NUM ; int stop = ( windowFunction . length + size ) / _NUM ; double scale = _NUM / ( double ) size / _NUM ; for ( int i = _NUM ; start < stop ; start ++ , i ++ ) windowFunction [ i ] = scale * ( _NUM - _NUM * Math . cos ( twoPI * i / size ) + _NUM * Math . cos ( _NUM * twoPI * i / size ) - _NUM * Math . cos ( _NUM * twoPI * i / size ) ) ; }
private byte [ ] calculateCMSKeyChecksum ( byte [ ] key ) { byte [ ] result = new byte [ _NUM ] ; sha1 . update ( key , _NUM , key . length ) ; sha1 . doFinal ( digest , _NUM ) ; System . arraycopy ( digest , _NUM , result , _NUM , _NUM ) ; return result ; }
public int hashCode ( ) { return _lowerNick . hashCode ( ) ; }
public boolean incrementReceived ( ) { Long diff = System . currentTimeMillis ( ) - startTime ; if ( diff >= _NUM ) { packetsPerSecond = intervalPackets ; startTime = System . currentTimeMillis ( ) ; intervalPackets = _NUM ; return _BOOL ; } else { intervalPackets ++ ; } this . receivedPackets ++ ; return _BOOL ; }
Sentence parseSentence ( final String text , final ConversationContext ctx ) { if ( isEmpty ( ) ) { return ConversationParser . parse ( text , ctx ) ; } String txt = text . trim ( ) ; final Sentence sentence = new SentenceImplementation ( ctx , txt ) ; txt = ConversationParser . detectSentenceType ( txt , sentence ) ; if ( typeMatching ) { readTypeMatchExpressions ( txt , ctx , sentence ) ; } else if ( exactMatching ) { readSimpleExpressions ( txt , ctx , sentence ) ; } else if ( similarMatching ) { readSimpleExpressions ( txt , ctx , sentence ) ; } else if ( jokerMatching ) { readJokerExpressions ( txt , ctx , sentence ) ; } else if ( caseInsensitive ) { readSimpleExpressions ( txt , ctx , sentence ) ; } return sentence ; }
public KafkaCluster usingDirectory ( File dataDir ) { if ( running ) throw new IllegalStateException ( _STR ) ; if ( dataDir != null && dataDir . exists ( ) && ! dataDir . isDirectory ( ) && ! dataDir . canWrite ( ) && ! dataDir . canRead ( ) ) { throw new IllegalArgumentException ( _STR ) ; } this . dataDir = dataDir ; return this ; }
private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = mPool . getBuf ( ( count + i ) * _NUM ) ; System . arraycopy ( buf , _NUM , newbuf , _NUM , count ) ; mPool . returnBuf ( buf ) ; buf = newbuf ; }
void onConsumeFinished ( Purchase purchase , IabResult result ) ;
protected boolean checkProsodicPosition ( Element currentRulePart , String prosodicPositionType ) { NamedNodeMap attNodes = currentRulePart . getAttributes ( ) ; for ( int z = _NUM ; z < attNodes . getLength ( ) ; z ++ ) { Node el = attNodes . item ( z ) ; String currentAtt = el . getNodeName ( ) ; String currentVal = el . getNodeValue ( ) ; if ( currentAtt . equals ( _STR ) ) { if ( ! currentVal . startsWith ( _STR ) ) { if ( ! prosodicPositionType . equals ( currentVal ) ) return _BOOL ; } else { currentVal = currentVal . substring ( _NUM , currentVal . length ( ) ) ; if ( prosodicPositionType . equals ( currentVal ) ) return _BOOL ; } } } return _BOOL ; }
public static BigDecimal parseBigDecimalForEntity ( String bigDecimalString ) throws NumberFormatException { if ( bigDecimalString == null ) { return null ; } bigDecimalString = bigDecimalString . trim ( ) ; bigDecimalString = bigDecimalString . replaceAll ( _STR , _STR ) ; if ( bigDecimalString . length ( ) < _NUM ) { return null ; } return new BigDecimal ( bigDecimalString ) ; }
public static void registerOperators ( String name , InputStream operatorsXML , ClassLoader classLoader ) { registerOperators ( name , operatorsXML , classLoader , null ) ; }
private void doPermissionWorkBeforeAndroidM ( @ NonNull Activity activity , @ NonNull String [ ] permissions , @ Nullable PermissionsResultAction action ) { for ( String perm : permissions ) { if ( action != null ) { if ( ! mPermissions . contains ( perm ) ) { action . onResult ( perm , Permissions . NOT_FOUND ) ; } else if ( ActivityCompat . checkSelfPermission ( activity , perm ) != PackageManager . PERMISSION_GRANTED ) { action . onResult ( perm , Permissions . DENIED ) ; } else { action . onResult ( perm , Permissions . GRANTED ) ; } } } }
public void deleteSubGroupContainers ( Set groupContainers ) throws AMException , SSOException { Iterator iter = groupContainers . iterator ( ) ; while ( iter . hasNext ( ) ) { String groupContainerDN = ( String ) iter . next ( ) ; AMGroupContainer groupContainer = new AMGroupContainerImpl ( token , groupContainerDN ) ; groupContainer . delete ( ) ; } }
public GlowTask ( Plugin owner , Runnable task , boolean sync , long delay , long period ) { super ( task , null ) ; taskId = nextTaskId . getAndIncrement ( ) ; description = task . toString ( ) ; this . owner = owner ; this . delay = delay ; this . period = period ; counter = _NUM ; this . sync = sync ; }
public static void init ( String [ ] args ) { try { compiler . initCompiler ( args ) ; if ( VM . BuildForAdaptiveSystem && VM . BuildWithBaseBootImageCompiler ) { optCompiler . initCompiler ( args ) ; } } catch ( Throwable e ) { while ( e != null ) { e . printStackTrace ( ) ; e = e . getCause ( ) ; } } }
static native boolean openDev ( ) ;
int sendNextByte ( ) { int result = _NUM ; try { long tDiff = interByteTime - ( ( System . currentTimeMillis ( ) - lastRxTime ) * _NUM ) ; if ( tDiff > _NUM ) { log . debug ( _STR + tDiff + _STR ) ; Thread . sleep ( tDiff / _NUM , ( int ) ( tDiff % _NUM ) ) ; } } catch ( InterruptedException ex ) { log . error ( _STR + ex . toString ( ) ) ; } if ( currTxCharPos >= currTxTgm . length ) { result = dequeueTelegram ( ) ; } if ( result == _NUM ) { writeChar ( currTxTgm [ currTxCharPos ++ ] , _BOOL ) ; if ( currTxCharPos >= currTxTgm . length ) { setProtStat ( ProtStatus . RECEIVING ) ; } } return result ; }
public static String encode ( Serializable o ) { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; try { ObjectOutputStream oos = new ObjectOutputStream ( bos ) ; try { oos . writeObject ( o ) ; oos . flush ( ) ; } finally { oos . close ( ) ; } return Base64 . encodeBytes ( bos . toByteArray ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
public static Map < String , Object > createImage ( DispatchContext dctx , Map < String , ? extends Object > context ) { Map < String , Object > result = createImageMethod ( dctx , context ) ; return result ; }
public void addProfiles ( @ NonNull IProfile ... profiles ) { if ( mAccountHeaderBuilder . mProfiles == null ) { mAccountHeaderBuilder . mProfiles = new ArrayList < > ( ) ; } Collections . addAll ( mAccountHeaderBuilder . mProfiles , IdDistributor . checkIds ( profiles ) ) ; mAccountHeaderBuilder . updateHeaderAndList ( ) ; }
private static boolean isIdentifierName ( String k ) { int n = k . length ( ) ; if ( n == _NUM ) { return _BOOL ; } if ( ! Character . isJavaIdentifierStart ( k . charAt ( _NUM ) ) ) { return _BOOL ; } for ( int i = _NUM ; i < n ; ++ i ) { if ( ! Character . isJavaIdentifierPart ( k . charAt ( i ) ) ) { return _BOOL ; } } return _BOOL ; }
static boolean lessThanUnsignedLong ( long x1 , long x2 ) { return ( x1 + Long . MIN_VALUE ) < ( x2 + Long . MIN_VALUE ) ; }
private void moveSingleNode ( Object source , Point newPoint ) { DisplayNode node = ( DisplayNode ) source ; int deltaX = newPoint . x - clickPoint . x ; int deltaY = newPoint . y - clickPoint . y ; int newX = node . getLocation ( ) . x + deltaX ; int newY = node . getLocation ( ) . y + deltaY ; node . setLocation ( newX , newY ) ; }
public static < T > List < T > toList ( T obj1 , T obj2 , T obj3 ) { List < T > list = new LinkedList < T > ( ) ; list . add ( obj1 ) ; list . add ( obj2 ) ; list . add ( obj3 ) ; return list ; }
public void addMacroRecord ( MacroRecord record ) { if ( record != null ) macroRecords . add ( record ) ; }
@ SuppressWarnings ( _STR ) protected KafkaSpoutWrapper createKafkaSpout ( Map conf , TopologyContext context , SpoutOutputCollector collector , final String topic , String schemeClsName , SpoutSpec spoutSpec , Map < String , StreamDefinition > sds ) throws Exception { String kafkaBrokerZkQuorum = config . getString ( _STR ) ; BrokerHosts hosts = null ; if ( config . hasPath ( _STR ) ) { hosts = new ZkHosts ( kafkaBrokerZkQuorum , config . getString ( _STR ) ) ; } else { hosts = new ZkHosts ( kafkaBrokerZkQuorum ) ; } String transactionZkRoot = DEFAULT_STORM_KAFKA_TRANSACTION_ZK_ROOT ; if ( config . hasPath ( _STR ) ) { transactionZkRoot = config . getString ( _STR ) ; } String zkStateTransactionRelPath = DEFAULT_STORM_KAFKA_TRANSACTION_ZK_RELATIVE_PATH ; if ( config . hasPath ( _STR ) ) { zkStateTransactionRelPath = config . getString ( _STR ) ; } SpoutConfig spoutConfig = new SpoutConfig ( hosts , topic , transactionZkRoot , zkStateTransactionRelPath + _STR + topic + _STR + topologyId ) ; boolean stormKafkaUseSameZkQuorumWithKafkaBroker = config . getBoolean ( _STR ) ; if ( stormKafkaUseSameZkQuorumWithKafkaBroker ) { ZkServerPortUtils utils = new ZkServerPortUtils ( kafkaBrokerZkQuorum ) ; spoutConfig . zkServers = utils . getZkHosts ( ) ; spoutConfig . zkPort = utils . getZkPort ( ) ; } else { ZkServerPortUtils utils = new ZkServerPortUtils ( config . getString ( _STR ) ) ; spoutConfig . zkServers = utils . getZkHosts ( ) ; spoutConfig . zkPort = utils . getZkPort ( ) ; } spoutConfig . stateUpdateIntervalMs = config . hasPath ( _STR ) ? config . getInt ( _STR ) : _NUM ; spoutConfig . fetchSizeBytes = config . hasPath ( _STR ) ? config . getInt ( _STR ) : _NUM ; if ( config . hasPath ( _STR ) ) { spoutConfig . startOffsetTime = config . getInt ( _STR ) ; } spoutConfig . scheme = createMultiScheme ( conf , topic , schemeClsName ) ; KafkaSpoutWrapper wrapper = new KafkaSpoutWrapper ( spoutConfig , kafkaSpoutMetric ) ; SpoutOutputCollectorWrapper collectorWrapper = new SpoutOutputCollectorWrapper ( this , collector , topic , spoutSpec , numOfRouterBolts , sds , this . serializer ) ; wrapper . open ( conf , context , collectorWrapper ) ; if ( LOG . isInfoEnabled ( ) ) { LOG . info ( _STR , topic , schemeClsName ) ; } return wrapper ; }
public Builder addEmail ( Email email ) { emails . add ( email ) ; return this ; }
public static HashProvider best ( HashParameters params ) { return best ( params , EnumSet . of ( HashSupport . STATEFUL ) ) ; }
public byte [ ] readRawBytes ( final int size ) throws IOException { if ( size < _NUM ) { throw InvalidProtocolBufferNanoException . negativeSize ( ) ; } if ( bufferPos + size > currentLimit ) { skipRawBytes ( currentLimit - bufferPos ) ; throw InvalidProtocolBufferNanoException . truncatedMessage ( ) ; } if ( size <= bufferSize - bufferPos ) { final byte [ ] bytes = new byte [ size ] ; System . arraycopy ( buffer , bufferPos , bytes , _NUM , size ) ; bufferPos += size ; return bytes ; } else { throw InvalidProtocolBufferNanoException . truncatedMessage ( ) ; } }
static boolean pairSum ( int ar [ ] , int x ) { Arrays . sort ( ar ) ; int len = ar . length ; for ( int i = _NUM , j = len - _NUM ; i < j ; ) { if ( ar [ i ] + ar [ j ] == x ) { return _BOOL ; } else if ( ar [ i ] + ar [ j ] < x ) { i ++ ; } else { j -- ; } } return _BOOL ; }
public synchronized void loadFromFile ( ) { entries . clear ( ) ; Path file = Paths . get ( fileName ) ; try ( BufferedReader reader = Files . newBufferedReader ( file , CHARSET ) ) { String line ; do { line = reader . readLine ( ) ; AddressbookEntry parsedEntry = parseLine ( line ) ; if ( parsedEntry != null ) { entries . put ( parsedEntry . getName ( ) , parsedEntry ) ; } } while ( line != null ) ; } catch ( IOException ex ) { LOGGER . warning ( _STR + ex . getLocalizedMessage ( ) ) ; } LOGGER . info ( _STR + entries . size ( ) + _STR + fileName ) ; scanCategories ( ) ; }
public double localScore ( int i , int ... parents ) { for ( int p : parents ) if ( forbidden . contains ( p ) ) return Double . NaN ; double residualVariance = covariances . get ( i , i ) ; int n = getSampleSize ( ) ; int p = parents . length ; Matrix covxx = getSelection1 ( covariances , parents ) ; try { Matrix covxxInv = covxx . inverse ( ) ; Matrix covxy = getSelection2 ( covariances , parents , i ) ; Matrix b = covxxInv . times ( covxy ) ; double dot = _NUM ; for ( int j = _NUM ; j < covxy . getRowDimension ( ) ; j ++ ) { for ( int k = _NUM ; k < covxy . getColumnDimension ( ) ; k ++ ) { dot += covxy . get ( j , k ) * b . get ( j , k ) ; } } residualVariance -= dot ; if ( residualVariance <= _NUM ) { if ( isVerbose ( ) ) { out . println ( _STR + ( residualVariance / covariances . get ( i , i ) ) ) ; } return Double . NaN ; } double c = getPenaltyDiscount ( ) ; return score ( residualVariance , n , logn , p , c ) ; } catch ( Exception e ) { boolean removedOne = _BOOL ; while ( removedOne ) { List < Integer > _parents = new ArrayList < > ( ) ; for ( int y = _NUM ; y < parents . length ; y ++ ) _parents . add ( parents [ y ] ) ; _parents . removeAll ( forbidden ) ; parents = new int [ _parents . size ( ) ] ; for ( int y = _NUM ; y < _parents . size ( ) ; y ++ ) parents [ y ] = _parents . get ( y ) ; removedOne = printMinimalLinearlyDependentSet ( parents , covariances ) ; } return Double . NaN ; } }
public boolean remove ( final int position ) { final AdapterTransaction removeTransaction = new RemoveTransaction < > ( this , position ) ; final boolean success = removeTransaction . perform ( ) ; mTransactions . offer ( removeTransaction ) ; return success ; }
private void encodeTypes ( List < Type > types , Map < String , Object > m , String key , Declaration from ) { if ( types == null || types . isEmpty ( ) ) return ; List < Map < String , Object > > sats = new ArrayList < > ( types . size ( ) ) ; for ( Type st : types ) { sats . add ( typeMap ( st , from ) ) ; } m . put ( key , sats ) ; }
public static void clearAssertionInformation ( ) { _AssertInfos . clear ( ) ; _AssertOccured = _BOOL ; }
public void build ( String code , String customStatus ) { try { if ( customStatus != null ) { result . put ( resources . getString ( R . string . intent_extra_status ) , customStatus ) ; } else { result . put ( resources . getString ( R . string . intent_extra_status ) , resources . getString ( R . string . shared_pref_default_status ) ) ; } result . put ( resources . getString ( R . string . intent_extra_code ) , code ) ; operationListResult . put ( result ) ; } catch ( JSONException e ) { Log . e ( TAG , _STR + e . toString ( ) ) ; } }
public static Operator generateBranchPlan ( AkibanInformationSchema ais , Table table ) { final Operator indexScan = generateIndexScan ( ais , table ) ; final Schema schema = SchemaCache . globalSchema ( ais ) ; PrimaryKey pkey = table . getPrimaryKeyIncludingInternal ( ) ; IndexRowType indexType = schema . indexRowType ( pkey . getIndex ( ) ) ; return generateBranchPlan ( table , indexScan , indexType ) ; }
protected void addToMaintenanceQueue ( NodePortTuple npt ) { if ( maintenanceQueue . contains ( npt ) == _BOOL ) { maintenanceQueue . add ( npt ) ; } }
private boolean linkFirst ( Node < E > node ) { if ( count >= capacity ) return _BOOL ; Node < E > f = first ; node . next = f ; first = node ; if ( last == null ) last = node ; else f . prev = node ; ++ count ; notEmpty . signal ( ) ; return _BOOL ; }
public long startstack ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
public static void copyRealmPrivilegesFromParent ( SSOToken token , OrganizationConfigManager parent , OrganizationConfigManager child ) throws SSOException , DelegationException { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + parent . getOrganizationName ( ) + _STR + child . getOrganizationName ( ) ) ; } DelegationManager pdm = new DelegationManager ( token , parent . getOrganizationName ( ) ) ; DelegationManager cdm = new DelegationManager ( token , child . getOrganizationName ( ) ) ; String childOrgName = DNMapper . orgNameToDN ( child . getOrganizationName ( ) ) ; Set pdps = pdm . getPrivileges ( ) ; if ( pdps == null || pdps . isEmpty ( ) ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR ) ; } return ; } for ( Iterator items = pdps . iterator ( ) ; items . hasNext ( ) ; ) { DelegationPrivilege dp = ( DelegationPrivilege ) items . next ( ) ; Set subjects = dp . getSubjects ( ) ; if ( subjects == null || subjects . isEmpty ( ) ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + dp ) ; } continue ; } Set newSubjects = new HashSet ( ) ; for ( Iterator subs = subjects . iterator ( ) ; subs . hasNext ( ) ; ) { String sName = ( String ) subs . next ( ) ; try { AMIdentity id = IdUtils . getIdentity ( token , sName ) ; AMIdentity newId = new AMIdentity ( token , id . getName ( ) , id . getType ( ) , childOrgName , id . getDN ( ) ) ; newSubjects . add ( IdUtils . getUniversalId ( newId ) ) ; } catch ( IdRepoException ide ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + dp , ide ) ; } continue ; } } dp . setSubjects ( newSubjects ) ; Set permissions = dp . getPermissions ( ) ; if ( ( permissions != null ) && ( ! permissions . isEmpty ( ) ) ) { Iterator it = permissions . iterator ( ) ; while ( it . hasNext ( ) ) { DelegationPermission perm = ( DelegationPermission ) it . next ( ) ; perm . setOrganizationName ( _STR + childOrgName ) ; } } cdm . addPrivilege ( dp ) ; if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + dp ) ; } } }
public boolean match ( MimeType other ) { if ( this == other ) return _BOOL ; if ( type != null && other . type != null && ! type . equals ( other . type ) ) return _BOOL ; if ( subtype != null && other . subtype != null && ! subtype . equals ( other . subtype ) ) return _BOOL ; return _BOOL ; }
@ Override public boolean isArmed ( ) { return other . isArmed ( ) ; }
public EncoderTestSuiteBuilder valid ( int min , int max ) { _valid . set ( min , max + _NUM ) ; _invalid . clear ( min , max + _NUM ) ; _encoded . clear ( min , max + _NUM ) ; return this ; }
protected List < VolumeDescriptor > createChangeVirtualPoolDescriptors ( StorageSystem vplexSystem , Volume volume , VirtualPool newVpool , String taskId , List < Recommendation > recommendations , VirtualPoolCapabilityValuesWrapper capabilities , ControllerOperationValuesWrapper operationsWrapper ) throws InternalException { URI volumeVarrayURI = volume . getVirtualArray ( ) ; VirtualArray volumeVarray = _dbClient . queryObject ( VirtualArray . class , volumeVarrayURI ) ; s_logger . info ( _STR , volumeVarrayURI ) ; URI volumeVpoolURI = volume . getVirtualPool ( ) ; VirtualPool currentVpool = _dbClient . queryObject ( VirtualPool . class , volumeVpoolURI ) ; List < VolumeDescriptor > descriptors = new ArrayList < VolumeDescriptor > ( ) ; VolumeDescriptor vplexVirtualVolumeDesc = new VolumeDescriptor ( VolumeDescriptor . Type . VPLEX_VIRT_VOLUME , volume . getStorageController ( ) , volume . getId ( ) , volume . getPool ( ) , null ) ; Map < String , Object > volumeParams = new HashMap < String , Object > ( ) ; volumeParams . put ( VolumeDescriptor . PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID , volume . getId ( ) ) ; volumeParams . put ( VolumeDescriptor . PARAM_VPOOL_CHANGE_NEW_VPOOL_ID , newVpool . getId ( ) ) ; volumeParams . put ( VolumeDescriptor . PARAM_VPOOL_CHANGE_OLD_VPOOL_ID , volume . getVirtualPool ( ) ) ; if ( operationsWrapper != null ) { if ( operationsWrapper . getMigrationSuspendBeforeCommit ( ) != null ) { volumeParams . put ( VolumeDescriptor . PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT , operationsWrapper . getMigrationSuspendBeforeCommit ( ) ) ; } if ( operationsWrapper . getMigrationSuspendBeforeDeleteSource ( ) != null ) { volumeParams . put ( VolumeDescriptor . PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE , operationsWrapper . getMigrationSuspendBeforeDeleteSource ( ) ) ; } } vplexVirtualVolumeDesc . setParameters ( volumeParams ) ; descriptors . add ( vplexVirtualVolumeDesc ) ; if ( VirtualPoolChangeAnalyzer . vpoolChangeRequiresMigration ( currentVpool , newVpool ) ) { Volume migSrcVolume = getAssociatedVolumeInVArray ( volume , volumeVarrayURI ) ; descriptors . addAll ( createBackendVolumeMigrationDescriptors ( vplexSystem , volume , migSrcVolume , volumeVarray , newVpool , getVolumeCapacity ( migSrcVolume != null ? migSrcVolume : volume ) , taskId , recommendations , _BOOL , capabilities ) ) ; } URI haVarrayURI = VirtualPoolChangeAnalyzer . getHaVarrayURI ( currentVpool ) ; if ( haVarrayURI != null ) { VirtualArray haVarray = _dbClient . queryObject ( VirtualArray . class , haVarrayURI ) ; VirtualPool currentHaVpool = VirtualPoolChangeAnalyzer . getHaVpool ( currentVpool , _dbClient ) ; VirtualPool newHaVpool = VirtualPoolChangeAnalyzer . getNewHaVpool ( currentVpool , newVpool , _dbClient ) ; if ( VirtualPoolChangeAnalyzer . vpoolChangeRequiresMigration ( currentHaVpool , newHaVpool ) ) { Volume migSrcVolume = getAssociatedVolumeInVArray ( volume , haVarrayURI ) ; descriptors . addAll ( createBackendVolumeMigrationDescriptors ( vplexSystem , volume , migSrcVolume , haVarray , newHaVpool , getVolumeCapacity ( migSrcVolume != null ? migSrcVolume : volume ) , taskId , recommendations , _BOOL , capabilities ) ) ; } } return descriptors ; }
public static boolean isJavaScriptEnabled ( HttpServletRequest request ) { HttpSession session = request . getSession ( ) ; Boolean javaScriptEnabled = ( Boolean ) session . getAttribute ( _STR ) ; if ( javaScriptEnabled != null ) { return javaScriptEnabled . booleanValue ( ) ; } return _BOOL ; }
public boolean equals ( Object obj ) { if ( this == obj ) return _BOOL ; if ( obj instanceof ECFieldFp ) { return ( p . equals ( ( ( ECFieldFp ) obj ) . p ) ) ; } return _BOOL ; }
public String name ( ) { return theName ; }
public static void closeQuietly ( Closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( RuntimeException rethrown ) { throw rethrown ; } catch ( Exception ignored ) { } } }
private static String checksumMD5 ( String data ) { MessageDigest md5 = null ; try { md5 = MessageDigest . getInstance ( _STR ) ; } catch ( NoSuchAlgorithmException ex ) { throw new RuntimeException ( _STR , ex ) ; } return hexEncode ( md5 . digest ( data . getBytes ( ) ) ) ; }
public static boolean validSkinSpecFile ( String fileName ) { File file = new File ( Configuration . skinsDir ( ) , fileName ) ; if ( ! file . exists ( ) || ! file . isFile ( ) ) { return _BOOL ; } DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; try { DocumentBuilder builder = dbf . newDocumentBuilder ( ) ; Document doc = builder . parse ( file ) ; NodeList listOfComponents = doc . getElementsByTagName ( UI_ELEMENT ) ; if ( listOfComponents . getLength ( ) > _NUM ) { return _BOOL ; } else { return _BOOL ; } } catch ( Exception e ) { return _BOOL ; } }
private void generateLegalTimesTree ( ) { int k0 = KeyEvent . KEYCODE_0 ; int k1 = KeyEvent . KEYCODE_1 ; int k2 = KeyEvent . KEYCODE_2 ; int k3 = KeyEvent . KEYCODE_3 ; int k4 = KeyEvent . KEYCODE_4 ; int k5 = KeyEvent . KEYCODE_5 ; int k6 = KeyEvent . KEYCODE_6 ; int k7 = KeyEvent . KEYCODE_7 ; int k8 = KeyEvent . KEYCODE_8 ; int k9 = KeyEvent . KEYCODE_9 ; mLegalTimesTree = new Node ( ) ; if ( mIs24HourMode ) { Node minuteFirstDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; Node minuteSecondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; minuteFirstDigit . addChild ( minuteSecondDigit ) ; Node firstDigit = new Node ( k0 , k1 ) ; mLegalTimesTree . addChild ( firstDigit ) ; Node secondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; Node thirdDigit = new Node ( k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; secondDigit = new Node ( k6 , k7 , k8 , k9 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; firstDigit = new Node ( k2 ) ; mLegalTimesTree . addChild ( firstDigit ) ; secondDigit = new Node ( k0 , k1 , k2 , k3 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; secondDigit = new Node ( k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteSecondDigit ) ; firstDigit = new Node ( k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( minuteFirstDigit ) ; } else { Node ampm = new Node ( getAmOrPmKeyCode ( AM ) , getAmOrPmKeyCode ( PM ) ) ; Node firstDigit = new Node ( k1 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( ampm ) ; Node secondDigit = new Node ( k0 , k1 , k2 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( ampm ) ; Node thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; Node fourthDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; thirdDigit . addChild ( fourthDigit ) ; fourthDigit . addChild ( ampm ) ; thirdDigit = new Node ( k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; secondDigit = new Node ( k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; firstDigit = new Node ( k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( ampm ) ; secondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; } }
public StrBuilder insert ( final int index , final Object obj ) { if ( obj == null ) { return insert ( index , nullText ) ; } return insert ( index , obj . toString ( ) ) ; }
@ Override public void handleMouseMoved ( ChartCanvas canvas , MouseEvent e ) { if ( ! canvas . isTooltipEnabled ( ) ) { return ; } String text = getTooltipText ( canvas , e . getX ( ) , e . getY ( ) ) ; canvas . setTooltip ( text , e . getScreenX ( ) , e . getScreenY ( ) ) ; }
public int size ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { return count ; } finally { lock . unlock ( ) ; } }
private boolean loadUnpackedUMD ( String filename ) throws IOException , GeneralJpcspException { if ( doUmdBuffering ) { return _BOOL ; } File file = new File ( filename ) ; if ( file . exists ( ) ) { RandomAccessFile raf = new RandomAccessFile ( file , _STR ) ; FileChannel roChannel = raf . getChannel ( ) ; ByteBuffer readbuffer = roChannel . map ( FileChannel . MapMode . READ_ONLY , _NUM , ( int ) roChannel . size ( ) ) ; emulator . load ( _STR , readbuffer ) ; raf . close ( ) ; log . info ( _STR ) ; return _BOOL ; } return _BOOL ; }
public boolean disableVMAX3Compression ( URI blockObjectURI , StorageSystem storageSystem ) { VirtualPool virtualPool = null ; StoragePool storagePool = null ; Volume volume = null ; if ( URIUtil . isType ( blockObjectURI , Volume . class ) ) { volume = _dbClient . queryObject ( Volume . class , blockObjectURI ) ; } else if ( URIUtil . isType ( blockObjectURI , BlockSnapshot . class ) ) { BlockSnapshot snapshot = _dbClient . queryObject ( BlockSnapshot . class , blockObjectURI ) ; volume = _dbClient . queryObject ( Volume . class , snapshot . getParent ( ) ) ; } else if ( URIUtil . isType ( blockObjectURI , BlockMirror . class ) ) { BlockMirror mirror = _dbClient . queryObject ( BlockMirror . class , blockObjectURI ) ; virtualPool = _dbClient . queryObject ( VirtualPool . class , mirror . getVirtualPool ( ) ) ; storagePool = _dbClient . queryObject ( StoragePool . class , mirror . getPool ( ) ) ; } if ( volume != null ) { virtualPool = _dbClient . queryObject ( VirtualPool . class , volume . getVirtualPool ( ) ) ; storagePool = _dbClient . queryObject ( StoragePool . class , volume . getPool ( ) ) ; } return ( checkIfProviderSupportsCompressionOperations ( storageSystem ) && ! virtualPool . getCompressionEnabled ( ) && storagePool . getCompressionEnabled ( ) ) ; }
public static LatLon rhumbEndPosition ( LatLon p , double rhumbAzimuthRadians , double pathLengthRadians ) { if ( p == null ) { throw new IllegalArgumentException ( _STR ) ; } return rhumbEndPosition ( p , Angle . fromRadians ( rhumbAzimuthRadians ) , Angle . fromRadians ( pathLengthRadians ) ) ; }
private static int indexOf ( Object [ ] array , Object elt ) { return indexOf ( array , array . length , elt ) ; }
public Dimension maximumLayoutSize ( Container target ) { return new Dimension ( Integer . MAX_VALUE , Integer . MAX_VALUE ) ; }
public static String readStream ( InputStream in ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ; StringBuilder sb = new StringBuilder ( ) ; String line = null ; try { while ( ( line = reader . readLine ( ) ) != null ) { sb . append ( line + _STR ) ; } } catch ( IOException e ) { FreshAirLog . e ( _STR , e ) ; } finally { try { in . close ( ) ; } catch ( IOException e ) { } try { reader . close ( ) ; } catch ( IOException e ) { } } return sb . toString ( ) ; }
public void update ( long n ) { uncounted . addAndGet ( n ) ; }
private void logExpiration ( Entry e ) { if ( e . renewalsDone ( ) ) { logger . log ( Level . FINE , _STR , e . lease ) ; } else { logger . log ( Levels . FAILED , _STR , e . lease ) ; } }
void removeRipple ( Ripple ripple ) { final Ripple [ ] ripples = mExitingRipples ; final int count = mExitingRipplesCount ; final int index = getRippleIndex ( ripple ) ; if ( index >= _NUM ) { System . arraycopy ( ripples , index + _NUM , ripples , index , count - ( index + _NUM ) ) ; ripples [ count - _NUM ] = null ; mExitingRipplesCount -- ; invalidateSelf ( ) ; } }
protected final void writeS ( ByteBuffer buf , String text ) { if ( text == null ) { buf . putChar ( _STR ) ; } else { final int len = text . length ( ) ; for ( int i = _NUM ; i < len ; i ++ ) { buf . putChar ( text . charAt ( i ) ) ; } buf . putChar ( _STR ) ; } }
@ Override public void onDrawEye ( Eye eye ) { GLES20 . glClear ( GLES20 . GL_COLOR_BUFFER_BIT | GLES20 . GL_DEPTH_BUFFER_BIT ) ; Engine . checkGLError ( _STR ) ; if ( ! prefOrientationProviderString . equals ( _STR ) ) { if ( firstOnDrawEye > _NUM ) { firstOnDrawEye -- ; float [ ] m = new float [ _NUM ] ; Matrix . invertM ( m , _NUM , mHeadViewSDK , _NUM ) ; Matrix . multiplyMM ( m , _NUM , eye . getEyeView ( ) , _NUM , m , _NUM ) ; if ( eye . getType ( ) == Eye . Type . RIGHT ) { mEyeRightView = m ; } else if ( eye . getType ( ) == Eye . Type . LEFT ) { mEyeLeftView = m ; } return ; } float [ ] m = new float [ _NUM ] ; if ( eye . getType ( ) == Eye . Type . RIGHT ) { Matrix . multiplyMM ( m , _NUM , mHeadViewUse , _NUM , mEyeRightView , _NUM ) ; } else { Matrix . multiplyMM ( m , _NUM , mHeadViewUse , _NUM , mEyeLeftView , _NUM ) ; } Matrix . multiplyMM ( mView , _NUM , m , _NUM , mCamera , _NUM ) ; } else { Matrix . multiplyMM ( mView , _NUM , eye . getEyeView ( ) , _NUM , mCamera , _NUM ) ; } float [ ] perspective = eye . getPerspective ( Z_NEAR , Z_FAR ) ; GLES20 . glEnable ( GLES20 . GL_DEPTH_TEST ) ; GLES20 . glBlendFunc ( GLES20 . GL_SRC_ALPHA , GLES20 . GL_ONE_MINUS_SRC_ALPHA ) ; GLES20 . glEnable ( GLES20 . GL_BLEND ) ; if ( prefShowEnv && bgEnv . isReady ( ) ) { Matrix . multiplyMM ( mModelView , _NUM , mView , _NUM , bgEnv . model , _NUM ) ; Matrix . multiplyMM ( mModelViewProjection , _NUM , perspective , _NUM , mModelView , _NUM ) ; bgEnv . draw ( eye . getType ( ) , mModelViewProjection ) ; } GLES20 . glDisable ( GLES20 . GL_DEPTH_TEST ) ; Matrix . multiplyMM ( mModelViewProjection , _NUM , perspective , _NUM , cameraPreview . model , _NUM ) ; cameraPreview . draw ( eye . getType ( ) , mModelViewProjection ) ; Matrix . multiplyMM ( mModelView , _NUM , mView , _NUM , screen . model , _NUM ) ; Matrix . multiplyMM ( mModelViewProjection , _NUM , perspective , _NUM , mModelView , _NUM ) ; screen . draw ( eye . getType ( ) , mModelViewProjection ) ; for ( ButtonThing button : buttonList ) { Matrix . multiplyMM ( mModelView , _NUM , mView , _NUM , button . model , _NUM ) ; Matrix . multiplyMM ( mModelViewProjection , _NUM , perspective , _NUM , mModelView , _NUM ) ; button . draw ( eye . getType ( ) , mModelViewProjection ) ; } Matrix . multiplyMM ( mModelViewProjection , _NUM , perspective , _NUM , aimPoint . model , _NUM ) ; aimPoint . draw ( Eye . Type . MONOCULAR , mModelViewProjection ) ; }
protected SourceRecords consumeRecordsByTopic ( int numRecords ) throws InterruptedException { SourceRecords records = new SourceRecords ( ) ; consumeRecords ( numRecords , null ) ; return records ; }
@ Override public boolean equals ( Object o ) { if ( this == o ) { return _BOOL ; } if ( ! ( o instanceof PrototypeSize ) ) { return _BOOL ; } PrototypeSize size = ( PrototypeSize ) o ; return prototype . equals ( size . prototype ) ; }
private static int compareVersion ( String versionStr1 , String versionStr2 ) { if ( versionStr1 == null ) { throw new MLContextException ( _STR ) ; } if ( versionStr2 == null ) { throw new MLContextException ( _STR ) ; } Scanner scanner1 = null ; Scanner scanner2 = null ; try { scanner1 = new Scanner ( versionStr1 ) ; scanner2 = new Scanner ( versionStr2 ) ; scanner1 . useDelimiter ( _STR ) ; scanner2 . useDelimiter ( _STR ) ; while ( scanner1 . hasNextInt ( ) && scanner2 . hasNextInt ( ) ) { int version1 = scanner1 . nextInt ( ) ; int version2 = scanner2 . nextInt ( ) ; if ( version1 < version2 ) { return - _NUM ; } else if ( version1 > version2 ) { return _NUM ; } } return scanner1 . hasNextInt ( ) ? _NUM : _NUM ; } finally { scanner1 . close ( ) ; scanner2 . close ( ) ; } }
public static boolean isValidVector ( Vector2f vector ) { if ( vector == null ) { return _BOOL ; } if ( Float . isNaN ( vector . x ) || Float . isNaN ( vector . y ) ) { return _BOOL ; } if ( Float . isInfinite ( vector . x ) || Float . isInfinite ( vector . y ) ) { return _BOOL ; } return _BOOL ; }
public boolean isObsessional ( ) { return typeString . contains ( SUFFIX_OBSESSIONAL ) ; }
@ edu . umd . cs . findbugs . annotations . SuppressFBWarnings ( value = _STR , justification = _STR ) public void changeLocoSpeed ( DccThrottle t , Block blk , float speed ) { if ( blk == referenced && speed == desiredSpeedStep ) { return ; } float blockLength = blk . getLengthMm ( ) ; if ( blk == referenced ) { distanceRemaining = distanceRemaining - getDistanceTravelled ( _throttle . getIsForward ( ) , _throttle . getSpeedSetting ( ) , ( ( float ) ( System . nanoTime ( ) - lastTimeTimerStarted ) / _NUM ) ) ; blockLength = distanceRemaining ; log . debug ( _STR ) ; } else { referenced = blk ; } changeLocoSpeed ( t , blockLength , speed ) ; }
public boolean remove ( Object targetChild ) { return remove ( targetChild , _BOOL ) ; }
private void notifyClassObservers ( ClassDescriptor classDescriptor ) { for ( IClassObserver observer : classObserverList ) { observer . observeClass ( classDescriptor ) ; } }
public void dup2 ( ) { mv . visitInsn ( Opcodes . DUP2 ) ; }
static boolean isAppXml ( String mime ) { return mime != null && ( mime . equals ( _STR ) || mime . equals ( _STR ) || mime . equals ( _STR ) || mime . startsWith ( _STR ) && mime . endsWith ( _STR ) ) ; }
public static NativePage createNativePageForURL ( String url , NativePage candidatePage , Tab tab , TabModelSelector tabModelSelector , Activity activity ) { return createNativePageForURL ( url , candidatePage , tab , tabModelSelector , activity , tab . isIncognito ( ) ) ; }
protected void throwParseException ( ParseException e ) throws ParseException { if ( locator != null ) { String elementLocation = _STR ; if ( curHandler != null ) { elementLocation += _STR + curHandler . qName ; } String location = _STR + String . valueOf ( locator . getLineNumber ( ) ) + _STR + String . valueOf ( locator . getColumnNumber ( ) ) + elementLocation + _STR ; LogUtils . logException ( logger , Level . FINE , location , e ) ; throw new ParseException ( location + e . getMessage ( ) , e ) ; } else { LogUtils . logException ( logger , Level . FINE , null , e ) ; throw e ; } }
public CustomEditor ( ) { setLayout ( new BorderLayout ( ) ) ; add ( m_Label , BorderLayout . CENTER ) ; m_DeleteBut . addActionListener ( m_InnerActionListener ) ; m_EditBut . addActionListener ( m_InnerActionListener ) ; m_UpBut . addActionListener ( m_InnerActionListener ) ; m_DownBut . addActionListener ( m_InnerActionListener ) ; m_AddBut . addActionListener ( m_InnerActionListener ) ; m_ElementList . addListSelectionListener ( m_InnerSelectionListener ) ; m_ElementList . addMouseListener ( m_InnerMouseListener ) ; m_AddBut . setToolTipText ( _STR ) ; m_DeleteBut . setToolTipText ( _STR ) ; m_EditBut . setToolTipText ( _STR ) ; m_UpBut . setToolTipText ( _STR ) ; m_DownBut . setToolTipText ( _STR ) ; }
public MemoidOne ( Function < ? super Input , ? extends Output > fn , BiPredicate < Input , Input > equality ) { fn_ = Objects . requireNonNull ( fn ) ; equality_ = Objects . requireNonNull ( equality ) ; }
public static EPType singleValue ( Class singleValueType ) { if ( singleValueType != null && singleValueType . isArray ( ) ) { return new ClassMultiValuedEPType ( singleValueType , singleValueType . getComponentType ( ) ) ; } return new ClassEPType ( singleValueType ) ; }
private static Class < ? > convertFieldType ( String fieldType ) { if ( fieldTypeMap . containsKey ( fieldType ) ) { return fieldTypeMap . get ( fieldType ) ; } return null ; }
void addXMLElementAfterTokenIndex ( int lastTokenIndex , XMLElement element , boolean addAfterNewLine ) throws Exception { addXMLElementAfterTokenIndex ( lastTokenIndex , element , addAfterNewLine , _BOOL ) ; }
public static Map < String , Object > findContentParents ( DispatchContext dctx , Map < String , ? extends Object > context ) { Map < String , Object > results = FastMap . newInstance ( ) ; List < Object > parentList = FastList . newInstance ( ) ; results . put ( _STR , parentList ) ; LocalDispatcher dispatcher = dctx . getDispatcher ( ) ; String contentId = ( String ) context . get ( _STR ) ; String contentAssocTypeId = ( String ) context . get ( _STR ) ; String direction = ( String ) context . get ( _STR ) ; if ( UtilValidate . isEmpty ( direction ) ) { direction = _STR ; } Map < String , Object > traversMap = FastMap . newInstance ( ) ; traversMap . put ( _STR , contentId ) ; traversMap . put ( _STR , direction ) ; traversMap . put ( _STR , contentAssocTypeId ) ; try { Map < String , Object > thisResults = dispatcher . runSync ( _STR , traversMap ) ; String errorMsg = ServiceUtil . getErrorMessage ( thisResults ) ; if ( UtilValidate . isNotEmpty ( errorMsg ) ) { Debug . logError ( _STR + errorMsg , module ) ; return ServiceUtil . returnError ( errorMsg ) ; } Map < String , Object > nodeMap = UtilGenerics . checkMap ( thisResults . get ( _STR ) ) ; walkParentTree ( nodeMap , parentList ) ; } catch ( GenericServiceException e ) { return ServiceUtil . returnFailure ( e . getMessage ( ) ) ; } return results ; }
public static boolean arrayEquals ( Object x , Object y , double tolf , double told ) { if ( x == null && y == null ) { return _BOOL ; } if ( x == null || y == null ) { return _BOOL ; } Class < ? > xClass = x . getClass ( ) ; Class < ? > yClass = y . getClass ( ) ; if ( xClass != yClass ) { return _BOOL ; } if ( ! xClass . isArray ( ) ) { return x . equals ( y ) ; } else { if ( xClass . equals ( int [ ] . class ) ) { return Arrays . equals ( ( int [ ] ) x , ( int [ ] ) y ) ; } else if ( xClass . equals ( double [ ] . class ) ) { if ( told == _NUM ) { return Arrays . equals ( ( double [ ] ) x , ( double [ ] ) y ) ; } else { return doubleArrayEquals ( ( double [ ] ) x , ( double [ ] ) y , told ) ; } } else if ( xClass . equals ( long [ ] . class ) ) { return Arrays . equals ( ( long [ ] ) x , ( long [ ] ) y ) ; } else if ( xClass . equals ( float [ ] . class ) ) { if ( tolf == _NUM ) { return Arrays . equals ( ( float [ ] ) x , ( float [ ] ) y ) ; } else { return floatArrayEquals ( ( float [ ] ) x , ( float [ ] ) y , ( float ) tolf ) ; } } else if ( xClass . equals ( byte [ ] . class ) ) { return Arrays . equals ( ( byte [ ] ) x , ( byte [ ] ) y ) ; } else if ( xClass . equals ( short [ ] . class ) ) { return Arrays . equals ( ( short [ ] ) x , ( short [ ] ) y ) ; } else if ( xClass . equals ( char [ ] . class ) ) { return Arrays . equals ( ( char [ ] ) x , ( char [ ] ) y ) ; } else if ( xClass . equals ( boolean [ ] . class ) ) { return Arrays . equals ( ( boolean [ ] ) x , ( boolean [ ] ) y ) ; } else { Object [ ] xo = ( Object [ ] ) x ; Object [ ] yo = ( Object [ ] ) y ; if ( xo . length != yo . length ) { return _BOOL ; } for ( int i = _NUM ; i < xo . length ; i += _NUM ) { if ( ! arrayEquals ( xo [ i ] , yo [ i ] , tolf , told ) ) { return _BOOL ; } } return _BOOL ; } } }
public Dictionary ( Directory tempDir , String tempFileNamePrefix , InputStream affix , List < InputStream > dictionaries , boolean ignoreCase ) throws IOException , ParseException { this . ignoreCase = ignoreCase ; this . needsInputCleaning = ignoreCase ; this . needsOutputCleaning = _BOOL ; flagLookup . add ( new BytesRef ( ) ) ; Path aff = Files . createTempFile ( tempPath , _STR , _STR ) ; OutputStream out = new BufferedOutputStream ( Files . newOutputStream ( aff ) ) ; InputStream aff1 = null ; InputStream aff2 = null ; boolean success = _BOOL ; try { final byte [ ] buffer = new byte [ _NUM * _NUM ] ; int len ; while ( ( len = affix . read ( buffer ) ) > _NUM ) { out . write ( buffer , _NUM , len ) ; } out . close ( ) ; aff1 = new BufferedInputStream ( Files . newInputStream ( aff ) ) ; String encoding = getDictionaryEncoding ( aff1 ) ; CharsetDecoder decoder = getJavaEncoding ( encoding ) ; aff2 = new BufferedInputStream ( Files . newInputStream ( aff ) ) ; readAffixFile ( aff2 , decoder ) ; IntSequenceOutputs o = IntSequenceOutputs . getSingleton ( ) ; Builder < IntsRef > b = new Builder < > ( FST . INPUT_TYPE . BYTE4 , o ) ; readDictionaryFiles ( tempDir , tempFileNamePrefix , dictionaries , decoder , b ) ; words = b . finish ( ) ; aliases = null ; morphAliases = null ; success = _BOOL ; } finally { IOUtils . closeWhileHandlingException ( out , aff1 , aff2 ) ; if ( success ) { Files . delete ( aff ) ; } else { IOUtils . deleteFilesIgnoringExceptions ( aff ) ; } } }
public void collapseBuilding ( Building bldg ) { buildings . removeElement ( bldg ) ; Enumeration < Coords > bldgCoords = bldg . getCoords ( ) ; while ( bldgCoords . hasMoreElements ( ) ) { final Coords coords = bldgCoords . nextElement ( ) ; collapseBuilding ( coords ) ; } }
@ RpcMethod public void detachISO ( String vmId , boolean isDeleteFile , AsyncMethodCallback < Host . AsyncClient . detach_iso_call > handler ) throws RpcException { ensureClient ( ) ; DetachISORequest detachISORequest = new DetachISORequest ( vmId ) ; detachISORequest . setDelete_file ( isDeleteFile ) ; clientProxy . setTimeout ( DETACH_ISO_TIMEOUT_MS ) ; logger . info ( _STR , vmId , getHostIp ( ) , detachISORequest ) ; try { clientProxy . detach_iso ( detachISORequest , handler ) ; } catch ( TException e ) { throw new RpcException ( e . getMessage ( ) ) ; } }
private String readNfcErrorMsg ( ByteBuffer reply ) throws IOException { int errorType = reply . getInt ( ) ; int errorCode = reply . getInt ( ) ; int msgLen = reply . getInt ( ) ; if ( msgLen == _NUM ) { return _STR ; } ByteBuffer msgBuffer = ByteBuffer . allocate ( msgLen ) ; readFully ( msgBuffer ) ; String errorMsg = new String ( msgBuffer . array ( ) , _NUM , msgLen - _NUM , Charsets . US_ASCII ) ; return String . format ( _STR , errorType , errorCode , errorMsg ) ; }
private void show ( boolean show ) { if ( show ) { if ( mXFade != null ) { mXFade . cancel ( ) ; } mState = STATE_PIE ; mCurrentItem = null ; PieItem root = getRoot ( ) ; for ( PieItem openItem : mOpen ) { if ( openItem . hasItems ( ) ) { for ( PieItem item : openItem . getItems ( ) ) { item . setSelected ( _BOOL ) ; } } } mLabel . setText ( _STR ) ; mOpen . clear ( ) ; mOpen . add ( root ) ; layoutPie ( ) ; fadeIn ( ) ; } else { mState = STATE_IDLE ; mTapMode = _BOOL ; if ( mXFade != null ) { mXFade . cancel ( ) ; } if ( mLabel != null ) { mLabel . setText ( _STR ) ; } } setVisible ( show ) ; mHandler . sendEmptyMessage ( show ? MSG_OPEN : MSG_CLOSE ) ; }
private synchronized void persistProfileAndNotifyChange ( AuthnProvider modifiedProvider , boolean newObject ) { modifiedProvider . setLastModified ( System . currentTimeMillis ( ) ) ; if ( newObject ) { _dbClient . createObject ( modifiedProvider ) ; } else { _dbClient . persistObject ( modifiedProvider ) ; } notifyChange ( ) ; }
public void addUndoableAction ( UndoableAction action ) { undoStack . push ( action ) ; redoStack . removeAllElements ( ) ; }
public IntArrayList ( int [ ] data ) { array = new int [ ( int ) ( data . length * _NUM ) + _NUM ] ; size = data . length ; System . arraycopy ( data , _NUM , array , _NUM , size ) ; }
private void addPingTimeData ( long sample ) { lastPingTimesLock . lock ( ) ; try { if ( lastPingTimes == null ) { lastPingTimes = new long [ PING_MOVING_AVERAGE_WINDOW ] ; Arrays . fill ( lastPingTimes , sample ) ; } else { System . arraycopy ( lastPingTimes , _NUM , lastPingTimes , _NUM , lastPingTimes . length - _NUM ) ; lastPingTimes [ lastPingTimes . length - _NUM ] = sample ; } } finally { lastPingTimesLock . unlock ( ) ; } }
public StringBuilder encodeBody ( StringBuilder buffer ) { return buffer . append ( contentEncoding ) ; }
protected void tearDown ( ) { try { ds . close ( ) ; sds . close ( ) ; } catch ( Exception e ) { } }
public String substring ( String subject , int start , int stop ) { if ( stop == - _NUM || stop >= subject . length ( ) ) { return subject . substring ( start ) ; } return subject . substring ( start , stop ) ; }
public boolean controlRunTrain ( int idx ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + idx + _STR + _runMode + _STR + getDisplayName ( ) ) ; } boolean ret = _BOOL ; int oldIndex = - MODE_MANUAL ; if ( _engineer == null ) { switch ( idx ) { case HALT : case RESUME : case RETRY : ret = _BOOL ; break ; case ABORT : if ( _runMode == Warrant . MODE_LEARN ) { firePropertyChange ( _STR , Integer . valueOf ( - MODE_LEARN ) , Integer . valueOf ( _idxCurrentOrder ) ) ; } else { stopWarrant ( _BOOL ) ; } break ; } } else { synchronized ( _engineer ) { oldIndex = _engineer . getRunState ( ) ; switch ( idx ) { case HALT : _engineer . setHalt ( _BOOL ) ; break ; case RESUME : _engineer . setHalt ( _BOOL ) ; restart ( ) ; ret = moveIntoNextBlock ( MID ) ; break ; case RETRY : BlockOrder bo = getBlockOrderAt ( _idxCurrentOrder + _NUM ) ; ret = _BOOL ; if ( bo != null ) { OBlock b = bo . getBlock ( ) ; if ( b . allocate ( this ) == null && ( b . getState ( ) & OBlock . OCCUPIED ) != _NUM ) { _idxCurrentOrder ++ ; if ( b . equals ( _stoppingBlock ) ) { _stoppingBlock . removePropertyChangeListener ( this ) ; _stoppingBlock = null ; } bo . setPath ( this ) ; restart ( ) ; goingActive ( b ) ; ret = _BOOL ; } } break ; case ABORT : stopWarrant ( _BOOL ) ; break ; } } } if ( ret ) { firePropertyChange ( _STR , Integer . valueOf ( oldIndex ) , Integer . valueOf ( idx ) ) ; } return ret ; }
public void removeCustomSashFormListener ( ICustomSashFormListener listener ) { if ( customSashFormListeners != null ) { customSashFormListeners . remove ( listener ) ; } }
public static void writeStringToFile ( File file , String data ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset ( ) , _BOOL ) ; }
protected void deleteSessionVariables ( String sessionId , String ... varNames ) { if ( sessionId . equals ( _STR ) ) { return ; } Key key = keyFactory . newKey ( sessionId ) ; Transaction transaction = datastore . newTransaction ( ) ; try { Entity stateEntity = transaction . get ( key ) ; Entity . Builder builder = Entity . builder ( stateEntity ) ; StringBuilder delNames = new StringBuilder ( ) ; for ( String varName : varNames ) { delNames . append ( varName + _STR ) ; builder = builder . remove ( varName ) ; } datastore . update ( builder . build ( ) ) ; } catch ( NullPointerException e ) { } finally { if ( transaction . active ( ) ) { transaction . rollback ( ) ; } } }
@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( _NUM ) ; format ( ( getYear ( ) + _NUM ) , _NUM , sb ) ; sb . append ( _STR ) ; format ( ( getMonth ( ) + _NUM ) , _NUM , sb ) ; sb . append ( _STR ) ; format ( getDate ( ) , _NUM , sb ) ; return sb . toString ( ) ; }
@ Override public void close ( ) throws IOException { if ( mBufferCount > _NUM ) { try { mQueue . write ( mBuffer , _NUM , mBufferCount ) ; } catch ( InterruptedException e ) { throw new IOException ( _STR ) ; } mBufferCount = _NUM ; } mQueue . close ( ) ; try { mThread . join ( ) ; } catch ( InterruptedException e ) { throw new IOException ( _STR ) ; } finally { super . close ( ) ; } checkException ( ) ; }
public static int parseStringAsInt ( String in ) throws IndexParseFieldException { try { return Integer . parseInt ( in ) ; } catch ( NumberFormatException e ) { throw new IndexParseFieldException ( in , e ) ; } }
public void writeAll ( ResultSet rs , boolean includeColumnNames , boolean trim ) throws SQLException , IOException { if ( includeColumnNames ) { writeColumnNames ( rs ) ; } while ( rs . next ( ) ) { writeNext ( resultService . getColumnValues ( rs , trim ) ) ; } }
public void testSpecialCase1 ( ) { byte aBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM } ; byte bBytes [ ] = { _NUM , - _NUM , - _NUM , - _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . and ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , result . signum ( ) ) ; }
private static void verifyDevice ( IDevice d , long mac , Short vlan , Integer ip , long swId , int port ) { assertNotNull ( d ) ; assertEquals ( MacAddress . of ( mac ) , d . getMACAddress ( ) ) ; if ( vlan == null ) assertArrayEquals ( new VlanVid [ ] { VlanVid . ofVlan ( - _NUM ) } , d . getVlanId ( ) ) ; else assertArrayEquals ( new VlanVid [ ] { VlanVid . ofVlan ( vlan ) } , d . getVlanId ( ) ) ; if ( ip == null ) assertArrayEquals ( new IPv4Address [ ] { IPv4Address . of ( _NUM ) } , d . getIPv4Addresses ( ) ) ; else assertArrayEquals ( new IPv4Address [ ] { IPv4Address . of ( ip ) } , d . getIPv4Addresses ( ) ) ; SwitchPort expectedAp = new SwitchPort ( DatapathId . of ( swId ) , OFPort . of ( port ) ) ; assertArrayEquals ( new SwitchPort [ ] { expectedAp } , d . getAttachmentPoints ( ) ) ; }
public ZoneRulesBuilder addWindow ( ZoneOffset standardOffset , LocalDateTime until , TimeDefinition untilDefinition ) { Objects . requireNonNull ( standardOffset , _STR ) ; Objects . requireNonNull ( until , _STR ) ; Objects . requireNonNull ( untilDefinition , _STR ) ; TZWindow window = new TZWindow ( standardOffset , until , untilDefinition ) ; if ( windowList . size ( ) > _NUM ) { TZWindow previous = windowList . get ( windowList . size ( ) - _NUM ) ; window . validateWindowOrder ( previous ) ; } windowList . add ( window ) ; return this ; }
public Hashtable < IPoint , List < ILineSegment > > intersections ( Iterator < ILineSegment > it ) { Collection < ILineSegment > c = new ArrayList < ILineSegment > ( ) ; while ( it . hasNext ( ) ) { c . add ( it . next ( ) ) ; } return intersections ( c . toArray ( new ILineSegment [ ] { } ) ) ; }
public boolean isTTFNativeFont ( ) { return ttf ; }
private void registerProviders ( ) { final DevMachine devMachine = appContext . getDevMachine ( ) ; if ( devMachine == null ) { return ; } final Set < Macro > providers = getMacros ( devMachine ) ; checkNotNull ( providers ) ; if ( providers . isEmpty ( ) ) { return ; } providerRegistry . register ( providers ) ; }
public LongMap ( int initialCapacity , float loadFactor ) { if ( initialCapacity < _NUM ) throw new IllegalArgumentException ( _STR + initialCapacity ) ; if ( capacity > _NUM << _NUM ) throw new IllegalArgumentException ( _STR + initialCapacity ) ; capacity = MathUtils . nextPowerOfTwo ( initialCapacity ) ; if ( loadFactor <= _NUM ) throw new IllegalArgumentException ( _STR + loadFactor ) ; this . loadFactor = loadFactor ; threshold = ( int ) ( capacity * loadFactor ) ; mask = capacity - _NUM ; hashShift = _NUM - Integer . numberOfTrailingZeros ( capacity ) ; stashCapacity = Math . max ( _NUM , ( int ) Math . ceil ( Math . log ( capacity ) ) + _NUM ) ; pushIterations = Math . max ( Math . min ( capacity , _NUM ) , ( int ) Math . sqrt ( capacity ) / _NUM ) ; keyTable = new long [ capacity + stashCapacity ] ; valueTable = ( V [ ] ) new Object [ keyTable . length ] ; }
protected ASN1Set ( ASN1Encodable obj ) { set . addElement ( obj ) ; }
protected void populateStreamBlob ( int testId , byte [ ] baseContent , int requiredSize ) throws SQLException { final byte [ ] testBytes = generateBlobContent ( baseContent , requiredSize ) ; try ( FbDatabase db = createDatabaseConnection ( ) ) { listener = new SimpleStatementListener ( ) ; transaction = getTransaction ( db ) ; try { statement = db . createStatement ( transaction ) ; statement . addStatementListener ( listener ) ; final BlobParameterBuffer blobParameterBuffer = db . createBlobParameterBuffer ( ) ; blobParameterBuffer . addArgument ( BlobParameterBuffer . TYPE , BlobParameterBuffer . TYPE_STREAM ) ; final FbBlob blob = db . createBlobForOutput ( transaction , blobParameterBuffer ) ; blob . open ( ) ; int bytesWritten = _NUM ; while ( bytesWritten < testBytes . length ) { byte [ ] buffer = new byte [ Math . min ( blob . getMaximumSegmentSize ( ) , testBytes . length - bytesWritten ) ] ; System . arraycopy ( testBytes , bytesWritten , buffer , _NUM , buffer . length ) ; blob . putSegment ( buffer ) ; bytesWritten += buffer . length ; } blob . close ( ) ; statement . prepare ( INSERT_BLOB_TABLE ) ; final DatatypeCoder datatypeCoder = db . getDatatypeCoder ( ) ; FieldValue param1 = new FieldValue ( datatypeCoder . encodeInt ( testId ) ) ; FieldValue param2 = new FieldValue ( datatypeCoder . encodeLong ( blob . getBlobId ( ) ) ) ; statement . execute ( RowValue . of ( param1 , param2 ) ) ; statement . close ( ) ; } finally { transaction . commit ( ) ; } } }
private static long signFromBit_antiCyclic ( final double value ) { return Double . doubleToRawLongBits ( value ) > > _NUM | _NUM ; }
public void addNearKey ( KeyCacheObject key , GridCacheSharedContext ctx ) throws IgniteCheckedException { nearKeys . add ( key ) ; }
private void analyzeClassFields ( String className , int action ) { try { Class < ? > dynamicClass = Class . forName ( className ) ; Field [ ] fields = dynamicClass . getDeclaredFields ( ) ; for ( Field field : fields ) { if ( isPrivateAndNonPrimitive ( field ) ) { oneToAnyConditions ( className , field , action ) ; manyToAnyConditions ( className , field , action ) ; } } } catch ( ClassNotFoundException ex ) { ex . printStackTrace ( ) ; throw new DatabaseGenerateException ( DatabaseGenerateException . CLASS_NOT_FOUND + className ) ; } }
protected boolean isLevelEnabled ( int logLevel ) { return ( logLevel >= currentLogLevel ) ; }
public static void loadAll ( final JFrame parent , final IDebugger debugger , final IAddress offset , final int size ) { checkArguments ( parent , debugger , offset ) ; final CDumpAllWaiter waiter = new CDumpAllWaiter ( debugger , offset , size ) ; CProgressDialog . showEndless ( parent , _STR + _STR , waiter ) ; if ( waiter . getException ( ) != null ) { CUtilityFunctions . logException ( waiter . getException ( ) ) ; final String innerMessage = _STR + _STR ; final String innerDescription = CUtilityFunctions . createDescription ( String . format ( _STR , offset . toHexString ( ) ) , new String [ ] { _STR } , new String [ ] { _STR } ) ; NaviErrorDialog . show ( parent , innerMessage , innerDescription , waiter . getException ( ) ) ; } }
public static boolean deleteDirectory ( String directory , boolean useOSNativeDelete ) throws IOException { boolean result = _BOOL ; if ( ! useOSNativeDelete ) { File dir = new File ( directory ) ; for ( File file : dir . listFiles ( ) ) { if ( file . delete ( ) ) { log . debug ( _STR , file . getName ( ) ) ; } else { log . debug ( _STR , file . getName ( ) ) ; file . deleteOnExit ( ) ; } file = null ; } if ( dir . delete ( ) ) { log . debug ( _STR ) ; result = _BOOL ; } else { log . debug ( _STR ) ; dir . deleteOnExit ( ) ; } dir = null ; } else { Process p = null ; Thread std = null ; try { Runtime runTime = Runtime . getRuntime ( ) ; log . debug ( _STR ) ; if ( File . separatorChar == _STR ) { p = runTime . exec ( _STR + directory . replace ( _STR , _STR ) + _STR ) ; } else { p = runTime . exec ( _STR + directory . replace ( _STR , File . separatorChar ) ) ; } std = stdOut ( p ) ; while ( std . isAlive ( ) ) { try { Thread . sleep ( _NUM ) ; } catch ( Exception e ) { } } log . debug ( _STR ) ; result = _BOOL ; } catch ( Exception e ) { log . error ( _STR , e ) ; } finally { if ( null != p ) { log . debug ( _STR ) ; p . destroy ( ) ; p = null ; } std = null ; } } return result ; }
public void testSetAttributeNodeNS1 ( ) throws Throwable { Document doc ; Element element ; Attr attribute1 ; Attr attribute2 ; Attr attrNode ; String attrName ; String attrNS ; NamedNodeMap attributes ; int length ; doc = ( Document ) load ( _STR , builder ) ; element = doc . createElementNS ( _STR , _STR ) ; attribute1 = doc . createAttributeNS ( _STR , _STR ) ; attribute2 = doc . createAttributeNS ( _STR , _STR ) ; attribute2 . setValue ( _STR ) ; element . setAttributeNodeNS ( attribute1 ) ; element . setAttributeNodeNS ( attribute2 ) ; attrNode = element . getAttributeNodeNS ( _STR , _STR ) ; attrName = attrNode . getNodeName ( ) ; attrNS = attrNode . getNamespaceURI ( ) ; assertEquals ( _STR , _STR , attrName ) ; assertEquals ( _STR , _STR , attrNS ) ; attributes = element . getAttributes ( ) ; length = ( int ) attributes . getLength ( ) ; assertEquals ( _STR , _NUM , length ) ; }
public boolean isCritical ( ) { return _BOOL ; }
public static String findEditTable ( String tables ) { if ( ! StringUtils . isEmpty ( tables ) ) { int spacepos = tables . indexOf ( _STR ) ; int commapos = tables . indexOf ( _STR ) ; if ( spacepos > _NUM && ( spacepos < commapos || commapos < _NUM ) ) { return tables . substring ( _NUM , spacepos ) ; } else if ( commapos > _NUM && ( commapos < spacepos || spacepos < _NUM ) ) { return tables . substring ( _NUM , commapos ) ; } return tables ; } else { throw new IllegalStateException ( _STR ) ; } }
public void writeOperationsCarFile ( ) { makeBackupFile ( defaultOperationsFilename ( ) ) ; try { if ( ! checkFile ( defaultOperationsFilename ( ) ) ) { java . io . File file = new java . io . File ( defaultOperationsFilename ( ) ) ; java . io . File parentDir = file . getParentFile ( ) ; if ( ! parentDir . exists ( ) ) { if ( ! parentDir . mkdir ( ) ) { log . error ( _STR ) ; } } if ( file . createNewFile ( ) ) { log . debug ( _STR ) ; } } writeFile ( defaultOperationsFilename ( ) ) ; } catch ( Exception e ) { log . error ( _STR + e ) ; } }
ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
private boolean hasNewFollowers ( List < Follower > followers ) { return ! followers . isEmpty ( ) && followers . get ( _NUM ) . newFollower ; }
private void onTrackPointElementStart ( Attributes attributes ) throws SAXException { String latitude = attributes . getValue ( ATT_LAT ) ; String longitude = attributes . getValue ( ATT_LON ) ; if ( latitude == null || longitude == null ) { throw new SAXException ( createErrorMessage ( _STR ) ) ; } try { latitudeValue = Double . parseDouble ( latitude ) ; longitudeValue = Double . parseDouble ( longitude ) ; } catch ( NumberFormatException e ) { throw new SAXException ( createErrorMessage ( _STR + latitude + _STR + longitude ) , e ) ; } }
protected final void firePropertyChange ( PropertyChangeEvent evt ) { pcs . firePropertyChange ( evt ) ; }
static int checkDesc ( final String desc , final int start , final boolean canBeVoid ) { if ( desc == null || start >= desc . length ( ) ) { throw new IllegalArgumentException ( _STR ) ; } int index ; switch ( desc . charAt ( start ) ) { case _STR : if ( canBeVoid ) { return start + _NUM ; } else { throw new IllegalArgumentException ( _STR + desc ) ; } case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : return start + _NUM ; case _STR : index = start + _NUM ; while ( index < desc . length ( ) && desc . charAt ( index ) == _STR ) { ++ index ; } if ( index < desc . length ( ) ) { return checkDesc ( desc , index , _BOOL ) ; } else { throw new IllegalArgumentException ( _STR + desc ) ; } case _STR : index = desc . indexOf ( _STR , start ) ; if ( index == - _NUM || index - start < _NUM ) { throw new IllegalArgumentException ( _STR + desc ) ; } try { checkInternalName ( desc , start + _NUM , index , null ) ; } catch ( IllegalArgumentException unused ) { throw new IllegalArgumentException ( _STR + desc ) ; } return index + _NUM ; default : throw new IllegalArgumentException ( _STR + desc ) ; } }
public static void sortFields ( FieldBinding [ ] sortedFields , int left , int right ) { Arrays . sort ( sortedFields , left , right , FIELD_COMPARATOR ) ; }
private void drawBackground ( final Graphics g ) { g . setColor ( m_bgColorOffset ) ; g . fillRect ( - m_firstColumn * m_charWidth , _NUM , m_offsetViewWidth , getHeight ( ) ) ; }
public void addUniqueAttribute ( final String elementName , final String attrName ) { if ( ( elementName != null ) && ( attrName != null ) ) { _uniqueElementAttrMap . put ( elementName , attrName ) ; } }
private static DeleteVmResponse checkDeleteVmResponse ( DeleteVmResponse deleteVmResponse ) throws RpcException { logger . info ( _STR , deleteVmResponse ) ; switch ( deleteVmResponse . getResult ( ) ) { case OK : break ; case SYSTEM_ERROR : throw new SystemErrorException ( deleteVmResponse . getError ( ) ) ; case VM_NOT_FOUND : throw new VmNotFoundException ( deleteVmResponse . getError ( ) ) ; case VM_NOT_POWERED_OFF : throw new VmNotPoweredOffException ( deleteVmResponse . getError ( ) ) ; default : throw new RpcException ( String . format ( _STR , deleteVmResponse . getResult ( ) ) ) ; } return deleteVmResponse ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; { boolean success = _BOOL ; try { child . deleteData ( _NUM , _NUM ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . INDEX_SIZE_ERR ) ; } assertTrue ( _STR , success ) ; } }
public void limitTransAndScale ( Matrix matrix , RectF content ) { float [ ] vals = new float [ _NUM ] ; matrix . getValues ( vals ) ; float curTransX = vals [ Matrix . MTRANS_X ] ; float curScaleX = vals [ Matrix . MSCALE_X ] ; float curTransY = vals [ Matrix . MTRANS_Y ] ; float curScaleY = vals [ Matrix . MSCALE_Y ] ; mScaleX = Math . max ( mMinScaleX , curScaleX ) ; mScaleY = Math . max ( mMinScaleY , curScaleY ) ; float width = _NUM ; float height = _NUM ; if ( content != null ) { width = content . width ( ) ; height = content . height ( ) ; } float maxTransX = - width * ( mScaleX - _NUM ) ; float newTransX = Math . min ( Math . max ( curTransX , maxTransX - mTransOffsetX ) , mTransOffsetX ) ; float maxTransY = height * ( mScaleY - _NUM ) ; float newTransY = Math . max ( Math . min ( curTransY , maxTransY + mTransOffsetY ) , - mTransOffsetY ) ; vals [ Matrix . MTRANS_X ] = newTransX ; vals [ Matrix . MSCALE_X ] = mScaleX ; vals [ Matrix . MTRANS_Y ] = newTransY ; vals [ Matrix . MSCALE_Y ] = mScaleY ; matrix . setValues ( vals ) ; }
public BlazeValueFactory valueFactory ( ) { return vf ; }
public StatefulRefreshToken ( JsonValue token ) throws InvalidGrantException { super ( token ) ; if ( ! OAUTH_REFRESH_TOKEN . equals ( getTokenName ( ) ) ) { throw new InvalidGrantException ( _STR + getTokenId ( ) ) ; } }
public void putStyle ( String styleId , StyleSelector styleSelector ) { try { int id = Integer . parseInt ( styleId ) ; mMaxStyleId = Math . max ( mMaxStyleId , id ) ; } catch ( NumberFormatException e ) { } mStyles . put ( styleId , styleSelector ) ; }
private static String extractClientName ( String clientId , String host ) { String hostExcludedId = _STR ; if ( ( isIPv6 ( host ) || isIPv4 ( host ) ) && clientId . startsWith ( host ) ) { hostExcludedId = clientId . substring ( host . length ( ) ) ; } else { int firstDotIndex = host . indexOf ( _STR ) ; if ( firstDotIndex != - _NUM ) { String hostShortName = host . substring ( _NUM , firstDotIndex ) ; hostExcludedId = clientId . substring ( hostShortName . length ( ) ) ; } } String vmPIDAndKindRegex = _STR ; String regex = _STR ; String name = NOT_AVAILABLE ; String temp = hostExcludedId ; int openIndex = temp . indexOf ( _STR ) ; if ( openIndex != - _NUM ) { regex = vmPIDAndKindRegex + regex ; } if ( temp . matches ( regex ) ) { String [ ] splitted = temp . split ( _STR ) ; name = splitted [ splitted . length - _NUM ] ; } return name ; }
public static < T > FastFuture < T > fromCompletableFuture ( final CompletableFuture < T > cf ) { final FastFuture < T > f = new FastFuture < > ( ) ; cf . thenAccept ( null ) ; cf . exceptionally ( null ) ; return f ; }
public static boolean isPlaceAction ( InventoryAction action ) { switch ( action ) { case SWAP_WITH_CURSOR : case PLACE_ONE : case PLACE_ALL : case PLACE_SOME : return _BOOL ; } return _BOOL ; }
private void refreshMarkers ( ) { removeAll ( ) ; Map markerMap = new HashMap ( ) ; List notices = textArea . getParserNotices ( ) ; for ( Iterator i = notices . iterator ( ) ; i . hasNext ( ) ; ) { ParserNotice notice = ( ParserNotice ) i . next ( ) ; if ( notice . getLevel ( ) <= levelThreshold || ( notice instanceof TaskNotice ) ) { Integer key = new Integer ( notice . getLine ( ) ) ; Marker m = ( Marker ) markerMap . get ( key ) ; if ( m == null ) { m = new Marker ( notice ) ; m . addMouseListener ( listener ) ; markerMap . put ( key , m ) ; add ( m ) ; } else { m . addNotice ( notice ) ; } } } if ( getShowMarkedOccurrences ( ) && textArea . getMarkOccurrences ( ) ) { List occurrences = textArea . getMarkedOccurrences ( ) ; for ( Iterator i = occurrences . iterator ( ) ; i . hasNext ( ) ; ) { DocumentRange range = ( DocumentRange ) i . next ( ) ; int line = _NUM ; try { line = textArea . getLineOfOffset ( range . getStartOffset ( ) ) ; } catch ( BadLocationException ble ) { continue ; } ParserNotice notice = new MarkedOccurrenceNotice ( range ) ; Integer key = new Integer ( line ) ; Marker m = ( Marker ) markerMap . get ( key ) ; if ( m == null ) { m = new Marker ( notice ) ; m . addMouseListener ( listener ) ; markerMap . put ( key , m ) ; add ( m ) ; } else { if ( ! m . containsMarkedOccurence ( ) ) { m . addNotice ( notice ) ; } } } } revalidate ( ) ; repaint ( ) ; }
private List < View > addView ( View view , List < View > cache ) { if ( cache == null ) { cache = new LinkedList < View > ( ) ; } cache . add ( view ) ; return cache ; }
public static byte [ ] readInputStream ( InputStream i ) throws IOException { ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; copy ( i , b ) ; return b . toByteArray ( ) ; }
public void playMedia ( boolean showPlayerWindow ) { String filename = stopAndPrepareFilename ( ) ; if ( filename . length ( ) > _NUM ) { MPlayerMediator mplayerMediator = MPlayerMediator . instance ( ) ; if ( mplayerMediator != null ) { mplayerMediator . showPlayerWindow ( showPlayerWindow ) ; } mplayer . open ( filename , getAdjustedVolume ( ) ) ; } notifyState ( getState ( ) ) ; }
public static String toUTF8String ( String s ) { return new String ( s . getBytes ( ) , Charset . forName ( PanboxConstants . STANDARD_CHARSET ) ) ; }
public static int encodeCacheFlags ( Collection < GridClientCacheFlag > flagSet ) { int bits = _NUM ; if ( flagSet . contains ( GridClientCacheFlag . SKIP_STORE ) ) bits |= _NUM ; return bits ; }
public void add ( DataSource source , boolean visible ) { add ( data . size ( ) , source , visible ) ; }
@ Override public void addValue ( double value , double weight ) { m_WeightedSum += value * weight ; m_WeightedSumSquared += value * value * weight ; m_SumOfWeights += weight ; if ( m_TM . get ( value ) == null ) { m_TM . put ( value , weight ) ; } else { m_TM . put ( value , m_TM . get ( value ) + weight ) ; } }
private JPanel buildRow ( final String string , final JCheckBox checkBox ) { final JPanel panel = new JPanel ( new BorderLayout ( ) ) ; panel . add ( new JLabel ( string ) , BorderLayout . WEST ) ; panel . add ( checkBox , BorderLayout . EAST ) ; checkBox . addItemListener ( m_checkBoxListener ) ; return panel ; }
private static synchronized String formatAndParse ( SimpleDateFormat formatDate , SimpleDateFormat parseDate , String text ) { try { Date date = parseDate . parse ( text ) ; String result = formatDate . format ( date ) ; return result ; } catch ( ParseException e ) { logger . warning ( _STR + text ) ; } return _STR ; }
public static boolean isChildGroup ( String group ) { return group . indexOf ( GROUP_DELIMITER ) != - _NUM ; }
private void throwArrayIndexOutOfBoundsException ( int itemIndex ) { throw new ArrayIndexOutOfBoundsException ( _STR + _STR + spaceItems . size ( ) + _STR + itemIndex ) ; }
private LocusInfo createNextUncoveredLocusInfo ( final Locus stopBeforeLocus ) { while ( lastReferenceSequence <= stopBeforeLocus . getSequenceIndex ( ) && lastReferenceSequence <= referenceSequenceMask . getMaxSequenceIndex ( ) ) { if ( lastReferenceSequence == stopBeforeLocus . getSequenceIndex ( ) && lastPosition + _NUM >= stopBeforeLocus . getPosition ( ) ) { return null ; } final int nextbit = referenceSequenceMask . nextPosition ( lastReferenceSequence , lastPosition ) ; if ( nextbit == - _NUM ) { if ( lastReferenceSequence == stopBeforeLocus . getSequenceIndex ( ) ) { lastPosition = stopBeforeLocus . getPosition ( ) ; return null ; } lastReferenceSequence ++ ; lastPosition = _NUM ; } else if ( lastReferenceSequence < stopBeforeLocus . getSequenceIndex ( ) || nextbit < stopBeforeLocus . getPosition ( ) ) { lastPosition = nextbit ; return new LocusInfo ( getReferenceSequence ( lastReferenceSequence ) , lastPosition ) ; } else if ( nextbit >= stopBeforeLocus . getPosition ( ) ) { return null ; } } return null ; }
public void globalConfigChanged ( String serviceName , String version , String groupName , String serviceComponent , int changeType ) { }
public static void launchEmailIntent ( final Activity activity , String addr , String text ) { Log . i ( LOG_TAG , _STR + activity . getLocalClassName ( ) ) ; Intent emailIntent = new Intent ( Intent . ACTION_SEND ) ; emailIntent . putExtra ( Intent . EXTRA_EMAIL , new String [ ] { addr } ) ; emailIntent . setType ( _STR ) ; PackageManager emailpackageManager = activity . getPackageManager ( ) ; List < ResolveInfo > emailresolveInfos = emailpackageManager . queryIntentActivities ( emailIntent , _NUM ) ; if ( emailresolveInfos . size ( ) > _NUM ) { activity . startActivity ( emailIntent ) ; } }
public int count ( ) { return n ; }
public void add ( int position , T item ) { mData . add ( position , item ) ; notifyItemInserted ( position ) ; }
public void addTranslator ( ClassPool cp , Translator t ) throws NotFoundException , CannotCompileException { source = cp ; translator = t ; t . start ( cp ) ; }
private void onMainContentScrolled ( int currentY , int deltaY ) { if ( deltaY > mActionBarAutoHideSensivity ) { deltaY = mActionBarAutoHideSensivity ; } else if ( deltaY < - mActionBarAutoHideSensivity ) { deltaY = - mActionBarAutoHideSensivity ; } if ( Math . signum ( deltaY ) * Math . signum ( mActionBarAutoHideSignal ) < _NUM ) { mActionBarAutoHideSignal = deltaY ; } else { mActionBarAutoHideSignal += deltaY ; } boolean shouldShow = currentY < mActionBarAutoHideMinY || ( mActionBarAutoHideSignal <= - mActionBarAutoHideSensivity ) ; autoShowOrHideActionBar ( shouldShow ) ; }
public void writeLEChars ( String s ) throws IOException { int length = s . length ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { int c = s . charAt ( i ) ; out . write ( c & _NUM ) ; out . write ( ( c > > > _NUM ) & _NUM ) ; } written += length * _NUM ; }
public static String readLine ( ) { String line ; try { line = scanner . nextLine ( ) ; } catch ( NoSuchElementException e ) { line = null ; } return line ; }
@ Deprecated public boolean isValid ( String regex ) { if ( regex == null ) { return _BOOL ; } Pattern pattern = Pattern . compile ( regex ) ; Matcher matcher = pattern . matcher ( getText ( ) ) ; return matcher . matches ( ) ; }
public void writeToFile ( String filename ) { GridUtils . writeSpatialGridTable ( this , filename ) ; }
public void addFooterView ( View v , Object data , boolean isSelectable ) { FixedViewInfo info = new FixedViewInfo ( ) ; info . view = v ; info . data = data ; info . isSelectable = isSelectable ; mFooterViewInfos . add ( info ) ; if ( mAdapter != null && mDataSetObserver != null ) { mDataSetObserver . onChanged ( ) ; } }
public void addCloseHook ( CloseHook hook ) { if ( closeHooks == null ) { closeHooks = new ArrayList < > ( ) ; } closeHooks . add ( hook ) ; }
public void rejectedExecution ( Runnable r , ThreadPoolExecutor e ) { if ( ! e . isShutdown ( ) ) { r . run ( ) ; } }
private void updateRange ( double x , double y ) { mMinX = Math . min ( mMinX , x ) ; mMaxX = Math . max ( mMaxX , x ) ; mMinY = Math . min ( mMinY , y ) ; mMaxY = Math . max ( mMaxY , y ) ; }
static boolean checkStandardUPCEANChecksum ( CharSequence s ) throws FormatException { int length = s . length ( ) ; if ( length == _NUM ) { return _BOOL ; } int sum = _NUM ; for ( int i = length - _NUM ; i >= _NUM ; i -= _NUM ) { int digit = ( int ) s . charAt ( i ) - ( int ) _STR ; if ( digit < _NUM || digit > _NUM ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } sum *= _NUM ; for ( int i = length - _NUM ; i >= _NUM ; i -= _NUM ) { int digit = ( int ) s . charAt ( i ) - ( int ) _STR ; if ( digit < _NUM || digit > _NUM ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } return sum % _NUM == _NUM ; }
public void readConfig ( String filename ) throws FileNotFoundException { if ( filename == null || filename . equals ( _STR ) ) return ; readConfig ( new FileReader ( filename ) ) ; }
private void applyTradingBonus ( Player player ) { player . incrementTradescore ( ) ; }
public static String slurpURLNoExceptions ( URL u ) { try { return slurpURL ( u ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }
private static void createCombinedTrace ( final TraceList newTrace , final List < TraceList > traces , final Set < BreakpointAddress > addresses ) { final Set < BreakpointAddress > visitedAddresses = new LinkedHashSet < BreakpointAddress > ( ) ; for ( final TraceList trace : traces ) { for ( final ITraceEvent event : trace ) { final BreakpointAddress address = event . getOffset ( ) ; if ( ! addresses . contains ( address ) ) { continue ; } if ( visitedAddresses . contains ( address ) ) { continue ; } visitedAddresses . add ( address ) ; newTrace . addEvent ( event ) ; } } }
public void interruptAll ( ) { synchronized ( knownActorTasks ) { for ( Future < Void > ft : knownActorTasks ) { ft . cancel ( _BOOL ) ; } threadGuard . interruptAll ( ) ; } }
@ SuppressWarnings ( _STR ) public void registerDefaultDeviceTypes ( ) { final HashMap < String , String > devicesList = DefaultPlatform . getDeviceServiceMap ( ) ; for ( HashMap . Entry < String , String > entry : devicesList . entrySet ( ) ) { String key = entry . getKey ( ) ; String value = entry . getValue ( ) ; try { registerDeviceService ( ( Class < DeviceService > ) Class . forName ( key ) , ( Class < DiscoveryProvider > ) Class . forName ( value ) ) ; } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } } }
private static void removeDependencySubsets ( String swcLocation , Map < String , Set < String > > dependencyMap , SwcDependencyInfoImpl depInfo ) { Set < String > removeSet = new HashSet < String > ( ) ; SwcExternalScriptInfo externalInfo = depInfo . getSwcExternalScriptInfo ( swcLocation ) ; Map < String , Set < String > > externalsBySwc = new HashMap < String , Set < String > > ( ) ; for ( String swcDependLocation : dependencyMap . get ( swcLocation ) ) { for ( String swcDependLocation2 : dependencyMap . get ( swcLocation ) ) { if ( swcDependLocation . equals ( swcDependLocation2 ) ) continue ; Set < String > externalScripts = externalsBySwc . get ( swcDependLocation ) ; Set < String > externalScripts2 = externalsBySwc . get ( swcDependLocation2 ) ; if ( externalScripts == null ) { externalScripts = externalInfo . getExternalScripts ( swcDependLocation ) ; externalsBySwc . put ( swcDependLocation , externalScripts ) ; } if ( externalScripts2 == null ) { externalScripts2 = externalInfo . getExternalScripts ( swcDependLocation2 ) ; externalsBySwc . put ( swcDependLocation2 , externalScripts2 ) ; } if ( externalScripts2 . size ( ) > externalScripts . size ( ) && externalScripts2 . containsAll ( externalScripts ) ) { removeSet . add ( swcDependLocation ) ; break ; } } } Set < String > dependencySet = dependencyMap . get ( swcLocation ) ; dependencySet . removeAll ( removeSet ) ; }
private void drawTicks ( Canvas canvas , double min , double max , double minAngle , double maxAngle , int centerX , int centerY , double longRadius , double shortRadius , double ticks , Paint paint , boolean labels ) { for ( double i = min ; i <= max ; i += ticks ) { double angle = getAngleForValue ( i , minAngle , maxAngle , min , max ) ; double sinValue = Math . sin ( angle ) ; double cosValue = Math . cos ( angle ) ; int x1 = Math . round ( centerX + ( float ) ( shortRadius * sinValue ) ) ; int y1 = Math . round ( centerY + ( float ) ( shortRadius * cosValue ) ) ; int x2 = Math . round ( centerX + ( float ) ( longRadius * sinValue ) ) ; int y2 = Math . round ( centerY + ( float ) ( longRadius * cosValue ) ) ; canvas . drawLine ( x1 , y1 , x2 , y2 , paint ) ; if ( labels ) { paint . setTextAlign ( Align . LEFT ) ; if ( x1 <= x2 ) { paint . setTextAlign ( Align . RIGHT ) ; } String text = i + _STR ; if ( Math . round ( i ) == ( long ) i ) { text = ( long ) i + _STR ; } canvas . drawText ( text , x1 , y1 , paint ) ; } } }
private void updateBaseMatrix ( Drawable d ) { ImageView imageView = getImageView ( ) ; if ( null == imageView || null == d ) { return ; } final float viewWidth = imageView . getWidth ( ) ; final float viewHeight = imageView . getHeight ( ) ; final int drawableWidth = d . getIntrinsicWidth ( ) ; final int drawableHeight = d . getIntrinsicHeight ( ) ; mBaseMatrix . reset ( ) ; final float widthScale = viewWidth / drawableWidth ; final float heightScale = viewHeight / drawableHeight ; if ( mScaleType == ScaleType . CENTER ) { mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth ) / _NUM , ( viewHeight - drawableHeight ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_CROP ) { float scale = Math . max ( widthScale , heightScale ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_INSIDE ) { float scale = Math . min ( _NUM , Math . min ( widthScale , heightScale ) ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else { RectF mTempSrc = new RectF ( _NUM , _NUM , drawableWidth , drawableHeight ) ; RectF mTempDst = new RectF ( _NUM , _NUM , viewWidth , viewHeight ) ; switch ( mScaleType ) { case FIT_CENTER : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . CENTER ) ; break ; case FIT_START : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . START ) ; break ; case FIT_END : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . END ) ; break ; case FIT_XY : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . FILL ) ; break ; default : break ; } } resetMatrix ( ) ; }
public static < T , K , L extends List < T > > BiFunction < Partition < T , K , L > , T , Boolean > alwaysInsert ( ) { return null ; }
public void testFindSpringOpenLdap ( ) { LdapProxy proxy = getLdapOpenLdap ( ) ; List result = null ; try { result = proxy . find ( getLdapSearchVO ( _STR , LdapConstants . NO_SEARCH_LIMIT , null , null , null , LdapScopeConstants . SCOPE_SUBTREE ) ) ; } catch ( Exception e ) { } assertNotNull ( result ) ; assertEquals ( _NUM , result . size ( ) ) ; }
public void testConstructorStringRadix8 ( ) { String value = _STR ; int radix = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( value , radix ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , aNumber . signum ( ) ) ; }
private static boolean inEncoding ( char ch , String encoding ) { boolean isInEncoding ; try { char cArray [ ] = new char [ _NUM ] ; cArray [ _NUM ] = ch ; String s = new String ( cArray ) ; byte [ ] bArray = s . getBytes ( encoding ) ; isInEncoding = inEncoding ( ch , bArray ) ; } catch ( Exception e ) { isInEncoding = _BOOL ; if ( encoding == null ) isInEncoding = _BOOL ; } return isInEncoding ; }
public void delete ( SSOToken token , String dn ) throws SMSException , SSOException { for ( String entry : subEntries ( token , dn , _STR , _NUM , _BOOL , _BOOL ) ) { debug . message ( _STR , entry ) ; delete ( token , getNamingAttribute ( ) + _STR + entry + _STR + dn ) ; } for ( String subOrg : searchSubOrgNames ( token , dn , _STR , _NUM , _BOOL , _BOOL , _BOOL ) ) { debug . message ( _STR , subOrg ) ; delete ( token , subOrg ) ; } delete ( token . getPrincipal ( ) , dn ) ; objectChanged ( dn , DELETE ) ; }
private void removeHighlights ( ) { if ( textArea != null ) { RSyntaxTextAreaHighlighter h = ( RSyntaxTextAreaHighlighter ) textArea . getHighlighter ( ) ; for ( int i = _NUM ; i < tags . size ( ) ; i ++ ) { h . removeMarkOccurrencesHighlight ( tags . get ( i ) ) ; } } tags . clear ( ) ; }
private static < T extends AbstractBlockBase < T > > void enqueueSuccessors ( T block , PriorityQueue < T > worklist , BitSet visitedBlocks ) { for ( T successor : block . getSuccessors ( ) ) { if ( ! visitedBlocks . get ( successor . getId ( ) ) ) { visitedBlocks . set ( successor . getId ( ) ) ; worklist . add ( successor ) ; } } }
protected void addCommonComponent ( XMLComponent component ) { if ( fCommonComponents . contains ( component ) ) { return ; } fCommonComponents . add ( component ) ; addRecognizedParamsAndSetDefaults ( component ) ; }
public void addRole ( String role ) { if ( role != null ) { roles . add ( role ) ; } }
public CModulesCheckBoxPanel ( final CModulesTableModel modulesTableModel ) { super ( new BorderLayout ( ) ) ; final JCheckBox checkBox = new JCheckBox ( _STR ) ; checkBox . addItemListener ( new InternalCheckboxListener ( ) ) ; add ( checkBox ) ; m_modulesTableModel = modulesTableModel ; }
public QDate ( ) { this ( _gmtTimeZone ) ; }
protected void responseSent ( StreamResponseMessage responseMessage ) { if ( syncProtocol != null ) syncProtocol . responseSent ( responseMessage ) ; }
public final void append ( FastStringBuffer value ) { if ( value == null ) return ; int strlen = value . length ( ) ; if ( _NUM == strlen ) return ; int copyfrom = _NUM ; char [ ] chunk = m_array [ m_lastChunk ] ; int available = m_chunkSize - m_firstFree ; while ( strlen > _NUM ) { if ( available > strlen ) available = strlen ; int sourcechunk = ( copyfrom + value . m_chunkSize - _NUM ) > > > value . m_chunkBits ; int sourcecolumn = copyfrom & value . m_chunkMask ; int runlength = value . m_chunkSize - sourcecolumn ; if ( runlength > available ) runlength = available ; System . arraycopy ( value . m_array [ sourcechunk ] , sourcecolumn , m_array [ m_lastChunk ] , m_firstFree , runlength ) ; if ( runlength != available ) System . arraycopy ( value . m_array [ sourcechunk + _NUM ] , _NUM , m_array [ m_lastChunk ] , m_firstFree + runlength , available - runlength ) ; strlen -= available ; copyfrom += available ; if ( strlen > _NUM ) { int i = m_array . length ; if ( m_lastChunk + _NUM == i ) { char [ ] [ ] newarray = new char [ i + _NUM ] [ ] ; System . arraycopy ( m_array , _NUM , newarray , _NUM , i ) ; m_array = newarray ; } chunk = m_array [ ++ m_lastChunk ] ; if ( chunk == null ) { if ( m_lastChunk == _NUM << m_rebundleBits && m_chunkBits < m_maxChunkBits ) { m_innerFSB = new FastStringBuffer ( this ) ; } chunk = m_array [ m_lastChunk ] = new char [ m_chunkSize ] ; } available = m_chunkSize ; m_firstFree = _NUM ; } } m_firstFree += available ; }
protected Tuple < BlobStoreIndexShardSnapshots , Integer > buildBlobStoreIndexShardSnapshots ( Map < String , BlobMetaData > blobs ) { int latest = - _NUM ; for ( String name : blobs . keySet ( ) ) { if ( name . startsWith ( SNAPSHOT_INDEX_PREFIX ) ) { try { int gen = Integer . parseInt ( name . substring ( SNAPSHOT_INDEX_PREFIX . length ( ) ) ) ; if ( gen > latest ) { latest = gen ; } } catch ( NumberFormatException ex ) { logger . warn ( _STR , name ) ; } } } if ( latest >= _NUM ) { try { return new Tuple < > ( indexShardSnapshotsFormat . read ( blobContainer , Integer . toString ( latest ) ) , latest ) ; } catch ( IOException e ) { logger . warn ( _STR , e , SNAPSHOT_INDEX_PREFIX + latest ) ; } } List < SnapshotFiles > snapshots = new ArrayList < > ( ) ; for ( String name : blobs . keySet ( ) ) { try { BlobStoreIndexShardSnapshot snapshot = null ; if ( name . startsWith ( SNAPSHOT_PREFIX ) ) { snapshot = indexShardSnapshotFormat . readBlob ( blobContainer , name ) ; } else if ( name . startsWith ( LEGACY_SNAPSHOT_PREFIX ) ) { snapshot = indexShardSnapshotLegacyFormat . readBlob ( blobContainer , name ) ; } if ( snapshot != null ) { snapshots . add ( new SnapshotFiles ( snapshot . snapshot ( ) , snapshot . indexFiles ( ) ) ) ; } } catch ( IOException e ) { logger . warn ( _STR , e , name ) ; } } return new Tuple < > ( new BlobStoreIndexShardSnapshots ( snapshots ) , - _NUM ) ; }
protected MapleQuestRequirement ( MapleQuest quest , ReadBin data ) throws IOException { this . quest = quest ; this . dayByDay = data . readByte ( ) > _NUM ; this . normalAutoStart = data . readByte ( ) > _NUM ; this . lvmin = data . readShort ( ) ; this . lvmax = data . readShort ( ) ; this . mbmin = data . readShort ( ) ; this . charismaMin = data . readShort ( ) ; this . charmMin = data . readShort ( ) ; this . craftMin = data . readShort ( ) ; this . insightMin = data . readShort ( ) ; this . senseMin = data . readShort ( ) ; this . willMin = data . readShort ( ) ; this . pop = data . readShort ( ) ; this . pettamenessmin = data . readShort ( ) ; this . subJobFlag = data . readShort ( ) ; this . npc = data . readInt ( ) ; this . interval = data . readInt ( ) ; this . end = data . readString ( ) ; this . startscript = data . readString ( ) ; this . endscript = data . readString ( ) ; short size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int field = data . readInt ( ) ; fieldEnter . add ( field ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { short job = data . readShort ( ) ; jobs . add ( job ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int id = data . readInt ( ) ; boolean acquire = data . readByte ( ) > _NUM ; skills . put ( id , acquire ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int id = data . readInt ( ) ; byte state = data . readByte ( ) ; byte order = data . readByte ( ) ; quests . put ( id , state ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int id = data . readInt ( ) ; int count = data . readInt ( ) ; byte order = data . readByte ( ) ; items . put ( id , count ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int id = data . readInt ( ) ; int count = data . readInt ( ) ; mobs . put ( id , count ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int id = data . readInt ( ) ; pets . add ( id ) ; } }
public ForumPostConfig createReply ( ForumPostConfig config ) { config . addCredentials ( this ) ; String xml = POST ( this . url + _STR , config . toXML ( ) ) ; Element root = parse ( xml ) ; if ( root == null ) { return null ; } try { ForumPostConfig reply = new ForumPostConfig ( ) ; reply . parseXML ( root ) ; return reply ; } catch ( Exception exception ) { this . exception = SDKException . parseFailure ( exception ) ; throw this . exception ; } }
public boolean isArmed ( ) { return other . isArmed ( ) ; }
public static AttribKey forHtmlAttrib ( ElKey el , String localName ) { return new AttribKey ( el , HTML_NS , localName ) ; }
SparseArray ( Class < L > linearArrayType , int [ ] rowIndices , int [ ] colIndices , L realValues , L imagValues , int numRows , int numCols ) { validateUserSuppliedParameters ( linearArrayType , rowIndices , colIndices , realValues , imagValues ) ; _baseComponentType = linearArrayType . getComponentType ( ) ; _outputArrayType = ( Class < L [ ] > ) ArrayUtils . getArrayClass ( _baseComponentType , _NUM ) ; Map < SparseKey , SparseValue > sparseMap = createSparseMap ( linearArrayType , rowIndices , colIndices , realValues , imagValues , numRows , numCols ) ; _numRows = numRows ; _numCols = numCols ; ArrayList < SparseKey > keys = new ArrayList < SparseKey > ( sparseMap . keySet ( ) ) ; Collections . sort ( keys ) ; _rowIndices = new int [ keys . size ( ) ] ; _colIndices = new int [ keys . size ( ) ] ; _linearIndices = new int [ keys . size ( ) ] ; _realValues = linearArrayType . cast ( Array . newInstance ( _baseComponentType , keys . size ( ) ) ) ; _imagValues = imagValues == null ? null : linearArrayType . cast ( Array . newInstance ( _baseComponentType , keys . size ( ) ) ) ; for ( int i = _NUM ; i < keys . size ( ) ; i ++ ) { SparseKey key = keys . get ( i ) ; _rowIndices [ i ] = key . row ; _colIndices [ i ] = key . col ; _linearIndices [ i ] = key . linearIndex ; SparseValue value = sparseMap . get ( key ) ; setSparseValue ( value , _realValues , _imagValues , i ) ; } }
public static Tuple max ( TupleSet tuples , String field , Comparator cmp ) { if ( tuples instanceof Table ) { Table table = ( Table ) tuples ; ColumnMetadata md = table . getMetadata ( field ) ; return table . getTuple ( md . getMaximumRow ( ) ) ; } else { return max ( tuples . tuples ( ) , field , cmp ) ; } }
protected void updateRadioLinks ( ) { m_CVBut . setEnabled ( _BOOL ) ; m_CVText . setEnabled ( m_CVBut . isSelected ( ) ) ; m_CVLab . setEnabled ( m_CVBut . isSelected ( ) ) ; m_SeedText . setEnabled ( m_CVBut . isSelected ( ) ) ; m_SeedLab . setEnabled ( m_CVBut . isSelected ( ) ) ; if ( m_AttributeEvaluatorEditor . getValue ( ) instanceof AttributeTransformer ) { m_CVBut . setSelected ( _BOOL ) ; m_CVBut . setEnabled ( _BOOL ) ; m_CVText . setEnabled ( _BOOL ) ; m_CVLab . setEnabled ( _BOOL ) ; m_SeedText . setEnabled ( _BOOL ) ; m_SeedLab . setEnabled ( _BOOL ) ; m_TrainBut . setSelected ( _BOOL ) ; } }
private String idString ( int id1 , int id2 ) { return _STR + Integer . toHexString ( id2 & _NUM ) + _STR + Integer . toHexString ( id1 & _NUM ) + _STR + ( ( id2 & _NUM ) * _NUM + ( id1 & _NUM ) ) + _STR ; }
public EtagCache resetStats ( ) { hits . set ( _NUM ) ; misses . set ( _NUM ) ; return this ; }
public void testOtherToStringDefault ( ) { NumberConverter converter = makeConverter ( ) ; assertEquals ( _STR , _STR , converter . convert ( String . class , new StringBuffer ( _STR ) ) ) ; }
private void removeItemAtInt ( int index , boolean updateChildrenOnMenuViews ) { if ( ( index < _NUM ) || ( index >= mItems . size ( ) ) ) return ; mItems . remove ( index ) ; if ( updateChildrenOnMenuViews ) onItemsChanged ( _BOOL ) ; }
public void testShiftRight3 ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = _NUM ; int number = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , _NUM , - _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . shiftRight ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
private void showFilterDialog ( Filter filter ) { int sortOrder = mAdapter . getCount ( ) - _NUM ; if ( filter == null ) { EditFilterActivity . createNewFilter ( getActivity ( ) , sortOrder ) ; } else { EditFilterActivity . editFilter ( getActivity ( ) , filter , sortOrder ) ; } }
public static int numPixelsBetween ( int x1 , int y1 , int x2 , int y2 ) { return ( int ) Math . sqrt ( Math . pow ( ( double ) ( x1 - x2 ) , _NUM ) + Math . pow ( ( double ) ( y1 - y2 ) , _NUM ) ) ; }
private KeyStore createKeys ( KeyStore keyStore , String keyAlgorithm , String publicAlias , String privateAlias , PrivateKeyEntry signer ) throws Exception { PrivateKey caKey ; X509Certificate caCert ; X509Certificate [ ] caCertChain ; if ( signer == null ) { caKey = null ; caCert = null ; caCertChain = null ; } else { caKey = signer . getPrivateKey ( ) ; caCert = ( X509Certificate ) signer . getCertificate ( ) ; caCertChain = ( X509Certificate [ ] ) signer . getCertificateChain ( ) ; } PrivateKey privateKey ; X509Certificate x509c ; if ( publicAlias == null && privateAlias == null ) { privateKey = null ; x509c = null ; } else { int keySize ; if ( keyAlgorithm . equals ( _STR ) ) { keySize = _NUM ; } else if ( keyAlgorithm . equals ( _STR ) ) { keySize = _NUM ; } else if ( keyAlgorithm . equals ( _STR ) ) { keySize = _NUM ; } else if ( keyAlgorithm . equals ( _STR ) ) { keySize = _NUM ; keyAlgorithm = _STR ; } else { throw new IllegalArgumentException ( _STR + keyAlgorithm ) ; } KeyPairGenerator kpg = KeyPairGenerator . getInstance ( keyAlgorithm ) ; kpg . initialize ( keySize , new SecureRandom ( ) ) ; KeyPair kp = kpg . generateKeyPair ( ) ; privateKey = kp . getPrivate ( ) ; PublicKey publicKey = kp . getPublic ( ) ; X500Principal issuer = ( ( caCert != null ) ? caCert . getSubjectX500Principal ( ) : subject ) ; PrivateKey signingKey = ( caKey == null ) ? privateKey : caKey ; x509c = createCertificate ( publicKey , signingKey , subject , issuer , keyUsage , ca , extendedKeyUsages , criticalExtendedKeyUsages , subjectAltNames , permittedNameConstraints , excludedNameConstraints ) ; } X509Certificate [ ] x509cc ; if ( privateAlias == null ) { x509cc = null ; } else if ( caCertChain == null ) { x509cc = new X509Certificate [ ] { x509c } ; } else { x509cc = new X509Certificate [ caCertChain . length + _NUM ] ; x509cc [ _NUM ] = x509c ; System . arraycopy ( caCertChain , _NUM , x509cc , _NUM , caCertChain . length ) ; } if ( privateAlias != null ) { keyStore . setKeyEntry ( privateAlias , privateKey , keyPassword , x509cc ) ; } if ( publicAlias != null ) { keyStore . setCertificateEntry ( publicAlias , x509c ) ; } return keyStore ; }
static boolean allowsPopup ( FormObject formObject ) { switch ( formObject . getParameterConstant ( PdfDictionary . Subtype ) ) { case PdfDictionary . Text : case PdfDictionary . Square : case PdfDictionary . Highlight : case PdfDictionary . Underline : case PdfDictionary . StrickOut : case PdfDictionary . Stamp : return _BOOL ; default : return _BOOL ; } }
public static LocalGitRepo fromCurrentDir ( String remoteUrl ) throws ValidationException { Git git ; File gitDir = new File ( _STR ) ; try { git = Git . open ( gitDir ) ; } catch ( RepositoryNotFoundException rnfe ) { String fullPathOfCurrentDir = pathOf ( gitDir ) ; File gitRoot = getGitRootIfItExistsInOneOfTheParentDirectories ( new File ( fullPathOfCurrentDir ) ) ; String summary ; List < String > messages = new ArrayList < String > ( ) ; if ( gitRoot == null ) { summary = _STR ; messages . add ( summary ) ; messages . add ( fullPathOfCurrentDir + _STR ) ; } else { summary = _STR ; messages . add ( summary ) ; messages . add ( fullPathOfCurrentDir + _STR ) ; messages . add ( _STR + pathOf ( gitRoot ) ) ; } throw new ValidationException ( summary , messages ) ; } catch ( Exception e ) { throw new ValidationException ( _STR + pathOf ( gitDir ) + _STR , Arrays . asList ( _STR , e . toString ( ) ) ) ; } return new LocalGitRepo ( git , remoteUrl ) ; }
public static Vector2 min ( Vector2 o1 , Vector2 o2 ) { return new Vector2 ( Math . min ( o1 . x , o2 . x ) , Math . min ( o1 . z , o2 . z ) ) ; }
public void addTestCall ( GenericAccessibleObject < ? > call ) throws IllegalArgumentException { Inputs . checkNull ( call ) ; testMethods . add ( call ) ; }
public void serialize ( KXmlSerializer serializer ) throws IOException { mDeviceInfo . serialize ( serializer ) ; serializeHostInfo ( serializer ) ; serializeTestSummary ( serializer ) ; monkeyTag . serialize ( serializer ) ; List < TestPackageResult > pkgs = new ArrayList < TestPackageResult > ( mPackageMap . values ( ) ) ; Collections . sort ( pkgs , new PkgComparator ( ) ) ; for ( TestPackageResult r : pkgs ) { r . serialize ( serializer ) ; } }
private void verifyBlockMirrorMigration ( ) throws Exception { log . info ( _STR ) ; Iterator < BlockMirror > blockMirrorItr = _dbClient . queryIterativeObjects ( BlockMirror . class , blockMirrorURIs ) ; List < BlockObject > blockObjects = new ArrayList < BlockObject > ( ) ; while ( blockMirrorItr . hasNext ( ) ) { blockObjects . add ( blockMirrorItr . next ( ) ) ; } verifyBlockObjects ( blockObjects ) ; }
public LogFormatter ( Logger log ) { if ( log == null ) log = Logger . getLogger ( Logger . GLOBAL_LOGGER_NAME ) ; Level lvl = null ; while ( log != null ) { lvl = log . getLevel ( ) ; if ( lvl != null ) break ; log = log . getParent ( ) ; } ; if ( lvl == null ) lvl = Level . WARNING ; this . level = lvl ; }
public synchronized void removeTextListener ( TextListener cl ) { m_textListeners . remove ( cl ) ; }
protected final void refreshLoadingViewsSize ( ) { final int maximumPullScroll = ( int ) ( getMaximumPullScroll ( ) * _NUM ) ; int pLeft = getPaddingLeft ( ) ; int pTop = getPaddingTop ( ) ; int pRight = getPaddingRight ( ) ; int pBottom = getPaddingBottom ( ) ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setWidth ( maximumPullScroll ) ; pLeft = - maximumPullScroll ; } else { pLeft = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setWidth ( maximumPullScroll ) ; pRight = - maximumPullScroll ; } else { pRight = _NUM ; } break ; case VERTICAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setHeight ( maximumPullScroll ) ; pTop = - maximumPullScroll ; } else { pTop = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setHeight ( maximumPullScroll ) ; pBottom = - maximumPullScroll ; } else { pBottom = _NUM ; } break ; } if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR , pLeft , pTop , pRight , pBottom ) ) ; } setPadding ( pLeft , pTop , pRight , pBottom ) ; }
private Element createIDPEntityDescriptor ( boolean exportPrivateData ) throws Exception { Element entEle = doc . createElementNS ( null , SAMLNames . ENTDESCRIPTOR ) ; String id = idmClient . getEntityID ( tenantName ) ; String alias = idmClient . getLocalIDPAlias ( tenantName ) ; if ( id == null ) { id = tenantName ; } entEle . setAttribute ( SAMLNames . ENTID , id ) ; Element idpSSO = createIDPSSODescriptor ( exportPrivateData ) ; entEle . appendChild ( idpSSO ) ; if ( exportPrivateData ) { if ( alias == null || alias . isEmpty ( ) ) { alias = id ; } Element orgEle = createOrganization ( tenantName , tenantName , alias , SAMLNames . ENGLISH ) ; entEle . appendChild ( orgEle ) ; } return entEle ; }
public void clear ( ) { infoQueue . clear ( ) ; while ( ! dataQueue . isEmpty ( ) ) { allocator . release ( dataQueue . remove ( ) ) ; } totalBytesDropped = _NUM ; totalBytesWritten = _NUM ; lastAllocation = null ; lastAllocationOffset = allocationLength ; }
public void applyCamera ( GL2 gl ) { gl . glMatrixMode ( GL2 . GL_PROJECTION ) ; gl . glLoadIdentity ( ) ; glu . gluPerspective ( _NUM , width / ( float ) height , _NUM , _NUM ) ; eye [ _NUM ] = ( float ) Math . sin ( theta ) * _NUM ; eye [ _NUM ] = _NUM ; eye [ _NUM ] = ( float ) Math . cos ( theta ) * _NUM ; glu . gluLookAt ( eye [ _NUM ] , eye [ _NUM ] , eye [ _NUM ] , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM ) ; gl . glMatrixMode ( GL2 . GL_MODELVIEW ) ; gl . glLoadIdentity ( ) ; gl . glViewport ( _NUM , _NUM , width , height ) ; }
public static ResultSet pointTable ( double x , double y ) { GeometryFactory factory = new GeometryFactory ( ) ; SimpleResultSet rs = new SimpleResultSet ( ) ; rs . addColumn ( _STR , Types . JAVA_OBJECT , _STR , _NUM , _NUM ) ; rs . addRow ( factory . createPoint ( new Coordinate ( x , y ) ) ) ; return rs ; }
public void addToExistingVolumesIfAbsent ( Map < String , Integer > volumeWWNs ) { if ( _existingVolumes == null ) { _existingVolumes = new StringMap ( ) ; } for ( String wwn : volumeWWNs . keySet ( ) ) { String normalizedWWN = BlockObject . normalizeWWN ( wwn ) ; if ( ! _existingVolumes . containsKey ( normalizedWWN ) && ( _userAddedVolumes == null || ! _userAddedVolumes . containsKey ( normalizedWWN ) ) ) { String hluStr = ExportGroup . LUN_UNASSIGNED_STR ; Integer hlu = volumeWWNs . get ( normalizedWWN ) ; if ( hlu != null ) { hluStr = hlu . toString ( ) ; } _existingVolumes . put ( normalizedWWN , hluStr ) ; } } }
public PathImpl createTempFile ( String prefix , String suffix ) throws IOException { if ( prefix == null || prefix . length ( ) == _NUM ) prefix = _STR ; if ( suffix == null ) suffix = _STR ; synchronized ( LOCK ) { for ( int i = _NUM ; i < _NUM ; i ++ ) { int r = Math . abs ( ( int ) RandomUtil . getRandomLong ( ) ) ; PathImpl file = lookup ( prefix + r + suffix ) ; if ( file . createNewFile ( ) ) return file ; } } throw new IOException ( _STR ) ; }
static Map < TargetType , List < TypeCompound > > partitionByTargetType ( Collection < TypeCompound > annos , List < TypeCompound > unmatched , TargetType ... targetTypes ) { final Map < TargetType , List < TypeCompound > > targetTypeToAnnos = new HashMap < > ( ) ; for ( TargetType targetType : targetTypes ) { targetTypeToAnnos . put ( targetType , new ArrayList < TypeCompound > ( _NUM ) ) ; } for ( final TypeCompound anno : annos ) { final List < TypeCompound > annoSet = targetTypeToAnnos . get ( anno . getPosition ( ) . type ) ; if ( annoSet != null ) { annoSet . add ( anno ) ; } else if ( unmatched != null ) { unmatched . add ( anno ) ; } } return targetTypeToAnnos ; }
ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
public void load ( ) { try { if ( fileChannel == null ) { fileChannel = FileChannel . open ( path , StandardOpenOption . READ ) ; } fileChannel . position ( _NUM ) ; buffer . clear ( ) ; tmp . clear ( ) ; while ( fileChannel . read ( tmp ) > _NUM ) { tmp . flip ( ) ; if ( tmp . remaining ( ) > buffer . capacity ( ) - buffer . position ( ) ) { final ByteBuffer next = ByteBuffer . allocateDirect ( Math . max ( buffer . capacity ( ) * _NUM , tmp . remaining ( ) ) ) ; buffer . flip ( ) ; next . put ( buffer ) ; buffer = next ; } buffer . put ( tmp ) ; tmp . clear ( ) ; } buffer . flip ( ) ; } catch ( final IOException e ) { throw new UncheckedIOException ( e ) ; } }
private void onHPChange ( final int amount ) { if ( User . squaredDistanceTo ( x , y ) < HEARING_DISTANCE_SQ ) { if ( amount > _NUM ) { addTextIndicator ( _STR + amount , NotificationType . POSITIVE ) ; } else { addTextIndicator ( String . valueOf ( amount ) , NotificationType . NEGATIVE ) ; } } }
@ NotNull private File resolveName ( @ NotNull String name ) throws IOException { File file ; if ( name . startsWith ( ROOT ) ) { file = new File ( myTemplateRootFolder , name . substring ( ROOT . length ( ) ) ) ; } else if ( myLastTemplateFolders != null ) { file = new File ( myLastTemplateFolders . peek ( ) , name ) ; } else { file = new File ( myTemplateRootFolder , name ) ; } return file . getCanonicalFile ( ) ; }
public void initToolTip ( ) { if ( ttmanager == null ) { ttmanager = ToolTipManager . sharedInstance ( ) ; ttmanager . registerComponent ( map ) ; ttmanager . setEnabled ( _BOOL ) ; return ; } if ( map != null ) { map . setToolTipText ( null ) ; } }
public static String [ ] decodeArray ( String encodedArray ) { String [ ] items = encodedArray . split ( _STR ) ; ArrayList < String > list = new ArrayList < String > ( ) ; for ( int i = _NUM ; i < items . length ; i ++ ) { String item = items [ i ] ; item = gsub ( _STR , _STR , item ) ; if ( ! item . equals ( _STR ) ) { list . add ( item ) ; } } return list . toArray ( new String [ list . size ( ) ] ) ; }
public boolean computeAngleOffset ( ) { if ( mFinished ) { return _BOOL ; } long systemClock = AnimationUtils . currentAnimationTimeMillis ( ) ; long timePassed = systemClock - mStartTime ; if ( timePassed < mDuration ) { switch ( mMode ) { case SCROLL_MODE : float sc = ( float ) timePassed / mDuration ; mCurrAngle = mStartAngle + Math . round ( mDeltaAngle * sc ) ; break ; case FLING_MODE : float timePassedSeconds = timePassed / _NUM ; float distance ; if ( mVelocity < _NUM ) { distance = mCoeffVelocity * mVelocity * timePassedSeconds - ( mDeceleration * timePassedSeconds * timePassedSeconds / _NUM ) ; } else { distance = - mCoeffVelocity * mVelocity * timePassedSeconds - ( mDeceleration * timePassedSeconds * timePassedSeconds / _NUM ) ; } mCurrAngle = mStartAngle - Math . signum ( mVelocity ) * Math . round ( distance ) ; break ; } return _BOOL ; } else { mFinished = _BOOL ; return _BOOL ; } }
private void sendResource ( final UUID uuid , final Object resource , final long length , final InputStream is ) throws IOException { assert uuid != null ; assert resource != null ; assert length >= _NUM ; assert is != null ; assert ! sentStatus ; long bytesWritten = _NUM ; final long begin = System . nanoTime ( ) ; final OutputStream os = s . getOutputStream ( ) ; try { { final DataOutputStream dos = new DataOutputStream ( os ) ; dos . write ( new byte [ ] { StatusEnum . OK . get ( ) } ) ; dos . writeLong ( length ) ; dos . flush ( ) ; bytesWritten += _NUM + Bytes . SIZEOF_LONG ; sentStatus = _BOOL ; } final long checksum ; { final int BUFSIZE = Bytes . kilobyte32 * _NUM ; final CheckedInputStream cis = new CheckedInputStream ( new BufferedInputStream ( is ) , new Adler32 ( ) ) ; final byte [ ] buff = new byte [ BUFSIZE ] ; while ( _BOOL ) { final int read = cis . read ( buff , _NUM , BUFSIZE ) ; if ( read <= _NUM ) break ; os . write ( buff , _NUM , read ) ; bytesWritten += read ; } checksum = cis . getChecksum ( ) . getValue ( ) ; } { final DataOutputStream dos = new DataOutputStream ( os ) ; dos . writeLong ( checksum ) ; bytesWritten += Bytes . SIZEOF_LONG ; dos . flush ( ) ; } os . flush ( ) ; if ( log . isInfoEnabled ( ) ) log . info ( _STR + uuid + _STR + resource + _STR + length + _STR + checksum + _STR + TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - begin ) + _STR ) ; } finally { try { os . close ( ) ; } catch ( Throwable t ) { } counters . bytesWritten . add ( bytesWritten ) ; counters . elapsedWriteNanos . add ( System . nanoTime ( ) - begin ) ; synchronized ( counters . maxWriteSizeLock ) { counters . maxWriteSize = Math . max ( counters . maxWriteSize , bytesWritten ) ; } } }
public long sigignore ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
private static byte [ ] generateSeed ( ) { try { final ByteArrayOutputStream seedBuffer = new ByteArrayOutputStream ( ) ; final DataOutputStream seedBufferOut = new DataOutputStream ( seedBuffer ) ; seedBufferOut . writeLong ( System . currentTimeMillis ( ) ) ; seedBufferOut . writeLong ( System . nanoTime ( ) ) ; seedBufferOut . writeInt ( Process . myPid ( ) ) ; seedBufferOut . writeInt ( Process . myUid ( ) ) ; seedBufferOut . write ( BUILD_FINGERPRINT_AND_DEVICE_SERIAL ) ; seedBufferOut . close ( ) ; return seedBuffer . toByteArray ( ) ; } catch ( final IOException e ) { throw new SecurityException ( _STR , e ) ; } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public String render ( ValueExpr theExpr ) throws Exception { theExpr . visit ( this ) ; return mBuffer . toString ( ) ; }
public void stopSampling ( ) { if ( mSamplingCounter . decrementAndGet ( ) == _NUM ) { mHandler . stopSamplingThread ( ) ; addFinalSample ( ) ; } }
public static final void reverseWinding ( List < Vector2 > points ) { if ( points == null ) throw new NullPointerException ( Messages . getString ( _STR ) ) ; int size = points . size ( ) ; if ( size == _NUM || size == _NUM ) return ; Collections . reverse ( points ) ; }
public DSignCsr ( JFrame parent , PKCS10CertificationRequest pkcs10Csr , File csrFile , PrivateKey signPrivateKey , KeyPairType signKeyPairType , X509Certificate verificationCertificate , Provider provider ) throws CryptoException { super ( parent , Dialog . ModalityType . DOCUMENT_MODAL ) ; this . pkcs10Csr = pkcs10Csr ; this . csrFile = csrFile ; this . signPrivateKey = signPrivateKey ; this . signKeyPairType = signKeyPairType ; this . verificationCertificate = verificationCertificate ; this . provider = provider ; setTitle ( res . getString ( _STR ) ) ; initComponents ( ) ; }
protected static void init ( ) { String notificationfactoryClassName = null ; try { notificationfactoryClassName = System . getProperty ( NOTIFICATION_FACTORY_NAME ) ; } catch ( SecurityException e ) { throw new RuntimeException ( e ) ; } if ( notificationfactoryClassName != null ) { Class < ? > nfc ; try { nfc = Class . forName ( notificationfactoryClassName ) ; factory = ( INotificationManagerFactory ) nfc . newInstance ( ) ; } catch ( ClassNotFoundException | InstantiationException | IllegalAccessException e ) { throw new RuntimeException ( e ) ; } } else { factory = new SyslogNotificationFactory ( ) ; } }
private int awaitDone ( boolean timed , long nanos ) throws InterruptedException { final long deadline = timed ? System . nanoTime ( ) + nanos : _NUM ; WaitNode q = null ; boolean queued = _BOOL ; for ( ; ; ) { if ( Thread . interrupted ( ) ) { removeWaiter ( q ) ; throw new InterruptedException ( ) ; } int s = state ; if ( s > COMPLETING ) { if ( q != null ) q . thread = null ; return s ; } else if ( s == COMPLETING ) Thread . yield ( ) ; else if ( q == null ) q = new WaitNode ( ) ; else if ( ! queued ) queued = UNSAFE . compareAndSwapObject ( this , waitersOffset , q . next = waiters , q ) ; else if ( timed ) { nanos = deadline - System . nanoTime ( ) ; if ( nanos <= _NUM ) { removeWaiter ( q ) ; return state ; } LockSupport . parkNanos ( this , nanos ) ; } else LockSupport . park ( this ) ; } }
private boolean linkFirst ( Node < E > node ) { if ( count >= capacity ) return _BOOL ; Node < E > f = first ; node . next = f ; first = node ; if ( last == null ) last = node ; else f . prev = node ; ++ count ; notEmpty . signal ( ) ; return _BOOL ; }
public static double clamp ( double value , double low , double high ) { return Math . min ( Math . max ( value , low ) , high ) ; }
public static String parseVolumeHostDirectory ( String volume ) { if ( StringUtils . isEmpty ( volume ) ) { return volume ; } if ( ! volume . contains ( HOST_CONTAINER_DIR_DELIMITER ) ) { return volume ; } String [ ] hostContainerDir = volume . split ( HOST_CONTAINER_DIR_DELIMITER ) ; if ( hostContainerDir . length != _NUM ) { throw new IllegalArgumentException ( _STR ) ; } String hostDir = hostContainerDir [ _NUM ] ; return hostDir ; }
private String fmtTime ( double time ) { return Utilities . pad ( timeFormatter . format ( time ) + _STR , _NUM ) ; }
@ Override public synchronized Object [ ] toArray ( ) { Object [ ] result = new Object [ elementCount ] ; System . arraycopy ( elementData , _NUM , result , _NUM , elementCount ) ; return result ; }
public static String right ( String s , int width , char fillChar ) { if ( s . length ( ) >= width ) { return s ; } StringBuffer sb = new StringBuffer ( width ) ; for ( int i = width - s . length ( ) ; -- i >= _NUM ; ) { sb . append ( fillChar ) ; } sb . append ( s ) ; return sb . toString ( ) ; }
public synchronized boolean addAll ( Collection < ? extends E > c ) { modCount ++ ; Object [ ] a = c . toArray ( ) ; int numNew = a . length ; ensureCapacityHelper ( elementCount + numNew ) ; System . arraycopy ( a , _NUM , elementData , elementCount , numNew ) ; elementCount += numNew ; return numNew != _NUM ; }
@ Override public void update ( DefaultApplicationState transState ) { newCheckpoint ( transState . getState ( ) , transState . getStateHash ( ) , transState . getLastCheckpointCID ( ) ) ; setLastCheckpointCID ( transState . getLastCheckpointCID ( ) ) ; }
public static byte [ ] stringToUtf8Bytes ( String string ) { int len = string . length ( ) ; byte [ ] bytes = new byte [ len * _NUM ] ; int outAt = _NUM ; for ( int i = _NUM ; i < len ; i ++ ) { char c = string . charAt ( i ) ; if ( ( c != _NUM ) && ( c < _NUM ) ) { bytes [ outAt ] = ( byte ) c ; outAt ++ ; } else if ( c < _NUM ) { bytes [ outAt ] = ( byte ) ( ( ( c > > _NUM ) & _NUM ) | _NUM ) ; bytes [ outAt + _NUM ] = ( byte ) ( ( c & _NUM ) | _NUM ) ; outAt += _NUM ; } else { bytes [ outAt ] = ( byte ) ( ( ( c > > _NUM ) & _NUM ) | _NUM ) ; bytes [ outAt + _NUM ] = ( byte ) ( ( ( c > > _NUM ) & _NUM ) | _NUM ) ; bytes [ outAt + _NUM ] = ( byte ) ( ( c & _NUM ) | _NUM ) ; outAt += _NUM ; } } byte [ ] result = new byte [ outAt ] ; System . arraycopy ( bytes , _NUM , result , _NUM , outAt ) ; return result ; }
private List < Pair < String , Object > > toPairList ( final Map < String , Object > bindings ) { final List < Pair < String , Object > > blist = new ArrayList < Pair < String , Object > > ( ) ; for ( final Map . Entry < String , Object > pair : bindings . entrySet ( ) ) { blist . add ( new Pair < String , Object > ( pair . getKey ( ) , pair . getValue ( ) ) ) ; } return blist ; }
@ Override public boolean validateLabel ( String label ) { Objects . requireNonNull ( label , _STR ) ; return ! labels . contains ( label ) ; }
public void addMessageObserver ( final MessageObserver observer ) { if ( observer == null ) { throw new NullPointerException ( ) ; } else if ( messageObservers == null ) { initMessageObserverList ( ) ; } messageObservers . add ( observer ) ; }
public void show ( char initialChar ) { initialString = initialString . append ( initialChar ) ; show ( ) ; if ( SWT . getPlatform ( ) != _STR ) { setEditText ( initialString . toString ( ) ) ; } }
private static void byte2hex ( byte b , StringBuffer buf ) { int high = ( ( b & _NUM ) > > _NUM ) ; int low = ( b & _NUM ) ; buf . append ( HEX_DIGITS [ high ] ) ; buf . append ( HEX_DIGITS [ low ] ) ; }
public E remove ( int index ) { hashCodeUpToDate = _BOOL ; modCount ++ ; E oldValue = elementData ( index ) ; int numMoved = size - index - _NUM ; if ( numMoved > _NUM ) System . arraycopy ( elementData , index + _NUM , elementData , index , numMoved ) ; elementData [ -- size ] = null ; return oldValue ; }
public static DoubleVector rnorm ( int n , double mean , double sd , Random random ) { if ( sd < _NUM ) throw new IllegalArgumentException ( _STR ) ; if ( sd == _NUM ) return new DoubleVector ( n , mean ) ; DoubleVector v = new DoubleVector ( n ) ; for ( int i = _NUM ; i < n ; i ++ ) v . set ( i , ( random . nextGaussian ( ) + mean ) / sd ) ; return v ; }
private PdfObject readCompressedStream ( PdfObject rootObj , int pointer , final PdfFileReader currentPdfFile , final ObjectReader objectReader , final PdfObject linearObj ) throws PdfException { while ( pointer != - _NUM ) { movePointer ( pointer ) ; final byte [ ] raw = objectReader . readObjectData ( - _NUM , null ) ; final StringBuilder objectName = new StringBuilder ( ) ; char current1 , last = _STR ; int matched = _NUM , i1 = _NUM ; while ( i1 < raw . length ) { current1 = ( char ) raw [ i1 ] ; if ( current1 == _NUM || current1 == _NUM ) { current1 = _STR ; } if ( current1 == _STR && last == _STR ) { matched = _NUM ; } else if ( current1 == pattern . charAt ( matched ) ) { matched ++ ; } else { matched = _NUM ; objectName . append ( current1 ) ; } if ( matched == _NUM ) { break ; } last = current1 ; i1 ++ ; } objectName . append ( _STR ) ; final PdfObject pdfObject = new CompressedObject ( objectName . toString ( ) ) ; pdfObject . setCompressedStream ( _BOOL ) ; final ObjectDecoder objectDecoder = new ObjectDecoder ( currentPdfFile ) ; objectDecoder . readDictionaryAsObject ( pdfObject , _NUM , raw ) ; final int [ ] fieldSizes = pdfObject . getIntArray ( PdfDictionary . W ) ; byte [ ] xrefs = pdfObject . getDecodedStream ( ) ; if ( xrefs == null ) { xrefs = currentPdfFile . readStream ( pdfObject , _BOOL , _BOOL , _BOOL , _BOOL , _BOOL , null ) ; } final int [ ] Index = pdfObject . getIntArray ( PdfDictionary . Index ) ; if ( Index == null ) { CompressedObjects . readCompressedOffsets ( _NUM , _NUM , pdfObject . getInt ( PdfDictionary . Size ) , fieldSizes , xrefs , offset , pdf_datafile ) ; } else { final int count = Index . length ; int pntr = _NUM ; for ( int aa = _NUM ; aa < count ; aa += _NUM ) { pntr = CompressedObjects . readCompressedOffsets ( pntr , Index [ aa ] , Index [ aa + _NUM ] , fieldSizes , xrefs , offset , pdf_datafile ) ; } } if ( rootObj == null ) { rootObj = pdfObject . getDictionary ( PdfDictionary . Root ) ; encryptObj = pdfObject . getDictionary ( PdfDictionary . Encrypt ) ; if ( encryptObj != null ) { final byte [ ] [ ] IDs = pdfObject . getStringArray ( PdfDictionary . ID ) ; if ( IDs != null && this . ID == null ) { this . ID = IDs [ _NUM ] ; } } infoObject = pdfObject . getDictionary ( PdfDictionary . Info ) ; } if ( linearObj != null ) { pointer = - _NUM ; } else { pointer = pdfObject . getInt ( PdfDictionary . Prev ) ; if ( pointer != - _NUM && ! isCompressedStream ( pointer , ( int ) eof ) ) { return readLegacyReferenceTable ( rootObj , pointer , ( int ) eof , currentPdfFile ) ; } } } return rootObj ; }
protected void warningOccurred ( int code ) { cbLock . lock ( ) ; try { if ( ( code < _NUM ) || ( code > MAX_WARNING ) ) { throw new InternalError ( _STR ) ; } processWarningOccurred ( _STR , Integer . toString ( code ) ) ; } finally { cbLock . unlock ( ) ; } }
public boolean isKnownSub ( String subName ) { return KNOWN_SUBS . contains ( subName ) ; }
public String diff_text1 ( LinkedList < Diff > diffs ) { StringBuilder text = new StringBuilder ( ) ; for ( Diff aDiff : diffs ) { if ( aDiff . operation != Operation . INSERT ) { text . append ( aDiff . text ) ; } } return text . toString ( ) ; }
public boolean isStored ( ) { return Integer . signum ( id ) != - _NUM ; }
public static BigInteger sizeOfDirectoryAsBigInteger ( File directory ) { checkDirectory ( directory ) ; final File [ ] files = directory . listFiles ( ) ; if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { try { if ( ! isSymlink ( file ) ) { size = size . add ( BigInteger . valueOf ( sizeOf ( file ) ) ) ; } } catch ( IOException ioe ) { } } return size ; }
public boolean isSearchLightBit ( int bit ) { if ( nodeType != SMINI ) { log . error ( _STR ) ; return ( _BOOL ) ; } if ( ( bit < _NUM ) || ( bit > _NUM ) ) { log . error ( _STR + Integer . toString ( bit ) ) ; return ( _BOOL ) ; } if ( locSearchLightBits [ bit ] == _NUM ) { return ( _BOOL ) ; } return ( _BOOL ) ; }
public AgeFileFilter ( Date cutoffDate , boolean acceptOlder ) { this ( cutoffDate . getTime ( ) , acceptOlder ) ; }
public void calcMajorTick ( ) { majorTick = _NUM ; majorTickCount = ( int ) Math . round ( log10 ( maxTick / minTick ) ) + _NUM ; }
public boolean next ( ) throws GenericDataSourceException { try { return _rs . next ( ) ; } catch ( SQLException sqle ) { throw new GenericDataSourceException ( _STR + _sql , sqle ) ; } }
public void put ( String sample , HiddenAttribute attribute , Object value ) { put ( sample , attribute . toString ( ) , value ) ; }
void postMessage ( List < JetstreamMessage > msgs , DispatchQueueStats stats ) throws MessageServiceException { m_msgRcvCounter . addAndGet ( msgs . size ( ) ) ; if ( ( monitorUpstreamQueueAndPauseTraffic ( ) == UpstreamQueueState . FULL ) && ( m_paused . get ( ) ) ) { if ( ! m_msgProcessor . hasAvailableCapacity ( m_twentyPercentCapacity ) ) { m_totalMsgsDropped . increment ( ) ; return ; } } List < Runnable > requests = new ArrayList < Runnable > ( msgs . size ( ) ) ; for ( int i = _NUM , t = msgs . size ( ) ; i < t ; i ++ ) { JetstreamMessage tm = msgs . get ( i ) ; if ( tm . getTopic ( ) == null ) { m_totalMsgsDropped . increment ( ) ; if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( _STR ) ; } continue ; } MessageServiceRequest msr = new MessageServiceRequest ( tm ) ; msr . setPriority ( tm . getPriority ( ) ) ; msr . setSequenceid ( tm . getSequenceId ( ) ) ; if ( msr . getPriority ( ) == JetstreamMessage . INTERNAL_MSG_PRIORITY ) { if ( ! m_internalMsgProcessor . processRequest ( msr ) ) { m_totalMsgsDropped . increment ( ) ; throw new MessageServiceException ( MessageServiceException . BUFFER_FULL , _STR ) ; } if ( m_msgsRcvdPerSec . addAndGet ( _NUM ) < _NUM ) m_msgsRcvdPerSec . set ( _NUM ) ; m_totalMsgsRcvd . increment ( ) ; } else { requests . add ( msr ) ; } } if ( ! requests . isEmpty ( ) ) { int batchsize = requests . size ( ) ; if ( ! m_msgProcessor . processBatch ( requests ) ) { m_totalMsgsDropped . addAndGet ( batchsize ) ; throw new MessageServiceException ( MessageServiceException . BUFFER_FULL , _STR + _STR + batchsize + _STR + m_msgProcessor . getAvailableCapacity ( ) ) ; } m_avgMsgsRcvdPerSec . add ( batchsize ) ; m_totalMsgsRcvd . addAndGet ( batchsize ) ; } if ( stats != null ) { stats . setHighPriorityQueueDepth ( ( int ) m_msgProcessor . getPendingRequests ( ) ) ; stats . setLowPriorityQueueDepth ( ( int ) m_msgProcessor . getPendingRequests ( ) ) ; stats . setMaxQueueDepth ( ( int ) m_msgProcessor . getMaxQueueSz ( ) ) ; } }
public boolean unsetOrdering ( Object first , Object second ) { DigraphNode firstPONode = ( DigraphNode ) poNodes . get ( first ) ; DigraphNode secondPONode = ( DigraphNode ) poNodes . get ( second ) ; return firstPONode . removeEdge ( secondPONode ) || secondPONode . removeEdge ( firstPONode ) ; }
public String convertSWFToHTML ( InputStream in ) throws Exception { StringWriter out1 = new StringWriter ( ) ; output = new PrintWriter ( out1 ) ; TagParser parser = new TagParser ( this ) ; SWFReader reader = new SWFReader ( parser , in ) ; reader . readFile ( ) ; in . close ( ) ; sizeCount = reader . size ; final String ret = _STR + ( headerstr . isEmpty ( ) ? _STR : _STR + headerstr + _STR ) + out1 . toString ( ) + _STR ; return ret ; }
public void write ( ClassFile classFile , File f ) throws IOException { FileOutputStream f_out = new FileOutputStream ( f ) ; try { write ( classFile , f_out ) ; } finally { f_out . close ( ) ; } }
public Shape greatCircleLineShape ( ) { GeneralPath path = null ; if ( llpts != null && llpts . length >= _NUM && llpts . length % _NUM == _NUM ) { double y1 = llpts [ _NUM ] ; double x1 = llpts [ _NUM ] ; path = new GeneralPath ( GeneralPath . WIND_EVEN_ODD , llpts . length / _NUM ) ; boolean firstCoords = _BOOL ; for ( int i = _NUM ; i < llpts . length ; i += _NUM ) { double y2 = llpts [ i ] ; double x2 = llpts [ i + _NUM ] ; double radDist = GreatCircle . sphericalDistance ( y1 , x1 , y2 , x2 ) ; int nsegs = ( int ) ( ProjMath . radToDeg ( radDist ) * segsPerDeg ) ; if ( nsegs == _NUM ) { nsegs = _NUM ; } double [ ] coords = GreatCircle . greatCircle ( y1 , x1 , y2 , x2 , nsegs , _BOOL ) ; if ( returnDegrees ) { ProjMath . arrayRadToDeg ( coords ) ; } for ( int j = _NUM ; j <= coords . length - _NUM ; j += _NUM ) { if ( firstCoords ) { path . moveTo ( coords [ j + _NUM ] , coords [ j ] ) ; firstCoords = _BOOL ; } else { path . lineTo ( coords [ j + _NUM ] , coords [ j ] ) ; } } x1 = x2 ; y1 = y2 ; } if ( returnDegrees ) { path . lineTo ( ProjMath . radToDeg ( x1 ) , ProjMath . radToDeg ( y1 ) ) ; } else { path . lineTo ( x1 , y1 ) ; } } return path ; }
public Connection ( final InetSocketAddress peerAddress ) { this ( peerAddress , ( Handshaker ) null ) ; }
protected static Vector convertToVector ( final Object [ ] anArray ) { if ( anArray == null ) { return null ; } final Vector v = new Vector ( anArray . length ) ; for ( final Object element : anArray ) { v . addElement ( element ) ; } return v ; }
protected synchronized void notifyVersion ( SprogVersion v ) { ver = v ; for ( SprogVersionListener listener : getCopyOfListeners ( ) ) { try { listener . notifyVersion ( ver ) ; versionListeners . remove ( listener ) ; } catch ( Exception e ) { log . warn ( _STR + listener + _STR + e ) ; } } }
protected void acceptDrop ( int dropOperation ) { DropTargetContextPeer peer = getDropTargetContextPeer ( ) ; if ( peer != null ) { peer . acceptDrop ( dropOperation ) ; } }
public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = _BOOL ; }
@ Override public String toString ( ) { String result ; result = super . toString ( ) ; if ( m_CapabilitiesFilter != null ) { initCapabilities ( ) ; if ( m_Capabilities != null ) { if ( m_Capabilities . supportsMaybe ( m_CapabilitiesFilter ) && ! m_Capabilities . supports ( m_CapabilitiesFilter ) ) { result = _STR + MAYBE_SUPPORT + _STR + result + _STR ; } else if ( ! m_Capabilities . supports ( m_CapabilitiesFilter ) ) { result = _STR + NO_SUPPORT + _STR + result + _STR ; } } } return result ; }
ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
public void splitNode ( KDTreeNode node , int numNodesCreated , double [ ] [ ] nodeRanges , double [ ] [ ] universe ) throws Exception { correctlyInitialized ( ) ; if ( node . m_NodesRectBounds == null ) { node . m_NodesRectBounds = new double [ _NUM ] [ node . m_NodeRanges . length ] ; for ( int i = _NUM ; i < node . m_NodeRanges . length ; i ++ ) { node . m_NodesRectBounds [ MIN ] [ i ] = node . m_NodeRanges [ i ] [ MIN ] ; node . m_NodesRectBounds [ MAX ] [ i ] = node . m_NodeRanges [ i ] [ MAX ] ; } } double maxRectWidth = Double . NEGATIVE_INFINITY , maxPtWidth = Double . NEGATIVE_INFINITY , tempval ; int splitDim = - _NUM , classIdx = m_Instances . classIndex ( ) ; for ( int i = _NUM ; i < node . m_NodesRectBounds [ _NUM ] . length ; i ++ ) { if ( i == classIdx ) continue ; tempval = node . m_NodesRectBounds [ MAX ] [ i ] - node . m_NodesRectBounds [ MIN ] [ i ] ; if ( m_NormalizeNodeWidth ) { tempval = tempval / universe [ i ] [ WIDTH ] ; } if ( tempval > maxRectWidth && node . m_NodeRanges [ i ] [ WIDTH ] > _NUM ) maxRectWidth = tempval ; } for ( int i = _NUM ; i < node . m_NodesRectBounds [ _NUM ] . length ; i ++ ) { if ( i == classIdx ) continue ; tempval = node . m_NodesRectBounds [ MAX ] [ i ] - node . m_NodesRectBounds [ MIN ] [ i ] ; if ( m_NormalizeNodeWidth ) { tempval = tempval / universe [ i ] [ WIDTH ] ; } if ( tempval >= maxRectWidth * ( _NUM - ERR ) && node . m_NodeRanges [ i ] [ WIDTH ] > _NUM ) { if ( node . m_NodeRanges [ i ] [ WIDTH ] > maxPtWidth ) { maxPtWidth = node . m_NodeRanges [ i ] [ WIDTH ] ; if ( m_NormalizeNodeWidth ) maxPtWidth = maxPtWidth / universe [ i ] [ WIDTH ] ; splitDim = i ; } } } double splitVal = node . m_NodesRectBounds [ MIN ] [ splitDim ] + ( node . m_NodesRectBounds [ MAX ] [ splitDim ] - node . m_NodesRectBounds [ MIN ] [ splitDim ] ) * _NUM ; if ( splitVal < node . m_NodeRanges [ splitDim ] [ MIN ] ) splitVal = node . m_NodeRanges [ splitDim ] [ MIN ] ; else if ( splitVal >= node . m_NodeRanges [ splitDim ] [ MAX ] ) splitVal = node . m_NodeRanges [ splitDim ] [ MAX ] - node . m_NodeRanges [ splitDim ] [ WIDTH ] * _NUM ; int rightStart = rearrangePoints ( m_InstList , node . m_Start , node . m_End , splitDim , splitVal ) ; if ( rightStart == node . m_Start || rightStart > node . m_End ) { if ( rightStart == node . m_Start ) throw new Exception ( _STR + node . m_NodeNumber + _STR + _STR + _STR ) ; else throw new Exception ( _STR + node . m_NodeNumber + _STR + _STR + _STR ) ; } node . m_SplitDim = splitDim ; node . m_SplitValue = splitVal ; double [ ] [ ] widths = new double [ _NUM ] [ node . m_NodesRectBounds [ _NUM ] . length ] ; System . arraycopy ( node . m_NodesRectBounds [ MIN ] , _NUM , widths [ MIN ] , _NUM , node . m_NodesRectBounds [ MIN ] . length ) ; System . arraycopy ( node . m_NodesRectBounds [ MAX ] , _NUM , widths [ MAX ] , _NUM , node . m_NodesRectBounds [ MAX ] . length ) ; widths [ MAX ] [ splitDim ] = splitVal ; node . m_Left = new KDTreeNode ( numNodesCreated + _NUM , node . m_Start , rightStart - _NUM , m_EuclideanDistance . initializeRanges ( m_InstList , node . m_Start , rightStart - _NUM ) , widths ) ; widths = new double [ _NUM ] [ node . m_NodesRectBounds [ _NUM ] . length ] ; System . arraycopy ( node . m_NodesRectBounds [ MIN ] , _NUM , widths [ MIN ] , _NUM , node . m_NodesRectBounds [ MIN ] . length ) ; System . arraycopy ( node . m_NodesRectBounds [ MAX ] , _NUM , widths [ MAX ] , _NUM , node . m_NodesRectBounds [ MAX ] . length ) ; widths [ MIN ] [ splitDim ] = splitVal ; node . m_Right = new KDTreeNode ( numNodesCreated + _NUM , rightStart , node . m_End , m_EuclideanDistance . initializeRanges ( m_InstList , rightStart , node . m_End ) , widths ) ; }
public Date modifiedDate ( String path ) throws IllegalStateException , IOException , FTPIllegalReplyException , FTPException { synchronized ( lock ) { if ( ! connected ) { throw new IllegalStateException ( _STR ) ; } if ( ! authenticated ) { throw new IllegalStateException ( _STR ) ; } communication . sendFTPCommand ( _STR + path ) ; FTPReply r = communication . readFTPReply ( ) ; touchAutoNoopTimer ( ) ; if ( ! r . isSuccessCode ( ) ) { throw new FTPException ( r ) ; } String [ ] messages = r . getMessages ( ) ; if ( messages . length != _NUM ) { throw new FTPIllegalReplyException ( ) ; } else { try { return MDTM_DATE_FORMAT . parse ( messages [ _NUM ] ) ; } catch ( ParseException e ) { throw new FTPIllegalReplyException ( ) ; } } } }
public boolean importPkcs8 ( ) { return jrbPkcs8 . isSelected ( ) ; }
public ControlFlowGraph run ( CompilationUnitTree root , ProcessingEnvironment env , MethodTree tree , ClassTree classTree ) { UnderlyingAST underlyingAST = new CFGMethod ( tree , classTree ) ; return run ( root , env , underlyingAST ) ; }
private boolean isValidEngine ( ) { if ( hasFlag ( ~ ( CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE | SUPERHEAVY_ENGINE | SUPPORT_VEE_ENGINE ) ) ) { problem . append ( _STR + engineFlags ) ; return _BOOL ; } if ( hasFlag ( SUPPORT_VEE_ENGINE ) && ( engineType != STEAM ) && ( engineType != COMBUSTION_ENGINE ) && ( engineType != BATTERY ) && ( engineType != FUEL_CELL ) && ( engineType != SOLAR ) && ( engineType != FISSION ) && ( engineType != NORMAL_ENGINE ) && ( engineType != NONE ) ) { problem . append ( _STR ) ; return _BOOL ; } if ( ( ( ( int ) Math . ceil ( engineRating / _NUM ) > ENGINE_RATINGS . length ) || ( engineRating < _NUM ) ) && ! hasFlag ( SUPPORT_VEE_ENGINE ) ) { problem . append ( _STR + engineRating ) ; return _BOOL ; } if ( ( engineRating > _NUM ) && ! hasFlag ( SUPPORT_VEE_ENGINE ) ) { engineFlags |= LARGE_ENGINE ; } switch ( engineType ) { case COMBUSTION_ENGINE : case NORMAL_ENGINE : case XL_ENGINE : case XXL_ENGINE : case FUEL_CELL : case NONE : case MAGLEV : case BATTERY : case SOLAR : break ; case COMPACT_ENGINE : if ( hasFlag ( LARGE_ENGINE ) ) { problem . append ( Messages . getString ( _STR ) ) ; return _BOOL ; } break ; case LIGHT_ENGINE : case FISSION : if ( hasFlag ( CLAN_ENGINE ) ) { problem . append ( Messages . getString ( _STR ) ) ; return _BOOL ; } break ; default : problem . append ( _STR + engineType ) ; return _BOOL ; } return _BOOL ; }
static public void assertEquals ( String message , float expected , float actual , float delta ) { if ( Float . isInfinite ( expected ) ) { if ( ! ( expected == actual ) ) failNotEquals ( message , new Float ( expected ) , new Float ( actual ) ) ; } else if ( ! ( Math . abs ( expected - actual ) <= delta ) ) failNotEquals ( message , new Float ( expected ) , new Float ( actual ) ) ; }
private void calculateD ( double [ ] b ) { int length = mExtremalIndices . size ( ) - _NUM ; mD = new double [ length ] ; for ( int k = _NUM ; k < length ; k ++ ) { mD [ k ] = b [ k ] * ( mGrid . getCosineFrequencyGrid ( ) [ mExtremalIndices . get ( k ) ] - mGrid . getCosineFrequencyGrid ( ) [ mExtremalIndices . get ( length ) ] ) ; } }
public static byte [ ] base64decode ( String coded ) { if ( null == coded ) return null ; byte [ ] src = coded . getBytes ( ) ; int len = src . length ; int dlen = len - ( len / _NUM ) ; dlen = ( dlen > > > _NUM ) + ( dlen > > > _NUM ) ; int rem = _NUM ; if ( _NUM == src [ len - _NUM ] ) rem ++ ; if ( _NUM == src [ len - _NUM ] ) rem ++ ; dlen -= rem ; byte [ ] dst = new byte [ dlen ] ; int pos = _NUM ; int dpos = _NUM ; int col = _NUM ; len -= _NUM ; while ( pos < len ) { byte b0 = _base64de [ src [ pos ++ ] ] ; byte b1 = _base64de [ src [ pos ++ ] ] ; byte b2 = _base64de [ src [ pos ++ ] ] ; byte b3 = _base64de [ src [ pos ++ ] ] ; if ( B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3 ) throw new RuntimeException ( _STR + pos ) ; dst [ dpos ++ ] = ( byte ) ( ( b0 << _NUM ) | ( ( b1 > > > _NUM ) & _NUM ) ) ; dst [ dpos ++ ] = ( byte ) ( ( b1 << _NUM ) | ( ( b2 > > > _NUM ) & _NUM ) ) ; dst [ dpos ++ ] = ( byte ) ( ( b2 << _NUM ) | ( b3 & _NUM ) ) ; col += _NUM ; if ( _NUM == col ) { if ( _NUM != src [ pos ++ ] ) throw new RuntimeException ( _STR + ( pos - _NUM ) ) ; col = _NUM ; } } byte b0 = _base64de [ src [ pos ++ ] ] ; byte b1 = _base64de [ src [ pos ++ ] ] ; byte b2 = _base64de [ src [ pos ++ ] ] ; byte b3 = _base64de [ src [ pos ++ ] ] ; if ( B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3 ) throw new RuntimeException ( _STR + pos ) ; dst [ dpos ++ ] = ( byte ) ( ( b0 << _NUM ) | ( ( b1 > > > _NUM ) & _NUM ) ) ; if ( _NUM == rem ) return dst ; dst [ dpos ++ ] = ( byte ) ( ( b1 << _NUM ) | ( ( b2 > > > _NUM ) & _NUM ) ) ; if ( _NUM == rem ) return dst ; dst [ dpos ++ ] = ( byte ) ( ( b2 << _NUM ) | ( b3 & _NUM ) ) ; return dst ; }
private static Properties loadProperties ( String propertiesFile ) { Properties properties = new Properties ( ) ; try ( InputStream is = new FileInputStream ( propertiesFile ) ) { properties . load ( is ) ; } catch ( IOException e ) { throw new RuntimeException ( _STR , e ) ; } return properties ; }
public TextEditor replaceAll ( Pattern pattern , Replacement replacement ) { Matcher m = pattern . matcher ( text ) ; int lastIndex = _NUM ; StringBuilder sb = new StringBuilder ( ) ; while ( m . find ( ) ) { sb . append ( text . subSequence ( lastIndex , m . start ( ) ) ) ; sb . append ( replacement . replacement ( m ) ) ; lastIndex = m . end ( ) ; } sb . append ( text . subSequence ( lastIndex , text . length ( ) ) ) ; text = sb ; return this ; }
public Map < String , Map < String , String > > list ( String serviceName ) { Map < String , Map < String , String > > results = new HashMap < String , Map < String , String > > ( ) ; ServiceInfo [ ] infos = jmdns . list ( _STR + serviceName + _STR ) ; for ( ServiceInfo info : infos ) { _log . info ( _STR , info ) ; final String [ ] hostAddrs = info . getHostAddresses ( ) ; final StringBuffer buf = new StringBuffer ( ) ; for ( String hostAddr : hostAddrs ) { buf . append ( hostAddr ) ; buf . append ( _STR ) ; } final String key = buf . toString ( ) ; _log . info ( _STR , key ) ; final Map < String , String > values = new HashMap < String , String > ( ) ; for ( Enumeration < String > e = info . getPropertyNames ( ) ; e . hasMoreElements ( ) ; ) { final String prop = e . nextElement ( ) ; final String value = new String ( info . getPropertyBytes ( prop ) ) ; _log . info ( _STR , prop , value ) ; values . put ( prop , value ) ; } if ( values . isEmpty ( ) ) { _log . warn ( _STR , key ) ; } results . put ( key , values . isEmpty ( ) ? null : values ) ; } return results ; }
@ SuppressWarnings ( { _STR } ) @ Override default LazyFutureStream < U > concat ( final Stream < ? extends U > other ) { return fromStream ( Stream . concat ( StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( iterator ( ) , Spliterator . ORDERED ) , _BOOL ) , StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( other . iterator ( ) , Spliterator . ORDERED ) , _BOOL ) ) ) ; }
private int moveComponents ( Container target , int x , int y , int width , int height , int rowStart , int rowEnd , boolean ltr , boolean useBaseline , int [ ] ascent , int [ ] descent ) { switch ( newAlign ) { case LEFT : x += ltr ? _NUM : width ; break ; case CENTER : x += width / _NUM ; break ; case RIGHT : x += ltr ? width : _NUM ; break ; case LEADING : break ; case TRAILING : x += width ; break ; } int maxAscent = _NUM ; int nonbaselineHeight = _NUM ; int baselineOffset = _NUM ; if ( useBaseline ) { int maxDescent = _NUM ; for ( int i = rowStart ; i < rowEnd ; i ++ ) { Component m = target . getComponent ( i ) ; if ( m . visible ) { if ( ascent [ i ] >= _NUM ) { maxAscent = Math . max ( maxAscent , ascent [ i ] ) ; maxDescent = Math . max ( maxDescent , descent [ i ] ) ; } else { nonbaselineHeight = Math . max ( m . getHeight ( ) , nonbaselineHeight ) ; } } } height = Math . max ( maxAscent + maxDescent , nonbaselineHeight ) ; baselineOffset = ( height - maxAscent - maxDescent ) / _NUM ; } for ( int i = rowStart ; i < rowEnd ; i ++ ) { Component m = target . getComponent ( i ) ; if ( m . isVisible ( ) ) { int cy ; if ( useBaseline && ascent [ i ] >= _NUM ) { cy = y + baselineOffset + maxAscent - ascent [ i ] ; } else { cy = y + ( height - m . height ) / _NUM ; } if ( ltr ) { m . setLocation ( x , cy ) ; } else { m . setLocation ( target . width - x - m . width , cy ) ; } x += m . width + hgap ; } } return height ; }
@ Override public void readExternal ( ObjectInput in ) throws IOException { path = IgfsUtils . readPath ( in ) ; blockSize = in . readInt ( ) ; grpBlockSize = in . readLong ( ) ; len = in . readLong ( ) ; props = U . readStringMap ( in ) ; accessTime = in . readLong ( ) ; modificationTime = in . readLong ( ) ; flags = in . readByte ( ) ; }
public StandardXYItemLabelGenerator ( ) { this ( DEFAULT_ITEM_LABEL_FORMAT , NumberFormat . getNumberInstance ( ) , NumberFormat . getNumberInstance ( ) ) ; }
public Vector2 ( double direction ) { this . x = Math . cos ( direction ) ; this . y = Math . sin ( direction ) ; }
public static Map < String , Object > convertDocumentFileToFile ( DispatchContext dctx , Map < String , ? extends Object > context ) { XMultiComponentFactory xmulticomponentfactory = null ; String stringUrl = ( String ) context . get ( _STR ) ; String stringConvertedFile = ( String ) context . get ( _STR ) ; String inputMimeType = ( String ) context . get ( _STR ) ; String outputMimeType = ( String ) context . get ( _STR ) ; String oooHost = ( String ) context . get ( _STR ) ; String oooPort = ( String ) context . get ( _STR ) ; try { xmulticomponentfactory = OpenOfficeWorker . getRemoteServer ( oooHost , oooPort ) ; File inputFile = new File ( stringUrl ) ; long fileSize = inputFile . length ( ) ; FileInputStream fis = new FileInputStream ( inputFile ) ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ( int ) fileSize ) ; int c ; while ( ( c = fis . read ( ) ) != - _NUM ) { baos . write ( c ) ; } OpenOfficeByteArrayInputStream oobais = new OpenOfficeByteArrayInputStream ( baos . toByteArray ( ) ) ; OpenOfficeByteArrayOutputStream oobaos = OpenOfficeWorker . convertOODocByteStreamToByteStream ( xmulticomponentfactory , oobais , inputMimeType , outputMimeType ) ; FileOutputStream fos = new FileOutputStream ( stringConvertedFile ) ; fos . write ( oobaos . toByteArray ( ) ) ; fos . close ( ) ; fis . close ( ) ; oobais . close ( ) ; oobaos . close ( ) ; Map results = ServiceUtil . returnSuccess ( ) ; return results ; } catch ( IOException e ) { Debug . logError ( e , _STR , module ) ; return ServiceUtil . returnError ( e . toString ( ) ) ; } catch ( Exception e ) { Debug . logError ( e , _STR , module ) ; return ServiceUtil . returnError ( e . toString ( ) ) ; } }
public double adjustedPow10 ( double val ) { boolean negFlag = ( val < _NUM ) ; if ( negFlag ) { val = - val ; } double res ; if ( val < _NUM ) { res = ( Math . pow ( _NUM , val + _NUM ) - _NUM ) / _NUM ; } else { res = Math . pow ( _NUM , val ) ; } return negFlag ? ( - res ) : res ; }
@ Override public void clear ( ) { columnList . forEach ( null ) ; }
public boolean isLastInvoice ( ) { String cm = getCostingMethod ( ) ; return cm != null && cm . equals ( COSTINGMETHOD_LastInvoice ) ; }
public static void proxyPort ( final int port ) { final String portValue = Integer . toString ( port ) ; setProperty ( _STR , portValue ) ; setProperty ( _STR , portValue ) ; }
public static String fetchClusterName ( String clusterCgName ) { String clusterName = null ; if ( clusterCgName != null && ! clusterCgName . isEmpty ( ) ) { String [ ] tmp = clusterCgName . split ( SPLITTER ) ; clusterName = tmp [ _NUM ] ; } return clusterName ; }
private void fetchMyServiceCardsFromServer ( ) { RetroCallback retroCallback ; retroCallback = new RetroCallback ( this ) ; retroCallback . setRequestId ( HttpConstants . ApiResponseCodes . GET_MY_SERVICES ) ; retroCallbackList . add ( retroCallback ) ; mYeloApi . getMyServiceCards ( retroCallback ) ; }
public DViewAsymmetricKeyFields ( JDialog parent , String title , RSAPublicKey rsaPublicKey ) { super ( parent , title , Dialog . ModalityType . DOCUMENT_MODAL ) ; key = rsaPublicKey ; initFields ( ) ; }
public List < ColourChange > sampleConditionalMigrationEvents2 ( int parentColour , double parentHeight , int childColour , double childHeight , double [ ] m ) { List < ColourChange > colourChanges = new ArrayList < ColourChange > ( ) ; if ( parentHeight < childHeight ) { throw new IllegalArgumentException ( _STR + parentHeight + _STR + childHeight + _STR ) ; } try { int currentColour = parentColour ; double currentHeight = parentHeight ; while ( _BOOL ) { ColourChange nextEvent = randomConditionalMigrationEvent ( currentColour , currentHeight , childColour , childHeight , m ) ; currentHeight = nextEvent . getTime ( ) ; currentColour = nextEvent . getColourAbove ( ) ; colourChanges . add ( nextEvent ) ; } } catch ( NoEventException nee ) { } reverseColourChangeList ( colourChanges , parentColour ) ; return colourChanges ; }
public static boolean isAttribute ( Object objValue ) { if ( objValue instanceof String ) { String stringValue = ( String ) objValue ; if ( stringValue . startsWith ( ATTRIBUTE_START ) && stringValue . endsWith ( ATTRIBUTE_END ) ) { return _BOOL ; } } return _BOOL ; }
public static String decodeASCII ( final byte [ ] key , final int off , final int len ) { final byte [ ] b = new byte [ len ] ; System . arraycopy ( key , off , b , _NUM , len ) ; for ( int i = _NUM ; i < len ; i ++ ) { b [ i ] = decodeByte ( b [ i ] ) ; } try { return new String ( b , _STR ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }
@ Override public void valueChanged ( TreeSelectionEvent e ) { if ( preventEvent ) { return ; } if ( mainFrame != null ) { List < Operator > selectedOperators = getSelectedOperators ( ) ; if ( selectedOperators != null && ! selectedOperators . isEmpty ( ) ) { mainFrame . selectOperators ( selectedOperators ) ; } } }
public synchronized void removePropertyChangeListener ( PropertyChangeListener listener ) { listeners . remove ( listener ) ; }
final boolean transferAfterCancelledWait ( Node node ) { if ( compareAndSetWaitStatus ( node , Node . CONDITION , _NUM ) ) { enq ( node ) ; return _BOOL ; } while ( ! isOnSyncQueue ( node ) ) Thread . yield ( ) ; return _BOOL ; }
private static Intent createShareIntent ( Context context , final String shareText ) { final Intent shareIntent = new Intent ( Intent . ACTION_SEND ) ; shareIntent . putExtra ( android . content . Intent . EXTRA_SUBJECT , context . getString ( R . string . share_subject ) ) ; shareIntent . putExtra ( android . content . Intent . EXTRA_TEXT , shareText ) ; shareIntent . setType ( _STR ) ; return shareIntent ; }
public static < U > AtomicIntegerFieldUpdater < U > newUpdater ( Class < U > tclass , String fieldName ) { if ( UnsafeHolder . isAvailable ( ) ) { return new AtomicIntegerFieldUpdaterImpl < U > ( tclass , fieldName ) ; } return AtomicIntegerFieldUpdater . newUpdater ( tclass , fieldName ) ; }
private boolean tryStep ( final double t0 , final double [ ] y0 , final double step , final int k , final double [ ] scale , final double [ ] [ ] f , final double [ ] yMiddle , final double [ ] yEnd ) throws MathIllegalArgumentException , MathIllegalStateException { final int n = sequence [ k ] ; final double subStep = step / n ; final double subStep2 = _NUM * subStep ; double t = t0 + subStep ; for ( int i = _NUM ; i < y0 . length ; ++ i ) { yEnd [ i ] = y0 [ i ] + subStep * f [ _NUM ] [ i ] ; } f [ _NUM ] = computeDerivatives ( t , yEnd ) ; final double [ ] yTmp = y0 . clone ( ) ; for ( int j = _NUM ; j < n ; ++ j ) { if ( _NUM * j == n ) { System . arraycopy ( yEnd , _NUM , yMiddle , _NUM , y0 . length ) ; } t += subStep ; for ( int i = _NUM ; i < y0 . length ; ++ i ) { final double middle = yEnd [ i ] ; yEnd [ i ] = yTmp [ i ] + subStep2 * f [ j ] [ i ] ; yTmp [ i ] = middle ; } f [ j + _NUM ] = computeDerivatives ( t , yEnd ) ; if ( performTest && ( j <= maxChecks ) && ( k < maxIter ) ) { double initialNorm = _NUM ; for ( int l = _NUM ; l < scale . length ; ++ l ) { final double ratio = f [ _NUM ] [ l ] / scale [ l ] ; initialNorm += ratio * ratio ; } double deltaNorm = _NUM ; for ( int l = _NUM ; l < scale . length ; ++ l ) { final double ratio = ( f [ j + _NUM ] [ l ] - f [ _NUM ] [ l ] ) / scale [ l ] ; deltaNorm += ratio * ratio ; } if ( deltaNorm > _NUM * FastMath . max ( _NUM , initialNorm ) ) { return _BOOL ; } } } for ( int i = _NUM ; i < y0 . length ; ++ i ) { yEnd [ i ] = _NUM * ( yTmp [ i ] + yEnd [ i ] + subStep * f [ n ] [ i ] ) ; } return _BOOL ; }
public Map < String , Object > convertDataToObjects ( Map < String , String > data ) { Map < String , Object > results = new HashMap < > ( ) ; if ( data != null ) { for ( String key : data . keySet ( ) ) { results . put ( key , data . get ( key ) ) ; } } return results ; }
private static Pair < String , String > offsetLSR ( final long offset , final ITranslationEnvironment environment , final List < ReilInstruction > instructions , final String registerNodeValue1 , final String registerNodeValue2 , final String immediateNodeValue ) { final String address = environment . getNextVariableString ( ) ; final String tmpVar1 = environment . getNextVariableString ( ) ; final String tmpVar2 = environment . getNextVariableString ( ) ; final String index = environment . getNextVariableString ( ) ; long baseOffset = offset ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , dw , _STR + immediateNodeValue , qw , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , qw , tmpVar1 , dw , dWordBitMask , dw , index ) ) ; instructions . add ( ReilHelpers . createAdd ( baseOffset ++ , dw , registerNodeValue1 , dw , index , dw , tmpVar2 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dw , tmpVar2 , dw , dWordBitMask , dw , address ) ) ; return new Pair < String , String > ( address , registerNodeValue1 ) ; }
public static RowLimitSpec buildRowLimitSpec ( EsperEPL2GrammarParser . RowLimitContext ctx ) { Object numRows ; Object offset ; if ( ctx . o != null ) { numRows = parseNumOrVariableIdent ( ctx . n1 , ctx . i1 ) ; offset = parseNumOrVariableIdent ( ctx . n2 , ctx . i2 ) ; } else if ( ctx . c != null ) { offset = parseNumOrVariableIdent ( ctx . n1 , ctx . i1 ) ; numRows = parseNumOrVariableIdent ( ctx . n2 , ctx . i2 ) ; } else { numRows = parseNumOrVariableIdent ( ctx . n1 , ctx . i1 ) ; offset = null ; } Integer numRowsInt = null ; String numRowsVariable = null ; if ( numRows instanceof String ) { numRowsVariable = ( String ) numRows ; } else { numRowsInt = ( Integer ) numRows ; } Integer offsetInt = null ; String offsetVariable = null ; if ( offset instanceof String ) { offsetVariable = ( String ) offset ; } else { offsetInt = ( Integer ) offset ; } return new RowLimitSpec ( numRowsInt , offsetInt , numRowsVariable , offsetVariable ) ; }
public final int first_common_layer ( BrdItem p_other ) { int max_first_layer = Math . max ( first_layer ( ) , p_other . first_layer ( ) ) ; int min_last_layer = Math . min ( last_layer ( ) , p_other . last_layer ( ) ) ; if ( max_first_layer > min_last_layer ) { return - _NUM ; } return max_first_layer ; }
public ItemStack removeItems ( ItemStack drive , ItemStack stack , int amountWanted ) { if ( getMaxKilobits ( drive ) == - _NUM ) return null ; int stored = getAmountStored ( drive , stack ) ; int amountGiven = Math . min ( amountWanted , stored ) ; if ( amountGiven > _NUM ) { setAmountStored ( drive , stack , stored - amountGiven ) ; stack . stackSize += amountGiven ; markDirty ( drive ) ; } return stack ; }
public void saveIndexes ( ) { ArrayList toSave = new ArrayList ( ) ; synchronized ( this ) { Object [ ] valueTable = this . indexes . valueTable ; for ( int i = _NUM , l = valueTable . length ; i < l ; i ++ ) { Index index = ( Index ) valueTable [ i ] ; if ( index != null ) toSave . add ( index ) ; } } boolean allSaved = _BOOL ; for ( int i = _NUM , length = toSave . size ( ) ; i < length ; i ++ ) { Index index = ( Index ) toSave . get ( i ) ; ReadWriteMonitor monitor = index . monitor ; if ( monitor == null ) continue ; try { monitor . enterRead ( ) ; if ( index . hasChanged ( ) ) { if ( monitor . exitReadEnterWrite ( ) ) { try { saveIndex ( index ) ; } catch ( IOException e ) { if ( JobManager . VERBOSE ) { Util . verbose ( _STR , System . err ) ; e . printStackTrace ( ) ; } allSaved = _BOOL ; } finally { monitor . exitWriteEnterRead ( ) ; } } else { allSaved = _BOOL ; } } } finally { monitor . exitRead ( ) ; } } if ( this . participantsContainers != null && this . participantUpdated ) { writeParticipantsIndexNamesFile ( ) ; this . participantUpdated = _BOOL ; } this . needToSave = ! allSaved ; }
public void addItem ( Artist artist , int position ) { if ( artist == null ) throw new NullPointerException ( _STR ) ; if ( position < getItemCount ( ) || position > getItemCount ( ) ) throw new IllegalArgumentException ( _STR ) ; artists . add ( position , artist ) ; notifyItemInserted ( position ) ; }
public Process executeAsync ( final CommandLine command , Map < String , String > environment ) throws IOException { if ( workingDirectory != null && ! workingDirectory . exists ( ) ) { throw new IOException ( workingDirectory + _STR ) ; } return executeInternal ( command , environment , workingDirectory , streamHandler , null ) ; }
public void expandAndSelectIfExists ( RepositoryLocation location ) { if ( location . parent ( ) != null ) { expandIfExists ( location . parent ( ) , location . getName ( ) ) ; } else { expandIfExists ( location , null ) ; } scrollPathToVisible ( getSelectionPath ( ) ) ; }
public void nextToken ( ) { previousLine = line ; previousColumn = column ; while ( pos < matcher . regionStart ( ) ) { if ( text . charAt ( pos ) == _STR ) { ++ line ; column = _NUM ; } else { ++ column ; } ++ pos ; } if ( matcher . regionStart ( ) == matcher . regionEnd ( ) ) { currentToken = _STR ; } else { matcher . usePattern ( TOKEN ) ; if ( matcher . lookingAt ( ) ) { currentToken = matcher . group ( ) ; matcher . region ( matcher . end ( ) , matcher . regionEnd ( ) ) ; } else { currentToken = String . valueOf ( text . charAt ( pos ) ) ; matcher . region ( pos + _NUM , matcher . regionEnd ( ) ) ; } skipWhitespace ( ) ; } }
public static void saveProvisioningValidity ( Context context , long validity ) { if ( validity <= _NUM ) { return ; } long next = System . currentTimeMillis ( ) + validity ; SharedPreferences preferences = context . getSharedPreferences ( AndroidRegistryFactory . RCS_PREFS_NAME , Activity . MODE_PRIVATE ) ; SharedPreferences . Editor editor = preferences . edit ( ) ; editor . putLong ( REGISTRY_PROVISIONING_VALIDITY , validity ) ; editor . putLong ( REGISTRY_PROVISIONING_EXPIRATION , next ) ; editor . commit ( ) ; }
public void encode ( OutputStream out ) throws IOException { DerOutputStream tmp = new DerOutputStream ( ) ; if ( this . extensionValue == null ) { this . extensionId = PKIXExtensions . ReasonCode_Id ; this . critical = _BOOL ; encodeThis ( ) ; } super . encode ( tmp ) ; out . write ( tmp . toByteArray ( ) ) ; }
public DriverTask unexportVolumesFromInitiators ( List < Initiator > initiators , List < StorageVolume > volumes ) { LOG . info ( _STR ) ; DriverTask task = new DellSCDriverTask ( _STR ) ; ScServer server = null ; StringBuilder errBuffer = new StringBuilder ( ) ; int volumesUnmapped = _NUM ; for ( StorageVolume volume : volumes ) { String ssn = volume . getStorageSystemId ( ) ; boolean isSnapshot = StringUtils . countMatches ( volume . getNativeId ( ) , _STR ) == _NUM ; try { StorageCenterAPI api = connectionManager . getConnection ( ssn ) ; ScVolume scVol = null ; if ( isSnapshot ) { scVol = api . findReplayView ( volume . getNativeId ( ) ) ; if ( scVol != null ) { api . deleteVolume ( scVol . instanceId ) ; volumesUnmapped ++ ; continue ; } } else { scVol = api . getVolume ( volume . getNativeId ( ) ) ; } if ( scVol == null ) { throw new DellSCDriverException ( String . format ( _STR , volume . getNativeId ( ) ) ) ; } if ( server == null ) { server = findScServer ( api , ssn , initiators ) ; } if ( server == null ) { throw new DellSCDriverException ( SERVER_CREATE_FAIL_MSG ) ; } ScMappingProfile [ ] mappingProfiles = api . findMappingProfiles ( server . instanceId , scVol . instanceId ) ; for ( ScMappingProfile mappingProfile : mappingProfiles ) { api . deleteMappingProfile ( mappingProfile . instanceId ) ; } volumesUnmapped ++ ; LOG . info ( _STR , scVol . name , server . name ) ; } catch ( StorageCenterAPIException | DellSCDriverException dex ) { String error = String . format ( _STR , volume . getDisplayName ( ) , dex ) ; LOG . error ( error ) ; errBuffer . append ( String . format ( _STR , error ) ) ; if ( SERVER_CREATE_FAIL_MSG . equals ( dex . getMessage ( ) ) ) { break ; } } } task . setMessage ( errBuffer . toString ( ) ) ; if ( volumesUnmapped == volumes . size ( ) ) { task . setStatus ( TaskStatus . READY ) ; } else if ( volumesUnmapped == _NUM ) { task . setStatus ( TaskStatus . FAILED ) ; } else { task . setStatus ( TaskStatus . PARTIALLY_FAILED ) ; } return task ; }
public void createClusterAsync ( final String projectId , final ClusterCreateSpec clusterCreateSpec , final FutureCallback < Task > responseCallback ) throws IOException { String path = String . format ( _STR , getBasePath ( ) , projectId ) ; createObjectAsync ( path , serializeObjectAsJson ( clusterCreateSpec ) , responseCallback ) ; }
public static DereferenceAliasesPolicy valueOf ( final int intValue ) { if ( intValue < _NUM || intValue >= ELEMENTS . length ) { return null ; } return ELEMENTS [ intValue ] ; }
public void testGetNamedItemNS2 ( ) throws Throwable { Document doc ; NamedNodeMap attributes ; Node element ; Attr attribute ; NodeList elementList ; String attrName ; doc = ( Document ) load ( _STR , builder ) ; elementList = doc . getElementsByTagNameNS ( _STR , _STR ) ; element = elementList . item ( _NUM ) ; attributes = element . getAttributes ( ) ; attribute = ( Attr ) attributes . getNamedItemNS ( _STR , _STR ) ; attrName = attribute . getNodeName ( ) ; assertEquals ( _STR , _STR , attrName ) ; }
public static void writeUnsafe ( PacketOutputStream out , String value , boolean noBackslashEscapes ) throws IOException { byte [ ] bytes = value . getBytes ( _STR ) ; out . writeUnsafe ( QUOTE ) ; writeBytesEscapedUnsafe ( out , bytes , bytes . length , noBackslashEscapes ) ; out . writeUnsafe ( QUOTE ) ; }
public void add ( final SAMRecord read , final int position ) { recordAndOffsets . add ( new RecordAndOffset ( read , position ) ) ; }
private Sha256Hash calculateHash ( ) { try { ByteArrayOutputStream bos = new UnsafeByteArrayOutputStream ( HEADER_SIZE ) ; writeHeader ( bos ) ; return new Sha256Hash ( Utils . reverseBytes ( doubleDigest ( bos . toByteArray ( ) ) ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
private void addPropertyType ( URI p , Resource t ) { OwlProperty prop = getProperty ( p ) ; if ( t . equals ( OWL . TRANSITIVEPROPERTY ) ) { prop . setTransitive ( ) ; } else if ( t . equals ( OWL . SYMMETRICPROPERTY ) ) { prop . setSymmetric ( ) ; } else if ( t . equals ( OWL2 . ASYMMETRICPROPERTY ) ) { prop . setAsymmetric ( ) ; } else if ( t . equals ( OWL . FUNCTIONALPROPERTY ) ) { prop . setFunctional ( ) ; } else if ( t . equals ( OWL . INVERSEFUNCTIONALPROPERTY ) ) { prop . setInverseFunctional ( ) ; } else if ( t . equals ( OWL2 . IRREFLEXIVEPROPERTY ) ) { prop . setIrreflexive ( ) ; } }
public static void equals ( Object object1 , Object object2 ) { checkAssertion ( object1 . equals ( object2 ) , null ) ; }
public static String writeActionsToString ( OFInstructionWriteActions inst , Logger log ) throws Exception { return ActionUtils . actionsToString ( inst . getActions ( ) , log ) ; }
protected void preAddInterruptibly ( Object o ) throws InterruptedException { }
public static String encodeLines ( byte [ ] in , int iOff , int iLen , int lineLen , String lineSeparator ) { int blockLen = ( lineLen * _NUM ) / _NUM ; if ( blockLen <= _NUM ) throw new IllegalArgumentException ( ) ; int lines = ( iLen + blockLen - _NUM ) / blockLen ; int bufLen = ( ( iLen + _NUM ) / _NUM ) * _NUM + lines * lineSeparator . length ( ) ; StringBuilder buf = new StringBuilder ( bufLen ) ; int ip = _NUM ; while ( ip < iLen ) { int l = Math . min ( iLen - ip , blockLen ) ; buf . append ( encode ( in , iOff + ip , l ) ) ; buf . append ( lineSeparator ) ; ip += l ; } return buf . toString ( ) ; }
private ODataFeed readFeedLogPerf ( String query , Map < String , String > params ) throws IOException , ODataException { long delta_time = System . currentTimeMillis ( ) ; ODataFeed feed = client . readFeed ( query , params ) ; log ( Level . DEBUG , _STR + query + _STR + delta_time + _STR ) ; return feed ; }
final int rllong ( DataInputStream dis ) throws IOException { int b1 , b2 , b3 , b4 ; int i = _NUM ; i = dis . readInt ( ) ; b1 = ( i & _NUM ) << _NUM ; b2 = ( i & _NUM ) << _NUM ; b3 = ( i & _NUM ) > > _NUM ; b4 = ( i & _NUM ) > > > _NUM ; i = ( b1 | b2 | b3 | b4 ) ; return i ; }
public void testShiftRight4 ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = _NUM ; int number = _NUM ; byte rBytes [ ] = { _NUM , _NUM , - _NUM , _NUM , - _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . shiftRight ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public Dependencies resolveFromFile ( File file , String className , SootClass sc ) { DexlibWrapper wrapper = cache . get ( file ) ; if ( wrapper == null ) { wrapper = new DexlibWrapper ( file ) ; cache . put ( file , wrapper ) ; wrapper . initialize ( ) ; } Dependencies deps = wrapper . makeSootClass ( sc , className ) ; addSourceFileTag ( sc , _STR + file . getName ( ) ) ; return deps ; }
public static String buildResponseUrl ( String tenant , LogoutState logoutState ) { String retval = null ; LogoutResponse samlResponse = logoutState . generateResponseForTenant ( tenant , logoutState . getMessageSource ( ) , logoutState . getLocale ( ) ) ; if ( samlResponse != null ) { log . info ( _STR + samlResponse . toString ( ) ) ; retval = logoutState . generateResponseUrlForTenant ( samlResponse , tenant ) ; } return retval ; }
public static void assertLabel ( int [ ] path , String text ) { if ( verbose ) { log ( _STR + toString ( path ) + _STR + text + _STR ) ; } Label l = ( Label ) getComponentByPath ( path ) ; assertBool ( l != null , _STR + text ) ; assertBool ( text == l . getText ( ) || text . equals ( l . getText ( ) ) , ( _STR + l . getText ( ) ) + _STR + text ) ; }
private void interpolateResultList ( ArrayList < PathParser . PathDataNode > list ) { if ( list == null || list . size ( ) <= _NUM ) return ; float [ ] [ ] listPenPos = PathNodeUtils . calculatePenPosition ( list ) ; ArrayList < PathParser . PathDataNode > subList = new ArrayList < > ( ) ; int size = list . size ( ) ; PathParser . PathDataNode currentNode = null ; int i = _NUM ; while ( i < size - _NUM ) { currentNode = list . get ( i ) ; if ( ! isInterpolatableCommand ( currentNode . mType ) ) { i ++ ; continue ; } boolean validSequence = _BOOL ; int k = i ; for ( int j = i ; j < size && validSequence ; j ++ ) { if ( currentNode . mType == list . get ( j ) . mType ) { k = j ; if ( ! Arrays . equals ( currentNode . mParams , list . get ( j ) . mParams ) ) break ; } else validSequence = _BOOL ; } if ( k - i > _NUM ) { interpolateSubList ( list . subList ( i , k + _NUM ) ) ; } i ++ ; } }
private void initTokenizer ( StreamTokenizer tokenizer ) { tokenizer . resetSyntax ( ) ; tokenizer . whitespaceChars ( _NUM , ( _STR - _NUM ) ) ; tokenizer . wordChars ( _STR , _STR ) ; tokenizer . whitespaceChars ( _STR , _STR ) ; tokenizer . whitespaceChars ( _STR , _STR ) ; tokenizer . commentChar ( _STR ) ; tokenizer . whitespaceChars ( _STR , _STR ) ; tokenizer . quoteChar ( _STR ) ; tokenizer . quoteChar ( _STR ) ; tokenizer . eolIsSignificant ( _BOOL ) ; }
protected void illegalMessageReceived ( OFMessage m ) { String msg = getSwitchStateMessage ( m , _STR ) ; throw new SwitchStateException ( msg ) ; }
protected void run_ThreadSizeLoop ( ) throws Exception { for ( int i = _NUM ; i <= _NUM ; i += _NUM ) { setNumWorkers ( i ) ; try { Thread . sleep ( _NUM * _NUM ) ; } catch ( InterruptedException e ) { } } }
protected boolean read ( ) { if ( ! nReuseHeader ) { Debug . message ( _STR , _STR ) ; return readHeader ( ) ; } byte [ ] tempData = new byte [ nDataSize - nFieldOffset ] ; int nReadBytes = poModule . read ( tempData , _NUM , tempData . length ) ; System . arraycopy ( pachData , nFieldOffset , tempData , _NUM , tempData . length ) ; if ( nReadBytes != ( int ) ( nDataSize - nFieldOffset ) && nReadBytes == - _NUM ) { return _BOOL ; } else if ( nReadBytes != ( int ) ( nDataSize - nFieldOffset ) ) { Debug . error ( _STR ) ; return _BOOL ; } return _BOOL ; }
@ Override public boolean lock ( ) { try { if ( ! FileFactory . isFileExist ( location , FileFactory . getFileType ( tmpPath ) ) ) { FileFactory . mkdirs ( location , FileFactory . getFileType ( tmpPath ) ) ; } String lockFilePath = location + CarbonCommonConstants . FILE_SEPARATOR + lockFile ; if ( ! FileFactory . isFileExist ( lockFilePath , FileFactory . getFileType ( location ) ) ) { FileFactory . createNewLockFile ( lockFilePath , FileFactory . getFileType ( location ) ) ; } fileOutputStream = new FileOutputStream ( lockFilePath ) ; channel = fileOutputStream . getChannel ( ) ; try { fileLock = channel . tryLock ( ) ; } catch ( OverlappingFileLockException e ) { return _BOOL ; } if ( null != fileLock ) { return _BOOL ; } else { return _BOOL ; } } catch ( IOException e ) { return _BOOL ; } }
public void open ( int port ) throws IOException { connection = new DatagramSocket ( port ) ; connection . setSoTimeout ( timeout ) ; }
public String globalInfo ( ) { return _STR + _STR ; }
public MLResults execute ( Script script ) { ScriptExecutor scriptExecutor = new ScriptExecutor ( sparkMonitoringUtil ) ; scriptExecutor . setExplain ( explain ) ; scriptExecutor . setExplainLevel ( explainLevel ) ; scriptExecutor . setStatistics ( statistics ) ; scriptExecutor . setInit ( scriptHistoryStrings . isEmpty ( ) ) ; return execute ( script , scriptExecutor ) ; }
public void disable ( RichFormatterFeature feature ) { features . remove ( feature ) ; }
public void removeEventListener ( ZWaveEventListener eventListener ) { synchronized ( zwaveEventListeners ) { zwaveEventListeners . remove ( eventListener ) ; } }
private static double pythonTime ( ) { return System . currentTimeMillis ( ) / _NUM ; }
@ SafeVarargs public final void add ( T ... newItems ) { add ( Arrays . asList ( newItems ) ) ; }
public static String quoteIfJavaKeyword ( String name ) { return JVMModuleUtil . quoteIfJavaKeyword ( name ) ; }
public static Recipe fromCursor ( Cursor cursor ) { Recipe recipe = new Recipe ( null ) ; for ( int c = _NUM ; c < cursor . getColumnCount ( ) ; c ++ ) { String columnName = cursor . getColumnName ( c ) ; if ( columnName . equals ( RecipeTable . ID_COLUMN ) ) { recipe . id = cursor . getString ( c ) ; } else if ( columnName . equals ( RecipeTable . TITLE_COLUMN ) ) { recipe . setTitle ( cursor . getString ( c ) ) ; } else if ( columnName . equals ( RecipeTable . DESCRIPTION_COLUMN ) ) { recipe . setDescription ( cursor . getString ( c ) ) ; } else if ( columnName . equals ( RecipeTable . PHOTO_COLUMN ) ) { recipe . setPhoto ( cursor . getString ( c ) ) ; } else if ( columnName . equals ( RecipeTable . PREP_TIME_COLUMN ) ) { recipe . setPrepTime ( cursor . getString ( c ) ) ; } } return recipe ; }
public static void checkState ( boolean expression , @ Nullable Object errorMessage ) { if ( ! expression ) { throw new IllegalStateException ( String . valueOf ( errorMessage ) ) ; } }
private static < T , ID > void addDropTableStatements ( DatabaseType databaseType , TableInfo < T , ID > tableInfo , List < String > statements ) { List < String > statementsBefore = new ArrayList < String > ( ) ; List < String > statementsAfter = new ArrayList < String > ( ) ; for ( FieldType fieldType : tableInfo . getFieldTypes ( ) ) { databaseType . dropColumnArg ( fieldType , statementsBefore , statementsAfter ) ; } StringBuilder sb = new StringBuilder ( _NUM ) ; sb . append ( _STR ) ; databaseType . appendEscapedEntityName ( sb , tableInfo . getTableName ( ) ) ; sb . append ( _STR ) ; statements . addAll ( statementsBefore ) ; statements . add ( sb . toString ( ) ) ; statements . addAll ( statementsAfter ) ; }
public boolean isLocked ( ) { return ! queue . isEmpty ( ) ; }
public long cguest_time ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
private static ClassInfo findOrCreateClass ( String t ) { if ( ! t . endsWith ( _STR ) ) { return ClassInfo . findOrCreateClass ( t ) ; } else { String baseType = t . substring ( _NUM , t . indexOf ( _STR ) ) ; int level = ( t . length ( ) - t . indexOf ( _STR ) ) / _NUM ; String s = _STR ; for ( int i = _NUM ; i < level ; ++ i ) s += _STR ; if ( baseType . equals ( _STR ) ) s += _STR ; else if ( baseType . equals ( _STR ) ) s += _STR ; else s += _STR + baseType + _STR ; return ClassInfo . findOrCreateClass ( s ) ; } }
private void resetNotes ( ) { if ( errorInStatus1 ) { if ( editMode ) { statusText1 . setText ( editStatus1 ) ; } else { statusText1 . setText ( stdStatus1 ) ; } errorInStatus1 = _BOOL ; } resetNotes2 ( ) ; }
@ HLEFunction ( nid = _NUM , version = _NUM ) public int sceRtcSetTick ( TPointer timeAddr , TPointer64 ticksAddr ) { long ticks = ticksAddr . getValue ( ) - rtcMagicOffset ; ScePspDateTime time = ScePspDateTime . fromMicros ( ticks ) ; time . write ( timeAddr ) ; return _NUM ; }
public static void write ( File file , CharSequence data , Charset encoding , boolean append ) throws IOException { String str = data == null ? null : data . toString ( ) ; writeStringToFile ( file , str , encoding , append ) ; }
private void populateNavDrawer ( ) { mNavDrawerItems . clear ( ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_HOME ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_SEPARATOR ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_FOLLOWING ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_SHOTS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_BUCKETS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_PROJECTS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_TEAMS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_LIKES ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_SEPARATOR_SPECIAL ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_SETTINGS ) ; createNavDrawerItems ( ) ; }
private BigInteger oddModPow ( BigInteger y , BigInteger z ) { if ( y . equals ( ONE ) ) return this ; if ( signum == _NUM ) return ZERO ; int [ ] base = mag . clone ( ) ; int [ ] exp = y . mag ; int [ ] mod = z . mag ; int modLen = mod . length ; if ( ( modLen & _NUM ) != _NUM ) { int [ ] x = new int [ modLen + _NUM ] ; System . arraycopy ( mod , _NUM , x , _NUM , modLen ) ; mod = x ; modLen ++ ; } int wbits = _NUM ; int ebits = bitLength ( exp , exp . length ) ; if ( ( ebits != _NUM ) || ( exp [ _NUM ] != _NUM ) ) { while ( ebits > bnExpModThreshTable [ wbits ] ) { wbits ++ ; } } int tblmask = _NUM << wbits ; int [ ] [ ] table = new int [ tblmask ] [ ] ; for ( int i = _NUM ; i < tblmask ; i ++ ) table [ i ] = new int [ modLen ] ; long n0 = ( mod [ modLen - _NUM ] & LONG_MASK ) + ( ( mod [ modLen - _NUM ] & LONG_MASK ) << _NUM ) ; long inv = - MutableBigInteger . inverseMod64 ( n0 ) ; int [ ] a = leftShift ( base , base . length , modLen << _NUM ) ; MutableBigInteger q = new MutableBigInteger ( ) , a2 = new MutableBigInteger ( a ) , b2 = new MutableBigInteger ( mod ) ; b2 . normalize ( ) ; MutableBigInteger r = a2 . divide ( b2 , q ) ; table [ _NUM ] = r . toIntArray ( ) ; if ( table [ _NUM ] . length < modLen ) { int offset = modLen - table [ _NUM ] . length ; int [ ] t2 = new int [ modLen ] ; System . arraycopy ( table [ _NUM ] , _NUM , t2 , offset , table [ _NUM ] . length ) ; table [ _NUM ] = t2 ; } int [ ] b = montgomerySquare ( table [ _NUM ] , mod , modLen , inv , null ) ; int [ ] t = Arrays . copyOf ( b , modLen ) ; for ( int i = _NUM ; i < tblmask ; i ++ ) { table [ i ] = montgomeryMultiply ( t , table [ i - _NUM ] , mod , modLen , inv , null ) ; } int bitpos = _NUM << ( ( ebits - _NUM ) & ( _NUM - _NUM ) ) ; int buf = _NUM ; int elen = exp . length ; int eIndex = _NUM ; for ( int i = _NUM ; i <= wbits ; i ++ ) { buf = ( buf << _NUM ) | ( ( ( exp [ eIndex ] & bitpos ) != _NUM ) ? _NUM : _NUM ) ; bitpos >>>= _NUM ; if ( bitpos == _NUM ) { eIndex ++ ; bitpos = _NUM << ( _NUM - _NUM ) ; elen -- ; } } int multpos = ebits ; ebits -- ; boolean isone = _BOOL ; multpos = ebits - wbits ; while ( ( buf & _NUM ) == _NUM ) { buf >>>= _NUM ; multpos ++ ; } int [ ] mult = table [ buf > > > _NUM ] ; buf = _NUM ; if ( multpos == ebits ) isone = _BOOL ; while ( _BOOL ) { ebits -- ; buf <<= _NUM ; if ( elen != _NUM ) { buf |= ( ( exp [ eIndex ] & bitpos ) != _NUM ) ? _NUM : _NUM ; bitpos >>>= _NUM ; if ( bitpos == _NUM ) { eIndex ++ ; bitpos = _NUM << ( _NUM - _NUM ) ; elen -- ; } } if ( ( buf & tblmask ) != _NUM ) { multpos = ebits - wbits ; while ( ( buf & _NUM ) == _NUM ) { buf >>>= _NUM ; multpos ++ ; } mult = table [ buf > > > _NUM ] ; buf = _NUM ; } if ( ebits == multpos ) { if ( isone ) { b = mult . clone ( ) ; isone = _BOOL ; } else { t = b ; a = montgomeryMultiply ( t , mult , mod , modLen , inv , a ) ; t = a ; a = b ; b = t ; } } if ( ebits == _NUM ) break ; if ( ! isone ) { t = b ; a = montgomerySquare ( t , mod , modLen , inv , a ) ; t = a ; a = b ; b = t ; } } int [ ] t2 = new int [ _NUM * modLen ] ; System . arraycopy ( b , _NUM , t2 , modLen , modLen ) ; b = montReduce ( t2 , mod , modLen , ( int ) inv ) ; t2 = Arrays . copyOf ( b , modLen ) ; return new BigInteger ( _NUM , t2 ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childValue ; int childLength ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; childValue = child . getData ( ) ; childLength = childValue . length ( ) ; assertEquals ( _STR , _NUM , childLength ) ; }
public int nextToken ( ) { while ( index < length && Character . isWhitespace ( expr [ index ] ) ) { index ++ ; } tokenVal = null ; if ( index == length ) return TOKEN_END ; int start = index ; char currentChar = expr [ index ] ; char nextChar = ( char ) _NUM ; index ++ ; if ( index < length ) nextChar = expr [ index ] ; switch ( currentChar ) { case _STR : return TOKEN_LBRACE ; case _STR : return TOKEN_RBRACE ; case _STR : return TOKEN_EQ ; case _STR : if ( nextChar == _STR ) { index ++ ; return TOKEN_NOT_EQ ; } return TOKEN_NOT ; case _STR : if ( nextChar == _STR ) { index ++ ; return TOKEN_OR ; } break ; case _STR : if ( nextChar == _STR ) { index ++ ; return TOKEN_AND ; } break ; case _STR : if ( nextChar == _STR ) { index ++ ; return TOKEN_GE ; } return TOKEN_GT ; case _STR : if ( nextChar == _STR ) { index ++ ; return TOKEN_LE ; } return TOKEN_LT ; default : break ; } int end = index ; if ( currentChar == _STR || currentChar == _STR ) { char endChar = currentChar ; boolean escaped = _BOOL ; start ++ ; for ( ; index < length ; index ++ ) { if ( expr [ index ] == _STR && ! escaped ) { escaped = _BOOL ; continue ; } if ( expr [ index ] == endChar && ! escaped ) break ; escaped = _BOOL ; } end = index ; index ++ ; } else if ( currentChar == _STR ) { char endChar = currentChar ; boolean escaped = _BOOL ; for ( ; index < length ; index ++ ) { if ( expr [ index ] == _STR && ! escaped ) { escaped = _BOOL ; continue ; } if ( expr [ index ] == endChar && ! escaped ) break ; escaped = _BOOL ; } end = ++ index ; } else { for ( ; index < length ; index ++ ) { if ( isMetaChar ( expr [ index ] ) ) break ; } end = index ; } this . tokenVal = new String ( expr , start , end - start ) ; return TOKEN_STRING ; }
public static Byte [ ] valuesOf ( byte [ ] array ) { Byte [ ] dest = new Byte [ array . length ] ; for ( int i = _NUM ; i < array . length ; i ++ ) { dest [ i ] = Byte . valueOf ( array [ i ] ) ; } return dest ; }
public void auditCallhome ( OperationTypeEnum auditType , String operationalStatus , String description , Object ... descparams ) { _auditMgr . recordAuditLog ( null , null , EVENT_SERVICE_TYPE , auditType , System . currentTimeMillis ( ) , operationalStatus , description , descparams ) ; }
public static float mean ( float [ ] data , int startIndex , int endIndex ) { float mean = _NUM ; int total = _NUM ; startIndex = Math . max ( startIndex , _NUM ) ; startIndex = Math . min ( startIndex , data . length - _NUM ) ; endIndex = Math . max ( endIndex , _NUM ) ; endIndex = Math . min ( endIndex , data . length - _NUM ) ; if ( startIndex > endIndex ) startIndex = endIndex ; for ( int i = startIndex ; i <= endIndex ; i ++ ) { if ( Float . isNaN ( data [ i ] ) ) throw new IllegalArgumentException ( _STR ) ; mean += data [ i ] ; total ++ ; } mean /= total ; return mean ; }
public static String constructNTPtime ( long date ) { long ntpTime = _NUM ; long startTime = ( date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE ) + ntpTime ; return String . valueOf ( startTime ) ; }
protected MediaType selectMediaType ( ServerWebExchange exchange , List < MediaType > producibleTypes ) { List < MediaType > acceptableTypes = getAcceptableTypes ( exchange ) ; producibleTypes = getProducibleTypes ( exchange , producibleTypes ) ; Set < MediaType > compatibleMediaTypes = new LinkedHashSet < > ( ) ; for ( MediaType acceptable : acceptableTypes ) { for ( MediaType producible : producibleTypes ) { if ( acceptable . isCompatibleWith ( producible ) ) { compatibleMediaTypes . add ( selectMoreSpecificMediaType ( acceptable , producible ) ) ; } } } List < MediaType > result = new ArrayList < > ( compatibleMediaTypes ) ; MediaType . sortBySpecificityAndQuality ( result ) ; for ( MediaType mediaType : compatibleMediaTypes ) { if ( mediaType . isConcrete ( ) ) { return mediaType ; } else if ( mediaType . equals ( MediaType . ALL ) || mediaType . equals ( MEDIA_TYPE_APPLICATION_ALL ) ) { return MediaType . APPLICATION_OCTET_STREAM ; } } return null ; }
public void paintBorder ( Component c , Graphics g , int x , int y , int width , int height ) { if ( ! ( c instanceof JPopupMenu ) ) { return ; } Font origFont = g . getFont ( ) ; Color origColor = g . getColor ( ) ; JPopupMenu popup = ( JPopupMenu ) c ; String title = popup . getLabel ( ) ; if ( title == null ) { return ; } g . setFont ( font ) ; FontMetrics fm = SwingUtilities2 . getFontMetrics ( popup , g , font ) ; int fontHeight = fm . getHeight ( ) ; int descent = fm . getDescent ( ) ; int ascent = fm . getAscent ( ) ; Point textLoc = new Point ( ) ; int stringWidth = SwingUtilities2 . stringWidth ( popup , fm , title ) ; textLoc . y = y + ascent + TEXT_SPACING ; textLoc . x = x + ( ( width - stringWidth ) / _NUM ) ; g . setColor ( background ) ; g . fillRect ( textLoc . x - TEXT_SPACING , textLoc . y - ( fontHeight - descent ) , stringWidth + ( _NUM * TEXT_SPACING ) , fontHeight - descent ) ; g . setColor ( foreground ) ; SwingUtilities2 . drawString ( popup , g , title , textLoc . x , textLoc . y ) ; MotifGraphicsUtils . drawGroove ( g , x , textLoc . y + TEXT_SPACING , width , GROOVE_HEIGHT , shadowColor , highlightColor ) ; g . setFont ( origFont ) ; g . setColor ( origColor ) ; }
public void ensureCapacity ( int mincap ) { if ( mincap > array . length ) { int newcap = ( ( array . length * _NUM ) > > _NUM ) + _NUM ; int [ ] olddata = array ; array = new int [ newcap < mincap ? mincap : newcap ] ; System . arraycopy ( olddata , _NUM , array , _NUM , size ) ; } }
public void invalidateAndUnmap ( ByteBuffer ... bufs ) throws IOException { if ( cleaner != null ) { invalidated = _BOOL ; barrier . lazySet ( _NUM ) ; Thread . yield ( ) ; for ( ByteBuffer b : bufs ) { cleaner . freeBuffer ( resourceDescription , b ) ; } } }
public int addDir ( File file ) { if ( ! file . exists ( ) ) { return _NUM ; } String [ ] names = getNames ( getFiles ( file , _STR ) ) ; loadClass ( file , names ) ; return _NUM ; }
private boolean isMineshafterPresent ( ) { try { Class . forName ( _STR ) ; return _BOOL ; } catch ( Exception e ) { return _BOOL ; } }
@ Override public boolean equals ( Object obj ) { if ( obj == this ) { return _BOOL ; } if ( ! ( obj instanceof BubbleXYItemLabelGenerator ) ) { return _BOOL ; } if ( ! super . equals ( obj ) ) { return _BOOL ; } BubbleXYItemLabelGenerator that = ( BubbleXYItemLabelGenerator ) obj ; if ( ! ObjectUtilities . equal ( this . zFormat , that . zFormat ) ) { return _BOOL ; } if ( ! ObjectUtilities . equal ( this . zDateFormat , that . zDateFormat ) ) { return _BOOL ; } return _BOOL ; }
public static boolean hasElementChild ( Node node ) { NodeList nl = node . getChildNodes ( ) ; Node child = null ; int length = nl . getLength ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { child = nl . item ( i ) ; if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { return _BOOL ; } } return _BOOL ; }
public void delItem ( int index ) { synchronized ( getMenuTreeLock ( ) ) { if ( selectedIndex == index ) { selectItem ( null , _BOOL ) ; } else if ( selectedIndex > index ) { selectedIndex -- ; } if ( index < items . size ( ) ) { items . remove ( index ) ; } else { if ( log . isLoggable ( PlatformLogger . Level . FINE ) ) { log . fine ( _STR + index + _STR + items . size ( ) ) ; } } } updateSize ( ) ; }
public static int countCSSPrimitiveNames ( ) { return ALL_PRIMITIVE_PROPERTY_NAMES . size ( ) ; }
public void printString ( String v ) throws IOException { printString ( v , _NUM , v . length ( ) ) ; }
private void checkPermission ( Object object , NamespacePermissionEnum [ ] permissions , List < AccessDeniedException > accessDeniedExceptions ) { if ( object != null ) { if ( object instanceof Collection ) { Collection < ? > collection = ( Collection < ? > ) object ; for ( Object element : collection ) { checkPermission ( element , permissions , accessDeniedExceptions ) ; } } else if ( object instanceof String ) { try { checkPermission ( ( String ) object , permissions ) ; } catch ( AccessDeniedException accessDeniedException ) { accessDeniedExceptions . add ( accessDeniedException ) ; } } else { throw new IllegalStateException ( String . format ( _STR , String . class , Collection . class , object . getClass ( ) ) ) ; } } }
private void displayAllStringDefinedInStringXml ( ) { SimpleIconFontTextView textView = ( SimpleIconFontTextView ) findViewById ( R . id . text_view_2 ) ; List < String > list = new ArrayList < > ( ) ; list . add ( getString ( R . string . cubeicon_gems_logo ) ) ; list . add ( getString ( R . string . cubeicon_android ) ) ; list . add ( getString ( R . string . cubeicon_heart ) ) ; String text = TextUtils . join ( _STR , list ) ; textView . setText ( text ) ; }
private static Intent createMapActivityIntent ( Context context , URLSpan [ ] urlSpans ) { for ( int span_i = _NUM ; span_i < urlSpans . length ; span_i ++ ) { URLSpan urlSpan = urlSpans [ span_i ] ; String urlString = urlSpan . getURL ( ) ; if ( urlString . startsWith ( GEO_PREFIX ) ) { Intent geoIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( urlString ) ) ; geoIntent . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; return geoIntent ; } } return null ; }
private StringBuilder generateParameters ( ) { StringBuilder parameters = new StringBuilder ( ) ; if ( filterMap == null && expandParameters == null ) { return parameters ; } parameters . append ( _STR ) ; int filterParameterCounter = _NUM ; if ( filterMap != null && ! filterMap . isEmpty ( ) ) { parameters . append ( FILTER_PREFIX ) ; for ( Map . Entry < String , String > filterEntry : filterMap . entrySet ( ) ) { parameters . append ( String . format ( _STR , filterEntry . getKey ( ) , filterEntry . getValue ( ) ) ) ; if ( ++ filterParameterCounter < filterMap . size ( ) ) { parameters . append ( _STR ) ; } } if ( expandParameters != null ) { parameters . append ( _STR ) ; } } if ( expandParameters != null ) { parameters . append ( EXPAND_PREFIX ) ; Iterator iterator = expandParameters . iterator ( ) ; parameters . append ( String . format ( _STR , iterator . next ( ) ) ) ; while ( iterator . hasNext ( ) ) { parameters . append ( String . format ( _STR , iterator . next ( ) ) ) ; } } return parameters ; }
public void writeExif ( Bitmap bmap , OutputStream exifOutStream ) throws IOException { if ( bmap == null || exifOutStream == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = getExifWriterStream ( exifOutStream ) ; bmap . compress ( Bitmap . CompressFormat . JPEG , _NUM , s ) ; s . flush ( ) ; }
public void removeAttribute ( int index ) { if ( index >= _NUM && index < length ) { if ( index < length - _NUM ) { System . arraycopy ( data , ( index + _NUM ) * _NUM , data , index * _NUM , ( length - index - _NUM ) * _NUM ) ; } index = ( length - _NUM ) * _NUM ; data [ index ++ ] = null ; data [ index ++ ] = null ; data [ index ++ ] = null ; data [ index ++ ] = null ; data [ index ] = null ; length -- ; } else { badIndex ( index ) ; } }
public static @ CheckForNull @ SlashedClassName String fromFieldSignature ( String signature ) { if ( signature . charAt ( _NUM ) != _STR ) { return null ; } return signature . substring ( _NUM , signature . length ( ) - _NUM ) ; }
private void paintPreview ( int dx , int dy , float zoomfactor ) { if ( image != null ) { Graphics2D g2 = ( Graphics2D ) getGraphics ( ) ; UColor bg = renderer . getBackgroundColor ( ) ; g2 . setBackground ( new Color ( bg . getRed ( ) , bg . getGreen ( ) , bg . getBlue ( ) , bg . getAlpha ( ) ) ) ; int newWidth = Math . round ( image . getWidth ( null ) * zoomfactor ) ; int newHeight = ( int ) Math . round ( image . getHeight ( null ) * zoomfactor ) ; g2 . drawImage ( image , dx , dy , newWidth , newHeight , null ) ; if ( dx > _NUM ) g2 . clearRect ( _NUM , _NUM , dx , getHeight ( ) ) ; else g2 . clearRect ( getWidth ( ) + dx , _NUM , getWidth ( ) , getHeight ( ) ) ; if ( dy > _NUM ) g2 . clearRect ( _NUM , _NUM , getWidth ( ) , dy ) ; else g2 . clearRect ( _NUM , getHeight ( ) + dy , getWidth ( ) , getHeight ( ) ) ; } }
@ RequiresPermission ( Manifest . permission . CAMERA ) public CameraSource start ( ) throws IOException { synchronized ( mCameraLock ) { if ( mCamera != null ) { return this ; } mCamera = createCamera ( ) ; if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . HONEYCOMB ) { mDummySurfaceTexture = new SurfaceTexture ( DUMMY_TEXTURE_NAME ) ; mCamera . setPreviewTexture ( mDummySurfaceTexture ) ; } else { mDummySurfaceView = new SurfaceView ( mContext ) ; mCamera . setPreviewDisplay ( mDummySurfaceView . getHolder ( ) ) ; } mCamera . startPreview ( ) ; mProcessingThread = new Thread ( mFrameProcessor ) ; mFrameProcessor . setActive ( _BOOL ) ; mProcessingThread . start ( ) ; } return this ; }
public synchronized void clear ( ) { mCategories . clear ( ) ; mValues . clear ( ) ; }
public static List < List < Double > > partitionVariable ( List < Double > arr , int chunk ) { int count = _NUM ; List < List < Double > > ret = new ArrayList < List < Double > > ( ) ; while ( count < arr . size ( ) ) { List < Double > sublist = arr . subList ( count , count + chunk ) ; count += chunk ; ret . add ( sublist ) ; } for ( List < Double > lists : ret ) { if ( lists . size ( ) < chunk ) ret . remove ( lists ) ; } return ret ; }
private static void updateWindowUI ( Window window ) { SwingUtilities . updateComponentTreeUI ( window ) ; Window ownedWins [ ] = window . getOwnedWindows ( ) ; for ( Window ownedWin : ownedWins ) { updateWindowUI ( ownedWin ) ; } }
public void clearResults ( ) { if ( resultList != null ) { resultList . clear ( ) ; mAdapter . notifyDataSetChanged ( ) ; } listener . onSearchCleared ( ) ; }
public ArrayList < ConstraintWidget > findWidgets ( WidgetContainer container , int x , int y , int width , int height ) { ArrayList < ConstraintWidget > found = new ArrayList < > ( ) ; Rectangle area = new Rectangle ( x , y , width , height ) ; for ( ConstraintWidget widget : container . getChildren ( ) ) { WidgetCompanion companion = ( WidgetCompanion ) widget . getCompanionWidget ( ) ; WidgetDecorator decorator = companion . getWidgetDecorator ( WidgetDecorator . BLUEPRINT_STYLE ) ; if ( ! decorator . isVisible ( ) ) { continue ; } Rectangle bounds = new Rectangle ( widget . getDrawX ( ) , widget . getDrawY ( ) , widget . getWidth ( ) , widget . getHeight ( ) ) ; if ( area . intersects ( bounds ) ) { found . add ( widget ) ; } } return found ; }
public final void printSymbol ( CharSequence text ) throws IOException { if ( text == null ) { appendAscii ( _STR ) ; } else if ( text . length ( ) == _NUM ) { throw new EmptySymbolException ( ) ; } else if ( symbolNeedsQuoting ( text , _BOOL ) ) { appendAscii ( _STR ) ; printCodePoints ( text , SYMBOL_ESCAPE_CODES ) ; appendAscii ( _STR ) ; } else { appendAscii ( text ) ; } }
public static ShoppingCartItem makeItem ( Integer cartLocation , GenericValue product , BigDecimal selectedAmount , BigDecimal quantity , BigDecimal unitPrice , Timestamp reservStart , BigDecimal reservLength , BigDecimal reservPersons , Timestamp shipBeforeDate , Timestamp shipAfterDate , Map < String , GenericValue > additionalProductFeatureAndAppls , Map < String , Object > attributes , String prodCatalogId , ProductConfigWrapper configWrapper , String itemType , ShoppingCart . ShoppingCartItemGroup itemGroup , LocalDispatcher dispatcher , ShoppingCart cart , Boolean triggerExternalOpsBool , Boolean triggerPriceRulesBool , GenericValue parentProduct , Boolean skipInventoryChecks , Boolean skipProductChecks ) throws CartItemModifyException { return makeItem ( cartLocation , product , selectedAmount , quantity , unitPrice , reservStart , reservLength , reservPersons , null , null , shipBeforeDate , shipAfterDate , additionalProductFeatureAndAppls , attributes , prodCatalogId , configWrapper , itemType , itemGroup , dispatcher , cart , triggerExternalOpsBool , triggerPriceRulesBool , parentProduct , skipInventoryChecks , skipProductChecks ) ; }
@ Override public String toString ( ) { Map < Assignment , Double > sortedTable = InferenceUtils . getNBest ( table , Math . max ( table . size ( ) , _NUM ) ) ; String str = _STR ; for ( Entry < Assignment , Double > entry : sortedTable . entrySet ( ) ) { String prob = StringUtils . getShortForm ( entry . getValue ( ) ) ; str += _STR + entry . getKey ( ) + _STR + prob + _STR ; } return ( str . length ( ) > _NUM ) ? str . substring ( _NUM , str . length ( ) - _NUM ) : str ; }
protected final void updateBorderText ( final String text ) { Preconditions . checkNotNull ( text , _STR ) ; m_titledBorder . setTitle ( text ) ; updateUI ( ) ; }
private void addClasses ( Class < ? > [ ] classes , HashSet < Class < ? > > result , String fieldName ) { if ( classes == null || classes . length == _NUM ) Error . classesAbsent ( fieldName , configuredClass ) ; for ( Class < ? > classe : classes ) result . add ( classe ) ; }
public void resetReferences ( ) { if ( _refs != null ) _refs . clear ( ) ; }
public static BigInteger decodeMPI ( byte [ ] mpi , boolean hasLength ) { byte [ ] buf ; if ( hasLength ) { int length = ( int ) readUint32BE ( mpi , _NUM ) ; buf = new byte [ length ] ; System . arraycopy ( mpi , _NUM , buf , _NUM , length ) ; } else buf = mpi ; if ( buf . length == _NUM ) return BigInteger . ZERO ; boolean isNegative = ( buf [ _NUM ] & _NUM ) == _NUM ; if ( isNegative ) buf [ _NUM ] &= _NUM ; BigInteger result = new BigInteger ( buf ) ; return isNegative ? result . negate ( ) : result ; }
public void schemaChanged ( String serviceName , String version ) { synchronized ( mapRealmToFormat ) { mapRealmToFormat . remove ( ROOT ) ; } }
public void sort ( DTMIterator v , Vector keys , XPathContext support ) throws javax . xml . transform . TransformerException { m_keys = keys ; int n = v . getLength ( ) ; Vector nodes = new Vector ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { NodeCompareElem elem = new NodeCompareElem ( v . item ( i ) ) ; nodes . addElement ( elem ) ; } Vector scratchVector = new Vector ( ) ; mergesort ( nodes , scratchVector , _NUM , n - _NUM , support ) ; for ( int i = _NUM ; i < n ; i ++ ) { v . setItem ( ( ( NodeCompareElem ) nodes . elementAt ( i ) ) . m_node , i ) ; } v . setCurrentPos ( _NUM ) ; }
protected DateTimeData parse ( String str ) throws SchemaDateTimeException { DateTimeData date = new DateTimeData ( str , this ) ; int len = str . length ( ) ; date . year = YEAR ; date . day = DAY ; if ( str . charAt ( _NUM ) != _STR || str . charAt ( _NUM ) != _STR ) { throw new SchemaDateTimeException ( _STR + str ) ; } int stop = _NUM ; date . month = parseInt ( str , _NUM , stop ) ; if ( str . length ( ) >= stop + _NUM && str . charAt ( stop ) == _STR && str . charAt ( stop + _NUM ) == _STR ) { stop += _NUM ; } if ( stop < len ) { if ( ! isNextCharUTCSign ( str , stop , len ) ) { throw new SchemaDateTimeException ( _STR + str ) ; } else { getTimeZone ( str , date , stop , len ) ; } } validateDateTime ( date ) ; saveUnnormalized ( date ) ; if ( date . utc != _NUM && date . utc != _STR ) { normalize ( date ) ; } date . position = _NUM ; return date ; }
private void addToQueue ( SerialMessage serialMessage ) { if ( serialMessage == null ) { return ; } if ( ! msgQueue . contains ( serialMessage ) && msgQueue . remainingCapacity ( ) > _NUM ) { msgQueue . add ( serialMessage ) ; } sendMessage ( ) ; }
private DBID stringToDBID ( String query ) { return DBIDUtil . importInteger ( Integer . valueOf ( query ) ) ; }
@ Override public final void writeShort ( int v ) throws IOException { work [ _NUM ] = ( byte ) v ; work [ _NUM ] = ( byte ) ( v > > _NUM ) ; dis . write ( work , _NUM , _NUM ) ; }
final public void println ( long v ) { Writer out = this . out ; if ( out == null ) return ; print ( v ) ; try { out . write ( _newline , _NUM , _newline . length ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
public ThriftServiceMetadata ( Class < ? > serviceType ) { requireNonNull ( serviceType , _STR ) ; interfaces = init ( null , Collections . singleton ( serviceType ) ) ; }
public WritableRaster createCompatibleWritableRaster ( int w , int h ) { if ( w <= _NUM || h <= _NUM ) { throw new RasterFormatException ( _STR + ( ( w <= _NUM ) ? _STR : _STR ) ) ; } SampleModel sm = sampleModel . createCompatibleSampleModel ( w , h ) ; return new BytePackedRaster ( sm , new Point ( _NUM , _NUM ) ) ; }
public static Response invalidEntity ( ConstraintViolationException e ) { StringBuilder errorMessage = new StringBuilder ( ) ; boolean firstPass = _BOOL ; for ( ConstraintViolation error : e . getConstraintViolations ( ) ) { if ( ! firstPass ) { errorMessage . append ( _STR ) ; } errorMessage . append ( String . format ( _STR , error . getPropertyPath ( ) , error . getMessage ( ) , error . getInvalidValue ( ) ) ) ; firstPass = _BOOL ; } ExternalException externalException = new ExternalException ( ErrorCode . INVALID_ENTITY , errorMessage . toString ( ) , null ) ; return externalException ( externalException ) ; }
public String checkStartBlock ( int mode ) { if ( log . isDebugEnabled ( ) ) log . debug ( _STR + getDisplayName ( ) + _STR ) ; BlockOrder bo = _orders . get ( _NUM ) ; OBlock block = bo . getBlock ( ) ; String msg = block . allocate ( this ) ; if ( msg != null ) { return msg ; } msg = bo . setPath ( this ) ; if ( msg != null ) { return msg ; } int state = block . getState ( ) ; if ( ( state & OBlock . DARK ) != _NUM || _tempRunBlind ) { msg = Bundle . getMessage ( _STR , block . getDisplayName ( ) ) ; } else if ( ( state & OBlock . OCCUPIED ) == _NUM ) { if ( mode == MODE_LEARN ) { msg = _STR ; } else { msg = _STR ; } msg = Bundle . getMessage ( msg , getTrainName ( ) , block . getDisplayName ( ) ) ; } else { TrackerTableAction . stopTrackerIn ( block ) ; } return msg ; }
private void parseSwitch ( int indent , boolean firstContent , String header , Layout layout , List < Elem > elems ) { TokenStream tokens = new TokenStream ( header ) ; Elem selector = parseExpr ( tokens ) ; tokens . checkAtEnd ( ) ; ImmutableList . Builder < Case > cases = ImmutableList . builder ( ) ; List < Elem > defaultElems = null ; boolean done ; String line = getNextLine ( ) ; Matcher matcher = COMMAND_LINE . matcher ( line ) ; String command ; String rest ; if ( matcher . find ( ) ) { command = matcher . group ( COMMAND_NAME_GROUP ) ; rest = line . substring ( matcher . end ( ) ) ; done = _BOOL ; } else { error ( _STR ) ; done = _BOOL ; command = null ; rest = null ; } while ( ! done ) { switch ( command ) { case END_COMMAND : checkHeaderEmpty ( command , rest ) ; done = _BOOL ; break ; case DEFAULT_COMMAND : checkHeaderEmpty ( command , rest ) ; if ( defaultElems != null ) { error ( _STR ) ; } defaultElems = parseUntil ( indent , layout , END_COMMAND ) ; command = lastTerminator ; rest = lastTerminatorHeader ; done = lastTerminator == null ; break ; case CASE_COMMAND : tokens = new TokenStream ( rest ) ; Elem value = parseExpr ( tokens ) ; tokens . checkAtEnd ( ) ; List < Elem > caseElems = parseUntil ( indent , layout , END_COMMAND , CASE_COMMAND , DEFAULT_COMMAND ) ; if ( value != null ) { cases . add ( Case . create ( value , caseElems ) ) ; } command = lastTerminator ; rest = lastTerminatorHeader ; done = lastTerminator == null ; break ; default : unexpectedCommandError ( command ) ; done = _BOOL ; break ; } } if ( selector != null ) { elems . add ( Block . create ( ! firstContent , Switch . create ( input . location ( ) , selector , cases . build ( ) , defaultElems ) ) ) ; } }
public void init ( String prefix , java . net . URL url ) { try { java . io . InputStream in = url . openStream ( ) ; Properties props = new Properties ( ) ; props . load ( in ) ; init ( getLayers ( prefix , props ) ) ; } catch ( java . net . MalformedURLException murle ) { logger . warning ( _STR + url + _STR ) ; } catch ( java . io . IOException e ) { logger . warning ( _STR ) ; } }
boolean suppressedBy ( DNSIncoming msg ) { try { for ( DNSRecord answer : msg . getAllAnswers ( ) ) { if ( suppressedBy ( answer ) ) { return _BOOL ; } } return _BOOL ; } catch ( ArrayIndexOutOfBoundsException e ) { logger . log ( Level . WARNING , _STR + msg + _STR , e ) ; return _BOOL ; } }
public static Properties createProperties ( final Map < String , String > map ) { Properties properties = new Properties ( ) ; if ( ! ( map == null || map . isEmpty ( ) ) ) { for ( Entry < String , String > entry : map . entrySet ( ) ) { properties . setProperty ( entry . getKey ( ) , entry . getValue ( ) ) ; } } return properties ; }
public Node selectFirst ( String query ) { List < Node > selectedNodes = select ( query ) ; if ( selectedNodes . isEmpty ( ) ) { return null ; } return selectedNodes . get ( _NUM ) ; }
public static String [ ] stringArrayFromProperties ( Properties p , String propName , String tok ) { String [ ] ret = null ; String raw = p . getProperty ( propName ) ; if ( raw != null && raw . length ( ) > _NUM ) { try { StringTokenizer token = new StringTokenizer ( raw , tok ) ; int numPaths = token . countTokens ( ) ; ret = new String [ numPaths ] ; for ( int i = _NUM ; i < numPaths ; i ++ ) { ret [ i ] = token . nextToken ( ) ; } return ret ; } catch ( java . util . NoSuchElementException e ) { e . printStackTrace ( ) ; } } return ret ; }
public void generate ( int x1 , int y1 , int x2 , int y2 ) { Point midPoint = new Point ( ) ; Point arcCenter = new Point ( ) ; Point2D peakPoint = new Point2D . Float ( ) ; double distance = Math . sqrt ( Math . pow ( Math . abs ( y2 - y1 ) , _NUM ) + Math . pow ( Math . abs ( x2 - x1 ) , _NUM ) ) ; double straightLineSlope = Math . atan ( ( double ) ( y2 - y1 ) / ( double ) ( x2 - x1 ) ) ; double inverseSlope = straightLineSlope - ( Math . PI / _NUM ) ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + Math . toDegrees ( straightLineSlope ) + _STR + distance + _STR ) ; } midPoint . setLocation ( x1 + ( ( x2 - x1 ) / _NUM ) , y1 + ( ( y2 - y1 ) / _NUM ) ) ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + x1 + _STR + y1 + _STR + x2 + _STR + y2 + _STR + midPoint . x + _STR + midPoint . y + _STR ) ; } double arccos = Math . cos ( arcAngle ) ; double arcRadius ; if ( arccos != _NUM ) { arcRadius = distance / Math . sqrt ( _NUM * ( _NUM - Math . cos ( arcAngle ) ) ) ; } else { arcRadius = distance / Math . sqrt ( _NUM ) ; } if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + arcRadius ) ; } double x = arcRadius - arcRadius * Math . cos ( arcAngle ) ; double rPrime = ( distance / _NUM ) * ( Math . sqrt ( _NUM - Math . pow ( x / distance , _NUM ) ) ) / Math . sin ( arcAngle / _NUM ) ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + rPrime ) ; } int direction = _NUM ; if ( arcUp ) direction = - _NUM ; arcCenter . x = midPoint . x + ( direction * ( int ) ( rPrime * Math . cos ( inverseSlope ) ) ) ; arcCenter . y = midPoint . y + ( direction * ( int ) ( rPrime * Math . sin ( inverseSlope ) ) ) ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR ) ; arcGraphics = new OMGraphicList ( ) ; double dist1 = Math . sqrt ( Math . pow ( ( double ) ( arcCenter . x - x1 ) , _NUM ) + Math . pow ( ( double ) ( arcCenter . y - y1 ) , _NUM ) ) ; double dist2 = Math . sqrt ( Math . pow ( ( double ) ( arcCenter . x - x2 ) , _NUM ) + Math . pow ( ( double ) ( arcCenter . y - y2 ) , _NUM ) ) ; Debug . output ( _STR + arcCenter . x + _STR + arcCenter . y + _STR + Math . toDegrees ( inverseSlope ) + _STR ) ; Debug . output ( _STR + dist1 + _STR + dist2 ) ; OMRect point1 = new OMRect ( x1 - _NUM , y1 - _NUM , x1 + _NUM , y1 + _NUM ) ; OMRect point2 = new OMRect ( x2 - _NUM , y2 - _NUM , x2 + _NUM , y2 + _NUM ) ; OMRect arcPoint = new OMRect ( arcCenter . x - _NUM , arcCenter . y - _NUM , arcCenter . x + _NUM , arcCenter . y + _NUM ) ; point1 . setLinePaint ( OMColor . red ) ; point2 . setLinePaint ( OMColor . red ) ; arcPoint . setLinePaint ( OMColor . blue ) ; arcGraphics . add ( point1 ) ; arcGraphics . add ( point2 ) ; arcGraphics . add ( arcPoint ) ; OMLine line1 = new OMLine ( x1 , y1 , x2 , y2 ) ; OMLine line2 = new OMLine ( midPoint . x , midPoint . y , arcCenter . x , arcCenter . y ) ; arcGraphics . add ( line1 ) ; arcGraphics . add ( line2 ) ; } int realCount = _NUM ; double startSlope = getRealAngle ( ( float ) arcCenter . getX ( ) , ( float ) arcCenter . getY ( ) , x1 , y1 ) ; double endSlope = getRealAngle ( ( float ) arcCenter . getX ( ) , ( float ) arcCenter . getY ( ) , x2 , y2 ) ; double smallSlope , largeSlope ; double angleIncrement ; smallSlope = ( startSlope > endSlope ) ? endSlope : startSlope ; largeSlope = ( smallSlope == startSlope ) ? endSlope : startSlope ; while ( Math . abs ( smallSlope - largeSlope ) > Math . PI ) { if ( Math . abs ( largeSlope - smallSlope - Math . PI ) < _NUM ) { break ; } Debug . message ( _STR , _STR ) ; double tmpSlope = smallSlope + MoreMath . TWO_PI ; smallSlope = largeSlope ; largeSlope = tmpSlope ; } if ( MoreMath . approximately_equal ( arcAngle , Math . PI ) && arcUp ) { Debug . message ( _STR , _STR ) ; double tmpSlope = smallSlope + MoreMath . TWO_PI ; smallSlope = largeSlope ; largeSlope = tmpSlope ; } if ( Math . abs ( y2 - y1 ) < Math . abs ( x2 - x1 ) ) { angleIncrement = Math . PI / Math . abs ( x2 - x1 ) ; } else { angleIncrement = Math . PI / Math . abs ( y2 - y1 ) ; } int numPoints = ( int ) ( Math . abs ( smallSlope - largeSlope ) / angleIncrement + _NUM ) ; float [ ] xPoints = new float [ numPoints ] ; float [ ] yPoints = new float [ numPoints ] ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + startSlope + _STR + Math . toDegrees ( startSlope ) + _STR + endSlope + _STR + Math . toDegrees ( endSlope ) + _STR ) ; Debug . output ( _STR + smallSlope + _STR + Math . toDegrees ( smallSlope ) + _STR + largeSlope + _STR + Math . toDegrees ( largeSlope ) + _STR + angleIncrement + _STR + Math . toDegrees ( angleIncrement ) + _STR ) ; } reversed = _BOOL ; while ( smallSlope < largeSlope && realCount < numPoints ) { xPoints [ realCount ] = arcCenter . x + ( int ) ( arcRadius * Math . cos ( smallSlope ) ) ; yPoints [ realCount ] = arcCenter . y + ( int ) ( arcRadius * Math . sin ( smallSlope ) ) ; if ( realCount == _NUM && xPoints [ realCount ] == x2 ) { Debug . message ( _STR , _STR ) ; reversed = _BOOL ; } if ( Debug . debugging ( _STR ) && realCount == _NUM ) { OMLine startLine = new OMLine ( arcCenter . x , arcCenter . y , ( int ) xPoints [ _NUM ] , ( int ) yPoints [ _NUM ] ) ; startLine . setLinePaint ( OMColor . white ) ; arcGraphics . add ( startLine ) ; } else if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + smallSlope + _STR + smallSlope * _NUM / Math . PI + _STR + xPoints [ realCount ] + _STR + yPoints [ realCount ] ) ; } if ( Math . abs ( largeSlope - smallSlope - ( arcAngle / _NUM ) ) < angleIncrement ) { peakPoint . setLocation ( xPoints [ realCount ] , yPoints [ realCount ] ) ; Debug . message ( _STR , _STR ) ; } smallSlope += angleIncrement ; realCount ++ ; } xpoints = new float [ realCount ] ; ypoints = new float [ realCount ] ; System . arraycopy ( xPoints , _NUM , xpoints , _NUM , realCount ) ; System . arraycopy ( yPoints , _NUM , ypoints , _NUM , realCount ) ; }
private static int compareLocales ( Locale primary , Locale other ) { final String lang = primary . getLanguage ( ) ; if ( ( lang == null ) || ! lang . equals ( other . getLanguage ( ) ) ) { return _NUM ; } final String country = primary . getCountry ( ) ; if ( ( country == null ) || ! country . equals ( other . getCountry ( ) ) ) { return _NUM ; } final String variant = primary . getVariant ( ) ; if ( ( variant == null ) || ! variant . equals ( other . getVariant ( ) ) ) { return _NUM ; } return _NUM ; }
void queryReadResult ( PreparedStatement prep ) throws SQLException { ResultSet rs = prep . executeQuery ( ) ; ResultSetMetaData meta = rs . getMetaData ( ) ; int columnCount = meta . getColumnCount ( ) ; while ( rs . next ( ) ) { for ( int i = _NUM ; i < columnCount ; i ++ ) { rs . getString ( i + _NUM ) ; } } }
public static < V > boolean addDistinctEntry ( List < V > sourceList , V entry ) { return ( sourceList != null && ! sourceList . contains ( entry ) ) ? sourceList . add ( entry ) : _BOOL ; }
public boolean equals ( Object obj ) { if ( obj instanceof MSort ) { MSort ms = ( MSort ) obj ; if ( data == ms . data ) return _BOOL ; } return _BOOL ; }
public static void endTransaction ( final CConnection connection ) throws SQLException { endTransaction ( connection . getConnection ( ) ) ; }
public CCrossReferencesPanel ( ) { super ( new BorderLayout ( ) ) ; m_table . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; add ( new JScrollPane ( m_table ) ) ; m_table . addMouseListener ( new InternalMouseListener ( ) ) ; }
private void doubleCapacity ( ) { int p = head ; int n = elements . length ; int r = n - p ; int newCapacity = n << _NUM ; if ( newCapacity < _NUM ) throw new IllegalStateException ( _STR ) ; Object [ ] a = new Object [ newCapacity ] ; System . arraycopy ( elements , p , a , _NUM , r ) ; System . arraycopy ( elements , _NUM , a , r , p ) ; elements = a ; head = _NUM ; tail = n ; }
private void changeOpenAMDebugFolder ( String newOpenAMDebugFolder ) { SystemPropertiesManager . initializeProperties ( DebugConstants . CONFIG_DEBUG_DIRECTORY , newOpenAMDebugFolder ) ; }
protected String computeFullUrl ( URL baseUrl , String link ) { if ( link == null || link . length ( ) == _NUM ) { return null ; } if ( ! link . startsWith ( _STR ) ) { if ( link . startsWith ( _STR ) ) { link = baseUrl . getProtocol ( ) + _STR + baseUrl . getAuthority ( ) + link ; } else { if ( link . contains ( _STR ) ) { return null ; } String path = baseUrl . getPath ( ) ; if ( ! path . endsWith ( _STR ) ) { int sep = path . lastIndexOf ( _STR ) ; String file = path . substring ( sep + _NUM ) ; if ( file . contains ( _STR ) || file . contains ( _STR ) ) path = path . substring ( _NUM , sep ) ; } link = baseUrl . getProtocol ( ) + _STR + baseUrl . getAuthority ( ) + path + _STR + link ; } } link = normalizeUrlEnding ( link ) ; String l = link . toLowerCase ( Locale . ROOT ) ; if ( l . endsWith ( _STR ) || l . endsWith ( _STR ) || l . endsWith ( _STR ) || l . endsWith ( _STR ) ) { return null ; } return link ; }
private void loadManifest ( ) { if ( _isManifestRead ) return ; synchronized ( this ) { if ( _isManifestRead ) return ; try { _manifest = _jarPath . getManifest ( ) ; if ( _manifest == null ) return ; Attributes attr = _manifest . getMainAttributes ( ) ; if ( attr != null ) addManifestPackage ( _STR , attr ) ; Map < String , Attributes > entries = _manifest . getEntries ( ) ; for ( Map . Entry < String , Attributes > entry : entries . entrySet ( ) ) { String pkg = entry . getKey ( ) ; attr = entry . getValue ( ) ; if ( attr == null ) continue ; addManifestPackage ( pkg , attr ) ; } } catch ( IOException e ) { log . log ( Level . WARNING , e . toString ( ) , e ) ; } finally { _isManifestRead = _BOOL ; } } }
public ReferenceBinding [ ] convertToRawTypes ( ReferenceBinding [ ] originalTypes , boolean forceErasure , boolean forceRawEnclosingType ) { if ( originalTypes == null ) return null ; ReferenceBinding [ ] convertedTypes = originalTypes ; for ( int i = _NUM , length = originalTypes . length ; i < length ; i ++ ) { ReferenceBinding originalType = originalTypes [ i ] ; ReferenceBinding convertedType = ( ReferenceBinding ) convertToRawType ( forceErasure ? originalType . erasure ( ) : originalType , forceRawEnclosingType ) ; if ( convertedType != originalType ) { if ( convertedTypes == originalTypes ) { System . arraycopy ( originalTypes , _NUM , convertedTypes = new ReferenceBinding [ length ] , _NUM , i ) ; } convertedTypes [ i ] = convertedType ; } else if ( convertedTypes != originalTypes ) { convertedTypes [ i ] = originalType ; } } return convertedTypes ; }
public void addColumn ( int idx , Column column ) { if ( column != null ) { columns . add ( idx , column ) ; } }
public void readData ( DataInput din ) throws IOException { reference = din . readUnsignedShort ( ) ; andMask = din . readUnsignedShort ( ) ; orMask = din . readUnsignedShort ( ) ; }
boolean removeDisplay ( Display display ) { return m_displays . remove ( display ) ; }
public double nextGaussian ( ) { if ( mHaveNextNextGaussian ) { mHaveNextNextGaussian = _BOOL ; return mNextNextGaussian ; } else { double v1 , v2 , s ; do { v1 = _NUM * nextDouble ( ) - _NUM ; v2 = _NUM * nextDouble ( ) - _NUM ; s = v1 * v1 + v2 * v2 ; } while ( s >= _NUM || s == _NUM ) ; final double multiplier = StrictMath . sqrt ( - _NUM * StrictMath . log ( s ) / s ) ; mNextNextGaussian = v2 * multiplier ; mHaveNextNextGaussian = _BOOL ; return v1 * multiplier ; } }
private void fireEvent ( final IRunningQuery q ) { if ( q == null ) throw new IllegalArgumentException ( ) ; if ( listeners . isEmpty ( ) ) { return ; } final IRunningQueryListener [ ] a = listeners . toArray ( new IRunningQueryListener [ _NUM ] ) ; for ( IRunningQueryListener l : a ) { final IRunningQueryListener listener = l ; try { listener . notify ( q ) ; } catch ( Throwable t ) { if ( InnerCause . isInnerCause ( t , InterruptedException . class ) ) { throw new RuntimeException ( t ) ; } log . error ( t , t ) ; } } }
private void updateContactHeaderPort ( int localPort , SIPMessage message ) { if ( message != null && message . getContactHeader ( ) != null ) { ContactHeader contactHeader = message . getContactHeader ( ) ; Address contactAddress = contactHeader . getAddress ( ) ; contactAddress . setPort ( localPort ) ; } }
public static AndroidHttpClient newInstance ( String userAgent ) { return newInstance ( userAgent , null ) ; }
@ Nullable GridCacheMvccCandidate addEntry ( GridLocalCacheEntry entry ) throws GridCacheEntryRemovedException { GridCacheMvccCandidate c = entry . addLocal ( threadId , lockVer , null , null , timeout , ! inTx ( ) , inTx ( ) , implicitSingle ( ) , _BOOL ) ; entries . add ( entry ) ; if ( c == null && timeout < _NUM ) { if ( log . isDebugEnabled ( ) ) log . debug ( _STR + entry ) ; onFailed ( ) ; return null ; } if ( c != null ) { entry . readyLocal ( c ) ; } return c ; }
@ Override public void visitVertex ( StreetRouter . State state ) { Integer edgeIdx = state . backEdge ; if ( ! ( edgeIdx == null || edgeIdx == - _NUM ) ) { EdgeStore . Edge edge = edgeStore . getCursor ( edgeIdx ) ; GeoJsonFeature feature = new GeoJsonFeature ( edge . getGeometry ( ) ) ; feature . addProperty ( _STR , state . weight ) ; feature . addProperty ( _STR , state . streetMode ) ; feature . addProperty ( _STR , state . backEdge ) ; features . add ( feature ) ; } }
public void test_BSBM_Q1_noSolutions ( ) throws Exception { final TestHelper helper = new TestHelper ( _STR , _STR , new String [ ] { } , _STR ) ; assertSameJoinOrder ( new int [ ] { _NUM , _NUM , _NUM , _NUM , _NUM } , helper ) ; }
public static void deleteFileOrLog ( File file ) { if ( ! file . delete ( ) ) { logger . warn ( FAILED_DELETING_FILE + file . getPath ( ) ) ; } }
public synchronized void remove ( int index ) { super . remove ( index ) ; mMaxValues . remove ( index ) ; }
public GitlabGroupMember addGroupMember ( GitlabGroup group , GitlabUser user , GitlabAccessLevel accessLevel ) throws IOException { return addGroupMember ( group . getId ( ) , user . getId ( ) , accessLevel ) ; }
protected Logger ( String name , String resourceBundleName ) { super ( name , resourceBundleName ) ; }
@ Override public void increment ( double coord , short val ) { int bin = getBinNr ( coord ) ; if ( bin < _NUM ) { if ( size - bin > data . length ) { short [ ] tmpdata = new short [ growSize ( data . length , size - bin ) ] ; System . arraycopy ( data , _NUM , tmpdata , - bin , size ) ; data = tmpdata ; } else { System . arraycopy ( data , _NUM , data , - bin , size ) ; Arrays . fill ( data , _NUM , - bin , ( short ) _NUM ) ; } data [ _NUM ] = val ; assert ( data . length >= size - bin ) ; offset -= bin ; size -= bin ; } else if ( bin >= data . length ) { short [ ] tmpdata = new short [ growSize ( data . length , bin + _NUM ) ] ; System . arraycopy ( data , _NUM , tmpdata , _NUM , size ) ; tmpdata [ bin ] = val ; data = tmpdata ; size = bin + _NUM ; max = Double . MAX_VALUE ; } else { if ( bin >= size ) { size = bin + _NUM ; } data [ bin ] += val ; } }
public static void checkArgument ( boolean expression , Object errorMessage ) { if ( ! expression ) { throw new IllegalArgumentException ( String . valueOf ( errorMessage ) ) ; } }
default Document putAll ( Map < ? extends CharSequence , Object > fields ) { if ( fields != null ) { for ( Map . Entry < ? extends CharSequence , Object > entry : fields . entrySet ( ) ) { set ( entry . getKey ( ) , entry . getValue ( ) ) ; } } return this ; }
private boolean containsIgnoreCase ( List < String > stringlist , String match ) { for ( String s : stringlist ) { if ( s . equalsIgnoreCase ( match ) ) { return _BOOL ; } } return _BOOL ; }
public static double computeMAD ( double [ ] x , double median ) { for ( int i = _NUM ; i < x . length ; i ++ ) { x [ i ] = Math . abs ( x [ i ] - median ) ; } double mad = QuickSelect . median ( x ) ; if ( ! ( mad > _NUM ) ) { double min = Double . POSITIVE_INFINITY ; for ( double xi : x ) { if ( xi > _NUM && xi < min ) { min = xi ; } } if ( min < Double . POSITIVE_INFINITY ) { mad = min ; } else { mad = _NUM ; } } return mad ; }
private static < T > void initializeKnownPlugins ( final T pluginInterface , final IPluginRegistry < IPlugin < T > > registry , final List < PluginConfigItem > xmlPluginOrder , final List < Pair < IPlugin < T > , PluginStatus > > validatedPlugins , final List < Pair < IPlugin < T > , Exception > > initializedPlugins , final Set < Long > processedPlugins ) { for ( final PluginConfigItem pt : xmlPluginOrder ) { processedPlugins . add ( pt . getGUID ( ) ) ; final IPlugin < T > plugin = findPlugin ( validatedPlugins , pt . getGUID ( ) ) ; if ( plugin != null ) { if ( pt . isLoad ( ) ) { initializePlugin ( plugin , pluginInterface , registry , initializedPlugins ) ; } else { registry . addDisabledPlugin ( plugin , DisabledPluginReason . NotLoaded ) ; } } } }
public static void sessionStop ( ) { if ( mProcess == null ) return ; mProcess . destroy ( ) ; mProcess = null ; }
public static void keepAlive ( final boolean keepAlive ) { setProperty ( _STR , Boolean . toString ( keepAlive ) ) ; }
public static Request newUploadVideoRequest ( Session session , File file , Callback callback ) throws FileNotFoundException { ParcelFileDescriptor descriptor = ParcelFileDescriptor . open ( file , ParcelFileDescriptor . MODE_READ_ONLY ) ; Bundle parameters = new Bundle ( _NUM ) ; parameters . putParcelable ( file . getName ( ) , descriptor ) ; return new Request ( session , MY_VIDEOS , parameters , HttpMethod . POST , callback ) ; }
private static byte [ ] readCheckedBytes ( byte [ ] buffer , int dataSize ) throws InvalidProtocolBufferNanoException { CheckedMessage wrapper = new CheckedMessage ( ) ; MessageNano . mergeFrom ( wrapper , buffer , _NUM , dataSize ) ; CRC32 checksum = new CRC32 ( ) ; checksum . update ( wrapper . payload ) ; if ( wrapper . checksum != checksum . getValue ( ) ) { throw new InvalidProtocolBufferNanoException ( _STR ) ; } return wrapper . payload ; }
private MulticastSocket createSocket ( ) throws IOException { MulticastSocket sock = new MulticastSocket ( mcastPort ) ; sock . setLoopbackMode ( _BOOL ) ; if ( sockItf != null ) sock . setInterface ( sockItf ) ; if ( sock . getLoopbackMode ( ) ) U . warn ( log , _STR + _STR ) ; sock . joinGroup ( mcastGrp ) ; if ( ttl != - _NUM ) sock . setTimeToLive ( ttl ) ; return sock ; }
void copyNodeStructure ( ArrayList < Node > destination ) { while ( destination . size ( ) < nodes . size ( ) ) destination . add ( new Node ( ) ) ; while ( destination . size ( ) > nodes . size ( ) ) destination . remove ( _NUM ) ; int n = nodes . size ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { Node node0 = nodes . get ( i ) ; Node node1 = destination . get ( i ) ; node1 . heightParameter = node0 . heightParameter ; node1 . rateParameter = node0 . rateParameter ; node1 . traitParameter = node0 . traitParameter ; node1 . partitioning = node0 . partitioning ; node1 . taxon = node0 . taxon ; node1 . bifurcation = node0 . bifurcation ; node1 . number = node0 . number ; node1 . myHashCode = node0 . myHashCode ; if ( node0 . leftParent != null ) { node1 . leftParent = storedNodes . get ( nodes . indexOf ( node0 . leftParent ) ) ; } else { node1 . leftParent = null ; } if ( node0 . rightParent != null ) { node1 . rightParent = storedNodes . get ( nodes . indexOf ( node0 . rightParent ) ) ; } else { node1 . rightParent = null ; } if ( node0 . leftChild != null ) { node1 . leftChild = storedNodes . get ( nodes . indexOf ( node0 . leftChild ) ) ; } else { node1 . leftChild = null ; } if ( node0 . rightChild != null ) { node1 . rightChild = storedNodes . get ( nodes . indexOf ( node0 . rightChild ) ) ; } else { node1 . rightChild = null ; } } }
protected void checkSelectedSubsetMetaData ( ExampleSetMetaData subsetMetaData ) { }
private void validateWill ( String dest , Object payload ) { if ( ( dest == null ) || ( payload == null ) ) { throw new IllegalArgumentException ( ) ; } MqttTopic . validate ( dest , _BOOL ) ; }
public BerInputStream ( InputStream in , int initialSize ) throws IOException { this . in = in ; buffer = new byte [ initialSize ] ; next ( ) ; if ( length != INDEFINIT_LENGTH ) { if ( buffer . length < ( length + offset ) ) { byte [ ] newBuffer = new byte [ length + offset ] ; System . arraycopy ( buffer , _NUM , newBuffer , _NUM , offset ) ; buffer = newBuffer ; } } else { isIndefinedLength = _BOOL ; throw new ASN1Exception ( _STR ) ; } }
private Member nextMember ( Member . Type type ) { return new TestMember ( type , new Address ( _STR , ++ port ) , new Address ( _STR , port + _NUM ) ) ; }
protected void encodeLineSuffix ( OutputStream aStream ) throws IOException { pStream . println ( ) ; }
boolean isSystemFont ( ) { return systemFont ; }
public void addToBeLoaded ( final String url ) { if ( toBeLoaded == null ) { toBeLoaded = new ArrayList < String > ( ) ; } if ( StringUtils . isNotBlank ( url ) ) { toBeLoaded . add ( url ) ; } }
default Document putAll ( Iterator < Field > fields ) { while ( fields . hasNext ( ) ) { Field field = fields . next ( ) ; setValue ( field . getName ( ) , field . getValue ( ) ) ; } return this ; }
public AppraiseGitReviewClient ( Repository repo ) { this . repo = repo ; this . author = new PersonIdent ( repo ) ; }
public RootBlockView ( final boolean rootBlock0 , final ByteBuffer buf , final ChecksumUtility checker ) throws RootBlockException { if ( buf == null ) throw new IllegalArgumentException ( ) ; if ( buf . remaining ( ) != SIZEOF_ROOT_BLOCK ) { throw new IllegalArgumentException ( _STR + SIZEOF_ROOT_BLOCK + _STR + buf . remaining ( ) ) ; } this . buf = buf . asReadOnlyBuffer ( ) ; this . rootBlock0 = rootBlock0 ; switch ( getStoreType ( ) ) { case RW : { am = new RWAddressManager ( null ) ; break ; } case WORM : { final int offsetBits = getOffsetBits ( ) ; am = new WormAddressManager ( offsetBits ) ; break ; } default : throw new RootBlockException ( _STR + getStoreType ( ) ) ; } if ( checker == null ) { log . warn ( _STR ) ; } this . checker = checker ; valid ( ) ; }
protected SOAPRequest createSOAPRequest ( final String methodName , final SOAPMethodRequestWriter requestWriter ) { final PostMethod method = new PostMethod ( endpoint . toString ( ) ) ; method . setContentChunked ( _BOOL ) ; setRequestHeaders ( method , methodName ) ; final SOAPRequestEntity requestEntity = buildRequestEntity ( methodName , requestWriter ) ; requestEntity . setSOAPHeaderProvider ( soapHeaderProvider ) ; final BufferedSOAPRequestEntity bufferedEntity = new BufferedSOAPRequestEntity ( requestEntity ) ; method . setRequestEntity ( bufferedEntity ) ; return new SOAPRequest ( method , requestEntity ) ; }
@ SuppressWarnings ( _STR ) @ Test public void innerEnum ( ) { Class < ? > pc = PlayingCard . class ; List < Enum < ? > > include = new ArrayList < > ( ) ; List < Enum < ? > > exclude = new ArrayList < > ( ) ; for ( Class < ? > c : pc . getDeclaredClasses ( ) ) { int mods = c . getModifiers ( ) ; if ( c . isEnum ( ) ) { if ( Modifier . isPublic ( mods ) ) { include . addAll ( asList ( c . getEnumConstants ( ) ) ) ; } else { exclude . addAll ( asList ( c . getEnumConstants ( ) ) ) ; } } } Set < TypedOperation > actual = getConcreteOperations ( pc ) ; assertEquals ( _STR , include . size ( ) + _NUM , actual . size ( ) ) ; for ( Enum < ? > e : include ) { assertTrue ( _STR + e . name ( ) + _STR , actual . contains ( createEnumOperation ( e ) ) ) ; } for ( Enum < ? > e : exclude ) { assertFalse ( _STR + e . name ( ) + _STR , actual . contains ( createEnumOperation ( e ) ) ) ; } }
public String toURI ( ) { CharArrayBuffer buffer = new CharArrayBuffer ( _NUM ) ; buffer . append ( this . schemeName ) ; buffer . append ( _STR ) ; buffer . append ( this . hostname ) ; if ( this . port != - _NUM ) { buffer . append ( _STR ) ; buffer . append ( Integer . toString ( this . port ) ) ; } return buffer . toString ( ) ; }
public void testWildcardsDoesNotNeedTwoDots ( ) throws Exception { String cert = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR ; CertificateFactory cf = CertificateFactory . getInstance ( _STR ) ; InputStream in = new ByteArrayInputStream ( cert . getBytes ( _STR ) ) ; X509Certificate x509 = ( X509Certificate ) cf . generateCertificate ( in ) ; mySSLSession session = new mySSLSession ( new X509Certificate [ ] { x509 } ) ; HostnameVerifier verifier = HttpsURLConnection . getDefaultHostnameVerifier ( ) ; assertTrue ( verifier . verify ( _STR , session ) ) ; }
public static boolean inTargetDir ( File file ) { return inTargetDir ( file . toPath ( ) ) ; }
public final boolean skipAny ( char c , CharSequence csq ) { int i = index ; int n = csq . length ( ) ; for ( ; ( i < n ) && ( csq . charAt ( i ) == c ) ; i ++ ) { } if ( i == index ) return _BOOL ; index = i ; return _BOOL ; }
private void generateUniformIntegerExamples ( Instances format , int numInstances , SubspaceClusterDefinition cl , String cName ) { Instance example = null ; int numAtts = m_NumAttributes ; if ( getClassFlag ( ) ) { numAtts ++ ; } example = new DenseInstance ( numAtts ) ; example . setDataset ( format ) ; boolean [ ] attributes = cl . getAttributes ( ) ; double [ ] minValue = cl . getMinValue ( ) ; double [ ] maxValue = cl . getMaxValue ( ) ; int [ ] minInt = new int [ minValue . length ] ; int [ ] maxInt = new int [ maxValue . length ] ; int [ ] intValue = new int [ maxValue . length ] ; int [ ] numInt = new int [ minValue . length ] ; int num = _NUM ; for ( int i = _NUM ; i < minValue . length ; i ++ ) { minInt [ i ] = ( int ) Math . ceil ( minValue [ i ] ) ; maxInt [ i ] = ( int ) Math . floor ( maxValue [ i ] ) ; numInt [ i ] = ( maxInt [ i ] - minInt [ i ] + _NUM ) ; num = num * numInt [ i ] ; } int numEach = numInstances / num ; int rest = numInstances - numEach * num ; for ( int i = _NUM ; i < m_NumAttributes ; i ++ ) { if ( attributes [ i ] ) { example . setValue ( i , minInt [ i ] ) ; intValue [ i ] = minInt [ i ] ; } else { example . setMissing ( i ) ; } } if ( getClassFlag ( ) ) { example . setClassValue ( cName ) ; } int added = _NUM ; int attr = _NUM ; do { for ( int k = _NUM ; k < numEach ; k ++ ) { format . add ( example ) ; example = ( Instance ) example . copy ( ) ; added ++ ; } if ( rest > _NUM ) { format . add ( example ) ; example = ( Instance ) example . copy ( ) ; added ++ ; rest -- ; } if ( added >= numInstances ) { break ; } boolean done = _BOOL ; do { if ( attributes [ attr ] && ( intValue [ attr ] + _NUM <= maxInt [ attr ] ) ) { intValue [ attr ] ++ ; done = _BOOL ; } else { attr ++ ; } } while ( ! done ) ; example . setValue ( attr , intValue [ attr ] ) ; } while ( added < numInstances ) ; }
public synchronized boolean removeAll ( Collection c ) { Object [ ] elements = getArray ( ) ; int len = elements . length ; if ( len != _NUM ) { int newlen = _NUM ; Object [ ] temp = new Object [ len ] ; for ( int i = _NUM ; i < len ; ++ i ) { Object element = elements [ i ] ; if ( ! c . contains ( element ) ) temp [ newlen ++ ] = element ; } if ( newlen != len ) { setArray ( copyOfRange ( temp , _NUM , newlen , Object [ ] . class ) ) ; return _BOOL ; } } return _BOOL ; }
private final boolean compareAndSetTail ( Node expect , Node update ) { return unsafe . compareAndSwapObject ( this , tailOffset , expect , update ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public Phone createPhone ( String value ) { PhoneField phoneImpl = new PhoneField ( ) ; try { phoneImpl . setValue ( value ) ; } catch ( SdpException s ) { s . printStackTrace ( ) ; } return phoneImpl ; }
private ListResourceBundle loadResourceBundle ( String resourceBundle ) throws MissingResourceException { m_resourceBundleName = resourceBundle ; Locale locale = getLocale ( ) ; ListResourceBundle lrb ; try { ResourceBundle rb = ResourceBundle . getBundle ( m_resourceBundleName , locale ) ; lrb = ( ListResourceBundle ) rb ; } catch ( MissingResourceException e ) { try { lrb = ( ListResourceBundle ) ResourceBundle . getBundle ( m_resourceBundleName , new Locale ( _STR , _STR ) ) ; } catch ( MissingResourceException e2 ) { throw new MissingResourceException ( _STR + m_resourceBundleName , m_resourceBundleName , _STR ) ; } } m_resourceBundle = lrb ; return lrb ; }
private Set < String > returnRemotePoolsAssociatedWithRemoteCopySettings ( Map < String , List < String > > remoteCopySettings , Set < String > poolUris ) { Set < String > remotePoolUris = new HashSet < String > ( ) ; for ( Entry < String , List < String > > entry : remoteCopySettings . entrySet ( ) ) { VirtualPool vPool = _objectCache . queryObject ( VirtualPool . class , URI . create ( entry . getKey ( ) ) ) ; if ( null == vPool ) { remotePoolUris . addAll ( poolUris ) ; } else if ( null != vPool . getUseMatchedPools ( ) && vPool . getUseMatchedPools ( ) ) { if ( null != vPool . getMatchedStoragePools ( ) ) { remotePoolUris . addAll ( vPool . getMatchedStoragePools ( ) ) ; } } else if ( null != vPool . getAssignedStoragePools ( ) ) { remotePoolUris . addAll ( vPool . getAssignedStoragePools ( ) ) ; } } return remotePoolUris ; }
private String convertToHtml ( final String string ) { return _STR + string . replaceAll ( _STR , _STR ) + _STR ; }
private synchronized void addLock ( FileLock lock ) throws OverlappingFileLockException { long lockEnd = lock . position ( ) + lock . size ( ) ; for ( FileLock existingLock : locks ) { if ( existingLock . position ( ) > lockEnd ) { break ; } if ( existingLock . overlaps ( lock . position ( ) , lock . size ( ) ) ) { throw new OverlappingFileLockException ( ) ; } } locks . add ( lock ) ; }
public static void UF7 ( double [ ] x , double [ ] f , int nx ) { int count1 = _NUM ; int count2 = _NUM ; double sum1 = _NUM ; double sum2 = _NUM ; double yj ; for ( int j = _NUM ; j <= nx ; j ++ ) { yj = x [ j - _NUM ] - Math . sin ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; if ( j % _NUM == _NUM ) { sum2 += yj * yj ; count2 ++ ; } else { sum1 += yj * yj ; count1 ++ ; } } yj = Math . pow ( x [ _NUM ] , _NUM ) ; f [ _NUM ] = yj + _NUM * sum1 / ( double ) count1 ; f [ _NUM ] = _NUM - yj + _NUM * sum2 / ( double ) count2 ; }
private void reloadModelWithNewValue ( final Long newValue ) { final long newValueAsPrimitive = newValue == null ? getModelUpdatePeriod ( ) : newValue ; for ( final PropertyChangeListener listener : modelUpdatePeriodListeners ) { final PropertyChangeEvent event = new PropertyChangeEvent ( this , _STR , getModelUpdatePeriod ( ) , newValueAsPrimitive ) ; listener . propertyChange ( event ) ; } }
public static final String moveToUCIString ( Move m ) { String ret = squareToString ( m . from ) ; ret += squareToString ( m . to ) ; switch ( m . promoteTo ) { case Piece . WQUEEN : case Piece . BQUEEN : ret += _STR ; break ; case Piece . WROOK : case Piece . BROOK : ret += _STR ; break ; case Piece . WBISHOP : case Piece . BBISHOP : ret += _STR ; break ; case Piece . WKNIGHT : case Piece . BKNIGHT : ret += _STR ; break ; default : break ; } return ret ; }
public Image createAcceleratedImage ( Component target , int width , int height ) { ColorModel model = getColorModel ( Transparency . OPAQUE ) ; WritableRaster wr = model . createCompatibleWritableRaster ( width , height ) ; return new OffScreenImage ( target , model , wr , model . isAlphaPremultiplied ( ) ) ; }
public void displayState ( ) { PrintWriter xout = context . get ( Log . outKey ) ; xout . println ( _STR + fileObjectHistory ) ; xout . println ( _STR + openTypeNames ) ; xout . println ( _STR + generatedSourceNames ) ; xout . println ( _STR + generatedClasses . keySet ( ) ) ; xout . println ( _STR + aggregateGeneratedSourceNames ) ; xout . println ( _STR + aggregateGeneratedClassNames ) ; }
public static void writeStringToWriter ( String string , Writer writer ) throws IOException { BufferedWriter bw = new BufferedWriter ( writer ) ; try { bw . write ( string ) ; } finally { bw . close ( ) ; } }
private void ensureCapacity ( int n ) { if ( n <= _NUM ) { return ; } int max ; if ( data == null || data . length == _NUM ) { max = _NUM ; } else if ( data . length >= n * _NUM ) { return ; } else { max = data . length ; } while ( max < n * _NUM ) { max *= _NUM ; } String newData [ ] = new String [ max ] ; if ( length > _NUM ) { System . arraycopy ( data , _NUM , newData , _NUM , length * _NUM ) ; } data = newData ; }
public final void decRef ( ) throws IOException { ensureOpen ( ) ; final int rc = refCount . decrementAndGet ( ) ; if ( rc == _NUM ) { boolean success = _BOOL ; try { doClose ( ) ; closed = _BOOL ; success = _BOOL ; } finally { if ( ! success ) { refCount . incrementAndGet ( ) ; } } } else if ( rc < _NUM ) { throw new IllegalStateException ( _STR + rc + _STR ) ; } }
public static X500Name x500PrincipalToX500Name ( X500Principal principal ) { return X500Name . getInstance ( KseX500NameStyle . INSTANCE , principal . getEncoded ( ) ) ; }
private void assertDescribedResource ( final BigdataValue describedResource , final IDescribeCache describeCache , final TestHelper h ) { final Graph actualGraph = describeCache . lookup ( describedResource . getIV ( ) ) ; assertNotNull ( actualGraph ) ; final Set < Statement > expectedGraph = getExpectedDescription ( describedResource , h ) ; h . compareGraphs ( new HashSet < Statement > ( actualGraph ) , expectedGraph ) ; for ( Statement stmt : actualGraph ) { assertTrue ( stmt instanceof BigdataStatement ) ; final BigdataStatement st = ( BigdataStatement ) stmt ; assertNotNull ( st . s ( ) ) ; assertNotNull ( st . p ( ) ) ; assertNotNull ( st . o ( ) ) ; if ( st . getContext ( ) != null ) { assertNotNull ( st . c ( ) ) ; } } }
public boolean isFlat ( ) { return TYPE_FLAT . equals ( getType ( ) ) ; }
@ Deprecated private List < CharSequence > buildLimitedNetworksList ( ) { final Context context = getActivity ( ) ; final ArrayList < CharSequence > limited = Lists . newArrayList ( ) ; if ( hasSubscription ( context ) ) { final String subscriberId = getActiveSubscriberId ( context ) ; if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateMobileAll ( subscriberId ) ) ) { limited . add ( getText ( R . string . data_usage_list_mobile ) ) ; } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateMobile3gLower ( subscriberId ) ) ) { limited . add ( getText ( R . string . data_usage_tab_3g ) ) ; } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateMobile4g ( subscriberId ) ) ) { limited . add ( getText ( R . string . data_usage_tab_4g ) ) ; } } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateWifiWildcard ( ) ) ) { limited . add ( getText ( R . string . data_usage_tab_wifi ) ) ; } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateEthernet ( ) ) ) { limited . add ( getText ( R . string . data_usage_tab_ethernet ) ) ; } return limited ; }
public int evalRPN ( String [ ] tokens ) { if ( tokens == null || tokens . length == _NUM ) return _NUM ; Stack < String > s = new Stack < String > ( ) ; int len = tokens . length ; for ( int i = _NUM ; i < len ; i ++ ) { String cur = tokens [ i ] ; if ( isOperator ( cur ) ) { int t2 = Integer . parseInt ( s . pop ( ) ) ; int t1 = Integer . parseInt ( s . pop ( ) ) ; int res = calculate ( t1 , t2 , cur ) ; s . push ( Integer . toString ( res ) ) ; } else s . push ( cur ) ; } return Integer . valueOf ( s . peek ( ) ) ; }
public synchronized void addAllSeries ( List < XYSeries > series ) { mSeries . addAll ( series ) ; }
private static void exit ( String errMsg , Options options , int exitCode ) { if ( errMsg != null ) echo ( _STR + errMsg ) ; String runner = System . getProperty ( IGNITE_PROG_NAME , _STR ) ; int space = runner . indexOf ( _STR ) ; runner = runner . substring ( _NUM , space == - _NUM ? runner . length ( ) : space ) ; if ( options != null ) { HelpFormatter formatter = new HelpFormatter ( ) ; formatter . printHelp ( runner , options ) ; } System . exit ( exitCode ) ; }
@ Override public int compare ( NewSplitEmittedTerm term1 , NewSplitEmittedTerm term2 ) { return term1 . compareTo ( term2 ) ; }
public AABB merge ( AABB other ) { minX = Math . min ( minX , other . minX ) ; maxX = Math . max ( maxX , other . maxX ) ; minY = Math . min ( minY , other . minY ) ; maxY = Math . max ( maxY , other . maxY ) ; minZ = Math . min ( minZ , other . minZ ) ; maxZ = Math . max ( maxZ , other . maxZ ) ; return this ; }
public static String generateAutoTag ( int stackOffset ) { StackTraceElement [ ] currentStack = getCurrentStack ( ) ; StackTraceElement element = currentStack [ stackOffset ] ; String className = element . getClassName ( ) ; String pkgPath [ ] = className . split ( _STR ) ; if ( pkgPath . length > _NUM ) { className = pkgPath [ pkgPath . length - _NUM ] ; } StringBuilder sbInnerClass = new StringBuilder ( ) ; int index ; String strLoop = className ; while ( ( index = strLoop . lastIndexOf ( _STR ) ) != - _NUM ) { String piece = strLoop . substring ( index + _NUM ) ; sbInnerClass . insert ( _NUM , piece ) ; if ( ! piece . matches ( _STR ) ) { break ; } sbInnerClass . insert ( _NUM , _STR ) ; strLoop = strLoop . substring ( _NUM , index ) ; } if ( sbInnerClass . length ( ) > _NUM && sbInnerClass . charAt ( _NUM ) == _STR ) { sbInnerClass . deleteCharAt ( _NUM ) ; } String innerClassName = sbInnerClass . toString ( ) ; if ( TextUtils . isDigitsOnly ( innerClassName ) ) { innerClassName = null ; } return TextUtils . isEmpty ( innerClassName ) ? className : innerClassName ; }
public void flushPending ( ) throws SAXException { if ( m_needToCallStartDocument ) { startDocumentInternal ( ) ; m_needToCallStartDocument = _BOOL ; } if ( m_elemContext . m_startTagOpen ) { closeStartTag ( ) ; m_elemContext . m_startTagOpen = _BOOL ; } if ( m_cdataTagOpen ) { closeCDATA ( ) ; m_cdataTagOpen = _BOOL ; } if ( m_writer != null ) { try { m_writer . flush ( ) ; } catch ( IOException e ) { } } }
private void handleSubscribe ( String [ ] args ) { switch ( args [ _NUM ] ) { case _STR : TestSubscriber < Payload > rrsub = new TestSubscriber < > ( _NUM ) ; payloadSubscribers . put ( args [ _NUM ] , rrsub ) ; idToType . put ( args [ _NUM ] , args [ _NUM ] ) ; ReactiveSocket rrclient = createClient . get ( ) ; Publisher < Payload > rrpub = rrclient . requestResponse ( new PayloadImpl ( args [ _NUM ] , args [ _NUM ] ) ) ; rrpub . subscribe ( rrsub ) ; break ; case _STR : TestSubscriber < Payload > rssub = new TestSubscriber < > ( _NUM ) ; payloadSubscribers . put ( args [ _NUM ] , rssub ) ; idToType . put ( args [ _NUM ] , args [ _NUM ] ) ; ReactiveSocket rsclient = createClient . get ( ) ; Publisher < Payload > rspub = rsclient . requestStream ( new PayloadImpl ( args [ _NUM ] , args [ _NUM ] ) ) ; rspub . subscribe ( rssub ) ; break ; case _STR : TestSubscriber < Payload > rsubsub = new TestSubscriber < > ( _NUM ) ; payloadSubscribers . put ( args [ _NUM ] , rsubsub ) ; idToType . put ( args [ _NUM ] , args [ _NUM ] ) ; ReactiveSocket rsubclient = createClient . get ( ) ; Publisher < Payload > rsubpub = rsubclient . requestSubscription ( new PayloadImpl ( args [ _NUM ] , args [ _NUM ] ) ) ; rsubpub . subscribe ( rsubsub ) ; break ; case _STR : TestSubscriber < Void > fnfsub = new TestSubscriber < > ( _NUM ) ; fnfSubscribers . put ( args [ _NUM ] , fnfsub ) ; idToType . put ( args [ _NUM ] , args [ _NUM ] ) ; ReactiveSocket fnfclient = createClient . get ( ) ; Publisher < Void > fnfpub = fnfclient . fireAndForget ( new PayloadImpl ( args [ _NUM ] , args [ _NUM ] ) ) ; fnfpub . subscribe ( fnfsub ) ; break ; default : break ; } }
@ PostConstruct public void init ( ) { configurationViews . add ( defaultDistributionSetTypeLayout ) ; configurationViews . add ( authenticationConfigurationView ) ; configurationViews . add ( pollingConfigurationView ) ; }
public ExtendedType ( int nodetype , String namespace , String localName ) { this . nodetype = nodetype ; this . namespace = namespace ; this . localName = localName ; this . hash = nodetype + namespace . hashCode ( ) + localName . hashCode ( ) ; }
private static void validateNewAddition ( Vector paths , ExpressionOwner owner , LocPathIterator path ) throws RuntimeException { assertion ( owner . getExpression ( ) == path , _STR ) ; int n = paths . size ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { ExpressionOwner ew = ( ExpressionOwner ) paths . elementAt ( i ) ; assertion ( ew != owner , _STR ) ; assertion ( ew . getExpression ( ) != path , _STR ) ; } }
@ Override public void start ( ) { for ( int i = _NUM ; i < threadCount ; ++ i ) { Set < SystemStreamPartition > threadSsps = new HashSet < SystemStreamPartition > ( ) ; for ( SystemStreamPartition ssp : ssps ) { if ( Math . abs ( ssp . hashCode ( ) ) % threadCount == i ) { threadSsps . add ( ssp ) ; } } Thread thread = new Thread ( new MockSystemConsumerRunnable ( threadSsps ) , _STR + i ) ; thread . setDaemon ( _BOOL ) ; threads . add ( thread ) ; thread . start ( ) ; } }
private List < double [ ] > initializeWeightsND ( ) { int N = _NUM ; List < double [ ] > candidates = new ArrayList < double [ ] > ( numberOfPoints * N ) ; for ( int i = _NUM ; i < numberOfPoints * N ; i ++ ) { double [ ] weight = new double [ numberOfObjectives ] ; for ( int j = _NUM ; j < numberOfObjectives ; j ++ ) { weight [ j ] = PRNG . nextDouble ( ) ; } double sum = StatUtils . sum ( weight ) ; for ( int j = _NUM ; j < numberOfObjectives ; j ++ ) { weight [ j ] /= sum ; } candidates . add ( weight ) ; } List < double [ ] > weights = new ArrayList < double [ ] > ( numberOfPoints * N ) ; for ( int i = _NUM ; i < numberOfObjectives ; i ++ ) { double [ ] weight = new double [ numberOfObjectives ] ; weight [ i ] = _NUM ; weights . add ( weight ) ; } while ( weights . size ( ) < numberOfPoints ) { double [ ] weight = null ; double distance = Double . NEGATIVE_INFINITY ; for ( int i = _NUM ; i < candidates . size ( ) ; i ++ ) { double d = Double . POSITIVE_INFINITY ; for ( int j = _NUM ; j < weights . size ( ) ; j ++ ) { d = Math . min ( d , MathArrays . distance ( candidates . get ( i ) , weights . get ( j ) ) ) ; } if ( d > distance ) { weight = candidates . get ( i ) ; distance = d ; } } weights . add ( weight ) ; candidates . remove ( weight ) ; } return weights ; }
public void undo ( ) { try { if ( undoManager != null ) undoManager . undoOrRedo ( ) ; } catch ( CannotUndoException ignored ) { } catch ( CannotRedoException ignored ) { } }
public void removeColumn ( Column column ) { if ( column != null ) { columns . remove ( column ) ; } }
public String info ( ) { StringBuilder sb = new StringBuilder ( _STR + tableSize + _STR + elements + _STR + loadFactor + _STR + threshold ) ; sb . append ( _STR + numEmpty ) ; int size = _NUM ; int min = elements ; int max = - _NUM ; for ( int i = _NUM ; i < tableSize ; i ++ ) { LinkedList < String > list = bins [ i ] ; if ( list != null ) { int sz = list . size ( ) ; size += sz ; if ( sz < min ) { min = sz ; } if ( sz > max ) { max = sz ; } } } float avg = size ; int base = ( tableSize - numEmpty ) ; if ( base == _NUM ) { sb . append ( _STR ) ; sb . append ( _STR ) ; sb . append ( _STR ) ; } else { avg /= base ; sb . append ( _STR + avg ) ; sb . append ( _STR + min ) ; sb . append ( _STR + max ) ; } return sb . toString ( ) ; }
public boolean peekSample ( MediaCodec . BufferInfo out_bufferInfo ) { update ( ) ; boolean result = _BOOL ; if ( ! mAvailableOutputBuffers . isEmpty ( ) ) { int index = mAvailableOutputBuffers . peek ( ) ; MediaCodec . BufferInfo info = mOutputBufferInfo [ index ] ; out_bufferInfo . set ( info . offset , info . size , info . presentationTimeUs , info . flags ) ; result = _BOOL ; } return result ; }
@ Override public AbstractScannedResult scanBlocklet ( BlocksChunkHolder blocksChunkHolder ) throws QueryExecutionException { try { fillScannedResult ( blocksChunkHolder ) ; } catch ( FilterUnsupportedException e ) { throw new QueryExecutionException ( e . getMessage ( ) ) ; } return scannedResult ; }
@ Override public int hashCode ( ) { return subconditions . hashCode ( ) - operator . hashCode ( ) ; }
public void balanceSegments ( ) { MAcctSchemaElement [ ] elements = m_acctSchema . getAcctSchemaElements ( ) ; for ( int i = _NUM ; i < elements . length ; i ++ ) { MAcctSchemaElement ase = elements [ i ] ; if ( ase . isBalanced ( ) ) balanceSegment ( ase . getElementType ( ) ) ; } }
public AnnotationDrawer ( final AnnotationsModel model , final ProcessRendererModel rendererModel ) { this . model = model ; this . rendererModel = rendererModel ; this . displayCache = new HashMap < > ( ) ; this . cachedID = new HashMap < > ( ) ; pane = new JEditorPane ( _STR , _STR ) ; pane . setBorder ( null ) ; pane . setOpaque ( _BOOL ) ; }
public boolean hasUserPartitions ( ) { return ! userOutput . isEmpty ( ) ; }
@ Override public void insertString ( final int offs , final String str , final AttributeSet attr ) { if ( offs < _NUM ) { return ; } if ( str . length ( ) > _NUM ) { int i ; for ( i = _NUM ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == _STR ) { remainingTextString = str . substring ( i + _NUM ) ; remainingTextAttr = attr ; inputKeyListener . keyPressed ( new KeyEvent ( new Container ( ) , KeyEvent . KEY_PRESSED , _NUM , _NUM , KeyEvent . VK_ENTER , _STR ) ) ; break ; } else { insertChar ( offs + i , _STR + str . charAt ( i ) ) ; } } } else if ( str . length ( ) == _NUM ) { insertChar ( offs , str ) ; } }
protected int readCodePoint ( ) throws IOException { int next = reader . read ( ) ; if ( Character . isHighSurrogate ( ( char ) next ) ) { next = Character . toCodePoint ( ( char ) next , ( char ) reader . read ( ) ) ; } return next ; }
public static int putInt ( byte [ ] bytes , int offset , int val ) { if ( littleEndian ) { val = Integer . reverseBytes ( val ) ; } theUnsafe . putInt ( bytes , offset + BYTE_ARRAY_BASE_OFFSET , val ) ; return offset + Bytes . SIZEOF_INT ; }
public Item ( Drawable symbol , String labelText , Font font ) { double fontSize = font . getSize2D ( ) ; setLayout ( new EdgeLayout ( fontSize , _NUM ) ) ; this . symbol = symbol ; add ( symbol , Location . WEST ) ; label = new Label ( labelText ) ; label . setFont ( font ) ; label . setAlignmentX ( _NUM ) ; label . setAlignmentY ( _NUM ) ; add ( label , Location . CENTER ) ; }
void tag ( String tag ) ;
public int consume ( ) { int consumedAmount ; if ( Math . abs ( left ) < Math . abs ( getRegen ( ) ) ) { consumedAmount = left ; left = _NUM ; } else { consumedAmount = getRegen ( ) ; left -= getRegen ( ) ; } return consumedAmount ; }
private Delegate delegate ( ) throws HadoopIgfsCommunicationException { Exception errShmem = null ; Exception errTcp = null ; Delegate curDelegate = delegateRef . get ( ) ; if ( curDelegate != null ) return curDelegate ; boolean skipInProc = parameter ( conf , PARAM_IGFS_ENDPOINT_NO_EMBED , authority , _BOOL ) ; if ( ! skipInProc ) { IgfsEx igfs = getIgfsEx ( endpoint . grid ( ) , endpoint . igfs ( ) ) ; if ( igfs != null ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsInProc ( igfs , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) if ( hadoop != null ) hadoop . close ( _BOOL ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR , e ) ; } } } boolean skipLocShmem = parameter ( conf , PARAM_IGFS_ENDPOINT_NO_LOCAL_SHMEM , authority , _BOOL ) ; if ( curDelegate == null && ! skipLocShmem && ! U . isWindows ( ) ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsOutProc ( endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) hadoop . close ( _BOOL ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + endpoint . port ( ) + _STR , e ) ; errShmem = e ; } } boolean skipLocTcp = parameter ( conf , PARAM_IGFS_ENDPOINT_NO_LOCAL_TCP , authority , _BOOL ) ; if ( curDelegate == null && ! skipLocTcp ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsOutProc ( LOCALHOST , endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) hadoop . close ( _BOOL ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + endpoint . host ( ) + _STR + endpoint . port ( ) + _STR , e ) ; errTcp = e ; } } if ( curDelegate == null && ( skipLocTcp || ! F . eq ( LOCALHOST , endpoint . host ( ) ) ) ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsOutProc ( endpoint . host ( ) , endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) hadoop . close ( _BOOL ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + endpoint . host ( ) + _STR + endpoint . port ( ) + _STR , e ) ; errTcp = e ; } } if ( curDelegate != null ) { if ( ! delegateRef . compareAndSet ( null , curDelegate ) ) curDelegate . doomed = _BOOL ; return curDelegate ; } else { SB errMsg = new SB ( _STR + authority + _STR ) ; if ( errShmem != null ) errMsg . a ( _STR + endpoint . port ( ) + _STR + errShmem + _STR ) ; errMsg . a ( _STR + endpoint . host ( ) + _STR + endpoint . port ( ) + _STR + errTcp + _STR ) ; errMsg . a ( _STR + _STR ) ; throw new HadoopIgfsCommunicationException ( errMsg . toString ( ) ) ; } }
public FromClause add ( OuterJoinQualifier outerJoinQualifier ) { outerJoinQualifiers . add ( outerJoinQualifier ) ; return this ; }
private static final File [ ] encode ( String src ) { if ( src == null || src . length ( ) == _NUM ) { return ( new File [ _NUM ] ) ; } StringTokenizer tokenizer = new StringTokenizer ( src , _STR ) ; File [ ] dirs = new File [ tokenizer . countTokens ( ) ] ; for ( int i = _NUM ; i < dirs . length ; i ++ ) { dirs [ i ] = new File ( tokenizer . nextToken ( ) ) ; } return dirs ; }
private boolean journalRebuildRequired ( ) { final int redundantOpCompactThreshold = _NUM ; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries . size ( ) ; }
public E poll ( long timeout , TimeUnit unit ) throws InterruptedException { long nanos = unit . toNanos ( timeout ) ; final ReentrantLock lock = this . lock ; lock . lockInterruptibly ( ) ; long t = now ( ) ; TenantQueue . Item item = null ; try { for ( ; ; ) { TenantQueue q = nextQueue ( t ) ; if ( q == null ) { if ( nanos <= _NUM ) return null ; else nanos = available . awaitNanos ( nanos ) ; } else { long delay = q . next - t ; if ( delay <= _NUM ) { item = q . poll ( t ) ; return item == null ? null : item . element ; } if ( nanos <= _NUM ) return null ; if ( nanos < delay || leader != null ) nanos = available . awaitNanos ( nanos ) ; else { Thread thisThread = Thread . currentThread ( ) ; leader = thisThread ; try { long timeLeft = available . awaitNanos ( delay ) ; nanos -= delay - timeLeft ; } finally { if ( leader == thisThread ) leader = null ; } } } t = System . nanoTime ( ) ; } } finally { if ( leader == null && hasNext ( ) ) available . signal ( ) ; lock . unlock ( ) ; done ( item , t ) ; } }
public void addSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < SwipeListener > ( ) ; } mListeners . add ( listener ) ; }
public int size ( ) { return patterns . size ( ) ; }
private SublimeBaseMenuItem addInternal ( int pivotID , Positioned positioned , SublimeBaseMenuItem newItem ) { int newItemGroupId = newItem . getGroupId ( ) ; checkExistenceOfGroup ( newItemGroupId ) ; int pivotIndex = findItemIndex ( pivotID ) ; SublimeBaseMenuItem pivot = mItems . get ( pivotIndex ) ; if ( newItem . getItemType ( ) == SublimeBaseMenuItem . ItemType . GROUP_HEADER ) { checkIfGroupHeaderAlreadyExistsForGroup ( newItemGroupId ) ; int index = findGroupIndex ( newItemGroupId ) ; if ( index >= _NUM ) { mItems . add ( index , newItem ) ; } else { if ( positioned == Positioned . BEFORE ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivot . getItemType ( ) == SublimeBaseMenuItem . ItemType . GROUP_HEADER ) { mItems . add ( pivotIndex , newItem ) ; } else { mItems . add ( newItem ) ; } } else if ( positioned == Positioned . AFTER ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findLastGroupIndex ( newItemGroupId ) ) { mItems . add ( pivotIndex + _NUM , newItem ) ; } else { mItems . add ( newItem ) ; } } } } else { if ( newItemGroupId != NO_GROUP_ID ) { int lastGroupIndex = findLastGroupIndex ( newItemGroupId ) ; if ( lastGroupIndex == mItems . size ( ) ) { if ( positioned == Positioned . BEFORE ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findGroupIndex ( pivot . getGroupId ( ) ) ) { mItems . add ( pivotIndex , newItem ) ; } else { mItems . add ( newItem ) ; } } else if ( positioned == Positioned . AFTER ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findLastGroupIndex ( pivot . getGroupId ( ) ) ) { mItems . add ( pivotIndex + _NUM , newItem ) ; } else { mItems . add ( newItem ) ; } } } else { if ( newItemGroupId == pivot . getGroupId ( ) ) { if ( positioned == Positioned . BEFORE ) { if ( pivot . getItemType ( ) != SublimeBaseMenuItem . ItemType . GROUP_HEADER ) { mItems . add ( pivotIndex , newItem ) ; } else { mItems . add ( lastGroupIndex + _NUM , newItem ) ; } } else if ( positioned == Positioned . AFTER ) { mItems . add ( pivotIndex + _NUM , newItem ) ; } } else { mItems . add ( lastGroupIndex + _NUM , newItem ) ; } } } else { if ( positioned == Positioned . BEFORE ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || findGroupIndex ( pivot . getGroupId ( ) ) == pivotIndex ) { mItems . add ( pivotIndex , newItem ) ; } else { mItems . add ( newItem ) ; } } else if ( positioned == Positioned . AFTER ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findLastGroupIndex ( pivot . getGroupId ( ) ) ) { mItems . add ( pivotIndex + _NUM , newItem ) ; } else { mItems . add ( newItem ) ; } } } } onItemsChanged ( ) ; return newItem ; }
public static void writeUint8 ( OutputStream theOs , int theValue ) throws IOException { theOs . write ( theValue ) ; }
private E unlinkFirst ( ) { Node < E > f = first ; if ( f == null ) return null ; Node < E > n = f . next ; E item = f . item ; f . item = null ; f . next = f ; first = n ; if ( n == null ) last = null ; else n . prev = null ; -- count ; notFull . signal ( ) ; return item ; }
public void testCase11 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . add ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
@ Override public void addHeader ( final String header , final String value ) { mHeadersOptions . add ( new HeaderOption ( header , value ) ) ; }
public void store ( ) throws SAMLException { try { keyProvider . store ( ) ; } catch ( KeyStoreException e ) { throw new SAMLException ( e . getMessage ( ) ) ; } catch ( CertificateException e ) { throw new SAMLException ( e . getMessage ( ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new SAMLException ( e . getMessage ( ) ) ; } catch ( IOException e ) { throw new SAMLException ( e . getMessage ( ) ) ; } }
static void appendToPointerHierarchy ( final BaseType type , final BaseType pointer ) { Preconditions . checkNotNull ( type , _STR ) ; Preconditions . checkNotNull ( pointer , _STR ) ; Preconditions . checkArgument ( type != pointer , _STR ) ; Preconditions . checkArgument ( pointer . pointedToBy != type , _STR ) ; Preconditions . checkArgument ( type . pointsTo != pointer , _STR ) ; pointer . pointsTo = type ; type . pointedToBy = pointer ; }
public static void sort ( long [ ] a ) { doSort ( a , _NUM , a . length - _NUM ) ; }
public String toString ( ) { return _STR + String . format ( _STR , ValueSimilarity * _NUM ) + _STR + String . format ( _STR , ContainmentSimilarity * _NUM ) + _STR + String . format ( _STR , SizeSimilarity * _NUM ) ; }
public Optional < T > last ( ) { Iterator < T > iterator = iterator ( ) ; T value = null ; while ( iterator . hasNext ( ) ) value = iterator . next ( ) ; return Optional . of ( value ) ; }
public static void threadSleep ( long millis ) { try { Thread . sleep ( millis ) ; } catch ( InterruptedException ex ) { Log . e ( _STR , StringUtils . exceptionStackTraceToString ( ex ) ) ; } }
public int indexOf ( Node elem , int index ) { runTo ( - _NUM ) ; if ( null == m_map ) return - _NUM ; for ( int i = index ; i < m_firstFree ; i ++ ) { Node node = m_map [ i ] ; if ( ( null != node ) && node . equals ( elem ) ) return i ; } return - _NUM ; }
static boolean isPackageAccess ( final int modifiers ) { return ( modifiers & ACCESS_TEST ) == _NUM ; }
public void write ( final String filename ) { PrintStream stream ; try { stream = new PrintStream ( new File ( filename ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; return ; } write ( stream ) ; stream . close ( ) ; }
ManagedWindowDecorator ( Window window , String windowId ) { this . window = window ; name = _STR + windowId ; }
@ Override public void write ( byte [ ] b , int off , int len ) throws IOException { while ( len > _NUM ) { int c = Math . min ( len , decoderIn . remaining ( ) ) ; decoderIn . put ( b , off , c ) ; processInput ( _BOOL ) ; len -= c ; off += c ; } if ( writeImmediately ) { flushOutput ( ) ; } }
public static void log ( String message , Object ... args ) { if ( loggingEnabled ) { Log . d ( TAG , args . length == _NUM ? message : String . format ( message , args ) ) ; } }
protected void processUpdates ( Queue < DeviceUpdate > updates ) { if ( updates == null ) return ; DeviceUpdate update = null ; while ( null != ( update = updates . poll ( ) ) ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( _STR , update ) ; } if ( update . change == DeviceUpdate . Change . DELETE ) { deviceSyncManager . removeDevice ( update . device ) ; } else { deviceSyncManager . storeDevice ( update . device ) ; } List < IDeviceListener > listeners = deviceListeners . getOrderedListeners ( ) ; notifyListeners ( listeners , update ) ; } }
boolean handleRemoteCanRebalance ( long size ) { return _BOOL ; }
public static File toSLDFile ( final File file ) { final String path = file . getAbsolutePath ( ) ; final String base = path . substring ( _NUM , path . length ( ) - _NUM ) ; String newPath = base + _STR ; File sld = new File ( newPath ) ; if ( sld . exists ( ) ) { return sld ; } newPath = base + _STR ; sld = new File ( newPath ) ; if ( sld . exists ( ) ) { return sld ; } return null ; }
private String insertProperties ( String template , Map < String , String > properties ) { for ( Entry < String , String > entry : properties . entrySet ( ) ) { template = template . replace ( entry . getKey ( ) , entry . getValue ( ) ) ; } return template ; }
public static void changeFont ( JComponent comp , int style ) { Font font = comp . getFont ( ) ; comp . setFont ( font . deriveFont ( style ) ) ; }
public void drawContours ( Mat img , Color color ) { Drawing . drawContours ( img , contours , color ) ; }
public static void saveX509Cert ( String certStr , File certFile ) throws IOException { BufferedWriter writer = new BufferedWriter ( new FileWriter ( certFile ) ) ; writer . write ( BEGIN_CERT ) ; writer . newLine ( ) ; writer . write ( certStr ) ; writer . newLine ( ) ; writer . write ( END_CERT ) ; writer . newLine ( ) ; writer . close ( ) ; }
public void clearOnCentralPositionChangedListener ( ) { mOnCentralPositionChangedListeners . clear ( ) ; }
public static Object invokeStatic ( Class clazz , String methodName ) throws NoSuchMethodException { try { Method method = clazz . getMethod ( methodName , new Class [ _NUM ] ) ; Object result = method . invoke ( null , new Object [ _NUM ] ) ; return result ; } catch ( IllegalAccessException e ) { throw new NoSuchMethodException ( methodName + _STR ) ; } catch ( InvocationTargetException e ) { throw new InternalError ( e . getMessage ( ) ) ; } }
@ Deprecated public boolean isFillBelowLine ( ) { return mFillBelowLine . size ( ) > _NUM ; }
public void onPatchServiceResult ( boolean isUpgradePatch ) { if ( ! isRetryEnable ) { TinkerLog . w ( TAG , _STR ) ; return ; } if ( ! isUpgradePatch ) { TinkerLog . w ( TAG , _STR ) ; return ; } if ( retryInfoFile . exists ( ) ) { SharePatchFileUtil . safeDeleteFile ( retryInfoFile ) ; } if ( tempPatchFile . exists ( ) ) { SharePatchFileUtil . safeDeleteFile ( tempPatchFile ) ; } }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return NOTE_ID ; case _NUM : return CLASS_NAME ; case _NUM : return INTERPRETER_CONTEXT ; default : return null ; } }
public static boolean isStanza ( Packet packet ) { if ( packet instanceof Message ) return _BOOL ; if ( packet instanceof IQ ) return _BOOL ; if ( packet instanceof Presence ) return _BOOL ; return _BOOL ; }
@ Override public int execute ( final FormObject form , final int type , final String code , final int eventType , final char keyPressed ) { int messageCode = ActionHandler . NOMESSAGE ; if ( code instanceof String ) { final String js = code ; final String [ ] args = JSFunction . convertToArray ( js ) ; final String command = args [ _NUM ] ; if ( command . startsWith ( _STR ) ) { messageCode = handleAFCommands ( form , command , js , args , eventType , keyPressed ) ; } } return messageCode ; }
private boolean needsUpdate ( Long bundleVersion , String beanVersion ) { if ( beanVersion . contains ( _STR ) ) { Log . i ( TAG , _STR + bundleVersion ) ; Log . i ( TAG , _STR + beanVersion ) ; return _BOOL ; } else { try { long parsedVersion = Long . parseLong ( beanVersion . split ( _STR ) [ _NUM ] ) ; Log . i ( TAG , _STR + bundleVersion ) ; Log . i ( TAG , _STR + parsedVersion ) ; if ( bundleVersion > parsedVersion ) { return _BOOL ; } else { Log . i ( TAG , _STR ) ; } } catch ( NumberFormatException e ) { Log . e ( TAG , _STR + beanVersion ) ; fail ( BeanError . UNPARSABLE_FW_VERSION ) ; } } return _BOOL ; }
public void clear ( FacesContext facesContext , Map < String , Object > viewMap ) { if ( LOGGER . isLoggable ( Level . FINEST ) ) { LOGGER . log ( Level . FINEST , _STR ) ; } Map < String , ViewScopeContextObject > contextMap = getContextMap ( facesContext , viewMap ) ; if ( contextMap != null ) { destroyBeans ( viewMap , contextMap ) ; } }
public void loadLogicalTablesWithGranularities ( Map < String , TableGroup > nameGroupMap , Set < ? extends Granularity > validGrains , ResourceDictionaries dictionaries ) { for ( Map . Entry < String , TableGroup > entry : nameGroupMap . entrySet ( ) ) { String logicalTableName = entry . getKey ( ) ; TableGroup group = entry . getValue ( ) ; loadLogicalTableWithGranularities ( logicalTableName , group , validGrains , dictionaries ) ; } }
protected int readBlock ( ) { blockSize = read ( ) ; int n = _NUM ; if ( blockSize > _NUM ) { try { int count = _NUM ; while ( n < blockSize ) { count = in . read ( block , n , blockSize - n ) ; if ( count == - _NUM ) break ; n += count ; } } catch ( IOException e ) { } if ( n < blockSize ) { status = STATUS_FORMAT_ERROR ; } } return n ; }
@ Override public void addNewSubscription ( final Subscription newSubscription ) { final String clientID = newSubscription . getClientId ( ) ; List < ClientTopicCouple > clientSubscriptions = subscriptions . get ( clientID ) ; if ( clientSubscriptions == null ) { clientSubscriptions = new ArrayList < > ( ) ; subscriptions . put ( clientID , clientSubscriptions ) ; } clientSubscriptions . add ( newSubscription . asClientTopicCouple ( ) ) ; }
public X509CertPathImpl ( List < ? extends java . security . cert . Certificate > certs ) throws CertificateException { super ( _STR ) ; final int size = certs . size ( ) ; certificates = new ArrayList < X509Certificate > ( size ) ; for ( int i = _NUM ; i < size ; i ++ ) { final java . security . cert . Certificate cert = certs . get ( i ) ; if ( ! ( cert instanceof X509Certificate ) ) { throw new CertificateException ( _STR + i + _STR ) ; } certificates . add ( ( X509Certificate ) cert ) ; } }
public Process ( final String xmlString ) throws IOException , XMLException { initContext ( ) ; StringReader in = new StringReader ( xmlString ) ; readProcess ( in ) ; in . close ( ) ; }
public ConsulTopologyFraction ( ) { this . url = DEFAULT_URL ; }
protected String buildQualifierRegex ( String qualifierValue ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( _STR ) ; sb . append ( qualifierValue ) ; sb . append ( _STR ) ; return sb . toString ( ) ; }
public String shortenName ( String name , int desiredLength ) { int originalLength = name . length ( ) ; if ( ( desiredLength <= _NUM ) || ( originalLength <= desiredLength ) ) { return name ; } int delta = originalLength - desiredLength ; int startCut = desiredLength / _NUM ; StringBuffer result = new StringBuffer ( ) ; result . append ( name . substring ( _NUM , startCut ) ) ; if ( ( ( startCut == _NUM ) || ( name . charAt ( startCut - _NUM ) != _STR ) ) && ( ( startCut + delta + _NUM == originalLength ) || ( name . charAt ( startCut + delta + _NUM ) != _STR ) ) ) { result . append ( _STR ) ; } result . append ( name . substring ( startCut + delta + _NUM , originalLength ) ) ; return result . toString ( ) ; }
public static Color blend ( Color color1 , Color color2 , double weight ) { double w2 = MathUtils . limit ( weight , _NUM , _NUM ) ; double w1 = _NUM - w2 ; int r = ( int ) Math . round ( w1 * color1 . getRed ( ) + w2 * color2 . getRed ( ) ) ; int g = ( int ) Math . round ( w1 * color1 . getGreen ( ) + w2 * color2 . getGreen ( ) ) ; int b = ( int ) Math . round ( w1 * color1 . getBlue ( ) + w2 * color2 . getBlue ( ) ) ; int a = ( int ) Math . round ( w1 * color1 . getAlpha ( ) + w2 * color2 . getAlpha ( ) ) ; return new Color ( r , g , b , a ) ; }
public long kstkeip ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
private void decideUILookAndFeel ( MainOptions options ) { try { boolean systemPlaf = _BOOL ; systemPlaf = options . system_plaf ; String systemPlafReq = System . getenv ( _STR ) ; if ( systemPlafReq != null && systemPlafReq . equalsIgnoreCase ( _STR ) ) systemPlaf = _BOOL ; if ( systemPlaf ) UIManager . setLookAndFeel ( UIManager . getSystemLookAndFeelClassName ( ) ) ; } catch ( Exception exc ) { exc . printStackTrace ( ) ; } }
public static BufferedImage toBufferedImage ( Image img , int type ) { if ( img instanceof BufferedImage ) { return ( BufferedImage ) img ; } BufferedImage bimage = new BufferedImage ( img . getWidth ( null ) , img . getHeight ( null ) , type ) ; Graphics2D bGr = bimage . createGraphics ( ) ; bGr . drawImage ( img , _NUM , _NUM , null ) ; bGr . dispose ( ) ; return bimage ; }
private JSONArray readArray ( ) throws JSONException { JSONArray result = new JSONArray ( ) ; boolean hasTrailingSeparator = _BOOL ; while ( _BOOL ) { switch ( nextCleanInternal ( ) ) { case - _NUM : throw syntaxError ( _STR ) ; case _STR : if ( hasTrailingSeparator ) { result . put ( null ) ; } return result ; case _STR : case _STR : result . put ( null ) ; hasTrailingSeparator = _BOOL ; continue ; default : pos -- ; } result . put ( nextValue ( ) ) ; switch ( nextCleanInternal ( ) ) { case _STR : return result ; case _STR : case _STR : hasTrailingSeparator = _BOOL ; continue ; default : throw syntaxError ( _STR ) ; } } }
public static byte [ ] hexStringToByteArray ( String strA ) { ByteArrayOutputStream result = new ByteArrayOutputStream ( ) ; byte sum = ( byte ) _NUM ; boolean nextCharIsUpper = _BOOL ; for ( int i = _NUM ; i < strA . length ( ) ; i ++ ) { char c = strA . charAt ( i ) ; switch ( Character . toUpperCase ( c ) ) { case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; default : break ; } } if ( ! nextCharIsUpper ) { throw new RuntimeException ( _STR ) ; } return result . toByteArray ( ) ; }
public List < Node > listAvailableTerminals ( Class < ? > type ) { List < Node > result = new ArrayList < Node > ( ) ; for ( Node node : availableNodes ) { if ( ( node . getNumberOfArguments ( ) == _NUM ) && type . isAssignableFrom ( node . getReturnType ( ) ) ) { result . add ( node ) ; } } return result ; }
public void removeSensorSelectionListener ( SensorSelectionListener listener ) { listenerList . remove ( SensorSelectionListener . class , listener ) ; }
public void write ( int c ) throws IOException { if ( _output == null ) throw new IOException ( _STR ) ; _output . append ( ( char ) c ) ; }
private static void testDexClassLoader ( ) { ClassLoader dexClassLoader = getDexClassLoader ( ) ; Class anotherClass ; try { anotherClass = dexClassLoader . loadClass ( _STR ) ; } catch ( ClassNotFoundException cnfe ) { throw new RuntimeException ( _STR ) ; } Object another ; try { another = anotherClass . newInstance ( ) ; } catch ( IllegalAccessException ie ) { throw new RuntimeException ( _STR , ie ) ; } catch ( InstantiationException ie ) { throw new RuntimeException ( _STR , ie ) ; } dexClassLoader . getResource ( _STR ) ; }
public void register ( GridCacheTtlManager mgr ) { synchronized ( mux ) { if ( cleanupWorker == null ) startCleanupWorker ( ) ; mgrs . add ( mgr ) ; } }
public static java . sql . Time toSqlTime ( int hour , int minute , int second ) { java . util . Date newDate = toDate ( _NUM , _NUM , _NUM , hour , minute , second ) ; if ( newDate != null ) { return new java . sql . Time ( newDate . getTime ( ) ) ; } else { return null ; } }
public void initializeKeyStore ( ) { try { Logger logger = ( com . sun . identity . log . Logger ) Logger . getLogger ( logName ) ; resetCurrentFileList ( logName ) ; addToCurrentFileList ( logName , logName , logName ) ; String logPath = lmanager . getProperty ( LogConstants . LOG_LOCATION ) ; if ( ! logPath . endsWith ( _STR ) ) logPath += _STR ; String fileName = logName ; String loggerFileName = logPath + PREFIX + _STR + fileName ; String verifierFileName = logPath + PREFIX + _STR + fileName ; Debug . message ( logName + _STR + loggerFileName ) ; Debug . message ( logName + _STR + verifierFileName ) ; helper . initializeSecureLogHelper ( loggerFileName , logPassword , verifierFileName , logPassword ) ; Debug . message ( logName + _STR ) ; helper . initializeVerifier ( verifierFileName , logPassword , verPassword ) ; Debug . message ( logName + _STR ) ; } catch ( Exception e ) { Debug . error ( logName + _STR , e ) ; } }
private native byte [ ] imageDataToPlatformImageBytes ( byte [ ] imageData , int width , int height , long format ) ;
public void writeExif ( Bitmap bmap , OutputStream exifOutStream ) throws IOException { if ( bmap == null || exifOutStream == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = getExifWriterStream ( exifOutStream ) ; bmap . compress ( Bitmap . CompressFormat . JPEG , _NUM , s ) ; s . flush ( ) ; }
public static String cleanFolderStackingMarkers ( String filename ) { if ( ! StringUtils . isEmpty ( filename ) ) { Matcher m = folderStackingPattern . matcher ( filename ) ; if ( m . matches ( ) ) { return m . group ( _NUM ) + m . group ( _NUM ) ; } } return filename ; }
public void discard ( ServiceRegistrar reg ) { synchronized ( registrars ) { if ( terminated ) { throw new IllegalStateException ( _STR ) ; } if ( reg == null ) return ; sendDiscarded ( reg , null ) ; } }
public boolean isFinalState ( int state ) { return ( state < _NUM ) ? _BOOL : fFinalStateFlags [ state ] ; }
public static String generateScaleMarkers ( int proteinLength , int maxNumScaleMarkers ) { if ( maxNumScaleMarkers < _NUM ) { maxNumScaleMarkers = _NUM ; } int scale = calcScale ( proteinLength , maxNumScaleMarkers ) ; StringBuilder sb = new StringBuilder ( _STR ) ; int index = _NUM ; int numRemaining = proteinLength ; while ( index <= proteinLength ) { index += scale ; numRemaining -= scale ; sb . append ( _STR ) ; if ( ( numRemaining > _NUM ) && ( numRemaining < scale ) ) { if ( numRemaining < ( scale / _NUM ) ) { sb . append ( proteinLength ) ; break ; } } if ( index >= proteinLength ) { sb . append ( proteinLength ) ; } else { sb . append ( index ) ; } } return sb . toString ( ) ; }
public void writeFigTreeBlock ( Map < String , Object > settings ) throws IOException { writer . println ( _STR ) ; for ( String key : settings . keySet ( ) ) { Object value = settings . get ( key ) ; writer . println ( _STR + key + _STR + createString ( value ) + _STR ) ; } writer . println ( _STR ) ; }
public int hashCode ( ) { return font . hashCode ( ) ^ glyphs . length ; }
public boolean equals ( Object obj ) { if ( obj == this ) { return _BOOL ; } if ( obj instanceof Map == _BOOL ) { return _BOOL ; } Map map = ( Map ) obj ; if ( map . size ( ) != size ( ) ) { return _BOOL ; } MapIterator it = mapIterator ( ) ; try { while ( it . hasNext ( ) ) { Object key = it . next ( ) ; Object value = it . getValue ( ) ; if ( value == null ) { if ( map . get ( key ) != null || map . containsKey ( key ) == _BOOL ) { return _BOOL ; } } else { if ( value . equals ( map . get ( key ) ) == _BOOL ) { return _BOOL ; } } } } catch ( ClassCastException ignored ) { return _BOOL ; } catch ( NullPointerException ignored ) { return _BOOL ; } return _BOOL ; }
@ Override public void doctypeDecl ( String rootElement , String publicId , String systemId , Augmentations augs ) throws XNIException { fInDTD = _BOOL ; try { if ( fLexicalHandler != null ) { fLexicalHandler . startDTD ( rootElement , publicId , systemId ) ; } } catch ( SAXException e ) { throw new XNIException ( e ) ; } if ( fDeclHandler != null ) { fDeclaredAttrs = new SymbolHash ( ) ; } }
public void writeExif ( byte [ ] jpeg , String exifOutFileName ) throws FileNotFoundException , IOException { if ( jpeg == null || exifOutFileName == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = null ; try { s = getExifWriterStream ( exifOutFileName ) ; s . write ( jpeg , _NUM , jpeg . length ) ; s . flush ( ) ; } catch ( IOException e ) { closeSilently ( s ) ; throw e ; } s . close ( ) ; }
public void cleanStart ( ) { Connection conn = getConnection ( _BOOL , _BOOL ) ; if ( conn == null ) throw new IllegalStateException ( _STR ) ; dropDatabase ( conn ) ; createUser ( conn ) ; createDatabase ( conn ) ; try { if ( conn != null ) conn . close ( ) ; } catch ( SQLException e2 ) { log . log ( Level . SEVERE , _STR , e2 ) ; } conn = null ; }
static TemplateModelException newMethodArgInvalidValueException ( String methodName , int argIdx , Object ... details ) { return new _TemplateModelException ( methodName , _STR , Integer . valueOf ( argIdx + _NUM ) , _STR , details ) ; }
public static byte [ ] compressForZlib ( String stringToCompress ) { byte [ ] returnValues = null ; try { returnValues = compressForZlib ( stringToCompress . getBytes ( _STR ) ) ; } catch ( UnsupportedEncodingException uee ) { uee . printStackTrace ( ) ; } return returnValues ; }
private void loadMap ( String extension , String mimeType ) { if ( ! mimeTypeToExtensionMap . containsKey ( mimeType ) ) { mimeTypeToExtensionMap . put ( mimeType , extension ) ; } extensionToMimeTypeMap . put ( extension , mimeType ) ; if ( isImageType ( mimeType ) ) { imageMimeTypeSet . add ( mimeType ) ; } }
public void startDTD ( String name , String publicId , String systemId ) throws org . xml . sax . SAXException { }
private String convertTimestamp ( ) { String result = timestampFormat . replaceAll ( VALID_DATEFORMAT_CHAR_PATTERN + _STR , _STR ) ; result = result . replaceAll ( Pattern . quote ( _STR ) , _STR ) ; return result ; }
public static String encode ( byte [ ] bytes ) { int len = bytes . length ; final StringBuffer encoded = new StringBuffer ( ( len + _NUM ) / _NUM * _NUM ) ; int i = _NUM ; int j = len ; while ( j >= _NUM ) { encoded . append ( to64 ( ( ( ( bytes [ i ] & _NUM ) << _NUM ) | ( int ) ( ( bytes [ i + _NUM ] & _NUM ) << _NUM ) | ( int ) ( bytes [ i + _NUM ] & _NUM ) ) , _NUM ) ) ; i += _NUM ; j -= _NUM ; } if ( j == _NUM ) { encoded . append ( to64 ( ( ( bytes [ i ] & _NUM ) << _NUM ) | ( ( bytes [ i + _NUM ] & _NUM ) ) , _NUM ) ) ; } if ( j == _NUM ) { encoded . append ( to64 ( ( ( bytes [ i ] & _NUM ) ) , _NUM ) ) ; } return encoded . toString ( ) ; }
final public void print ( double v ) { Writer out = this . out ; if ( out == null ) return ; try { String s = String . valueOf ( v ) ; out . write ( s , _NUM , s . length ( ) ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
public String toString ( ) { StringBuffer result = new StringBuffer ( ipAddress . toString ( ) ) ; result . append ( _STR ) ; result . append ( extendedNetworkPrefix ) ; return result . toString ( ) ; }
private static boolean containsChroot ( String zkHost ) { return zkHost . contains ( _STR ) ; }
public static void onDatabase ( MongoClient client , String dbName , Consumer < MongoDatabase > dbOperation ) { if ( contains ( client . listDatabaseNames ( ) , dbName ) ) { dbOperation . accept ( client . getDatabase ( dbName ) ) ; } }
protected int createHashCode ( ) { int result = uri . hashCode ( ) ^ prefix . hashCode ( ) ; if ( result == _NUM ) { result = _NUM ; } return result ; }
private void updateBaseMatrix ( Drawable d ) { ImageView imageView = getImageView ( ) ; if ( null == imageView || null == d ) { return ; } final float viewWidth = imageView . getWidth ( ) ; final float viewHeight = imageView . getHeight ( ) ; final int drawableWidth = d . getIntrinsicWidth ( ) ; final int drawableHeight = d . getIntrinsicHeight ( ) ; mBaseMatrix . reset ( ) ; final float widthScale = viewWidth / drawableWidth ; final float heightScale = viewHeight / drawableHeight ; if ( mScaleType == ScaleType . CENTER ) { mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth ) / _NUM , ( viewHeight - drawableHeight ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_CROP ) { float scale = Math . max ( widthScale , heightScale ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_INSIDE ) { float scale = Math . min ( _NUM , Math . min ( widthScale , heightScale ) ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else { RectF mTempSrc = new RectF ( _NUM , _NUM , drawableWidth , drawableHeight ) ; RectF mTempDst = new RectF ( _NUM , _NUM , viewWidth , viewHeight ) ; switch ( mScaleType ) { case FIT_CENTER : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . CENTER ) ; break ; case FIT_START : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . START ) ; break ; case FIT_END : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . END ) ; break ; case FIT_XY : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . FILL ) ; break ; default : break ; } } resetMatrix ( ) ; }
public static PlaceholderFragment newInstance ( int sectionNumber ) { PlaceholderFragment fragment = new PlaceholderFragment ( ) ; Bundle args = new Bundle ( ) ; args . putInt ( ARG_SECTION_NUMBER , sectionNumber ) ; fragment . setArguments ( args ) ; return fragment ; }
public String importTrl ( String directory , int AD_Client_ID , String AD_Language , String Trl_Table ) { String fileName = directory + File . separator + Trl_Table + _STR + AD_Language + _STR ; log . info ( fileName ) ; File in = new File ( fileName ) ; if ( ! in . exists ( ) ) { String msg = _STR + fileName ; log . log ( Level . SEVERE , msg ) ; return msg ; } try { TranslationHandler handler = new TranslationHandler ( AD_Client_ID ) ; SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; SAXParser parser = factory . newSAXParser ( ) ; parser . parse ( in , handler ) ; log . info ( _STR + handler . getUpdateCount ( ) ) ; return Msg . getMsg ( m_ctx , _STR ) + _STR + handler . getUpdateCount ( ) ; } catch ( Exception e ) { log . log ( Level . SEVERE , _STR , e ) ; return e . toString ( ) ; } }
public ResultFileReader ( Problem problem , File file ) throws IOException { super ( ) ; this . problem = problem ; reader = new BufferedReader ( new FileReader ( file ) ) ; line = reader . readLine ( ) ; }
@ Override public void onFailure ( IMqttToken asyncActionToken , Throwable exception ) { exception . printStackTrace ( ) ; Log . e ( _STR , _STR + exception . getMessage ( ) ) ; onDisconnect ( _BOOL ) ; }
@ Override public boolean exclude ( String identifier ) { return blacklist . contains ( identifier ) ; }
public static boolean checkCommunicationError ( Exception exc ) { Throwable rootCause = SolrException . getRootCause ( exc ) ; boolean wasCommError = ( rootCause instanceof ConnectException || rootCause instanceof ConnectTimeoutException || rootCause instanceof NoHttpResponseException || rootCause instanceof SocketException ) ; return wasCommError ; }
public boolean isReliable ( ) { return _BOOL ; }
private void push ( final int type ) { if ( outputStack == null ) { outputStack = new int [ _NUM ] ; } int n = outputStack . length ; if ( outputStackTop >= n ) { int [ ] t = new int [ Math . max ( outputStackTop + _NUM , _NUM * n ) ] ; System . arraycopy ( outputStack , _NUM , t , _NUM , n ) ; outputStack = t ; } outputStack [ outputStackTop ++ ] = type ; int top = owner . inputStackTop + outputStackTop ; if ( top > owner . outputStackMax ) { owner . outputStackMax = top ; } }
static private String SHORT_Max_Plus ( ) { long tempValue = Short . MAX_VALUE + _NUM ; return String . valueOf ( tempValue ) ; }
public void firePropertyChange ( String name , Object oldValue , Object newValue ) { beanContextChildSupport . firePropertyChange ( name , oldValue , newValue ) ; }
public static String encode ( String value ) { value = value . replace ( _STR , _STR ) ; value = value . replace ( _STR , _STR ) ; value = value . replace ( _STR , _STR ) ; value = value . replace ( _STR , _STR ) ; value = value . replace ( _STR , _STR ) ; value = value . replace ( _STR , _STR ) ; return value ; }
public void createDatabaseEntitiesForStoragePolicyTesting ( ) { createDatabaseEntitiesForStoragePolicyTesting ( AbstractServiceTest . STORAGE_POLICY_NAMESPACE_CD , Arrays . asList ( AbstractServiceTest . STORAGE_POLICY_RULE_TYPE ) , AbstractServiceTest . BDEF_NAMESPACE , AbstractServiceTest . BDEF_NAME , Arrays . asList ( AbstractServiceTest . FORMAT_FILE_TYPE_CODE ) , Arrays . asList ( AbstractServiceTest . STORAGE_NAME ) , Arrays . asList ( AbstractServiceTest . STORAGE_NAME_2 ) ) ; }
private PDFPage createPage ( int pagenum , PDFObject pageObj ) throws IOException { int rotation = _NUM ; RectF mediabox = null ; RectF cropbox = null ; PDFObject mediaboxObj = getInheritedValue ( pageObj , _STR ) ; if ( mediaboxObj != null ) { mediabox = parseRect ( mediaboxObj ) ; } PDFObject cropboxObj = getInheritedValue ( pageObj , _STR ) ; if ( cropboxObj != null ) { cropbox = parseRect ( cropboxObj ) ; } PDFObject rotateObj = getInheritedValue ( pageObj , _STR ) ; if ( rotateObj != null ) { rotation = rotateObj . getIntValue ( ) ; } RectF bbox = ( ( cropbox == null ) ? mediabox : cropbox ) ; return new PDFPage ( pagenum , bbox , rotation , cache ) ; }
static Map addElementToMap ( String key , Set values , Map toMap ) { if ( ( key != null ) && ( toMap != null ) ) { toMap . put ( key , values ) ; } return toMap ; }
public void saveBootProp ( ) throws IOException { if ( ! bootProp . equals ( bootPropOrg ) ) { final String propFile = jarFolder + _STR ; final OutputStream os = new FileOutputStream ( propFile ) ; try { bootProp . store ( os , _STR ) ; } finally { os . close ( ) ; } } }
private int append ( FileSystem fs , Configuration conf , Path src , PrintWriter writer , int currentRecordNumber ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( fs . open ( src ) ) ) ; try { String line = reader . readLine ( ) ; while ( line != null ) { if ( line . startsWith ( _STR ) ) { line = _STR + currentRecordNumber ++ ; } writer . println ( line ) ; line = reader . readLine ( ) ; } return currentRecordNumber ; } finally { reader . close ( ) ; } }
public PacketOutputStream writeTimestampLength ( final Calendar calendar , Timestamp ts , boolean fractionalSeconds ) { assureBufferCapacity ( fractionalSeconds ? _NUM : _NUM ) ; buffer . put ( ( byte ) ( fractionalSeconds ? _NUM : _NUM ) ) ; buffer . putShort ( ( short ) calendar . get ( Calendar . YEAR ) ) ; buffer . put ( ( byte ) ( ( calendar . get ( Calendar . MONTH ) + _NUM ) & _NUM ) ) ; buffer . put ( ( byte ) ( calendar . get ( Calendar . DAY_OF_MONTH ) & _NUM ) ) ; buffer . put ( ( byte ) calendar . get ( Calendar . HOUR_OF_DAY ) ) ; buffer . put ( ( byte ) calendar . get ( Calendar . MINUTE ) ) ; buffer . put ( ( byte ) calendar . get ( Calendar . SECOND ) ) ; if ( fractionalSeconds ) { buffer . putInt ( ts . getNanos ( ) / _NUM ) ; } return this ; }
public int difference ( String s1 , String s2 ) throws EncoderException { return SoundexUtils . difference ( this , s1 , s2 ) ; }
public static String morpha ( String text , boolean tags ) { if ( text . isEmpty ( ) ) { return _STR ; } String [ ] textParts = whitespace . split ( text ) ; StringBuilder result = new StringBuilder ( ) ; try { for ( String textPart : textParts ) { Morpha morpha = new Morpha ( new StringReader ( textPart ) , tags ) ; if ( result . length ( ) != _NUM ) { result . append ( _STR ) ; } result . append ( morpha . next ( ) ) ; } } catch ( Error e ) { return text ; } catch ( java . io . IOException e ) { return text ; } return result . toString ( ) ; }
public static void deleteFile ( File file ) throws AdeUsageException { if ( ! file . delete ( ) ) { throw new AdeUsageException ( FAILED_DELETING_FILE + file . getPath ( ) ) ; } }
public Shape createCheckMark ( final int x , final int y , final int w , final int h ) { double xf = w / _NUM ; double hf = h / _NUM ; path . reset ( ) ; path . moveTo ( x , y + _NUM * hf ) ; path . lineTo ( x + _NUM * xf , y + _NUM * hf ) ; path . lineTo ( x + _NUM * xf , y + _NUM * hf ) ; path . lineTo ( x + _NUM * xf , y ) ; path . lineTo ( x + _NUM * xf , y ) ; path . lineTo ( x + _NUM * xf , y + _NUM * hf ) ; path . closePath ( ) ; return path ; }
@ Override public synchronized void initialize ( ) { if ( ! mRootDirectory . exists ( ) ) { if ( ! mRootDirectory . mkdirs ( ) ) { VolleyLog . e ( _STR , mRootDirectory . getAbsolutePath ( ) ) ; } return ; } File [ ] files = mRootDirectory . listFiles ( ) ; if ( files == null ) { return ; } for ( File file : files ) { FileInputStream fis = null ; try { fis = new FileInputStream ( file ) ; CacheHeader entry = CacheHeader . readHeader ( fis ) ; entry . size = file . length ( ) ; putEntry ( entry . key , entry ) ; } catch ( IOException e ) { if ( file != null ) { file . delete ( ) ; } } finally { try { if ( fis != null ) { fis . close ( ) ; } } catch ( IOException ignored ) { } } } }
public TCPChannelClient ( ExecutorService executor , TCPChannelEvents eventListener , String ip , int port ) { this . executor = executor ; executorThreadCheck = new ThreadUtils . ThreadChecker ( ) ; executorThreadCheck . detachThread ( ) ; this . eventListener = eventListener ; InetAddress address ; try { address = InetAddress . getByName ( ip ) ; } catch ( UnknownHostException e ) { reportError ( _STR ) ; return ; } if ( address . isAnyLocalAddress ( ) ) { socket = new TCPSocketServer ( address , port ) ; } else { socket = new TCPSocketClient ( address , port ) ; } socket . start ( ) ; }
protected void cutSelectedBean ( ) { if ( Debug . debugging ( _STR ) ) Debug . output ( _STR ) ; if ( selectedBean == null || selectedBeanLocation == null ) { if ( Debug . debugging ( _STR ) ) Debug . output ( _STR + selectedBean ) ; if ( Debug . debugging ( _STR ) ) Debug . output ( _STR + selectedBeanLocation ) ; clearSelection ( ) ; return ; } try { serBean = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( serBean ) ; oos . writeObject ( selectedBean ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; clearSelection ( ) ; if ( Debug . debugging ( _STR ) ) Debug . output ( _STR ) ; return ; } cutBean = selectedBean ; selectedBeanBox . showCut ( selectedBean ) ; if ( Debug . debugging ( _STR ) ) Debug . output ( _STR ) ; }
public RemoverManager track ( Remover remover ) { if ( handlers == null ) { handlers = new ArrayList < > ( ) ; } handlers . add ( remover ) ; return this ; }
public void actionPerformed ( java . awt . event . ActionEvent e ) { Object source = e . getSource ( ) ; if ( ! ( source instanceof JMenuItem ) ) return ; JMenuItem mi = ( JMenuItem ) source ; String name = mi . getText ( ) ; OMGraphicHandlerLayer targetLayer = ( OMGraphicHandlerLayer ) layers . get ( name ) ; if ( targetLayer == null ) { Debug . message ( _STR , _STR + _STR + name ) ; return ; } targetLayer . doAction ( ( OMGraphic ) transferData , new OMAction ( OMAction . UPDATE_GRAPHIC_MASK ) ) ; }
private void addEntry ( ) { model . addNewEntry ( ) ; removeButton . setEnabled ( _BOOL ) ; }
private void ensureSize ( ) { if ( children == EMPTY_CHILDREN ) { children = new FPNode [ _NUM ] ; return ; } int newsize = children . length == _NUM ? INITIAL_SIZE : ( children . length << _NUM ) ; children = Arrays . copyOf ( children , newsize ) ; }
public UUID ( long mostSigBits , long leastSigBits ) { this . mostSigBits = mostSigBits ; this . leastSigBits = leastSigBits ; init ( ) ; }
public static PrettyPrint indentWithSpaces ( int number ) { if ( number < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } char [ ] chars = new char [ number ] ; Arrays . fill ( chars , _STR ) ; return new PrettyPrint ( chars ) ; }
private static void renderHandler ( FacesContext context , UIComponent component , Collection < ClientBehaviorContext . Parameter > params , String handlerName , Object handlerValue , String behaviorEventName , String submitTarget , boolean needsSubmit , boolean includeExec ) throws IOException { ResponseWriter writer = context . getResponseWriter ( ) ; String userHandler = getNonEmptyUserHandler ( handlerValue ) ; List < ClientBehavior > behaviors = getClientBehaviors ( component , behaviorEventName ) ; if ( ( null != behaviors ) && ( behaviors . size ( ) > _NUM ) && Util . componentIsDisabled ( component ) ) { behaviors = null ; } if ( params == null ) { params = Collections . emptyList ( ) ; } String handler = null ; switch ( getHandlerType ( behaviors , params , userHandler , needsSubmit , includeExec ) ) { case USER_HANDLER_ONLY : handler = userHandler ; break ; case SINGLE_BEHAVIOR_ONLY : handler = getSingleBehaviorHandler ( context , component , behaviors . get ( _NUM ) , params , behaviorEventName , submitTarget , needsSubmit ) ; break ; case SUBMIT_ONLY : handler = getSubmitHandler ( context , component , params , submitTarget , _BOOL ) ; break ; case CHAIN : handler = getChainedHandler ( context , component , behaviors , params , behaviorEventName , userHandler , submitTarget , needsSubmit ) ; break ; default : assert ( _BOOL ) ; } writer . writeAttribute ( handlerName , handler , null ) ; }
public String constructTSDBMetricName ( ) { StringBuilder sb = new StringBuilder ( getScope ( ) ) ; if ( _namespace != null && ! _namespace . isEmpty ( ) ) { sb . append ( getNamespace ( ) ) ; } return sb . toString ( ) ; }
@ Override protected void registerNewSelector ( ) throws IOException { synchronized ( selector ) { Set < SelectionKey > keys = selector . keys ( ) ; Selector newSelector = null ; if ( selectorProvider == null ) { newSelector = Selector . open ( ) ; } else { newSelector = selectorProvider . openSelector ( ) ; } for ( SelectionKey key : keys ) { SelectableChannel ch = key . channel ( ) ; NioSession session = ( NioSession ) key . attachment ( ) ; SelectionKey newKey = ch . register ( newSelector , key . interestOps ( ) , session ) ; session . setSelectionKey ( newKey ) ; } selector . close ( ) ; selector = newSelector ; } }
public void testCase4 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . multiply ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
protected synchronized void received ( int responseCode , String stream , String json ) { FollowerInfo result = parseFollowers ( stream , json ) ; if ( result != null ) { noError ( stream ) ; cached . put ( stream , result ) ; if ( type == Follower . Type . FOLLOWER ) { listener . receivedFollowers ( result ) ; if ( hasNewFollowers ( result . followers ) ) { listener . newFollowers ( result ) ; } } else if ( type == Follower . Type . SUBSCRIBER ) { listener . receivedSubscribers ( result ) ; } requested . add ( stream ) ; } else { String errorMessage = _STR ; if ( responseCode == _NUM ) { errorMessage = _STR ; error ( stream , _NUM ) ; } else if ( responseCode == _NUM ) { errorMessage = _STR ; error ( stream , _NUM ) ; } else if ( responseCode == _NUM || responseCode == _NUM ) { errorMessage = _STR ; error ( stream , _NUM ) ; } else if ( responseCode == _NUM ) { errorMessage = _STR ; error ( stream , _NUM ) ; } else { errorMessage = _STR ; error ( stream , _NUM ) ; } FollowerInfo errorResult = new FollowerInfo ( type , stream , errorMessage ) ; cached . put ( stream , errorResult ) ; if ( type == Follower . Type . FOLLOWER ) { listener . receivedFollowers ( errorResult ) ; } else if ( type == Follower . Type . SUBSCRIBER ) { listener . receivedSubscribers ( errorResult ) ; } } }
public static < T > List < T > select ( Connection connection , String rawSqlQuery , RowProcessor < T > rowProcessor , Object ... parameters ) throws IOException , SQLException { PreparedStatement stmt = null ; ResultSet rs = null ; try { stmt = connection . prepareStatement ( rawSqlQuery ) ; for ( int index = _NUM ; index < parameters . length ; index ++ ) { JdbcUtils . bindParameter ( stmt , index + _NUM , parameters [ index ] ) ; } rs = stmt . executeQuery ( ) ; List < T > result = Lists . newLinkedList ( ) ; while ( rs . next ( ) ) { result . add ( rowProcessor . process ( rs ) ) ; } return result ; } finally { JdbcUtils . closeResultSet ( rs ) ; JdbcUtils . closeStatement ( stmt ) ; } }
public static long nowInNanos ( ) { return System . nanoTime ( ) ; }
public void test_clone ( ) { Format fm = new MockFormat ( ) ; Format fmc = ( Format ) fm . clone ( ) ; assertEquals ( fm . getClass ( ) , fmc . getClass ( ) ) ; }
public Future < SyncReply > sendRequest ( int xid , SyncMessage request ) throws RemoteStoreException { ensureConnected ( ) ; RemoteSyncFuture future = new RemoteSyncFuture ( xid , connectionGeneration ) ; futureMap . put ( Integer . valueOf ( xid ) , future ) ; if ( futureMap . size ( ) > MAX_PENDING_REQUESTS ) { synchronized ( futureNotify ) { while ( futureMap . size ( ) > MAX_PENDING_REQUESTS ) { try { futureNotify . wait ( ) ; } catch ( InterruptedException e ) { throw new RemoteStoreException ( _STR , e ) ; } } } } channel . writeAndFlush ( request ) ; return future ; }
public static boolean isEmpty ( String str ) { return ( null == str || _NUM == str . length ( ) ) ; }
private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { return unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; }
public void enableDependency ( Capability c ) { if ( doNotCheckCapabilities ( ) ) { return ; } if ( c == Capability . NOMINAL_ATTRIBUTES ) { enableDependency ( Capability . BINARY_ATTRIBUTES ) ; } else if ( c == Capability . BINARY_ATTRIBUTES ) { enableDependency ( Capability . UNARY_ATTRIBUTES ) ; } else if ( c == Capability . UNARY_ATTRIBUTES ) { enableDependency ( Capability . EMPTY_NOMINAL_ATTRIBUTES ) ; } else if ( c == Capability . NOMINAL_CLASS ) { enableDependency ( Capability . BINARY_CLASS ) ; } m_Dependencies . add ( c ) ; }
public IVariable [ ] extractRobotDebugVariables ( final int stackTraceId , final Map < String , Object > newVariables ) { final RobotDebugVariablesContext currentVariablesContext = findCurrentVariablesContext ( stackTraceId ) ; Map < String , IVariable > previousVariablesMap = initPreviousVariablesState ( currentVariablesContext ) ; final Map < String , IVariable > nonGlobalVariablesMap = new LinkedHashMap < > ( ) ; if ( previousVariablesMap == null ) { initNewNonGlobalVariables ( newVariables , nonGlobalVariablesMap ) ; } else { initVariablesComparingWithPreviousState ( newVariables , previousVariablesMap , nonGlobalVariablesMap ) ; } final LinkedList < IVariable > currentVariablesList = createCurrentVariablesList ( nonGlobalVariablesMap ) ; saveCurrentVariablesState ( stackTraceId , currentVariablesContext , nonGlobalVariablesMap ) ; return currentVariablesList . toArray ( new IVariable [ currentVariablesList . size ( ) ] ) ; }
public ResourcesPoet addInteger ( String name , String value ) { Element bool = document . createElement ( _STR ) ; bool . setAttribute ( _STR , name ) ; bool . appendChild ( document . createTextNode ( String . valueOf ( value ) ) ) ; resourceElement . appendChild ( bool ) ; return this ; }
static boolean checkStandardUPCEANChecksum ( CharSequence s ) throws FormatException { int length = s . length ( ) ; if ( length == _NUM ) { return _BOOL ; } int sum = _NUM ; for ( int i = length - _NUM ; i >= _NUM ; i -= _NUM ) { int digit = ( int ) s . charAt ( i ) - ( int ) _STR ; if ( digit < _NUM || digit > _NUM ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } sum *= _NUM ; for ( int i = length - _NUM ; i >= _NUM ; i -= _NUM ) { int digit = ( int ) s . charAt ( i ) - ( int ) _STR ; if ( digit < _NUM || digit > _NUM ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } return sum % _NUM == _NUM ; }
public static String mapFullWidthLetterToHalfWidth ( String text ) { }
private static < T > void assertCollectionEqualsNoOrder ( Collection < T > expected , Collection < T > actual ) { String msg = String . format ( _STR , expected . toString ( ) , actual . toString ( ) ) ; assertEquals ( msg , expected . size ( ) , actual . size ( ) ) ; for ( T e : expected ) { if ( ! actual . contains ( e ) ) { msg = String . format ( _STR + _STR , e , expected , actual ) ; fail ( msg ) ; } } }
private static boolean hasResponseBody ( int requestMethod , int responseCode ) { return requestMethod != Request . Method . HEAD && ! ( HttpStatus . SC_CONTINUE <= responseCode && responseCode < HttpStatus . SC_OK ) && responseCode != HttpStatus . SC_NO_CONTENT && responseCode != HttpStatus . SC_NOT_MODIFIED ; }
public int availableInProcess ( ) { return Math . max ( _NUM , maxInProcess - pending . size ( ) ) ; }
public void add ( double x ) { Cell [ ] as ; long b , v ; int m ; Cell a ; if ( ( as = cells ) != null || ! casBase ( b = base , Double . doubleToRawLongBits ( Double . longBitsToDouble ( b ) + x ) ) ) { boolean uncontended = _BOOL ; if ( as == null || ( m = as . length - _NUM ) < _NUM || ( a = as [ getProbe ( ) & m ] ) == null || ! ( uncontended = a . cas ( v = a . value , Double . doubleToRawLongBits ( Double . longBitsToDouble ( v ) + x ) ) ) ) doubleAccumulate ( x , null , uncontended ) ; } }
public boolean shouldExecuteAction ( ) { if ( delay <= _NUM ) { return _BOOL ; } long timePassed = System . currentTimeMillis ( ) - lastActionExecuted ; if ( timePassed > delay * _NUM ) { lastActionExecuted = System . currentTimeMillis ( ) ; return _BOOL ; } return _BOOL ; }
public static int moveByWord ( String text , int column , boolean forward , boolean returnCursorAtEnd ) { int curColumn = column ; int length = text . length ( ) ; int direction = forward ? _NUM : - _NUM ; boolean farWordEnd = ( ( direction == _NUM && returnCursorAtEnd ) || ( direction == - _NUM && ! returnCursorAtEnd ) ) ; boolean foundEarlyMatch = _BOOL ; if ( ! UnicodeUtils . isWhitespace ( text . charAt ( curColumn ) ) ) { curColumn = skipNonwhitespaceSimilar ( text , curColumn , forward ) ; if ( farWordEnd && curColumn - direction != column ) { curColumn -= direction ; foundEarlyMatch = _BOOL ; } } if ( ! foundEarlyMatch && curColumn >= _NUM && curColumn < length ) { curColumn = skipWhitespace ( text , curColumn , forward ) ; if ( farWordEnd && curColumn >= _NUM && curColumn < length ) { curColumn = skipNonwhitespaceSimilar ( text , curColumn , forward ) - direction ; } } if ( curColumn < _NUM || curColumn >= length ) { return - _NUM ; } return curColumn ; }
protected void handleOrDeferMessage ( DistributionMessage msg ) { synchronized ( startupLock ) { if ( beingSick || playingDead ) { if ( msg . containsRegionContentChange ( ) || msg instanceof PartitionMessageWithDirectReply ) { startupMessages . add ( new StartupEvent ( msg ) ) ; return ; } } if ( ! processingEvents ) { startupMessages . add ( new StartupEvent ( msg ) ) ; return ; } } dispatchMessage ( msg ) ; }
public boolean zoneExportRemoveVolumes ( List < NetworkZoningParam > zoningParams , Collection < URI > volumeURIs , String stepId ) { NetworkZoningParam zoningParam = zoningParams . get ( _NUM ) ; _log . info ( String . format ( _STR , zoningParam . getExportGroupDisplay ( ) , volumeURIs . toString ( ) ) ) ; return doZoneExportMasksDelete ( zoningParams , volumeURIs , stepId ) ; }
private void shutdown ( ) { if ( nbestListWriter != null ) { logger . info ( _STR ) ; nbestListWriter . close ( ) ; } if ( alignmentWriter != null ) { logger . info ( _STR ) ; alignmentWriter . close ( ) ; } }
@ Override public void paintIcon ( Component c , Graphics g , int x , int y ) { Painter painter = ( Painter ) UIManager . get ( prefix + _STR + key ) ; if ( painter != null ) { JComponent jc = ( c instanceof JComponent ) ? ( JComponent ) c : null ; Graphics2D gfx = ( Graphics2D ) g ; gfx . translate ( x , y ) ; painter . paint ( gfx , jc , width , height ) ; gfx . translate ( - x , - y ) ; } }
protected void zoomImageToPosition ( float scale , float centerX , float centerY , long durationMs ) { if ( scale > getMaxScale ( ) ) { scale = getMaxScale ( ) ; } final float oldScale = getCurrentScale ( ) ; final float deltaScale = scale - oldScale ; post ( mZoomImageToPositionRunnable = new ZoomImageToPosition ( CropImageView . this , durationMs , oldScale , deltaScale , centerX , centerY ) ) ; }
public List < Map < String , String > > list ( Database conn ) throws SQLException { ResultSet rs = null ; Statement statement = conn . createStatement ( ) ; List < Map < String , String > > shardToChannels = new ArrayList < Map < String , String > > ( ) ; try { rs = statement . executeQuery ( select ) ; while ( rs . next ( ) ) { Map < String , String > shard = new HashMap < String , String > ( ) ; shard . put ( ShardChannelTable . SHARD_ID_COL , rs . getString ( ShardChannelTable . SHARD_ID_COL ) ) ; shard . put ( ShardChannelTable . CHANNEL_COL , rs . getString ( ShardChannelTable . CHANNEL_COL ) ) ; shardToChannels . add ( shard ) ; } } finally { close ( rs ) ; close ( statement ) ; } return shardToChannels ; }
public Boolean isHidden ( File f ) { String name = f . getName ( ) ; if ( ( name != null ) && ! name . equals ( _STR ) && ( name . charAt ( _NUM ) == _STR ) ) { return Boolean . TRUE ; } else { return Boolean . FALSE ; } }
private boolean scrollViewCanScrollVertically ( ScrollView scrollView , int direction ) { final int offset = Math . max ( _NUM , scrollView . getScrollY ( ) ) ; final int range = computeVerticalScrollRange ( scrollView ) - scrollView . getHeight ( ) ; if ( range == _NUM ) return _BOOL ; if ( direction < _NUM ) { return offset > _NUM ; } else { return offset < range - _NUM ; } }
public JarInfo loadJar ( ) throws IOException { ZipInputStream zis = null ; Manifest mf = null ; boolean empty = _BOOL ; try { zis = new ZipInputStream ( jarStream ) ; ZipEntry ent = null ; while ( ( ent = zis . getNextEntry ( ) ) != null ) { empty = _BOOL ; String name = ent . getName ( ) ; if ( Manifest . isManifestName ( name ) ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; byte buffer [ ] = new byte [ _NUM ] ; for ( ; ; ) { int len = zis . read ( buffer ) ; if ( len < _NUM ) { break ; } baos . write ( buffer , _NUM , len ) ; } byte [ ] buf = baos . toByteArray ( ) ; mf = new Manifest ( buf ) ; } } } catch ( IOException ex ) { throw ex ; } catch ( Throwable th ) { th . printStackTrace ( ) ; throw new IOException ( _STR + th ) ; } finally { if ( zis != null ) { try { zis . close ( ) ; } catch ( Exception ex ) { } } } if ( empty ) { throw new IOException ( _STR ) ; } JarInfo ji = createJarInfo ( mf ) ; return ji ; }
public void invalidateTitleSortable ( ) { for ( Movie movie : new ArrayList < > ( movieList ) ) { movie . clearTitleSortable ( ) ; } }
public void addRow ( Assignment head , double prob ) { if ( prob < _NUM || prob > _NUM ) { return ; } headVars . addAll ( head . getVariables ( ) ) ; table . put ( head , prob ) ; }
public byte [ ] createJarFromFileContent ( final String fileName , final String content ) throws IOException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; JarOutputStream jarOutputStream = new JarOutputStream ( byteArrayOutputStream ) ; JarEntry entry = new JarEntry ( fileName ) ; entry . setTime ( System . currentTimeMillis ( ) ) ; jarOutputStream . putNextEntry ( entry ) ; jarOutputStream . write ( content . getBytes ( ) ) ; jarOutputStream . closeEntry ( ) ; jarOutputStream . close ( ) ; return byteArrayOutputStream . toByteArray ( ) ; }
private boolean goTo ( long day , boolean animate , boolean setSelected , boolean forceScroll ) { if ( setSelected ) { mSelectedDay . setTimeInMillis ( day ) ; } mTempDay . setTimeInMillis ( day ) ; final int position = getPositionFromDay ( day ) ; View child ; int i = _NUM ; int top = _NUM ; do { child = getChildAt ( i ++ ) ; if ( child == null ) { break ; } top = child . getTop ( ) ; } while ( top < _NUM ) ; int selectedPosition ; if ( child != null ) { selectedPosition = getPositionForView ( child ) ; } else { selectedPosition = _NUM ; } if ( setSelected ) { mAdapter . setSelectedDay ( mSelectedDay ) ; } if ( position != selectedPosition || forceScroll ) { setMonthDisplayed ( mTempDay ) ; mPreviousScrollState = OnScrollListener . SCROLL_STATE_FLING ; if ( animate ) { smoothScrollToPositionFromTop ( position , LIST_TOP_OFFSET , GOTO_SCROLL_DURATION ) ; return _BOOL ; } else { postSetSelection ( position ) ; } } else if ( setSelected ) { setMonthDisplayed ( mSelectedDay ) ; } return _BOOL ; }
public boolean search ( V v ) { int h = hashMethod . hash ( v ) ; LinkedList < V > list = ( LinkedList < V > ) table [ h ] ; if ( list == null ) { return _BOOL ; } return list . contains ( v ) ; }
public void closeJDBCConnection ( Connection conn ) { try { if ( conn != null ) { conn . close ( ) ; } } catch ( SQLException sqle ) { subclassLogWrapper ( _STR ) ; } }
@ Override public void messageItemDetails ( String strClass , String item , String description , String [ ] msgOption , int [ ] msgNumber , int defaultOption ) { HashMap < Integer , String > options = new HashMap < > ( msgOption . length ) ; for ( int i = _NUM ; i < msgOption . length ; i ++ ) { options . put ( msgNumber [ i ] , msgOption [ i ] ) ; } messageItemDetails ( strClass , description , item , options , defaultOption ) ; }
public void addListener ( ColorMapListener listener ) { listeners . add ( listener ) ; }
protected void computePDists ( Relation < O > relation , KNNQuery < O > knn , WritableDoubleDataStore pdists ) { FiniteProgress prdsProgress = LOG . isVerbose ( ) ? new FiniteProgress ( _STR , relation . size ( ) , LOG ) : null ; for ( DBIDIter iditer = relation . iterDBIDs ( ) ; iditer . valid ( ) ; iditer . advance ( ) ) { final KNNList neighbors = knn . getKNNForDBID ( iditer , kreach + _NUM ) ; int ks = _NUM ; double ssum = _NUM ; for ( DoubleDBIDListIter neighbor = neighbors . iter ( ) ; neighbor . valid ( ) && ks < kreach ; neighbor . advance ( ) ) { if ( DBIDUtil . equal ( neighbor , iditer ) ) { continue ; } final double d = neighbor . doubleValue ( ) ; ssum += d * d ; ks ++ ; } double pdist = ks > _NUM ? Math . sqrt ( ssum / ks ) : _NUM ; pdists . putDouble ( iditer , pdist ) ; LOG . incrementProcessed ( prdsProgress ) ; } LOG . ensureCompleted ( prdsProgress ) ; }
private static String appendIfMissing ( final String str , final CharSequence suffix , final boolean ignoreCase , final CharSequence ... suffixes ) { if ( str == null || isEmpty ( suffix ) || endsWith ( str , suffix , ignoreCase ) ) { return str ; } if ( suffixes != null && suffixes . length > _NUM ) { for ( final CharSequence s : suffixes ) { if ( endsWith ( str , s , ignoreCase ) ) { return str ; } } } return str + suffix . toString ( ) ; }
private JSONArray requestAllFileSystems ( ) throws IOException , JSONException { JSONArray ret = new JSONArray ( ) ; for ( Filesystem fs : filesystems ) { ret . put ( fs . getRootEntry ( ) ) ; } return ret ; }
ExternalProblem ( Process process ) { this ( process . getInputStream ( ) , process . getOutputStream ( ) ) ; RedirectStream . redirect ( process . getErrorStream ( ) , System . err ) ; }
protected static boolean networkMonitorExist ( String nwMonName ) { String classMethod = _STR ; if ( debug . messageEnabled ( ) ) { debug . message ( classMethod + _STR + nwMonName ) ; } if ( ( nwMonName == null ) || ( nwMonName . length ( ) == _NUM ) ) { if ( debug . warningEnabled ( ) ) { debug . warning ( classMethod + _STR ) ; } return _BOOL ; } Set < String > ntwStats = NetworkMonitor . getInstanceNames ( ) ; String ss = nwMonName . toLowerCase ( ) ; if ( ntwStats . contains ( ss ) ) { return _BOOL ; } else { return _BOOL ; } }
protected boolean error_recovery ( boolean debug ) throws java . lang . Exception { if ( debug ) debug_message ( _STR ) ; if ( ! find_recovery_config ( debug ) ) { if ( debug ) debug_message ( _STR ) ; return _BOOL ; } read_lookahead ( ) ; for ( ; ; ) { if ( debug ) debug_message ( _STR ) ; if ( try_parse_ahead ( debug ) ) { break ; } if ( lookahead [ _NUM ] . sym == EOF_sym ( ) ) { if ( debug ) debug_message ( _STR ) ; return _BOOL ; } if ( debug ) debug_message ( _STR + lookahead [ _NUM ] . sym ) ; restart_lookahead ( ) ; } if ( debug ) debug_message ( _STR ) ; parse_lookahead ( debug ) ; return _BOOL ; }
public void andWith ( List < QueryPredicate > predicates ) { children . addAll ( predicates ) ; }
public void addRoll ( MMRandom rng ) { int result = rng . randomInt ( this . faces ) + this . min ; all . addElement ( new Integer ( result ) ) ; this . total += result ; if ( keep != - _NUM && all . size ( ) >= keep ) { this . total = _NUM ; Collections . sort ( all , Collections . reverseOrder ( ) ) ; for ( int i = _NUM ; i < keep ; i ++ ) { this . total += all . get ( i ) ; } } }
public boolean checkCanonicalUserOptions ( ) { boolean result ; OptionHandler handler ; String [ ] userOptions ; String [ ] userOptionsCheck ; print ( _STR ) ; try { handler = getDefaultHandler ( ) ; handler . setOptions ( getUserOptions ( ) ) ; if ( getDebug ( ) ) { print ( _STR ) ; } userOptions = handler . getOptions ( ) ; if ( getDebug ( ) ) { println ( printOptions ( userOptions ) ) ; } if ( getDebug ( ) ) { println ( _STR ) ; } handler . setOptions ( userOptions . clone ( ) ) ; if ( getDebug ( ) ) { println ( _STR ) ; } userOptionsCheck = handler . getOptions ( ) ; compareOptions ( userOptions , userOptionsCheck ) ; println ( _STR ) ; result = _BOOL ; } catch ( Exception e ) { println ( _STR ) ; result = _BOOL ; if ( getDebug ( ) ) { println ( e ) ; } } return result ; }
public static void closeQuietly ( final Closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( final RuntimeException rethrown ) { throw rethrown ; } catch ( final Exception ignored ) { } } }
public static void pushEncryptedMessage ( final TextSecureEnvelope envelope ) { while ( _BOOL ) { try { queue . put ( envelope ) ; return ; } catch ( final InterruptedException e ) { } } }
public static int randomRangeInt ( int min , int max ) { return ( int ) ( Math . random ( ) < _NUM ? ( ( _NUM - Math . random ( ) ) * ( max - min ) + min ) : ( Math . random ( ) * ( max - min ) + min ) ) ; }
public void test_simplePrematureClose ( ) { Striterator iter = new Striterator ( m_data . iterator ( ) ) ; int i = _NUM ; while ( iter . hasNext ( ) ) { iter . next ( ) ; if ( ++ i == _NUM ) { iter . close ( ) ; assertTrue ( ! iter . hasNext ( ) ) ; } } assertTrue ( ! iter . isOpen ( ) ) ; assertTrue ( i == _NUM ) ; }
public void pushDrawList ( PspGeList list ) { synchronized ( drawListQueue ) { drawListQueue . add ( list ) ; } }
private void populateTaskList ( Volume source , Map < BlockMirror , Volume > groupMirrorSourceMap , TaskList taskList , String taskId , ResourceOperationTypeEnum operationType ) { Set < URI > groupSet = new HashSet < URI > ( ) ; addTask ( taskList , source , taskId , operationType ) ; for ( Entry < BlockMirror , Volume > entry : groupMirrorSourceMap . entrySet ( ) ) { BlockMirror mirror = entry . getKey ( ) ; Volume mirrorSource = entry . getValue ( ) ; if ( source . isInCG ( ) && null != taskList . getTaskList ( ) ) { groupSet . add ( mirrorSource . getConsistencyGroup ( ) ) ; } } List < BlockConsistencyGroup > groups = _dbClient . queryObject ( BlockConsistencyGroup . class , groupSet ) ; for ( BlockConsistencyGroup group : groups ) { addTask ( taskList , group , taskId , operationType ) ; } }
public static Tuple max ( Iterator tuples , String field , Comparator cmp ) { Tuple t = null , tmp ; Object min = null ; if ( tuples . hasNext ( ) ) { t = ( Tuple ) tuples . next ( ) ; min = t . get ( field ) ; } while ( tuples . hasNext ( ) ) { tmp = ( Tuple ) tuples . next ( ) ; Object obj = tmp . get ( field ) ; if ( cmp . compare ( obj , min ) > _NUM ) { t = tmp ; min = obj ; } } return t ; }
public String clusterDefinitionsTipText ( ) { return _STR ; }
public void testConstructorSignBytesPositive1 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM } ; int aSign = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , aNumber . signum ( ) ) ; }
public void fling ( int startX , int startY , int velocityX , int velocityY , int minX , int maxX , int minY , int maxY , int overX , int overY ) { if ( mFlywheel && ! isFinished ( ) ) { float oldVelocityX = mScrollerX . mCurrVelocity ; float oldVelocityY = mScrollerY . mCurrVelocity ; if ( Math . signum ( velocityX ) == Math . signum ( oldVelocityX ) && Math . signum ( velocityY ) == Math . signum ( oldVelocityY ) ) { velocityX += oldVelocityX ; velocityY += oldVelocityY ; } } mMode = FLING_MODE ; mScrollerX . fling ( startX , velocityX , minX , maxX , overX ) ; mScrollerY . fling ( startY , velocityY , minY , maxY , overY ) ; }
public Map < String , Object > convertDataToObjects ( Map < String , String > data ) { Map < String , Object > results = new HashMap < > ( ) ; if ( data != null ) { for ( String key : data . keySet ( ) ) { results . put ( key , data . get ( key ) ) ; } } return results ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
public void addListener ( NavigatorListener listener ) { listeners . add ( listener ) ; }
public void closeStream ( ) { CarbonUtil . closeStreams ( stream ) ; executorService . shutdown ( ) ; }
public double patience ( int k , F f , int N ) { double pf = p ( f ) ; BinomialDistribution dist = new BinomialDistribution ( null , N , pf ) ; double p0 = Math . pow ( _NUM - pf , N ) ; return _NUM - ( dist . cumulativeProbability ( k - _NUM ) - p0 ) / ( _NUM - p0 ) ; }
public static List seriesNameListFromDataArray ( Object [ ] [ ] data ) { int seriesCount = data . length ; List seriesNameList = new java . util . ArrayList ( seriesCount ) ; for ( int i = _NUM ; i < seriesCount ; i ++ ) { seriesNameList . add ( _STR + ( i + _NUM ) ) ; } return seriesNameList ; }
@ Override public int read ( char b [ ] , int off , int len ) throws IOException { ensureOpen ( ) ; if ( ( off < _NUM ) || ( off > b . length ) || ( len < _NUM ) || ( ( off + len ) > b . length ) || ( ( off + len ) < _NUM ) ) { throw new IndexOutOfBoundsException ( ) ; } else if ( len == _NUM ) { return _NUM ; } if ( pos >= count ) { return - _NUM ; } if ( pos + len > count ) { len = count - pos ; } if ( len <= _NUM ) { return _NUM ; } System . arraycopy ( buf , pos , b , off , len ) ; pos += len ; return len ; }
public static void CF6 ( double [ ] x , double [ ] f , double [ ] c , int nx ) { double sum1 = _NUM ; double sum2 = _NUM ; double yj ; for ( int j = _NUM ; j <= nx ; j ++ ) { if ( j % _NUM == _NUM ) { yj = x [ j - _NUM ] - _NUM * x [ _NUM ] * Math . cos ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; sum1 += yj * yj ; } else { yj = x [ j - _NUM ] - _NUM * x [ _NUM ] * Math . sin ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; sum2 += yj * yj ; } } f [ _NUM ] = x [ _NUM ] + sum1 ; f [ _NUM ] = ( _NUM - x [ _NUM ] ) * ( _NUM - x [ _NUM ] ) + sum2 ; c [ _NUM ] = x [ _NUM ] - _NUM * x [ _NUM ] * Math . sin ( _NUM * x [ _NUM ] * PI + _NUM * PI / nx ) - MYSIGN ( ( x [ _NUM ] - _NUM ) * ( _NUM - x [ _NUM ] ) ) * Math . sqrt ( Math . abs ( ( x [ _NUM ] - _NUM ) * ( _NUM - x [ _NUM ] ) ) ) ; c [ _NUM ] = x [ _NUM ] - _NUM * x [ _NUM ] * Math . sin ( _NUM * x [ _NUM ] * PI + _NUM * PI / nx ) - MYSIGN ( _NUM * Math . sqrt ( _NUM - x [ _NUM ] ) - _NUM * ( _NUM - x [ _NUM ] ) ) * Math . sqrt ( Math . abs ( _NUM * Math . sqrt ( _NUM - x [ _NUM ] ) - _NUM * ( _NUM - x [ _NUM ] ) ) ) ; }
public static void f ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_FATAL ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . wtf ( tag , msg ) ; }
private static void expandNumberAt ( String numberString , int startIndex , WordRelation wordRelation ) { expandNumber ( numberString . substring ( startIndex , numberString . length ( ) ) , wordRelation ) ; }
public static boolean nullEquals ( String s1 , String s2 ) { return ( s1 == null ? s2 == null : s1 . equals ( s2 ) ) ; }
@ Override public void run ( ) { MultipleObjectsBundle data = generator . loadData ( ) ; if ( LOG . isVerbose ( ) ) { LOG . verbose ( _STR ) ; } try { if ( outputFile . exists ( ) && LOG . isVerbose ( ) ) { LOG . verbose ( _STR + outputFile + _STR + _STR ) ; } try ( OutputStreamWriter outStream = new FileWriter ( outputFile , _BOOL ) ) { writeClusters ( outStream , data ) ; } } catch ( IOException e ) { throw new AbortException ( _STR , e ) ; } if ( LOG . isVerbose ( ) ) { LOG . verbose ( _STR ) ; } }
private boolean usedAllRule17Directors ( Set < String > allocatedDirectors , PortAllocationContext context ) { Set < String > rule17Directors = getRule17Directors ( context ) ; for ( String director : allocatedDirectors ) { rule17Directors . remove ( director ) ; } return rule17Directors . isEmpty ( ) ; }
public void stop ( ) { synchronized ( privateInstanceLock ) { if ( connectionAcceptThread == null ) { return ; } } isStopped . set ( _BOOL ) ; try { connectionAcceptThread . interrupt ( ) ; connectionAcceptThread . join ( ) ; } catch ( InterruptedException e ) { } try { serverSocket . close ( ) ; } catch ( IOException e ) { } }
private static String expandSystemIdStrictOn ( String systemId , String baseSystemId ) throws URI . MalformedURIException { URI systemURI = new URI ( systemId , _BOOL ) ; if ( systemURI . isAbsoluteURI ( ) ) { return systemId ; } URI baseURI = null ; if ( baseSystemId == null || baseSystemId . length ( ) == _NUM ) { baseURI = getUserDir ( ) ; } else { baseURI = new URI ( baseSystemId , _BOOL ) ; if ( ! baseURI . isAbsoluteURI ( ) ) { baseURI . absolutize ( getUserDir ( ) ) ; } } systemURI . absolutize ( baseURI ) ; return systemURI . toString ( ) ; }
public static void free ( DMessage msg ) { int index = size2Index ( msg . getSize ( ) ) ; msg . clear ( ) ; if ( index < _NUM ) ; else if ( m_cache [ index ] != null ) ; else m_cache [ index ] = msg ; }
public boolean equalsIgnoreCase ( final StrBuilder other ) { if ( this == other ) { return _BOOL ; } if ( this . size != other . size ) { return _BOOL ; } final char thisBuf [ ] = this . buffer ; final char otherBuf [ ] = other . buffer ; for ( int i = size - _NUM ; i >= _NUM ; i -- ) { final char c1 = thisBuf [ i ] ; final char c2 = otherBuf [ i ] ; if ( c1 != c2 && Character . toUpperCase ( c1 ) != Character . toUpperCase ( c2 ) ) { return _BOOL ; } } return _BOOL ; }
protected static Long convertUuidToLong ( UUID uuid ) { if ( uuid == null ) { return null ; } Long convertedUuid ; if ( uuid . version ( ) == _NUM ) { convertedUuid = uuid . timestamp ( ) ; } else { convertedUuid = uuid . getMostSignificantBits ( ) ; } return convertedUuid ; }
public void addVMArguments ( String vmArgumentName , String vmArgumentValue ) { VmArgumentData vmArg = new VmArgumentData ( vmArgumentName , vmArgumentValue ) ; vmSet . add ( vmArg ) ; }
private void applyTo ( ClassVisitor v , Field f ) { if ( Log . isLoggingOn ( ) ) { Log . logLine ( String . format ( _STR , f . toGenericString ( ) ) ) ; } v . visit ( f ) ; }
public void testCompareToEqualNeg ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; assertEquals ( _NUM , aNumber . compareTo ( bNumber ) ) ; }
public void testScreenshot ( ) throws Exception { Log . d ( LOG_TAG , _STR ) ; ScreenshotStubActivity activity = getActivity ( ) ; assertNotNull ( activity ) ; File screenshotDir = getScreenshotDir ( ) ; NewScreenshotObserver observer = new NewScreenshotObserver ( screenshotDir . getAbsolutePath ( ) ) ; observer . startWatching ( ) ; takeScreenshot ( ) ; if ( observer . getCreatedPath ( ) == null ) { synchronized ( observer ) { observer . wait ( SCREEN_WAIT_TIME_SEC * _NUM ) ; } } assertNotNull ( String . format ( _STR , SCREEN_WAIT_TIME_SEC ) , observer . getCreatedPath ( ) ) ; File screenshotFile = new File ( screenshotDir , observer . getCreatedPath ( ) ) ; try { assertTrue ( String . format ( _STR , screenshotFile . getName ( ) ) , screenshotFile . isFile ( ) ) ; assertTrue ( String . format ( _STR , screenshotFile . getName ( ) ) , isValidImage ( screenshotFile ) ) ; } finally { screenshotFile . delete ( ) ; } }
public TaskResourceRep unlinkTargetVolumesFromSnapshotSession ( URI snapSessionURI , SnapshotSessionUnlinkTargetsParam param ) { return unlinkTargetVolumesFromSnapshotSession ( snapSessionURI , param , OperationTypeEnum . UNLINK_SNAPSHOT_SESSION_TARGET ) ; }
private List reverse ( List seq ) { LinkedList newSeq = new LinkedList ( ) ; for ( Iterator i = seq . iterator ( ) ; i . hasNext ( ) ; ) { DirectedEdge de = ( DirectedEdge ) i . next ( ) ; newSeq . addFirst ( de . getSym ( ) ) ; } return newSeq ; }
protected LocPathIterator changePartToRef ( final QName uniquePseudoVarName , WalkingIterator wi , final int numSteps , final boolean isGlobal ) { Variable var = new Variable ( ) ; var . setQName ( uniquePseudoVarName ) ; var . setIsGlobal ( isGlobal ) ; if ( isGlobal ) { ElemTemplateElement elem = getElemFromExpression ( wi ) ; StylesheetRoot root = elem . getStylesheetRoot ( ) ; Vector vars = root . getVariablesAndParamsComposed ( ) ; var . setIndex ( vars . size ( ) - _NUM ) ; } AxesWalker walker = wi . getFirstWalker ( ) ; for ( int i = _NUM ; i < numSteps ; i ++ ) { assertion ( null != walker , _STR ) ; walker = walker . getNextWalker ( ) ; } if ( null != walker ) { FilterExprWalker few = new FilterExprWalker ( wi ) ; few . setInnerExpression ( var ) ; few . exprSetParent ( wi ) ; few . setNextWalker ( walker ) ; walker . setPrevWalker ( few ) ; wi . setFirstWalker ( few ) ; return wi ; } else { FilterExprIteratorSimple feis = new FilterExprIteratorSimple ( var ) ; feis . exprSetParent ( wi . exprGetParent ( ) ) ; return feis ; } }
@ Deprecated @ Override public String readLine ( ) throws IOException { StringBuilder b = new StringBuilder ( _NUM ) ; int chr ; while ( ( chr = read ( ) ) >= _NUM ) { if ( chr != _STR ) { b . append ( ( char ) chr ) ; } else { return b . toString ( ) ; } } return b . toString ( ) ; }
private void addToScene ( final Node items ) { collection . add ( items ) ; }
public String documentationHomePageUrl ( ) { return properties . getProperty ( _STR ) ; }
public static boolean hasTaxonomyInfo ( SequencesReader reader ) { final File taxonFile = new File ( reader . path ( ) , TAXONOMY_FILE ) ; final File mappingFile = new File ( reader . path ( ) , TAXONOMY_TO_SEQUENCE_FILE ) ; if ( taxonFile . exists ( ) && mappingFile . exists ( ) ) { return _BOOL ; } else if ( taxonFile . exists ( ) || mappingFile . exists ( ) ) { throw new NoTalkbackSlimException ( _STR ) ; } else { return _BOOL ; } }
public void removeSelectionListener ( final SelectionListener listener ) { checkWidget ( ) ; if ( listener == null ) { SWT . error ( SWT . ERROR_NULL_ARGUMENT ) ; } listOfSelectionListeners . remove ( listener ) ; }
public void replace ( ClassNode type , int n ) { remove ( n ) ; push ( type ) ; }
public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { submitCycle = _BOOL ; EntitiesModel model = ( EntitiesModel ) getModel ( ) ; AMPropertySheet prop = ( AMPropertySheet ) getChild ( PROPERTY_ATTRIBUTE ) ; String universalId = ( String ) getPageSessionAttribute ( UNIVERSAL_ID ) ; try { Map oldValues = model . getAttributeValues ( universalId , _BOOL ) ; Map values = prop . getAttributeValues ( oldValues , _BOOL , model ) ; String curRealm = ( String ) getPageSessionAttribute ( AMAdminConstants . CURRENT_REALM ) ; model . modifyEntity ( curRealm , universalId , values ) ; setInlineAlertMessage ( CCAlert . TYPE_INFO , _STR , _STR ) ; } catch ( AMConsoleException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , _STR , e . getMessage ( ) ) ; } forwardTo ( ) ; }
private static Boolean isInsidePolygon ( final GeoPoint point , final List < GeoPoint > polyPoints ) { final double latitude = point . getLatitude ( ) ; final double longitude = point . getLongitude ( ) ; final double sinLatitude = Math . sin ( latitude ) ; final double cosLatitude = Math . cos ( latitude ) ; final double sinLongitude = Math . sin ( longitude ) ; final double cosLongitude = Math . cos ( longitude ) ; double arcDistance = _NUM ; Double prevAngle = null ; for ( final GeoPoint polyPoint : polyPoints ) { final Double angle = computeAngle ( polyPoint , sinLatitude , cosLatitude , sinLongitude , cosLongitude ) ; if ( angle == null ) { return null ; } if ( prevAngle != null ) { double angleDelta = angle - prevAngle ; if ( angleDelta < - Math . PI ) { angleDelta += Math . PI * _NUM ; } if ( angleDelta > Math . PI ) { angleDelta -= Math . PI * _NUM ; } if ( Math . abs ( angleDelta - Math . PI ) < Vector . MINIMUM_RESOLUTION ) { return null ; } arcDistance += angleDelta ; } prevAngle = angle ; } if ( prevAngle != null ) { final Double lastAngle = computeAngle ( polyPoints . get ( _NUM ) , sinLatitude , cosLatitude , sinLongitude , cosLongitude ) ; if ( lastAngle == null ) { return null ; } double angleDelta = lastAngle - prevAngle ; if ( angleDelta < - Math . PI ) { angleDelta += Math . PI * _NUM ; } if ( angleDelta > Math . PI ) { angleDelta -= Math . PI * _NUM ; } if ( Math . abs ( angleDelta - Math . PI ) < Vector . MINIMUM_RESOLUTION ) { return null ; } arcDistance += angleDelta ; } if ( Math . abs ( arcDistance ) < Vector . MINIMUM_RESOLUTION ) { return null ; } return arcDistance > _NUM ; }
private Node deleteMax ( Node x ) { if ( x . right == null ) return x . left ; x . right = deleteMax ( x . right ) ; x . size = _NUM + size ( x . left ) + size ( x . right ) ; x . height = _NUM + Math . max ( height ( x . left ) , height ( x . right ) ) ; return balance ( x ) ; }
public void clear ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { for ( Node < E > f = first ; f != null ; ) { f . item = null ; Node < E > n = f . next ; f . prev = null ; f . next = null ; f = n ; } first = last = null ; count = _NUM ; notFull . signalAll ( ) ; } finally { lock . unlock ( ) ; } }
protected void onProgress ( int itemcount , int size ) { }
private TreeNode ( long nodeValue , SnmpMibAgent agent , TreeNode sup ) { this . nodeValue = nodeValue ; this . parent = sup ; agents . addElement ( agent ) ; }
public Week ( Date time ) { this ( time , TimeZone . getDefault ( ) , Locale . getDefault ( ) ) ; }
public CodeAttribute createCode ( ) { CodeAttribute code = new CodeAttribute ( ) ; for ( int i = _NUM ; i < _attributes . size ( ) ; i ++ ) { Attribute attr = _attributes . get ( i ) ; if ( attr instanceof CodeAttribute ) return ( CodeAttribute ) attr ; } return null ; }
public BinaryOut ( String filename ) { try { OutputStream os = new FileOutputStream ( filename ) ; out = new BufferedOutputStream ( os ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
protected ObjectStreamClass readClassDescriptor ( ) throws IOException , ClassNotFoundException { ObjectStreamClass newClassDesc = new ObjectStreamClass ( ) ; String name = input . readUTF ( ) ; if ( name . length ( ) == _NUM ) { throw new IOException ( _STR ) ; } newClassDesc . setName ( name ) ; newClassDesc . setSerialVersionUID ( input . readLong ( ) ) ; newClassDesc . setFlags ( input . readByte ( ) ) ; if ( descriptorHandle == - _NUM ) { descriptorHandle = nextHandle ( ) ; } registerObjectRead ( newClassDesc , descriptorHandle , _BOOL ) ; readFieldDescriptors ( newClassDesc ) ; return newClassDesc ; }
public static boolean createNewFile ( File targetFile ) { if ( targetFile . exists ( ) ) targetFile . delete ( ) ; try { return targetFile . createNewFile ( ) ; } catch ( IOException e ) { return _BOOL ; } }
public void testZeroOne ( ) { byte aBytes [ ] = { _NUM } ; byte bBytes [ ] = { _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . or ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
protected int executePrepareStatement ( List < Column > columns , PreparedStatement statement ) throws SQLException { int bindNo = _NUM ; for ( Column c : columns ) { setColumnValue ( statement , bindNo , c ) ; bindNo ++ ; } return statement . executeUpdate ( ) ; }
public Config ( SamlAuthorityConfiguration samlAuthorityConfig , TokenRestrictions tokenRestrictions , Collection < List < Certificate > > validCerts , long clockTolerance , Collection < IDPConfig > inExternalIdps ) { Validate . notNull ( samlAuthorityConfig ) ; Validate . notNull ( tokenRestrictions ) ; Validate . notEmpty ( validCerts ) ; List < Certificate > authorityCert = samlAuthorityConfig . getSigningCertificateChain ( ) ; boolean authorityCertInValidCerts = _BOOL ; for ( List < Certificate > currentChain : validCerts ) { Validate . notEmpty ( currentChain ) ; Validate . noNullElements ( currentChain ) ; if ( ! authorityCertInValidCerts && currentChain . equals ( authorityCert ) ) { authorityCertInValidCerts = _BOOL ; } } Validate . isTrue ( authorityCertInValidCerts , _STR ) ; Validate . isTrue ( clockTolerance >= _NUM ) ; this . samlAuthorityConfig = samlAuthorityConfig ; this . validCerts = validCerts ; this . clockTolerance = clockTolerance ; this . tokenRestrictions = tokenRestrictions ; HashMap < String , IDPConfig > idpsSet = new HashMap < String , IDPConfig > ( ) ; if ( inExternalIdps != null ) { for ( IDPConfig conf : inExternalIdps ) { if ( conf != null ) { idpsSet . put ( conf . getEntityID ( ) , conf ) ; } } } this . externalIdps = Collections . unmodifiableMap ( idpsSet ) ; }
public static void checkNotEmpty ( String string ) { if ( string . isEmpty ( ) ) { throw new NullPointerException ( ) ; } }
protected void addCommonComponent ( XMLComponent component ) { if ( fCommonComponents . contains ( component ) ) { return ; } fCommonComponents . add ( component ) ; addRecognizedParamsAndSetDefaults ( component ) ; }
public void cancelUnnamedTasks ( ) { if ( unnamedTaskExecutor != null ) { unnamedTaskExecutor . shutdownNow ( ) ; } }
public static double [ ] minmax ( List < Double > values ) { if ( values . size ( ) == _NUM ) { return new double [ _NUM ] ; } double min = values . get ( _NUM ) ; double max = min ; int length = values . size ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { double value = values . get ( i ) ; min = Math . min ( min , value ) ; max = Math . max ( max , value ) ; } return new double [ ] { min , max } ; }
public Criteria createCriteria ( ) { Criteria criteria = createCriteriaInternal ( ) ; if ( oredCriteria . size ( ) == _NUM ) { oredCriteria . add ( criteria ) ; } return criteria ; }
private char readEscapeCharacter ( ) throws IOException { if ( pos == limit && ! fillBuffer ( _NUM ) ) { throw syntaxError ( _STR ) ; } char escaped = buffer [ pos ++ ] ; switch ( escaped ) { case _STR : if ( pos + _NUM > limit && ! fillBuffer ( _NUM ) ) { throw syntaxError ( _STR ) ; } char result = _NUM ; for ( int i = pos , end = i + _NUM ; i < end ; i ++ ) { char c = buffer [ i ] ; result <<= _NUM ; if ( c >= _STR && c <= _STR ) { result += ( c - _STR ) ; } else if ( c >= _STR && c <= _STR ) { result += ( c - _STR + _NUM ) ; } else if ( c >= _STR && c <= _STR ) { result += ( c - _STR + _NUM ) ; } else { throw new NumberFormatException ( _STR + new String ( buffer , pos , _NUM ) ) ; } } pos += _NUM ; return result ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : lineNumber ++ ; lineStart = pos ; case _STR : case _STR : case _STR : case _STR : return escaped ; default : throw syntaxError ( _STR ) ; } }
private void updateParamsForAuth ( String [ ] authNames , List < Pair > queryParams , Map < String , String > headerParams ) { for ( String authName : authNames ) { Authentication auth = authentications . get ( authName ) ; if ( auth == null ) throw new RuntimeException ( _STR + authName ) ; auth . applyToParams ( queryParams , headerParams ) ; } }
private void fixSpannedWithSpaces ( SpannableStringBuilder builder , int widthMeasureSpec , int heightMeasureSpec ) { long startFix = System . currentTimeMillis ( ) ; FixingResult result = addSpacesAroundSpansUntilFixed ( builder , widthMeasureSpec , heightMeasureSpec ) ; if ( result . fixed ) { removeUnneededSpaces ( widthMeasureSpec , heightMeasureSpec , builder , result ) ; } else { fallbackToString ( widthMeasureSpec , heightMeasureSpec ) ; } long fixDuration = System . currentTimeMillis ( ) - startFix ; Logger . d ( TAG , _STR + fixDuration ) ; }
public EventsIntegrationTest ( ) { setResponseLogLengthLimit ( _NUM ) ; dateFormat = new SimpleDateFormat ( _STR ) ; Calendar cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , - _NUM ) ; yesterday = dateFormat . format ( cal . getTime ( ) ) ; yesterday += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , _NUM ) ; today = dateFormat . format ( cal . getTime ( ) ) ; today += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , _NUM ) ; tomorrow = dateFormat . format ( cal . getTime ( ) ) ; tomorrow += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , _NUM ) ; tomorrowPlus3 = dateFormat . format ( cal . getTime ( ) ) ; tomorrowPlus3 += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , - _NUM ) ; yesterdayMinus3 = dateFormat . format ( cal . getTime ( ) ) ; yesterdayMinus3 += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , _NUM ) ; tomorrowPlus5 = dateFormat . format ( cal . getTime ( ) ) ; tomorrowPlus5 += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , - _NUM ) ; yesterdayMinus5 = dateFormat . format ( cal . getTime ( ) ) ; yesterdayMinus5 += _STR ; experiment = ExperimentFactory . createExperiment ( ) ; experiment . startTime = yesterdayMinus3 ; experiment . endTime = tomorrowPlus3 ; experiment . samplingPercent = _NUM ; experiment . label = _STR ; experiment . applicationName = QBO + UUID . randomUUID ( ) ; DefaultNameExclusionStrategy experimentComparisonStrategy = new DefaultNameExclusionStrategy ( _STR , _STR , _STR ) ; experiment . setSerializationStrategy ( experimentComparisonStrategy ) ; }
private void removeBookmarkTrackingIcons ( ) { if ( trackingIcons != null ) { for ( Iterator i = trackingIcons . iterator ( ) ; i . hasNext ( ) ; ) { GutterIconImpl ti = ( GutterIconImpl ) i . next ( ) ; if ( ti . getIcon ( ) == bookmarkIcon ) { i . remove ( ) ; } } } }
public SimpleMetricGroup ( GroupName name , Stream < ? extends Metric > i ) { this ( name , i . collect ( Collectors . < Metric > toList ( ) ) ) ; }
public boolean isInside ( Point point ) { return bounds . contains ( point ) ; }
private void resolveProtocols ( ClassLoader loader ) { ServiceLoader < ProtocolManagerFactory > serviceLoader = ServiceLoader . load ( ProtocolManagerFactory . class , loader ) ; loadProtocolManagerFactories ( serviceLoader ) ; }
public static List < InetAddress > hostAddresses ( ) { List < InetAddress > addrList = new ArrayList < > ( ) ; Enumeration < NetworkInterface > IFCs = null ; try { IFCs = NetworkInterface . getNetworkInterfaces ( ) ; } catch ( SocketException ex ) { log . error ( _STR , ex ) ; } if ( IFCs != null ) { while ( IFCs . hasMoreElements ( ) ) { NetworkInterface IFC = IFCs . nextElement ( ) ; try { if ( IFC . isUp ( ) ) { Enumeration < InetAddress > addresses = IFC . getInetAddresses ( ) ; while ( addresses . hasMoreElements ( ) ) { InetAddress address = addresses . nextElement ( ) ; if ( ! address . isLoopbackAddress ( ) && ! address . isLinkLocalAddress ( ) ) { addrList . add ( address ) ; } } } } catch ( SocketException ex ) { log . error ( _STR , IFC . toString ( ) , ex ) ; } } } return addrList ; }
public final static int caculateInSampleSize ( BitmapFactory . Options options , int rqsW , int rqsH ) { final int height = options . outHeight ; final int width = options . outWidth ; int inSampleSize = _NUM ; if ( rqsW == _NUM || rqsH == _NUM ) return _NUM ; if ( height > rqsH || width > rqsW ) { final int heightRatio = Math . round ( ( float ) height / ( float ) rqsH ) ; final int widthRatio = Math . round ( ( float ) width / ( float ) rqsW ) ; inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio ; } return inSampleSize ; }
public boolean hasStatus ( final StatusID status ) { return statuses . contains ( status ) ; }
@ Override public String toString ( ) { return _STR + _STR + instanceList + _STR + outcomeList + _STR + weightList + _STR + sequenceIds + _STR + sequencePositions + _STR + addingAnotherInstancesAllowed + _STR + totalNonNullFeaturesCount + _STR ; }
static synchronized void computePRF_SSLv3 ( byte [ ] out , byte [ ] secret , byte [ ] seed ) { if ( sha == null ) { init ( ) ; } int pos = _NUM ; int iteration = _NUM ; byte [ ] digest ; while ( pos < out . length ) { byte [ ] pref = new byte [ iteration ] ; Arrays . fill ( pref , ( byte ) ( _NUM + iteration ++ ) ) ; sha . update ( pref ) ; sha . update ( secret ) ; sha . update ( seed ) ; md5 . update ( secret ) ; md5 . update ( sha . digest ( ) ) ; digest = md5 . digest ( ) ; if ( pos + _NUM > out . length ) { System . arraycopy ( digest , _NUM , out , pos , out . length - pos ) ; pos = out . length ; } else { System . arraycopy ( digest , _NUM , out , pos , _NUM ) ; pos += _NUM ; } } }
public void addChannelMap ( ChannelMap channelMap ) { if ( ! mChannelMaps . contains ( channelMap ) ) { mChannelMaps . add ( channelMap ) ; int index = mChannelMaps . indexOf ( channelMap ) ; fireIntervalAdded ( this , index , index ) ; broadcast ( new ChannelMapEvent ( channelMap , Event . ADD ) ) ; } }
@ Override public boolean add ( E o ) { if ( null == o ) { throw new NullPointerException ( ) ; } if ( offer ( o ) ) { return _BOOL ; } throw new IllegalStateException ( ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public Object putResource ( Object key , Object value ) { return ( objectCache . put ( key , value ) ) ; }
public UidRange [ ] parseUidRange ( ) throws DecodingException { CharacterValidator validator = new MessageSetCharValidator ( ) ; String nextWord = consumeWord ( validator , _BOOL ) ; int commaPos = nextWord . indexOf ( _STR ) ; if ( commaPos == - _NUM ) { return new UidRange [ ] { parseUidRange ( nextWord ) } ; } ArrayList < UidRange > rangeList = new ArrayList < UidRange > ( ) ; int pos = _NUM ; while ( commaPos != - _NUM ) { String range = nextWord . substring ( pos , commaPos ) ; UidRange set = parseUidRange ( range ) ; rangeList . add ( set ) ; pos = commaPos + _NUM ; commaPos = nextWord . indexOf ( _STR , pos ) ; } String range = nextWord . substring ( pos ) ; rangeList . add ( parseUidRange ( range ) ) ; List < UidRange > merged = UidRange . mergeRanges ( rangeList ) ; return merged . toArray ( new UidRange [ merged . size ( ) ] ) ; }
private String replaceSuffix ( String value , String toReplace , String changeTo ) { String vvalue ; if ( ( value == null ) || ( toReplace == null ) || ( changeTo == null ) ) { return value ; } vvalue = removeSuffix ( value , toReplace ) ; if ( value . equals ( vvalue ) ) { return value ; } else { return vvalue + changeTo ; } }
private void executeClaimedTask ( ClaimedTask claimedTask ) { if ( ! claimedTask . setStartTime ( new Date ( ) ) ) { _log . info ( _STR , claimedTask . getTask ( ) ) ; return ; } ScanRangeTask task = claimedTask . getTask ( ) ; boolean releaseTask = _BOOL ; try { _scanWorkflow . renewScanRangeTasks ( ImmutableList . of ( task ) , QUEUE_RENEW_TTL ) ; releaseTask = asyncRangeScan ( task ) ; } finally { unclaimTask ( claimedTask , releaseTask ) ; _backgroundService . submit ( _startScansIfAvailableRunnable ) ; } }
private static boolean createNaviDirectory ( ) { final File dir = new File ( ConfigHelper . getConfigurationDirectory ( Constants . COMPANY_NAME , Constants . PROJECT_NAME ) ) ; return dir . exists ( ) || dir . mkdir ( ) ; }
public void updateButtonActionPerformed ( ) { if ( ! readReceiveDelay ( ) ) { return ; } if ( ! readPulseWidth ( ) ) { return ; } if ( ! checkConsistency ( ) ) { return ; } if ( curNode . getNodeType ( ) != nodeType ) { curNode . setNodeType ( nodeType ) ; } setNodeParameters ( ) ; changedNode = _BOOL ; editMode = _BOOL ; curNode = null ; addButton . setVisible ( _BOOL ) ; editButton . setVisible ( _BOOL ) ; deleteButton . setVisible ( _BOOL ) ; doneButton . setVisible ( _BOOL ) ; updateButton . setVisible ( _BOOL ) ; cancelButton . setVisible ( _BOOL ) ; nodeAddrField . setVisible ( _BOOL ) ; nodeAddrStatic . setVisible ( _BOOL ) ; statusText2 . setText ( stdStatus2 ) ; statusText3 . setText ( stdStatus3 ) ; statusText1 . setText ( rb . getString ( _STR ) + _STR + Integer . toString ( nodeAddress ) ) ; errorInStatus1 = _BOOL ; }
public static Class toClass ( ClassFile cf , ClassLoader loader , ProtectionDomain domain ) throws CannotCompileException { try { byte [ ] b = toBytecode ( cf ) ; Method method ; Object [ ] args ; if ( domain == null ) { method = defineClass1 ; args = new Object [ ] { cf . getName ( ) , b , new Integer ( _NUM ) , new Integer ( b . length ) } ; } else { method = defineClass2 ; args = new Object [ ] { cf . getName ( ) , b , new Integer ( _NUM ) , new Integer ( b . length ) , domain } ; } return toClass2 ( method , loader , args ) ; } catch ( RuntimeException e ) { throw e ; } catch ( java . lang . reflect . InvocationTargetException e ) { throw new CannotCompileException ( e . getTargetException ( ) ) ; } catch ( Exception e ) { throw new CannotCompileException ( e ) ; } }
public Iterator < Target > targetIterator ( ) { return targetList . iterator ( ) ; }
private void fitSizeOfScrolledContent ( ) { Point p = scrollComposite . getSize ( ) ; main . setSize ( main . computeSize ( p . x , SWT . DEFAULT ) ) ; }
public int hashCode ( ) { return name . hashCode ( ) ; }
private static Map < String , SnmpOid > buildPoolIndexMap ( SnmpCachedData cached ) { if ( cached == null ) return Collections . emptyMap ( ) ; final SnmpOid [ ] indexes = cached . indexes ; final Object [ ] datas = cached . datas ; final int len = indexes . length ; final Map < String , SnmpOid > m = new HashMap < > ( len ) ; for ( int i = _NUM ; i < len ; i ++ ) { final SnmpOid index = indexes [ i ] ; if ( index == null ) continue ; final MemoryPoolMXBean mpm = ( MemoryPoolMXBean ) datas [ i ] ; if ( mpm == null ) continue ; final String name = mpm . getName ( ) ; if ( name == null ) continue ; m . put ( name , index ) ; } return m ; }
public DCryptoStrength ( JFrame parent ) throws CryptoException { super ( parent , res . getString ( _STR ) , ModalityType . DOCUMENT_MODAL ) ; initComponents ( ) ; }
private Component createSeparator ( ) { JSeparator sep = new JSeparator ( SwingConstants . VERTICAL ) ; sep . setPreferredSize ( new Dimension ( _NUM , _NUM ) ) ; sep . setMinimumSize ( new Dimension ( _NUM , _NUM ) ) ; return sep ; }
public void add ( final T object ) { synchronized ( mLock ) { mList . add ( object ) ; } notifyDataSetChanged ( ) ; }
public void build ( RealmResults < T > results ) { int xIndex = _NUM ; for ( T object : results ) { mValues . add ( buildEntryFromResultObject ( object , xIndex ++ ) ) ; } }
public byte [ ] generateSignature ( ) throws CryptoException , DataLengthException { contentDigest . doFinal ( mDash , mDash . length - hLen - sLen ) ; if ( sLen != _NUM ) { random . nextBytes ( salt ) ; System . arraycopy ( salt , _NUM , mDash , mDash . length - sLen , sLen ) ; } byte [ ] h = new byte [ hLen ] ; contentDigest . update ( mDash , _NUM , mDash . length ) ; contentDigest . doFinal ( h , _NUM ) ; block [ block . length - sLen - _NUM - hLen - _NUM ] = _NUM ; System . arraycopy ( salt , _NUM , block , block . length - sLen - hLen - _NUM , sLen ) ; byte [ ] dbMask = maskGeneratorFunction1 ( h , _NUM , h . length , block . length - hLen - _NUM ) ; for ( int i = _NUM ; i != dbMask . length ; i ++ ) { block [ i ] ^= dbMask [ i ] ; } block [ _NUM ] &= ( _NUM > > ( ( block . length * _NUM ) - emBits ) ) ; System . arraycopy ( h , _NUM , block , block . length - hLen - _NUM , hLen ) ; block [ block . length - _NUM ] = trailer ; byte [ ] b = cipher . processBlock ( block , _NUM , block . length ) ; clearBlock ( block ) ; return b ; }
public static double [ ] [ ] computeWeightMatrix ( final int quanth , final int quants , final int quantb ) { final int dim = quanth * quants * quantb ; assert ( dim > _NUM ) ; final double [ ] [ ] m = new double [ dim ] [ dim ] ; for ( int x = _NUM ; x < dim ; x ++ ) { final int hx = x / ( quantb * quants ) ; final int sx = ( x / quantb ) % quants ; final int bx = x % quantb ; for ( int y = x ; y < dim ; y ++ ) { final int hy = y / ( quantb * quants ) ; final int sy = ( y / quantb ) % quants ; final int by = y % quantb ; final double chx = Math . cos ( ( hx + _NUM ) / quanth * MathUtil . TWOPI ) ; final double chy = Math . cos ( ( hy + _NUM ) / quanth * MathUtil . TWOPI ) ; final double shx = MathUtil . cosToSin ( ( hx + _NUM ) / quanth * MathUtil . TWOPI , chx ) ; final double shy = MathUtil . cosToSin ( ( hy + _NUM ) / quanth * MathUtil . TWOPI , chy ) ; final double cos = chx * ( sx + _NUM ) / quants - chy * ( sy + _NUM ) / quants ; final double sin = shx * ( sx + _NUM ) / quants - shy * ( sy + _NUM ) / quants ; final double db = ( bx - by ) / ( double ) quantb ; final double val = _NUM - Math . sqrt ( ( db * db + sin * sin + cos * cos ) / _NUM ) ; m [ x ] [ y ] = m [ y ] [ x ] = val ; } } return m ; }
public void testNegPosFirstLonger ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; byte bBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . and ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
@ Override public void write ( byte [ ] b , int off , int len ) { if ( ( off < _NUM ) || ( off > b . length ) || ( len < _NUM ) || ( ( off + len ) > b . length ) || ( ( off + len ) < _NUM ) ) { throw new IndexOutOfBoundsException ( ) ; } else if ( len == _NUM ) { return ; } synchronized ( this ) { int newcount = count + len ; int remaining = len ; int inBufferPos = count - filledBufferSum ; while ( remaining > _NUM ) { int part = Math . min ( remaining , currentBuffer . length - inBufferPos ) ; System . arraycopy ( b , off + len - remaining , currentBuffer , inBufferPos , part ) ; remaining -= part ; if ( remaining > _NUM ) { needNewBuffer ( newcount ) ; inBufferPos = _NUM ; } } count = newcount ; } }
public static void openFileIntent ( Context context , File openFile ) { if ( context != null && openFile . exists ( ) ) { try { Intent intent = getFileIntent ( context , openFile ) ; context . startActivity ( intent ) ; } catch ( Exception e ) { GlobalUtils . logThis ( TAG , _STR , e ) ; } } }
public static java . sql . Date toSqlDate ( String date ) { java . util . Date newDate = toDate ( date , _STR ) ; if ( newDate != null ) { return new java . sql . Date ( newDate . getTime ( ) ) ; } else { return null ; } }
private synchronized void rebuildJournal ( ) throws IOException { if ( journalWriter != null ) { journalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFileTmp ) , Util . US_ASCII ) ) ; try { writer . write ( MAGIC ) ; writer . write ( _STR ) ; writer . write ( VERSION_1 ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( appVersion ) ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( valueCount ) ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; for ( Entry entry : lruEntries . values ( ) ) { if ( entry . currentEditor != null ) { writer . write ( DIRTY + _STR + entry . key + _STR ) ; } else { writer . write ( CLEAN + _STR + entry . key + entry . getLengths ( ) + _STR ) ; } } } finally { writer . close ( ) ; } if ( journalFile . exists ( ) ) { renameTo ( journalFile , journalFileBackup , _BOOL ) ; } renameTo ( journalFileTmp , journalFile , _BOOL ) ; journalFileBackup . delete ( ) ; journalWriter = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFile , _BOOL ) , Util . US_ASCII ) ) ; }
public static int round ( final float value ) { final int bits = Float . floatToRawIntBits ( value ) ; final int biasedExp = bits > > _NUM & _NUM ; final int shift = _NUM - _NUM + MAX_FLOAT_EXPONENT - biasedExp ; if ( ( shift & - _NUM ) == _NUM ) { int extendedMantissa = _NUM | bits & _NUM ; if ( bits < _NUM ) { extendedMantissa = - extendedMantissa ; } return ( extendedMantissa > > shift ) + _NUM > > _NUM ; } else { return ( int ) value ; } }
public static PlainText plain ( short text ) { return plain ( Integer . toString ( text ) ) ; }
public AttributeInfo copy ( ConstPool newCp , Map classnames ) { Copier copier = new Copier ( info , constPool , newCp , classnames ) ; try { copier . parameters ( ) ; return new ParameterAnnotationsAttribute ( newCp , getName ( ) , copier . close ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e . toString ( ) ) ; } }
private String createComponentChanges ( ) { StringBuilder builder = new StringBuilder ( ) ; for ( ServiceCatalogDiff serviceCatalogDiff : diffList ) { builder . append ( createApiChanges ( serviceCatalogDiff ) ) ; } return builder . toString ( ) ; }
public static synchronized void it ( String description , UnsafeBlock block ) { it ( description , identity ( ) , block ) ; }
public static boolean isWritable ( final File file , final boolean makeDirs ) { if ( file == null ) { Log . e ( FileUtils . class , _STR ) ; return _BOOL ; } final String fileParentDir = file . getParent ( ) ; if ( ! TextUtils . isEmpty ( fileParentDir ) ) { final File fileDir = new File ( fileParentDir ) ; if ( ! fileDir . exists ( ) ) { if ( makeDirs ) return makeDirsForFile ( file ) ; else return _BOOL ; } } boolean isWritable = _BOOL ; if ( file . exists ( ) ) isWritable = file . canWrite ( ) ; else { try { isWritable = file . createNewFile ( ) ; } catch ( IOException e ) { } if ( isWritable ) isWritable = file . delete ( ) ; } return isWritable ; }
public String toString ( ) { return oid . toString ( ) ; }
private static void createOrgAuthConfig ( String realmName ) throws Exception { String classMethod = _STR ; OrganizationConfigManager org = new OrganizationConfigManager ( ssoToken , realmName ) ; ServiceConfig orgConfig = org . getServiceConfig ( AUTH_SERVICE_NAME ) ; if ( orgConfig != null ) { Map aa = orgConfig . getAttributes ( ) ; if ( debug . messageEnabled ( ) ) { debug . message ( classMethod + _STR + realmName ) ; debug . message ( classMethod + _STR + aa ) ; } String orgName = realmName ; if ( LDAPUtils . isDN ( realmName ) ) { orgName = LDAPUtils . rdnValueFromDn ( realmName ) ; } String authConfigName = orgName + _STR ; String adminAuthConfigName = orgName + _STR ; Set authConfigAttrValue = ( Set ) aa . get ( ATTR_ORG_AUTH_MODULE ) ; if ( debug . messageEnabled ( ) ) { debug . message ( classMethod + _STR + authConfigAttrValue ) ; } Set newVal = new HashSet ( ) ; if ( authConfigAttrValue . size ( ) != _NUM && ! authConfigAttrValue . contains ( authConfigName ) ) { newVal . add ( authConfigName ) ; orgConfig . replaceAttributeValues ( ATTR_ORG_AUTH_MODULE , authConfigAttrValue , newVal ) ; } Set adminConfigAttrValue = ( Set ) aa . get ( ATTR_ADMIN_AUTH_MODULE ) ; if ( debug . messageEnabled ( ) ) { debug . message ( _STR + adminConfigAttrValue ) ; } if ( adminConfigAttrValue . size ( ) != _NUM && ! adminConfigAttrValue . contains ( adminAuthConfigName ) ) { newVal . clear ( ) ; newVal . add ( adminAuthConfigName ) ; orgConfig . replaceAttributeValues ( ATTR_ADMIN_AUTH_MODULE , adminConfigAttrValue , newVal ) ; } aa = orgConfig . getAttributes ( ) ; ServiceConfig s = org . getServiceConfig ( AUTH_CONFIG_SERVICE ) ; ServiceConfig authConfig = s . getSubConfig ( NAMED_CONFIG ) ; if ( authConfig == null ) { s . addSubConfig ( NAMED_CONFIG , null , _NUM , null ) ; authConfig = s . getSubConfig ( NAMED_CONFIG ) ; } Map aMap = new HashMap ( ) ; aMap . put ( ATTR_AUTH_CONFIG , authConfigAttrValue ) ; authConfig . addSubConfig ( authConfigName , SUB_NAMED_CONFIG , _NUM , aMap ) ; aMap . clear ( ) ; aMap . put ( ATTR_AUTH_CONFIG , adminConfigAttrValue ) ; authConfig . addSubConfig ( adminAuthConfigName , SUB_NAMED_CONFIG , _NUM , aMap ) ; } }
public void read ( ByteCodeParser in ) throws IOException { int length = in . readInt ( ) ; _maxStack = in . readShort ( ) ; _maxLocals = in . readShort ( ) ; int codeLength = in . readInt ( ) ; _code = new byte [ codeLength ] ; in . read ( _code , _NUM , codeLength ) ; int exnCount = in . readShort ( ) ; for ( int i = _NUM ; i < exnCount ; i ++ ) { ExceptionItem exn = new ExceptionItem ( ) ; exn . setStart ( in . readShort ( ) & _NUM ) ; exn . setEnd ( in . readShort ( ) & _NUM ) ; exn . setHandler ( in . readShort ( ) & _NUM ) ; exn . setType ( in . readShort ( ) & _NUM ) ; _exceptions . add ( exn ) ; } int attrCount = in . readShort ( ) ; for ( int i = _NUM ; i < attrCount ; i ++ ) { Attribute attr = in . parseAttribute ( ) ; _attributes . add ( attr ) ; } }
public void testSkip ( ) throws Exception { byte [ ] data = new byte [ ] { - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; TestInputStream tis = new TestInputStream ( data ) ; CipherInputStream cis = new CipherInputStream ( tis , new NullCipher ( ) ) ; int expected = data . length ; byte [ ] result = new byte [ expected ] ; int skipped = ( int ) cis . skip ( _NUM ) ; int ind = skipped ; int got = skipped + cis . read ( result , _NUM , _NUM ) ; while ( _BOOL ) { for ( int j = _NUM ; j < got - ind ; j ++ ) { if ( result [ j ] != data [ ind + j ] ) { fail ( _STR + _STR + data [ ind + j ] + _STR + result [ j ] ) ; } } if ( got == expected ) { break ; } else if ( got > expected ) { fail ( _STR + _STR + _STR ) ; } else { ind = got ; got += cis . read ( result , _NUM , _NUM ) ; } } if ( ( got = cis . read ( result , _NUM , _NUM ) ) != - _NUM ) { fail ( _STR + _STR + got + _STR ) ; } }
void addString ( int c ) { if ( strpos == str . length ) { char newstr [ ] = new char [ str . length + _NUM ] ; System . arraycopy ( str , _NUM , newstr , _NUM , str . length ) ; str = newstr ; } str [ strpos ++ ] = ( char ) c ; }
@ Override public int hashCode ( ) { return oid . hashCode ( ) ; }
public CholeskyDecomposition ( Matrix Arg ) { double [ ] [ ] A = Arg . getArray ( ) ; n = Arg . getRowDimension ( ) ; L = new double [ n ] [ n ] ; isspd = ( Arg . getColumnDimension ( ) == n ) ; for ( int j = _NUM ; j < n ; j ++ ) { double [ ] Lrowj = L [ j ] ; double d = _NUM ; for ( int k = _NUM ; k < j ; k ++ ) { double [ ] Lrowk = L [ k ] ; double s = _NUM ; for ( int i = _NUM ; i < k ; i ++ ) { s += Lrowk [ i ] * Lrowj [ i ] ; } Lrowj [ k ] = s = ( A [ j ] [ k ] - s ) / L [ k ] [ k ] ; d = d + s * s ; isspd = isspd & ( A [ k ] [ j ] == A [ j ] [ k ] ) ; } d = A [ j ] [ j ] - d ; isspd = isspd & ( d > _NUM ) ; L [ j ] [ j ] = Math . sqrt ( Math . max ( d , _NUM ) ) ; for ( int k = j + _NUM ; k < n ; k ++ ) { L [ j ] [ k ] = _NUM ; } } }
protected void findCandidateCrossings ( S2Point a , S2Point b , List < Integer > candidateCrossings ) { Preconditions . checkState ( indexComputed ) ; ArrayList < S2CellId > cover = Lists . newArrayList ( ) ; getCovering ( a , b , _BOOL , cover ) ; Set < Integer > uniqueSet = new HashSet < Integer > ( ) ; getEdgesInParentCells ( cover , uniqueSet ) ; getEdgesInChildrenCells ( a , b , cover , uniqueSet ) ; candidateCrossings . clear ( ) ; candidateCrossings . addAll ( uniqueSet ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return TRUE_AS_OF_SECS ; case _NUM : return SOURCE ; case _NUM : return SYSTEM ; default : return null ; } }
public RepositoryLocation ( String repositoryName , String [ ] pathComponents ) throws MalformedRepositoryLocationException { if ( repositoryName == null || repositoryName . isEmpty ( ) ) { throw new MalformedRepositoryLocationException ( _STR ) ; } if ( pathComponents == null ) { throw new MalformedRepositoryLocationException ( _STR ) ; } for ( String pathComp : pathComponents ) { if ( pathComp == null || pathComp . isEmpty ( ) ) { throw new MalformedRepositoryLocationException ( _STR ) ; } } this . repositoryName = repositoryName ; this . path = pathComponents ; }
public void addProperty ( String key , String value ) { carbonProperties . setProperty ( key , value ) ; }
protected JavaElementDelta createDeltaTree ( IJavaElement element , JavaElementDelta delta ) { JavaElementDelta childDelta = delta ; ArrayList ancestors = getAncestors ( element ) ; if ( ancestors == null ) { if ( equalsAndSameParent ( delta . getElement ( ) , getElement ( ) ) ) { this . kind = delta . kind ; this . changeFlags = delta . changeFlags ; this . movedToHandle = delta . movedToHandle ; this . movedFromHandle = delta . movedFromHandle ; } } else { for ( int i = _NUM , size = ancestors . size ( ) ; i < size ; i ++ ) { IJavaElement ancestor = ( IJavaElement ) ancestors . get ( i ) ; JavaElementDelta ancestorDelta = new JavaElementDelta ( ancestor ) ; ancestorDelta . addAffectedChild ( childDelta ) ; childDelta = ancestorDelta ; } } return childDelta ; }
@ Override public String toString ( ) { return getTitle ( ) ; }
public int size ( ) { if ( hmap == null ) { return _NUM ; } return hmap . size ( ) ; }
public static String replace ( String inString , String oldPattern , String newPattern ) { if ( ! hasLength ( inString ) || ! hasLength ( oldPattern ) || newPattern == null ) { return inString ; } StringBuilder sb = new StringBuilder ( ) ; int pos = _NUM ; int index = inString . indexOf ( oldPattern ) ; int patLen = oldPattern . length ( ) ; while ( index >= _NUM ) { sb . append ( inString . substring ( pos , index ) ) ; sb . append ( newPattern ) ; pos = index + patLen ; index = inString . indexOf ( oldPattern , pos ) ; } sb . append ( inString . substring ( pos ) ) ; return sb . toString ( ) ; }
public boolean coordinateInZone ( Id < ActivityFacility > zoneID , Coord coordinate ) { Point point = MGC . xy2Point ( coordinate . getX ( ) , coordinate . getY ( ) ) ; return pointInZone ( zoneID , point ) ; }
public String associatorTipText ( ) { return _STR ; }
public XwavesLabelfileReader ( Reader reader ) throws IOException { this . reader = new BufferedReader ( reader ) ; parseLabels ( ) ; reader . close ( ) ; }
public static double parseDoubleDefault ( String s , double def ) { if ( s == null ) { return def ; } try { return Double . parseDouble ( s ) ; } catch ( NumberFormatException e ) { return def ; } }
public static void registerApp ( int application , String appName ) throws AppIDException { if ( ( application & APP_ID_MASK ) != application ) { throw new InvalidAppIDValueException ( application ) ; } String oldApp = appIdMap . putIfAbsent ( application , appName ) ; if ( oldApp != null && ! oldApp . equals ( appName ) ) { throw new AppIDInUseException ( application , oldApp , appName ) ; } }
public boolean putProfile ( Profile profile ) { return putProfile ( profile , _BOOL ) ; }
public void print ( char c ) { writer . print ( c ) ; }
public void initBlockViews ( ) { if ( mWorkspaceView != null ) { List < Block > rootBlocks = mWorkspace . getRootBlocks ( ) ; ConnectionManager connManager = mWorkspace . getConnectionManager ( ) ; for ( int i = _NUM ; i < rootBlocks . size ( ) ; i ++ ) { BlockGroup bg = mViewFactory . buildBlockGroupTree ( rootBlocks . get ( i ) , connManager , mTouchHandler ) ; mWorkspaceView . addView ( bg ) ; } } }
protected void clearAllTrails ( SSOTokenID tokenID ) { boolean removed = _BOOL ; String key = tokenID . toString ( ) ; synchronized ( mapTokenIDs ) { removed = ( mapTokenIDs . remove ( key ) != null ) ; } }
public DNetscapeCaRevocationUrl ( JDialog parent , byte [ ] value ) throws IOException { super ( parent ) ; setTitle ( res . getString ( _STR ) ) ; initComponents ( ) ; prepopulateWithValue ( value ) ; }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
public static int [ ] parseNumberList ( String listStr , int minVal , int maxVal , boolean allowZero ) { int [ ] values ; if ( listStr . indexOf ( _STR ) < _NUM ) { values = new int [ _NUM ] ; values [ _NUM ] = parseIntRange ( listStr , minVal , maxVal , allowZero ) ; } else { String [ ] valueStrs = listStr . split ( _STR ) ; int len = valueStrs . length ; values = new int [ len ] ; for ( int i = _NUM ; i < len ; i ++ ) { values [ i ] = parseIntRange ( valueStrs [ i ] , minVal , maxVal , allowZero ) ; } } return values ; }
public DirectoryOrFileNotFoundException ( String entity , String name ) { super ( String . format ( _errorMessage , entity , name ) ) ; }
public void closeStream ( ) { CarbonUtil . closeStreams ( stream ) ; executorService . shutdown ( ) ; }
void scramble ( ) { initialSize = getSize ( ) ; int a [ ] = new int [ initialSize . height / _NUM ] ; double f = initialSize . width / ( double ) a . length ; for ( int i = a . length ; -- i >= _NUM ; ) { a [ i ] = ( int ) ( i * f ) ; } for ( int i = a . length ; -- i >= _NUM ; ) { int j = ( int ) ( i * Math . random ( ) ) ; int t = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = t ; } arr = a ; }
private int readAnnotationValue ( int v , final char [ ] buf , final String name , final AnnotationVisitor av ) { int i ; if ( av == null ) { switch ( b [ v ] & _NUM ) { case _STR : return v + _NUM ; case _STR : return readAnnotationValues ( v + _NUM , buf , _BOOL , null ) ; case _STR : return readAnnotationValues ( v + _NUM , buf , _BOOL , null ) ; default : return v + _NUM ; } } switch ( b [ v ++ ] & _NUM ) { case _STR : case _STR : case _STR : case _STR : av . visit ( name , readConst ( readUnsignedShort ( v ) , buf ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , new Byte ( ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , readInt ( items [ readUnsignedShort ( v ) ] ) == _NUM ? Boolean . FALSE : Boolean . TRUE ) ; v += _NUM ; break ; case _STR : av . visit ( name , new Short ( ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , new Character ( ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , readUTF8 ( v , buf ) ) ; v += _NUM ; break ; case _STR : av . visitEnum ( name , readUTF8 ( v , buf ) , readUTF8 ( v + _NUM , buf ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , Type . getType ( readUTF8 ( v , buf ) ) ) ; v += _NUM ; break ; case _STR : v = readAnnotationValues ( v + _NUM , buf , _BOOL , av . visitAnnotation ( name , readUTF8 ( v , buf ) ) ) ; break ; case _STR : int size = readUnsignedShort ( v ) ; v += _NUM ; if ( size == _NUM ) { return readAnnotationValues ( v - _NUM , buf , _BOOL , av . visitArray ( name ) ) ; } switch ( this . b [ v ++ ] & _NUM ) { case _STR : byte [ ] bv = new byte [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { bv [ i ] = ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , bv ) ; -- v ; break ; case _STR : boolean [ ] zv = new boolean [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { zv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) != _NUM ; v += _NUM ; } av . visit ( name , zv ) ; -- v ; break ; case _STR : short [ ] sv = new short [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { sv [ i ] = ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , sv ) ; -- v ; break ; case _STR : char [ ] cv = new char [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { cv [ i ] = ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , cv ) ; -- v ; break ; case _STR : int [ ] iv = new int [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { iv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , iv ) ; -- v ; break ; case _STR : long [ ] lv = new long [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { lv [ i ] = readLong ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , lv ) ; -- v ; break ; case _STR : float [ ] fv = new float [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { fv [ i ] = Float . intBitsToFloat ( readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; } av . visit ( name , fv ) ; -- v ; break ; case _STR : double [ ] dv = new double [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { dv [ i ] = Double . longBitsToDouble ( readLong ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; } av . visit ( name , dv ) ; -- v ; break ; default : v = readAnnotationValues ( v - _NUM , buf , _BOOL , av . visitArray ( name ) ) ; } } return v ; }
public static SIPHeader parseSIPHeader ( String header ) throws ParseException { int start = _NUM ; int end = header . length ( ) - _NUM ; try { while ( header . charAt ( start ) <= _NUM ) start ++ ; while ( header . charAt ( end ) <= _NUM ) end -- ; } catch ( ArrayIndexOutOfBoundsException e ) { throw new ParseException ( _STR , _NUM ) ; } StringBuilder buffer = new StringBuilder ( end + _NUM ) ; int i = start ; int lineStart = start ; boolean endOfLine = _BOOL ; while ( i <= end ) { char c = header . charAt ( i ) ; if ( c == _STR || c == _STR ) { if ( ! endOfLine ) { buffer . append ( header . substring ( lineStart , i ) ) ; endOfLine = _BOOL ; } } else { if ( endOfLine ) { endOfLine = _BOOL ; if ( c == _STR || c == _STR ) { buffer . append ( _STR ) ; lineStart = i + _NUM ; } else { lineStart = i ; } } } i ++ ; } buffer . append ( header . substring ( lineStart , i ) ) ; buffer . append ( _STR ) ; HeaderParser hp = ParserFactory . createParser ( buffer . toString ( ) ) ; if ( hp == null ) throw new ParseException ( _STR , _NUM ) ; return hp . parse ( ) ; }
private static int convertSRGBtoLinearRGB ( int color ) { float input , output ; input = color / _NUM ; if ( input <= _NUM ) { output = input / _NUM ; } else { output = ( float ) Math . pow ( ( input + _NUM ) / _NUM , _NUM ) ; } return Math . round ( output * _NUM ) ; }
public void recordBeginning ( ) { final String msg = _STR + mModuleName + _STR + mRunId ; mUsageMessages . add ( msg ) ; Diagnostic . developerLog ( msg ) ; mClient . recordBeginning ( mModuleName , mRunId ) ; }
static float rotateY ( float pX , float pY , float cX , float cY , float angleInDegrees ) { double angle = Math . toRadians ( angleInDegrees ) ; return ( float ) ( Math . sin ( angle ) * ( pX - cX ) + Math . cos ( angle ) * ( pY - cY ) + cY ) ; }
public boolean isPronounceable ( String word ) { String lowerCaseWord = word . toLowerCase ( ) ; return ( prefixFSM . accept ( lowerCaseWord ) && suffixFSM . accept ( lowerCaseWord ) ) ; }
public void addSplitEdges ( List edgeList ) { addEndpoints ( ) ; Iterator it = iterator ( ) ; EdgeIntersection eiPrev = ( EdgeIntersection ) it . next ( ) ; while ( it . hasNext ( ) ) { EdgeIntersection ei = ( EdgeIntersection ) it . next ( ) ; Edge newEdge = createSplitEdge ( eiPrev , ei ) ; edgeList . add ( newEdge ) ; eiPrev = ei ; } }
public IOUtils ( ) { super ( ) ; }
public MemBasedCache ( int maxCacheSizeInBytes ) { mMaxCacheSizeInBytes = maxCacheSizeInBytes ; mDataEntries = new LinkedHashMap < String , CacheHeader > ( _NUM , _NUM , _BOOL ) ; }
public void updateMaxTextWidths ( float requiredWidth , float matchContentsWidth ) { mMaxRequiredWidth = Math . max ( mMaxRequiredWidth , requiredWidth ) ; mMaxMatchContentsWidth = Math . max ( mMaxMatchContentsWidth , matchContentsWidth ) ; }
public void enableOverview ( boolean b ) { if ( overviewItem != null ) { overviewItem . setEnabled ( b ) ; } }
public void mouseEntered ( MouseEvent e ) { if ( Debug . debugging ( _STR ) ) { Debug . output ( getID ( ) + _STR ) ; } super . mouseEntered ( e ) ; autoZoom = _BOOL ; }
public PageOfCollections fetchPage ( PageOfCollections page , SolrZkClient zkClient ) throws KeeperException , InterruptedException { List < String > children = getCollections ( zkClient ) ; page . selected = children ; if ( page . start == _NUM && page . rows == - _NUM && page . filter == null && children . size ( ) > _NUM ) { page . rows = _NUM ; page . start = _NUM ; } if ( page . filterType == FilterType . name && page . filter != null ) children = page . applyNameFilter ( children ) ; if ( page . filterType != FilterType . status ) page . selectPage ( children ) ; return page ; }
public void accept ( final AnnotationVisitor av ) { if ( av != null ) { if ( values != null ) { for ( int i = _NUM ; i < values . size ( ) ; i += _NUM ) { String name = ( String ) values . get ( i ) ; Object value = values . get ( i + _NUM ) ; accept ( av , name , value ) ; } } av . visitEnd ( ) ; } }
public IdsQueryBuilder addIds ( String ... ids ) { values . addAll ( Arrays . asList ( ids ) ) ; return this ; }
private void stop ( HttpServletRequest request , HttpServletResponse response ) throws IOException { PrintWriter out = response . getWriter ( ) ; String label = request . getParameter ( _STR ) ; Monitor mon = removeMon ( label , null , DEFAULT_UNITS ) ; if ( mon == null ) { out . println ( ERROR + _STR ) ; } else { mon . stop ( ) ; out . println ( OK + _STR + mon ) ; } }
public static String normalizeUrl ( String requestUrl ) throws OAuthException { if ( ( requestUrl == null ) || ( requestUrl . length ( ) == _NUM ) ) { throw new OAuthException ( _STR ) ; } URI uri ; try { uri = new URI ( requestUrl ) ; } catch ( URISyntaxException e ) { throw new OAuthException ( e ) ; } String authority = uri . getAuthority ( ) ; String scheme = uri . getScheme ( ) ; if ( authority == null || scheme == null ) { throw new OAuthException ( _STR ) ; } authority = authority . toLowerCase ( ) ; scheme = scheme . toLowerCase ( ) ; if ( ( scheme . equals ( _STR ) && uri . getPort ( ) == _NUM ) || ( scheme . equals ( _STR ) && uri . getPort ( ) == _NUM ) ) { int index = authority . lastIndexOf ( _STR ) ; if ( index >= _NUM ) { authority = authority . substring ( _NUM , index ) ; } } return scheme + _STR + authority + uri . getRawPath ( ) ; }
public void invoke ( InputStream is , OutputStream os , SerializerFactory serializerFactory ) throws Exception { boolean isDebug = _BOOL ; if ( isDebugInvoke ( ) ) { isDebug = _BOOL ; PrintWriter dbg = createDebugPrintWriter ( ) ; HessianDebugInputStream dIs = new HessianDebugInputStream ( is , dbg ) ; dIs . startTop2 ( ) ; is = dIs ; HessianDebugOutputStream dOs = new HessianDebugOutputStream ( os , dbg ) ; dOs . startTop2 ( ) ; os = dOs ; } HessianInputFactory . HeaderType header = _inputFactory . readHeader ( is ) ; AbstractHessianInput in ; AbstractHessianOutput out ; switch ( header ) { case CALL_1_REPLY_1 : in = _hessianFactory . createHessianInput ( is ) ; out = _hessianFactory . createHessianOutput ( os ) ; break ; case CALL_1_REPLY_2 : in = _hessianFactory . createHessianInput ( is ) ; out = _hessianFactory . createHessian2Output ( os ) ; break ; case HESSIAN_2 : in = _hessianFactory . createHessian2Input ( is ) ; in . readCall ( ) ; out = _hessianFactory . createHessian2Output ( os ) ; break ; default : throw new IllegalStateException ( header + _STR ) ; } if ( serializerFactory != null ) { in . setSerializerFactory ( serializerFactory ) ; out . setSerializerFactory ( serializerFactory ) ; } try { invoke ( _service , in , out ) ; } finally { in . close ( ) ; out . close ( ) ; if ( isDebug ) os . close ( ) ; } }
private void commitLocalTransaction ( ) throws CommitFailedException { if ( _tx == null ) { return ; } if ( _logger . isLoggable ( Level . FINEST ) ) { _logger . log ( Level . FINEST , _STR + _tx ) ; } try { _tx . commit ( ) ; } catch ( Exception e ) { if ( _logger . isLoggable ( Level . SEVERE ) ) { _logger . log ( Level . SEVERE , _STR + _tx , e ) ; } throw new CommitFailedException ( e ) ; } }
public static Entry addObjectClass ( Entry entry ) { Attribute attribute = entry . getAttribute ( CoreTokenConstants . OBJECT_CLASS ) ; if ( attribute == null ) { entry . addAttribute ( CoreTokenConstants . OBJECT_CLASS , CoreTokenConstants . FR_CORE_TOKEN ) ; } return entry ; }
@ SuppressWarnings ( _STR ) public List < Boundary > populateArea ( final Long wardId ) { HierarchyType hType = heirarchyTypeService . getHierarchyTypeByName ( hierarchyTypeName ) ; ; List < Boundary > areaList = new LinkedList < Boundary > ( ) ; final BoundaryType childBoundaryType = boundaryTypeService . getBoundaryTypeByNameAndHierarchyType ( _STR , hType ) ; final Boundary parentBoundary = boundaryService . getBoundaryById ( wardId ) ; areaList = new LinkedList ( crossHeirarchyService . getCrossHierarchyChildrens ( parentBoundary , childBoundaryType ) ) ; LOGGER . info ( _STR + areaList . toString ( ) ) ; return areaList ; }
private static String readName ( DataInputStream dis , byte data [ ] ) throws IOException { int c = dis . readUnsignedByte ( ) ; if ( ( c & _NUM ) == _NUM ) { c = ( ( c & _NUM ) << _NUM ) + dis . readUnsignedByte ( ) ; HashSet < Integer > jumps = new HashSet < Integer > ( ) ; jumps . add ( c ) ; return readName ( data , c , jumps ) ; } if ( c == _NUM ) { return _STR ; } byte b [ ] = new byte [ c ] ; dis . readFully ( b ) ; String s = IDN . toUnicode ( new String ( b ) ) ; String t = readName ( dis , data ) ; if ( t . length ( ) > _NUM ) { s = s + _STR + t ; } return s ; }
public SimpleString concat ( final char c ) { byte [ ] bytes = new byte [ data . length + _NUM ] ; System . arraycopy ( data , _NUM , bytes , _NUM , data . length ) ; bytes [ data . length ] = ( byte ) ( c & _NUM ) ; bytes [ data . length + _NUM ] = ( byte ) ( c > > _NUM & _NUM ) ; return new SimpleString ( bytes ) ; }
public static double probToLogOdds ( double prob ) { if ( gr ( prob , _NUM ) || ( sm ( prob , _NUM ) ) ) { throw new IllegalArgumentException ( _STR + _STR + prob ) ; } double p = SMALL + ( _NUM - _NUM * SMALL ) * prob ; return Math . log ( p / ( _NUM - p ) ) ; }
private void signalNotEmpty ( ) { final ReentrantLock takeLock = this . takeLock ; takeLock . lock ( ) ; try { notEmpty . signal ( ) ; } finally { takeLock . unlock ( ) ; } }
public void deepFill ( MaryNode specTree ) { tree = specTree ; numberOfLeaves = _NUM ; sortNode ( _NUM , tree ) ; }
public int nodeCount ( ) { return nodes == null ? _NUM : nodes . size ( ) ; }
public void addToGlobalBlacklist ( String host ) { addToGlobalBlacklist ( host , System . currentTimeMillis ( ) + this . globalBlacklistTimeout ) ; }
public boolean addNode ( Lop node ) { if ( nodes . contains ( node ) ) return _BOOL ; nodes . add ( node ) ; return _BOOL ; }
private JSONArray requestAllFileSystems ( ) throws IOException , JSONException { JSONArray ret = new JSONArray ( ) ; for ( Filesystem fs : filesystems ) { ret . put ( fs . getRootEntry ( ) ) ; } return ret ; }
private void writeObject ( java . io . ObjectOutputStream s ) throws java . io . IOException { s . defaultWriteObject ( ) ; for ( Node < K , V > n = findFirst ( ) ; n != null ; n = n . next ) { V v = n . getValidValue ( ) ; if ( v != null ) { s . writeObject ( n . key ) ; s . writeObject ( v ) ; } } s . writeObject ( null ) ; }
public static final double sigma ( double a ) { return _NUM / ( _NUM + Math . exp ( - a ) ) ; }
public void insertOrRefresh ( final KBucketEntry newEntry ) { if ( newEntry == null ) return ; List < KBucketEntry > entriesRef = entries ; for ( KBucketEntry existing : entriesRef ) { if ( existing . equals ( newEntry ) ) { existing . mergeInTimestamps ( newEntry ) ; return ; } if ( existing . matchIPorID ( newEntry ) ) { DHT . logInfo ( _STR + newEntry + _STR + existing + _STR ) ; return ; } } if ( newEntry . verifiedReachable ( ) ) { if ( entriesRef . size ( ) < DHTConstants . MAX_ENTRIES_PER_BUCKET ) { modifyMainBucket ( null , newEntry ) ; return ; } if ( replaceBadEntry ( newEntry ) ) return ; KBucketEntry youngest = entriesRef . get ( entriesRef . size ( ) - _NUM ) ; if ( youngest . getCreationTime ( ) > newEntry . getCreationTime ( ) || newEntry . getRTT ( ) * _NUM < youngest . getRTT ( ) ) { modifyMainBucket ( youngest , newEntry ) ; insertInReplacementBucket ( youngest ) ; return ; } } insertInReplacementBucket ( newEntry ) ; }
public void translate ( double x , double y ) { currentTransform . translate ( x , y ) ; try { writeTransform ( new AffineTransform ( _NUM , _NUM , _NUM , _NUM , x , y ) ) ; } catch ( IOException e ) { handleException ( e ) ; } }
public static boolean isSupportedAddRPProtectionVirtualPoolChange ( Volume volume , VirtualPool currentVpool , VirtualPool newVpool , DbClient dbClient , StringBuffer notSuppReasonBuff ) { s_logger . info ( String . format ( _STR , currentVpool . getLabel ( ) , newVpool . getLabel ( ) ) ) ; if ( isSameVirtualPool ( currentVpool , newVpool , notSuppReasonBuff ) ) { return _BOOL ; } if ( volume . checkForRp ( ) || VirtualPool . vPoolSpecifiesProtection ( currentVpool ) ) { notSuppReasonBuff . append ( _STR ) ; return _BOOL ; } if ( ! VirtualPool . vPoolSpecifiesHighAvailability ( currentVpool ) && VirtualPool . vPoolSpecifiesRPVPlex ( newVpool ) ) { notSuppReasonBuff . append ( _STR ) ; return _BOOL ; } if ( VirtualPool . vPoolSpecifiesHighAvailability ( currentVpool ) && ! VirtualPool . vPoolSpecifiesHighAvailabilityDistributed ( currentVpool ) && VirtualPool . vPoolSpecifiesMetroPoint ( newVpool ) ) { notSuppReasonBuff . append ( _STR + _STR ) ; return _BOOL ; } String [ ] include = new String [ ] { TYPE , VARRAYS , REF_VPOOL , MIRROR_VPOOL , FAST_EXPANSION , ACLS , INACTIVE , PROTOCOLS , PROVISIONING_TYPE , USE_MATCHED_POOLS , ARRAY_INFO , DRIVE_TYPE , AUTO_TIER_POLICY_NAME , HOST_IO_LIMIT_IOPS , HOST_IO_LIMIT_BANDWIDTH , VMAX_COMPRESSION_ENABLED , IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED , ASSIGNED_STORAGE_POOLS } ; Map < String , Change > changes = analyzeChanges ( currentVpool , newVpool , include , null , null ) ; if ( ! changes . isEmpty ( ) ) { notSuppReasonBuff . append ( _STR ) ; fillInNotSupportedReasons ( changes , notSuppReasonBuff ) ; return _BOOL ; } include = new String [ ] { PROTECTION_VARRAY_SETTINGS } ; changes = analyzeChanges ( currentVpool , newVpool , include , null , null ) ; if ( changes . isEmpty ( ) ) { notSuppReasonBuff . append ( _STR ) ; fillInNotSupportedReasons ( changes , notSuppReasonBuff ) ; return _BOOL ; } if ( VirtualPool . vPoolSpecifiesHighAvailability ( currentVpool ) && ( VirtualPool . vPoolSpecifiesRPVPlex ( newVpool ) || VirtualPool . vPoolSpecifiesMetroPoint ( newVpool ) ) ) { VirtualPoolChangeOperationEnum op = vplexCommonChecks ( volume , currentVpool , newVpool , dbClient , notSuppReasonBuff , include ) ; if ( op == null || ! op . equals ( VirtualPoolChangeOperationEnum . RP_PROTECTED ) ) { return _BOOL ; } } return _BOOL ; }
private void writeObject ( ObjectOutputStream oos ) throws IOException { oos . defaultWriteObject ( ) ; boolean writeFont = ( f != OMText . DEFAULT_FONT ) ; oos . writeBoolean ( writeFont ) ; if ( writeFont ) { oos . writeObject ( f . getName ( ) ) ; oos . writeInt ( f . getSize ( ) ) ; oos . writeInt ( f . getStyle ( ) ) ; } writeStroke ( oos , stroke , OMGraphic . BASIC_STROKE ) ; writeStroke ( oos , textMatteStroke , DEFAULT_TEXT_MATTE_STROKE ) ; }
private static void writeSpaces ( Writer out , int amt ) throws IOException { while ( amt > _NUM ) { out . write ( _STR ) ; amt -- ; } }
public static double relativeOverlap ( SpatialComparable box1 , SpatialComparable box2 ) { final int dim = assertSameDimensionality ( box1 , box2 ) ; double overlap = _NUM ; double vol1 = _NUM ; double vol2 = _NUM ; for ( int i = _NUM ; i < dim ; i ++ ) { final double box1min = box1 . getMin ( i ) ; final double box1max = box1 . getMax ( i ) ; final double box2min = box2 . getMin ( i ) ; final double box2max = box2 . getMax ( i ) ; final double omax = Math . min ( box1max , box2max ) ; final double omin = Math . max ( box1min , box2min ) ; if ( omax <= omin ) { return _NUM ; } overlap *= omax - omin ; vol1 *= box1max - box1min ; vol2 *= box2max - box2min ; } return overlap / ( vol1 + vol2 ) ; }
protected void handleAutoDraw ( ) { if ( isToolItemSelected ( ToolBarItemKey . AUTO_DRAW ) ) { onAutoDraw ( ) ; } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
protected final void _loadToHaveAtLeast ( int minAvailable ) throws IOException { if ( _inputStream == null ) { throw _constructError ( _STR + minAvailable + _STR ) ; } int amount = _inputEnd - _inputPtr ; _currInputProcessed += _inputPtr ; if ( amount > _NUM && _inputPtr > _NUM ) { System . arraycopy ( _inputBuffer , _inputPtr , _inputBuffer , _NUM , amount ) ; _inputEnd = amount ; } else { _inputEnd = _NUM ; } _inputPtr = _NUM ; while ( _inputEnd < minAvailable ) { int count = _inputStream . read ( _inputBuffer , _inputEnd , _inputBuffer . length - _inputEnd ) ; if ( count < _NUM ) { _closeInput ( ) ; if ( count == _NUM ) { throw new IOException ( _STR + amount + _STR ) ; } throw _constructError ( _STR + minAvailable + _STR + minAvailable + _STR ) ; } _inputEnd += count ; } }
public Z21Message ( byte [ ] a , int l ) { super ( String . valueOf ( a ) ) ; setBinary ( _BOOL ) ; }
private MethodDescriptor [ ] sortMethodDescriptors ( MethodDescriptor [ ] methodDescriptors ) { return methodSorter != null ? methodSorter . sortMethodDescriptors ( methodDescriptors ) : methodDescriptors ; }
public static Properties parsePropertyList ( String list ) throws PropertyStringFormatException { return parsePropertyList ( list , propertySeparators , keyValueSeparators ) ; }
public boolean packageHasAnnotation ( Annotation annotation ) { try { Package pkg = type . getPackage ( ) ; if ( pkg == null ) { return _BOOL ; } String className = pkg . getName ( ) + _STR ; Class < ? > packageType = Class . forName ( className ) ; AnnotationAccessor accessor = new AnnotationAccessor ( supportedAnnotations , packageType , ignoreAnnotationFailure ) ; return accessor . typeHas ( annotation ) ; } catch ( ClassNotFoundException e ) { return _BOOL ; } }
private String buildToolTip ( final CTaggedGraphNodesContainerNode node ) { final StringBuilder tooltip = new StringBuilder ( _STR ) ; boolean first = _BOOL ; for ( final NaviNode graphnode : node . getGraphNodes ( ) ) { if ( ! first ) { tooltip . append ( _STR ) ; } tooltip . append ( CNodesDisplayString . getDisplayString ( graphnode ) ) ; first = _BOOL ; } return tooltip + _STR ; }
public void makeGraph ( File linkGraph ) throws Exception { String temp212 ; int rowNum = _NUM ; BufferedReader br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( linkGraph ) ) ) ; while ( ( temp212 = br . readLine ( ) ) != null ) { String [ ] strs = temp212 . split ( _STR ) ; for ( int i = _NUM ; i < strs . length ; i ++ ) { graph [ rowNum ] [ i ] = Double . parseDouble ( strs [ i ] ) ; } rowNum ++ ; } for ( int i = _NUM ; i < dataNum ; i ++ ) { for ( int j = _NUM ; j < dimension ; j ++ ) { W [ i ] [ j ] = r . nextDouble ( ) ; H [ j ] [ i ] = r . nextDouble ( ) ; } } for ( int i = _NUM ; i < dataNum ; i ++ ) { double sumW = _NUM ; double sumH = _NUM ; for ( int j = _NUM ; j < dimension ; j ++ ) { sumW += W [ i ] [ j ] * W [ i ] [ j ] ; sumH += H [ j ] [ i ] * H [ j ] [ i ] ; } sumW = Math . sqrt ( sumW ) ; sumH = Math . sqrt ( sumH ) ; for ( int j = _NUM ; j < dimension ; j ++ ) { W [ i ] [ j ] /= sumW ; H [ j ] [ i ] /= sumH ; } } trainW ( ) ; init = _BOOL ; }
public void removeSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { return ; } mListeners . remove ( listener ) ; }
public boolean removeOnItemClickListener ( OnItemClickListener itemClickListener ) { return clickListeners . remove ( itemClickListener ) ; }
@ Override protected int lookForSelectablePosition ( int position , boolean lookDown ) { final ListAdapter adapter = mAdapter ; if ( adapter == null || isInTouchMode ( ) ) { return INVALID_POSITION ; } final int count = adapter . getCount ( ) ; if ( ! mAreAllItemsSelectable ) { if ( lookDown ) { position = Math . max ( _NUM , position ) ; while ( position < count && ! adapter . isEnabled ( position ) ) { position ++ ; } } else { position = Math . min ( position , count - _NUM ) ; while ( position >= _NUM && ! adapter . isEnabled ( position ) ) { position -- ; } } if ( position < _NUM || position >= count ) { return INVALID_POSITION ; } return position ; } else { if ( position < _NUM || position >= count ) { return INVALID_POSITION ; } return position ; } }
public static String padRight ( final String s , final int length ) { final int pad = length - s . length ( ) ; return pad > _NUM ? s + getSpaceString ( pad ) : s ; }
private static String [ ] collationMatchingRuleNames ( final List < String > localeNames , final int numSuffix , final String symbolicSuffix ) { final List < String > names = new ArrayList < > ( ) ; for ( String localeName : localeNames ) { if ( symbolicSuffix . isEmpty ( ) ) { names . add ( localeName ) ; } else { names . add ( localeName + _STR + numSuffix ) ; names . add ( localeName + _STR + symbolicSuffix ) ; } } return names . toArray ( new String [ names . size ( ) ] ) ; }
public static boolean isCacheSafe ( Class < ? > clazz , ClassLoader classLoader ) { Assert . notNull ( clazz , _STR ) ; ClassLoader target = clazz . getClassLoader ( ) ; if ( target == null ) { return _BOOL ; } ClassLoader cur = classLoader ; if ( cur == target ) { return _BOOL ; } while ( cur != null ) { cur = cur . getParent ( ) ; if ( cur == target ) { return _BOOL ; } } return _BOOL ; }
public void write ( PrintStream out ) { write ( out , table ) ; }
static Part from ( String encoded , String decoded ) { if ( encoded == null ) { return NULL ; } if ( encoded . length ( ) == _NUM ) { return EMPTY ; } if ( decoded == null ) { return NULL ; } if ( decoded . length ( ) == _NUM ) { return EMPTY ; } return new Part ( encoded , decoded ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
private int [ ] createEpochMonths ( int epochDay , int minYear , int maxYear , Map < Integer , int [ ] > years ) { int numMonths = ( maxYear - minYear + _NUM ) * _NUM + _NUM ; int epochMonth = _NUM ; int [ ] epochMonths = new int [ numMonths ] ; minMonthLength = Integer . MAX_VALUE ; maxMonthLength = Integer . MIN_VALUE ; for ( int year = minYear ; year <= maxYear ; year ++ ) { int [ ] months = years . get ( year ) ; for ( int month = _NUM ; month < _NUM ; month ++ ) { int length = months [ month ] ; epochMonths [ epochMonth ++ ] = epochDay ; if ( length < _NUM || length > _NUM ) { throw new IllegalArgumentException ( _STR + minYear ) ; } epochDay += length ; minMonthLength = Math . min ( minMonthLength , length ) ; maxMonthLength = Math . max ( maxMonthLength , length ) ; } } epochMonths [ epochMonth ++ ] = epochDay ; if ( epochMonth != epochMonths . length ) { throw new IllegalStateException ( _STR + epochMonth + _STR + epochMonths . length ) ; } return epochMonths ; }
private static String descriptorToInternalName ( String descriptor ) { switch ( descriptor . charAt ( _NUM ) ) { case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : return descriptor ; case _STR : return classDescriptorToInternalName ( descriptor ) ; default : throw new IllegalArgumentException ( _STR + descriptor ) ; } }
public Subscription register ( Object mBean , MBeanDescription description ) { return register ( mBean , description . getMBeanName ( getNextId ( ) ) ) ; }
void checkAfterUnmarshalled ( ) { assertEquals ( shortVal . shortValue ( ) , _NUM ) ; assertEquals ( longVal , _NUM ) ; assertNull ( aArr ) ; assertNull ( strVal ) ; assertEquals ( doubleVal , _NUM ) ; }
public void put ( int key , E value ) { int i = ContainerHelpers . binarySearch ( mKeys , mSize , key ) ; if ( i >= _NUM ) { mValues [ i ] = value ; } else { i = ~ i ; if ( i < mSize && mValues [ i ] == DELETED ) { mKeys [ i ] = key ; mValues [ i ] = value ; return ; } if ( mGarbage && mSize >= mKeys . length ) { gc ( ) ; i = ~ ContainerHelpers . binarySearch ( mKeys , mSize , key ) ; } if ( mSize >= mKeys . length ) { int n = ContainerHelpers . idealIntArraySize ( mSize + _NUM ) ; int [ ] nkeys = new int [ n ] ; Object [ ] nvalues = new Object [ n ] ; System . arraycopy ( mKeys , _NUM , nkeys , _NUM , mKeys . length ) ; System . arraycopy ( mValues , _NUM , nvalues , _NUM , mValues . length ) ; mKeys = nkeys ; mValues = nvalues ; } if ( mSize - i != _NUM ) { System . arraycopy ( mKeys , i , mKeys , i + _NUM , mSize - i ) ; System . arraycopy ( mValues , i , mValues , i + _NUM , mSize - i ) ; } mKeys [ i ] = key ; mValues [ i ] = value ; mSize ++ ; } }
@ Override public < R > CompletableFuture < R > collect ( final Supplier < R > supplier , final BiConsumer < R , ? super T > accumulator , final BiConsumer < R , R > combiner ) { return CompletableFuture . supplyAsync ( null , exec ) ; }
@ SuppressWarnings ( _STR ) protected Object fromReflectionType ( final Object value ) { FieldDescriptor descriptor = getDescriptor ( ) ; if ( descriptor . isRepeated ( ) ) { if ( descriptor . getJavaType ( ) == FieldDescriptor . JavaType . MESSAGE || descriptor . getJavaType ( ) == FieldDescriptor . JavaType . ENUM ) { final List result = new ArrayList ( ) ; for ( final Object element : ( List ) value ) { result . add ( singularFromReflectionType ( element ) ) ; } return result ; } else { return value ; } } else { return singularFromReflectionType ( value ) ; } }
public void registerManufacturerSpecificBuilder ( int companyId , ADManufacturerSpecificBuilder builder ) { if ( companyId < _NUM || _NUM < companyId ) { String message = String . format ( _STR , companyId ) ; throw new IllegalArgumentException ( message ) ; } if ( builder == null ) { return ; } Integer key = Integer . valueOf ( companyId ) ; List < ADManufacturerSpecificBuilder > builders = mMSBuilders . get ( key ) ; if ( builders == null ) { builders = new ArrayList < ADManufacturerSpecificBuilder > ( ) ; mMSBuilders . put ( key , builders ) ; } builders . add ( _NUM , builder ) ; }
public static ReilGraph copyReilCode ( final Window parent , final INaviCodeNode node ) { final ReilTranslator < INaviInstruction > translator = new ReilTranslator < INaviInstruction > ( ) ; try { return translator . translate ( new StandardEnvironment ( ) , node ) ; } catch ( final InternalTranslationException e ) { CUtilityFunctions . logException ( e ) ; final String message = _STR + _STR ; final String description = CUtilityFunctions . createDescription ( String . format ( _STR , node . getAddress ( ) ) , new String [ ] { _STR } , new String [ ] { _STR + _STR } ) ; NaviErrorDialog . show ( parent , message , description , e ) ; } return null ; }
private static void applyOverrides ( ) { InputStream stream = getContentTypesPropertiesStream ( ) ; if ( stream == null ) { return ; } try { try { Properties overrides = new Properties ( ) ; overrides . load ( stream ) ; for ( Map . Entry < Object , Object > entry : overrides . entrySet ( ) ) { String extension = ( String ) entry . getKey ( ) ; String mimeType = ( String ) entry . getValue ( ) ; add ( mimeType , extension ) ; } } finally { stream . close ( ) ; } } catch ( IOException ignored ) { } }
public static String toString ( Reader reader , long timeout ) throws IOException { StringWriter sw = new StringWriter ( _NUM ) ; copy ( toBufferedReader ( reader ) , sw , timeout ) ; sw . close ( ) ; return sw . toString ( ) ; }
private static float computeSimilarity ( Lane a , Lane b ) { int same = _NUM ; int diff = _NUM ; int firstCoordinate = Math . max ( a . getFirstNonGapPosition ( ) , b . getFirstNonGapPosition ( ) ) ; int lastCoordinate = Math . min ( a . getLastNonGapPosition ( ) , b . getLastNonGapPosition ( ) ) ; for ( int i = firstCoordinate ; i <= lastCoordinate ; i ++ ) { char cha = a . charAt ( i ) ; char chb = b . charAt ( i ) ; if ( Character . isLetter ( cha ) && Character . isLetter ( chb ) ) { if ( Character . toLowerCase ( cha ) == Character . toLowerCase ( ( chb ) ) ) same ++ ; else diff ++ ; } } return Math . max ( same > _NUM ? _NUM : _NUM , same - _NUM * diff ) ; }
private void forceOverflow ( ) { forceOverflow ( ) ; }
public int find ( String string ) { if ( string == null ) { return - _NUM ; } for ( int i = _NUM ; i != m_stringOffsets . length ; ++ i ) { int offset = m_stringOffsets [ i ] ; int length = getShort ( m_strings , offset ) ; if ( length != string . length ( ) ) { continue ; } int j = _NUM ; for ( ; j != length ; ++ j ) { offset += _NUM ; if ( string . charAt ( j ) != getShort ( m_strings , offset ) ) { break ; } } if ( j == length ) { return i ; } } return - _NUM ; }
public String prepOperand ( String label , DataType dt , ValueType vt , boolean literal ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( label ) ; sb . append ( Lop . DATATYPE_PREFIX ) ; sb . append ( dt ) ; sb . append ( Lop . VALUETYPE_PREFIX ) ; sb . append ( vt ) ; sb . append ( Lop . LITERAL_PREFIX ) ; sb . append ( literal ) ; return sb . toString ( ) ; }
public static List < SpaceTime > divideConquerBrownianBridge ( MultivariateNormalDistribution normal , SpaceTime start , SpaceTime end , int depth , int maxTries , SpaceTimeRejector rejector ) { List < SpaceTime > points = new LinkedList < SpaceTime > ( ) ; points . add ( start ) ; points . add ( end ) ; stop = _BOOL ; if ( divideConquerBrownianBridge ( normal , _NUM , points , depth , maxTries , rejector ) == ( _NUM << ( depth - _NUM ) ) ) { return points ; } stop = _BOOL ; return null ; }
public static EjbJarXmlVersion valueOf ( DocumentType docType ) throws NullPointerException { return valueOf ( docType . getPublicId ( ) ) ; }
private boolean matchStrings ( String pattern , String str , boolean caseSensitive ) { char [ ] patArr = pattern . toCharArray ( ) ; char [ ] strArr = str . toCharArray ( ) ; int patIdxStart = _NUM ; int patIdxEnd = patArr . length - _NUM ; int strIdxStart = _NUM ; int strIdxEnd = strArr . length - _NUM ; char ch ; boolean containsStar = _BOOL ; for ( char c : patArr ) { if ( c == _STR ) { containsStar = _BOOL ; break ; } } if ( ! containsStar ) { if ( patIdxEnd != strIdxEnd ) { return _BOOL ; } for ( int i = _NUM ; i <= patIdxEnd ; i ++ ) { ch = patArr [ i ] ; if ( ch != _STR ) { if ( different ( caseSensitive , ch , strArr [ i ] ) ) { return _BOOL ; } } } return _BOOL ; } if ( patIdxEnd == _NUM ) { return _BOOL ; } while ( ( ch = patArr [ patIdxStart ] ) != _STR && strIdxStart <= strIdxEnd ) { if ( ch != _STR ) { if ( different ( caseSensitive , ch , strArr [ strIdxStart ] ) ) { return _BOOL ; } } patIdxStart ++ ; strIdxStart ++ ; } if ( strIdxStart > strIdxEnd ) { for ( int i = patIdxStart ; i <= patIdxEnd ; i ++ ) { if ( patArr [ i ] != _STR ) { return _BOOL ; } } return _BOOL ; } while ( ( ch = patArr [ patIdxEnd ] ) != _STR && strIdxStart <= strIdxEnd ) { if ( ch != _STR ) { if ( different ( caseSensitive , ch , strArr [ strIdxEnd ] ) ) { return _BOOL ; } } patIdxEnd -- ; strIdxEnd -- ; } if ( strIdxStart > strIdxEnd ) { for ( int i = patIdxStart ; i <= patIdxEnd ; i ++ ) { if ( patArr [ i ] != _STR ) { return _BOOL ; } } return _BOOL ; } while ( patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd ) { int patIdxTmp = - _NUM ; for ( int i = patIdxStart + _NUM ; i <= patIdxEnd ; i ++ ) { if ( patArr [ i ] == _STR ) { patIdxTmp = i ; break ; } } if ( patIdxTmp == patIdxStart + _NUM ) { patIdxStart ++ ; continue ; } int patLength = patIdxTmp - patIdxStart - _NUM ; int strLength = strIdxEnd - strIdxStart + _NUM ; int foundIdx = - _NUM ; strLoop : for ( int i = _NUM ; i <= strLength - patLength ; i ++ ) { for ( int j = _NUM ; j < patLength ; j ++ ) { ch = patArr [ patIdxStart + j + _NUM ] ; if ( ch != _STR ) { if ( different ( caseSensitive , ch , strArr [ strIdxStart + i + j ] ) ) { continue strLoop ; } } } foundIdx = strIdxStart + i ; break ; } if ( foundIdx == - _NUM ) { return _BOOL ; } patIdxStart = patIdxTmp ; strIdxStart = foundIdx + patLength ; } for ( int i = patIdxStart ; i <= patIdxEnd ; i ++ ) { if ( patArr [ i ] != _STR ) { return _BOOL ; } } return _BOOL ; }
public static List < Double > mergeCoords ( List < Double > x , List < Double > y ) { if ( x . size ( ) != y . size ( ) ) throw new IllegalArgumentException ( _STR ) ; List < Double > ret = new ArrayList < > ( ) ; for ( int i = _NUM ; i < x . size ( ) ; i ++ ) { ret . add ( x . get ( i ) ) ; ret . add ( y . get ( i ) ) ; } return ret ; }
public static void print ( int x ) { out . print ( x ) ; out . flush ( ) ; }
public void copyText ( ) { int end , start ; end = selectedCharField . getSelectionEnd ( ) ; start = selectedCharField . getSelectionStart ( ) ; selectedCharField . selectAll ( ) ; selectedCharField . copy ( ) ; selectedCharField . select ( start , end ) ; }
public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { try { AuthPropertiesModel model = ( AuthPropertiesModel ) getModel ( ) ; Map original = model . getValues ( ) ; AMPropertySheet ps = ( AMPropertySheet ) getChild ( PROPERTY_ATTRIBUTE ) ; model . setValues ( ps . getAttributeValues ( original , _BOOL , model ) ) ; setInlineAlertMessage ( CCAlert . TYPE_INFO , _STR , _STR ) ; } catch ( AMConsoleException a ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , _STR , a . getMessage ( ) ) ; } forwardTo ( ) ; }
private void buildDescriptionPanel ( final Composite parent ) { descriptionLabel = new StyledText ( parent , SWT . READ_ONLY ) ; descriptionLabel . setText ( _STR ) ; descriptionLabel . setLayoutData ( new GridData ( GridData . FILL , GridData . FILL , _BOOL , _BOOL , _NUM , _NUM ) ) ; }
public HttpMethodClient ( ) { this ( _NUM , _NUM , _NUM * _NUM ) ; }
public ISO9796d2PSSSigner ( AsymmetricBlockCipher cipher , Digest digest , int saltLength , boolean implicit ) { this . cipher = cipher ; this . digest = digest ; this . hLen = digest . getDigestSize ( ) ; this . saltLength = saltLength ; if ( implicit ) { trailer = TRAILER_IMPLICIT ; } else { Integer trailerObj = ( Integer ) trailerMap . get ( digest . getAlgorithmName ( ) ) ; if ( trailerObj != null ) { trailer = trailerObj . intValue ( ) ; } else { throw new IllegalArgumentException ( _STR ) ; } } }
String decodeTextValue ( byte [ ] data ) throws IOException { boolean isCompressed = ( ( data . length > _NUM ) && ( data [ _NUM ] == TEXT_COMPRESSION_HEADER [ _NUM ] ) && ( data [ _NUM ] == TEXT_COMPRESSION_HEADER [ _NUM ] ) ) ; if ( isCompressed ) { StringBuilder textBuf = new StringBuilder ( data . length ) ; int dataStart = TEXT_COMPRESSION_HEADER . length ; int dataEnd = dataStart ; boolean inCompressedMode = _BOOL ; while ( dataEnd < data . length ) { if ( data [ dataEnd ] == ( byte ) _NUM ) { decodeTextSegment ( data , dataStart , dataEnd , inCompressedMode , textBuf ) ; inCompressedMode = ! inCompressedMode ; ++ dataEnd ; dataStart = dataEnd ; } else { ++ dataEnd ; } } decodeTextSegment ( data , dataStart , dataEnd , inCompressedMode , textBuf ) ; return textBuf . toString ( ) ; } return decodeUncompressedText ( data , getCharset ( ) ) ; }
private < S , T > Set < T > extract ( final Collection < S > collection , final Extractor < S , T > extractor ) { final Set < T > values = new HashSet < T > ( collection . size ( ) ) ; for ( final S instance : collection ) { values . add ( extractor . getValue ( instance ) ) ; } return values ; }
public static boolean isZTE ( ) { return sBuildModel . startsWith ( _STR ) ; }
static public String normalizeToEncoding ( String origString_ , Charset encoding_ ) { String normString = origString_ ; CharsetEncoder encoder = encoding_ . newEncoder ( ) ; if ( ! encoder . canEncode ( origString_ ) ) { final int length = origString_ . length ( ) ; char [ ] normSeq = new char [ ( origString_ . length ( ) ) ] ; int charNum = _NUM ; for ( int offset = _NUM ; offset < length ; ) { Pair < Character , Integer > replacement = normalizeCodepoint ( origString_ , encoding_ , offset ) ; Character replacedChar = replacement . getFirst ( ) ; int codepoint = replacement . getSecond ( ) ; if ( null != replacedChar ) { normSeq [ charNum ] = replacedChar ; charNum ++ ; } offset += Character . charCount ( codepoint ) ; } normString = new String ( normSeq ) ; } return normString ; }
private FastConcurrentSkipListMap . Node < K , V > loNode ( ) { if ( lo == null ) return m . findFirst ( ) ; else if ( loInclusive ) return m . findNear ( lo , m . GT | m . EQ ) ; else return m . findNear ( lo , m . GT ) ; }
public int size ( ) { return m_sets . size ( ) ; }
public Line3D ( Stack < Vector3 > points , float thickness , int [ ] colors , boolean createVBOs ) { super ( ) ; mPoints = points ; mLineThickness = thickness ; mColors = colors ; if ( colors != null && colors . length != points . size ( ) ) throw new RuntimeException ( _STR ) ; init ( createVBOs ) ; }
public static byte [ ] asUnsignedByteArray ( BigInteger value ) { byte [ ] bytes = value . toByteArray ( ) ; if ( bytes [ _NUM ] == _NUM ) { byte [ ] tmp = new byte [ bytes . length - _NUM ] ; System . arraycopy ( bytes , _NUM , tmp , _NUM , tmp . length ) ; return tmp ; } return bytes ; }
public static float approximateLength ( float controlPoints [ ] [ ] ) { float length = _NUM ; for ( int i = _NUM ; i < controlPoints . length - _NUM ; i ++ ) { float xDif = controlPoints [ i + _NUM ] [ _NUM ] - controlPoints [ i ] [ _NUM ] ; float yDif = controlPoints [ i + _NUM ] [ _NUM ] - controlPoints [ i ] [ _NUM ] ; float zDif = controlPoints [ i + _NUM ] [ _NUM ] - controlPoints [ i ] [ _NUM ] ; length += Math . sqrt ( xDif * xDif + yDif * yDif + zDif * zDif ) ; } return length ; }
protected int mapDragOperationFromModifiers ( MouseEvent e ) { int mods = e . getModifiersEx ( ) ; int btns = mods & ButtonMask ; if ( ! ( btns == InputEvent . BUTTON1_DOWN_MASK || btns == InputEvent . BUTTON2_DOWN_MASK ) ) { return DnDConstants . ACTION_NONE ; } return SunDragSourceContextPeer . convertModifiersToDropAction ( mods , getSourceActions ( ) ) ; }
public UpdateClause addAssignment ( Expression expression ) { assignments . add ( new Assignment ( expression ) ) ; return this ; }
private boolean stepValue ( ) { while ( _BOOL ) { if ( iter != null && iter . hasNext ( ) ) { svcs = ( ArrayList ) iter . next ( ) ; svcidx = svcs . size ( ) ; return _BOOL ; } if ( ! stepClass ( ) ) return _BOOL ; if ( iter == null ) return _BOOL ; } }
private ArrayList < IconMarker > createIconMarkers ( ) { final ArrayList < IconMarker > iconMarkers = new ArrayList < > ( LOCATIONS . length ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ _NUM ] , R . drawable . bread , R . drawable . bread_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ _NUM ] , R . drawable . butcher , R . drawable . butcher_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ _NUM ] , R . drawable . fruits , R . drawable . fruits_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ _NUM ] , R . drawable . grocery , R . drawable . grocery_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ _NUM ] , R . drawable . patisserie , R . drawable . patisserie_c ) ) ; return iconMarkers ; }
public void hasNetworkConnection ( NetworkRequestCheckListener listener ) { if ( hasNetworkConnection ( ) ) { testNetworkRequest ( listener ) ; } else { listener . onNoResponse ( ) ; } }
public void assignThreadForSubscriber ( @ NonNull Object subscriber ) { Looper looper = Looper . myLooper ( ) ; if ( looper != null ) { mSubscribersDefaultThreads . put ( new IdentityWeakReferenceKey < > ( subscriber ) , looper != Looper . getMainLooper ( ) ? new Handler ( looper ) : mUiThreadHandler ) ; } else { mSubscribersDefaultThreads . remove ( new IdentityWeakReferenceKey < > ( subscriber ) ) ; } }
private void validateDynamicAttribute ( Set dynamicSet ) throws PolicyException { if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + _STR + dynamicSet ) ; } responseAttrNames = new HashSet ( ) ; repoAttrNames = new HashSet ( ) ; responseAttrToRepoAttr = new HashMap ( ) ; if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + _STR + validDynamicAttrNames ) ; } Set dynamicAttrs = ( ( Set ) properties . get ( DYNAMIC_ATTRIBUTE ) ) ; if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + _STR + dynamicAttrs ) ; } Iterator dynamicAttrsIter = dynamicAttrs . iterator ( ) ; while ( dynamicAttrsIter . hasNext ( ) ) { String attr = ( String ) dynamicAttrsIter . next ( ) ; if ( ! validDynamicAttrNames . contains ( attr ) ) { if ( DEBUG . warningEnabled ( ) ) { DEBUG . warning ( _STR + _STR + _STR + attr ) ; } continue ; } String [ ] attrNames = parseDynamicAttrName ( attr ) ; String responseAttrName = attrNames [ _NUM ] ; String repoAttrName = attrNames [ _NUM ] ; responseAttrNames . add ( responseAttrName ) ; repoAttrNames . add ( repoAttrName ) ; addToResponseAttrToRepoAttrMap ( responseAttrName , repoAttrName ) ; if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + _STR + _STR + responseAttrName + _STR + repoAttrName ) ; } } if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + _STR + responseAttrToRepoAttr ) ; DEBUG . message ( _STR + _STR ) ; } }
public static boolean typeCheck ( Class type , Object instance ) { return type . isAssignableFrom ( instance . getClass ( ) ) || isWrapperInstance ( type , instance ) ; }
public synchronized void init ( ) { ArrayList < Warrant > tempList = new ArrayList < Warrant > ( ) ; List < String > systemNameList = _manager . getSystemNameList ( ) ; Iterator < String > iter = systemNameList . iterator ( ) ; while ( iter . hasNext ( ) ) { Warrant w = _manager . getBySystemName ( iter . next ( ) ) ; if ( ! _warList . contains ( w ) ) { w . addPropertyChangeListener ( this ) ; } else { _warList . remove ( w ) ; } tempList . add ( w ) ; } for ( int i = _NUM ; i < _warList . size ( ) ; i ++ ) { Warrant w = _warList . get ( i ) ; if ( ! _warNX . contains ( w ) ) { w . removePropertyChangeListener ( this ) ; } } for ( int i = _NUM ; i < _warNX . size ( ) ; i ++ ) { tempList . add ( _warNX . get ( i ) ) ; } _warList = tempList ; }
public void addCommand ( Command cmd , int offset ) { menuBar . addCommand ( cmd , offset ) ; }
public boolean connect ( final String address ) { if ( mBluetoothAdapter == null || address == null ) { Log . w ( TAG , _STR ) ; return _BOOL ; } if ( mBluetoothDeviceAddress != null && address . equals ( mBluetoothDeviceAddress ) && mBluetoothGatt != null ) { Log . d ( TAG , _STR ) ; if ( mBluetoothGatt . connect ( ) ) { mConnectionState = STATE_CONNECTING ; return _BOOL ; } else { return _BOOL ; } } final BluetoothDevice device = mBluetoothAdapter . getRemoteDevice ( address ) ; if ( device == null ) { Log . w ( TAG , _STR ) ; return _BOOL ; } mBluetoothGatt = device . connectGatt ( this , _BOOL , mGattCallback ) ; Log . d ( TAG , _STR ) ; mBluetoothDeviceAddress = address ; mConnectionState = STATE_CONNECTING ; return _BOOL ; }
private double normalDens ( double x , double mean , double stdDev ) { double diff = x - mean ; return ( _NUM / ( m_normConst * stdDev ) ) * Math . exp ( - ( diff * diff / ( _NUM * stdDev * stdDev ) ) ) ; }
private static void drawShape ( GL2 gl , Shape s ) { PathIterator it = s . getPathIterator ( new AffineTransform ( ) , shapeFlatness ) ; float [ ] lastMoveTo = new float [ _NUM ] ; float [ ] f = new float [ _NUM ] ; while ( ! it . isDone ( ) ) { int res = it . currentSegment ( f ) ; switch ( res ) { case PathIterator . SEG_CLOSE : GLPanel . V ( gl , lastMoveTo [ _NUM ] , lastMoveTo [ _NUM ] ) ; break ; case PathIterator . SEG_MOVETO : GLPanel . V ( gl , f [ _NUM ] , f [ _NUM ] ) ; System . arraycopy ( f , _NUM , lastMoveTo , _NUM , _NUM ) ; break ; case PathIterator . SEG_LINETO : GLPanel . V ( gl , f [ _NUM ] , f [ _NUM ] ) ; break ; case PathIterator . SEG_CUBICTO : CubicCurve2D c = new CubicCurve2D . Float ( lastMoveTo [ _NUM ] , lastMoveTo [ _NUM ] , f [ _NUM ] , f [ _NUM ] , f [ _NUM ] , f [ _NUM ] , f [ _NUM ] , f [ _NUM ] ) ; drawShape ( gl , c ) ; break ; default : throw new Error ( _STR + _STR + res ) ; } it . next ( ) ; } }
@ Override protected void tearDown ( ) throws NamingException , JMSException { NamingEnumeration < Binding > iter = context . listBindings ( _STR ) ; while ( iter . hasMore ( ) ) { Binding binding = iter . next ( ) ; Object connFactory = binding . getObject ( ) ; if ( connFactory instanceof ActiveMQConnectionFactory ) { } } }
protected List < URI > load ( final InputStream in ) throws SAXException , IOException { SAXParser saxParser ; final SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; try { saxParser = factory . newSAXParser ( ) ; } catch ( final ParserConfigurationException ex ) { throw new SAXException ( ex ) ; } groups = new LinkedList < URI > ( ) ; saxParser . parse ( in , this ) ; return groups ; }
public final void lazySet ( long newValue ) { unsafe . putOrderedLong ( this , valueOffset , newValue ) ; }
private static List < Object > createEqualityKey ( Node node ) { List < Object > values = new ArrayList < Object > ( ) ; values . add ( node . getNodeType ( ) ) ; values . add ( node . getNodeName ( ) ) ; values . add ( node . getLocalName ( ) ) ; values . add ( node . getNamespaceURI ( ) ) ; values . add ( node . getPrefix ( ) ) ; values . add ( node . getNodeValue ( ) ) ; for ( Node child = node . getFirstChild ( ) ; child != null ; child = child . getNextSibling ( ) ) { values . add ( child ) ; } switch ( node . getNodeType ( ) ) { case DOCUMENT_TYPE_NODE : DocumentTypeImpl doctype = ( DocumentTypeImpl ) node ; values . add ( doctype . getPublicId ( ) ) ; values . add ( doctype . getSystemId ( ) ) ; values . add ( doctype . getInternalSubset ( ) ) ; values . add ( doctype . getEntities ( ) ) ; values . add ( doctype . getNotations ( ) ) ; break ; case ELEMENT_NODE : Element element = ( Element ) node ; values . add ( element . getAttributes ( ) ) ; break ; } return values ; }
@ Deprecated public static String Collection2String ( Collection < ? > in , String separator ) { if ( in == null ) { return null ; } return Iterator2String ( in . iterator ( ) , separator ) ; }
public static byte [ ] decodeBase64 ( String base64Str ) { return DatatypeConverter . parseBase64Binary ( base64Str ) ; }
protected void removeAllPremoveDrops ( ) { for ( PremoveInfo info : premoves . toArray ( new PremoveInfo [ _NUM ] ) ) { if ( info . isPremoveDrop ) { premoves . remove ( info ) ; } } }
public void testClearBitZero ( ) { byte aBytes [ ] = { _NUM } ; int aSign = _NUM ; int number = _NUM ; byte rBytes [ ] = { _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . clearBit ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public static String sayNumber ( StringBuffer appendTo , double number ) throws IllegalArgumentException { if ( number == Double . MIN_VALUE ) { throw new IllegalArgumentException ( _STR ) ; } if ( number < _NUM ) { appendTo . append ( _STR ) ; } double abs = Math . abs ( number ) ; if ( abs < POWER_THREE ) { saySimpleNumber ( appendTo , ( int ) abs ) ; } else if ( abs < _NUM ) { int thousand = ( int ) ( abs % POWER_THREE ) ; appendTo . append ( _STR ) ; saySimpleNumber ( appendTo , thousand ) ; } else if ( abs < POWER_SIX ) { int thousand = ( int ) ( abs % POWER_SIX / POWER_THREE ) ; saySimpleNumber ( appendTo , thousand ) ; appendTo . append ( _STR ) ; double remainder = abs - thousand * POWER_THREE ; if ( remainder > _NUM ) { appendTo . append ( _STR ) ; sayNumber ( appendTo , remainder ) ; } } else if ( abs < POWER_NINE ) { int million = ( int ) ( abs % POWER_NINE / POWER_SIX ) ; saySimpleNumber ( appendTo , million ) ; appendTo . append ( _STR ) ; double remainder = abs - million * POWER_SIX ; if ( remainder > _NUM ) { appendTo . append ( _STR ) ; sayNumber ( appendTo , remainder ) ; } } else if ( abs < POWER_TWELVE ) { int billion = ( int ) ( abs % POWER_TWELVE / POWER_NINE ) ; saySimpleNumber ( appendTo , billion ) ; appendTo . append ( _STR ) ; double remainder = abs - billion * POWER_NINE ; if ( remainder > _NUM ) { appendTo . append ( _STR ) ; sayNumber ( appendTo , remainder ) ; } } else if ( abs < POWER_FIFTEEN ) { int trillion = ( int ) ( abs % POWER_FIFTEEN / POWER_TWELVE ) ; saySimpleNumber ( appendTo , trillion ) ; appendTo . append ( _STR ) ; double remainder = abs - trillion * POWER_TWELVE ; if ( remainder > _NUM ) { appendTo . append ( _STR ) ; sayNumber ( appendTo , remainder ) ; } } else { appendTo . append ( _STR ) ; } return appendTo . toString ( ) ; }
public void stop ( ) { _throttle . setSpeedSetting ( - _NUM ) ; _throttle . setSpeedSetting ( _NUM ) ; stopLabel . setIcon ( stopIcon ) ; stopLabel . setIconTextGap ( _gap ) ; pack ( ) ; }
public void encode ( OutputStream out ) throws IOException { DerOutputStream tmp = new DerOutputStream ( ) ; dnName . encode ( tmp ) ; out . write ( tmp . toByteArray ( ) ) ; }
public void makeDirty ( ) { betaChanged = _BOOL ; newMode = _BOOL ; precisionChanged = _BOOL ; regressionInterface . makeDirty ( instance ) ; }
private ArrayList < E > toArrayList ( ) { ArrayList < E > list = new ArrayList < E > ( ) ; for ( Node < E > p = first ( ) ; p != null ; p = succ ( p ) ) { E item = p . item ; if ( item != null ) list . add ( item ) ; } return list ; }
public boolean remove ( HttpConnection connection ) { TimeValues times = connectionToTimes . remove ( connection ) ; if ( times == null ) { log . warn ( _STR ) ; return _BOOL ; } else { return System . currentTimeMillis ( ) <= times . timeExpires ; } }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( _NUM ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; return newVector . elements ( ) ; }
private List < String > split ( String prefix ) { List < String > parts = new ArrayList < String > ( ) ; int bracketCount = _NUM ; boolean inquotes = _BOOL ; int lastIndex = _NUM ; for ( int i = _NUM ; i < prefix . length ( ) ; i ++ ) { char c = prefix . charAt ( i ) ; if ( c == _STR ) { bracketCount ++ ; continue ; } else if ( c == _STR ) { inquotes = ! inquotes ; continue ; } else if ( c == _STR ) { bracketCount -- ; if ( bracketCount < _NUM ) { throw new RuntimeException ( _STR + prefix ) ; } continue ; } if ( c == _STR && ! inquotes && bracketCount == _NUM ) { parts . add ( prefix . substring ( lastIndex , i ) ) ; lastIndex = i + _NUM ; } } if ( lastIndex < prefix . length ( ) - _NUM && ! inquotes && bracketCount == _NUM ) { parts . add ( prefix . substring ( lastIndex ) ) ; } return parts ; }
public static long lowerHexToUnsignedLong ( String lowerHex ) { int length = lowerHex . length ( ) ; if ( length < _NUM || length > _NUM ) throw isntLowerHexLong ( lowerHex ) ; int i = length > _NUM ? length - _NUM : _NUM ; long result = _NUM ; for ( ; i < length ; i ++ ) { char c = lowerHex . charAt ( i ) ; result <<= _NUM ; if ( c >= _STR && c <= _STR ) { result |= c - _STR ; } else if ( c >= _STR && c <= _STR ) { result |= c - _STR + _NUM ; } else { throw isntLowerHexLong ( lowerHex ) ; } } return result ; }
public static double sampleSkewStandardError ( int size ) { int n = size ; return Math . sqrt ( _NUM * n * ( n - _NUM ) / ( ( n - _NUM ) * ( n + _NUM ) * ( n + _NUM ) ) ) ; }
public void load ( List < PolicyQualifierInfo > policyQualifierInfo ) { PolicyQualifierInfo [ ] policyQualifierInfoArray = policyQualifierInfo . toArray ( new PolicyQualifierInfo [ policyQualifierInfo . size ( ) ] ) ; Arrays . sort ( policyQualifierInfoArray , new PolicyQualifierInfoComparator ( ) ) ; data = new Object [ policyQualifierInfoArray . length ] [ _NUM ] ; int i = _NUM ; for ( PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray ) { data [ i ] [ _NUM ] = policyQualInfo ; i ++ ; } fireTableDataChanged ( ) ; }
public void runScript ( Reader reader ) throws IOException , SQLException { try { boolean originalAutoCommit = connection . getAutoCommit ( ) ; try { if ( originalAutoCommit != this . autoCommit ) { connection . setAutoCommit ( this . autoCommit ) ; } runScript ( connection , reader ) ; } finally { connection . setAutoCommit ( originalAutoCommit ) ; } } catch ( IOException | SQLException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( _STR + e , e ) ; } }
public double doOperation ( ) throws OperatorFailedException { double logq ; final NodeRef root = tree . getRoot ( ) ; final double oldTreeHeight = tree . getNodeHeight ( root ) ; NodeRef i ; do { i = tree . getNode ( MathUtils . nextInt ( tree . getNodeCount ( ) ) ) ; } while ( root == i ) ; final NodeRef iP = tree . getParent ( i ) ; final NodeRef CiP = getOtherChild ( tree , iP , i ) ; final NodeRef PiP = tree . getParent ( iP ) ; final double delta = getDelta ( ) ; final double oldHeight = tree . getNodeHeight ( iP ) ; final double newHeight = oldHeight + delta ; if ( delta > _NUM ) { if ( PiP != null && tree . getNodeHeight ( PiP ) < newHeight ) { NodeRef newParent = PiP ; NodeRef newChild = iP ; while ( tree . getNodeHeight ( newParent ) < newHeight ) { newChild = newParent ; newParent = tree . getParent ( newParent ) ; if ( newParent == null ) break ; } tree . beginTreeEdit ( ) ; if ( tree . isRoot ( newChild ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . setRoot ( iP ) ; if ( tree . hasNodeTraits ( ) ) { tree . swapAllTraits ( newChild , iP ) ; } if ( tree . hasRates ( ) ) { final double rootNodeRate = tree . getNodeRate ( newChild ) ; tree . setNodeRate ( newChild , tree . getNodeRate ( iP ) ) ; tree . setNodeRate ( iP , rootNodeRate ) ; } } else { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . addChild ( newParent , iP ) ; } tree . setNodeHeight ( iP , newHeight ) ; tree . endTreeEdit ( ) ; final int possibleSources = intersectingEdges ( tree , newChild , oldHeight , null ) ; logq = - Math . log ( possibleSources ) ; } else { tree . setNodeHeight ( iP , newHeight ) ; logq = _NUM ; } } else { if ( tree . getNodeHeight ( i ) > newHeight ) { return Double . NEGATIVE_INFINITY ; } if ( tree . getNodeHeight ( CiP ) > newHeight ) { List < NodeRef > newChildren = new ArrayList < NodeRef > ( ) ; final int possibleDestinations = intersectingEdges ( tree , CiP , newHeight , newChildren ) ; if ( newChildren . size ( ) == _NUM ) { return Double . NEGATIVE_INFINITY ; } final int childIndex = MathUtils . nextInt ( newChildren . size ( ) ) ; NodeRef newChild = newChildren . get ( childIndex ) ; NodeRef newParent = tree . getParent ( newChild ) ; tree . beginTreeEdit ( ) ; if ( tree . isRoot ( iP ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( newParent , iP ) ; tree . setRoot ( CiP ) ; if ( tree . hasNodeTraits ( ) ) { tree . swapAllTraits ( iP , CiP ) ; } if ( tree . hasRates ( ) ) { final double rootNodeRate = tree . getNodeRate ( iP ) ; tree . setNodeRate ( iP , tree . getNodeRate ( CiP ) ) ; tree . setNodeRate ( CiP , rootNodeRate ) ; } } else { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . addChild ( newParent , iP ) ; } tree . setNodeHeight ( iP , newHeight ) ; tree . endTreeEdit ( ) ; logq = Math . log ( possibleDestinations ) ; } else { tree . setNodeHeight ( iP , newHeight ) ; logq = _NUM ; } } if ( swapInRandomRate ) { final NodeRef j = tree . getNode ( MathUtils . nextInt ( tree . getNodeCount ( ) ) ) ; if ( j != i ) { final double tmp = tree . getNodeRate ( i ) ; tree . setNodeRate ( i , tree . getNodeRate ( j ) ) ; tree . setNodeRate ( j , tmp ) ; } } if ( swapInRandomTrait ) { final NodeRef j = tree . getNode ( MathUtils . nextInt ( tree . getNodeCount ( ) ) ) ; if ( j != i ) { tree . swapAllTraits ( i , j ) ; } } if ( logq == Double . NEGATIVE_INFINITY ) throw new OperatorFailedException ( _STR ) ; if ( scaledDirichletBranches ) { if ( oldTreeHeight != tree . getNodeHeight ( tree . getRoot ( ) ) ) throw new OperatorFailedException ( _STR ) ; } return logq ; }
MarkerSegment findMarkerSegment ( Class cls , boolean first ) { if ( first ) { Iterator iter = markerSequence . iterator ( ) ; while ( iter . hasNext ( ) ) { MarkerSegment seg = ( MarkerSegment ) iter . next ( ) ; if ( cls . isInstance ( seg ) ) { return seg ; } } } else { ListIterator iter = markerSequence . listIterator ( markerSequence . size ( ) ) ; while ( iter . hasPrevious ( ) ) { MarkerSegment seg = ( MarkerSegment ) iter . previous ( ) ; if ( cls . isInstance ( seg ) ) { return seg ; } } } return null ; }
default Filterable < T > removeAll ( final T ... values ) { return removeAll ( Stream . of ( values ) ) ; }
public static Map < String , Object > createContentAssocMethod ( DispatchContext dctx , Map < String , ? extends Object > rcontext ) throws GenericServiceException , GenericEntityException { Map < String , Object > context = UtilMisc . makeMapWritable ( rcontext ) ; List < String > targetOperationList = ContentWorker . prepTargetOperationList ( context , _STR ) ; List < String > contentPurposeList = ContentWorker . prepContentPurposeList ( context ) ; context . put ( _STR , targetOperationList ) ; context . put ( _STR , contentPurposeList ) ; Locale locale = ( Locale ) context . get ( _STR ) ; Delegator delegator = dctx . getDelegator ( ) ; LocalDispatcher dispatcher = dctx . getDispatcher ( ) ; Map < String , Object > result = FastMap . newInstance ( ) ; String contentIdFrom = ( String ) context . get ( _STR ) ; String contentIdTo = ( String ) context . get ( _STR ) ; String contentId = ( String ) context . get ( _STR ) ; int contentIdCount = _NUM ; if ( UtilValidate . isNotEmpty ( contentIdFrom ) ) contentIdCount ++ ; if ( UtilValidate . isNotEmpty ( contentIdTo ) ) contentIdCount ++ ; if ( UtilValidate . isNotEmpty ( contentId ) ) contentIdCount ++ ; if ( contentIdCount < _NUM ) { Debug . logError ( _STR , _STR ) ; return ServiceUtil . returnError ( UtilProperties . getMessage ( resource , _STR , locale ) ) ; } if ( UtilValidate . isNotEmpty ( contentIdFrom ) ) { if ( UtilValidate . isEmpty ( contentIdTo ) ) contentIdTo = contentId ; } if ( UtilValidate . isNotEmpty ( contentIdTo ) ) { if ( UtilValidate . isEmpty ( contentIdFrom ) ) contentIdFrom = contentId ; } GenericValue contentAssoc = delegator . makeValue ( _STR , FastMap . newInstance ( ) ) ; contentAssoc . put ( _STR , contentIdFrom ) ; contentAssoc . put ( _STR , contentIdTo ) ; contentAssoc . put ( _STR , context . get ( _STR ) ) ; contentAssoc . put ( _STR , context . get ( _STR ) ) ; contentAssoc . put ( _STR , context . get ( _STR ) ) ; Timestamp fromDate = ( Timestamp ) context . get ( _STR ) ; if ( fromDate == null ) { contentAssoc . put ( _STR , UtilDateTime . nowTimestamp ( ) ) ; } else { contentAssoc . put ( _STR , fromDate ) ; } Timestamp thruDate = ( Timestamp ) context . get ( _STR ) ; if ( thruDate == null ) { contentAssoc . put ( _STR , null ) ; } else { contentAssoc . put ( _STR , thruDate ) ; } contentAssoc . put ( _STR , context . get ( _STR ) ) ; contentAssoc . put ( _STR , context . get ( _STR ) ) ; String upperCoordinateStr = ( String ) context . get ( _STR ) ; if ( UtilValidate . isEmpty ( upperCoordinateStr ) ) { contentAssoc . put ( _STR , null ) ; } else { contentAssoc . put ( _STR , upperCoordinateStr ) ; } String leftCoordinateStr = ( String ) context . get ( _STR ) ; if ( UtilValidate . isEmpty ( leftCoordinateStr ) ) { contentAssoc . put ( _STR , null ) ; } else { contentAssoc . put ( _STR , leftCoordinateStr ) ; } GenericValue userLogin = ( GenericValue ) context . get ( _STR ) ; String userLoginId = ( String ) userLogin . get ( _STR ) ; String createdByUserLogin = userLoginId ; String lastModifiedByUserLogin = userLoginId ; Timestamp createdDate = UtilDateTime . nowTimestamp ( ) ; Timestamp lastModifiedDate = UtilDateTime . nowTimestamp ( ) ; contentAssoc . put ( _STR , createdByUserLogin ) ; contentAssoc . put ( _STR , lastModifiedByUserLogin ) ; contentAssoc . put ( _STR , createdDate ) ; contentAssoc . put ( _STR , lastModifiedDate ) ; Map < String , Object > serviceInMap = FastMap . newInstance ( ) ; String permissionStatus = null ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , targetOperationList ) ; serviceInMap . put ( _STR , contentPurposeList ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , contentIdTo ) ; serviceInMap . put ( _STR , contentIdFrom ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; Map < String , Object > permResults = null ; permResults = dispatcher . runSync ( _STR , serviceInMap ) ; permissionStatus = ( String ) permResults . get ( _STR ) ; if ( permissionStatus != null && permissionStatus . equals ( _STR ) ) { contentAssoc . create ( ) ; } else { String errorMsg = ( String ) permResults . get ( ModelService . ERROR_MESSAGE ) ; result . put ( ModelService . ERROR_MESSAGE , errorMsg ) ; return ServiceUtil . returnFailure ( errorMsg ) ; } result . put ( _STR , contentIdTo ) ; result . put ( _STR , contentIdFrom ) ; result . put ( _STR , contentAssoc . get ( _STR ) ) ; result . put ( _STR , contentAssoc . get ( _STR ) ) ; return result ; }
public void reset ( boolean clear ) { gotVersion = _BOOL ; gotHeaderLength = _BOOL ; gotHeader = _BOOL ; gotBody = _BOOL ; gotBodyBoundary = _BOOL ; headerLength = _NUM ; bodyLength = _NUM ; bodyBytesReceived = _NUM ; if ( clear ) { bufferOffset = _NUM ; buffer . clear ( ) ; bodyFile = null ; if ( bodyStream != null ) { try { bodyStream . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } bodyStream = null ; } } }
void removeAt ( final int removeIndex ) { final Object [ ] items = this . items ; if ( removeIndex == takeIndex ) { items [ takeIndex ] = null ; takeIndex = inc ( takeIndex ) ; count -- ; if ( itrs != null ) itrs . elementDequeued ( ) ; } else { final int putIndex = this . putIndex ; for ( int i = removeIndex ; ; ) { int next = inc ( i ) ; if ( next != putIndex ) { items [ i ] = items [ next ] ; i = next ; } else { items [ i ] = null ; this . putIndex = i ; break ; } } count -- ; if ( itrs != null ) itrs . removedAt ( removeIndex ) ; } notFull . signal ( ) ; }
private void saveAndClose ( boolean save ) { content . setEnabled ( _BOOL ) ; if ( timer != null ) { timer . cancel ( ) ; timer = null ; } if ( timerNextSync != null ) { timerNextSync . cancel ( ) ; timerNextSync = null ; } if ( save ) { Log . d ( LOG_TAG , _STR ) ; saveData ( null ) ; } else { Log . d ( LOG_TAG , _STR ) ; } Intent data = new Intent ( ) ; data . setAction ( Intent . ACTION_VIEW ) ; data . putExtra ( PARAM_NOTE , note ) ; data . putExtra ( PARAM_NOTE_POSITION , notePosition ) ; setResult ( RESULT_OK , data ) ; finish ( ) ; }
public static Uri addMessage ( ContentResolver resolver , String address , String body , String subject , Long date , boolean deliveryReport , long threadId ) { final Uri CONTENT_URI = Uri . parse ( _STR ) ; return addMessageToUri ( resolver , CONTENT_URI , address , body , subject , date , _BOOL , deliveryReport , threadId ) ; }
public static < T > void blockingSubscribePrint ( Observable < T > observable , String name ) { CountDownLatch latch = new CountDownLatch ( _NUM ) ; subscribePrint ( observable . finallyDo ( null ) , name ) ; try { latch . await ( ) ; } catch ( InterruptedException e ) { } }
public static final double calcNiceNumber ( final double RANGE , final boolean ROUND ) { double niceFraction ; double exponent = Math . floor ( Math . log10 ( RANGE ) ) ; double fraction = RANGE / Math . pow ( _NUM , exponent ) ; if ( ROUND ) { if ( Double . compare ( fraction , _NUM ) < _NUM ) { niceFraction = _NUM ; } else if ( Double . compare ( fraction , _NUM ) < _NUM ) { niceFraction = _NUM ; } else if ( Double . compare ( fraction , _NUM ) < _NUM ) { niceFraction = _NUM ; } else { niceFraction = _NUM ; } } else { if ( Double . compare ( fraction , _NUM ) <= _NUM ) { niceFraction = _NUM ; } else if ( Double . compare ( fraction , _NUM ) <= _NUM ) { niceFraction = _NUM ; } else if ( Double . compare ( fraction , _NUM ) <= _NUM ) { niceFraction = _NUM ; } else { niceFraction = _NUM ; } } return niceFraction * Math . pow ( _NUM , exponent ) ; }
private final Object internalReplace ( Object k , Object v , Object cv ) { int h = spread ( k . hashCode ( ) ) ; Object oldVal = null ; for ( Node [ ] tab = table ; ; ) { Node f ; int i , fh ; Object fk ; if ( tab == null || ( f = tabAt ( tab , i = ( tab . length - _NUM ) & h ) ) == null ) break ; else if ( ( fh = f . hash ) == MOVED ) { if ( ( fk = f . key ) instanceof TreeBin ) { TreeBin t = ( TreeBin ) fk ; boolean validated = _BOOL ; boolean deleted = _BOOL ; t . acquire ( _NUM ) ; try { if ( tabAt ( tab , i ) == f ) { validated = _BOOL ; TreeNode p = t . getTreeNode ( h , k , t . root ) ; if ( p != null ) { Object pv = p . val ; if ( cv == null || cv == pv || cv . equals ( pv ) ) { oldVal = pv ; if ( ( p . val = v ) == null ) { deleted = _BOOL ; t . deleteTreeNode ( p ) ; } } } } } finally { t . release ( _NUM ) ; } if ( validated ) { if ( deleted ) counter . add ( - _NUM ) ; break ; } } else tab = ( Node [ ] ) fk ; } else if ( ( fh & HASH_BITS ) != h && f . next == null ) break ; else if ( ( fh & LOCKED ) != _NUM ) { checkForResize ( ) ; f . tryAwaitLock ( tab , i ) ; } else if ( f . casHash ( fh , fh | LOCKED ) ) { boolean validated = _BOOL ; boolean deleted = _BOOL ; try { if ( tabAt ( tab , i ) == f ) { validated = _BOOL ; for ( Node e = f , pred = null ; ; ) { Object ek , ev ; if ( ( e . hash & HASH_BITS ) == h && ( ( ev = e . val ) != null ) && ( ( ek = e . key ) == k || k . equals ( ek ) ) ) { if ( cv == null || cv == ev || cv . equals ( ev ) ) { oldVal = ev ; if ( ( e . val = v ) == null ) { deleted = _BOOL ; Node en = e . next ; if ( pred != null ) pred . next = en ; else setTabAt ( tab , i , en ) ; } } break ; } pred = e ; if ( ( e = e . next ) == null ) break ; } } } finally { if ( ! f . casHash ( fh | LOCKED , fh ) ) { f . hash = fh ; synchronized ( f ) { f . notifyAll ( ) ; } ; } } if ( validated ) { if ( deleted ) counter . add ( - _NUM ) ; break ; } } } return oldVal ; }
private static final boolean copyHeader ( String name , String fromReq , StringBuffer buf ) { int start = fromReq . indexOf ( name ) ; if ( start != - _NUM ) { int end = fromReq . indexOf ( _STR , start ) ; if ( end != - _NUM ) { buf . append ( fromReq . subSequence ( start - _NUM , end ) ) ; return _BOOL ; } } return _BOOL ; }
public void sendMetric ( final String name , final double value ) { logger . debug ( String . format ( _STR , name , value ) ) ; if ( telemetryClient != null ) { telemetryClient . trackMetric ( name , value ) ; } }
default Document putAll ( Iterable < Field > fields , Predicate < CharSequence > acceptableFieldNames ) { for ( Field field : fields ) { if ( acceptableFieldNames . test ( field . getName ( ) ) ) { setValue ( field . getName ( ) , field . getValue ( ) ) ; } } return this ; }
public static URL findResourceBase ( String baseResource , ClassLoader loader ) { URL url = loader . getResource ( baseResource ) ; return findResourceBase ( url , baseResource ) ; }
public String toEPL ( EPStatementFormatter formatter ) { StringWriter writer = new StringWriter ( ) ; toEPL ( formatter , writer ) ; return writer . toString ( ) ; }
public boolean isSpecified ( int index ) { if ( ( index < _NUM ) || ( index >= mLength ) ) { throw new ArrayIndexOutOfBoundsException ( _STR ) ; } String str = mItems [ ( index << _NUM ) + _NUM ] ; return ( ( str != null ) ? ( str . charAt ( _NUM ) == _STR ) : _BOOL ) ; }
public StatArchiveReader ( String archiveName ) throws IOException { this ( new File [ ] { new File ( archiveName ) } , null , _BOOL ) ; }
private static void initAdbSocketAddr ( ) { try { sAdbServerPort = getAdbServerPort ( ) ; InetAddress hostAddr = InetAddress . getByName ( DEFAULT_ADB_HOST ) ; sSocketAddr = new InetSocketAddress ( hostAddr , sAdbServerPort ) ; } catch ( UnknownHostException e ) { } }
public int read ( long fileOffset , byte [ ] buffer , int offset , int length ) throws IOException { _file . seek ( fileOffset ) ; return _file . read ( buffer , offset , length ) ; }
private boolean matchesAnyTag ( String tagName ) { return tagNames . contains ( tagName ) ; }
default void shutdown ( ) { Platform . exit ( ) ; }
public boolean isExpanded ( int row ) { TreeUI tree = getUI ( ) ; if ( tree != null ) { TreePath path = tree . getPathForRow ( this , row ) ; if ( path != null ) { Boolean value = expandedState . get ( path ) ; return ( value != null && value . booleanValue ( ) ) ; } } return _BOOL ; }
private static int labelEnd ( String s ) { int colonIndex = s . indexOf ( _STR ) ; int semicolonIndex = s . indexOf ( _STR ) ; if ( ( semicolonIndex == - _NUM ) || ( colonIndex < semicolonIndex ) ) { return colonIndex ; } else { return - _NUM ; } }
public void addListener ( AnimatorListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < AnimatorListener > ( ) ; } mListeners . add ( listener ) ; }
public HttpMethodInfo ( Method method , Object handler , Object [ ] args , MultivaluedMap < String , Object > formParameters , Response responder ) { this . method = method ; this . handler = handler ; this . args = Arrays . copyOf ( args , args . length ) ; this . formParameters = formParameters ; this . responder = responder ; }
public static boolean equals ( byte [ ] [ ] field1 , byte [ ] [ ] field2 ) { int index1 = _NUM ; int length1 = field1 == null ? _NUM : field1 . length ; int index2 = _NUM ; int length2 = field2 == null ? _NUM : field2 . length ; while ( _BOOL ) { while ( index1 < length1 && field1 [ index1 ] == null ) { index1 ++ ; } while ( index2 < length2 && field2 [ index2 ] == null ) { index2 ++ ; } boolean atEndOf1 = index1 >= length1 ; boolean atEndOf2 = index2 >= length2 ; if ( atEndOf1 && atEndOf2 ) { return _BOOL ; } else if ( atEndOf1 != atEndOf2 ) { return _BOOL ; } else if ( ! Arrays . equals ( field1 [ index1 ] , field2 [ index2 ] ) ) { return _BOOL ; } index1 ++ ; index2 ++ ; } }
private void drawText ( int x1 , int y1 , int s , boolean e_or_n , Graphics g ) { Color oldColor = g . getColor ( ) ; g . setPaintMode ( ) ; if ( m_FontColor == null ) { g . setColor ( Color . black ) ; } else { g . setColor ( m_FontColor ) ; } String st ; if ( e_or_n ) { Edge e = m_edges [ s ] . m_edge ; for ( int noa = _NUM ; ( st = e . getLine ( noa ) ) != null ; noa ++ ) { g . drawString ( st , ( m_edges [ s ] . m_width - m_fontSize . stringWidth ( st ) ) / _NUM + x1 , y1 + ( noa + _NUM ) * m_fontSize . getHeight ( ) ) ; } } else { Node e = m_nodes [ s ] . m_node ; for ( int noa = _NUM ; ( st = e . getLine ( noa ) ) != null ; noa ++ ) { g . drawString ( st , ( m_nodes [ s ] . m_width - m_fontSize . stringWidth ( st ) ) / _NUM + x1 , y1 + ( noa + _NUM ) * m_fontSize . getHeight ( ) ) ; } } g . setColor ( oldColor ) ; }
public void update ( List < Race > races ) { if ( currentRace == null ) { return ; } if ( races . contains ( currentRace ) ) { setRace ( races . get ( races . indexOf ( currentRace ) ) ) ; } }
public boolean required ( ) { return _parameterMetadata . contains ( Metadata . REQUIRED ) ; }
protected void sendDataToReceiver ( ResultReceiver receiver , Intent originalIntent , Serializable data ) { if ( receiver != null && data != null ) { Bundle bundle = new Bundle ( ) ; bundle . putParcelable ( ServiceReceiver . EXTRA_ORIGINAL_INTENT , originalIntent ) ; bundle . putSerializable ( ServiceReceiver . EXTRA_DATA , data ) ; receiver . send ( ServiceReceiver . STATUS_DATA , bundle ) ; } }
private static Object matchOrReplace ( Context cx , Scriptable scope , Scriptable thisObj , Object [ ] args , RegExpImpl reImpl , GlobData data , boolean forceFlat ) { NativeRegExp re ; String str = ScriptRuntime . toString ( thisObj ) ; data . str = str ; Scriptable topScope = ScriptableObject . getTopLevelScope ( scope ) ; if ( args . length == _NUM ) { Object compiled = NativeRegExp . compileRE ( cx , _STR , _STR , _BOOL ) ; re = new NativeRegExp ( topScope , compiled ) ; } else if ( args [ _NUM ] instanceof NativeRegExp ) { re = ( NativeRegExp ) args [ _NUM ] ; } else { String src = ScriptRuntime . toString ( args [ _NUM ] ) ; String opt ; if ( data . optarg < args . length ) { args [ _NUM ] = src ; opt = ScriptRuntime . toString ( args [ data . optarg ] ) ; } else { opt = null ; } Object compiled = NativeRegExp . compileRE ( cx , src , opt , forceFlat ) ; re = new NativeRegExp ( topScope , compiled ) ; } data . global = ( re . getFlags ( ) & NativeRegExp . JSREG_GLOB ) != _NUM ; int [ ] indexp = { _NUM } ; Object result = null ; if ( data . mode == RA_SEARCH ) { result = re . executeRegExp ( cx , scope , reImpl , str , indexp , NativeRegExp . TEST ) ; if ( result != null && result . equals ( Boolean . TRUE ) ) result = Integer . valueOf ( reImpl . leftContext . length ) ; else result = Integer . valueOf ( - _NUM ) ; } else if ( data . global ) { re . lastIndex = _NUM ; for ( int count = _NUM ; indexp [ _NUM ] <= str . length ( ) ; count ++ ) { result = re . executeRegExp ( cx , scope , reImpl , str , indexp , NativeRegExp . TEST ) ; if ( result == null || ! result . equals ( Boolean . TRUE ) ) break ; if ( data . mode == RA_MATCH ) { match_glob ( data , cx , scope , count , reImpl ) ; } else { if ( data . mode != RA_REPLACE ) Kit . codeBug ( ) ; SubString lastMatch = reImpl . lastMatch ; int leftIndex = data . leftIndex ; int leftlen = lastMatch . index - leftIndex ; data . leftIndex = lastMatch . index + lastMatch . length ; replace_glob ( data , cx , scope , reImpl , leftIndex , leftlen ) ; } if ( reImpl . lastMatch . length == _NUM ) { if ( indexp [ _NUM ] == str . length ( ) ) break ; indexp [ _NUM ] ++ ; } } } else { result = re . executeRegExp ( cx , scope , reImpl , str , indexp , ( ( data . mode == RA_REPLACE ) ? NativeRegExp . TEST : NativeRegExp . MATCH ) ) ; } return result ; }
public void tableSwitch ( final int [ ] keys , final TableSwitchGenerator generator , final boolean useTable ) { for ( int i = _NUM ; i < keys . length ; ++ i ) { if ( keys [ i ] < keys [ i - _NUM ] ) { throw new IllegalArgumentException ( _STR ) ; } } Label def = newLabel ( ) ; Label end = newLabel ( ) ; if ( keys . length > _NUM ) { int len = keys . length ; int min = keys [ _NUM ] ; int max = keys [ len - _NUM ] ; int range = max - min + _NUM ; if ( useTable ) { Label [ ] labels = new Label [ range ] ; Arrays . fill ( labels , def ) ; for ( int i = _NUM ; i < len ; ++ i ) { labels [ keys [ i ] - min ] = newLabel ( ) ; } mv . visitTableSwitchInsn ( min , max , def , labels ) ; for ( int i = _NUM ; i < range ; ++ i ) { Label label = labels [ i ] ; if ( label != def ) { mark ( label ) ; generator . generateCase ( i + min , end ) ; } } } else { Label [ ] labels = new Label [ len ] ; for ( int i = _NUM ; i < len ; ++ i ) { labels [ i ] = newLabel ( ) ; } mv . visitLookupSwitchInsn ( def , keys , labels ) ; for ( int i = _NUM ; i < len ; ++ i ) { mark ( labels [ i ] ) ; generator . generateCase ( keys [ i ] , end ) ; } } } mark ( def ) ; generator . generateDefault ( ) ; mark ( end ) ; }
public void print ( PrintWriter output , int w , int d ) { DecimalFormat format = new DecimalFormat ( ) ; format . setDecimalFormatSymbols ( new DecimalFormatSymbols ( Locale . US ) ) ; format . setMinimumIntegerDigits ( _NUM ) ; format . setMaximumFractionDigits ( d ) ; format . setMinimumFractionDigits ( d ) ; format . setGroupingUsed ( _BOOL ) ; print ( output , format , w + _NUM ) ; }
public static < E > Set < E > newSetFromMap ( Map < E , Boolean > map ) { if ( map . isEmpty ( ) ) { return new SetFromMap < E > ( map ) ; } throw new IllegalArgumentException ( ) ; }
public void removeBiomeType ( BiomeDictionary . Type type ) { ArrayList < BiomeGenBase > entryList = new ArrayList < BiomeGenBase > ( ) ; entryList . addAll ( Arrays . asList ( BiomeDictionary . getBiomesForType ( type ) ) ) ; for ( BiomeGenBase biome : entryList ) { Iterator < BiomeEntry > iterator = allowedBiomes . iterator ( ) ; while ( iterator . hasNext ( ) ) { if ( BiomeDictionary . areBiomesEquivalent ( iterator . next ( ) . biome , biome ) ) iterator . remove ( ) ; } } }
static SizeRequirements calculateTiledRequirements ( LayoutIterator iter , SizeRequirements r ) { long minimum = _NUM ; long maximum = _NUM ; long preferred = _NUM ; int lastMargin = _NUM ; int totalSpacing = _NUM ; int n = iter . getCount ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { iter . setIndex ( i ) ; int margin0 = lastMargin ; int margin1 = ( int ) iter . getLeadingCollapseSpan ( ) ; totalSpacing += Math . max ( margin0 , margin1 ) ; preferred += ( int ) iter . getPreferredSpan ( _NUM ) ; minimum += iter . getMinimumSpan ( _NUM ) ; maximum += iter . getMaximumSpan ( _NUM ) ; lastMargin = ( int ) iter . getTrailingCollapseSpan ( ) ; } totalSpacing += lastMargin ; totalSpacing += _NUM * iter . getBorderWidth ( ) ; minimum += totalSpacing ; preferred += totalSpacing ; maximum += totalSpacing ; if ( r == null ) { r = new SizeRequirements ( ) ; } r . minimum = ( minimum > Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( int ) minimum ; r . preferred = ( preferred > Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( int ) preferred ; r . maximum = ( maximum > Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( int ) maximum ; return r ; }
public static void writePaddedInteger ( Writer out , long value , int size ) throws IOException { int intValue = ( int ) value ; if ( intValue == value ) { writePaddedInteger ( out , intValue , size ) ; } else if ( size <= _NUM ) { out . write ( Long . toString ( value ) ) ; } else { if ( value < _NUM ) { out . write ( _STR ) ; if ( value != Long . MIN_VALUE ) { value = - value ; } else { for ( ; size > _NUM ; size -- ) { out . write ( _STR ) ; } out . write ( _STR ) ; return ; } } int digits = ( int ) ( Math . log ( value ) / LOG_10 ) + _NUM ; for ( ; size > digits ; size -- ) { out . write ( _STR ) ; } out . write ( Long . toString ( value ) ) ; } }
private static LDAPFilter createORFilter ( FilterSet filterSet ) throws LDAPException , IOException { List < JAXBElement < ? > > list = filterSet . getFilterGroup ( ) ; ArrayList < RawFilter > filters = new ArrayList < > ( list . size ( ) ) ; for ( JAXBElement < ? > filter : list ) { filters . add ( createFilter ( filter ) ) ; } return LDAPFilter . createORFilter ( filters ) ; }
private void sendBlob ( String index , byte [ ] blob ) { sendInstruction ( new GuacamoleInstruction ( _STR , index , DatatypeConverter . printBase64Binary ( blob ) ) ) ; }
protected void defineLabels ( ) { labelsValues = calcLabels ( ) ; if ( handleValues ) labels = getLabelsFromValues ( ) ; else labels = getLabelsFromData ( ) ; nLabels = labels . size ( ) ; }
public static Set < Interval > mergeIntervalToSet ( Set < Interval > intervals , Interval intervalToMerge ) { LinkedHashSet < Interval > copyOfOriginalSet = new LinkedHashSet < > ( intervals ) ; copyOfOriginalSet . add ( intervalToMerge ) ; return mergeIntervalSet ( copyOfOriginalSet ) ; }
public static String dropWhile ( GString self , @ ClosureParams ( value = FromString . class , conflictResolutionStrategy = PickFirstResolver . class , options = { _STR , _STR } ) Closure condition ) { return dropWhile ( self . toString ( ) , condition ) ; }
public void addNode ( TopologicalNode node ) { nodeList . add ( node ) ; }
public void printText ( String text ) { view . print ( text , text . endsWith ( _STR ) ) ; for ( ActionDelegate actionDelegate : actionDelegates ) { actionDelegate . onConsoleOutput ( this ) ; } }
@ Override public void trim ( ) { if ( counter < x . length ) { int [ ] y = new int [ counter ] ; System . arraycopy ( x , _NUM , y , _NUM , counter ) ; x = y ; resizeValues ( counter ) ; } }
private void divide ( int [ ] idx , double [ ] data , ArrayList < int [ ] > ret , int start , int end , int depth ) { if ( depth == _NUM ) { int [ ] a = Arrays . copyOfRange ( idx , start , end ) ; Arrays . sort ( a ) ; ret . add ( a ) ; return ; } final int count = end - start ; if ( count == _NUM ) { for ( int j = _NUM << depth ; j > _NUM ; -- j ) { ret . add ( new int [ _NUM ] ) ; } return ; } double m = _NUM ; for ( int i = start ; i < end ; i ++ ) { m += data [ i ] ; } m /= count ; int pos = Arrays . binarySearch ( data , start , end , m ) ; if ( pos >= _NUM ) { final int opt = ( start + end ) > > _NUM ; while ( data [ pos ] == m ) { if ( pos < opt ) { pos ++ ; } else if ( pos > opt ) { pos -- ; } else { break ; } } } else { pos = ( - pos - _NUM ) ; } divide ( idx , data , ret , start , pos , depth - _NUM ) ; divide ( idx , data , ret , pos , end , depth - _NUM ) ; }
void assertThreadsStayAlive ( long millis , Thread ... threads ) { try { delay ( millis ) ; for ( Thread thread : threads ) assertTrue ( thread . isAlive ( ) ) ; } catch ( InterruptedException fail ) { threadFail ( _STR ) ; } }
public AbstractWorkerManager ( String id ) { _id = id ; _status = new WorkerManagerStatus ( ) ; setExecutionMode ( EXECUTION_MODE . NON_SERIAL ) ; setupExecutor ( ) ; }
@ Override public void applyInline ( double [ ] data , int pos , int len ) { int i ; double [ ] dataOut = new double [ len ] ; if ( len > real . length ) { throw new IllegalArgumentException ( _STR ) ; } int middle = len / _NUM + len % _NUM ; System . arraycopy ( data , _NUM , dataOut , _NUM , len ) ; System . arraycopy ( dataOut , pos + middle , real , _NUM , len - middle ) ; System . arraycopy ( dataOut , pos , real , real . length - middle , middle ) ; if ( real . length > len ) Arrays . fill ( real , len - middle , real . length - middle , _NUM ) ; Arrays . fill ( imag , _NUM , imag . length , _NUM ) ; FFT . transform ( real , imag , _BOOL ) ; process ( real , imag ) ; FFT . transform ( real , imag , _BOOL ) ; System . arraycopy ( real , _NUM , dataOut , pos + middle , len - middle ) ; System . arraycopy ( real , real . length - middle , dataOut , pos , middle ) ; double origAvgEnergy = SignalProcUtils . getAverageSampleEnergy ( data , len ) ; for ( i = _NUM ; i < len ; i ++ ) data [ i ] = amount * dataOut [ i ] + oneMinusAmount * data [ i ] ; double newAvgEnergy = SignalProcUtils . getAverageSampleEnergy ( data , len ) ; double scale = origAvgEnergy / newAvgEnergy ; for ( i = _NUM ; i < len ; i ++ ) data [ i ] *= _NUM * scale ; }
@ OnMessage public void onMessage ( String message , Session session ) { callInternal ( _STR , session , message ) ; }
public final boolean insert_via ( BrdViaInfo p_via_info , PlaPointInt p_location , NetNosList p_net_no_arr , int p_trace_clearance_class_no , int [ ] p_trace_pen_halfwidth_arr , int p_max_recursion_depth , int p_max_via_recursion_depth , int p_pull_tight_accuracy , int p_pull_tight_time_limit ) { shove_fail_clear ( ) ; changed_area_clear ( ) ; boolean r_ok = shove_via_algo . shove_via_insert ( p_via_info , p_location , p_net_no_arr , p_trace_clearance_class_no , p_trace_pen_halfwidth_arr , p_max_recursion_depth , p_max_via_recursion_depth ) ; if ( ! r_ok ) return _BOOL ; NetNosList opt_net_no_arr = p_max_recursion_depth <= _NUM ? p_net_no_arr : NetNosList . EMPTY ; TimeLimitStoppable t_limit = new TimeLimitStoppable ( s_PREVENT_ENDLESS_LOOP ) ; changed_area_optimize ( opt_net_no_arr , p_pull_tight_accuracy , null , t_limit , null ) ; return _BOOL ; }
boolean thresholdExceeded ( final Set < IBindingSet > distinctProjectionBuffer , final int distinctProjectionBufferThreshold , final List < IBindingSet > incomingBindingsBuffer , final int incomingBindingsBufferThreshold ) { return distinctProjectionBuffer . size ( ) >= distinctProjectionBufferThreshold || incomingBindingsBuffer . size ( ) >= incomingBindingsBufferThreshold ; }
public static byte [ ] toByteArray ( String str ) { int len = str . length ( ) ; StringTokenizer st = new StringTokenizer ( str , _STR ) ; String [ ] newStrArray = new String [ st . countTokens ( ) ] ; int j = _NUM ; while ( st . hasMoreTokens ( ) ) { newStrArray [ j ] = st . nextToken ( ) ; j ++ ; } byte [ ] ret = new byte [ newStrArray . length ] ; int tmp ; for ( int i = _NUM ; i < newStrArray . length ; i ++ ) { tmp = Integer . parseInt ( newStrArray [ i ] , _NUM ) ; ret [ i ] = ( byte ) ( tmp - _NUM ) ; } return ret ; }
public static boolean nullEquals ( String s1 , String s2 ) { return ( s1 == null ? s2 == null : s1 . equals ( s2 ) ) ; }
private char [ ] fFormatDigits ( final double x ) { String sx ; int i , j , k ; final int n1In ; final int n2In ; int expon = _NUM ; boolean minusSign = _BOOL ; if ( x > _NUM ) { sx = Double . toString ( x ) ; } else if ( x < _NUM ) { sx = Double . toString ( - x ) ; minusSign = _BOOL ; } else { sx = Double . toString ( x ) ; if ( sx . charAt ( _NUM ) == _STR ) { minusSign = _BOOL ; sx = sx . substring ( _NUM ) ; } } final int ePos = sx . indexOf ( _STR ) ; final int rPos = sx . indexOf ( _STR ) ; if ( rPos != - _NUM ) { n1In = rPos ; } else if ( ePos != - _NUM ) { n1In = ePos ; } else { n1In = sx . length ( ) ; } if ( rPos != - _NUM ) { if ( ePos != - _NUM ) { n2In = ePos - rPos - _NUM ; } else { n2In = sx . length ( ) - rPos - _NUM ; } } else { n2In = _NUM ; } if ( ePos != - _NUM ) { int ie = ePos + _NUM ; expon = _NUM ; if ( sx . charAt ( ie ) == _STR ) { for ( ++ ie ; ie < sx . length ( ) ; ie ++ ) { if ( sx . charAt ( ie ) != _STR ) { break ; } } if ( ie < sx . length ( ) ) { expon = - Integer . parseInt ( sx . substring ( ie ) ) ; } } else { if ( sx . charAt ( ie ) == _STR ) { ++ ie ; } for ( ; ie < sx . length ( ) ; ie ++ ) { if ( sx . charAt ( ie ) != _STR ) { break ; } } if ( ie < sx . length ( ) ) { expon = Integer . parseInt ( sx . substring ( ie ) ) ; } } } final int p ; if ( precisionSet ) { p = precision ; } else { p = defaultDigits - _NUM ; } final char [ ] ca1 = sx . toCharArray ( ) ; final char [ ] ca2 = new char [ n1In + n2In ] ; final char [ ] ca3 ; final char [ ] ca4 ; final char [ ] ca5 ; for ( j = _NUM ; j < n1In ; j ++ ) { ca2 [ j ] = ca1 [ j ] ; } i = j + _NUM ; for ( k = _NUM ; k < n2In ; j ++ , i ++ , k ++ ) { ca2 [ j ] = ca1 [ i ] ; } if ( n1In + expon <= _NUM ) { ca3 = new char [ - expon + n2In ] ; for ( j = _NUM , k = _NUM ; k < ( - n1In - expon ) ; k ++ , j ++ ) { ca3 [ j ] = _STR ; } for ( i = _NUM ; i < ( n1In + n2In ) ; i ++ , j ++ ) { ca3 [ j ] = ca2 [ i ] ; } } else { ca3 = ca2 ; } boolean carry = _BOOL ; if ( p < - expon + n2In ) { if ( expon < _NUM ) { i = p ; } else { i = p + n1In ; } carry = checkForCarry ( ca3 , i ) ; if ( carry ) { carry = startSymbolicCarry ( ca3 , i - _NUM , _NUM ) ; } } if ( n1In + expon <= _NUM ) { ca4 = new char [ _NUM + p ] ; if ( ! carry ) { ca4 [ _NUM ] = _STR ; } else { ca4 [ _NUM ] = _STR ; } if ( alternateForm || ! precisionSet || precision != _NUM ) { ca4 [ _NUM ] = _STR ; for ( i = _NUM , j = _NUM ; i < Math . min ( p , ca3 . length ) ; i ++ , j ++ ) { ca4 [ j ] = ca3 [ i ] ; } for ( ; j < ca4 . length ; j ++ ) { ca4 [ j ] = _STR ; } } } else { if ( ! carry ) { if ( alternateForm || ! precisionSet || precision != _NUM ) { ca4 = new char [ n1In + expon + p + _NUM ] ; } else { ca4 = new char [ n1In + expon ] ; } j = _NUM ; } else { if ( alternateForm || ! precisionSet || precision != _NUM ) { ca4 = new char [ n1In + expon + p + _NUM ] ; } else { ca4 = new char [ n1In + expon + _NUM ] ; } ca4 [ _NUM ] = _STR ; j = _NUM ; } for ( i = _NUM ; i < Math . min ( n1In + expon , ca3 . length ) ; i ++ , j ++ ) { ca4 [ j ] = ca3 [ i ] ; } for ( ; i < n1In + expon ; i ++ , j ++ ) { ca4 [ j ] = _STR ; } if ( alternateForm || ! precisionSet || precision != _NUM ) { ca4 [ j ] = _STR ; j ++ ; for ( k = _NUM ; i < ca3 . length && k < p ; i ++ , j ++ , k ++ ) { ca4 [ j ] = ca3 [ i ] ; } for ( ; j < ca4 . length ; j ++ ) { ca4 [ j ] = _STR ; } } } int nZeros = _NUM ; if ( ! leftJustify && leadingZeros ) { int xThousands = _NUM ; if ( thousands ) { int xlead = _NUM ; if ( ca4 [ _NUM ] == _STR || ca4 [ _NUM ] == _STR || ca4 [ _NUM ] == _STR ) { xlead = _NUM ; } int xdp = xlead ; for ( ; xdp < ca4 . length ; xdp ++ ) { if ( ca4 [ xdp ] == _STR ) { break ; } } xThousands = ( xdp - xlead ) / _NUM ; } if ( fieldWidthSet ) { nZeros = fieldWidth - ca4 . length ; } if ( ( ! minusSign && ( leadingSign || leadingSpace ) ) || minusSign ) { nZeros -- ; } nZeros -= xThousands ; if ( nZeros < _NUM ) { nZeros = _NUM ; } } j = _NUM ; if ( ( ! minusSign && ( leadingSign || leadingSpace ) ) || minusSign ) { ca5 = new char [ ca4 . length + nZeros + _NUM ] ; j ++ ; } else { ca5 = new char [ ca4 . length + nZeros ] ; } if ( ! minusSign ) { if ( leadingSign ) { ca5 [ _NUM ] = _STR ; } if ( leadingSpace ) { ca5 [ _NUM ] = _STR ; } } else { ca5 [ _NUM ] = _STR ; } for ( i = _NUM ; i < nZeros ; i ++ , j ++ ) { ca5 [ j ] = _STR ; } for ( i = _NUM ; i < ca4 . length ; i ++ , j ++ ) { ca5 [ j ] = ca4 [ i ] ; } int lead = _NUM ; if ( ca5 [ _NUM ] == _STR || ca5 [ _NUM ] == _STR || ca5 [ _NUM ] == _STR ) { lead = _NUM ; } int dp = lead ; for ( ; dp < ca5 . length ; dp ++ ) { if ( ca5 [ dp ] == _STR ) { break ; } } final int nThousands = ( dp - lead ) / _NUM ; if ( dp < ca5 . length ) { ca5 [ dp ] = dfs . getDecimalSeparator ( ) ; } char [ ] ca6 = ca5 ; if ( thousands && nThousands > _NUM ) { ca6 = new char [ ca5 . length + nThousands + lead ] ; ca6 [ _NUM ] = ca5 [ _NUM ] ; for ( i = lead , k = lead ; i < dp ; i ++ ) { if ( i > _NUM && ( dp - i ) % _NUM == _NUM ) { ca6 [ k ] = dfs . getGroupingSeparator ( ) ; ca6 [ k + _NUM ] = ca5 [ i ] ; k += _NUM ; } else { ca6 [ k ] = ca5 [ i ] ; k ++ ; } } for ( ; i < ca5 . length ; i ++ , k ++ ) { ca6 [ k ] = ca5 [ i ] ; } } return ca6 ; }
int maxLength ( ) { FontMetrics fm = getFontMetrics ( getFont ( ) ) ; int m = _NUM ; int end = items . size ( ) ; for ( int i = _NUM ; i < end ; i ++ ) { int l = fm . stringWidth ( ( ( String ) items . elementAt ( i ) ) ) ; m = Math . max ( m , l ) ; } return m ; }
public void write ( final char chars [ ] , final int start , final int length ) throws java . io . IOException { if ( m_writer != null ) m_writer . write ( chars , start , length ) ; int lengthx3 = ( length << _NUM ) + length ; if ( lengthx3 >= buf_length ) { flushBuffer ( ) ; setBufferSize ( _NUM * lengthx3 ) ; } if ( lengthx3 > buf_length - count ) { flushBuffer ( ) ; } final int n = length + start ; for ( int i = start ; i < n ; i ++ ) { final char c = chars [ i ] ; if ( c < _NUM ) buf [ count ++ ] = ( byte ) ( c ) ; else if ( c < _NUM ) { buf [ count ++ ] = ( byte ) ( _NUM + ( c > > _NUM ) ) ; buf [ count ++ ] = ( byte ) ( _NUM + ( c & _NUM ) ) ; } else { buf [ count ++ ] = ( byte ) ( _NUM + ( c > > _NUM ) ) ; buf [ count ++ ] = ( byte ) ( _NUM + ( ( c > > _NUM ) & _NUM ) ) ; buf [ count ++ ] = ( byte ) ( _NUM + ( c & _NUM ) ) ; } } }
public PlaPointInt round_to_the_left ( PlaDirection p_dir ) { PlaPointFloat dir = p_dir . to_float ( ) ; double rounded_x ; if ( dir . v_y > _NUM ) { rounded_x = Math . floor ( v_x ) ; } else if ( dir . v_y < _NUM ) { rounded_x = Math . ceil ( v_x ) ; } else { rounded_x = Math . round ( v_x ) ; } double rounded_y ; if ( dir . v_x > _NUM ) { rounded_y = Math . ceil ( v_y ) ; } else if ( dir . v_x < _NUM ) { rounded_y = Math . floor ( v_y ) ; } else { rounded_y = Math . round ( v_y ) ; } return new PlaPointInt ( rounded_x , rounded_y ) ; }
protected HttpHost determineProxy ( HttpHost target , HttpRequest request , HttpContext context ) throws HttpException { ProxySelector psel = this . proxySelector ; if ( psel == null ) psel = ProxySelector . getDefault ( ) ; if ( psel == null ) return null ; URI targetURI = null ; try { targetURI = new URI ( target . toURI ( ) ) ; } catch ( URISyntaxException usx ) { throw new HttpException ( _STR + target , usx ) ; } List < Proxy > proxies = psel . select ( targetURI ) ; Proxy p = chooseProxy ( proxies , target , request , context ) ; HttpHost result = null ; if ( p . type ( ) == Proxy . Type . HTTP ) { if ( ! ( p . address ( ) instanceof InetSocketAddress ) ) { throw new HttpException ( _STR + p . address ( ) ) ; } final InetSocketAddress isa = ( InetSocketAddress ) p . address ( ) ; result = new HttpHost ( getHost ( isa ) , isa . getPort ( ) ) ; } return result ; }
private void addReference ( final int sourcePosition , final int referencePosition ) { if ( srcAndRefPositions == null ) { srcAndRefPositions = new int [ _NUM ] ; } if ( referenceCount >= srcAndRefPositions . length ) { int [ ] a = new int [ srcAndRefPositions . length + _NUM ] ; System . arraycopy ( srcAndRefPositions , _NUM , a , _NUM , srcAndRefPositions . length ) ; srcAndRefPositions = a ; } srcAndRefPositions [ referenceCount ++ ] = sourcePosition ; srcAndRefPositions [ referenceCount ++ ] = referencePosition ; }
public Object [ ] toArray ( ) { return Arrays . copyOf ( elementData , size ) ; }
public boolean isRunning ( ) { return mThread != null && mThread . isAlive ( ) ; }
public static byte [ ] unwrapVCF ( File sourceFile , File tmpFile ) throws FileNotFoundException , IOException { ZipArchiveInputStream in = null ; FileOutputStream fos = null ; String hmacString = null ; try { in = new ZipArchiveInputStream ( new FileInputStream ( sourceFile ) ) ; ArchiveEntry entry ; in . getNextEntry ( ) ; fos = new FileOutputStream ( tmpFile ) ; IOUtils . copy ( in , fos ) ; entry = in . getNextEntry ( ) ; hmacString = entry . getName ( ) ; return Utils . hexToBytes ( hmacString ) ; } catch ( StringIndexOutOfBoundsException e ) { logger . error ( _STR + hmacString + _STR , e ) ; throw e ; } catch ( Exception e ) { logger . error ( _STR , e ) ; throw e ; } finally { if ( fos != null ) { fos . flush ( ) ; fos . close ( ) ; } if ( in != null ) { in . close ( ) ; } } }
public boolean registerUser ( String username , String password , String uri ) throws DataAccessException { if ( checkUsernameExists ( username ) ) { return _BOOL ; } storeUser ( username , password , uri ) ; return _BOOL ; }
public SELECT ( @ NonNull String ... columns ) { if ( columns == null ) { throw new NullPointerException ( _STR ) ; } if ( columns . length == _NUM ) throw new IllegalArgumentException ( _STR ) ; StringBuilder builder = new StringBuilder ( _STR ) ; for ( int i = _NUM ; i < columns . length ; i ++ ) { builder . append ( columns [ i ] ) ; if ( i != ( columns . length - _NUM ) ) builder . append ( _STR ) ; } sql = builder . toString ( ) ; }
public static synchronized MBeanInfo testCompliance ( final Class < ? > baseClass , Class < ? > mbeanInterface ) throws NotCompliantMBeanException { if ( mbeanInterface == null ) mbeanInterface = getStandardMBeanInterface ( baseClass ) ; ReflectUtil . checkPackageAccess ( mbeanInterface ) ; MBeanIntrospector < ? > introspector = StandardMBeanIntrospector . getInstance ( ) ; return getClassMBeanInfo ( introspector , baseClass , mbeanInterface ) ; }
public static Set < String > toStringSet ( TemplateSequenceModel seqModel ) throws TemplateModelException { Set < String > set = new HashSet < String > ( ) ; for ( int i = _NUM ; i < seqModel . size ( ) ; i ++ ) { set . add ( getAsStringNonEscaping ( ( TemplateScalarModel ) seqModel . get ( i ) ) ) ; } return set ; }
public JKSSignatureToken ( InputStream ksStream , String ksPassword ) { try { keyStore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ; password = ( ksPassword == null ) ? null : ksPassword . toCharArray ( ) ; keyStore . load ( ksStream , password ) ; } catch ( Exception e ) { throw new DSSException ( e ) ; } finally { if ( ksStream != null ) { try { ksStream . close ( ) ; } catch ( IOException e ) { logger . error ( e . getMessage ( ) , e ) ; } } } }
protected void writeLocation ( String loc ) throws IOException { hadAnnotations |= ( loc != null ) ; locOut . writeObject ( loc ) ; }
protected int __offset ( int vtable_offset ) { int vtable = bb_pos - bb . getInt ( bb_pos ) ; return vtable_offset < bb . getShort ( vtable ) ? bb . getShort ( vtable + vtable_offset ) : _NUM ; }
public static String selectText ( XPathExpression expr , Node context ) { try { return ( String ) expr . evaluate ( context , XPathConstants . STRING ) ; } catch ( XPathExpressionException e ) { throw new XmlException ( e ) ; } }
public static HttpHeaders toArmeria ( io . netty . handler . codec . http . HttpHeaders inHeaders ) { if ( inHeaders . isEmpty ( ) ) { return HttpHeaders . EMPTY_HEADERS ; } final HttpHeaders out = new DefaultHttpHeaders ( _BOOL , inHeaders . size ( ) ) ; toArmeria ( inHeaders , out ) ; return out ; }
public static int calculateRMSLevel ( short [ ] audioData , int numframes ) { long lSum = _NUM ; int numread = _NUM ; for ( short s : audioData ) { lSum = lSum + s ; numread ++ ; if ( numread == numframes ) break ; } double dAvg = lSum / numframes ; double sumMeanSquare = _NUM ; numread = _NUM ; for ( short anAudioData : audioData ) { sumMeanSquare = sumMeanSquare + Math . pow ( anAudioData - dAvg , _NUM ) ; numread ++ ; if ( numread == numframes ) break ; } double averageMeanSquare = sumMeanSquare / numframes ; return ( int ) ( Math . pow ( averageMeanSquare , _NUM ) + _NUM ) ; }
private void initProgram ( ) { glUseProgram ( this . program ) ; vec3ArrayUniform = glGetUniformLocation ( this . program , _STR ) ; chosenUniform = glGetUniformLocation ( this . program , _STR ) ; glUseProgram ( _NUM ) ; }
public boolean engineContainsAlias ( String alias ) { return entries . containsKey ( alias . toLowerCase ( Locale . ENGLISH ) ) ; }
public void invertSelectedRelations ( ) { ISelection selection = viewer . getSelection ( ) ; if ( ! ( selection instanceof IStructuredSelection ) ) { return ; } IStructuredSelection structuredSelection = ( IStructuredSelection ) selection ; Collection < Relation > inverse = computeInverseRelations ( getTableRelations ( ) , structuredSelection ) ; StructuredSelection nextSelection = new StructuredSelection ( inverse . toArray ( ) ) ; viewer . setSelection ( nextSelection , _BOOL ) ; }
public void testFloatValueNeg ( ) { String a = _STR ; BigDecimal aNumber = new BigDecimal ( a ) ; float result = - _NUM ; assertTrue ( _STR , aNumber . floatValue ( ) == result ) ; }
public void bindKeyStore ( final KeyStoreService keyStoreService ) { this . keyStore = keyStoreService ; }
protected void drawConnectorCenters ( Canvas c ) { List < Connection > connections = mBlock . getAllConnections ( ) ; Paint paint = new Paint ( ) ; paint . setStyle ( Paint . Style . FILL ) ; for ( int i = _NUM ; i < connections . size ( ) ; i ++ ) { Connection conn = connections . get ( i ) ; if ( conn . inDragMode ( ) ) { if ( conn . isConnected ( ) ) { paint . setColor ( Color . RED ) ; } else { paint . setColor ( Color . MAGENTA ) ; } } else { if ( conn . isConnected ( ) ) { paint . setColor ( Color . GREEN ) ; } else { paint . setColor ( Color . CYAN ) ; } } mTempWorkspacePoint . set ( conn . getPosition ( ) . x - mBlock . getPosition ( ) . x , conn . getPosition ( ) . y - mBlock . getPosition ( ) . y ) ; mHelper . workspaceToVirtualViewDelta ( mTempWorkspacePoint , mTempConnectionPosition ) ; if ( mHelper . useRtl ( ) ) { mTempConnectionPosition . x += mBlockViewSize . x ; } c . drawCircle ( mTempConnectionPosition . x , mTempConnectionPosition . y , _NUM , paint ) ; } }
private static boolean isMerge ( InstructionHandle handle ) { if ( handle . hasTargeters ( ) ) { InstructionTargeter [ ] targeterList = handle . getTargeters ( ) ; for ( InstructionTargeter targeter : targeterList ) { if ( targeter instanceof BranchInstruction ) { return _BOOL ; } } } return _BOOL ; }
private synchronized void loadTrustManager ( ) { try { TrustManagerFactory tmf = TrustManagerFactory . getInstance ( X509_ALGORITHM ) ; tmf . init ( keystore ) ; for ( TrustManager trustManager : tmf . getTrustManagers ( ) ) { if ( trustManager instanceof X509TrustManager ) { defaultViPRTrustManager = ( X509TrustManager ) trustManager ; log . debug ( _STR ) ; break ; } } log . info ( _STR , defaultViPRTrustManager . getAcceptedIssuers ( ) . length ) ; } catch ( GeneralSecurityException e ) { log . error ( e . getMessage ( ) , e ) ; } }
private boolean isOutsideDocElem ( ) { return ( null == m_docFrag ) && m_elemStack . size ( ) == _NUM && ( null == m_currentNode || m_currentNode . getNodeType ( ) == Node . DOCUMENT_NODE ) ; }
public ThreadPool ( String name , int poolSize ) { this . poolSize = poolSize ; this . poolName = name ; taskList = new LinkedList < Runnable > ( ) ; threads = new WorkerThread [ poolSize ] ; createThreads ( ) ; }
private static Object invokeOrDie ( final Method method , final Object object , final Object ... params ) { try { return method . invoke ( object , params ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( _STR + _STR , e ) ; } catch ( InvocationTargetException e ) { final Throwable cause = e . getCause ( ) ; if ( cause instanceof RuntimeException ) { throw ( RuntimeException ) cause ; } else if ( cause instanceof Error ) { throw ( Error ) cause ; } else { throw new RuntimeException ( _STR , cause ) ; } } }
public void clear ( ) { this . normal = null ; this . depth = _NUM ; }
public String name ( ) { return theName ; }
public final void addHelperTextColor ( @ ColorInt final int color ) { if ( ! helperTextColors . contains ( color ) ) { helperTextColors . add ( color ) ; verifyPasswordStrength ( ) ; } }
public void advanceToNextMinute ( ) { }
ListBasedTokenStream ( AttributeSource attributeSource , List < AttributeSource > tokens ) { super ( attributeSource . getAttributeFactory ( ) ) ; this . tokens = tokens ; addAttributes ( attributeSource ) ; }
@ SuppressWarnings ( _STR ) protected Class resolveClass ( ObjectStreamClass classDesc ) throws IOException , ClassNotFoundException { String cname = classDesc . getName ( ) ; return ClassFinder . resolveClass ( cname , this . loader ) ; }
public Map < String , Object > makeValid ( Map < String , ? extends Object > source , String mode ) { return makeValid ( source , mode , _BOOL , null ) ; }
public static int find ( byte [ ] a , int fromIndex , int toIndex , byte [ ] key ) { int result = - _NUM ; int sublen = key . length ; int maxpos , first , sp = _NUM ; maxpos = Math . min ( toIndex , a . length ) - sublen ; for ( first = fromIndex ; sp != sublen && first <= maxpos ; first ++ ) { first = find ( a , first , maxpos , key [ _NUM ] ) ; if ( ( first < _NUM ) || ( first > maxpos ) ) { break ; } for ( sp = _NUM ; sp < sublen ; sp ++ ) { if ( a [ first + sp ] != key [ sp ] ) { sp = sublen ; } } } if ( sublen == _NUM ) { result = _NUM ; } else if ( sp == sublen ) { result = ( first - _NUM ) ; } return result ; }
private void addSyntheticEdge ( Collection < GraphEdge > result , GraphEdge original , GraphNode head , GraphNode tail ) { result . add ( new GraphEdge ( head , tail , original . getRelation ( ) ) ) ; }
public void addStates ( State [ ] s ) { for ( int i = _NUM ; i < s . length ; i ++ ) states . addElement ( s [ i ] ) ; }
private synchronized void readObject ( java . io . ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; init ( getMask ( actions ) ) ; }
private static byte [ ] WindowsRegEnumKeyEx1 ( int hKey , int subKeyIndex , int maxKeyLength ) { byte [ ] result = WindowsRegEnumKeyEx ( hKey , subKeyIndex , maxKeyLength ) ; if ( result != null ) { return result ; } else { long sleepTime = INIT_SLEEP_TIME ; for ( int i = _NUM ; i < MAX_ATTEMPTS ; i ++ ) { try { Thread . sleep ( sleepTime ) ; } catch ( InterruptedException e ) { return result ; } sleepTime *= _NUM ; result = WindowsRegEnumKeyEx ( hKey , subKeyIndex , maxKeyLength ) ; if ( result != null ) { return result ; } } } return result ; }
public Tasker addTask ( Task task ) { tasks . add ( task ) ; lastAddedTask = task ; return this ; }
private void initComputeProgram ( ) { glUseProgram ( computeProgram ) ; IntBuffer workGroupSize = BufferUtils . createIntBuffer ( _NUM ) ; glGetProgramiv ( computeProgram , GL_COMPUTE_WORK_GROUP_SIZE , workGroupSize ) ; workGroupSizeX = workGroupSize . get ( _NUM ) ; workGroupSizeY = workGroupSize . get ( _NUM ) ; timeUniform = glGetUniformLocation ( computeProgram , _STR ) ; blendFactorUniform = glGetUniformLocation ( computeProgram , _STR ) ; bounceCountUniform = glGetUniformLocation ( computeProgram , _STR ) ; IntBuffer params = BufferUtils . createIntBuffer ( _NUM ) ; int loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; framebufferImageBinding = params . get ( _NUM ) ; loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; worldPositionImageBinding = params . get ( _NUM ) ; loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; worldNormalImageBinding = params . get ( _NUM ) ; glUseProgram ( _NUM ) ; }
public void sort ( ) { throwIfImmutable ( ) ; if ( ! sorted ) { Arrays . sort ( values , _NUM , size ) ; sorted = _BOOL ; } }
public static Object objectFromByteBuffer ( byte [ ] buffer ) throws Exception { if ( buffer == null ) return null ; ByteArrayInputStream inStream = new ByteArrayInputStream ( buffer ) ; ObjectInputStream in = new ObjectInputStreamExt ( inStream ) ; Object retval = in . readObject ( ) ; in . close ( ) ; return retval ; }
public String generateGroupName ( String policyName , Set < String > existingGroupNames , String parentGroupName ) { int count = _NUM ; String format = null ; while ( count <= existingGroupNames . size ( ) ) { if ( _NUM == count ) { format = String . format ( _STR , policyName ) ; } else { format = String . format ( _STR , policyName , count ) ; } String generatedGroupName = generate ( parentGroupName , format , SmisConstants . MASK_NAME_DELIMITER , SmisConstants . MAX_STORAGE_GROUP_NAME_LENGTH ) ; if ( ! existingGroupNames . contains ( generatedGroupName ) ) { return generatedGroupName ; } count ++ ; } return generate ( parentGroupName , String . format ( _STR , policyName ) , SmisConstants . MASK_NAME_DELIMITER , SmisConstants . MAX_STORAGE_GROUP_NAME_LENGTH ) ; }
public static void assertColumnTypes ( ResultSet rs , int [ ] expectedTypes ) throws SQLException { ResultSetMetaData rsmd = rs . getMetaData ( ) ; int actualCols = rsmd . getColumnCount ( ) ; assertEquals ( _STR , expectedTypes . length , rsmd . getColumnCount ( ) ) ; for ( int i = _NUM ; i < actualCols ; i ++ ) { assertEquals ( _STR + ( i + _NUM ) , expectedTypes [ i ] , rsmd . getColumnType ( i + _NUM ) ) ; } }
public DefaultActionGroup ( @ NotNull AnAction ... actions ) { this ( Arrays . asList ( actions ) ) ; }
public int add ( T dl , int row ) { _list . add ( row , dl ) ; fireTableRowsInserted ( row , row ) ; return row ; }
private void pushTerm ( BytesRef text ) throws IOException { int limit = Math . min ( lastTerm . length ( ) , text . length ) ; int pos = _NUM ; while ( pos < limit && lastTerm . byteAt ( pos ) == text . bytes [ text . offset + pos ] ) { pos ++ ; } for ( int i = lastTerm . length ( ) - _NUM ; i >= pos ; i -- ) { int prefixTopSize = pending . size ( ) - prefixStarts [ i ] ; if ( prefixTopSize >= minItemsInBlock ) { writeBlocks ( i + _NUM , prefixTopSize ) ; prefixStarts [ i ] -= prefixTopSize - _NUM ; } } if ( prefixStarts . length < text . length ) { prefixStarts = ArrayUtil . grow ( prefixStarts , text . length ) ; } for ( int i = pos ; i < text . length ; i ++ ) { prefixStarts [ i ] = pending . size ( ) ; } lastTerm . copyBytes ( text ) ; }
public NumericLiteral ( Object x ) { if ( x instanceof Number ) { m_number = ( Number ) x ; m_type = TypeLib . getPrimitiveType ( m_number . getClass ( ) ) ; } else { throw new IllegalArgumentException ( _STR ) ; } }
private boolean isMineshafterPresent ( ) { try { Class . forName ( _STR ) ; return _BOOL ; } catch ( Exception e ) { return _BOOL ; } }
@ SuppressLint ( _STR ) @ Override protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { int widthMode = MeasureSpec . getMode ( widthMeasureSpec ) ; int heightMode = MeasureSpec . getMode ( heightMeasureSpec ) ; int maxWidth = MeasureSpec . getSize ( widthMeasureSpec ) ; int maxHeight = MeasureSpec . getSize ( heightMeasureSpec ) ; if ( widthMode == MeasureSpec . UNSPECIFIED ) maxWidth = Integer . MAX_VALUE ; if ( heightMode == MeasureSpec . UNSPECIFIED ) maxHeight = Integer . MAX_VALUE ; int paddingLeft = getPaddingLeft ( ) ; int paddingTop = getPaddingTop ( ) ; int paddingRight = getPaddingRight ( ) ; int paddingBottom = getPaddingBottom ( ) ; int maxRightBound = maxWidth - paddingRight ; int maxBottomBound = maxHeight - paddingBottom ; int left ; int top ; int right ; int bottom ; int rightBound = paddingLeft ; int maxRightNoPadding = rightBound ; int bottomBound ; int lastMaxBottom = paddingTop ; int maxBottom = lastMaxBottom ; int childWidth ; int childHeight ; int lineStartIndex = _NUM ; int lineEndIndex ; rectList . clear ( ) ; int childCount = getChildCount ( ) ; for ( int index = _NUM ; index < childCount ; index ++ ) { final View child = getChildAt ( index ) ; child . measure ( MeasureSpec . UNSPECIFIED , MeasureSpec . UNSPECIFIED ) ; if ( child . getVisibility ( ) == View . GONE ) continue ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; childWidth = child . getMeasuredWidth ( ) ; childHeight = child . getMeasuredHeight ( ) ; left = rightBound + lp . leftMargin ; right = left + childWidth ; rightBound = right + lp . rightMargin ; if ( rightBound > maxRightBound ) { lineEndIndex = index ; adjustBaseLine ( maxBottom - lastMaxBottom , lineStartIndex , lineEndIndex ) ; if ( maxBottom >= maxBottomBound ) break ; if ( lineEndIndex == lineStartIndex ) { child . measure ( MeasureSpec . makeMeasureSpec ( maxWidth - paddingLeft - paddingRight - lp . leftMargin - lp . rightMargin , MeasureSpec . AT_MOST ) , MeasureSpec . UNSPECIFIED ) ; childWidth = child . getMeasuredWidth ( ) ; childHeight = child . getMeasuredHeight ( ) ; } left = paddingLeft + lp . leftMargin ; right = left + childWidth ; rightBound = right + lp . rightMargin ; lastMaxBottom = maxBottom ; top = lastMaxBottom + lp . topMargin ; bottom = top + childHeight ; bottomBound = bottom + lp . bottomMargin ; lineStartIndex = index ; } else { top = lastMaxBottom + lp . topMargin ; bottom = top + childHeight ; bottomBound = bottom + lp . bottomMargin ; } if ( rightBound > maxRightNoPadding ) maxRightNoPadding = rightBound ; if ( bottomBound > maxBottom ) maxBottom = bottomBound ; Rect rect = new Rect ( ) ; rect . left = left ; rect . top = top ; rect . right = right ; rect . bottom = bottom ; rectList . add ( rect ) ; } adjustBaseLine ( maxBottom - lastMaxBottom , lineStartIndex , rectList . size ( ) ) ; int measuredWidth ; int measuredHeight ; if ( widthMode == MeasureSpec . EXACTLY ) measuredWidth = maxWidth ; else measuredWidth = maxRightNoPadding + paddingRight ; if ( heightMode == MeasureSpec . EXACTLY ) measuredHeight = maxHeight ; else { measuredHeight = maxBottom + paddingBottom ; if ( heightMode == MeasureSpec . AT_MOST ) measuredHeight = measuredHeight > maxHeight ? maxHeight : measuredHeight ; } setMeasuredDimension ( measuredWidth , measuredHeight ) ; }
private final boolean compareAndSetHead ( Node update ) { return unsafe . compareAndSwapObject ( this , headOffset , null , update ) ; }
private void ensureBufferCapacity ( int desiredCapacity ) { int capacity = pixelBuffer . length ; while ( capacity < desiredCapacity ) { capacity *= _NUM ; } if ( capacity > pixelBuffer . length ) { pixelBuffer = new byte [ capacity ] ; } }
protected Set < DependencyKind > removeDependency ( Node n ) { Set < DependencyKind > removedKinds = new HashSet < > ( ) ; for ( DependencyKind dk : DependencyKind . values ( ) ) { Set < Node > depsByKind = deps . get ( dk ) ; if ( depsByKind == null ) continue ; if ( depsByKind . remove ( n ) ) { removedKinds . add ( dk ) ; } } return removedKinds ; }
public static < K , V > ConcurrentMap < K , V > newConcurrentMapWithAggressiveConcurrency ( ) { return new ConcurrentHashMap < > ( _NUM , _NUM , aggressiveConcurrencyLevel ) ; }
@ Override public boolean connectionAllowed ( String eventName ) { if ( m_listenee != null || ! eventName . equals ( _STR ) ) { return _BOOL ; } return _BOOL ; }
protected char skipAllWhitespace ( Reader r ) throws IOException { char c ; do { c = ( char ) r . read ( ) ; } while ( Character . isWhitespace ( c ) && c != ( char ) - _NUM ) ; return c ; }
public Iterator enumerateLiteralResultAttributes ( ) { return ( null == m_avts ) ? null : m_avts . iterator ( ) ; }
public Map < String , String > parse ( final String str , char separator ) { if ( str == null ) { return new HashMap < > ( ) ; } return parse ( str . toCharArray ( ) , separator ) ; }
public PriorityQueue ( Collection < ? extends E > c ) { if ( c instanceof PriorityQueue ) { getFromPriorityQueue ( ( PriorityQueue < ? extends E > ) c ) ; } else if ( c instanceof SortedSet ) { getFromSortedSet ( ( SortedSet < ? extends E > ) c ) ; } else { initSize ( c ) ; addAll ( c ) ; } }
private String resourceId ( ) { return subSchemaPath . isEmpty ( ) ? null : lastSchemaNodeName ( ) ; }
private long acquireWrite ( boolean interruptible , long deadline ) { WNode node = null , p ; for ( int spins = - _NUM ; ; ) { long m , s , ns ; if ( ( m = ( s = state ) & ABITS ) == _NUM ) { if ( U . compareAndSwapLong ( this , STATE , s , ns = s + WBIT ) ) return ns ; } else if ( spins < _NUM ) spins = ( m == WBIT && wtail == whead ) ? SPINS : _NUM ; else if ( spins > _NUM ) { if ( LockSupport . nextSecondarySeed ( ) >= _NUM ) -- spins ; } else if ( ( p = wtail ) == null ) { WNode hd = new WNode ( WMODE , null ) ; if ( U . compareAndSwapObject ( this , WHEAD , null , hd ) ) wtail = hd ; } else if ( node == null ) node = new WNode ( WMODE , p ) ; else if ( node . prev != p ) node . prev = p ; else if ( U . compareAndSwapObject ( this , WTAIL , p , node ) ) { p . next = node ; break ; } } for ( int spins = - _NUM ; ; ) { WNode h , np , pp ; int ps ; if ( ( h = whead ) == p ) { if ( spins < _NUM ) spins = HEAD_SPINS ; else if ( spins < MAX_HEAD_SPINS ) spins <<= _NUM ; for ( int k = spins ; ; ) { long s , ns ; if ( ( ( s = state ) & ABITS ) == _NUM ) { if ( U . compareAndSwapLong ( this , STATE , s , ns = s + WBIT ) ) { whead = node ; node . prev = null ; return ns ; } } else if ( LockSupport . nextSecondarySeed ( ) >= _NUM && -- k <= _NUM ) break ; } } else if ( h != null ) { WNode c ; Thread w ; while ( ( c = h . cowait ) != null ) { if ( U . compareAndSwapObject ( h , WCOWAIT , c , c . cowait ) && ( w = c . thread ) != null ) U . unpark ( w ) ; } } if ( whead == h ) { if ( ( np = node . prev ) != p ) { if ( np != null ) ( p = np ) . next = node ; } else if ( ( ps = p . status ) == _NUM ) U . compareAndSwapInt ( p , WSTATUS , _NUM , WAITING ) ; else if ( ps == CANCELLED ) { if ( ( pp = p . prev ) != null ) { node . prev = pp ; pp . next = node ; } } else { long time ; if ( deadline == _NUM ) time = _NUM ; else if ( ( time = deadline - System . nanoTime ( ) ) <= _NUM ) return cancelWaiter ( node , node , _BOOL ) ; Thread wt = Thread . currentThread ( ) ; U . putObject ( wt , PARKBLOCKER , this ) ; node . thread = wt ; if ( p . status < _NUM && ( p != h || ( state & ABITS ) != _NUM ) && whead == h && node . prev == p ) U . park ( _BOOL , time ) ; node . thread = null ; U . putObject ( wt , PARKBLOCKER , null ) ; if ( interruptible && Thread . interrupted ( ) ) return cancelWaiter ( node , node , _BOOL ) ; } } } }
@ Override public boolean isInitial ( ) { return init ; }
public static String denormalize ( final CharSequence self ) { if ( lineSeparator == null ) { final StringWriter sw = new StringWriter ( _NUM ) ; try { final BufferedWriter bw = new BufferedWriter ( sw ) ; bw . newLine ( ) ; bw . flush ( ) ; lineSeparator = sw . toString ( ) ; } catch ( IOException ioe ) { lineSeparator = _STR ; } } final int len = self . length ( ) ; if ( len < _NUM ) { return self . toString ( ) ; } final StringBuilder sb = new StringBuilder ( ( _NUM * len ) / _NUM ) ; int i = _NUM ; CharSequence cs = ( self instanceof GString ) ? self . toString ( ) : self ; while ( i < len ) { final char ch = cs . charAt ( i ++ ) ; switch ( ch ) { case _STR : sb . append ( lineSeparator ) ; if ( ( i < len ) && ( cs . charAt ( i ) == _STR ) ) { ++ i ; } break ; case _STR : sb . append ( lineSeparator ) ; break ; default : sb . append ( ch ) ; break ; } } return sb . toString ( ) ; }
public static void performSaveAs ( String schemaPrefixFileName , String selFilePath , ContainerConfig containerConfig ) { try { File fileWithDefaultConfiguration = createContainerSchemaFile ( schemaPrefixFileName , selFilePath ) ; updateFile ( containerConfig , fileWithDefaultConfiguration . getPath ( ) , schemaPrefixFileName ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public boolean isAborted ( ) { return isAborted . get ( ) ; }
public void append ( int key , E value ) { if ( mSize != _NUM && key <= mKeys [ mSize - _NUM ] ) { put ( key , value ) ; return ; } if ( mGarbage && mSize >= mKeys . length ) { gc ( ) ; } int pos = mSize ; if ( pos >= mKeys . length ) { int n = idealIntArraySize ( pos + _NUM ) ; int [ ] nkeys = new int [ n ] ; Object [ ] nvalues = new Object [ n ] ; System . arraycopy ( mKeys , _NUM , nkeys , _NUM , mKeys . length ) ; System . arraycopy ( mValues , _NUM , nvalues , _NUM , mValues . length ) ; mKeys = nkeys ; mValues = nvalues ; } mKeys [ pos ] = key ; mValues [ pos ] = value ; mSize = pos + _NUM ; }
public void testSkip ( ) throws IOException { byte [ ] data = new byte [ _NUM * _NUM ] ; byte [ ] gzipped = GZIPOutputStreamTest . gzip ( data ) ; GZIPInputStream in = new GZIPInputStream ( new ByteArrayInputStream ( gzipped ) ) ; long totalSkipped = _NUM ; long count ; do { count = in . skip ( Long . MAX_VALUE ) ; totalSkipped += count ; } while ( count > _NUM ) ; assertEquals ( data . length , totalSkipped ) ; in . close ( ) ; }
private Support_TestWebData ( String path , String type ) { File file = new File ( path ) ; testLength = file . length ( ) ; testLastModified = file . lastModified ( ) ; testName = file . getName ( ) ; testType = type ; testDir = file . isDirectory ( ) ; ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; FileInputStream in = null ; try { in = new FileInputStream ( file ) ; while ( in . available ( ) > _NUM ) { out . write ( in . read ( ) ) ; } in . close ( ) ; out . flush ( ) ; test0Data = out . toByteArray ( ) ; out . close ( ) ; test0DataAvailable = _BOOL ; return ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { try { if ( in != null ) { in . close ( ) ; } if ( out != null ) { out . close ( ) ; } } catch ( IOException e ) { } } }
public static void print ( boolean x ) { out . print ( x ) ; out . flush ( ) ; }
public IpcSharedMemorySpace ( String tokFileName , int writerPid , int readerPid , int size , boolean reader , IgniteLogger parent ) throws IgniteCheckedException { assert size > _NUM : _STR ; log = parent . getLogger ( IpcSharedMemorySpace . class ) ; opSize = size ; shmemPtr = IpcSharedMemoryUtils . allocateSystemResources ( tokFileName , size , DEBUG && log . isDebugEnabled ( ) ) ; shmemId = IpcSharedMemoryUtils . sharedMemoryId ( shmemPtr ) ; semId = IpcSharedMemoryUtils . semaphoreId ( shmemPtr ) ; isReader = reader ; this . tokFileName = tokFileName ; this . readerPid = readerPid ; this . writerPid = writerPid ; if ( DEBUG && log . isDebugEnabled ( ) ) log . debug ( _STR + this ) ; }
@ Override public void close ( ) { try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
public Version addQualifier ( String qualifier ) { List < String > newQualifiers = new ArrayList < > ( this . qualifiers ) ; newQualifiers . add ( qualifier ) ; return new Version ( major , minor , patch , newQualifiers . toArray ( new String [ newQualifiers . size ( ) ] ) ) ; }
public int loadSigned16 ( int addr ) { return loadSigned16 ( addr , AccessSource . CODE ) ; }
public static String arrayToHexString ( byte [ ] array ) { return arrayToHexString ( array , _NUM , array . length ) ; }
public static void unregisterBaggageHandler ( BaggageHandler handler ) { handlers . remove ( handler ) ; }
public DefaultHeatMapDataset ( int xSamples , int ySamples , double minX , double maxX , double minY , double maxY ) { if ( xSamples < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } if ( ySamples < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } if ( Double . isInfinite ( minX ) || Double . isNaN ( minX ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( Double . isInfinite ( maxX ) || Double . isNaN ( maxX ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( Double . isInfinite ( minY ) || Double . isNaN ( minY ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( Double . isInfinite ( maxY ) || Double . isNaN ( maxY ) ) { throw new IllegalArgumentException ( _STR ) ; } this . xSamples = xSamples ; this . ySamples = ySamples ; this . minX = minX ; this . maxX = maxX ; this . minY = minY ; this . maxY = maxY ; this . zValues = new double [ xSamples ] [ ] ; for ( int x = _NUM ; x < xSamples ; x ++ ) { this . zValues [ x ] = new double [ ySamples ] ; } }
public static void assertEqualsAnyOrder ( EventBean [ ] [ ] expected , EventBean [ ] [ ] actual ) { if ( compareArraySize ( expected , actual ) ) { return ; } int numMatches = _NUM ; boolean [ ] foundReceived = new boolean [ actual . length ] ; for ( EventBean [ ] expectedObject : expected ) { boolean found = _BOOL ; for ( int i = _NUM ; i < actual . length ; i ++ ) { if ( foundReceived [ i ] ) { continue ; } boolean match = compareEqualsExactOrder ( actual [ i ] , expectedObject ) ; if ( match ) { found = _BOOL ; numMatches ++ ; foundReceived [ i ] = _BOOL ; break ; } } if ( ! found ) { log . error ( _STR + Arrays . toString ( expectedObject ) ) ; log . error ( _STR + Arrays . toString ( actual ) ) ; } ScopeTestHelper . assertTrue ( found ) ; } ScopeTestHelper . assertEquals ( numMatches , expected . length ) ; }
private void collectText ( ) { if ( textNodeCount > _NUM ) { firstTextNode . setText ( textBuffer . toString ( ) ) ; } textNodeCount = _NUM ; }
@ SuppressWarnings ( { _STR , _STR } ) public static < T extends Annotation > T unproxy ( T annotation ) { Function unproxyFunction = getUnproxyFunction ( annotation . annotationType ( ) ) ; return ( T ) unproxyFunction . apply ( annotation ) ; }
public static List < Node > parseExpression ( Context context , HashSet < String > configNamespaces , String text ) { return parseExpression ( context , configNamespaces , text , _NUM , _BOOL ) ; }
public void addTickMarkSection ( final Section SECTION ) { if ( null == SECTION ) return ; tickMarkSections . add ( SECTION ) ; Collections . sort ( tickMarkSections , new SectionComparator ( ) ) ; fireUpdateEvent ( REDRAW_EVENT ) ; }
protected static double calcQ_i ( double f , double lambda ) { return lambda * Math . exp ( - lambda * f ) ; }
void flush ( ) { printStream . flush ( ) ; }
public CharBuffer delete ( int start , int end ) { int length = length ( ) ; if ( start < _NUM || end < start || length < start ) throw new StringIndexOutOfBoundsException ( ) ; end = Math . min ( length , end ) ; int tail = length - end ; char [ ] buffer = buffer ( ) ; for ( int i = _NUM ; i < tail ; i ++ ) { buffer [ start + i ] = buffer [ end + i ] ; } length ( length - ( end - start ) ) ; return this ; }
public void addPlotter ( final Plotter plotter ) { plotters . add ( plotter ) ; }
Node < K , V > findNear ( K kkey , int rel ) { Comparable < ? super K > key = comparable ( kkey ) ; for ( ; ; ) { Node < K , V > b = findPredecessor ( key ) ; Node < K , V > n = b . next ; for ( ; ; ) { if ( n == null ) return ( ( rel & LT ) == _NUM || b . isBaseHeader ( ) ) ? null : b ; Node < K , V > f = n . next ; if ( n != b . next ) break ; Object v = n . value ; if ( v == null ) { n . helpDelete ( b , f ) ; break ; } if ( v == n || b . value == null ) break ; int c = key . compareTo ( n . key ) ; if ( ( c == _NUM && ( rel & EQ ) != _NUM ) || ( c < _NUM && ( rel & LT ) == _NUM ) ) return n ; if ( c <= _NUM && ( rel & LT ) != _NUM ) return b . isBaseHeader ( ) ? null : b ; b = n ; n = f ; } } }
public void addListener ( SpeedrunsLiveListener listener ) { listeners . add ( listener ) ; }
public void writeExif ( Bitmap bmap , OutputStream exifOutStream ) throws IOException { if ( bmap == null || exifOutStream == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = getExifWriterStream ( exifOutStream ) ; bmap . compress ( Bitmap . CompressFormat . JPEG , _NUM , s ) ; s . flush ( ) ; }
public boolean find ( int start ) { if ( start < _NUM || start > input . length ( ) ) { throw new IndexOutOfBoundsException ( _STR + start + _STR + input . length ( ) ) ; } synchronized ( this ) { matchFound = findImpl ( address , input , start , matchOffsets ) ; } return matchFound ; }
public int action ( String fault , String action ) { Integer current = get ( fault ) ; if ( current == null ) throw new IllegalArgumentException ( fault ) ; boolean no = action . startsWith ( _STR ) ; if ( no ) action = action . substring ( _NUM ) ; Integer bit = getAction ( action ) ; if ( bit == null ) throw new IllegalArgumentException ( action ) ; int old = current . intValue ( ) ; int mask = bit . intValue ( ) ; int n = ( old & ( ~ mask ) ) ; n = ( no ) ? n : ( n | mask ) ; put ( fault , new Integer ( n ) ) ; return n ; }
public static boolean containsWhitespace ( CharSequence str ) { if ( ! hasLength ( str ) ) { return _BOOL ; } int strLen = str . length ( ) ; for ( int i = _NUM ; i < strLen ; i ++ ) { if ( Character . isWhitespace ( str . charAt ( i ) ) ) { return _BOOL ; } } return _BOOL ; }
public boolean hasUnsupportedCriticalExtension ( ) { Set extns = getCriticalExtensionOIDs ( ) ; if ( extns == null ) { return _BOOL ; } extns . remove ( RFC3280CertPathUtilities . ISSUING_DISTRIBUTION_POINT ) ; extns . remove ( RFC3280CertPathUtilities . DELTA_CRL_INDICATOR ) ; return ! extns . isEmpty ( ) ; }
public static < T > T decodeFromBase64 ( Coder < T > coder , String encodedValue ) throws CoderException { return decodeFromSafeStream ( coder , new ByteArrayInputStream ( Base64 . decodeBase64 ( encodedValue ) ) , Coder . Context . OUTER ) ; }
public void validate ( Set setData ) throws ValidationException { for ( Iterator iter = setData . iterator ( ) ; iter . hasNext ( ) ; ) { performValidation ( ( String ) iter . next ( ) ) ; } }
public String add ( Object ... values ) { double result = _NUM ; for ( int i = _NUM ; i < values . length ; i ++ ) { result += FunctionHandler . getDouble ( values [ i ] ) ; } return Double . toString ( result ) ; }
public List < String > listMyDBs ( String owner , boolean restricted ) { Connection conn = null ; try { conn = getConnection ( ) ; return listMyDBs ( conn , owner , restricted ) ; } catch ( Exception ex ) { logger . log ( Level . SEVERE , _STR , ex ) ; } finally { DBUtils . close ( conn ) ; } return null ; }
protected void doFunction ( float [ ] inputs , int inputOffset , float [ ] outputs , int outputOffset ) { float input = inputs [ inputOffset ] ; for ( int i = _NUM ; i < getNumOutputs ( ) ; i ++ ) { outputs [ i + outputOffset ] = getC0 ( i ) + ( float ) ( Math . pow ( input , getN ( ) ) * ( getC1 ( i ) - getC0 ( i ) ) ) ; } }
public void put ( String key , long value ) { if ( key != null ) { urlParams . put ( key , String . valueOf ( value ) ) ; } }
public int compare ( Object o1 , Object o2 ) { return comparator . compare ( o1 , o2 ) ; }
public void addCheckBoxActionListener ( ActionListener al ) { m_enableDistributedExperiment . addActionListener ( al ) ; }
private Rect calcBounds ( int index , Paint paint ) { Rect bounds = new Rect ( ) ; CharSequence title = getTitle ( index ) ; bounds . right = ( int ) paint . measureText ( title , _NUM , title . length ( ) ) ; bounds . bottom = ( int ) ( paint . descent ( ) - paint . ascent ( ) ) ; return bounds ; }
GF256Poly addOrSubtract ( GF256Poly other ) { if ( ! field . equals ( other . field ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( isZero ( ) ) { return other ; } if ( other . isZero ( ) ) { return this ; } int [ ] smallerCoefficients = this . coefficients ; int [ ] largerCoefficients = other . coefficients ; if ( smallerCoefficients . length > largerCoefficients . length ) { int [ ] temp = smallerCoefficients ; smallerCoefficients = largerCoefficients ; largerCoefficients = temp ; } int [ ] sumDiff = new int [ largerCoefficients . length ] ; int lengthDiff = largerCoefficients . length - smallerCoefficients . length ; System . arraycopy ( largerCoefficients , _NUM , sumDiff , _NUM , lengthDiff ) ; for ( int i = lengthDiff ; i < largerCoefficients . length ; i ++ ) { sumDiff [ i ] = GF256 . addOrSubtract ( smallerCoefficients [ i - lengthDiff ] , largerCoefficients [ i ] ) ; } return new GF256Poly ( field , sumDiff ) ; }
@ Override public String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( type ) ; sb . append ( _STR ) ; sb . append ( subType ) ; for ( String name : attributes . keySet ( ) ) { if ( inferredCharset && ATTR_CHARSET . equals ( name ) ) { continue ; } sb . append ( _STR ) ; sb . append ( name ) ; sb . append ( _STR ) ; String value = attributes . get ( name ) ; Matcher tokenMatcher = TOKEN_PATTERN . matcher ( value ) ; if ( tokenMatcher . matches ( ) ) { sb . append ( value ) ; } else { sb . append ( _STR + value + _STR ) ; } } return sb . toString ( ) ; }
public static long firstFieldOffset ( Class clazz ) { long minSize = roundUpTo8 ( headerSize ( clazz ) ) ; while ( clazz != Object . class ) { for ( Field f : clazz . getDeclaredFields ( ) ) { if ( ( f . getModifiers ( ) & Modifier . STATIC ) == _NUM ) { long offset = unsafe . objectFieldOffset ( f ) ; if ( offset < minSize ) { minSize = offset ; } } } clazz = clazz . getSuperclass ( ) ; } return minSize ; }
private void fitImageToView ( ) { Drawable drawable = getDrawable ( ) ; if ( drawable == null || drawable . getIntrinsicWidth ( ) == _NUM || drawable . getIntrinsicHeight ( ) == _NUM ) { return ; } if ( matrix == null || prevMatrix == null ) { return ; } int drawableWidth = drawable . getIntrinsicWidth ( ) ; int drawableHeight = drawable . getIntrinsicHeight ( ) ; float scaleX = ( float ) viewWidth / drawableWidth ; float scaleY = ( float ) viewHeight / drawableHeight ; switch ( mScaleType ) { case CENTER : scaleX = scaleY = _NUM ; break ; case CENTER_CROP : scaleX = scaleY = Math . max ( scaleX , scaleY ) ; break ; case CENTER_INSIDE : scaleX = scaleY = Math . min ( _NUM , Math . min ( scaleX , scaleY ) ) ; case FIT_CENTER : scaleX = scaleY = Math . min ( scaleX , scaleY ) ; break ; case FIT_XY : break ; default : throw new UnsupportedOperationException ( _STR ) ; } float redundantXSpace = viewWidth - ( scaleX * drawableWidth ) ; float redundantYSpace = viewHeight - ( scaleY * drawableHeight ) ; matchViewWidth = viewWidth - redundantXSpace ; matchViewHeight = viewHeight - redundantYSpace ; if ( ! isZoomed ( ) && ! imageRenderedAtLeastOnce ) { matrix . setScale ( scaleX , scaleY ) ; matrix . postTranslate ( redundantXSpace / _NUM , redundantYSpace / _NUM ) ; normalizedScale = _NUM ; } else { if ( prevMatchViewWidth == _NUM || prevMatchViewHeight == _NUM ) { savePreviousImageValues ( ) ; } prevMatrix . getValues ( m ) ; m [ Matrix . MSCALE_X ] = matchViewWidth / drawableWidth * normalizedScale ; m [ Matrix . MSCALE_Y ] = matchViewHeight / drawableHeight * normalizedScale ; float transX = m [ Matrix . MTRANS_X ] ; float transY = m [ Matrix . MTRANS_Y ] ; float prevActualWidth = prevMatchViewWidth * normalizedScale ; float actualWidth = getImageWidth ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_X , transX , prevActualWidth , actualWidth , prevViewWidth , viewWidth , drawableWidth ) ; float prevActualHeight = prevMatchViewHeight * normalizedScale ; float actualHeight = getImageHeight ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_Y , transY , prevActualHeight , actualHeight , prevViewHeight , viewHeight , drawableHeight ) ; matrix . setValues ( m ) ; } fixTrans ( ) ; setImageMatrix ( matrix ) ; }
public static void w ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_WARNING ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . w ( tag , msg ) ; }
private int processPollFds ( ) throws IOException { if ( pollFds . get ( _NUM ) . revents == POLLIN ) { byte [ ] buffer = new byte [ _NUM ] ; while ( IoBridge . read ( wakeupIn , buffer , _NUM , _NUM ) > _NUM ) { } } int readyKeyCount = _NUM ; for ( int i = _NUM ; i < pollFds . size ( ) ; ++ i ) { StructPollfd pollFd = pollFds . get ( i ) ; if ( pollFd . revents == _NUM ) { continue ; } if ( pollFd . fd == null ) { break ; } SelectionKeyImpl key = ( SelectionKeyImpl ) pollFd . userData ; pollFd . fd = null ; pollFd . userData = null ; int ops = key . interestOpsNoCheck ( ) ; int selectedOps = _NUM ; if ( ( pollFd . revents & POLLHUP ) != _NUM ) { selectedOps |= ops ; } if ( ( pollFd . revents & POLLIN ) != _NUM ) { selectedOps |= ops & ( OP_ACCEPT | OP_READ ) ; } if ( ( pollFd . revents & POLLOUT ) != _NUM ) { if ( key . isConnected ( ) ) { selectedOps |= ops & OP_WRITE ; } else { selectedOps |= ops & OP_CONNECT ; } } if ( selectedOps != _NUM ) { boolean wasSelected = mutableSelectedKeys . contains ( key ) ; if ( wasSelected && key . readyOps ( ) != selectedOps ) { key . setReadyOps ( key . readyOps ( ) | selectedOps ) ; ++ readyKeyCount ; } else if ( ! wasSelected ) { key . setReadyOps ( selectedOps ) ; mutableSelectedKeys . add ( key ) ; ++ readyKeyCount ; } } } return readyKeyCount ; }
public final V extractFirst ( ) { if ( size ( ) > _NUM ) { if ( GWT . isScript ( ) ) { V ret = jsArray . get ( _NUM ) ; jsArray . remove ( _NUM ) ; return ret ; } else { return javaArray . remove ( _NUM ) ; } } return null ; }
@ Override public void actionPerformed ( ActionEvent event ) { String command = event . getActionCommand ( ) ; if ( command . equals ( _STR ) ) { attemptLabelFontSelection ( ) ; } else if ( command . equals ( _STR ) ) { attemptModifyLabelPaint ( ) ; } else if ( command . equals ( _STR ) ) { attemptTickLabelFontSelection ( ) ; } }
@ AndroidOnly ( _STR ) public void test_unwrap_ByteBuffer$ByteBuffer_04 ( ) { String host = _STR ; int port = _NUM ; ByteBuffer bbs = ByteBuffer . allocate ( _NUM ) ; ByteBuffer [ ] bbd = { ByteBuffer . allocate ( _NUM ) , ByteBuffer . allocate ( _NUM ) , ByteBuffer . allocate ( _NUM ) } ; SSLEngine sse = getEngine ( host , port ) ; try { sse . unwrap ( bbs , bbd ) ; fail ( _STR ) ; } catch ( IllegalStateException iobe ) { } catch ( Exception e ) { fail ( e + _STR ) ; } }
public static void upgradeServerInstance ( SSOToken ssoToken , String instanceName , String instanceId , Map < String , String > upgradedValues ) throws SMSException , SSOException , ConfigurationException , IOException { ServiceConfig sc = getServerConfig ( ssoToken , instanceName ) ; if ( sc != null ) { Map map = sc . getAttributes ( ) ; map . remove ( ATTR_PARENT_SITE_ID ) ; Set newSet = getPropertiesSet ( upgradedValues ) ; map . put ( ATTR_SERVER_CONFIG , newSet ) ; sc . setAttributes ( map ) ; } else { throw new ConfigurationException ( _STR + _STR ) ; } }
public static < T > T instance ( Class < T > clazz ) { try { return clazz . newInstance ( ) ; } catch ( InstantiationException | IllegalAccessException e ) { throw new IllegalStateException ( e ) ; } }
private void pop ( final String desc ) { char c = desc . charAt ( _NUM ) ; if ( c == _STR ) { pop ( ( Type . getArgumentsAndReturnSizes ( desc ) > > _NUM ) - _NUM ) ; } else if ( c == _STR || c == _STR ) { pop ( _NUM ) ; } else { pop ( _NUM ) ; } }
public GenericSipMsrpSession createMsrpSession ( ContactId contact , String featureTag , String [ ] acceptTypes , String [ ] acceptWrappedTypes ) { if ( sLogger . isActivated ( ) ) { sLogger . info ( _STR + contact ) ; } return new OriginatingSipMsrpSession ( this , contact , featureTag , mRcsSettings , System . currentTimeMillis ( ) , mContactManager , acceptTypes , acceptWrappedTypes ) ; }
public ForumPostConfig create ( ForumPostConfig config ) { config . addCredentials ( this ) ; String xml = POST ( this . url + _STR , config . toXML ( ) ) ; Element root = parse ( xml ) ; if ( root == null ) { return null ; } try { ForumPostConfig post = new ForumPostConfig ( ) ; post . parseXML ( root ) ; return post ; } catch ( Exception exception ) { this . exception = SDKException . parseFailure ( exception ) ; throw this . exception ; } }
protected void drawMark ( Graphics2D g2 , float x , float y , Color color ) { Rectangle2D bounds = mark . getBounds2D ( ) ; float w = ( float ) bounds . getWidth ( ) ; float h = ( float ) bounds . getHeight ( ) ; x = x - ( w / _NUM ) ; y = y - ( h / _NUM ) ; g2 . translate ( x , y ) ; if ( color == null ) { if ( markFillPaint != null ) { g2 . setPaint ( markFillPaint ) ; g2 . fill ( mark ) ; } } else { g2 . setPaint ( color ) ; g2 . fill ( mark ) ; } g2 . setPaint ( markPaint ) ; g2 . setStroke ( markStroke ) ; g2 . draw ( mark ) ; g2 . translate ( - x , - y ) ; Rectangle2D rect = new Rectangle2D . Float ( x , y , w , h ) ; markBounds . add ( rect ) ; }
public void componentResized ( ComponentEvent e ) { if ( logger . isLoggable ( Level . FINE ) ) { logger . fine ( _STR + getWidth ( ) + _STR + getHeight ( ) ) ; } projection . setWidth ( getWidth ( ) ) ; projection . setHeight ( getHeight ( ) ) ; fireProjectionChanged ( ) ; }
public String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; for ( StepPattern pat = this ; pat != null ; pat = pat . m_relativePathPattern ) { if ( pat != this ) buf . append ( _STR ) ; buf . append ( Axis . getNames ( pat . m_axis ) ) ; buf . append ( _STR ) ; if ( _NUM == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( DTMFilter . SHOW_BYFUNCTION == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( DTMFilter . SHOW_ALL == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( DTMFilter . SHOW_TEXT == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( DTMFilter . SHOW_PROCESSING_INSTRUCTION == pat . m_whatToShow ) { buf . append ( _STR ) ; if ( null != pat . m_name ) { buf . append ( pat . m_name ) ; } buf . append ( _STR ) ; } else if ( DTMFilter . SHOW_COMMENT == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( null != pat . m_name ) { if ( DTMFilter . SHOW_ATTRIBUTE == pat . m_whatToShow ) { buf . append ( _STR ) ; } if ( null != pat . m_namespace ) { buf . append ( _STR ) ; buf . append ( pat . m_namespace ) ; buf . append ( _STR ) ; } buf . append ( pat . m_name ) ; } else if ( DTMFilter . SHOW_ATTRIBUTE == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( ( DTMFilter . SHOW_DOCUMENT | DTMFilter . SHOW_DOCUMENT_FRAGMENT ) == pat . m_whatToShow ) { buf . append ( _STR ) ; } else { buf . append ( _STR + Integer . toHexString ( pat . m_whatToShow ) ) ; } if ( null != pat . m_predicates ) { for ( int i = _NUM ; i < pat . m_predicates . length ; i ++ ) { buf . append ( _STR ) ; buf . append ( pat . m_predicates [ i ] ) ; buf . append ( _STR ) ; } } } return buf . toString ( ) ; }
public static String byteArrayToHexString ( byte [ ] block , int offset , int length ) { StringBuffer buf = new StringBuffer ( ) ; int len = block . length ; length = length + offset ; if ( ( len < length ) ) { length = len ; } for ( int i = _NUM + offset ; i < length ; i ++ ) { byte2hex ( block [ i ] , buf ) ; if ( i < length - _NUM ) { buf . append ( _STR ) ; } } return buf . toString ( ) ; }
private void changeValue ( AbstractStorageLabel < Object > label , Object newValue ) { if ( ! Objects . equals ( label . getValue ( ) , newValue ) ) { synchronized ( labelEditListeners ) { for ( LabelEditListener listener : labelEditListeners ) { listener . preLabelValueChange ( label ) ; } } label . setValue ( newValue ) ; synchronized ( labelEditListeners ) { for ( LabelEditListener listener : labelEditListeners ) { listener . postLabelValueChange ( label ) ; } } } }
public void write ( byte [ ] b , int offset , int length ) throws IOException { if ( entry . getMethod ( ) == DEFLATED ) { if ( length > _NUM ) { if ( ! def . finished ( ) ) { def . setInput ( b , offset , length ) ; while ( ! def . needsInput ( ) ) { deflate ( ) ; } } } } else { writeOut ( b , offset , length ) ; written += length ; } crc . update ( b , offset , length ) ; }
public void updatePoint ( float x , float y ) { if ( Math . sqrt ( x * x + y * y ) > _NUM ) if ( listener != null ) { listener . onAngleChangedListener ( getAngle ( x , - y ) ) ; } }
public final void quietlyJoin ( ) { doJoin ( ) ; }
@ Override public int clampViewPositionHorizontal ( View child , int left , int dx ) { if ( mDraggedView == null ) { return _NUM ; } final int leftBound = _NUM - MAX_OVERFLOW - ( mColumnSizeSide / _NUM ) ; final int rightBound = getWidth ( ) + MAX_OVERFLOW + ( mColumnSizeSide / _NUM ) ; return Math . min ( Math . max ( left , leftBound ) , rightBound ) ; }
HttpRequestWrapper ( HttpServletRequest request ) { super ( request ) ; }
private int convertToPanelX ( double xval ) { double temp = ( xval - m_minX ) / m_rangeX ; temp = temp * m_panelWidth ; return ( int ) temp ; }
public void forward ( HttpServerRequest request ) { forward ( request , null ) ; }
private Set < String > primaryKeys ( PreparedStatement stmt , String owner , String tbl ) throws SQLException { Set < String > pkCols = new HashSet < > ( ) ; stmt . setString ( _NUM , owner ) ; stmt . setString ( _NUM , tbl ) ; try ( ResultSet pkRs = stmt . executeQuery ( ) ) { while ( pkRs . next ( ) ) pkCols . add ( pkRs . getString ( _NUM ) ) ; } return pkCols ; }
public static long readUINT32 ( InputStream stream ) throws IOException { long result = _NUM ; for ( int i = _NUM ; i <= _NUM ; i += _NUM ) { result |= ( long ) stream . read ( ) << i ; } return result ; }
private Token toPrefixToken ( ILeafNode leaf ) { Lexer lexer = new InternalN4JSLexer ( ) ; String text = leaf . getText ( ) ; String prefix = text . substring ( _NUM , endOffset - leaf . getTotalOffset ( ) ) ; ANTLRStringStream stream = new ANTLRStringStream ( prefix ) ; lexer . setCharStream ( stream ) ; Token nextToken = lexer . nextToken ( ) ; return new CommonToken ( nextToken . getType ( ) , nextToken . getText ( ) ) ; }
protected void add ( CSVRecord record ) { records . add ( Objects . requireNonNull ( record ) ) ; }
private void scheduledEnqueueSend ( ) { schedulerQueueSize . decrementAndGet ( ) ; scheduled . set ( _BOOL ) ; enqueueSendWithErrorLogging ( ) ; }
private E awaitMatch ( Node s , Node pred , E e , boolean timed , long nanos ) { final long deadline = timed ? System . nanoTime ( ) + nanos : _NUM ; Thread w = Thread . currentThread ( ) ; int spins = - _NUM ; ThreadLocalRandom randomYields = null ; for ( ; ; ) { Object item = s . item ; if ( item != e ) { s . forgetContents ( ) ; return LinkedTransferQueue . < E > cast ( item ) ; } if ( ( w . isInterrupted ( ) || ( timed && nanos <= _NUM ) ) && s . casItem ( e , s ) ) { unsplice ( pred , s ) ; return e ; } if ( spins < _NUM ) { if ( ( spins = spinsFor ( pred , s . isData ) ) > _NUM ) randomYields = ThreadLocalRandom . current ( ) ; } else if ( spins > _NUM ) { -- spins ; if ( randomYields . nextInt ( CHAINED_SPINS ) == _NUM ) Thread . yield ( ) ; } else if ( s . waiter == null ) { s . waiter = w ; } else if ( timed ) { nanos = deadline - System . nanoTime ( ) ; if ( nanos > _NUM ) LockSupport . parkNanos ( this , nanos ) ; } else { LockSupport . park ( this ) ; } } }
public static String join ( char [ ] self , String separator ) { StringBuilder buffer = new StringBuilder ( ) ; boolean first = _BOOL ; if ( separator == null ) separator = _STR ; for ( char next : self ) { if ( first ) { first = _BOOL ; } else { buffer . append ( separator ) ; } buffer . append ( next ) ; } return buffer . toString ( ) ; }
private < T > BindingAmp < T > findObjectBinding ( Key < T > key ) { Objects . requireNonNull ( key ) ; if ( key . qualifiers ( ) . length != _NUM ) { throw new IllegalArgumentException ( ) ; } return ( BindingAmp ) findBinding ( Key . of ( Object . class , key . qualifiers ( ) [ _NUM ] ) ) ; }
private void initComputeProgram ( ) { glUseProgram ( computeProgram ) ; IntBuffer workGroupSize = BufferUtils . createIntBuffer ( _NUM ) ; glGetProgramiv ( computeProgram , GL_COMPUTE_WORK_GROUP_SIZE , workGroupSize ) ; workGroupSizeX = workGroupSize . get ( _NUM ) ; workGroupSizeY = workGroupSize . get ( _NUM ) ; timeUniform = glGetUniformLocation ( computeProgram , _STR ) ; blendFactorUniform = glGetUniformLocation ( computeProgram , _STR ) ; lightRadiusUniform = glGetUniformLocation ( computeProgram , _STR ) ; IntBuffer props = BufferUtils . createIntBuffer ( _NUM ) ; IntBuffer params = BufferUtils . createIntBuffer ( _NUM ) ; props . put ( _NUM , GL_BUFFER_BINDING ) ; int objectsResourceIndex = glGetProgramResourceIndex ( computeProgram , GL_SHADER_STORAGE_BLOCK , _STR ) ; glGetProgramResourceiv ( computeProgram , GL_SHADER_STORAGE_BLOCK , objectsResourceIndex , props , null , params ) ; objectsSsboBinding = params . get ( _NUM ) ; int trianglesResourceIndex = glGetProgramResourceIndex ( computeProgram , GL_SHADER_STORAGE_BLOCK , _STR ) ; glGetProgramResourceiv ( computeProgram , GL_SHADER_STORAGE_BLOCK , trianglesResourceIndex , props , null , params ) ; trianglesSsboBinding = params . get ( _NUM ) ; int loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; framebufferImageBinding = params . get ( _NUM ) ; loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; worldPositionImageBinding = params . get ( _NUM ) ; loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; worldNormalImageBinding = params . get ( _NUM ) ; glUseProgram ( _NUM ) ; }
public boolean ifTaskCompletedSuccessOrFailureFromResponse ( ResponseOnSingeRequest myResponse ) { boolean isCompleted = _BOOL ; try { if ( myResponse == null || myResponse . isFailObtainResponse ( ) ) { return isCompleted ; } String responseBody = myResponse . getResponseBody ( ) ; if ( responseBody . matches ( successRegex ) || responseBody . matches ( failureRegex ) ) { isCompleted = _BOOL ; } } catch ( Exception t ) { logger . error ( _STR + t ) ; } return isCompleted ; }
public void centerHorizontal ( ArrayList < Integer > nodes ) { if ( m_bNeedsUndoAction ) { addUndoAction ( new centerHorizontalAction ( nodes ) ) ; } int nMinY = - _NUM ; int nMaxY = - _NUM ; for ( int iNode = _NUM ; iNode < nodes . size ( ) ; iNode ++ ) { int nY = getPositionY ( nodes . get ( iNode ) ) ; if ( nY < nMinY || iNode == _NUM ) { nMinY = nY ; } if ( nY > nMaxY || iNode == _NUM ) { nMaxY = nY ; } } for ( int iNode = _NUM ; iNode < nodes . size ( ) ; iNode ++ ) { int nNode = nodes . get ( iNode ) ; m_nPositionY . set ( nNode , ( nMinY + nMaxY ) / _NUM ) ; } }
protected void appendText ( final String text ) { if ( text != null ) { textBody . append ( text ) ; } }
public void onRestoreInstanceState ( Bundle savedInstanceState ) { mSelectedPositions . addAll ( savedInstanceState . getIntegerArrayList ( TAG ) ) ; Log . d ( TAG , _STR + mSelectedPositions ) ; }
public Hour ( int hour , Day day ) { ParamChecks . nullNotPermitted ( day , _STR ) ; this . hour = ( byte ) hour ; this . day = day ; peg ( Calendar . getInstance ( ) ) ; }
public void undo ( ) { if ( -- m_tempUndoIndex < _NUM ) { m_tempUndoIndex = m_tempUndoFiles . length - _NUM ; } if ( m_tempUndoFiles [ m_tempUndoIndex ] != null ) { AbstractFileLoader loader = ConverterUtils . getLoaderForFile ( m_tempUndoFiles [ m_tempUndoIndex ] ) ; try { loader . setFile ( m_tempUndoFiles [ m_tempUndoIndex ] ) ; setInstancesFromFile ( loader ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; m_Log . logMessage ( e . toString ( ) ) ; JOptionPane . showMessageDialog ( PreprocessPanel . this , _STR + e . toString ( ) , _STR , JOptionPane . ERROR_MESSAGE ) ; } m_tempUndoFiles [ m_tempUndoIndex ] = null ; } int temp = m_tempUndoIndex - _NUM ; if ( temp < _NUM ) { temp = m_tempUndoFiles . length - _NUM ; } m_UndoBut . setEnabled ( m_tempUndoFiles [ temp ] != null ) ; }
public static boolean isConnectedUsingWifi ( ) { Context context = FeApp . getAppContext ( ) ; ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo ni = cm . getActiveNetworkInfo ( ) ; return ni != null && ni . isConnected ( ) == _BOOL && ni . getType ( ) == ConnectivityManager . TYPE_WIFI ; }
public void close ( ) throws IOException { if ( writer != null ) writer . flushBuffer ( ) ; }
public boolean isEmpty ( ) { return extOrdering . isEmpty ( ) ; }
public Process ( final File file , final ProgressListener progressListener ) throws IOException , XMLException { this . processLocation = new FileProcessLocation ( file ) ; initContext ( ) ; Reader in = null ; try { in = new InputStreamReader ( new FileInputStream ( file ) , _STR ) ; readProcess ( in , progressListener ) ; } catch ( IOException e ) { throw e ; } finally { if ( in != null ) { in . close ( ) ; } } }
public static String extractMusicIDFromMediaID ( @ NonNull String mediaID ) { int pos = mediaID . indexOf ( LEAF_SEPARATOR ) ; if ( pos >= _NUM ) { return mediaID . substring ( pos + _NUM ) ; } return null ; }
public void testGetScope ( ) throws Exception { Identity i = new IdentityStub ( _STR ) ; assertNull ( i . getScope ( ) ) ; IdentityScope s = IdentityScope . getSystemScope ( ) ; Identity i2 = new IdentityStub ( _STR , s ) ; assertSame ( s , i2 . getScope ( ) ) ; }
public Object [ ] buildParameters ( Object [ ] firstParameters , Method method , Class < ? extends Annotation > annotationType ) { int parametersLength = method . getParameterTypes ( ) . length ; if ( firstParameters . length > _NUM && parametersLength < _NUM ) { throw new RepositoryMethodException ( String . format ( _STR , annotationType ) ) ; } int parametersToResolve = parametersLength - firstParameters . length ; Object [ ] additionalParameters = new Object [ parametersToResolve ] ; for ( int i = firstParameters . length ; i < parametersLength ; i ++ ) { additionalParameters [ i - firstParameters . length ] = parameterProvider . provide ( method , i ) ; } return concatenate ( firstParameters , additionalParameters ) ; }
@ Override public boolean contains ( S2Cell cell ) { return contains ( cell . id ( ) ) ; }
public SimplexNoiseGenerator ( Random rand ) { super ( rand ) ; offsetW = rand . nextDouble ( ) * _NUM ; }
public static long [ ] values ( Long [ ] array ) { long [ ] dest = new long [ array . length ] ; for ( int i = _NUM ; i < array . length ; i ++ ) { Long v = array [ i ] ; if ( v != null ) { dest [ i ] = v . longValue ( ) ; } } return dest ; }
@ Override public void processNewLines ( String [ ] lines ) { for ( String line : lines ) { if ( line . startsWith ( _STR ) ) { continue ; } if ( line . contains ( _STR ) ) { myIsFileMissing = _BOOL ; return ; } String [ ] values = line . split ( LINE_SPLIT_REGEX ) ; if ( values . length < INDEX_OF_TX_BYTES ) { continue ; } try { int lineUid = Integer . parseInt ( values [ INDEX_OF_UID ] ) ; if ( myUid == lineUid ) { int tempRxBytes = Integer . parseInt ( values [ INDEX_OF_RX_BYTES ] ) ; int tempTxBytes = Integer . parseInt ( values [ INDEX_OF_TX_BYTES ] ) ; if ( tempRxBytes < _NUM || tempTxBytes < _NUM ) { LOG . warning ( String . format ( _STR , tempRxBytes , tempTxBytes , line ) ) ; continue ; } myRxBytes += tempRxBytes ; myTxBytes += tempTxBytes ; } } catch ( NumberFormatException e ) { LOG . warning ( String . format ( _STR , values [ INDEX_OF_UID ] , values [ INDEX_OF_RX_BYTES ] , values [ INDEX_OF_TX_BYTES ] , line ) ) ; } } }
protected void initLookup ( ) { m_lookup = new HashMap ( ) ; for ( int i = _NUM ; i < m_names . length ; ++ i ) { m_lookup . put ( m_names [ i ] , new Integer ( i ) ) ; } }
public String toString ( ) { String str = _STR ; String followedBy = _STR ; int lastType = - _NUM ; String lastString = _STR ; int singlesCount = _NUM ; for ( Enumeration e = formatConstraints . elements ( ) ; e . hasMoreElements ( ) ; ) { FormatConstraint constraint = ( FormatConstraint ) e . nextElement ( ) ; if ( constraint . count == FormatConstraint . COUNT_EXACTLY_ONE ) { if ( lastType != - _NUM ) { if ( lastType != constraint . type ) { str += followedBy + singlesCount + lastString ; followedBy = _STR ; singlesCount = _NUM ; lastType = constraint . type ; lastString = constraint . toString ( ) ; } else { singlesCount ++ ; } } else { lastType = constraint . type ; lastString = constraint . toString ( ) ; singlesCount = _NUM ; } } else { if ( lastType != - _NUM ) { str += followedBy + singlesCount + lastString ; followedBy = _STR ; lastType = - _NUM ; singlesCount = _NUM ; lastString = _STR ; } str += followedBy + constraint . toString ( ) ; followedBy = _STR ; } } if ( lastType != - _NUM ) { str += followedBy + singlesCount + lastString ; } return str ; }
public void readData ( DataInput din ) throws IOException { din . readShort ( ) ; count = din . readUnsignedShort ( ) ; registers = new InputRegister [ count ] ; for ( int i = _NUM ; i < count ; i ++ ) { registers [ i ] = new SimpleInputRegister ( din . readShort ( ) ) ; } }
public void adjustIndentation ( int delta ) { if ( delta < _NUM ) { indentationLevel = Math . max ( _NUM , indentationLevel + delta ) ; } else { indentationLevel += delta ; } }
public int capacity ( ) { return capacity . get ( ) ; }
protected static token do_code_string ( ) throws java . io . IOException { StringBuffer result = new StringBuffer ( ) ; advance ( ) ; advance ( ) ; while ( ! ( next_char == _STR && next_char2 == _STR ) ) { if ( next_char == EOF_CHAR ) { emit_error ( _STR ) ; break ; } result . append ( new Character ( ( char ) next_char ) ) ; advance ( ) ; } advance ( ) ; advance ( ) ; return new str_token ( sym . CODE_STRING , result . toString ( ) ) ; }
public String random ( Object omin , Object omax ) { int min = FunctionHandler . getInt ( omin ) ; int max = FunctionHandler . getInt ( omax ) ; if ( max > min ) { return Integer . toString ( rnd . nextInt ( max - min ) + min ) ; } return _STR ; }
public void test_reopen01 ( ) { final IRawStore store = new SimpleMemoryRawStore ( ) ; final BTree btree ; { IndexMetadata md = new IndexMetadata ( UUID . randomUUID ( ) ) ; md . setBranchingFactor ( _NUM ) ; btree = BTree . create ( store , md ) ; } assertTrue ( btree . isOpen ( ) ) ; btree . close ( ) ; assertFalse ( btree . isOpen ( ) ) ; try { btree . close ( ) ; fail ( _STR + IllegalStateException . class ) ; } catch ( IllegalStateException ex ) { if ( log . isInfoEnabled ( ) ) log . info ( _STR + ex ) ; } assertNotNull ( btree . getRoot ( ) ) ; assertTrue ( btree . isOpen ( ) ) ; }
public static File searchPaths ( Iterable < ? extends File > paths , String relFile ) { for ( File path : paths ) { File f = new File ( path , relFile ) ; if ( f . exists ( ) ) { return path ; } } return null ; }
public boolean hasUnsupportedCriticalExtension ( ) { Set extns = getCriticalExtensionOIDs ( ) ; return extns != null && ! extns . isEmpty ( ) ; }
private static String doNormalize ( String filename , char separator , boolean keepSeparator ) { if ( filename == null ) { return null ; } int size = filename . length ( ) ; if ( size == _NUM ) { return filename ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < _NUM ) { return null ; } char [ ] array = new char [ size + _NUM ] ; filename . getChars ( _NUM , filename . length ( ) , array , _NUM ) ; char otherSeparator = separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR ; for ( int i = _NUM ; i < array . length ; i ++ ) { if ( array [ i ] == otherSeparator ) { array [ i ] = separator ; } } boolean lastIsDirectory = _BOOL ; if ( array [ size - _NUM ] != separator ) { array [ size ++ ] = separator ; lastIsDirectory = _BOOL ; } for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == separator ) { System . arraycopy ( array , i , array , i - _NUM , size - i ) ; size -- ; i -- ; } } for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == _STR && ( i == prefix + _NUM || array [ i - _NUM ] == separator ) ) { if ( i == size - _NUM ) { lastIsDirectory = _BOOL ; } System . arraycopy ( array , i + _NUM , array , i - _NUM , size - i ) ; size -= _NUM ; i -- ; } } outer : for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == _STR && array [ i - _NUM ] == _STR && ( i == prefix + _NUM || array [ i - _NUM ] == separator ) ) { if ( i == prefix + _NUM ) { return null ; } if ( i == size - _NUM ) { lastIsDirectory = _BOOL ; } int j ; for ( j = i - _NUM ; j >= prefix ; j -- ) { if ( array [ j ] == separator ) { System . arraycopy ( array , i + _NUM , array , j + _NUM , size - i ) ; size -= i - j ; i = j + _NUM ; continue outer ; } } System . arraycopy ( array , i + _NUM , array , prefix , size - i ) ; size -= i + _NUM - prefix ; i = prefix + _NUM ; } } if ( size <= _NUM ) { return _STR ; } if ( size <= prefix ) { return new String ( array , _NUM , size ) ; } if ( lastIsDirectory && keepSeparator ) { return new String ( array , _NUM , size ) ; } return new String ( array , _NUM , size - _NUM ) ; }
@ Override public StringBuffer format ( double value , StringBuffer buffer , FieldPosition field ) { for ( int i = choiceLimits . length - _NUM ; i >= _NUM ; i -- ) { if ( choiceLimits [ i ] <= value ) { return buffer . append ( choiceFormats [ i ] ) ; } } return choiceFormats . length == _NUM ? buffer : buffer . append ( choiceFormats [ _NUM ] ) ; }
private void loadConfigurationFromJvmParameters ( ) { String repositoryProperty = System . getProperty ( REPOSITORY_PROPERTY ) ; if ( null != repositoryProperty ) { String [ ] repositoryIpHost = repositoryProperty . split ( _STR ) ; if ( repositoryIpHost . length == _NUM ) { String repositoryIp = repositoryIpHost [ _NUM ] ; String repositoryPort = repositoryIpHost [ _NUM ] ; if ( StringUtils . isNotBlank ( repositoryIp ) && StringUtils . isNotBlank ( repositoryPort ) ) { log . info ( _STR + repositoryIp + _STR + repositoryPort ) ; try { int port = Integer . parseInt ( repositoryPort ) ; setRepository ( repositoryIp , port ) ; } catch ( Exception e ) { log . warn ( _STR , e ) ; } } } } String agentName = System . getProperty ( AGENT_NAME_PROPERTY ) ; if ( StringUtils . isNotBlank ( agentName ) ) { try { log . info ( _STR + agentName ) ; setAgentName ( agentName ) ; } catch ( Exception e ) { log . warn ( _STR , e ) ; } } else { try { setAgentName ( DEFAULT_AGENT_NAME ) ; } catch ( StorageException e ) { log . warn ( _STR , e ) ; } } }
public boolean softSignin ( ) throws IOException { if ( url == null ) { throw new IllegalStateException ( _STR ) ; } checkResolveHost ( ) ; if ( sessionId != null ) { if ( checkAuthorized ( getAuthCheckUrl ( sessionId ) ) ) { LOGGER . fine ( _STR + sessionId ) ; return _BOOL ; } else { sessionId = null ; } } long id = loadSessionId ( ) ; if ( id == _NUM ) { return _BOOL ; } boolean authorized = checkAuthorized ( getAuthCheckUrl ( id ) ) ; if ( authorized ) { LOGGER . info ( _STR + id ) ; this . sessionId = id ; } return authorized ; }
private void testViewAlterAndCommandCache ( ) throws SQLException { deleteDb ( _STR ) ; Connection conn = getConnection ( _STR ) ; Statement stat = conn . createStatement ( ) ; stat . execute ( _STR ) ; stat . execute ( _STR ) ; stat . execute ( _STR ) ; stat . execute ( _STR ) ; stat . execute ( _STR ) ; ResultSet rs = stat . executeQuery ( _STR ) ; assertTrue ( rs . next ( ) ) ; assertEquals ( _NUM , rs . getInt ( _NUM ) ) ; stat . execute ( _STR ) ; rs = stat . executeQuery ( _STR ) ; assertTrue ( rs . next ( ) ) ; assertEquals ( _NUM , rs . getInt ( _NUM ) ) ; conn . close ( ) ; deleteDb ( _STR ) ; }
protected static boolean approxUnit ( final StringBuilder sbuf , final int amount , final int size , final String name ) { int count = amount / size ; int remainder ; if ( count == _NUM ) { return _BOOL ; } remainder = amount - ( count * size ) ; if ( remainder >= ( size * _NUM / _NUM ) ) { count ++ ; sbuf . append ( count ) ; } else if ( remainder >= ( size * _NUM / _NUM ) ) { count ++ ; sbuf . append ( _STR ) ; sbuf . append ( count ) ; } else if ( remainder >= ( size * _NUM / _NUM ) ) { sbuf . append ( _STR ) ; sbuf . append ( count ) ; sbuf . append ( _STR ) ; count = _NUM ; } else if ( remainder >= ( size * _NUM / _NUM ) ) { sbuf . append ( _STR ) ; sbuf . append ( count ) ; } else { sbuf . append ( count ) ; } sbuf . append ( _STR ) ; sbuf . append ( Grammar . plnoun ( count , name ) ) ; return _BOOL ; }
public static Element createElement ( Document doc , String tag , String nsURI , String prefix ) { String qName = ( prefix == null || prefix . length ( ) == _NUM ) ? tag : prefix + _STR + tag ; return doc . createElementNS ( nsURI , qName ) ; }
public static void modifyFile ( File file , Function < String , String > modifier ) throws IOException { String content = new String ( Files . toByteArray ( file ) , StandardCharsets . UTF_8 ) ; String result = modifier . apply ( content ) ; Files . write ( result . getBytes ( StandardCharsets . UTF_8 ) , file ) ; }
private void state2 ( ) throws IOException { int [ ] selectionIds = readList ( new File ( filePrefix + _STR ) ) ; int [ ] archivedIds = readList ( new File ( filePrefix + _STR ) ) ; int [ ] variationIds = new int [ lambda ] ; if ( selectionIds . length != mu ) { throw new IOException ( _STR ) ; } updatePopulation ( archivedIds ) ; clearFile ( new File ( filePrefix + _STR ) ) ; clearFile ( new File ( filePrefix + _STR ) ) ; List < Solution > offspring = new ArrayList < Solution > ( ) ; for ( int i = _NUM ; i < mu ; i += variation . getArity ( ) ) { Solution [ ] parents = new Solution [ variation . getArity ( ) ] ; for ( int j = _NUM ; j < variation . getArity ( ) ; j ++ ) { parents [ j ] = solutions . get ( selectionIds [ i + j ] ) ; } offspring . addAll ( Arrays . asList ( variation . evolve ( parents ) ) ) ; } if ( offspring . size ( ) != lambda ) { throw new IOException ( _STR ) ; } evaluateAll ( offspring ) ; for ( int i = _NUM ; i < lambda ; i ++ ) { variationIds [ i ] = addToPopulation ( offspring . get ( i ) ) ; } writePopulation ( new File ( filePrefix + _STR ) , variationIds ) ; }
public void testListOptions ( ) { if ( m_OptionTester . getOptionHandler ( ) != null ) { if ( ! m_OptionTester . checkListOptions ( ) ) fail ( _STR ) ; } }
protected double LLToWorldReturningLon ( double lat , double lon , Point2D lp ) { double phi_deg = lat ; double phi = ProjMath . degToRad ( phi_deg ) ; double lamba_deg = lon ; double lamba = ProjMath . degToRad ( lamba_deg ) ; double dlamda = lamba - lamdaf ; if ( dlamda > Math . PI ) { dlamda -= MoreMath . TWO_PI_D ; } else if ( dlamda < - Math . PI ) { dlamda += MoreMath . TWO_PI_D ; } double e = ellps . ecc ; double r = _NUM ; if ( ! MoreMath . approximately_equal ( Math . abs ( phi ) , MoreMath . HALF_PI , EPS10 ) ) { double t = lambTsfn ( phi , Math . sin ( phi ) , e ) ; r = ellps . radius * F * Math . pow ( t , n ) ; } double theta = n * dlamda ; double easting = falseEasting + r * Math . sin ( theta - alpha ) ; double northing = falseNorthing + rf - r * Math . cos ( theta - alpha ) ; lp . setLocation ( easting , northing ) ; return dlamda ; }
protected void notifySizeChanged ( float width , float height , int orientation ) { }
protected boolean removeTurntable ( LayoutTurntable o ) { if ( ! noWarnTurntable ) { int selectedValue = JOptionPane . showOptionDialog ( this , rb . getString ( _STR ) , Bundle . getMessage ( _STR ) , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE , null , new Object [ ] { Bundle . getMessage ( _STR ) , Bundle . getMessage ( _STR ) , rb . getString ( _STR ) } , Bundle . getMessage ( _STR ) ) ; if ( selectedValue == _NUM ) { return ( _BOOL ) ; } if ( selectedValue == _NUM ) { noWarnTurntable = _BOOL ; } } if ( selectedObject == o ) { selectedObject = null ; } if ( prevSelectedObject == o ) { prevSelectedObject = null ; } for ( int j = _NUM ; j < o . getNumberRays ( ) ; j ++ ) { TrackSegment t = o . getRayConnectOrdered ( j ) ; if ( t != null ) { substituteAnchor ( o . getRayCoordsIndexed ( j ) , o , t ) ; } } for ( int i = _NUM ; i < turntableList . size ( ) ; i ++ ) { LayoutTurntable lx = turntableList . get ( i ) ; if ( lx == o ) { turntableList . remove ( i ) ; o . remove ( ) ; setDirty ( _BOOL ) ; repaint ( ) ; return ( _BOOL ) ; } } return ( _BOOL ) ; }
@ Override public final void endElement ( final String ns , final String lName , final String qName ) throws SAXException { String name = lName == null || lName . length ( ) == _NUM ? qName : lName ; Rule r = ( Rule ) RULES . match ( match ) ; if ( r != null ) { r . end ( name ) ; } int slash = match . lastIndexOf ( _STR ) ; if ( slash >= _NUM ) { match = match . substring ( _NUM , slash ) ; } else { match = _STR ; } }
public INDArray asMatrix ( BufferedImage image ) { if ( channels == _NUM ) { return toBgr ( image ) ; } else { image = scalingIfNeed ( image , _BOOL ) ; int w = image . getWidth ( ) ; int h = image . getHeight ( ) ; INDArray ret = Nd4j . create ( h , w ) ; for ( int i = _NUM ; i < h ; i ++ ) { for ( int j = _NUM ; j < w ; j ++ ) { ret . putScalar ( new int [ ] { i , j } , image . getRGB ( i , j ) ) ; } } return ret ; } }
public FileSystemUtils ( ) { super ( ) ; }
public int scheduledQueueSize ( ) { return schedulerQueueSize . get ( ) ; }
public DGeneralNameChooser ( JFrame parent , String title , GeneralName generalName ) { super ( parent , title , ModalityType . DOCUMENT_MODAL ) ; initComponents ( generalName ) ; }
public void destroyScene ( ) { clearAnimations ( ) ; clearCameras ( ) ; clearLights ( ) ; clearPlugins ( ) ; clearChildren ( ) ; clearFrameCallbacks ( ) ; }
private static Platform findPlatform ( ) { try { try { Class . forName ( _STR ) ; } catch ( ClassNotFoundException e ) { Class . forName ( _STR ) ; } OptionalMethod < Socket > setUseSessionTickets = new OptionalMethod < > ( null , _STR , boolean . class ) ; OptionalMethod < Socket > setHostname = new OptionalMethod < > ( null , _STR , String . class ) ; Method trafficStatsTagSocket = null ; Method trafficStatsUntagSocket = null ; OptionalMethod < Socket > getAlpnSelectedProtocol = null ; OptionalMethod < Socket > setAlpnProtocols = null ; try { Class < ? > trafficStats = Class . forName ( _STR ) ; trafficStatsTagSocket = trafficStats . getMethod ( _STR , Socket . class ) ; trafficStatsUntagSocket = trafficStats . getMethod ( _STR , Socket . class ) ; try { Class . forName ( _STR ) ; getAlpnSelectedProtocol = new OptionalMethod < > ( byte [ ] . class , _STR ) ; setAlpnProtocols = new OptionalMethod < > ( null , _STR , byte [ ] . class ) ; } catch ( ClassNotFoundException ignored ) { } } catch ( ClassNotFoundException | NoSuchMethodException ignored ) { } return new Android ( setUseSessionTickets , setHostname , trafficStatsTagSocket , trafficStatsUntagSocket , getAlpnSelectedProtocol , setAlpnProtocols ) ; } catch ( ClassNotFoundException ignored ) { } try { String negoClassName = _STR ; Class < ? > negoClass = Class . forName ( negoClassName ) ; Class < ? > providerClass = Class . forName ( negoClassName + _STR ) ; Class < ? > clientProviderClass = Class . forName ( negoClassName + _STR ) ; Class < ? > serverProviderClass = Class . forName ( negoClassName + _STR ) ; Method putMethod = negoClass . getMethod ( _STR , SSLSocket . class , providerClass ) ; Method getMethod = negoClass . getMethod ( _STR , SSLSocket . class ) ; Method removeMethod = negoClass . getMethod ( _STR , SSLSocket . class ) ; return new JdkWithJettyBootPlatform ( putMethod , getMethod , removeMethod , clientProviderClass , serverProviderClass ) ; } catch ( ClassNotFoundException | NoSuchMethodException ignored ) { } return new Platform ( ) ; }
private void addLimitedMitreJoin ( LineSegment offset0 , LineSegment offset1 , double distance , double mitreLimit ) { Coordinate basePt = seg0 . p1 ; double ang0 = Angle . angle ( basePt , seg0 . p0 ) ; double ang1 = Angle . angle ( basePt , seg1 . p1 ) ; double angDiff = Angle . angleBetweenOriented ( seg0 . p0 , basePt , seg1 . p1 ) ; double angDiffHalf = angDiff / _NUM ; double midAng = Angle . normalize ( ang0 + angDiffHalf ) ; double mitreMidAng = Angle . normalize ( midAng + Math . PI ) ; double mitreDist = mitreLimit * distance ; double bevelDelta = mitreDist * Math . abs ( Math . sin ( angDiffHalf ) ) ; double bevelHalfLen = distance - bevelDelta ; double bevelMidX = basePt . x + mitreDist * Math . cos ( mitreMidAng ) ; double bevelMidY = basePt . y + mitreDist * Math . sin ( mitreMidAng ) ; Coordinate bevelMidPt = new Coordinate ( bevelMidX , bevelMidY ) ; LineSegment mitreMidLine = new LineSegment ( basePt , bevelMidPt ) ; Coordinate bevelEndLeft = mitreMidLine . pointAlongOffset ( _NUM , bevelHalfLen ) ; Coordinate bevelEndRight = mitreMidLine . pointAlongOffset ( _NUM , - bevelHalfLen ) ; if ( side == Position . LEFT ) { segList . addPt ( bevelEndLeft ) ; segList . addPt ( bevelEndRight ) ; } else { segList . addPt ( bevelEndRight ) ; segList . addPt ( bevelEndLeft ) ; } }
static byte [ ] discardNonBase64 ( byte [ ] data ) { byte groomedData [ ] = new byte [ data . length ] ; int bytesCopied = _NUM ; for ( int i = _NUM ; i < data . length ; i ++ ) { if ( isBase64 ( data [ i ] ) ) { groomedData [ bytesCopied ++ ] = data [ i ] ; } } byte packedData [ ] = new byte [ bytesCopied ] ; System . arraycopy ( groomedData , _NUM , packedData , _NUM , bytesCopied ) ; return packedData ; }
public void testMultiplyDiffScalePosNeg ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = - _NUM ; String c = _STR ; int cScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal result = aNumber . multiply ( bNumber ) ; assertEquals ( _STR , c , result . toString ( ) ) ; assertEquals ( _STR , cScale , result . scale ( ) ) ; }
private static long limitDuration ( long leaseDuration , long limit ) { if ( leaseDuration == Lease . ANY || leaseDuration > limit ) leaseDuration = limit ; else if ( leaseDuration < _NUM ) throw new IllegalArgumentException ( _STR ) ; return leaseDuration ; }
static String pathToCookiePath ( String path ) { if ( path == null ) { return _STR ; } int lastSlash = path . lastIndexOf ( _STR ) ; return path . substring ( _NUM , lastSlash + _NUM ) ; }
public static String formatSimpleDecimal ( double d ) { return simpleFormat . format ( d ) ; }
protected AbstractCategoryItemLabelGenerator ( String labelFormat , DateFormat formatter ) { ParamChecks . nullNotPermitted ( labelFormat , _STR ) ; ParamChecks . nullNotPermitted ( formatter , _STR ) ; this . labelFormat = labelFormat ; this . numberFormat = null ; this . percentFormat = NumberFormat . getPercentInstance ( ) ; this . dateFormat = formatter ; this . nullValueString = _STR ; }
public void delItems ( int s , int e ) { boolean hsbWasVisible = hsbVis ; boolean vsbWasVisible = vsbVis ; int oldLastDisplayed = lastItemDisplayed ( ) ; if ( log . isLoggable ( PlatformLogger . Level . FINE ) ) { log . fine ( _STR + s + _STR + e ) ; } if ( log . isLoggable ( PlatformLogger . Level . FINEST ) ) { log . finest ( _STR + oldLastDisplayed + _STR + itemsInWindow ( ) + _STR + items . size ( ) ) ; } if ( items . size ( ) == _NUM ) { return ; } if ( s > e ) { int tmp = s ; s = e ; e = tmp ; } if ( s < _NUM ) { s = _NUM ; } if ( e >= items . size ( ) ) { e = items . size ( ) - _NUM ; } boolean repaintNeeded = ( s >= getFirstVisibleItem ( ) && s <= getLastVisibleItem ( ) ) ; for ( int i = s ; i <= e ; i ++ ) { items . removeElementAt ( s ) ; int j = posInSel ( i ) ; if ( j != - _NUM ) { int newsel [ ] = new int [ selected . length - _NUM ] ; System . arraycopy ( selected , _NUM , newsel , _NUM , j ) ; System . arraycopy ( selected , j + _NUM , newsel , j , selected . length - ( j + _NUM ) ) ; selected = newsel ; } } int diff = ( e - s ) + _NUM ; for ( int i = _NUM ; i < selected . length ; i ++ ) { if ( selected [ i ] > e ) { selected [ i ] -= diff ; } } int options = PAINT_VSCROLL ; if ( getFocusIndex ( ) > e ) { setFocusIndex ( getFocusIndex ( ) - ( e - s + _NUM ) ) ; options |= PAINT_FOCUS ; } else if ( getFocusIndex ( ) >= s && getFocusIndex ( ) <= e ) { int focusBound = ( items . size ( ) > _NUM ) ? _NUM : - _NUM ; setFocusIndex ( Math . max ( s - _NUM , focusBound ) ) ; options |= PAINT_FOCUS ; } if ( log . isLoggable ( PlatformLogger . Level . FINEST ) ) { log . finest ( _STR + multipleSelections ) ; } if ( vsb . getValue ( ) >= s ) { if ( vsb . getValue ( ) <= e ) { vsb . setValue ( e + _NUM - diff ) ; } else { vsb . setValue ( vsb . getValue ( ) - diff ) ; } } int oldMaxLength = maxLength ; maxLength = maxLength ( ) ; if ( maxLength != oldMaxLength ) { options |= PAINT_HSCROLL ; } layout ( ) ; repaintNeeded |= ( vsbWasVisible ^ vsbVis ) || ( hsbWasVisible ^ hsbVis ) ; if ( repaintNeeded ) { options |= PAINT_ALL ; } repaint ( s , oldLastDisplayed , options ) ; }
static long makeId ( SnmpOid oid ) { long id = _NUM ; long [ ] arcs = oid . longValue ( _BOOL ) ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] ; return id ; }
private void cacheAttribute ( String attrId , byte [ ] [ ] values ) { String cacheKey = name + _STR + attrId ; valueCache . put ( cacheKey , values ) ; }
void read ( Reader policy ) throws ParsingException , IOException { if ( ! ( policy instanceof BufferedReader ) ) { policy = new BufferedReader ( policy ) ; } st = new StreamTokenizer ( policy ) ; st . resetSyntax ( ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _NUM + _NUM , _NUM ) ; st . whitespaceChars ( _NUM , _STR ) ; st . commentChar ( _STR ) ; st . quoteChar ( _STR ) ; st . quoteChar ( _STR ) ; st . lowerCaseMode ( _BOOL ) ; st . ordinaryChar ( _STR ) ; st . slashSlashComments ( _BOOL ) ; st . slashStarComments ( _BOOL ) ; st . parseNumbers ( ) ; Hashtable < String , Vector < String > > processedPermissions = null ; lookahead = st . nextToken ( ) ; while ( lookahead != StreamTokenizer . TT_EOF ) { if ( peek ( _STR ) ) { GrantEntry ge = parseGrantEntry ( processedPermissions ) ; if ( ge != null ) grantEntries . addElement ( ge ) ; } else { throw new ParsingException ( st . lineno ( ) , _STR + _STR ) ; } match ( _STR ) ; } }
protected void injectIntoVolumeInformationContainer ( Map < String , StringSet > volumeInformation , String infoKey , String altKey , CIMInstance volumeInstance ) { Object value = getCIMPropertyValue ( volumeInstance , infoKey ) ; if ( null == value ) { value = getCIMPropertyValue ( volumeInstance , altKey ) ; } String charactersticName = SupportedVolumeInformation . getVolumeInformation ( infoKey ) ; if ( null != value && null != charactersticName ) { StringSet valueSet = new StringSet ( ) ; if ( value instanceof String ) { valueSet . add ( value . toString ( ) ) ; } else if ( value instanceof String [ ] ) { valueSet . addAll ( Arrays . asList ( ( String [ ] ) value ) ) ; } volumeInformation . put ( charactersticName , valueSet ) ; } }
@ Override public void onDetachedFromRecyclerView ( RecyclerView recyclerView ) { super . onDetachedFromRecyclerView ( recyclerView ) ; mAttachedRecyclerViewPool . remove ( recyclerView ) ; }
private void loadFile ( String filename , AbstractFileLoader ... loaders ) { ArffSortedTableModel model ; this . m_Filename = filename ; createTitle ( ) ; if ( filename . equals ( _STR ) ) { model = null ; } else { model = new ArffSortedTableModel ( filename , loaders ) ; model . setShowAttributeIndex ( getShowAttributeIndex ( ) ) ; } m_TableArff . setModel ( model ) ; setChanged ( _BOOL ) ; createName ( ) ; }
private void destinationTypeChanged ( ) { if ( m_Exp == null ) return ; String str = _STR ; if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_DATABASE_TEXT ) { m_ResultsDestinationPathLabel . setText ( _STR ) ; str = m_destinationDatabaseURL ; m_BrowseDestinationButton . setEnabled ( _BOOL ) ; m_BrowseDestinationButton . setText ( _STR ) ; } else { m_ResultsDestinationPathLabel . setText ( _STR ) ; if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_ARFF_TEXT ) { int ind = m_destinationFilename . lastIndexOf ( _STR ) ; if ( ind > - _NUM ) { m_destinationFilename = m_destinationFilename . substring ( _NUM , ind ) + _STR ; } } if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_CSV_TEXT ) { int ind = m_destinationFilename . lastIndexOf ( _STR ) ; if ( ind > - _NUM ) { m_destinationFilename = m_destinationFilename . substring ( _NUM , ind ) + _STR ; } } str = m_destinationFilename ; if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_ARFF_TEXT ) { int ind = str . lastIndexOf ( _STR ) ; if ( ind > - _NUM ) { str = str . substring ( _NUM , ind ) + _STR ; } } if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_CSV_TEXT ) { int ind = str . lastIndexOf ( _STR ) ; if ( ind > - _NUM ) { str = str . substring ( _NUM , ind ) + _STR ; } } m_BrowseDestinationButton . setEnabled ( _BOOL ) ; m_BrowseDestinationButton . setText ( _STR ) ; } if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_DATABASE_TEXT ) { DatabaseResultListener drl = null ; try { drl = new DatabaseResultListener ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } drl . setDatabaseURL ( m_destinationDatabaseURL ) ; m_Exp . setResultListener ( drl ) ; } else { if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_ARFF_TEXT ) { InstancesResultListener irl = new InstancesResultListener ( ) ; if ( ! m_destinationFilename . equals ( _STR ) ) { irl . setOutputFile ( new File ( m_destinationFilename ) ) ; } m_Exp . setResultListener ( irl ) ; } else if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_CSV_TEXT ) { CSVResultListener crl = new CSVResultListener ( ) ; if ( ! m_destinationFilename . equals ( _STR ) ) { crl . setOutputFile ( new File ( m_destinationFilename ) ) ; } m_Exp . setResultListener ( crl ) ; } } m_ResultsDestinationPathTField . setText ( str ) ; m_Support . firePropertyChange ( _STR , null , null ) ; }
public static InputStream tryGzipInput ( InputStream in ) throws IOException { if ( ! in . markSupported ( ) ) { PushbackInputStream pb = new PushbackInputStream ( in , _NUM ) ; in = pb ; byte [ ] magic = { _NUM , _NUM } ; pb . read ( magic ) ; pb . unread ( magic ) ; if ( magic [ _NUM ] == _NUM && magic [ _NUM ] == - _NUM ) { return new GZIPInputStream ( pb ) ; } return in ; } in . mark ( _NUM ) ; boolean isgzip = ( in . read ( ) == _NUM && in . read ( ) == - _NUM ) ; in . reset ( ) ; if ( isgzip ) { in = new GZIPInputStream ( in ) ; } return in ; }
@ Override public int hashCode ( ) { if ( location != null ) return location . hashCode ( ) ; else return _NUM ; }
public static Query newPrefixQuery ( String field , InetAddress value , int prefixLength ) { if ( value == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( prefixLength < _NUM || prefixLength > _NUM * value . getAddress ( ) . length ) { throw new IllegalArgumentException ( _STR + prefixLength + _STR ) ; } byte lower [ ] = value . getAddress ( ) ; byte upper [ ] = value . getAddress ( ) ; for ( int i = prefixLength ; i < _NUM * lower . length ; i ++ ) { int m = _NUM << ( _NUM - ( i & _NUM ) ) ; lower [ i > > _NUM ] &= ~ m ; upper [ i > > _NUM ] |= m ; } try { return newRangeQuery ( field , InetAddress . getByAddress ( lower ) , InetAddress . getByAddress ( upper ) ) ; } catch ( UnknownHostException e ) { throw new AssertionError ( e ) ; } }
public static Subject createAMIdentitySubject ( PolicyManager pm , AMIdentity user ) throws PolicyException { SubjectTypeManager mgr = pm . getSubjectTypeManager ( ) ; Subject subject = mgr . getSubject ( _STR ) ; Set < String > set = new HashSet < String > ( ) ; set . add ( user . getUniversalId ( ) ) ; subject . setValues ( set ) ; return subject ; }
protected void expandFor ( int index , double d ) { if ( index < size ) return ; int oldSize = size , capacity = vector . length ; size = index + _NUM ; if ( capacity >= size ) return ; while ( capacity < size ) capacity *= _NUM ; double [ ] t = new double [ capacity ] ; System . arraycopy ( vector , _NUM , t , _NUM , oldSize ) ; if ( d != _NUM ) Arrays . fill ( t , oldSize , size , d ) ; vector = t ; }
private void doNormalCommandLineList ( List < String > commandLineList , List < String > jointOptions , Path classpath ) { commandLineList . add ( _STR ) ; commandLineList . add ( classpath . toString ( ) ) ; if ( jointCompilation ) { commandLineList . add ( _STR ) ; commandLineList . addAll ( jointOptions ) ; } if ( destDir != null ) { commandLineList . add ( _STR ) ; commandLineList . add ( destDir . getPath ( ) ) ; } if ( encoding != null ) { commandLineList . add ( _STR ) ; commandLineList . add ( encoding ) ; } if ( stacktrace ) { commandLineList . add ( _STR ) ; } if ( parameters ) { commandLineList . add ( _STR ) ; } if ( useIndy ) { commandLineList . add ( _STR ) ; } if ( scriptBaseClass != null ) { commandLineList . add ( _STR ) ; commandLineList . add ( scriptBaseClass ) ; } if ( configscript != null ) { commandLineList . add ( _STR ) ; commandLineList . add ( configscript ) ; } }
private synchronized void loadHexImage ( IHex hex ) { hexTileset . assignMatch ( hex , boardview ) ; hexTileset . trackHexImages ( hex , tracker ) ; }
public void triangulate ( PointSet ps ) { _triangulations . clear ( ) ; _triangulations . add ( ps ) ; start ( ) ; }
public String base64UrlEncode ( byte [ ] data ) { String encodedData = new String ( Base64 . encode ( data , Base64 . URL_SAFE ) ) ; encodedData = encodedData . replace ( _STR , _STR ) ; encodedData = encodedData . replace ( _STR , _STR ) ; return encodedData ; }
private void writeJavaFieldSpec ( JavaFieldSpec spec , Document document , Element parentElement ) { Element parameter = document . createElement ( _STR ) ; parameter . appendChild ( parentElement ) ; parameter . setAttribute ( _STR , spec . getPackageName ( ) ) ; parameter . setAttribute ( _STR , spec . getClassName ( ) ) ; parameter . setAttribute ( _STR , spec . getFieldName ( ) ) ; }
private void readObject ( ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; init ( getMask ( actions ) ) ; }
@ Override public synchronized void parse ( Reader reader , String baseURI ) throws IOException , RDFParseException , RDFHandlerException { if ( reader == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( baseURI == null ) { throw new IllegalArgumentException ( _STR ) ; } InputSource inputSource = new InputSource ( reader ) ; inputSource . setSystemId ( baseURI ) ; parse ( inputSource ) ; }
private String excludeDestinationStatement ( String text ) { int idx = - _NUM ; if ( ( idx = text . indexOf ( _STR ) ) != - _NUM ) { text = text . substring ( _NUM , idx ) ; } return text ; }
static byte [ ] discardNonBase64 ( byte [ ] data ) { byte groomedData [ ] = new byte [ data . length ] ; int bytesCopied = _NUM ; for ( int i = _NUM ; i < data . length ; i ++ ) { if ( isBase64 ( data [ i ] ) ) { groomedData [ bytesCopied ++ ] = data [ i ] ; } } byte packedData [ ] = new byte [ bytesCopied ] ; System . arraycopy ( groomedData , _NUM , packedData , _NUM , bytesCopied ) ; return packedData ; }
protected static final String addEscapes ( String str ) { StringBuilder retval = new StringBuilder ( ) ; char ch ; for ( int i = _NUM ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case _NUM : continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < _NUM || ch > _NUM ) { String s = _STR + Integer . toString ( ch , _NUM ) ; retval . append ( _STR + s . substring ( s . length ( ) - _NUM , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; }
public static void addFile ( String s ) throws IOException { File f = new File ( s ) ; addFile ( f ) ; }
@ SafeVarargs public final void insert ( int rowIndex , T ... newItems ) { insert ( rowIndex , Arrays . asList ( newItems ) ) ; }
@ Deprecated public void put ( Collection < Integer > data ) { for ( Integer value : data ) { final int val = value . intValue ( ) ; min = val < min ? val : min ; max = val > max ? val : max ; } }
public IntBuffer majorVersionBuffer ( ) { int [ ] holder = new int [ _NUM ] ; holder [ _NUM ] = getMajorVersion ( ) ; IntBuffer ib = IntBuffer . wrap ( holder ) ; ib . limit ( _NUM ) ; return ib ; }
public CreateIndexRequest source ( XContentBuilder source ) { return source ( source . bytes ( ) ) ; }
public static byte [ ] createDataToSign ( byte [ ] digest ) { byte [ ] prefix = getDigestInfoPrefix ( digest ) ; byte [ ] digestInfo = new byte [ prefix . length + digest . length ] ; System . arraycopy ( prefix , _NUM , digestInfo , _NUM , prefix . length ) ; System . arraycopy ( digest , _NUM , digestInfo , prefix . length , digest . length ) ; return digestInfo ; }
public HttpRequest ifModifiedSince ( final long value ) { connection . setIfModifiedSince ( value ) ; return this ; }
public static String tmpJournal ( ) { final File file = Code . wrapThrow ( null ) ; file . deleteOnExit ( ) ; return file . getAbsolutePath ( ) ; }
public void push ( final float value ) { int bits = Float . floatToIntBits ( value ) ; if ( bits == _NUM || bits == _NUM || bits == _NUM ) { mv . visitInsn ( Opcodes . FCONST_0 + ( int ) value ) ; } else { mv . visitLdcInsn ( value ) ; } }
public static Object newInstance ( Class < ? > cl , int [ ] dims ) { if ( dims . length == _NUM ) { dims = new int [ ] { _NUM } ; } return Array . newInstance ( cl , dims ) ; }
private static void decodeAnsiX12Segment ( BitSource bits , StringBuilder result ) throws FormatException { int [ ] cValues = new int [ _NUM ] ; do { if ( bits . available ( ) == _NUM ) { return ; } int firstByte = bits . readBits ( _NUM ) ; if ( firstByte == _NUM ) { return ; } parseTwoBytes ( firstByte , bits . readBits ( _NUM ) , cValues ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { int cValue = cValues [ i ] ; if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else { throw FormatException . getFormatInstance ( ) ; } } } while ( bits . available ( ) > _NUM ) ; }
public void playTogether ( Collection < Animator > items ) { if ( items != null && items . size ( ) > _NUM ) { mNeedsSort = _BOOL ; Builder builder = null ; for ( Animator anim : items ) { if ( builder == null ) { builder = play ( anim ) ; } else { builder . with ( anim ) ; } } } }
protected static void printErrorMessage ( Exception e ) { if ( e instanceof AbortException ) { LoggingConfiguration . setVerbose ( Level . VERBOSE ) ; LOG . verbose ( e . getMessage ( ) ) ; } else if ( e instanceof UnspecifiedParameterException ) { LOG . error ( e . getMessage ( ) ) ; } else if ( e instanceof ParameterException ) { LOG . error ( e . getMessage ( ) ) ; } else { LOG . exception ( e ) ; } }
public String requestStatistics ( ) { sb . setLength ( _NUM ) ; makeStringBuffer ( sb ) ; return sb . toString ( ) ; }
private void applyL1Reg ( final double eta_t , Vec x ) { if ( lambda1 > _NUM ) { l1U += eta_t * lambda1 ; for ( int k = _NUM ; k < ws . length ; k ++ ) { final Vec w_k = ws [ k ] ; final double [ ] l1Q_k = l1Q [ k ] ; for ( IndexValue iv : x ) { final int i = iv . getIndex ( ) ; final double z = w_k . get ( i ) ; double newW_i = _NUM ; if ( z > _NUM ) newW_i = Math . max ( _NUM , z - ( l1U + l1Q_k [ i ] ) ) ; else if ( z < _NUM ) newW_i = Math . min ( _NUM , z + ( l1U - l1Q_k [ i ] ) ) ; l1Q_k [ i ] += ( newW_i - z ) ; w_k . set ( i , newW_i ) ; } } } }
@ Override public void keyPressed ( KeyEvent e ) { synchronized ( keyLock ) { keysDown . add ( e . getKeyCode ( ) ) ; } }
public static String slurpURLNoExceptions ( URL u , String encoding ) { try { return slurpURL ( u , encoding ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }
public static MoveParticipant [ ] loadMoveParticipants ( RefactoringStatus status , RefactoringProcessor processor , Object element , MoveArguments arguments , IParticipantDescriptorFilter filter , String [ ] affectedNatures , SharableParticipants shared ) { RefactoringParticipant [ ] participants = fgMoveExtensions . getParticipants ( status , processor , element , arguments , filter , affectedNatures , shared ) ; MoveParticipant [ ] result = new MoveParticipant [ participants . length ] ; System . arraycopy ( participants , _NUM , result , _NUM , participants . length ) ; return result ; }
private long [ ] determinePreferenceVector ( Relation < V > relation , ModifiableDBIDs [ ] neighborIDs , StringBuilder msg ) { if ( strategy . equals ( Strategy . APRIORI ) ) { return determinePreferenceVectorByApriori ( relation , neighborIDs , msg ) ; } else if ( strategy . equals ( Strategy . MAX_INTERSECTION ) ) { return determinePreferenceVectorByMaxIntersection ( neighborIDs , msg ) ; } else { throw new IllegalStateException ( _STR ) ; } }
private void paintForegroundDisabled ( Graphics2D g , int width , int height ) { Shape s = decodeArrowPath ( width , height ) ; g . setPaint ( disabledColor ) ; g . fill ( s ) ; }
public void testFlipBitNegativeInside1 ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int number = _NUM ; byte rBytes [ ] = { - _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . flipBit ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , result . signum ( ) ) ; }
private void onUser ( @ NotNull TLAbsUser absUser ) { User currentUser = null ; User user = null ; if ( absUser instanceof TLUser ) { final TLUser tlUser = ( TLUser ) absUser ; if ( tlUser . isMutualContact ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserContact ( currentUser , tlUser ) ; } else if ( tlUser . isDeleted ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserDelete ( currentUser , tlUser ) ; } else if ( tlUser . isContact ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserRequest ( currentUser , tlUser ) ; } else if ( tlUser . isSelf ( ) || ! tlUser . isBot ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserForeign ( currentUser , tlUser ) ; } else { BotLogger . info ( LOGTAG , _STR ) ; } } if ( ( currentUser == null ) && ( user != null ) ) { databaseManager . addUser ( user ) ; } else if ( user != null ) { databaseManager . updateUser ( user ) ; } }
@ Override public boolean hasNext ( ) { log . log ( Level . FINE , _STR ) ; boolean result = ( nextEvent != null ) ; log . log ( Level . FINE , _STR , result ) ; return result ; }
@ Override public void close ( ) { try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
public static XMPMeta extractXMPMeta ( InputStream is ) { List < Section > sections = parse ( is , _BOOL ) ; if ( sections == null ) { return null ; } for ( Section section : sections ) { if ( hasXMPHeader ( section . data ) ) { int end = getXMPContentEnd ( section . data ) ; byte [ ] buffer = new byte [ end - XMP_HEADER_SIZE ] ; System . arraycopy ( section . data , XMP_HEADER_SIZE , buffer , _NUM , buffer . length ) ; try { XMPMeta result = XMPMetaFactory . parseFromBuffer ( buffer ) ; return result ; } catch ( XMPException e ) { Log . d ( TAG , _STR , e ) ; return null ; } } } return null ; }
private void initialize ( ModelValidator validator , MClient client ) { if ( client == null ) m_globalValidators . add ( validator ) ; m_validators . add ( validator ) ; validator . initialize ( this , client ) ; }
void crossOver ( BayesNetRepresentation other ) { boolean [ ] bits = new boolean [ m_bits . length ] ; for ( int i = _NUM ; i < m_bits . length ; i ++ ) { bits [ i ] = m_bits [ i ] ; } int iCrossOverPoint = m_bits . length ; do { for ( int i = iCrossOverPoint ; i < m_bits . length ; i ++ ) { m_bits [ i ] = bits [ i ] ; } iCrossOverPoint = m_random . nextInt ( m_bits . length ) ; for ( int i = iCrossOverPoint ; i < m_bits . length ; i ++ ) { m_bits [ i ] = other . m_bits [ i ] ; } } while ( hasCycles ( ) ) ; calcGlobalScore ( ) ; }
public void reset ( ) { engineReset ( ) ; state = INITIAL ; }
public Perspective createUserPerspective ( final String name , final boolean show ) { Perspective perspective = model . addPerspective ( name , _BOOL ) ; perspective . store ( context ) ; if ( show ) { showPerspective ( name ) ; } return perspective ; }
public static double phred ( double error ) { return - _NUM * Math . log10 ( error ) ; }
public static String of ( CtClass type ) { StringBuffer sbuf = new StringBuffer ( ) ; toDescriptor ( sbuf , type ) ; return sbuf . toString ( ) ; }
public abstract String encode ( ) ;
@ SafeVarargs public final Token < TokenType > expect ( TokenType ... expected ) throws SimpleParserException { if ( hasType ( expected ) ) return this ; throw new SimpleParserException ( line , column , _STR + Arrays . toString ( expected ) + _STR + toString ( ) ) ; }
public void testUpdate3 ( ) { int newValue1 = - _NUM ; int newValue2 = - _NUM ; String updateQuery = _STR + DatabaseCreator . TEST_TABLE1 + _STR + newValue1 + _STR + newValue2 ; try { int num = statement . executeUpdate ( updateQuery ) ; assertEquals ( _STR , numberOfRecords , num ) ; String selectQuery = _STR + DatabaseCreator . TEST_TABLE1 ; ResultSet result = statement . executeQuery ( selectQuery ) ; while ( result . next ( ) ) { } result . close ( ) ; } catch ( SQLException e ) { fail ( _STR + e . getMessage ( ) ) ; } }
public void testSetNull ( ) throws Exception { PreparedStatement stmt = connection . prepareStatement ( _STR ) ; try { stmt . setInt ( _NUM , _NUM ) ; stmt . setBytes ( _NUM , null ) ; stmt . executeUpdate ( ) ; stmt . setInt ( _NUM , _NUM ) ; stmt . setBinaryStream ( _NUM , null , _NUM ) ; stmt . executeUpdate ( ) ; stmt . setInt ( _NUM , _NUM ) ; stmt . setString ( _NUM , null ) ; stmt . executeUpdate ( ) ; } finally { stmt . close ( ) ; } }
@ Deprecated public boolean isAssignableFrom ( Type from ) { if ( from == null ) { return _BOOL ; } if ( type . equals ( from ) ) { return _BOOL ; } if ( type instanceof Class < ? > ) { return rawType . isAssignableFrom ( $Gson$Types . getRawType ( from ) ) ; } else if ( type instanceof ParameterizedType ) { return isAssignableFrom ( from , ( ParameterizedType ) type , new HashMap < String , Type > ( ) ) ; } else if ( type instanceof GenericArrayType ) { return rawType . isAssignableFrom ( $Gson$Types . getRawType ( from ) ) && isAssignableFrom ( from , ( GenericArrayType ) type ) ; } else { throw buildUnexpectedTypeError ( type , Class . class , ParameterizedType . class , GenericArrayType . class ) ; } }
EgDemandDetails insertPenalty ( final BigDecimal chqBouncePenalty , final Module module ) { EgDemandDetails demandDetail = null ; if ( chqBouncePenalty != null && chqBouncePenalty . compareTo ( BigDecimal . ZERO ) > _NUM ) { final Installment currInstallment = getCurrentInstallment ( module ) ; final EgDemandReasonMaster egDemandReasonMaster = demandGenericDao . getDemandReasonMasterByCode ( DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY , module ) ; if ( egDemandReasonMaster == null ) throw new ApplicationRuntimeException ( _STR ) ; final EgDemandReason egDemandReason = demandGenericDao . getDmdReasonByDmdReasonMsterInstallAndMod ( egDemandReasonMaster , currInstallment , module ) ; if ( egDemandReason == null ) throw new ApplicationRuntimeException ( _STR ) ; demandDetail = EgDemandDetails . fromReasonAndAmounts ( chqBouncePenalty , egDemandReason , BigDecimal . ZERO ) ; } return demandDetail ; }
public SampleInfo ( ByteBuffer bb ) throws IOException { numberOfChannels = bb . getInt ( ) ; sampleRate = bb . getInt ( ) ; coeffMin = bb . getFloat ( ) ; coeffRange = bb . getFloat ( ) ; postEmphasis = bb . getFloat ( ) ; residualFold = bb . getInt ( ) ; }
public void handleMaintenance ( Operation maintOp ) { performPendingRequestMaintenance ( ) ; checkAndScheduleSynchronization ( this . cachedGroupState . membershipUpdateTimeMicros ) ; maintOp . complete ( ) ; }
public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = _BOOL ; }
public < T > T time ( Callable < T > event ) throws Exception { final long startTime = clock . tick ( ) ; try { return event . call ( ) ; } finally { update ( clock . tick ( ) - startTime ) ; } }
public static boolean isPostJDK7 ( String bytecodeVersion ) { return JDK7 . equals ( bytecodeVersion ) || JDK8 . equals ( bytecodeVersion ) ; }
public PutIndexTemplateRequest mapping ( String type , Object ... source ) { mapping ( type , PutMappingRequest . buildFromSimplifiedDef ( type , source ) ) ; return this ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
private InputStream findTemplate ( String path , String template ) { try { File file = new File ( path , template ) ; if ( file . canRead ( ) ) { return new BufferedInputStream ( new FileInputStream ( file . getAbsolutePath ( ) ) ) ; } else { return null ; } } catch ( FileNotFoundException fnfe ) { return null ; } }
@ Override public synchronized void initialize ( ) { if ( ! mRootDirectory . exists ( ) ) { if ( ! mRootDirectory . mkdirs ( ) ) { VolleyLog . e ( _STR , mRootDirectory . getAbsolutePath ( ) ) ; } return ; } File [ ] files = mRootDirectory . listFiles ( ) ; if ( files == null ) { return ; } for ( File file : files ) { BufferedInputStream fis = null ; try { fis = new BufferedInputStream ( new FileInputStream ( file ) ) ; CacheHeader entry = CacheHeader . readHeader ( fis ) ; entry . size = file . length ( ) ; putEntry ( entry . key , entry ) ; } catch ( IOException e ) { if ( file != null ) { file . delete ( ) ; } } finally { try { if ( fis != null ) { fis . close ( ) ; } } catch ( IOException ignored ) { } } } }
public void addListener ( CircularProgressViewListener listener ) { if ( listener != null ) listeners . add ( listener ) ; }
public SiteStatusCheckThreadImpl ( ) { super ( ) ; urlCheckers = new HashMap ( ) ; }
@ Override public void render ( final int type , final Graphics2D g2 , final float scaling , final boolean isFormGlyph ) { glyphDisplay . setScalingValues ( _NUM , _NUM , scaling ) ; final float OLDglyphScale = glyphScale ; if ( isFormGlyph ) { glyphScale = scaling * glyphScale ; } AffineTransform aff = null ; if ( glyphScale != _NUM ) { aff = g2 . getTransform ( ) ; g2 . scale ( glyphScale , glyphScale ) ; } glyphDisplay . setG2 ( g2 ) ; glyphDisplay . paint ( null , null , null ) ; if ( aff != null ) { g2 . setTransform ( aff ) ; } glyphScale = OLDglyphScale ; }
public void removeVetoableChangeListener ( String propertyName , VetoableChangeListener in_vcl ) { beanContextChildSupport . removeVetoableChangeListener ( propertyName , in_vcl ) ; }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
public List < String > reset ( List < String > replace ) { ArrayList < String > copy = new ArrayList < String > ( retainedVars . size ( ) ) ; copy . addAll ( retainedVars ) ; retainedVars . clear ( ) ; if ( replace != null ) { retainedVars . addAll ( replace ) ; } return copy ; }
protected void release ( ) { AppContext tempAppContext = null ; synchronized ( grabReleaseSynchronizer ) { if ( usageCount > _NUM ) { -- usageCount ; } else { synchronized ( threadGroupSynchronizer ) { tempAppContext = resetAppContext ( ) ; } } } if ( tempAppContext != null ) { try { tempAppContext . dispose ( ) ; } catch ( IllegalThreadStateException e ) { } } }
public synchronized void deleteAllTables ( ) { List < String > tableNames = new ArrayList < String > ( tableLookup . keySet ( ) ) ; for ( String s : tableNames ) { deleteTable ( s ) ; } }
public PetCategory findOne ( String id ) { log . debug ( _STR , id ) ; PetCategory petCategory = petCategoryRepository . findOne ( UUID . fromString ( id ) ) ; return petCategory ; }
private void markRemovedDefaultSessionToken ( String site , String token ) { if ( removedDefaultTokens == null ) removedDefaultTokens = new HashMap < > ( _NUM ) ; HashSet < String > removedSet = removedDefaultTokens . get ( site ) ; if ( removedSet == null ) { removedSet = new HashSet < > ( _NUM ) ; removedDefaultTokens . put ( site , removedSet ) ; } removedSet . add ( token ) ; }
private Map < URI , Map < URI , Map < String , List < URI > > > > createDeviceToCGMapFromDescriptors ( List < VolumeDescriptor > addDescriptors , List < VolumeDescriptor > removeDescriptors ) { Map < URI , Map < URI , Map < String , List < URI > > > > deviceToCGMap = new HashMap < URI , Map < URI , Map < String , List < URI > > > > ( ) ; for ( VolumeDescriptor descr : addDescriptors ) { URI deviceURI = descr . getDeviceURI ( ) ; Map < URI , Map < String , List < URI > > > volumesToUpdateByCG = deviceToCGMap . get ( deviceURI ) ; if ( volumesToUpdateByCG == null ) { volumesToUpdateByCG = new HashMap < URI , Map < String , List < URI > > > ( ) ; deviceToCGMap . put ( deviceURI , volumesToUpdateByCG ) ; } URI consistencyGroupURI = descr . getConsistencyGroupURI ( ) ; Map < String , List < URI > > volumesToUpdate = volumesToUpdateByCG . get ( consistencyGroupURI ) ; if ( volumesToUpdate == null ) { volumesToUpdate = new HashMap < String , List < URI > > ( ) ; volumesToUpdateByCG . put ( consistencyGroupURI , volumesToUpdate ) ; } List < URI > volumesToAdd = volumesToUpdate . get ( ADD_VOLUMES_TO_CG_KEY ) ; if ( volumesToAdd == null ) { volumesToAdd = new ArrayList < URI > ( ) ; volumesToUpdate . put ( ADD_VOLUMES_TO_CG_KEY , volumesToAdd ) ; } volumesToAdd . add ( descr . getVolumeURI ( ) ) ; } for ( VolumeDescriptor descr : removeDescriptors ) { URI deviceURI = descr . getDeviceURI ( ) ; Map < URI , Map < String , List < URI > > > volumesToUpdateByCG = deviceToCGMap . get ( deviceURI ) ; if ( volumesToUpdateByCG == null ) { volumesToUpdateByCG = new HashMap < URI , Map < String , List < URI > > > ( ) ; deviceToCGMap . put ( deviceURI , volumesToUpdateByCG ) ; } URI consistencyGroupURI = descr . getConsistencyGroupURI ( ) ; Map < String , List < URI > > volumesToUpdate = volumesToUpdateByCG . get ( consistencyGroupURI ) ; if ( volumesToUpdate == null ) { volumesToUpdate = new HashMap < String , List < URI > > ( ) ; volumesToUpdateByCG . put ( consistencyGroupURI , volumesToUpdate ) ; } List < URI > volumesToRemove = volumesToUpdate . get ( REMOVE_VOLUMES_FROM_CG_KEY ) ; if ( volumesToRemove == null ) { volumesToRemove = new ArrayList < URI > ( ) ; volumesToUpdate . put ( REMOVE_VOLUMES_FROM_CG_KEY , volumesToRemove ) ; } volumesToRemove . add ( descr . getVolumeURI ( ) ) ; } return deviceToCGMap ; }
public Exchange ( final Request request , final Origin origin ) { this . currentRequest = request ; this . origin = origin ; this . timestamp = System . currentTimeMillis ( ) ; }
public static float computeDiscardAlpha ( float amount , float range ) { if ( Math . abs ( amount ) < _NUM ) return _NUM ; float t = amount / range ; t = MathUtils . clamp ( t , - _NUM , _NUM ) ; return _NUM - Math . abs ( t ) ; }
public static final FileTime unixTimeToFileTime ( long utime ) { return FileTime . from ( utime , TimeUnit . SECONDS ) ; }
public static CipherTextIvMac encrypt ( String plaintext , SecretKeys secretKeys , String encoding ) throws UnsupportedEncodingException , GeneralSecurityException { return encrypt ( plaintext . getBytes ( encoding ) , secretKeys ) ; }
public void removeAddress ( AddressEntity address ) { addresses . remove ( address ) ; }
@ Override protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { int widthSpecMode = MeasureSpec . getMode ( widthMeasureSpec ) ; int heightSpecMode = MeasureSpec . getMode ( heightMeasureSpec ) ; int parentWidth = MeasureSpec . getSize ( widthMeasureSpec ) ; int parentHeight = MeasureSpec . getSize ( heightMeasureSpec ) ; boolean resizeWidth = widthSpecMode != MeasureSpec . EXACTLY ; boolean resizeHeight = heightSpecMode != MeasureSpec . EXACTLY ; int width = parentWidth ; int height = parentHeight ; if ( sWidth > _NUM && sHeight > _NUM ) { if ( resizeWidth && resizeHeight ) { width = sWidth ( ) ; height = sHeight ( ) ; } else if ( resizeHeight ) { height = ( int ) ( ( ( ( double ) sHeight ( ) / ( double ) sWidth ( ) ) * width ) ) ; } else if ( resizeWidth ) { width = ( int ) ( ( ( ( double ) sWidth ( ) / ( double ) sHeight ( ) ) * height ) ) ; } } width = Math . max ( width , getSuggestedMinimumWidth ( ) ) ; height = Math . max ( height , getSuggestedMinimumHeight ( ) ) ; setMeasuredDimension ( width , height ) ; }
protected void fireEndElem ( String name ) throws org . xml . sax . SAXException { if ( m_tracer != null ) { flushMyWriter ( ) ; m_tracer . fireGenerateEvent ( SerializerTrace . EVENTTYPE_ENDELEMENT , name , ( Attributes ) null ) ; } }
private boolean verifyMigrateFromProductHome ( String migrateFromProductHome ) throws InstallException { if ( migrateFromProductHome == null || migrateFromProductHome . length ( ) == _NUM ) { Debug . log ( _STR + _STR ) ; Console . println ( LocalizedMessage . get ( LOC_HR_MSG_MIGRATE_NONE_FOUND ) ) ; return _BOOL ; } if ( ! migrateFromProductHome . equals ( ConfigUtil . getHomePath ( ) ) ) { Debug . log ( _STR + _STR + migrateFromProductHome + _STR + ConfigUtil . getHomePath ( ) ) ; String translateFile = migrateFromProductHome + MigrateFromInstFinderStore . getRelativeTranslateFile ( ) ; if ( ! FileUtils . isFileValid ( translateFile ) ) { Console . println ( LocalizedMessage . get ( LOC_HR_MSG_MIGRATE_NONE_FOUND ) ) ; return _BOOL ; } } else { Debug . log ( _STR + _STR ) ; throw new InstallException ( LocalizedMessage . get ( LOC_DR_ERR_PRODUCT_ALREADY_MIGRATED ) ) ; } return _BOOL ; }
public Spanned [ ] history ( ) { int i = _NUM ; Spanned [ ] array = new Spanned [ history . size ( ) ] ; for ( String s : history ) { if ( s != null ) { array [ i ] = Html . fromHtml ( s ) ; i ++ ; } } return array ; }
public static String format ( String message , Object [ ] arguments ) { return MessageFormat . format ( message , arguments ) ; }
private void insertProsodySettings ( Utterance utterance , Element element ) { Element prosody = ( Element ) DomUtils . getAncestor ( element , MaryXML . PROSODY ) ; if ( prosody == null ) { return ; } Element voice = ( Element ) DomUtils . getAncestor ( element , MaryXML . VOICE ) ; if ( voice != null && DomUtils . isAncestor ( prosody , voice ) ) { return ; } Element paragraph = ( Element ) DomUtils . getAncestor ( element , MaryXML . PARAGRAPH ) ; if ( paragraph != null && DomUtils . isAncestor ( prosody , paragraph ) ) { return ; } for ( String att : PROSODY_ATTRIBUTES ) { String val = prosody . getAttribute ( att ) ; if ( ! val . equals ( _STR ) ) { utterance . setString ( att , val ) ; } } }
public static boolean createFolder ( @ SuppressWarnings ( _STR ) Context mContext , String path , String folderName ) { File SDCardRoot = new File ( path , folderName ) ; if ( ! SDCardRoot . exists ( ) ) { return SDCardRoot . mkdir ( ) ; } return _BOOL ; }
private void translateMatrixAfterRotate ( int axis , float trans , float prevImageSize , float imageSize , int prevViewSize , int viewSize , int drawableSize ) { if ( imageSize < viewSize ) { m [ axis ] = ( viewSize - ( drawableSize * m [ Matrix . MSCALE_X ] ) ) * _NUM ; } else if ( trans > _NUM ) { m [ axis ] = - ( ( imageSize - viewSize ) * _NUM ) ; } else { float percentage = ( Math . abs ( trans ) + ( _NUM * prevViewSize ) ) / prevImageSize ; m [ axis ] = - ( ( percentage * imageSize ) - ( viewSize * _NUM ) ) ; } }
private CharSequence createTickerText ( String title , String body ) { SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder ( ) ; spannableStringBuilder . append ( title ) ; spannableStringBuilder . append ( _STR ) ; spannableStringBuilder . append ( body ) ; spannableStringBuilder . setSpan ( new StyleSpan ( android . graphics . Typeface . BOLD ) , _NUM , title . length ( ) , Spannable . SPAN_INCLUSIVE_INCLUSIVE ) ; return spannableStringBuilder ; }
private void addProtocolIfNotExists ( Set < String > protocols , String protocolType ) { if ( ! protocols . contains ( protocolType ) ) { protocols . add ( protocolType ) ; } }
public String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( _STR ) ; result . append ( klazz . getName ( ) ) ; result . append ( _STR ) ; for ( int i = _NUM ; i < elements . length ; ++ i ) { if ( i != _NUM ) { result . append ( _STR ) ; } result . append ( elements [ i ] ) ; } result . append ( _STR ) ; return result . toString ( ) ; }
void add ( Object key ) { table . put ( key , key ) ; }
public Configuration loadConfigFromResource ( Resource resource ) { PropertiesConfiguration result = new PropertiesConfiguration ( ) ; try { result . load ( resource . getInputStream ( ) ) ; return result ; } catch ( ConfigurationException | IOException e ) { LOG . error ( CONFIGURATION_LOAD_ERROR . format ( resource . getFilename ( ) ) , e ) ; throw new SystemConfigException ( CONFIGURATION_LOAD_ERROR . format ( resource . getFilename ( ) ) , e ) ; } }
public final void log ( String filename , int lineNumber , String method , String tag , int level , String message ) { final LogMessage lm = new LogMessage ( LogMessage . LOGMSG_TYPE_LOG , nextSequenceNumber . getAndIncrement ( ) ) ; lm . addInt16 ( level , LogMessage . PART_KEY_LEVEL ) ; if ( filename != null ) { lm . addString ( filename , LogMessage . PART_KEY_FILENAME ) ; if ( lineNumber != _NUM ) lm . addInt32 ( lineNumber , LogMessage . PART_KEY_LINENUMBER ) ; } if ( method != null ) lm . addString ( method , LogMessage . PART_KEY_FUNCTIONNAME ) ; if ( tag != null && ! tag . isEmpty ( ) ) lm . addString ( tag , LogMessage . PART_KEY_TAG ) ; lm . addString ( message , LogMessage . PART_KEY_MESSAGE ) ; log ( lm ) ; }
protected Size2D drawVertical ( Graphics2D g2 , Rectangle2D chartArea ) { double startX ; double topSpace = _NUM ; double bottomSpace = _NUM ; double leftSpace = _NUM ; double rightSpace = _NUM ; double w = getWidth ( ) ; double h = getHeight ( ) ; RectangleInsets padding = getPadding ( ) ; if ( padding != null ) { topSpace = padding . calculateTopOutset ( h ) ; bottomSpace = padding . calculateBottomOutset ( h ) ; leftSpace = padding . calculateLeftOutset ( w ) ; rightSpace = padding . calculateRightOutset ( w ) ; } if ( getPosition ( ) == RectangleEdge . LEFT ) { startX = chartArea . getX ( ) + leftSpace ; } else { startX = chartArea . getMaxX ( ) - rightSpace - w ; } VerticalAlignment alignment = getVerticalAlignment ( ) ; double startY = _NUM ; if ( alignment == VerticalAlignment . CENTER ) { startY = chartArea . getMinY ( ) + topSpace + chartArea . getHeight ( ) / _NUM - h / _NUM ; } else if ( alignment == VerticalAlignment . TOP ) { startY = chartArea . getMinY ( ) + topSpace ; } else if ( alignment == VerticalAlignment . BOTTOM ) { startY = chartArea . getMaxY ( ) - bottomSpace - h ; } g2 . drawImage ( this . image , ( int ) startX , ( int ) startY , ( int ) w , ( int ) h , null ) ; return new Size2D ( chartArea . getWidth ( ) + leftSpace + rightSpace , h + topSpace + bottomSpace ) ; }
private static final PublicKey constructPublicKey ( byte [ ] encodedKey , String encodedKeyAlgorithm ) throws InvalidKeyException , NoSuchAlgorithmException { PublicKey key = null ; try { KeyFactory keyFactory = KeyFactory . getInstance ( encodedKeyAlgorithm , SunJCE . getInstance ( ) ) ; X509EncodedKeySpec keySpec = new X509EncodedKeySpec ( encodedKey ) ; key = keyFactory . generatePublic ( keySpec ) ; } catch ( NoSuchAlgorithmException nsae ) { try { KeyFactory keyFactory = KeyFactory . getInstance ( encodedKeyAlgorithm ) ; X509EncodedKeySpec keySpec = new X509EncodedKeySpec ( encodedKey ) ; key = keyFactory . generatePublic ( keySpec ) ; } catch ( NoSuchAlgorithmException nsae2 ) { throw new NoSuchAlgorithmException ( _STR + _STR + encodedKeyAlgorithm + _STR ) ; } catch ( InvalidKeySpecException ikse2 ) { InvalidKeyException ike = new InvalidKeyException ( _STR ) ; ike . initCause ( ikse2 ) ; throw ike ; } } catch ( InvalidKeySpecException ikse ) { InvalidKeyException ike = new InvalidKeyException ( _STR ) ; ike . initCause ( ikse ) ; throw ike ; } return key ; }
public int numHits ( String query ) throws ParseException , IOException { Integer count ; if ( ( count = ( Integer ) m_hitCountCache . get ( query ) ) == null ) { Hits hits = search ( query ) ; count = new Integer ( hits . length ( ) ) ; m_hitCountCache . put ( query , count ) ; } return count . intValue ( ) ; }
public static boolean expressionIsTrue ( double leftSide , Operator operator , double rightSide ) { final String expression = leftSide + operator . getMathematicalOperator ( ) + rightSide ; return expressionIsTrue ( expression ) ; }
public MockResponse addHeader ( String name , Object value ) { return addHeader ( name + _STR + String . valueOf ( value ) ) ; }
@ Override public CompletableFuture < Optional < T > > max ( final Comparator < ? super T > comparator ) { return CompletableFuture . supplyAsync ( null , exec ) ; }
final public void println ( char v ) { Writer out = this . out ; if ( out == null ) return ; try { out . write ( v ) ; out . write ( _newline , _NUM , _newline . length ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
public void test_write_correctRejection_emptyRecord ( ) { final IRawStore store = getStore ( ) ; try { try { store . write ( ByteBuffer . wrap ( new byte [ ] { } ) ) ; fail ( _STR + IllegalArgumentException . class ) ; } catch ( IllegalArgumentException ex ) { if ( log . isInfoEnabled ( ) ) log . info ( _STR + ex ) ; } try { final ByteBuffer buf = ByteBuffer . wrap ( new byte [ _NUM ] ) ; buf . position ( buf . limit ( ) ) ; store . write ( buf ) ; fail ( _STR + IllegalArgumentException . class ) ; } catch ( IllegalArgumentException ex ) { if ( log . isInfoEnabled ( ) ) log . info ( _STR + ex ) ; } } finally { store . destroy ( ) ; } }
public synchronized void commit ( ) { synchronized ( mutex ) { Map < Column , Set < Interval > > temp = workingIntervals ; workingIntervals = Collections . synchronizedMap ( new LinkedHashMap < > ( ) ) ; availableIntervalsRef . set ( Collections . unmodifiableMap ( new LinkedHashMap < > ( temp ) ) ) ; super . columns = new LinkedHashSet < > ( temp . keySet ( ) ) ; } }
public void testUpdate7 ( ) { String updateQuery = _STR + DatabaseCreator . TEST_TABLE1 + _STR + DatabaseCreator . TEST_TABLE2 + _STR ; try { int num = statement . executeUpdate ( updateQuery ) ; int expectedUpdated = _NUM ; assertEquals ( _STR , expectedUpdated , num ) ; String selectQuery = _STR + DatabaseCreator . TEST_TABLE1 ; ResultSet result = statement . executeQuery ( selectQuery ) ; while ( result . next ( ) ) { } result . close ( ) ; } catch ( SQLException e ) { fail ( _STR + e . getMessage ( ) ) ; } }
public static String extractIndentString ( String line , int tabWidth , int indentWidth ) { if ( tabWidth < _NUM || indentWidth < _NUM || line == null ) { throw new IllegalArgumentException ( ) ; } int size = line . length ( ) ; int end = _NUM ; int spaceEquivs = _NUM ; int characters = _NUM ; for ( int i = _NUM ; i < size ; i ++ ) { char c = line . charAt ( i ) ; if ( c == _STR ) { spaceEquivs = calculateSpaceEquivalents ( tabWidth , spaceEquivs ) ; characters ++ ; } else if ( isIndentChar ( c ) ) { spaceEquivs ++ ; characters ++ ; } else { break ; } if ( spaceEquivs >= indentWidth ) { end += characters ; characters = _NUM ; if ( indentWidth == _NUM ) { spaceEquivs = _NUM ; } else { spaceEquivs = spaceEquivs % indentWidth ; } } } if ( end == _NUM ) { return Util . EMPTY_STRING ; } else if ( end == size ) { return line ; } else { return line . substring ( _NUM , end ) ; } }
private static String doGetFullPath ( String filename , boolean includeSeparator ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < _NUM ) { return null ; } if ( prefix >= filename . length ( ) ) { if ( includeSeparator ) { return getPrefix ( filename ) ; } else { return filename ; } } int index = indexOfLastSeparator ( filename ) ; if ( index < _NUM ) { return filename . substring ( _NUM , prefix ) ; } int end = index + ( includeSeparator ? _NUM : _NUM ) ; if ( end == _NUM ) { end ++ ; } return filename . substring ( _NUM , end ) ; }
private void preInsert ( MkMaxEntry q , MkMaxEntry nodeEntry , KNNHeap knns_q ) { if ( LOG . isDebugging ( ) ) { LOG . debugFine ( _STR + q + _STR + nodeEntry + _STR ) ; } double knnDist_q = knns_q . getKNNDistance ( ) ; MkMaxTreeNode < O > node = getNode ( nodeEntry ) ; double knnDist_node = _NUM ; if ( node . isLeaf ( ) ) { for ( int i = _NUM ; i < node . getNumEntries ( ) ; i ++ ) { MkMaxEntry p = node . getEntry ( i ) ; double dist_pq = distance ( p . getRoutingObjectID ( ) , q . getRoutingObjectID ( ) ) ; if ( dist_pq <= knnDist_q ) { knns_q . insert ( dist_pq , p . getRoutingObjectID ( ) ) ; if ( knns_q . size ( ) >= getKmax ( ) ) { knnDist_q = knns_q . getKNNDistance ( ) ; q . setKnnDistance ( knnDist_q ) ; } } if ( dist_pq <= p . getKnnDistance ( ) ) { KNNList knns_p = knnq . getKNNForDBID ( p . getRoutingObjectID ( ) , getKmax ( ) - _NUM ) ; if ( knns_p . size ( ) + _NUM < getKmax ( ) ) { p . setKnnDistance ( Double . NaN ) ; } else { double knnDist_p = Math . max ( dist_pq , knns_p . getKNNDistance ( ) ) ; p . setKnnDistance ( knnDist_p ) ; } } knnDist_node = Math . max ( knnDist_node , p . getKnnDistance ( ) ) ; } } else { List < DoubleIntPair > entries = getSortedEntries ( node , q . getRoutingObjectID ( ) ) ; for ( DoubleIntPair distEntry : entries ) { MkMaxEntry dirEntry = node . getEntry ( distEntry . second ) ; double entry_knnDist = dirEntry . getKnnDistance ( ) ; if ( distEntry . second < entry_knnDist || distEntry . second < knnDist_q ) { preInsert ( q , dirEntry , knns_q ) ; knnDist_q = knns_q . getKNNDistance ( ) ; } knnDist_node = Math . max ( knnDist_node , dirEntry . getKnnDistance ( ) ) ; } } if ( LOG . isDebugging ( ) ) { LOG . debugFine ( nodeEntry + _STR + knnDist_node ) ; } nodeEntry . setKnnDistance ( knnDist_node ) ; }
private static boolean addIfMatches ( List < String > container , String statusLine , char x , char y ) { if ( matches ( statusLine , x , y ) ) { final String filename = statusLine . substring ( _NUM ) ; if ( ! container . contains ( filename ) ) { container . add ( filename ) ; } return _BOOL ; } return _BOOL ; }
public void testDivideRoundHalfDownNeg2 ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = _NUM ; String c = _STR ; int resScale = - _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_HALF_DOWN ) ; assertEquals ( _STR , c , result . toString ( ) ) ; assertEquals ( _STR , resScale , result . scale ( ) ) ; }
public static String encodeFromString ( String plain , String charset ) throws CoderException , UnsupportedEncodingException { return encode ( plain . getBytes ( charset ) ) ; }
public void slide ( SLIDE slide ) { if ( slide == SLIDE . UP ) { if ( ! isPanelShown ( ) ) { int position = _NUM ; if ( items != null ) { position = items . size ( ) / _NUM ; } slideUp ( position ) ; } } else { hidePanelPickerUI ( ) ; } }
public DrawerBuilder addStickyDrawerItems ( @ NonNull IDrawerItem ... stickyDrawerItems ) { if ( this . mStickyDrawerItems == null ) { this . mStickyDrawerItems = new ArrayList < > ( ) ; } Collections . addAll ( this . mStickyDrawerItems , IdDistributor . checkIds ( stickyDrawerItems ) ) ; return this ; }
public boolean isDebuggingFinest ( ) { return logger . isLoggable ( Level . FINEST ) ; }
private static void sort1 ( int [ ] x , int off , int len ) { if ( len < _NUM ) { for ( int i = off ; i < len + off ; i ++ ) for ( int j = i ; j > off && x [ j - _NUM ] > x [ j ] ; j -- ) swap ( x , j , j - _NUM ) ; return ; } int m = off + ( len > > _NUM ) ; if ( len > _NUM ) { int l = off ; int n = off + len - _NUM ; if ( len > _NUM ) { int s = len / _NUM ; l = med3 ( x , l , l + s , l + _NUM * s ) ; m = med3 ( x , m - s , m , m + s ) ; n = med3 ( x , n - _NUM * s , n - s , n ) ; } m = med3 ( x , l , m , n ) ; } int v = x [ m ] ; int a = off , b = a , c = off + len - _NUM , d = c ; while ( _BOOL ) { while ( b <= c && x [ b ] <= v ) { if ( x [ b ] == v ) swap ( x , a ++ , b ) ; b ++ ; } while ( c >= b && x [ c ] >= v ) { if ( x [ c ] == v ) swap ( x , c , d -- ) ; c -- ; } if ( b > c ) break ; swap ( x , b ++ , c -- ) ; } int s , n = off + len ; s = Math . min ( a - off , b - a ) ; vecswap ( x , off , b - s , s ) ; s = Math . min ( d - c , n - d - _NUM ) ; vecswap ( x , b , n - s , s ) ; if ( ( s = b - a ) > _NUM ) sort1 ( x , off , s ) ; if ( ( s = d - c ) > _NUM ) sort1 ( x , n - s , s ) ; }
public void reset ( ) { ns . removeAllElements ( ) ; ks . setLength ( _NUM ) ; cur = tt . root ; run ( ) ; }
@ LayoutlibDelegate static float sin ( float angle ) { return ( float ) Math . sin ( angle ) ; }
public static void renderFlattenedAnnotation ( final PdfObject form , final DynamicVectorRenderer current , final int pageNumber , final int rotation ) { final BufferedImage image = AnnotationFactory . getIcon ( form ) ; if ( image != null ) { final GraphicsState gs = new GraphicsState ( ) ; final int iconHeight = image . getHeight ( ) ; final int iconWidth = image . getWidth ( ) ; final float [ ] rect = form . getFloatArray ( PdfDictionary . Rect ) ; if ( form . getParameterConstant ( PdfDictionary . Subtype ) == PdfDictionary . Text ) { rect [ _NUM ] = rect [ _NUM ] + iconWidth ; rect [ _NUM ] = rect [ _NUM ] - iconHeight ; form . setFloatArray ( PdfDictionary . Rect , rect ) ; } switch ( rotation % _NUM ) { case _NUM : gs . CTM = new float [ ] [ ] { { iconWidth , _NUM , _NUM } , { _NUM , iconHeight , _NUM } , { _NUM , _NUM , _NUM } } ; gs . x = rect [ _NUM ] ; gs . y = rect [ _NUM ] - iconHeight ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] - iconHeight ; break ; case _NUM : gs . CTM = new float [ ] [ ] { { _NUM , iconWidth , _NUM } , { - iconHeight , _NUM , _NUM } , { _NUM , _NUM , _NUM } } ; gs . x = rect [ _NUM ] + iconHeight ; gs . y = rect [ _NUM ] ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] + iconHeight ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] ; break ; case _NUM : gs . CTM = new float [ ] [ ] { { - iconWidth , _NUM , _NUM } , { _NUM , - iconHeight , _NUM } , { _NUM , _NUM , _NUM } } ; gs . x = rect [ _NUM ] ; gs . y = rect [ _NUM ] + iconHeight ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] + iconHeight ; break ; case _NUM : gs . CTM = new float [ ] [ ] { { _NUM , - iconWidth , _NUM } , { iconHeight , _NUM , _NUM } , { _NUM , _NUM , _NUM } } ; gs . x = rect [ _NUM ] - iconHeight ; gs . y = rect [ _NUM ] ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] - iconHeight ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] ; break ; } if ( form . getParameterConstant ( PdfDictionary . Subtype ) == PdfDictionary . Highlight ) { current . setGraphicsState ( GraphicsState . STROKE , gs . getAlpha ( GraphicsState . STROKE ) , PdfDictionary . Darken ) ; current . setGraphicsState ( GraphicsState . FILL , gs . getAlpha ( GraphicsState . FILL ) , PdfDictionary . Darken ) ; } current . drawImage ( pageNumber , image , gs , _BOOL , form . getObjectRefAsString ( ) , - _NUM ) ; if ( form . getParameterConstant ( PdfDictionary . Subtype ) == PdfDictionary . Highlight ) { current . setGraphicsState ( GraphicsState . STROKE , gs . getAlpha ( GraphicsState . STROKE ) , PdfDictionary . Normal ) ; current . setGraphicsState ( GraphicsState . FILL , gs . getAlpha ( GraphicsState . FILL ) , PdfDictionary . Normal ) ; } } }
public byte [ ] extractData ( byte [ ] stegoData , String stegoFileName , byte [ ] origSigData ) throws OpenStegoException { return null ; }
public static String makeRelatedSessionID ( String encryptedID , SessionID prototype ) throws SessionException { prototype . parseSessionString ( ) ; return makeSessionID ( encryptedID , prototype . getExtension ( ) , prototype . tail ) ; }
public static GeneralPath cardinalSpline ( float pts [ ] , int start , int npoints , float slack , boolean closed ) { GeneralPath path = new GeneralPath ( ) ; path . moveTo ( pts [ start ] , pts [ start + _NUM ] ) ; return cardinalSpline ( path , pts , start , npoints , slack , closed , _NUM , _NUM ) ; }
public static Automaton determinize ( Automaton a , int maxDeterminizedStates ) { if ( a . isDeterministic ( ) ) { return a ; } if ( a . getNumStates ( ) <= _NUM ) { return a ; } Automaton . Builder b = new Automaton . Builder ( ) ; SortedIntSet . FrozenIntSet initialset = new SortedIntSet . FrozenIntSet ( _NUM , _NUM ) ; b . createState ( ) ; LinkedList < SortedIntSet . FrozenIntSet > worklist = new LinkedList < > ( ) ; Map < SortedIntSet . FrozenIntSet , Integer > newstate = new HashMap < > ( ) ; worklist . add ( initialset ) ; b . setAccept ( _NUM , a . isAccept ( _NUM ) ) ; newstate . put ( initialset , _NUM ) ; final PointTransitionSet points = new PointTransitionSet ( ) ; final SortedIntSet statesSet = new SortedIntSet ( _NUM ) ; Transition t = new Transition ( ) ; while ( worklist . size ( ) > _NUM ) { SortedIntSet . FrozenIntSet s = worklist . removeFirst ( ) ; for ( int i = _NUM ; i < s . values . length ; i ++ ) { final int s0 = s . values [ i ] ; int numTransitions = a . getNumTransitions ( s0 ) ; a . initTransition ( s0 , t ) ; for ( int j = _NUM ; j < numTransitions ; j ++ ) { a . getNextTransition ( t ) ; points . add ( t ) ; } } if ( points . count == _NUM ) { continue ; } points . sort ( ) ; int lastPoint = - _NUM ; int accCount = _NUM ; final int r = s . state ; for ( int i = _NUM ; i < points . count ; i ++ ) { final int point = points . points [ i ] . point ; if ( statesSet . upto > _NUM ) { assert lastPoint != - _NUM ; statesSet . computeHash ( ) ; Integer q = newstate . get ( statesSet ) ; if ( q == null ) { q = b . createState ( ) ; if ( q >= maxDeterminizedStates ) { throw new TooComplexToDeterminizeException ( a , maxDeterminizedStates ) ; } final SortedIntSet . FrozenIntSet p = statesSet . freeze ( q ) ; worklist . add ( p ) ; b . setAccept ( q , accCount > _NUM ) ; newstate . put ( p , q ) ; } else { assert ( accCount > _NUM ? _BOOL : _BOOL ) == b . isAccept ( q ) : _STR + accCount + _STR + b . isAccept ( q ) + _STR + statesSet ; } b . addTransition ( r , q , lastPoint , point - _NUM ) ; } int [ ] transitions = points . points [ i ] . ends . transitions ; int limit = points . points [ i ] . ends . next ; for ( int j = _NUM ; j < limit ; j += _NUM ) { int dest = transitions [ j ] ; statesSet . decr ( dest ) ; accCount -= a . isAccept ( dest ) ? _NUM : _NUM ; } points . points [ i ] . ends . next = _NUM ; transitions = points . points [ i ] . starts . transitions ; limit = points . points [ i ] . starts . next ; for ( int j = _NUM ; j < limit ; j += _NUM ) { int dest = transitions [ j ] ; statesSet . incr ( dest ) ; accCount += a . isAccept ( dest ) ? _NUM : _NUM ; } lastPoint = point ; points . points [ i ] . starts . next = _NUM ; } points . reset ( ) ; assert statesSet . upto == _NUM : _STR + statesSet . upto ; } Automaton result = b . finish ( ) ; assert result . isDeterministic ( ) ; return result ; }
public boolean matches ( String seq ) { return queue . regionMatches ( _BOOL , pos , seq , _NUM , seq . length ( ) ) ; }
private boolean findRoot ( final ODEStateInterpolator interpolator , final double ta , final double ga , final double tb , final double gb ) { check ( ga == _NUM || gb == _NUM || ( ga > _NUM && gb < _NUM ) || ( ga < _NUM && gb > _NUM ) ) ; final UnivariateFunction f = null ; double beforeRootT = Double . NaN , beforeRootG = Double . NaN ; double afterRootT = ta , afterRootG = _NUM ; if ( ta == tb ) { beforeRootT = ta ; beforeRootG = ga ; afterRootT = shiftedBy ( beforeRootT , convergence ) ; afterRootG = f . value ( afterRootT ) ; } else if ( ga != _NUM && gb == _NUM ) { beforeRootT = tb ; beforeRootG = gb ; afterRootT = shiftedBy ( beforeRootT , convergence ) ; afterRootG = f . value ( afterRootT ) ; } else if ( ga != _NUM ) { final double newGa = f . value ( ta ) ; if ( ga > _NUM != newGa > _NUM ) { beforeRootT = ta ; beforeRootG = newGa ; afterRootT = minTime ( shiftedBy ( beforeRootT , convergence ) , tb ) ; afterRootG = f . value ( afterRootT ) ; } } double loopT = ta , loopG = ga ; while ( ( afterRootG == _NUM || afterRootG > _NUM == g0Positive ) && strictlyAfter ( afterRootT , tb ) ) { if ( loopG == _NUM ) { beforeRootT = loopT ; beforeRootG = loopG ; afterRootT = minTime ( shiftedBy ( beforeRootT , convergence ) , tb ) ; afterRootG = f . value ( afterRootT ) ; } else { if ( forward ) { final Interval interval = solver . solveInterval ( maxIterationCount , f , loopT , tb ) ; beforeRootT = interval . getLeftAbscissa ( ) ; beforeRootG = interval . getLeftValue ( ) ; afterRootT = interval . getRightAbscissa ( ) ; afterRootG = interval . getRightValue ( ) ; } else { final Interval interval = solver . solveInterval ( maxIterationCount , f , tb , loopT ) ; beforeRootT = interval . getRightAbscissa ( ) ; beforeRootG = interval . getRightValue ( ) ; afterRootT = interval . getLeftAbscissa ( ) ; afterRootG = interval . getLeftValue ( ) ; } } if ( beforeRootT == afterRootT ) { afterRootT = nextAfter ( afterRootT ) ; afterRootG = f . value ( afterRootT ) ; } check ( ( forward && afterRootT > beforeRootT ) || ( ! forward && afterRootT < beforeRootT ) ) ; loopT = afterRootT ; loopG = afterRootG ; } if ( afterRootG == _NUM || afterRootG > _NUM == g0Positive ) { return _BOOL ; } else { check ( ! Double . isNaN ( beforeRootT ) && ! Double . isNaN ( beforeRootG ) ) ; increasing = ! g0Positive ; pendingEventTime = beforeRootT ; stopTime = beforeRootG == _NUM ? beforeRootT : afterRootT ; pendingEvent = _BOOL ; afterEvent = afterRootT ; afterG = afterRootG ; check ( afterG > _NUM == increasing ) ; check ( increasing == gb >= ga ) ; return _BOOL ; } }
public static int compare ( Comparable c1 , Comparable c2 , boolean nullGreater ) { if ( c1 == c2 ) { return _NUM ; } else if ( c1 == null ) { return ( nullGreater ? _NUM : - _NUM ) ; } else if ( c2 == null ) { return ( nullGreater ? - _NUM : _NUM ) ; } return c1 . compareTo ( c2 ) ; }
public boolean checkRootBySuperUserApk ( ) { File suApk = new File ( SU_APK ) ; if ( suApk != null && suApk . exists ( ) ) { return _BOOL ; } return _BOOL ; }
int addExpression ( Expression expression ) ;
boolean trackMotionScroll ( int deltaY , int incrementalDeltaY ) { final int childCount = getChildCount ( ) ; if ( childCount == _NUM ) { return _BOOL ; } final int firstTop = getScrollChildTop ( ) ; final int lastBottom = getScrollChildBottom ( ) ; final Rect listPadding = mListPadding ; final int end = getHeight ( ) - listPadding . bottom ; final int spaceAbove = listPadding . top - getFillChildTop ( ) ; final int spaceBelow = getFillChildBottom ( ) - end ; final int height = getHeight ( ) - getPaddingBottom ( ) - getPaddingTop ( ) ; if ( deltaY < _NUM ) { deltaY = Math . max ( - ( height - _NUM ) , deltaY ) ; } else { deltaY = Math . min ( height - _NUM , deltaY ) ; } if ( incrementalDeltaY < _NUM ) { incrementalDeltaY = Math . max ( - ( height - _NUM ) , incrementalDeltaY ) ; } else { incrementalDeltaY = Math . min ( height - _NUM , incrementalDeltaY ) ; } final int firstPosition = mFirstPosition ; if ( firstPosition == _NUM && firstTop >= listPadding . top && deltaY >= _NUM ) { return _BOOL ; } if ( firstPosition + childCount == mItemCount && lastBottom <= end && deltaY <= _NUM ) { return _BOOL ; } final boolean down = incrementalDeltaY < _NUM ; final int headerViewsCount = getHeaderViewsCount ( ) ; final int footerViewsStart = mItemCount - getFooterViewsCount ( ) ; int start = _NUM ; int count = _NUM ; if ( down ) { final int top = listPadding . top - incrementalDeltaY ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; if ( child . getBottom ( ) >= top ) { break ; } else { count ++ ; int position = firstPosition + i ; if ( position >= headerViewsCount && position < footerViewsStart ) { mRecycler . addScrapView ( child ) ; if ( ViewDebug . TRACE_RECYCLER ) { ViewDebug . trace ( child , ViewDebug . RecyclerTraceType . MOVE_TO_SCRAP_HEAP , firstPosition + i , - _NUM ) ; } } } } } else { final int bottom = getHeight ( ) - listPadding . bottom - incrementalDeltaY ; for ( int i = childCount - _NUM ; i >= _NUM ; i -- ) { final View child = getChildAt ( i ) ; if ( child . getTop ( ) <= bottom ) { break ; } else { start = i ; count ++ ; int position = firstPosition + i ; if ( position >= headerViewsCount && position < footerViewsStart ) { mRecycler . addScrapView ( child ) ; if ( ViewDebug . TRACE_RECYCLER ) { ViewDebug . trace ( child , ViewDebug . RecyclerTraceType . MOVE_TO_SCRAP_HEAP , firstPosition + i , - _NUM ) ; } } } } } mMotionViewNewTop = mMotionViewOriginalTop + deltaY ; mBlockLayoutRequests = _BOOL ; if ( count > _NUM ) { detachViewsFromParent ( start , count ) ; } tryOffsetChildrenTopAndBottom ( incrementalDeltaY ) ; if ( down ) { mFirstPosition += count ; } invalidate ( ) ; final int absIncrementalDeltaY = Math . abs ( incrementalDeltaY ) ; if ( spaceAbove < absIncrementalDeltaY || spaceBelow < absIncrementalDeltaY ) { fillGap ( down ) ; } mBlockLayoutRequests = _BOOL ; invokeOnItemScrollListener ( ) ; awakenScrollBars ( ) ; return _BOOL ; }
public static < E > E syncRest ( final Iterator < ? extends Object > iterator , final Callable < E > task ) throws Exception { if ( iterator . hasNext ( ) ) { synchronized ( iterator . next ( ) ) { return syncRest ( iterator , task ) ; } } else { return task . call ( ) ; } }
private static Component findByName ( Container root , String componentName ) { if ( verbose ) { log ( _STR + root + _STR + componentName + _STR ) ; } int count = root . getComponentCount ( ) ; for ( int iter = _NUM ; iter < count ; iter ++ ) { Component c = root . getComponentAt ( iter ) ; String n = c . getName ( ) ; if ( n != null && n . equals ( componentName ) ) { return c ; } if ( c instanceof Container ) { c = findByName ( ( Container ) c , componentName ) ; if ( c != null ) { return c ; } } } return null ; }
public boolean isFingerprint ( ClassTemplate classTemplate ) { return fingerprintClass . equals ( classTemplate . getImplementingClass ( ) ) ; }
public void writeField ( final String name , final float value ) throws java . io . IOException { writeField ( name , Float . toString ( value ) ) ; }
private List extractColumnKeys ( String line ) { List keys = new java . util . ArrayList ( ) ; int fieldIndex = _NUM ; int start = _NUM ; for ( int i = _NUM ; i < line . length ( ) ; i ++ ) { if ( line . charAt ( i ) == this . fieldDelimiter ) { if ( fieldIndex > _NUM ) { String key = line . substring ( start , i ) ; keys . add ( removeStringDelimiters ( key ) ) ; } start = i + _NUM ; fieldIndex ++ ; } } String key = line . substring ( start , line . length ( ) ) ; keys . add ( removeStringDelimiters ( key ) ) ; return keys ; }
protected void drawRhombus ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean shadow ) { int halfWidth = w / _NUM ; int halfHeight = h / _NUM ; Polygon rhombus = new Polygon ( ) ; rhombus . addPoint ( x + halfWidth , y ) ; rhombus . addPoint ( x + w , y + halfHeight ) ; rhombus . addPoint ( x + halfWidth , y + h ) ; rhombus . addPoint ( x , y + halfHeight ) ; drawPolygon ( rhombus , fillColor , fillPaint , penColor , shadow ) ; }
private void convertAndFillByteBufferListToByteArrayList ( List < byte [ ] > dictionaryValues , List < ByteBuffer > dictionaryValueBufferList ) { for ( ByteBuffer buffer : dictionaryValueBufferList ) { int length = buffer . limit ( ) ; byte [ ] value = new byte [ length ] ; buffer . get ( value , _NUM , value . length ) ; dictionaryValues . add ( value ) ; } }
static Object instantiate ( Class < ? > sibling , String className ) throws InstantiationException , IllegalAccessException , ClassNotFoundException { ClassLoader cl = sibling . getClassLoader ( ) ; Class < ? > cls = ClassFinder . findClass ( className , cl ) ; return cls . newInstance ( ) ; }
private byte [ ] generateDerivedKey ( int bytesNeeded ) { byte [ ] buf = new byte [ digest . getDigestSize ( ) ] ; byte [ ] key = new byte [ bytesNeeded ] ; int offset = _NUM ; for ( ; ; ) { digest . update ( password , _NUM , password . length ) ; digest . update ( salt , _NUM , salt . length ) ; digest . doFinal ( buf , _NUM ) ; int len = ( bytesNeeded > buf . length ) ? buf . length : bytesNeeded ; System . arraycopy ( buf , _NUM , key , offset , len ) ; offset += len ; bytesNeeded -= len ; if ( bytesNeeded == _NUM ) { break ; } digest . reset ( ) ; digest . update ( buf , _NUM , buf . length ) ; } return key ; }
public void testSystemRunFinalizationReturnsEvenIfQueueIsNonEmpty ( ) throws Exception { AtomicInteger count = new AtomicInteger ( ) ; AtomicBoolean keepGoing = new AtomicBoolean ( _BOOL ) ; createChainedFinalizer ( count , keepGoing ) ; while ( count . get ( ) == _NUM ) { Thread . sleep ( _NUM ) ; FinalizationTester . induceFinalization ( ) ; } keepGoing . set ( _BOOL ) ; assertTrue ( count . get ( ) > _NUM ) ; }
public synchronized void show ( Bundle options ) { if ( DEBUG ) Log . d ( TAG , _STR + mKeyguardView ) ; boolean enableScreenRotation = shouldEnableScreenRotation ( ) ; maybeCreateKeyguardLocked ( enableScreenRotation , _BOOL , options ) ; maybeEnableScreenRotation ( enableScreenRotation ) ; final int visFlags = View . STATUS_BAR_DISABLE_HOME ; if ( DEBUG ) Log . v ( TAG , _STR + Integer . toHexString ( visFlags ) + _STR ) ; mKeyguardHost . setSystemUiVisibility ( visFlags ) ; mViewManager . updateViewLayout ( mKeyguardHost , mWindowLayoutParams ) ; mKeyguardHost . setVisibility ( View . VISIBLE ) ; mKeyguardView . show ( ) ; mKeyguardView . requestFocus ( ) ; }
public static int computeStringWidth ( FontMetrics fm , String str ) { return SwingUtilities2 . stringWidth ( null , fm , str ) ; }
private boolean passesSanityCheck ( AccessibilityEvent event ) { final CharSequence afterText = getEventText ( event ) ; final CharSequence beforeText = event . getBeforeText ( ) ; if ( ( event . getAddedCount ( ) == _NUM ) && ( event . getRemovedCount ( ) == beforeText . length ( ) ) ) { return _BOOL ; } if ( afterText == null || beforeText == null ) { return _BOOL ; } final int diff = ( event . getAddedCount ( ) - event . getRemovedCount ( ) ) ; return ( ( beforeText . length ( ) + diff ) == afterText . length ( ) ) ; }
public void actionPerformed ( ActionEvent ae ) { String command = ae . getActionCommand ( ) ; if ( command == DisplayPaletteCmd ) { if ( Debug . debugging ( _STR ) ) { Debug . output ( getName ( ) + _STR ) ; } showPalette ( ) ; } else if ( command == HidePaletteCmd ) { if ( Debug . debugging ( _STR ) ) { Debug . output ( getName ( ) + _STR ) ; } hidePalette ( ) ; } else if ( command == DisplayPropertiesCmd ) { Inspector inspector = new Inspector ( ) ; inspector . inspectPropertyConsumer ( this ) ; } }
public static String toString ( LocalDate data ) { return data == null ? _STR : data . format ( formatter ( _STR ) ) ; }
@ JsonCreator public DataSourceMetadata ( @ JsonProperty ( _STR ) String name , @ JsonProperty ( _STR ) Map < String , String > properties , @ JsonProperty ( _STR ) List < DataSegment > segments ) { this . name = name ; this . properties = Collections . unmodifiableMap ( properties ) ; this . segments = Collections . unmodifiableList ( segments ) ; }
public EMail createEMail ( String value ) { EmailField emailImpl = new EmailField ( ) ; try { emailImpl . setValue ( value ) ; } catch ( SdpException s ) { s . printStackTrace ( ) ; } return emailImpl ; }
public AddressLookup ( String serverUrl , String serialNo , String password ) { this . serverUrl = serverUrl . trim ( ) ; this . clientID = serialNo . trim ( ) ; this . accessCode = password . trim ( ) ; }
public void addChangeListener ( ChangeListener l ) { m_ChangeListeners . add ( l ) ; }
public Node ( String permission , boolean value , boolean override , long expireAt , String server , String world , ContextSet contexts ) { if ( permission == null || permission . equals ( _STR ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( server != null && ( server . equalsIgnoreCase ( _STR ) || server . equals ( _STR ) ) ) { server = null ; } if ( world != null && world . equals ( _STR ) ) { world = null ; } if ( world != null && server == null ) { server = _STR ; } this . permission = permission ; this . value = value ; this . override = override ; this . expireAt = expireAt ; this . server = server ; this . world = world ; this . contexts = contexts == null ? ContextSet . empty ( ) : contexts . makeImmutable ( ) ; }
public Cell ( int rowspan , int colspan ) { this . rowspan = Math . max ( rowspan , _NUM ) ; this . colspan = Math . max ( colspan , _NUM ) ; }
private void initializeLocalAndTargetInfo ( ) throws Exception { targetSiteInfo = coordinator . getTargetInfo ( SiteInfo . class ) ; if ( targetSiteInfo == null ) { targetSiteInfo = new SiteInfo ( ) ; try { coordinator . setTargetInfo ( targetSiteInfo , _BOOL ) ; log . info ( _STR , targetSiteInfo ) ; } catch ( CoordinatorClientException e ) { log . info ( _STR ) ; retrySleep ( ) ; throw e ; } } localVdcPropInfo = localRepository . getVdcPropertyInfo ( ) ; String localConfigVersion = localVdcPropInfo . getProperty ( VdcConfigUtil . VDC_CONFIG_VERSION ) ; coordinator . setNodeSessionScopeInfo ( new VdcConfigVersion ( localConfigVersion ) ) ; targetVdcPropInfo = loadVdcConfig ( ) ; if ( isGeoUpgradeFromPreYoda ( ) ) { log . info ( _STR ) ; localVdcPropInfo . addProperty ( VdcConfigUtil . VDC_CONFIG_VERSION , String . valueOf ( targetSiteInfo . getVdcConfigVersion ( ) ) ) ; localRepository . setVdcPropertyInfo ( localVdcPropInfo ) ; } else { if ( localVdcPropInfo . getProperty ( VdcConfigUtil . VDC_CONFIG_VERSION ) == null ) { localVdcPropInfo = new PropertyInfoExt ( targetVdcPropInfo . getAllProperties ( ) ) ; localVdcPropInfo . addProperty ( VdcConfigUtil . VDC_CONFIG_VERSION , String . valueOf ( targetSiteInfo . getVdcConfigVersion ( ) ) ) ; localRepository . setVdcPropertyInfo ( localVdcPropInfo ) ; String vdc_ids = targetVdcPropInfo . getProperty ( VdcConfigUtil . VDC_IDS ) ; String [ ] vdcIds = vdc_ids . split ( _STR ) ; if ( vdcIds . length > _NUM ) { log . info ( _STR ) ; reboot ( ) ; } } } targetPowerOffState = coordinator . getTargetInfo ( PowerOffState . class ) ; if ( targetPowerOffState == null ) { try { coordinator . setTargetInfo ( new PowerOffState ( PowerOffState . State . NONE ) ) ; targetPowerOffState = coordinator . getTargetInfo ( PowerOffState . class ) ; log . info ( _STR , PowerOffState . State . NONE ) ; } catch ( CoordinatorClientException e ) { log . info ( _STR ) ; retrySleep ( ) ; throw e ; } } }
@ Override public void openElement ( String tagName ) { XMLElement newElement = new XMLElement ( ) ; newElement . setName ( tagName ) ; current . addChild ( newElement ) ; stack . push ( current ) ; current = newElement ; }
public Format ( String pFormatString ) { String formatVars [ ] = pFormatString . split ( _STR ) ; mId = Integer . parseInt ( formatVars [ _NUM ] ) ; }
public boolean equals ( Object interval ) { if ( intervals == null ) { return _BOOL ; } return intervals . contains ( interval ) ; }
public static String relativeToAbsolute ( String baseURL , String relativeURL ) { if ( relativeURL . startsWith ( _STR ) ) { return getURLProtocol ( baseURL ) + _STR + getURLHost ( baseURL ) + relativeURL ; } else { return getURLProtocol ( baseURL ) + _STR + getURLHost ( baseURL ) + getURLBasePath ( baseURL ) + relativeURL ; } }
public void start ( ) { if ( setState ( EnumSet . of ( TaskState . INITIAL , TaskState . QUEUED ) , TaskState . RUNNING ) ) { DHT . logDebug ( _STR + toString ( ) ) ; startTime = System . currentTimeMillis ( ) ; try { serializedUpdate . run ( ) ; } catch ( Exception e ) { DHT . log ( e , LogLevel . Error ) ; } } }
public JournalIndex ( final IRawStore store , final Checkpoint checkpoint , final IndexMetadata metadata , final boolean readOnly ) { super ( store , checkpoint , metadata , readOnly ) ; }
private void accesBreakpointInstruction ( ArrayList < Instruction > instructions , int lineNumber , int op , BPINSTRUCTION_STATUS status ) { for ( int i = _NUM ; i < instructions . size ( ) ; i ++ ) { Instruction currInst = instructions . get ( i ) ; if ( op == _NUM ) { if ( currInst instanceof MRJobInstruction ) { MRJobInstruction currMRInst = ( MRJobInstruction ) currInst ; if ( currMRInst . findMRInstructions ( lineNumber ) ) { BreakPointInstruction breakpoint = new BreakPointInstruction ( ) ; breakpoint . setLocation ( currInst ) ; breakpoint . setInstID ( instID ++ ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . add ( i , breakpoint ) ; DMLBreakpointManager . insertBreakpoint ( breakpoint , lineNumber ) ; return ; } } else if ( currInst instanceof CPInstruction || currInst instanceof SPInstruction ) { if ( currInst . getLineNum ( ) == lineNumber ) { BreakPointInstruction breakpoint = new BreakPointInstruction ( ) ; breakpoint . setLocation ( currInst ) ; breakpoint . setInstID ( instID ++ ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . add ( i , breakpoint ) ; DMLBreakpointManager . insertBreakpoint ( breakpoint , lineNumber ) ; return ; } } else if ( currInst instanceof BreakPointInstruction && currInst . getLineNum ( ) == lineNumber ) { BreakPointInstruction breakpoint = ( BreakPointInstruction ) currInst ; breakpoint . setBPInstructionStatus ( BPINSTRUCTION_STATUS . ENABLED ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . set ( i , breakpoint ) ; DMLBreakpointManager . updateBreakpoint ( lineNumber , status ) ; return ; } } else { if ( currInst instanceof BreakPointInstruction && currInst . getLineNum ( ) == lineNumber ) { if ( op == _NUM ) { BreakPointInstruction breakpoint = ( BreakPointInstruction ) currInst ; breakpoint . setLocation ( currInst ) ; breakpoint . setInstID ( currInst . getInstID ( ) ) ; breakpoint . setBPInstructionStatus ( status ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . set ( i , breakpoint ) ; DMLBreakpointManager . updateBreakpoint ( lineNumber , status ) ; } else { instructions . remove ( i ) ; DMLBreakpointManager . removeBreakpoint ( lineNumber , status ) ; } return ; } } } }
private void closeFile ( ) { if ( plogStream != null ) { try { plogStream . close ( ) ; logger . info ( _STR + plogFilename + _STR ) ; } catch ( IOException e ) { logger . warn ( _STR + plogFilename ) ; } finally { plogStream = null ; } } }
public void nextToken ( ) { previousLine = line ; previousColumn = column ; while ( pos < matcher . regionStart ( ) ) { if ( text . charAt ( pos ) == _STR ) { ++ line ; column = _NUM ; } else { ++ column ; } ++ pos ; } if ( matcher . regionStart ( ) == matcher . regionEnd ( ) ) { currentToken = _STR ; } else { matcher . usePattern ( TOKEN ) ; if ( matcher . lookingAt ( ) ) { currentToken = matcher . group ( ) ; matcher . region ( matcher . end ( ) , matcher . regionEnd ( ) ) ; } else { currentToken = String . valueOf ( text . charAt ( pos ) ) ; matcher . region ( pos + _NUM , matcher . regionEnd ( ) ) ; } skipWhitespace ( ) ; } }
private void parseFirstConsonant ( ) { Iterator iter = alFirstConsonants . iterator ( ) ; while ( iter . hasNext ( ) ) { String strFirstCon = ( String ) iter . next ( ) ; if ( strSyllable . startsWith ( strFirstCon , iCurPos ) ) { strFirstConsonant = strFirstCon ; iCurPos += strFirstCon . length ( ) ; return ; } } strFirstConsonant = ZERO ; }
private BuddyPanelController ( ) { buddyPanel = new JPanel ( ) ; buddyPanel . setLayout ( new SBoxLayout ( SBoxLayout . VERTICAL ) ) ; model = new BuddyListModel ( ) ; JList < Buddy > list = new BuddyPanel ( model ) ; buddyPanel . add ( list , SLayout . EXPAND_X ) ; }
private void removeGapsWithEdgeConcentration ( int nodesLevel [ ] ) { final int temp = m_nodes . size ( ) , temp2 = graphMatrix [ _NUM ] . length ; int tempCnt = _NUM ; for ( int n = _NUM ; n < temp ; n ++ ) { for ( int i = _NUM ; i < temp2 ; i ++ ) { if ( graphMatrix [ n ] [ i ] > _NUM ) { if ( nodesLevel [ i ] > nodesLevel [ n ] + _NUM ) { int tempLevel = nodesLevel [ n ] ; boolean tempNodePresent = _BOOL ; int k = temp ; int tempnode = n ; while ( tempLevel < nodesLevel [ i ] - _NUM ) { tempNodePresent = _BOOL ; for ( ; k < graphMatrix . length ; k ++ ) { if ( graphMatrix [ tempnode ] [ k ] > _NUM ) { tempNodePresent = _BOOL ; break ; } } if ( tempNodePresent ) { tempnode = k ; k = k + _NUM ; tempLevel ++ ; } else { if ( tempnode != n ) { tempnode = k - _NUM ; } break ; } } if ( m_nodes . get ( tempnode ) . nodeType == SINGULAR_DUMMY ) { m_nodes . get ( tempnode ) . nodeType = PLURAL_DUMMY ; } if ( tempNodePresent ) { graphMatrix [ tempnode ] [ i ] = graphMatrix [ n ] [ i ] ; graphMatrix [ i ] [ tempnode ] = - graphMatrix [ n ] [ i ] ; graphMatrix [ n ] [ i ] = _NUM ; graphMatrix [ i ] [ n ] = _NUM ; continue ; } int len = graphMatrix . length ; int tempMatrix [ ] [ ] = new int [ graphMatrix . length + ( nodesLevel [ i ] - nodesLevel [ tempnode ] - _NUM ) ] [ graphMatrix . length + ( nodesLevel [ i ] - nodesLevel [ tempnode ] - _NUM ) ] ; int level = nodesLevel [ tempnode ] + _NUM ; copyMatrix ( graphMatrix , tempMatrix ) ; String s1 = new String ( _STR + tempCnt ++ ) ; m_nodes . add ( new GraphNode ( s1 , s1 , SINGULAR_DUMMY ) ) ; int temp3 [ ] = new int [ nodeLevels [ level ] . length + _NUM ] ; System . arraycopy ( nodeLevels [ level ] , _NUM , temp3 , _NUM , nodeLevels [ level ] . length ) ; temp3 [ temp3 . length - _NUM ] = m_nodes . size ( ) - _NUM ; nodeLevels [ level ] = temp3 ; temp3 = new int [ m_nodes . size ( ) + _NUM ] ; System . arraycopy ( nodesLevel , _NUM , temp3 , _NUM , nodesLevel . length ) ; temp3 [ m_nodes . size ( ) - _NUM ] = level ; nodesLevel = temp3 ; level ++ ; int m ; for ( m = len ; m < len + nodesLevel [ i ] - nodesLevel [ tempnode ] - _NUM - _NUM ; m ++ ) { String s2 = new String ( _STR + tempCnt ++ ) ; m_nodes . add ( new GraphNode ( s2 , s2 , SINGULAR_DUMMY ) ) ; temp3 = new int [ nodeLevels [ level ] . length + _NUM ] ; System . arraycopy ( nodeLevels [ level ] , _NUM , temp3 , _NUM , nodeLevels [ level ] . length ) ; temp3 [ temp3 . length - _NUM ] = m_nodes . size ( ) - _NUM ; nodeLevels [ level ] = temp3 ; temp3 = new int [ m_nodes . size ( ) + _NUM ] ; System . arraycopy ( nodesLevel , _NUM , temp3 , _NUM , nodesLevel . length ) ; temp3 [ m_nodes . size ( ) - _NUM ] = level ; nodesLevel = temp3 ; level ++ ; tempMatrix [ m ] [ m + _NUM ] = tempMatrix [ n ] [ i ] ; if ( m > len ) { tempMatrix [ m ] [ m - _NUM ] = - _NUM * tempMatrix [ n ] [ i ] ; } } tempMatrix [ m ] [ i ] = tempMatrix [ n ] [ i ] ; tempMatrix [ tempnode ] [ len ] = tempMatrix [ n ] [ i ] ; tempMatrix [ len ] [ tempnode ] = - _NUM * tempMatrix [ n ] [ i ] ; tempMatrix [ i ] [ m ] = - _NUM * tempMatrix [ n ] [ i ] ; if ( m > len ) { tempMatrix [ m ] [ m - _NUM ] = - _NUM * tempMatrix [ n ] [ i ] ; } tempMatrix [ n ] [ i ] = _NUM ; tempMatrix [ i ] [ n ] = _NUM ; graphMatrix = tempMatrix ; } else { graphMatrix [ i ] [ n ] = - _NUM * graphMatrix [ n ] [ i ] ; } } } } }
public static byte [ ] asUnsignedByteArray ( BigInteger value ) { byte [ ] bytes = value . toByteArray ( ) ; if ( bytes [ _NUM ] == _NUM ) { byte [ ] tmp = new byte [ bytes . length - _NUM ] ; System . arraycopy ( bytes , _NUM , tmp , _NUM , tmp . length ) ; return tmp ; } return bytes ; }
public static TestResult execJavac ( String toCompile , File dir , String jflexTestVersion ) { Project p = new Project ( ) ; Javac javac = new Javac ( ) ; Path path = new Path ( p , dir . toString ( ) ) ; javac . setProject ( p ) ; javac . setSrcdir ( path ) ; javac . setDestdir ( dir ) ; javac . setTarget ( javaVersion ) ; javac . setSource ( javaVersion ) ; javac . setSourcepath ( new Path ( p , _STR ) ) ; javac . setIncludes ( toCompile ) ; Path classPath = javac . createClasspath ( ) ; classPath . setPath ( System . getProperty ( _STR ) + _STR + jflexTestVersion + _STR + jflexTestVersion + _STR ) ; ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; PrintStream outSafe = System . err ; System . setErr ( new PrintStream ( out ) ) ; try { javac . execute ( ) ; return new TestResult ( out . toString ( ) , _BOOL ) ; } catch ( BuildException e ) { return new TestResult ( e + System . getProperty ( _STR ) + out . toString ( ) , _BOOL ) ; } finally { System . setErr ( outSafe ) ; } }
private final boolean parkAndCheckInterrupt ( ) { LockSupport . park ( this ) ; return Thread . interrupted ( ) ; }
public static CLPlatform [ ] listGPUPoweredPlatforms ( ) { CLPlatform [ ] platforms = listPlatforms ( ) ; List < CLPlatform > out = new ArrayList < CLPlatform > ( platforms . length ) ; for ( CLPlatform platform : platforms ) { if ( platform . listGPUDevices ( _BOOL ) . length > _NUM ) out . add ( platform ) ; } return out . toArray ( new CLPlatform [ out . size ( ) ] ) ; }
public ActionRequestHelper dependsOn ( ActionRequestHelper dependency ) { mDependencies . add ( dependency ) ; return this ; }
static boolean isDate ( Object obj ) { return obj instanceof Date && obj . getClass ( ) == Date . class ; }
public static String toXml ( final Config toConvert , Boolean prettyXml ) throws JAXBException , IOException { String retVal = _STR ; try ( StringWriter writer = new StringWriter ( ) ) { toXml ( toConvert , writer , prettyXml ) ; retVal = writer . toString ( ) ; return retVal ; } }
private static List < Vector2D > buildQuadrilateral ( final Vector2D ... points ) { List < Vector2D > quadrilateral = new ArrayList < Vector2D > ( ) ; for ( Vector2D p : points ) { if ( ! quadrilateral . contains ( p ) ) { quadrilateral . add ( p ) ; } } return quadrilateral ; }
private void heapifyUp ( int twopos , Comparable < Object > cur ) { while ( twopos > _NUM ) { final int parent = ( twopos - _NUM ) > > > _NUM ; Comparable < Object > par = twoheap [ parent ] ; if ( cur . compareTo ( par ) <= _NUM ) { break ; } twoheap [ twopos ] = par ; twopos = parent ; } twoheap [ twopos ] = cur ; }
public void insert ( String key , char val ) { int len = key . length ( ) + _NUM ; if ( freenode + len > eq . length ) { redimNodeArrays ( eq . length + BLOCK_SIZE ) ; } char strkey [ ] = new char [ len -- ] ; key . getChars ( _NUM , len , strkey , _NUM ) ; strkey [ len ] = _NUM ; root = insert ( root , strkey , _NUM , val ) ; }
void fullyUnlock ( ) { takeLock . unlock ( ) ; putLock . unlock ( ) ; }
private static boolean isSubFormat ( String filename ) { for ( String ext : SUB_EXTENSIONS ) { if ( filename . contains ( _STR + ext ) ) { return _BOOL ; } } return _BOOL ; }
void write ( Environment env , DataOutputStream out , ConstantPool tab ) throws IOException { out . writeByte ( CONSTANT_NAMEANDTYPE ) ; out . writeShort ( tab . index ( name ) ) ; out . writeShort ( tab . index ( type ) ) ; }
public static void initializeProperties ( Properties properties , boolean reset , boolean withDefaults ) { Properties defaultProp = null ; if ( withDefaults ) { SSOToken appToken = AccessController . doPrivileged ( AdminTokenAction . getInstance ( ) ) ; defaultProp = ServerConfiguration . getDefaults ( appToken ) ; } PropertiesHolder oldProps ; PropertiesHolder newProps ; do { oldProps = propertiesHolderRef . get ( ) ; final Properties combined = new Properties ( ) ; if ( defaultProp != null ) { combined . putAll ( defaultProp ) ; } if ( ! reset ) { combined . putAll ( oldProps . properties ) ; } combined . putAll ( properties ) ; newProps = new PropertiesHolder ( Maps . fromProperties ( combined ) ) ; } while ( ! propertiesHolderRef . compareAndSet ( oldProps , newProps ) ) ; }
public void addNetworkListener ( final NetworkListener listener ) { networkListeners . add ( listener ) ; }
public static void appendContentPrefix ( HttpServletRequest request , Appendable urlBuffer ) throws IOException { appendContentPrefix ( request , urlBuffer , null ) ; }
public void addErrorListener ( final ErrorListener errorListener ) { if ( errorListeners == null ) { errorListeners = new ArrayList < ErrorListener > ( ) ; } errorListeners . add ( errorListener ) ; }
private void validateClassName ( String className ) { String nvalue = className . trim ( ) ; if ( ! nvalue . matches ( CLASS_RE ) ) { throw PropertyException . illegalPropertyValueException ( this , className ) ; } }
public static void importBaseTypes ( final CConnection connection , final int rawModuleId , final int moduleId ) throws SQLException { final String query = _STR + CTableNames . BASE_TYPES_TABLE + _STR + moduleId + _STR + _STR + String . format ( CTableNames . RAW_BASE_TYPES , rawModuleId ) ; connection . executeUpdate ( query , _BOOL ) ; final String updateSequence = String . format ( _STR + _STR , CTableNames . BASE_TYPES_TABLE , CTableNames . BASE_TYPES_TABLE ) ; connection . executeQuery ( updateSequence , _BOOL ) ; }
@ SuppressWarnings ( _STR ) public Object readMatrixOld ( Element node ) throws Exception { weka . core . Matrix matrix ; weka . core . matrix . Matrix matrixNew ; if ( DEBUG ) { trace ( new Throwable ( ) , node . getAttribute ( ATT_NAME ) ) ; } m_CurrentNode = node ; matrixNew = ( weka . core . matrix . Matrix ) readMatrix ( node ) ; matrix = new weka . core . Matrix ( matrixNew . getArrayCopy ( ) ) ; return matrix ; }
public void recordFileSystemOperation ( DbClient dbClient , OperationTypeEnum opType , Operation . Status status , Object ... extParam ) { try { boolean opStatus = ( Operation . Status . ready == status ) ? _BOOL : _BOOL ; String evType ; evType = opType . getEvType ( opStatus ) ; String evDesc = opType . getDescription ( ) ; String opStage = AuditLogManager . AUDITOP_END ; _logger . info ( _STR , opType . toString ( ) , evType . toString ( ) + _STR + evDesc ) ; URI uri = ( URI ) extParam [ _NUM ] ; recordBourneFileSystemEvent ( dbClient , evType , status , evDesc , uri ) ; auditFile ( dbClient , opType , opStatus , opStage , uri . toString ( ) ) ; } catch ( Exception e ) { _logger . error ( _STR , opType . toString ( ) , e ) ; } }
public CoreTokenException ( int errorCode ) { this . errorCode = errorCode ; this . message = getLocalizedMessage ( Locale . getDefault ( ) ) ; }
public DExamineSsl ( JFrame parent , KseFrame kseFrame ) { super ( parent , res . getString ( _STR ) , Dialog . ModalityType . DOCUMENT_MODAL ) ; this . kseFrame = kseFrame ; initComponents ( ) ; }
private static List < String > computeDynamicVMArgs ( IJavaProject javaProject ) { ArrayList < String > out = new ArrayList < String > ( ) ; String devJarPath = maybeGetDevJarPath ( javaProject ) ; if ( devJarPath . length ( ) > _NUM ) { out . add ( _STR + devJarPath + _STR ) ; } return out ; }
static void normalize ( StringBuilder number ) { String normalizedNumber = normalize ( number . toString ( ) ) ; number . replace ( _NUM , number . length ( ) , normalizedNumber ) ; }
public double [ ] skipTo ( final int index ) throws MathIllegalArgumentException { if ( index == _NUM ) { Arrays . fill ( x , _NUM ) ; } else { final int i = index - _NUM ; final long grayCode = i ^ ( i > > _NUM ) ; for ( int j = _NUM ; j < dimension ; j ++ ) { long result = _NUM ; for ( int k = _NUM ; k <= BITS ; k ++ ) { final long shift = grayCode > > ( k - _NUM ) ; if ( shift == _NUM ) { break ; } final long ik = shift & _NUM ; result ^= ik * direction [ j ] [ k ] ; } x [ j ] = result ; } } count = index ; return nextVector ( ) ; }
public void removeOrganizationConfiguration ( String orgName , String groupName , boolean checkLegacyMode ) throws SMSException , SSOException { if ( ( groupName == null ) || groupName . length ( ) == _NUM ) { groupName = SMSUtils . DEFAULT ; } String orgdn = DNMapper . orgNameToDN ( orgName ) ; validateSCM ( ) ; String odn = scm . constructServiceConfigDN ( groupName , CreateServiceConfig . ORG_CONFIG_NODE , orgdn ) ; CachedSMSEntry cEntry = CachedSMSEntry . getInstance ( token , odn ) ; if ( cEntry . isNewEntry ( ) ) { return ; } if ( checkLegacyMode && ServiceManager . isCoexistenceMode ( ) && groupName . equalsIgnoreCase ( SMSUtils . DEFAULT ) ) { OrgConfigViaAMSDK amsdk = new OrgConfigViaAMSDK ( token , DNMapper . realmNameToAMSDKName ( orgdn ) , orgdn ) ; amsdk . unassignService ( serviceName ) ; } if ( ! cEntry . isNewEntry ( ) ) { SMSEntry entry = cEntry . getClonedSMSEntry ( ) ; entry . delete ( token ) ; cEntry . refresh ( entry ) ; } }
public void removeGroupListener ( final GroupListener listener ) { groupListeners . remove ( listener ) ; }
public SetChangelogMapping ( String source , String taskName , int changelogPartitionNumber ) { super ( source ) ; setType ( TYPE ) ; setKey ( taskName ) ; putMessageValue ( CHANGELOG_VALUE_KEY , String . valueOf ( changelogPartitionNumber ) ) ; }
@ Override protected String extractKey ( final String name ) { final String key = unescape ( name . substring ( _NUM , name . length ( ) - _NUM ) ) ; return key . equals ( _STR ) ? null : key ; }
private static float spacing ( MotionEvent event ) { float x = event . getX ( _NUM ) - event . getX ( _NUM ) ; float y = event . getY ( _NUM ) - event . getY ( _NUM ) ; return ( float ) Math . sqrt ( x * x + y * y ) ; }
@ SuppressWarnings ( _STR ) public static < K , V > void transformStringMap ( Map < String , String > original , Map < K , V > map , Class < K > keyClass , Class < V > valueClass ) throws PreferenceException { Method parseKeyMethod = findParseMethod ( keyClass ) ; Method parseValueMethod = findParseMethod ( valueClass ) ; if ( ( null != parseKeyMethod ) && ( null != parseValueMethod ) ) { for ( Map . Entry < String , String > toTransformEntry : original . entrySet ( ) ) { try { Object transformedKey = parseKeyMethod . invoke ( null , toTransformEntry . getKey ( ) ) ; Object transformedValue = parseValueMethod . invoke ( null , toTransformEntry . getValue ( ) ) ; if ( keyClass . isAssignableFrom ( transformedKey . getClass ( ) ) && valueClass . isAssignableFrom ( transformedValue . getClass ( ) ) ) { map . put ( ( K ) transformedKey , ( V ) transformedValue ) ; } } catch ( Exception e ) { throw new PreferenceException ( _STR + keyClass . getName ( ) + _STR + valueClass . getName ( ) + _STR , e ) ; } } } else if ( null == parseKeyMethod ) { throw new PreferenceException ( _STR + keyClass . getName ( ) + _STR + valueClass . getName ( ) + _STR + _STR + keyClass . getName ( ) + _STR ) ; } else { throw new PreferenceException ( _STR + keyClass . getName ( ) + _STR + valueClass . getName ( ) + _STR + _STR + valueClass . getName ( ) + _STR ) ; } }
public boolean grabInput ( ) { if ( grabLog . isLoggable ( PlatformLogger . Level . FINE ) ) { grabLog . fine ( _STR , this ) ; } XToolkit . awtLock ( ) ; try { if ( XAwtState . getGrabWindow ( ) == this && XAwtState . isManualGrab ( ) ) { grabLog . fine ( _STR ) ; return _BOOL ; } XBaseWindow prevGrabWindow = XAwtState . getGrabWindow ( ) ; final int eventMask = ( int ) ( XConstants . ButtonPressMask | XConstants . ButtonReleaseMask | XConstants . EnterWindowMask | XConstants . LeaveWindowMask | XConstants . PointerMotionMask | XConstants . ButtonMotionMask ) ; final int ownerEvents = _NUM ; if ( ! XToolkit . getSunAwtDisableGrab ( ) ) { int ptrGrab = XlibWrapper . XGrabPointer ( XToolkit . getDisplay ( ) , getContentWindow ( ) , ownerEvents , eventMask , XConstants . GrabModeAsync , XConstants . GrabModeAsync , XConstants . None , ( XWM . isMotif ( ) ? XToolkit . arrowCursor : XConstants . None ) , XConstants . CurrentTime ) ; if ( ptrGrab != XConstants . GrabSuccess ) { XlibWrapper . XUngrabPointer ( XToolkit . getDisplay ( ) , XConstants . CurrentTime ) ; XAwtState . setGrabWindow ( null ) ; grabLog . fine ( _STR ) ; return _BOOL ; } int keyGrab = XlibWrapper . XGrabKeyboard ( XToolkit . getDisplay ( ) , getContentWindow ( ) , ownerEvents , XConstants . GrabModeAsync , XConstants . GrabModeAsync , XConstants . CurrentTime ) ; if ( keyGrab != XConstants . GrabSuccess ) { XlibWrapper . XUngrabPointer ( XToolkit . getDisplay ( ) , XConstants . CurrentTime ) ; XlibWrapper . XUngrabKeyboard ( XToolkit . getDisplay ( ) , XConstants . CurrentTime ) ; XAwtState . setGrabWindow ( null ) ; grabLog . fine ( _STR ) ; return _BOOL ; } } if ( prevGrabWindow != null ) { prevGrabWindow . ungrabInputImpl ( ) ; } XAwtState . setGrabWindow ( this ) ; grabLog . fine ( _STR ) ; return _BOOL ; } finally { XToolkit . awtUnlock ( ) ; } }
public ComponentManager ( Collection < Sequence > generalSeeds ) { Set < Sequence > seedSet = new LinkedHashSet < > ( generalSeeds . size ( ) ) ; seedSet . addAll ( generalSeeds ) ; this . gralSeeds = Collections . unmodifiableSet ( seedSet ) ; gralComponents = new SequenceCollection ( seedSet ) ; }
public synchronized void deleteObservers ( ) { observers . clear ( ) ; }
public static byte [ ] unsynchronize ( byte [ ] abySource ) { ByteArrayInputStream input = new ByteArrayInputStream ( abySource ) ; ByteArrayOutputStream output = new ByteArrayOutputStream ( abySource . length ) ; int count = _NUM ; while ( input . available ( ) > _NUM ) { int firstByte = input . read ( ) ; count ++ ; output . write ( firstByte ) ; if ( ( firstByte & MPEGFrameHeader . SYNC_BYTE1 ) == MPEGFrameHeader . SYNC_BYTE1 ) { if ( input . available ( ) > _NUM ) { input . mark ( _NUM ) ; int secondByte = input . read ( ) ; if ( ( secondByte & MPEGFrameHeader . SYNC_BYTE2 ) == MPEGFrameHeader . SYNC_BYTE2 ) { if ( logger . isLoggable ( Level . FINEST ) ) { logger . finest ( _STR + count ) ; } output . write ( _NUM ) ; } else if ( secondByte == _NUM ) { if ( logger . isLoggable ( Level . FINEST ) ) { logger . finest ( _STR + count ) ; } output . write ( _NUM ) ; } input . reset ( ) ; } } } if ( ( abySource [ abySource . length - _NUM ] & MPEGFrameHeader . SYNC_BYTE1 ) == MPEGFrameHeader . SYNC_BYTE1 ) { logger . finest ( _STR ) ; output . write ( _NUM ) ; } return output . toByteArray ( ) ; }
private byte [ ] calculateGeneralEncryptionKey ( byte [ ] userPassword , byte [ ] firstDocIdValue , int keyBitLength , int revision , byte [ ] oValue , int pValue , boolean encryptMetadata ) throws GeneralSecurityException { final byte [ ] paddedPassword = padPassword ( userPassword ) ; MessageDigest md5 = createMD5Digest ( ) ; md5 . reset ( ) ; md5 . update ( paddedPassword ) ; md5 . update ( oValue ) ; md5 . update ( ( byte ) ( pValue & _NUM ) ) ; md5 . update ( ( byte ) ( ( pValue > > _NUM ) & _NUM ) ) ; md5 . update ( ( byte ) ( ( pValue > > _NUM ) & _NUM ) ) ; md5 . update ( ( byte ) ( pValue > > _NUM ) ) ; if ( firstDocIdValue != null ) { md5 . update ( firstDocIdValue ) ; } if ( revision >= _NUM && ! encryptMetadata ) { for ( int i = _NUM ; i < _NUM ; ++ i ) { md5 . update ( ( byte ) _NUM ) ; } } byte [ ] hash = md5 . digest ( ) ; final int keyLen = revision == _NUM ? _NUM : ( keyBitLength / _NUM ) ; final byte [ ] key = new byte [ keyLen ] ; if ( revision >= _NUM ) { for ( int i = _NUM ; i < _NUM ; ++ i ) { md5 . update ( hash , _NUM , key . length ) ; digestTo ( md5 , hash ) ; } } System . arraycopy ( hash , _NUM , key , _NUM , key . length ) ; return key ; }
public MessageCapture ( final Logger logger , final boolean captureEntity ) { this ( logger , captureEntity , _BOOL ) ; }
public static final byte [ ] unzip ( byte [ ] in ) throws IOException { ByteArrayOutputStream outStream = new ByteArrayOutputStream ( EXPECTED_COMPRESSION_RATIO * in . length ) ; GZIPInputStream inStream = new GZIPInputStream ( new ByteArrayInputStream ( in ) ) ; byte [ ] buf = new byte [ BUF_SIZE ] ; while ( _BOOL ) { int size = inStream . read ( buf ) ; if ( size <= _NUM ) break ; outStream . write ( buf , _NUM , size ) ; } outStream . close ( ) ; return outStream . toByteArray ( ) ; }
public static void insertIntoCombo ( JComboBox combo , Object item ) { MutableComboBoxModel model = ( MutableComboBoxModel ) combo . getModel ( ) ; if ( model . getSize ( ) == _NUM ) { model . insertElementAt ( item , _NUM ) ; return ; } Object o = model . getElementAt ( _NUM ) ; if ( o . equals ( item ) ) { return ; } model . removeElement ( item ) ; model . insertElementAt ( item , _NUM ) ; combo . setSelectedIndex ( _NUM ) ; }
public synchronized Object co_entry_pause ( int thisCoroutine ) throws java . lang . NoSuchMethodException { if ( ! m_activeIDs . get ( thisCoroutine ) ) throw new java . lang . NoSuchMethodException ( ) ; while ( m_nextCoroutine != thisCoroutine ) { try { wait ( ) ; } catch ( java . lang . InterruptedException e ) { } } return m_yield ; }
private boolean pythonErrorIn ( String output ) { boolean isError = _BOOL ; String [ ] outputMultiline = output . split ( _STR ) ; Matcher errorMatcher ; for ( String row : outputMultiline ) { errorMatcher = errorInLastLine . matcher ( row ) ; if ( errorMatcher . find ( ) == _BOOL ) { isError = _BOOL ; break ; } } return isError ; }
public static String numberToString ( Number number ) throws JSONException { if ( number == null ) { throw new JSONException ( _STR ) ; } double doubleValue = number . doubleValue ( ) ; JSON . checkDouble ( doubleValue ) ; if ( number . equals ( NEGATIVE_ZERO ) ) { return _STR ; } long longValue = number . longValue ( ) ; if ( doubleValue == ( double ) longValue ) { return Long . toString ( longValue ) ; } return number . toString ( ) ; }
public static Map < String , String > strToMap ( String str , String delim , boolean trim , String pairsSeparator ) { if ( str == null ) return null ; Map < String , String > decodedMap = new HashMap < String , String > ( ) ; List < String > elements = split ( str , delim ) ; pairsSeparator = pairsSeparator == null ? _STR : pairsSeparator ; for ( String s : elements ) { List < String > e = split ( s , pairsSeparator ) ; if ( e . size ( ) != _NUM ) { continue ; } String name = e . get ( _NUM ) ; String value = e . get ( _NUM ) ; if ( trim ) { if ( name != null ) { name = name . trim ( ) ; } if ( value != null ) { value = value . trim ( ) ; } } try { decodedMap . put ( URLDecoder . decode ( name , _STR ) , URLDecoder . decode ( value , _STR ) ) ; } catch ( UnsupportedEncodingException e1 ) { Debug . logError ( e1 , module ) ; } } return decodedMap ; }
public void doStressTest ( TempTripleStore tmp , InferenceEngine inf , int ntrials , int D , int N ) { AbstractTripleStore store = inf . database ; assertSameGraphs ( tmp , store ) ; for ( int trial = _NUM ; trial < ntrials ; trial ++ ) { MDC . put ( _STR , _STR + trial ) ; retractAndAssert ( inf , store , _NUM , D , N ) ; assertSameGraphs ( tmp , store ) ; MDC . remove ( _STR ) ; } }
public Set < T > keySet ( ) { return Collections . unmodifiableSet ( map . keySet ( ) ) ; }
public void onStart ( ) { if ( mAudioMirrorBuffer == null ) { mAudioMirrorBuffer = new byte [ _NUM ] ; } if ( mStreamer != null ) { mStreamer . start ( ) ; } if ( mInsecureStreamer != null ) { mInsecureStreamer . start ( ) ; } }
@ SuppressWarnings ( _STR ) public PropagationImp ( Stack < CompositeTransaction > lineage , boolean serial , long timeout ) { serial_ = serial ; lineage_ = ( Stack < CompositeTransaction > ) lineage . clone ( ) ; timeout_ = timeout ; }
public NativeRunner ( File eclipsec ) { this . eclipsec = Objects . requireNonNull ( eclipsec ) ; }
private static String indent ( final int height ) { return CoreBaseBOp . indent ( height ) ; }
public static Calendar reduceCalendar ( Calendar calendar ) { calendar . set ( Calendar . MILLISECOND , _NUM ) ; calendar . set ( Calendar . SECOND , _NUM ) ; calendar . set ( Calendar . MINUTE , _NUM ) ; calendar . set ( Calendar . HOUR , _NUM ) ; calendar . set ( Calendar . HOUR_OF_DAY , _NUM ) ; return calendar ; }
public static String surround ( String string , String prefix , String suffix ) { if ( string . startsWith ( prefix ) == _BOOL ) { string = prefix + string ; } if ( string . endsWith ( suffix ) == _BOOL ) { string += suffix ; } return string ; }
public static Coordinate ptNotInList ( Coordinate [ ] testPts , Coordinate [ ] pts ) { for ( int i = _NUM ; i < testPts . length ; i ++ ) { Coordinate testPt = testPts [ i ] ; if ( ! isInList ( testPt , pts ) ) return testPt ; } return null ; }
public static String trimOrPad ( String str , int length , char padChar ) { String result ; if ( str == null ) { result = _STR ; } else { result = str ; } if ( result . length ( ) > length ) { return result . substring ( _NUM , length ) ; } while ( result . length ( ) < length ) { result += padChar ; } return result ; }
void scheduleToTimerPool ( ) { if ( sessionPollerPool . isPollingEnabled ( ) ) { long timeoutTime = ( session . getLatestRefreshTime ( ) + ( session . getMaxIdleTime ( ) * _NUM ) ) * _NUM ; if ( sessionPollerPool . getCacheBasedPolling ( ) ) { timeoutTime = Math . min ( ( session . getLatestRefreshTime ( ) + ( session . getMaxCachingTime ( ) * _NUM ) ) * _NUM , timeoutTime ) ; } rescheduleIfWillTimeOutBeforeExecution ( timeoutTime ) ; } else { if ( ( sessionPollerPool . isSessionCleanupEnabled ( ) ) && willExpire ( session . getMaxSessionTime ( ) ) ) { long timeoutTime = ( session . getLatestRefreshTime ( ) + ( session . getMaxSessionTime ( ) * _NUM ) ) * _NUM ; rescheduleIfWillTimeOutBeforeExecution ( timeoutTime ) ; } } }
public void resetPolicy ( ) { mPreferences . putString ( PREF_LAST_RESPONSE , Integer . toString ( Policy . RETRY ) ) ; setRetryUntil ( DEFAULT_RETRY_UNTIL ) ; setMaxRetries ( DEFAULT_MAX_RETRIES ) ; setRetryCount ( Long . parseLong ( DEFAULT_RETRY_COUNT ) ) ; setValidityTimestamp ( DEFAULT_VALIDITY_TIMESTAMP ) ; mPreferences . commit ( ) ; }
public CipherParameters decrypt ( byte [ ] in , int keyLen ) { return decrypt ( in , _NUM , in . length , keyLen ) ; }
private static void logOsInfo ( ) { Logger . appendLog ( _STR + Cfg . getOs ( ) ) ; Logger . appendLog ( _STR + Os . getOsName ( ) ) ; Logger . appendLog ( _STR + Os . platform ( ) ) ; Logger . appendLog ( _STR + System . getProperty ( _STR ) ) ; Logger . appendLog ( _STR + HostInfo . availableCpus ( ) ) ; Logger . appendLog ( _STR + HostInfo . getMaxMemory ( ) + _STR ) ; }
private void beforeValue ( ) throws JSONException { if ( stack . isEmpty ( ) ) { return ; } Scope context = peek ( ) ; if ( context == Scope . EMPTY_ARRAY ) { replaceTop ( Scope . NONEMPTY_ARRAY ) ; newline ( ) ; } else if ( context == Scope . NONEMPTY_ARRAY ) { out . append ( _STR ) ; newline ( ) ; } else if ( context == Scope . DANGLING_KEY ) { out . append ( indent == null ? _STR : _STR ) ; replaceTop ( Scope . NONEMPTY_OBJECT ) ; } else if ( context != Scope . NULL ) { throw new JSONException ( _STR ) ; } }
public static byte [ ] hash ( String input ) { if ( ! TextUtils . isEmpty ( input ) ) { try { byte [ ] inputBytes = input . getBytes ( _STR ) ; return hash ( inputBytes ) ; } catch ( UnsupportedEncodingException e ) { Log . e ( TAG , _STR + input + _STR + e . getMessage ( ) , e ) ; } } return null ; }
public static String generateTransportZoneNativeGuid ( String transportType , String deviceType , String fabricId ) { return String . format ( _STR , transportType , _deviceTypeMap . get ( deviceType ) , fabricId ) ; }
public void testAddServletWithNameAndJspFile ( ) throws Exception { String xml = WEBAPP_TEST_HEADER + _STR + _STR ; WebXml webXml = WebXmlIo . parseWebXml ( new ByteArrayInputStream ( xml . getBytes ( _STR ) ) , getEntityResolver ( ) ) ; WebXmlUtils . addJspFile ( webXml , _STR , _STR ) ; assertTrue ( WebXmlUtils . hasServlet ( webXml , _STR ) ) ; }
@ Override public boolean equalsValue ( final Object other ) { return Objects . equals ( this . value , other ) ; }
public static void error ( String msg , Throwable t ) { debugInst . debug ( IDebug . ERROR , msg , t ) ; }
public void removeEventListener ( SIPTransactionEventListener oldListener ) { eventListeners . remove ( oldListener ) ; }
public static ExecutionSystem newExecutionSystem ( URI uri , Map < String , ? > env ) throws IOException { return newExecutionSystem ( uri , env , null ) ; }
public static boolean isCommand ( IElementType type ) { return type == SQFTypes . COMMAND_TOKEN || type == SQFTypes . COMMAND || type == SQFTypes . CASE || type == SQFTypes . CASE_COMMAND ; }
public void send ( XTraceReport report ) { outgoing . offer ( report ) ; }
@ Contract ( pure = _BOOL ) public static boolean startsWithConcatenation ( @ NotNull String string , @ NotNull String ... prefixes ) { int offset = _NUM ; for ( String prefix : prefixes ) { int prefixLen = prefix . length ( ) ; if ( ! string . regionMatches ( offset , prefix , _NUM , prefixLen ) ) { return _BOOL ; } offset += prefixLen ; } return _BOOL ; }
private static int determineConsecutiveDigitCount ( CharSequence msg , int startpos ) { int count = _NUM ; int len = msg . length ( ) ; int idx = startpos ; if ( idx < len ) { char ch = msg . charAt ( idx ) ; while ( isDigit ( ch ) && idx < len ) { count ++ ; idx ++ ; if ( idx < len ) { ch = msg . charAt ( idx ) ; } } } return count ; }
public void testOrderedByDatatype ( ) throws Exception { int lastType = Integer . MIN_VALUE ; while ( typeInfoRs . next ( ) ) { String name = typeInfoRs . getString ( _STR ) ; int type = typeInfoRs . getInt ( _STR ) ; assertTrue ( _STR + type + _STR + name + _STR + lastType , type >= lastType ) ; lastType = type ; } }
private int measureShort ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) ( _NUM * mRadius + getPaddingTop ( ) + getPaddingBottom ( ) + _NUM ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
public boolean fireMapMouseClicked ( MouseEvent evt ) { if ( DEBUG ) { logger . fine ( _STR ) ; } clickHappened = _BOOL ; boolean consumed = _BOOL ; evt = new MapMouseEvent ( getParentMode ( ) , evt ) ; if ( priorityListener != null && evt . getClickCount ( ) > _NUM ) { priorityListener . mouseClicked ( evt ) ; consumed = _BOOL ; } priorityListener = null ; if ( proxy == null || evt . isShiftDown ( ) || ( proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED ) > _NUM ) { Iterator < MapMouseListener > it = iterator ( ) ; while ( it . hasNext ( ) && ! consumed ) { MapMouseListener target = it . next ( ) ; consumed = target . mouseClicked ( evt ) && consumeEvents ; if ( consumed ) { priorityListener = target ; } } } boolean ignoreConsumed = ! consumed || ( consumed && ( ( proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_CLICKED ) == _NUM ) ) ; if ( proxy != null && ignoreConsumed && ! evt . isShiftDown ( ) ) { proxy . mouseClicked ( evt ) ; consumed = _BOOL ; } return consumed ; }
public static String formatSqlValues ( String ... values ) { StringBuilder builder = new StringBuilder ( _STR ) ; for ( int i = _NUM ; i < values . length ; i ++ ) { if ( i > _NUM ) { builder . append ( _STR ) ; } builder . append ( _STR ) ; builder . append ( escapeSqlString ( values [ i ] ) ) ; builder . append ( _STR ) ; } builder . append ( _STR ) ; return builder . toString ( ) ; }
private void emitClass ( DocComment comment ) { String tagName = ( comment . getType ( ) == DocComment . CLASS ) ? _STR : _STR ; xml . append ( _STR ) ; xml . append ( tagName ) ; xml . append ( _STR ) ; xml . append ( comment . getName ( ) ) ; xml . append ( _STR ) ; xml . append ( comment . getFullname ( ) ) ; String sourcefile = comment . getSourceFile ( ) ; if ( sourcefile != null ) { xml . append ( _STR ) ; xml . append ( sourcefile ) ; } xml . append ( _STR ) ; xml . append ( comment . getNamespace ( ) ) ; xml . append ( _STR ) ; xml . append ( comment . getAccess ( ) ) ; xml . append ( _STR ) ; if ( comment . getType ( ) == DocComment . INTERFACE ) { String [ ] baseClasses = comment . getBaseclasses ( ) ; if ( baseClasses != null ) { xml . append ( _STR ) ; for ( int i = _NUM ; i < baseClasses . length ; i ++ ) { String baseclass = baseClasses [ i ] ; if ( baseclass != null ) { if ( i != _NUM ) xml . append ( _STR ) ; xml . append ( baseclass ) ; } } xml . append ( _STR ) ; } } else { xml . append ( _STR ) ; xml . append ( comment . getBaseClass ( ) ) ; xml . append ( _STR ) ; String [ ] interfaces = comment . getInterfaces ( ) ; if ( interfaces != null ) { xml . append ( _STR ) ; for ( int i = _NUM ; i < interfaces . length ; i ++ ) { String inter = interfaces [ i ] ; if ( inter != null ) { if ( i != _NUM ) xml . append ( _STR ) ; xml . append ( inter ) ; } } xml . append ( _STR ) ; } } xml . append ( _STR ) ; xml . append ( comment . isFinal ( ) ) ; xml . append ( _STR ) ; xml . append ( _STR ) ; xml . append ( comment . isDynamic ( ) ) ; xml . append ( _STR ) ; xml . append ( _STR ) ; String desc = comment . getDescription ( ) ; if ( desc != null ) appendTag ( _STR , comment . getDescription ( ) ) ; emitTags ( comment . getAllTags ( ) ) ; if ( comment . getMetadata ( ) != null ) emitMetadata ( comment . getMetadata ( ) ) ; xml . append ( _STR ) ; xml . append ( tagName ) ; xml . append ( _STR ) ; }
protected void paintContentBorderTopEdge ( Graphics g , int x , int y , int w , int h , boolean drawBroken , Rectangle selRect , boolean isContentBorderPainted ) { if ( isContentBorderPainted ) { g . setColor ( selectHighlight ) ; g . fillRect ( x , y , w - _NUM , _NUM ) ; } }
public void analyzeAllItAndWriteResults ( ) { RunResultsLoader runDir = new RunResultsLoader ( runDirectory , null ) ; PrintStream stream ; try { stream = new PrintStream ( new File ( outputDir + _STR ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; return ; } String header = _STR ; stream . println ( header ) ; double totalTTIt ; double [ ] avgRouteTTsIt ; int [ ] routeUsersIt ; for ( int i = _NUM ; i <= lastIteration ; i ++ ) { log . info ( _STR + i + _STR + lastIteration + _STR ) ; String eventsFilename = runDir . getEventsFilename ( i ) ; EventsManager eventsManager = new EventsManagerImpl ( ) ; TtAnalyzeBraess handler = new TtAnalyzeBraess ( ) ; eventsManager . addHandler ( handler ) ; MatsimEventsReader reader = new MatsimEventsReader ( eventsManager ) ; reader . readFile ( eventsFilename ) ; totalTTIt = handler . getTotalTT ( ) ; avgRouteTTsIt = handler . calculateAvgRouteTTs ( ) ; routeUsersIt = handler . getRouteUsers ( ) ; StringBuffer line = new StringBuffer ( ) ; line . append ( i + _STR + totalTTIt ) ; for ( int j = _NUM ; j < _NUM ; j ++ ) { line . append ( _STR + routeUsersIt [ j ] ) ; } for ( int j = _NUM ; j < _NUM ; j ++ ) { line . append ( _STR + avgRouteTTsIt [ j ] ) ; } stream . println ( line . toString ( ) ) ; } stream . close ( ) ; log . info ( lastIteration + _STR ) ; }
public int executeUpdate ( String sql ) throws SQLException { return Util . truncateAndConvertToInt ( executeLargeUpdate ( sql ) ) ; }
@ LayoutlibDelegate static long currentThreadTimeMillis ( ) { return System . currentTimeMillis ( ) ; }
public static Entry makeEntry ( List < String > ldifLines ) { return makeEntry ( ldifLines . toArray ( new String [ ldifLines . size ( ) ] ) ) ; }
void clearParserHighlights ( ) { for ( int i = _NUM ; i < parserHighlights . size ( ) ; i ++ ) { Object tag = parserHighlights . get ( i ) ; if ( tag instanceof LayeredHighlightInfo ) { LayeredHighlightInfo lhi = ( LayeredHighlightInfo ) tag ; if ( lhi . width > _NUM && lhi . height > _NUM ) { textArea . repaint ( lhi . x , lhi . y , lhi . width , lhi . height ) ; } } else { HighlightInfo info = ( HighlightInfo ) tag ; TextUI ui = textArea . getUI ( ) ; ui . damageRange ( textArea , info . getStartOffset ( ) , info . getEndOffset ( ) ) ; } } parserHighlights . clear ( ) ; }
@ Override public final short readShort ( ) throws IOException { dis . readFully ( work , _NUM , _NUM ) ; return ( short ) ( ( work [ _NUM ] & _NUM ) << _NUM | ( work [ _NUM ] & _NUM ) ) ; }
public int format ( int val , byte [ ] buf , int off , int len ) { if ( val == Integer . MIN_VALUE ) { if ( len > ByteFormatter . NUMBER_BASE ) { return format ( _STR , buf , off , len ) ; } else { truncationFiller ( buf , off , len ) ; return off + len ; } } int pos = Math . abs ( val ) ; int ndig = _NUM ; int dmax = ByteFormatter . NUMBER_BASE ; while ( ndig < ByteFormatter . NUMBER_BASE && pos >= dmax ) { ndig ++ ; dmax *= ByteFormatter . NUMBER_BASE ; } if ( val < _NUM ) { ndig ++ ; } if ( ndig > len || ndig > buf . length - off ) { truncationFiller ( buf , off , len ) ; return off + len ; } off += ndig ; int xoff = off - _NUM ; do { buf [ xoff ] = ByteFormatter . DIGITS [ pos % ByteFormatter . NUMBER_BASE ] ; xoff -- ; pos /= ByteFormatter . NUMBER_BASE ; } while ( pos > _NUM ) ; if ( val < _NUM ) { buf [ xoff ] = ( byte ) _STR ; } return off ; }
public void append ( char c [ ] ) { int maxlength = buffer . length - pos ; if ( c . length < maxlength ) { System . arraycopy ( c , _NUM , buffer , pos , c . length ) ; pos += c . length ; } else { System . arraycopy ( c , _NUM , buffer , pos , maxlength ) ; curr . next = new Entity ( buffer ) ; curr = curr . next ; length += buffer . length ; buffer = new char [ ( buffer . length > c . length - maxlength ) ? buffer . length : c . length - maxlength ] ; if ( c . length > maxlength ) { System . arraycopy ( c , maxlength , buffer , _NUM , c . length - maxlength ) ; pos = c . length - maxlength ; } else { pos = _NUM ; } } }
public static boolean hasPermission ( Security security , GenericValue userLogin , GenericValue orderHeader ) { if ( userLogin == null || orderHeader == null ) return _BOOL ; if ( security . hasEntityPermission ( _STR , _STR , userLogin ) ) { return _BOOL ; } else if ( security . hasEntityPermission ( _STR , _STR , userLogin ) ) { List < GenericValue > orderRoles = null ; try { orderRoles = orderHeader . getRelated ( _STR , UtilMisc . toMap ( _STR , userLogin . getString ( _STR ) ) , null , _BOOL ) ; } catch ( GenericEntityException e ) { Debug . logError ( e , _STR , module ) ; } if ( UtilValidate . isNotEmpty ( orderRoles ) ) { return _BOOL ; } } return _BOOL ; }
private boolean isAnnotation ( ) { return implInterfaces . contains ( _STR ) ; }
public final boolean isExceptionHandlerEquivalent ( BasicBlock other ) { if ( exceptionHandlers != other . exceptionHandlers ) { Enumeration < BasicBlock > e1 = getExceptionHandlers ( ) ; Enumeration < BasicBlock > e2 = other . getExceptionHandlers ( ) ; while ( e1 . hasMoreElements ( ) ) { if ( ! e2 . hasMoreElements ( ) ) return _BOOL ; if ( e1 . nextElement ( ) != e2 . nextElement ( ) ) return _BOOL ; } if ( e2 . hasMoreElements ( ) ) return _BOOL ; } return _BOOL ; }
public int hashCode ( ) { return name . hashCode ( ) ; }
public int checksum ( ) { return calculateChecksum ( compile_checksum . toString ( ) ) ; }
public boolean longLabel ( ) { return fState . longLabel ; }
public SecretBlock ( Mario player , Group parent , int stageZone , float xPos , float yPos , float yoloWidth , Image ... hitState ) { super ( BLOCK_COLLISION_DATA , xPos , yPos , _NUM , _NUM , ( Image ) null ) ; this . hitState = hitState [ _NUM ] ; yoloView = new ImageView ( hitState [ _NUM ] ) ; yoloView . setFitWidth ( yoloWidth ) ; this . parent = parent ; zone = stageZone ; }
private Socket openDataConnection ( String cmd ) throws sun . net . ftp . FtpProtocolException , IOException { Socket clientSocket ; if ( passiveMode ) { try { return openPassiveDataConnection ( cmd ) ; } catch ( sun . net . ftp . FtpProtocolException e ) { String errmsg = e . getMessage ( ) ; if ( ! errmsg . startsWith ( _STR ) && ! errmsg . startsWith ( _STR ) ) { throw e ; } } } ServerSocket portSocket ; InetAddress myAddress ; String portCmd ; if ( proxy != null && proxy . type ( ) == Proxy . Type . SOCKS ) { throw new sun . net . ftp . FtpProtocolException ( _STR ) ; } portSocket = new ServerSocket ( _NUM , _NUM , server . getLocalAddress ( ) ) ; try { myAddress = portSocket . getInetAddress ( ) ; if ( myAddress . isAnyLocalAddress ( ) ) { myAddress = server . getLocalAddress ( ) ; } portCmd = _STR + ( ( myAddress instanceof Inet6Address ) ? _STR : _STR ) + _STR + myAddress . getHostAddress ( ) + _STR + portSocket . getLocalPort ( ) + _STR ; if ( ! issueCommand ( portCmd ) || ! issueCommand ( cmd ) ) { portCmd = _STR ; byte [ ] addr = myAddress . getAddress ( ) ; for ( int i = _NUM ; i < addr . length ; i ++ ) { portCmd = portCmd + ( addr [ i ] & _NUM ) + _STR ; } portCmd = portCmd + ( ( portSocket . getLocalPort ( ) > > > _NUM ) & _NUM ) + _STR + ( portSocket . getLocalPort ( ) & _NUM ) ; issueCommandCheck ( portCmd ) ; issueCommandCheck ( cmd ) ; } if ( connectTimeout >= _NUM ) { portSocket . setSoTimeout ( connectTimeout ) ; } else { if ( defaultConnectTimeout > _NUM ) { portSocket . setSoTimeout ( defaultConnectTimeout ) ; } } clientSocket = portSocket . accept ( ) ; if ( readTimeout >= _NUM ) { clientSocket . setSoTimeout ( readTimeout ) ; } else { if ( defaultSoTimeout > _NUM ) { clientSocket . setSoTimeout ( defaultSoTimeout ) ; } } } finally { portSocket . close ( ) ; } if ( useCrypto ) { try { clientSocket = sslFact . createSocket ( clientSocket , serverAddr . getHostName ( ) , serverAddr . getPort ( ) , _BOOL ) ; } catch ( Exception ex ) { throw new IOException ( ex . getLocalizedMessage ( ) ) ; } } return clientSocket ; }
public static boolean installNormal ( Context context , String filePath ) { Intent i = new Intent ( Intent . ACTION_VIEW ) ; File file = new File ( filePath ) ; if ( ! file . exists ( ) || ! file . isFile ( ) || file . length ( ) <= _NUM ) { return _BOOL ; } i . setDataAndType ( Uri . parse ( _STR + filePath ) , _STR ) ; i . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; context . startActivity ( i ) ; return _BOOL ; }
private void createInsertList ( final IItem item , List < IItem > tempList , List < IItem > insertList , int depth , int removed ) { if ( ! tempList . contains ( item ) ) { tempList . add ( item ) ; if ( depth == _NUM ) { insertList . add ( item ) ; } if ( item . getItems ( ) != null ) { depth ++ ; for ( IItem child : item . getItems ( ) ) { createInsertList ( child , tempList , insertList , depth , removed ) ; } } } else { insertList . remove ( item ) ; removed ++ ; } }
@ SuppressWarnings ( _STR ) public int readOutlineFileMetadata ( final PdfObject OutlinesObj , final PdfObjectReader currentPdfFile ) { final int count = OutlinesObj . getInt ( PdfDictionary . Count ) ; final PdfObject FirstObj = OutlinesObj . getDictionary ( PdfDictionary . First ) ; currentPdfFile . checkResolved ( FirstObj ) ; if ( FirstObj != null ) { final Element root = OutlineDataXML . createElement ( _STR ) ; OutlineDataXML . appendChild ( root ) ; final int level = _NUM ; readOutlineLevel ( root , currentPdfFile , FirstObj , level , _BOOL ) ; } return count ; }
private int decodeRunLength ( int k ) { if ( ( k & _NUM ) == _NUM ) { return ( ( k > > > _NUM ) & _NUM ) ^ _NUM ; } else { return Integer . numberOfLeadingZeros ( k << p + ( _NUM - sp ) ) + _NUM ; } }
private static byte [ ] streamToBytes ( InputStream in , int length ) throws IOException { byte [ ] bytes = new byte [ length ] ; int count ; int pos = _NUM ; while ( pos < length && ( ( count = in . read ( bytes , pos , length - pos ) ) != - _NUM ) ) { pos += count ; } if ( pos != length ) { throw new IOException ( _STR + length + _STR + pos + _STR ) ; } return bytes ; }
private boolean decodeHandshake ( ByteBuffer socketBufferNew ) { ByteBuffer socketBuffer ; if ( tmpHandshakeBytes . capacity ( ) == _NUM ) { socketBuffer = socketBufferNew ; } else { if ( tmpHandshakeBytes . remaining ( ) < socketBufferNew . remaining ( ) ) { ByteBuffer buf = ByteBuffer . allocate ( tmpHandshakeBytes . capacity ( ) + socketBufferNew . remaining ( ) ) ; tmpHandshakeBytes . flip ( ) ; buf . put ( tmpHandshakeBytes ) ; tmpHandshakeBytes = buf ; } tmpHandshakeBytes . put ( socketBufferNew ) ; tmpHandshakeBytes . flip ( ) ; socketBuffer = tmpHandshakeBytes ; } socketBuffer . mark ( ) ; try { if ( draft == null ) { HandshakeState isflashedgecase = isFlashEdgeCase ( socketBuffer ) ; if ( isflashedgecase == HandshakeState . MATCHED ) { try { write ( ByteBuffer . wrap ( Charsetfunctions . utf8Bytes ( wsl . getFlashPolicy ( this ) ) ) ) ; close ( CloseFrame . FLASHPOLICY , _STR ) ; } catch ( InvalidDataException e ) { close ( CloseFrame . ABNORMAL_CLOSE , _STR , _BOOL ) ; } return _BOOL ; } } HandshakeState handshakestate = null ; try { if ( role == Role . SERVER ) { if ( draft == null ) { for ( Draft d : knownDrafts ) { d = d . copyInstance ( ) ; try { d . setParseMode ( role ) ; socketBuffer . reset ( ) ; Handshakedata tmphandshake = d . translateHandshake ( socketBuffer ) ; if ( tmphandshake instanceof ClientHandshake == _BOOL ) { flushAndClose ( CloseFrame . PROTOCOL_ERROR , _STR , _BOOL ) ; return _BOOL ; } ClientHandshake handshake = ( ClientHandshake ) tmphandshake ; handshakestate = d . acceptHandshakeAsServer ( handshake ) ; if ( handshakestate == HandshakeState . MATCHED ) { resourceDescriptor = handshake . getResourceDescriptor ( ) ; ServerHandshakeBuilder response ; try { response = wsl . onWebsocketHandshakeReceivedAsServer ( this , d , handshake ) ; } catch ( InvalidDataException e ) { flushAndClose ( e . getCloseCode ( ) , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } catch ( RuntimeException e ) { wsl . onWebsocketError ( this , e ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } write ( d . createHandshake ( d . postProcessHandshakeResponseAsServer ( handshake , response ) , role ) ) ; draft = d ; open ( handshake ) ; return _BOOL ; } } catch ( InvalidHandshakeException e ) { } } if ( draft == null ) { close ( CloseFrame . PROTOCOL_ERROR , _STR ) ; } return _BOOL ; } else { Handshakedata tmphandshake = draft . translateHandshake ( socketBuffer ) ; if ( tmphandshake instanceof ClientHandshake == _BOOL ) { flushAndClose ( CloseFrame . PROTOCOL_ERROR , _STR , _BOOL ) ; return _BOOL ; } ClientHandshake handshake = ( ClientHandshake ) tmphandshake ; handshakestate = draft . acceptHandshakeAsServer ( handshake ) ; if ( handshakestate == HandshakeState . MATCHED ) { open ( handshake ) ; return _BOOL ; } else { close ( CloseFrame . PROTOCOL_ERROR , _STR ) ; } return _BOOL ; } } else if ( role == Role . CLIENT ) { draft . setParseMode ( role ) ; Handshakedata tmphandshake = draft . translateHandshake ( socketBuffer ) ; if ( tmphandshake instanceof ServerHandshake == _BOOL ) { flushAndClose ( CloseFrame . PROTOCOL_ERROR , _STR , _BOOL ) ; return _BOOL ; } ServerHandshake handshake = ( ServerHandshake ) tmphandshake ; handshakestate = draft . acceptHandshakeAsClient ( handshakerequest , handshake ) ; if ( handshakestate == HandshakeState . MATCHED ) { try { wsl . onWebsocketHandshakeReceivedAsClient ( this , handshakerequest , handshake ) ; } catch ( InvalidDataException e ) { flushAndClose ( e . getCloseCode ( ) , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } catch ( RuntimeException e ) { wsl . onWebsocketError ( this , e ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } open ( handshake ) ; return _BOOL ; } else { close ( CloseFrame . PROTOCOL_ERROR , _STR + draft + _STR ) ; } } } catch ( InvalidHandshakeException e ) { close ( e ) ; } } catch ( IncompleteHandshakeException e ) { if ( tmpHandshakeBytes . capacity ( ) == _NUM ) { socketBuffer . reset ( ) ; int newsize = e . getPreferedSize ( ) ; if ( newsize == _NUM ) { newsize = socketBuffer . capacity ( ) + _NUM ; } else { assert ( e . getPreferedSize ( ) >= socketBuffer . remaining ( ) ) ; } tmpHandshakeBytes = ByteBuffer . allocate ( newsize ) ; tmpHandshakeBytes . put ( socketBufferNew ) ; } else { tmpHandshakeBytes . position ( tmpHandshakeBytes . limit ( ) ) ; tmpHandshakeBytes . limit ( tmpHandshakeBytes . capacity ( ) ) ; } } return _BOOL ; }
public NoDuplicateValueGlobalConstraint ( AbstractParameter < ? , ? > ... parameters ) { this . parameters = Arrays . asList ( parameters ) ; }
@ SuppressWarnings ( _STR ) public RhythmOverlay inflateOverlay ( String configString ) { List < String > configStrings = Arrays . asList ( configString . split ( _STR ) ) ; return inflateOverlayInternal ( configStrings , Collections . EMPTY_MAP , _NUM ) ; }
public static RevocationHash bruteForceHash ( byte [ ] seed , byte [ ] target , int maxChildTries , int maxSiblingTries ) { for ( int i = _NUM ; i < maxChildTries ; i ++ ) { for ( int j = _NUM ; j < maxSiblingTries ; j ++ ) { RevocationHash test = HashDerivation . calculateRevocationHash ( seed , _NUM , j ) ; if ( Arrays . equals ( test . getSecretHash ( ) , target ) ) { return new RevocationHash ( i , j , test . getSecret ( ) , test . getSecretHash ( ) ) ; } } seed = Tools . hashSecret ( seed ) ; } return null ; }
public FancyLoader ( ClassLoader parent ) { super ( parent ) ; try { mDexClass = parent . loadClass ( _STR ) ; } catch ( ClassNotFoundException cnfe ) { } }
public boolean isSourceModified ( Resource resource ) { boolean modified = _BOOL ; String fileName = resource . getName ( ) ; String path = ( String ) templatePaths . get ( fileName ) ; File currentFile = null ; for ( int i = _NUM ; currentFile == null && i < paths . size ( ) ; i ++ ) { String testPath = ( String ) paths . get ( i ) ; File testFile = new File ( testPath , fileName ) ; if ( testFile . canRead ( ) ) { currentFile = testFile ; } } File file = new File ( path , fileName ) ; if ( currentFile == null || ! file . exists ( ) ) { } else if ( currentFile . equals ( file ) && file . canRead ( ) ) { modified = ( file . lastModified ( ) != resource . getLastModified ( ) ) ; } return modified ; }
protected void flip ( BufferCapabilities . FlipContents flipAction ) { if ( peer != null ) { Image backBuffer = getBackBuffer ( ) ; if ( backBuffer != null ) { peer . flip ( _NUM , _NUM , backBuffer . getWidth ( null ) , backBuffer . getHeight ( null ) , flipAction ) ; } } else { throw new IllegalStateException ( _STR ) ; } }
protected void loadValue ( String sValue ) { try { value = Byte . parseByte ( sValue . trim ( ) ) ; } catch ( NumberFormatException nfe ) { revertToDefault ( ) ; } }
public static Map < String , String > allNamespaces ( SOAPElement ele ) { Map < String , String > nsList = new TreeMap < String , String > ( ) ; log . trace ( _STR + ele . getNodeName ( ) ) ; allNamespaces ( ele , nsList ) ; log . trace ( _STR + nsList ) ; return nsList ; }
private void drawHook ( Canvas canvas ) { Path hookPath = new Path ( ) ; double sweepAngle = Math . PI / _NUM * _NUM ; float y = ( float ) Math . sin ( sweepAngle ) * ( getBigCircleRadius ( ) ) + rectF . height ( ) / _NUM ; float x = ( float ) Math . cos ( sweepAngle ) * ( getBigCircleRadius ( ) ) + rectF . width ( ) / _NUM ; float i = getBigCircleRadius ( ) / _NUM ; hookPath . addRoundRect ( new RectF ( i + i / _NUM , i + i / _NUM , i + i / _NUM + _NUM , i + i + i / _NUM ) , _NUM , _NUM , Path . Direction . CCW ) ; hookPath . addRoundRect ( new RectF ( i + i / _NUM , ( i + i + i / _NUM ) - _NUM , i + i / _NUM + i + i , i + i + i / _NUM + _NUM ) , _NUM , _NUM , Path . Direction . CCW ) ; Matrix matrix = new Matrix ( ) ; matrix . reset ( ) ; int restoreCount = canvas . getSaveCount ( ) ; hookPath . close ( ) ; canvas . rotate ( - _NUM , rectF . centerX ( ) , rectF . centerY ( ) ) ; canvas . drawPath ( hookPath , mHookPaint ) ; canvas . restoreToCount ( restoreCount ) ; }
public static byte [ ] toByteArray ( Bitmap bitmap , Bitmap . CompressFormat format , int quality ) { ByteArrayOutputStream out = null ; try { out = new ByteArrayOutputStream ( ) ; bitmap . compress ( format , quality , out ) ; return out . toByteArray ( ) ; } finally { CloseableUtils . close ( out ) ; } }
public void continueButtonActionPerformed ( java . awt . event . ActionEvent e ) { if ( testRunning && testSuspended ) { testSuspended = _BOOL ; if ( wrapTest ) { statusText1 . setText ( _STR ) ; statusText1 . setVisible ( _BOOL ) ; } } }
@ HLEFunction ( nid = _NUM , version = _NUM ) public int sceNetAdhocPtpFlush ( @ CheckArgument ( _STR ) int id , int timeout , int nonblock ) { return _NUM ; }
public void reset ( ) { displayCache . clear ( ) ; cachedID . clear ( ) ; }
private void copyDirectory ( File source , File dest ) throws IOException { for ( File f : source . listFiles ( ) ) { File sourceFile = new File ( source , f . getName ( ) ) ; File destFile = new File ( dest , f . getName ( ) ) ; if ( f . isDirectory ( ) ) { destFile . mkdirs ( ) ; copyDirectory ( sourceFile , destFile ) ; } else copyFile ( sourceFile , destFile ) ; } }
private synchronized void rebuildJournal ( ) throws IOException { if ( mJournalWriter != null ) { mJournalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new FileWriter ( mJournalFileTmp ) , IO_BUFFER_SIZE ) ; writer . write ( MAGIC ) ; writer . write ( _STR ) ; writer . write ( VERSION_1 ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( mAppVersion ) ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; for ( CacheEntry cacheEntry : mLruEntries . values ( ) ) { if ( cacheEntry . isUnderEdit ( ) ) { writer . write ( sACTION_LIST [ ACTION_DIRTY ] + _STR + cacheEntry . getKey ( ) + _STR + cacheEntry . getSize ( ) + _STR ) ; } else { writer . write ( sACTION_LIST [ ACTION_CLEAN ] + _STR + cacheEntry . getKey ( ) + _STR + cacheEntry . getSize ( ) + _STR ) ; } } writer . close ( ) ; mJournalFileTmp . renameTo ( mJournalFile ) ; mJournalWriter = new BufferedWriter ( new FileWriter ( mJournalFile , _BOOL ) , IO_BUFFER_SIZE ) ; }
private void recordLogData ( ) { try { int size = mRecordingData . size ( ) ; if ( size == _NUM ) { return ; } Vector < String > recordingData = new Vector < > ( mRecordingData ) ; File logDir = Constants . getRecordDir ( this ) ; logDir . mkdirs ( ) ; File logFile = new File ( logDir , mRecordingFilename ) ; FileWriter logFileWriter = new FileWriter ( logFile , _BOOL ) ; for ( int i = _NUM ; i < size ; i ++ ) { logFileWriter . append ( recordingData . elementAt ( i ) + _STR ) ; mRecordingData . removeElementAt ( _NUM ) ; } recordingData . removeAllElements ( ) ; logFileWriter . close ( ) ; } catch ( Exception e ) { Log . e ( LOG_TAG , _STR + e . toString ( ) ) ; } }
private static List < Command > loadRewrites ( String str ) { assert str != null ; List < Command > commands = new ArrayList < > ( ) ; for ( String line : str . split ( _STR ) ) { addLine ( commands , line ) ; } return commands ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( _NUM ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addAll ( Collections . list ( super . listOptions ( ) ) ) ; return newVector . elements ( ) ; }
@ Override public StateConnection onCloseRead ( ) { ConnectionProtocol request = request ( ) ; if ( request != null ) { request . onCloseRead ( ) ; } _sequenceClose . set ( _sequenceRead . get ( ) ) ; if ( _sequenceFlush . get ( ) < _sequenceClose . get ( ) ) { _isClosePending . set ( _BOOL ) ; if ( _sequenceFlush . get ( ) < _sequenceClose . get ( ) ) { return StateConnection . CLOSE_READ_S ; } else { _isClosePending . set ( _BOOL ) ; return StateConnection . CLOSE ; } } else { return StateConnection . CLOSE ; } }
private Map < UUID , int [ ] > reducers ( Collection < ClusterNode > top , Map < UUID , Collection < HadoopInputSplit > > mappers , int reducerCnt ) { int totalWeight = _NUM ; List < WeightedNode > nodes = new ArrayList < > ( top . size ( ) ) ; for ( ClusterNode node : top ) { Collection < HadoopInputSplit > split = mappers . get ( node . id ( ) ) ; int weight = reducerNodeWeight ( node , split != null ? split . size ( ) : _NUM ) ; nodes . add ( new WeightedNode ( node . id ( ) , weight , weight ) ) ; totalWeight += weight ; } int totalAdjustedWeight = _NUM ; for ( WeightedNode node : nodes ) { node . floatWeight = ( ( float ) node . weight * reducerCnt ) / totalWeight ; node . weight = Math . round ( node . floatWeight ) ; totalAdjustedWeight += node . weight ; } Collections . sort ( nodes ) ; if ( totalAdjustedWeight > reducerCnt ) { ListIterator < WeightedNode > iter = nodes . listIterator ( nodes . size ( ) - _NUM ) ; while ( totalAdjustedWeight != reducerCnt ) { if ( ! iter . hasPrevious ( ) ) iter = nodes . listIterator ( nodes . size ( ) - _NUM ) ; WeightedNode node = iter . previous ( ) ; if ( node . weight > _NUM ) { node . weight -= _NUM ; totalAdjustedWeight -- ; } } } else if ( totalAdjustedWeight < reducerCnt ) { ListIterator < WeightedNode > iter = nodes . listIterator ( _NUM ) ; while ( totalAdjustedWeight != reducerCnt ) { if ( ! iter . hasNext ( ) ) iter = nodes . listIterator ( _NUM ) ; WeightedNode node = iter . next ( ) ; if ( node . floatWeight > _NUM ) { node . weight += _NUM ; totalAdjustedWeight ++ ; } } } int idx = _NUM ; Map < UUID , int [ ] > reducers = new HashMap < > ( nodes . size ( ) , _NUM ) ; for ( WeightedNode node : nodes ) { if ( node . weight > _NUM ) { int [ ] arr = new int [ node . weight ] ; for ( int i = _NUM ; i < arr . length ; i ++ ) arr [ i ] = idx ++ ; reducers . put ( node . nodeId , arr ) ; } } return reducers ; }
public void httpRequest ( HttpRequestEvent e ) throws java . io . IOException { String request = e . getRequest ( ) ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + request + _STR ) ; } if ( request . charAt ( _NUM ) == _STR ) { request = request . substring ( _NUM , request . length ( ) ) ; } int index = _NUM ; index = request . indexOf ( _STR ) ; if ( index != - _NUM ) { request = request . substring ( index + _NUM , request . length ( ) ) ; Debug . message ( _STR , _STR ) ; } else { Debug . message ( _STR , _STR ) ; } try { iServer . handleRequest ( request , e . getOutputStream ( ) ) ; } catch ( IOException ioe ) { Debug . error ( _STR + ioe . getMessage ( ) ) ; } catch ( MapRequestFormatException exception ) { String message = _STR + exception . getMessage ( ) + _STR + ErrorMessage ; HttpConnection . writeHttpResponse ( e . getOutputStream ( ) , HttpConnection . CONTENT_PLAIN , message ) ; } }
public void testConstructorBytesNegative2 ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM } ; byte rBytes [ ] = { - _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , aNumber . signum ( ) ) ; }
public String format ( double val ) { DecimalFormat df = getDoubleFormat ( ) ; if ( df != null ) { return df . format ( val ) ; } return Double . toString ( val ) ; }
public void removePositions ( Collection < Integer > positions ) { ArrayList < Integer > positionsList = new ArrayList < Integer > ( positions ) ; Collections . sort ( positionsList ) ; Collections . reverse ( positionsList ) ; for ( int position : positionsList ) { mItems . remove ( position ) ; } notifyDataSetChanged ( ) ; }
private void resetShapeBounds ( ) { RoundRectangle2D . Double rrect = ( RoundRectangle2D . Double ) shape ; rrect . setRoundRect ( _NUM , _NUM , getBounds ( ) . width - _NUM , getBounds ( ) . height - _NUM , _NUM , _NUM ) ; }
public static Colour attemptToGetAsColour ( String part ) { Colour col = null ; try { col = Colour . valueOf ( part . toUpperCase ( ) ) ; } catch ( Exception e ) { } return col ; }
public final ArrayList < Move > removeNonOptimal ( Position pos , ArrayList < Move > moveList ) { ArrayList < Move > optimalMoves = new ArrayList < Move > ( ) ; ArrayList < Move > unknownMoves = new ArrayList < Move > ( ) ; final int MATE0 = _NUM ; int bestScore = - _NUM ; UndoInfo ui = new UndoInfo ( ) ; for ( Move m : moveList ) { pos . makeMove ( m , ui ) ; int pliesToDraw = Math . max ( _NUM - pos . halfMoveClock , _NUM ) ; GtbProbeResult res = gtbProbe ( pos ) ; pos . unMakeMove ( m , ui ) ; if ( res . result == GtbProbeResult . UNKNOWN ) { unknownMoves . add ( m ) ; } else { int wScore ; if ( res . result == GtbProbeResult . WMATE ) { if ( res . pliesToMate <= pliesToDraw ) wScore = MATE0 - res . pliesToMate ; else wScore = _NUM ; } else if ( res . result == GtbProbeResult . BMATE ) { if ( res . pliesToMate <= pliesToDraw ) wScore = - ( MATE0 - res . pliesToMate ) ; else wScore = - _NUM ; } else { wScore = _NUM ; } int score = pos . whiteMove ? wScore : - wScore ; if ( score > bestScore ) { optimalMoves . clear ( ) ; optimalMoves . add ( m ) ; bestScore = score ; } else if ( score == bestScore ) { optimalMoves . add ( m ) ; } else { } } } for ( Move m : unknownMoves ) optimalMoves . add ( m ) ; return ( optimalMoves . size ( ) < moveList . size ( ) ) ? optimalMoves : null ; }
public int rank ( ) { double eps = Math . pow ( _NUM , - _NUM ) ; double tol = Math . max ( m , n ) * s [ _NUM ] * eps ; int r = _NUM ; for ( int i = _NUM ; i < s . length ; i ++ ) { if ( s [ i ] > tol ) { r ++ ; } } return r ; }
protected void onPageScrolled ( int position , float offset , int offsetPixels ) { if ( mDecorChildCount > _NUM ) { final int scrollX = getScrollX ( ) ; int paddingLeft = getPaddingLeft ( ) ; int paddingRight = getPaddingRight ( ) ; final int width = getWidth ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( ! lp . isDecor ) continue ; final int hgrav = lp . gravity & Gravity . HORIZONTAL_GRAVITY_MASK ; int childLeft = _NUM ; switch ( hgrav ) { default : childLeft = paddingLeft ; break ; case Gravity . LEFT : childLeft = paddingLeft ; paddingLeft += child . getWidth ( ) ; break ; case Gravity . CENTER_HORIZONTAL : childLeft = Math . max ( ( width - child . getMeasuredWidth ( ) ) / _NUM , paddingLeft ) ; break ; case Gravity . RIGHT : childLeft = width - paddingRight - child . getMeasuredWidth ( ) ; paddingRight += child . getMeasuredWidth ( ) ; break ; } childLeft += scrollX ; final int childOffset = childLeft - child . getLeft ( ) ; if ( childOffset != _NUM ) { child . offsetLeftAndRight ( childOffset ) ; } } } if ( mOnPageChangeListener != null ) { mOnPageChangeListener . onPageScrolled ( position , offset , offsetPixels ) ; } if ( mInternalPageChangeListener != null ) { mInternalPageChangeListener . onPageScrolled ( position , offset , offsetPixels ) ; } if ( mPageTransformer != null ) { final int scrollX = getScrollX ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( lp . isDecor ) continue ; final float transformPos = ( float ) ( child . getLeft ( ) - scrollX ) / getClientWidth ( ) ; mPageTransformer . transformPage ( child , transformPos ) ; } } mCalledSuper = _BOOL ; }
public static void executeRandomModifiableVariableModification ( ModifiableVariableHolder object ) { Field field = object . getRandomModifiableVariableField ( ) ; executeModifiableVariableModification ( object , field ) ; }
public static boolean save ( File file , String content ) { boolean result ; BufferedWriter writer ; writer = null ; try { writer = new BufferedWriter ( new FileWriter ( file ) ) ; writer . write ( content ) ; writer . flush ( ) ; result = _BOOL ; } catch ( Exception e ) { e . printStackTrace ( ) ; result = _BOOL ; } finally { if ( writer != null ) { try { writer . close ( ) ; } catch ( Exception e ) { } } } return result ; }
private void deleteOldTemp ( File fileCfg ) { BufferedReader reader = null ; try { int count = _NUM ; reader = new BufferedReader ( new FileReader ( fileCfg ) ) ; String sLine ; while ( ( sLine = reader . readLine ( ) ) != null ) { File file = new File ( sLine ) ; if ( ! file . exists ( ) ) { continue ; } if ( file . delete ( ) ) { count ++ ; } else { hsDeleteOnExit . add ( file ) ; } } logDebug ( LogArea . CONFIG , _STR , count , fileCfg . getAbsolutePath ( ) ) ; } catch ( IOException e ) { } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e ) { } } } }
public void proposeTree ( ) throws OperatorFailedException { NodeRef i ; double oldMinAge , newMinAge , newRange , oldRange , newAge , q ; final int nodeCount = tree . getNodeCount ( ) ; do { i = tree . getNode ( MathUtils . nextInt ( nodeCount ) ) ; } while ( tree . getRoot ( ) == i ) ; final NodeRef iP = tree . getParent ( i ) ; NodeRef j = tree . getNode ( MathUtils . nextInt ( nodeCount ) ) ; NodeRef k = tree . getParent ( j ) ; while ( ( k != null && tree . getNodeHeight ( k ) <= tree . getNodeHeight ( i ) ) || ( i == j ) ) { j = tree . getNode ( MathUtils . nextInt ( nodeCount ) ) ; k = tree . getParent ( j ) ; } if ( j == tree . getRoot ( ) || iP == tree . getRoot ( ) ) { throw new OperatorFailedException ( _STR ) ; } if ( k == iP || j == iP || k == i ) throw new OperatorFailedException ( _STR ) ; final NodeRef CiP = getOtherChild ( tree , iP , i ) ; NodeRef PiP = tree . getParent ( iP ) ; newMinAge = Math . max ( tree . getNodeHeight ( i ) , tree . getNodeHeight ( j ) ) ; newRange = tree . getNodeHeight ( k ) - newMinAge ; newAge = newMinAge + ( MathUtils . nextDouble ( ) * newRange ) ; oldMinAge = Math . max ( tree . getNodeHeight ( i ) , tree . getNodeHeight ( CiP ) ) ; oldRange = tree . getNodeHeight ( PiP ) - oldMinAge ; q = newRange / Math . abs ( oldRange ) ; tree . beginTreeEdit ( ) ; if ( j == tree . getRoot ( ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . addChild ( iP , j ) ; tree . addChild ( PiP , CiP ) ; tree . setRoot ( iP ) ; } else if ( iP == tree . getRoot ( ) ) { tree . removeChild ( k , j ) ; tree . removeChild ( iP , CiP ) ; tree . addChild ( iP , j ) ; tree . addChild ( k , iP ) ; tree . setRoot ( CiP ) ; } else { tree . removeChild ( k , j ) ; tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . addChild ( iP , j ) ; tree . addChild ( k , iP ) ; tree . addChild ( PiP , CiP ) ; } tree . setNodeHeight ( iP , newAge ) ; tree . endTreeEdit ( ) ; logq = Math . log ( q ) ; }
public void flush ( ) { final BigdataSailRepositoryConnection cxn = tlTx . get ( ) ; if ( cxn != null ) { Code . wrapThrow ( null ) ; } }
@ Override public BufferedImage JPEGToRGBImage ( final byte [ ] data , final int ww , final int hh , final int pX , final int pY ) { BufferedImage image = null ; Raster ras = JPEGDecoder . getRasterFromJPEG ( data , _STR ) ; if ( ras != null ) { ras = cleanupRaster ( ras , pX , pY , componentCount ) ; final int w = ras . getWidth ( ) ; final int h = ras . getHeight ( ) ; final DataBufferByte rgb = ( DataBufferByte ) ras . getDataBuffer ( ) ; image = createImage ( w , h , rgb . getData ( ) ) ; } return image ; }
public void despawn ( VisibleObject object ) { despawn ( object , _BOOL ) ; }
public String eventTopic ( String eventId ) { if ( eventId == null ) { eventId = _STR ; } return evtTopic . replace ( _STR , eventId ) ; }
public MatchResult match ( ) { if ( ! matchSuccessful ) { throw new IllegalStateException ( ) ; } return matcher . toMatchResult ( ) ; }
@ SuppressWarnings ( _STR ) public static void createProjectConstraint ( ZipFile zip , Project aProject , RepositoryService aRepository ) throws IOException { for ( Enumeration zipEnumerate = zip . entries ( ) ; zipEnumerate . hasMoreElements ( ) ; ) { ZipEntry entry = ( ZipEntry ) zipEnumerate . nextElement ( ) ; String entryName = normalizeEntryName ( entry ) ; if ( entryName . startsWith ( CONSTRAINTS ) ) { String filename = FilenameUtils . getName ( entry . getName ( ) ) ; ConstraintSet constraintSet = new ConstraintSet ( ) ; constraintSet . setProject ( aProject ) ; constraintSet . setName ( filename ) ; aRepository . createConstraintSet ( constraintSet ) ; aRepository . writeConstraintSet ( constraintSet , zip . getInputStream ( entry ) ) ; LOG . info ( _STR + filename + _STR + aProject . getName ( ) + _STR + aProject . getId ( ) + _STR ) ; } } }
static synchronized void computePRF_SSLv3 ( byte [ ] out , byte [ ] secret , byte [ ] seed ) { if ( sha == null ) { init ( ) ; } int pos = _NUM ; int iteration = _NUM ; byte [ ] digest ; while ( pos < out . length ) { byte [ ] pref = new byte [ iteration ] ; Arrays . fill ( pref , ( byte ) ( _NUM + iteration ++ ) ) ; sha . update ( pref ) ; sha . update ( secret ) ; sha . update ( seed ) ; md5 . update ( secret ) ; md5 . update ( sha . digest ( ) ) ; digest = md5 . digest ( ) ; if ( pos + _NUM > out . length ) { System . arraycopy ( digest , _NUM , out , pos , out . length - pos ) ; pos = out . length ; } else { System . arraycopy ( digest , _NUM , out , pos , _NUM ) ; pos += _NUM ; } } }
public String decode ( String pString ) throws DecoderException { if ( pString == null ) { return null ; } try { return decode ( pString , getDefaultCharset ( ) ) ; } catch ( UnsupportedEncodingException e ) { throw new DecoderException ( e . getMessage ( ) ) ; } }
public Operation copyTo ( Extent target ) { BlockTransformExtent extent = new BlockTransformExtent ( original , transform , worldData . getBlockRegistry ( ) ) ; ForwardExtentCopy copy = new ForwardExtentCopy ( extent , original . getRegion ( ) , original . getOrigin ( ) , target , original . getOrigin ( ) ) ; copy . setTransform ( transform ) ; return copy ; }
@ CallerSensitive public Class < ? > forClass ( ) { if ( cl == null ) { return null ; } requireInitialized ( ) ; if ( System . getSecurityManager ( ) != null ) { Class < ? > caller = Reflection . getCallerClass ( ) ; if ( ReflectUtil . needsPackageAccessCheck ( caller . getClassLoader ( ) , cl . getClassLoader ( ) ) ) { ReflectUtil . checkPackageAccess ( cl ) ; } } return cl ; }
private void pathStyleHelper ( String style , String offset ) { if ( style == null ) { return ; } if ( style . equals ( _STR ) ) { strokePaint . setPathEffect ( null ) ; return ; } StringTokenizer st = new StringTokenizer ( style , _STR ) ; int count = st . countTokens ( ) ; float [ ] intervals = new float [ ( count & _NUM ) == _NUM ? count * _NUM : count ] ; float max = _NUM ; float current = _NUM ; int i = _NUM ; while ( st . hasMoreTokens ( ) ) { intervals [ i ++ ] = current = toFloat ( st . nextToken ( ) , current ) ; max += current ; } for ( int start = _NUM ; i < intervals . length ; i ++ , start ++ ) { max += intervals [ i ] = intervals [ start ] ; } float off = _NUM ; if ( offset != null ) { try { off = Float . parseFloat ( offset ) % max ; } catch ( NumberFormatException e ) { } } strokePaint . setPathEffect ( new DashPathEffect ( intervals , off ) ) ; }
private float colorToAngle ( int color ) { float [ ] colors = new float [ _NUM ] ; Color . colorToHSV ( color , colors ) ; return ( float ) Math . toRadians ( - colors [ _NUM ] ) ; }
private Size parseOldBoundedSize ( String token , boolean setMax ) { int semicolonIndex = token . indexOf ( _STR ) ; String sizeToken1 = token . substring ( _NUM , semicolonIndex ) ; String sizeToken2 = token . substring ( semicolonIndex + _NUM , token . length ( ) - _NUM ) ; Size size1 = parseAtomicSize ( sizeToken1 ) ; Size size2 = parseAtomicSize ( sizeToken2 ) ; if ( isConstant ( size1 ) ) { if ( size2 instanceof Sizes . ComponentSize ) { return new BoundedSize ( size2 , setMax ? null : size1 , setMax ? size1 : null ) ; } throw new IllegalArgumentException ( _STR ) ; } if ( isConstant ( size2 ) ) { return new BoundedSize ( size1 , setMax ? null : size2 , setMax ? size2 : null ) ; } throw new IllegalArgumentException ( _STR ) ; }
Builder addEncodedQueryParameter ( String encodedName , String encodedValue ) { if ( encodedName == null ) throw new IllegalArgumentException ( _STR ) ; if ( encodedQueryNamesAndValues == null ) encodedQueryNamesAndValues = new ArrayList < > ( ) ; encodedQueryNamesAndValues . add ( canonicalize ( encodedName , QUERY_COMPONENT_ENCODE_SET , _BOOL , _BOOL ) ) ; encodedQueryNamesAndValues . add ( encodedValue != null ? canonicalize ( encodedValue , QUERY_COMPONENT_ENCODE_SET , _BOOL , _BOOL ) : null ) ; return this ; }
private static a createImageLink ( String AD_Language , String name , String js_command , boolean enabled , boolean pressed ) { a img = new a ( _STR , createImage ( AD_Language , name ) ) ; if ( ! pressed || ! enabled ) img . setID ( _STR ) ; else img . setID ( _STR ) ; if ( js_command == null ) js_command = _STR ; if ( js_command . length ( ) > _NUM && enabled ) { if ( js_command . startsWith ( _STR ) ) img . setOnClick ( js_command ) ; else img . setOnClick ( _STR + name + _STR + js_command + _STR ) ; } img . setClass ( _STR ) ; img . setOnMouseOver ( _STR + name + _STR ) ; img . setOnMouseOut ( _STR ) ; img . setOnBlur ( _STR ) ; return img ; }
public Namespace ( PrincipalUser creator , String qualifier , PrincipalUser owner , Set < PrincipalUser > users ) { super ( creator ) ; setQualifier ( qualifier ) ; setOwner ( owner ) ; if ( users != null && ! users . isEmpty ( ) ) { setUsers ( users ) ; } addUser ( owner ) ; }
public final int decrementAndGet ( ) { return unsafe . getAndAddInt ( this , valueOffset , - _NUM ) - _NUM ; }
public void update ( long dt , float ratioY ) { double step = _NUM * Math . PI / POINTS_PER_CIRCLE ; angle += dt * BUBBLE_D_ANGLE ; float fromX = startX + ( float ) ( _NUM * Math . sin ( angle ) ) ; float toX = fromX + size ; float fromY = this . fromY + dt * speed ; float toY = fromY + size ; centerY += dt * virtualSpeed ; getColor ( ) [ _NUM ] = ( TOP_Y - centerY / TOP_Y ) ; vertexBuffer . put ( _NUM , Utils . normalizeGl ( _NUM , fromX , toX ) ) ; vertexBuffer . put ( _NUM , Utils . normalizeGl ( centerY * ratioY , fromY , toY ) ) ; for ( int i = _NUM ; i <= POINTS_PER_CIRCLE ; i ++ ) { vertexBuffer . put ( COORDS_PER_VERTEX * i , Utils . normalizeGl ( ( float ) Math . sin ( - Math . PI + step * i ) , fromX , toX ) ) ; vertexBuffer . put ( COORDS_PER_VERTEX * i + _NUM , Utils . normalizeGl ( ( float ) Math . cos ( - Math . PI + step * i ) * ratioY , fromY , toY ) ) ; } this . fromY = fromY ; }
public final void clear ( ) { if ( GWT . isScript ( ) ) { jsArray . clear ( ) ; } else { javaArray . clear ( ) ; } }
void fullyLock ( ) { putLock . lock ( ) ; takeLock . lock ( ) ; }
@ Override public synchronized void clear ( ) { File [ ] files = mRootDirectory . listFiles ( ) ; if ( files != null ) { for ( File file : files ) { file . delete ( ) ; } } mEntries . clear ( ) ; VolleyLog . d ( _STR ) ; }
private void updatePodcastPublicationDateAndLastMediaUrl ( Episode episode , Podcast podcast ) { Date podcastPublicationDate = podcast . getPublicationDate ( ) ; boolean episodePubDateIsMoreRecent = episode . getPublicationDate ( ) != null && ( podcastPublicationDate == null || podcastPublicationDate . before ( episode . getPublicationDate ( ) ) ) ; if ( episodePubDateIsMoreRecent ) { podcast . setPublicationDate ( episode . getPublicationDate ( ) ) ; podcast . setLastEpisodeMediaUrl ( episode . getMediaUrl ( ) ) ; } }
private void removeOurUIs ( ) { for ( String uiName : UI_LIST ) { uiDefaults . remove ( uiName + _STR ) ; } }
public void makeImmutable ( ) { }
public static < O > KNNQuery < O > precomputedKNNQuery ( Database database , Relation < O > relation , DistanceQuery < O > dq , int k ) { KNNQuery < O > knnq = database . getKNNQuery ( dq , k , DatabaseQuery . HINT_HEAVY_USE , DatabaseQuery . HINT_OPTIMIZED_ONLY , DatabaseQuery . HINT_NO_CACHE ) ; if ( knnq instanceof PreprocessorKNNQuery ) { return knnq ; } MaterializeKNNPreprocessor < O > preproc = new MaterializeKNNPreprocessor < > ( relation , dq . getDistanceFunction ( ) , k ) ; preproc . initialize ( ) ; return preproc . getKNNQuery ( dq , k ) ; }
public static SortedSet < Integer > adjustPosition ( Set < Integer > positions , int startPosition , int endPosition , int adjustBy ) { SortedSet < Integer > newPositions = new TreeSet < > ( ) ; for ( Integer entry : positions ) { int position = entry ; if ( position < startPosition || position > endPosition ) { newPositions . add ( position ) ; } else if ( adjustBy > _NUM ) { newPositions . add ( position + adjustBy ) ; } else if ( adjustBy < _NUM ) { if ( position > startPosition + adjustBy && position <= startPosition ) { ; } else { newPositions . add ( position + adjustBy ) ; } } } return newPositions ; }
private static void addId ( final StringBuilder buf , final byte [ ] id ) { buf . append ( _STR ) ; boolean backslash = _BOOL ; for ( final byte b : id ) { buf . append ( ( char ) ( b & _NUM ) ) ; if ( b == _STR && backslash ) { buf . append ( _STR ) ; } else { backslash = b == _STR ; } } buf . append ( _STR ) ; }
private ResolvedMigration createAvailableMigration ( int version ) { ResolvedMigration migration = new ResolvedMigration ( ) ; migration . setVersion ( MigrationVersion . fromVersion ( Integer . toString ( version ) ) ) ; migration . setDescription ( _STR ) ; migration . setScript ( _STR ) ; migration . setType ( MigrationType . CQL ) ; return migration ; }
public void comment ( String data ) throws SAXException { m_docIsEmpty = _BOOL ; final int length = data . length ( ) ; if ( length > m_charsBuff . length ) { m_charsBuff = new char [ length * _NUM + _NUM ] ; } data . getChars ( _NUM , length , m_charsBuff , _NUM ) ; comment ( m_charsBuff , _NUM , length ) ; }
public boolean drawImage ( Image img , AffineTransform xform , ImageObserver observer ) { if ( img == null ) { return _BOOL ; } if ( xform == null || xform . isIdentity ( ) ) { return drawImage ( img , _NUM , _NUM , null , observer ) ; } if ( isHiDPIImage ( img ) ) { final int w = img . getWidth ( null ) ; final int h = img . getHeight ( null ) ; final AffineTransform tx = new AffineTransform ( transform ) ; transform ( xform ) ; boolean result = drawHiDPIImage ( img , _NUM , _NUM , w , h , _NUM , _NUM , w , h , null , observer ) ; transform . setTransform ( tx ) ; invalidateTransform ( ) ; return result ; } try { return imagepipe . transformImage ( this , img , xform , observer ) ; } catch ( InvalidPipeException e ) { try { revalidateAll ( ) ; return imagepipe . transformImage ( this , img , xform , observer ) ; } catch ( InvalidPipeException e2 ) { return _BOOL ; } } finally { surfaceData . markDirty ( ) ; } }
public void beginDisplay ( DisplayEvent event ) throws ModelControlException { super . beginDisplay ( event , _BOOL ) ; resetButtonState ( TBL_BUTTON_DELETE ) ; AgentsModel model = ( AgentsModel ) getModel ( ) ; String agentType = getDisplayIDType ( ) ; Object [ ] param = { agentType } ; ptModel . setPageTitleText ( model . getLocalizedString ( _STR + agentType ) ) ; ptModel . setPageTitleHelpMessage ( model . getLocalizedString ( _STR + agentType + _STR ) ) ; tblModel . setTitle ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; tblModel . setTitleLabel ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; tblModel . setSummary ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; tblGroupModel . setTitle ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; tblGroupModel . setTitleLabel ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; tblGroupModel . setSummary ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; getAgentNames ( ) ; CCButton b = ( CCButton ) getChild ( TBL_BUTTON_DELETE ) ; b . setDisabled ( _BOOL ) ; b = ( CCButton ) getChild ( TBL_BUTTON_DELETE_GROUP ) ; b . setDisabled ( _BOOL ) ; }
public void select_all ( ) { Arrays . fill ( sel_array , _BOOL ) ; }
public NvpBuilder addRaw ( final String name , final String value ) { npv . put ( name , value ) ; return this ; }
@ Override public int length ( ) { return set . size ( ) ; }
public final long readUnsignedInt ( ) throws IOException { mPosition += _NUM ; d . readFully ( w , _NUM , _NUM ) ; return ( ( long ) ( w [ _NUM ] ) << _NUM | ( w [ _NUM ] & _NUM ) << _NUM | ( w [ _NUM ] & _NUM ) << _NUM | ( w [ _NUM ] & _NUM ) ) & _NUM ; }
public List < CountryRO > viewAddressCountryOptions ( final ShoppingCart cart , final Shop shop , final String addressType ) { final List < Country > countries = addressBookFacade . getAllCountries ( shop . getCode ( ) , addressType ) ; return map ( countries , CountryRO . class , Country . class ) ; }
public void addPauseListener ( AnimatorPauseListener listener ) { if ( mPauseListeners == null ) { mPauseListeners = new ArrayList < AnimatorPauseListener > ( ) ; } mPauseListeners . add ( listener ) ; }
@ Override public void makeImmutable ( ) { if ( mutable ) { if ( attrs != null ) { Iterator iter = attrs . iterator ( ) ; while ( iter . hasNext ( ) ) { Attribute attr = ( Attribute ) iter . next ( ) ; attr . makeImmutable ( ) ; } attrs = Collections . unmodifiableList ( attrs ) ; } if ( encAttrs != null ) { encAttrs = Collections . unmodifiableList ( encAttrs ) ; } mutable = _BOOL ; } }
@ Override public boolean batchFinished ( ) throws Exception { if ( getInputFormat ( ) == null ) { throw new IllegalStateException ( _STR ) ; } Instances toFilter = getInputFormat ( ) ; if ( ! isFirstBatchDone ( ) ) { Instances toFilterIgnoringAttributes = removeIgnored ( toFilter ) ; File file = getSerializedClustererFile ( ) ; if ( ! file . isDirectory ( ) ) { ObjectInputStream ois = new ObjectInputStream ( new FileInputStream ( file ) ) ; m_ActualClusterer = ( Clusterer ) ois . readObject ( ) ; Instances header = null ; try { header = ( Instances ) ois . readObject ( ) ; } catch ( Exception e ) { } ois . close ( ) ; if ( ( header != null ) && ( ! header . equalHeaders ( toFilterIgnoringAttributes ) ) ) { throw new WekaException ( _STR + header . equalHeadersMsg ( toFilterIgnoringAttributes ) ) ; } } else { m_ActualClusterer = AbstractClusterer . makeCopy ( m_Clusterer ) ; m_ActualClusterer . buildClusterer ( toFilterIgnoringAttributes ) ; } Instances filtered = new Instances ( toFilter , _NUM ) ; ArrayList < String > nominal_values = new ArrayList < String > ( m_ActualClusterer . numberOfClusters ( ) ) ; for ( int i = _NUM ; i < m_ActualClusterer . numberOfClusters ( ) ; i ++ ) { nominal_values . add ( _STR + ( i + _NUM ) ) ; } filtered . insertAttributeAt ( new Attribute ( _STR , nominal_values ) , filtered . numAttributes ( ) ) ; setOutputFormat ( filtered ) ; } for ( int i = _NUM ; i < toFilter . numInstances ( ) ; i ++ ) { convertInstance ( toFilter . instance ( i ) ) ; } flushInput ( ) ; m_NewBatch = _BOOL ; m_FirstBatchDone = _BOOL ; return ( numPendingOutput ( ) != _NUM ) ; }
public void addComponent ( T component ) { components . add ( component ) ; }
public static UiResult openUrl ( URI uri ) { return openUrl ( uri . toString ( ) ) ; }
public final void invalidateLine ( int line ) { repaint ( _NUM , textArea . lineToY ( line ) + fm . getMaxDescent ( ) + fm . getLeading ( ) , getWidth ( ) , fm . getHeight ( ) ) ; }
public ByteBandedRaster ( SampleModel sampleModel , Point origin ) { this ( sampleModel , sampleModel . createDataBuffer ( ) , new Rectangle ( origin . x , origin . y , sampleModel . getWidth ( ) , sampleModel . getHeight ( ) ) , origin , null ) ; }
private void initialize ( URI p_other ) { m_scheme = p_other . getScheme ( ) ; m_userinfo = p_other . getUserinfo ( ) ; m_host = p_other . getHost ( ) ; m_port = p_other . getPort ( ) ; m_path = p_other . getPath ( ) ; m_queryString = p_other . getQueryString ( ) ; m_fragment = p_other . getFragment ( ) ; }
public void playTogether ( Collection < Animator > items ) { if ( items != null && items . size ( ) > _NUM ) { mNeedsSort = _BOOL ; Builder builder = null ; for ( Animator anim : items ) { if ( builder == null ) { builder = play ( anim ) ; } else { builder . with ( anim ) ; } } } }
private E unlinkLast ( ) { Node < E > l = last ; if ( l == null ) return null ; Node < E > p = l . prev ; E item = l . item ; l . item = null ; l . prev = l ; last = p ; if ( p == null ) first = null ; else p . next = null ; -- count ; notFull . signal ( ) ; return item ; }
static boolean isRefreshNotificationRegistered ( NotificationListener client , RefreshNotificationType type ) { boolean isRegistered = _BOOL ; Map < RefreshNotificationType , Integer > notifications = null ; synchronized ( refreshClients ) { notifications = ( Map < RefreshNotificationType , Integer > ) refreshClients . get ( client ) ; } if ( notifications != null ) { Integer timerNotificationId = notifications . get ( type ) ; if ( timerNotificationId != null ) { isRegistered = _BOOL ; } } return isRegistered ; }
private Collection < String > readProcessOutput ( Process proc ) throws IOException { BufferedReader rdr = new BufferedReader ( new InputStreamReader ( proc . getInputStream ( ) ) ) ; Collection < String > res = new ArrayList < > ( ) ; String s ; while ( ( s = rdr . readLine ( ) ) != null ) res . add ( s ) ; return res ; }
public void fillHeaderAndFooter ( final HttpServletRequest request , final HttpServletResponse response , final Map < String , Object > dataModel ) throws Exception { fillHeader ( request , response , dataModel ) ; fillFooter ( dataModel ) ; }
public void addOperand ( ISpacePredicate operand ) { if ( _operandsList == null ) _operandsList = new ArrayList < ISpacePredicate > ( ) ; _operandsList . add ( operand ) ; }
public static String decode ( String s , Type t ) { if ( s == null ) { throw new IllegalArgumentException ( ) ; } final int n = s . length ( ) ; if ( n == _NUM ) { return s ; } if ( s . indexOf ( _STR ) < _NUM ) { if ( t == Type . QUERY_PARAM ) { if ( s . indexOf ( _STR ) < _NUM ) { return s ; } } else { return s ; } } else { if ( n < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } if ( s . charAt ( n - _NUM ) == _STR ) { throw new IllegalArgumentException ( _STR + ( n - _NUM ) ) ; } } if ( t == null ) { return decode ( s , n ) ; } switch ( t ) { case HOST : return decodeHost ( s , n ) ; case QUERY_PARAM : return decodeQueryParam ( s , n ) ; default : return decode ( s , n ) ; } }
public BigDecimal calculateTotalCollectedAmt ( final BillReceiptInfo bri , final List < EgBillDetails > billDetList ) throws InvalidAccountHeadException { return bri . getTotalAmount ( ) ; }
public void skip ( int count ) throws IOException { int skipCount = Math . min ( limit - position , count ) ; while ( _BOOL ) { position += skipCount ; count -= skipCount ; if ( count == _NUM ) break ; skipCount = Math . min ( count , capacity ) ; require ( skipCount ) ; } }
public void test_concurrent_modification_insert ( ) { final BTree btree ; { IndexMetadata md = new IndexMetadata ( UUID . randomUUID ( ) ) ; md . setBranchingFactor ( _NUM ) ; btree = BTree . create ( new SimpleMemoryRawStore ( ) , md ) ; btree . insert ( _NUM , _STR ) ; btree . insert ( _NUM , _STR ) ; btree . insert ( _NUM , _STR ) ; } { ITupleCursor2 < String > cursor = newCursor ( btree ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . seek ( _NUM ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . tuple ( ) ) ; btree . insert ( _NUM , _STR ) ; assertEquals ( TestKeyBuilder . asSortKey ( _NUM ) , cursor . currentKey ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . tuple ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . prior ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . tuple ( ) ) ; btree . remove ( _NUM ) ; assertEquals ( null , cursor . tuple ( ) ) ; assertEquals ( TestKeyBuilder . asSortKey ( _NUM ) , cursor . currentKey ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . next ( ) ) ; btree . remove ( _NUM ) ; assertEquals ( null , cursor . tuple ( ) ) ; assertEquals ( TestKeyBuilder . asSortKey ( _NUM ) , cursor . currentKey ( ) ) ; btree . insert ( _NUM , _STR ) ; assertEquals ( TestKeyBuilder . asSortKey ( _NUM ) , cursor . currentKey ( ) ) ; assertEquals ( null , cursor . tuple ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . next ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . tuple ( ) ) ; } }
public void removeAllIms ( ) { ims . clear ( ) ; }
static String escapeStringForASCII ( String s ) { String out = _STR ; char [ ] cArray = s . toCharArray ( ) ; for ( int i = _NUM ; i < cArray . length ; i ++ ) { char c = cArray [ i ] ; if ( c > _NUM ) { out += _STR ; String hex = Integer . toHexString ( c ) ; while ( hex . length ( ) < _NUM ) hex = _STR + hex ; out += hex ; } else if ( c == _STR ) { out += _STR ; } else if ( c == _STR ) { out += _STR ; } else if ( c == _STR ) { out += _STR ; } else if ( c == _STR ) { out += _STR ; } else if ( c == _STR ) { out += _STR ; } else if ( c == _STR ) { out += _STR ; } else { out += c ; } } return out ; }
public void copyReader ( String encoding , Reader r ) throws IOException { super . setContentEncoding ( encoding ) ; String s = readString ( r ) ; content = s . getBytes ( encoding ) ; }
private void clearDictionaryCache ( ) { Map < String , Dictionary > dictionaryCaches = surrogateKeyGen . getDictionaryCaches ( ) ; List < Dictionary > reverseDictionaries = new ArrayList < > ( dictionaryCaches . values ( ) ) ; for ( int i = _NUM ; i < reverseDictionaries . size ( ) ; i ++ ) { Dictionary dictionary = reverseDictionaries . get ( i ) ; dictionary . clear ( ) ; } }
public static String toTypeString ( Object [ ] arguments , int maxSize ) { if ( arguments == null ) { return _STR ; } StringBuilder argBuf = new StringBuilder ( ) ; for ( int i = _NUM ; i < arguments . length ; i ++ ) { if ( maxSize != - _NUM && argBuf . length ( ) > maxSize ) { argBuf . append ( _STR ) ; break ; } else { if ( i > _NUM ) { argBuf . append ( _STR ) ; } argBuf . append ( arguments [ i ] != null ? typeName ( arguments [ i ] ) : _STR ) ; } } return argBuf . toString ( ) ; }
public boolean renameFile ( File oldFile , File newFile ) { synchronized ( fileCache ) { if ( oldFile . renameTo ( newFile ) ) { validateFileCache ( ) ; return _BOOL ; } return _BOOL ; } }
public Future < ? > execute ( CameraCommand command ) { if ( mClosed ) { return Futures . immediateFuture ( null ) ; } synchronized ( mLock ) { if ( mExecutor == null ) { mExecutor = mExecutorProvider . get ( ) ; } checkNotNull ( mExecutor ) ; return mExecutor . submit ( new CommandRunnable ( command ) ) ; } }
public static EnumSet < KindName > kindNames ( int kind ) { EnumSet < KindName > kinds = EnumSet . noneOf ( KindName . class ) ; if ( ( kind & VAL ) != _NUM ) kinds . add ( ( ( kind & VAL ) == VAR ) ? KindName . VAR : KindName . VAL ) ; if ( ( kind & MTH ) != _NUM ) kinds . add ( KindName . METHOD ) ; if ( ( kind & TYP ) != _NUM ) kinds . add ( KindName . CLASS ) ; if ( ( kind & PCK ) != _NUM ) kinds . add ( KindName . PACKAGE ) ; return kinds ; }
public int length ( ) { return text . length ( ) ; }
public static String serializeDigestResponse ( Map < String , String > paramMap ) { StringBuilder sb = new StringBuilder ( _STR ) ; boolean prefixComma = _BOOL ; for ( Map . Entry < String , String > entry : paramMap . entrySet ( ) ) { if ( ! prefixComma ) { prefixComma = _BOOL ; } else { sb . append ( _STR ) ; } sb . append ( entry . getKey ( ) ) ; sb . append ( _STR ) ; sb . append ( entry . getValue ( ) ) ; } return sb . toString ( ) ; }
public void populateCombos ( Activity activity , final Listener listener ) { List < String > services = getServices ( activity . getPackageManager ( ) ) ; populateCombos ( activity , services , listener ) ; }
protected JsonEncoding findEncoding ( MediaType mediaType , MultivaluedMap < String , Object > httpHeaders ) { return JsonEncoding . UTF8 ; }
static BufferedImage convertImage ( BufferedImage image ) { switch ( image . getType ( ) ) { case BufferedImage . TYPE_INT_ARGB_PRE : return image ; case BufferedImage . TYPE_4BYTE_ABGR : image . coerceData ( _BOOL ) ; return image ; } BufferedImage convertedImage = new BufferedImage ( image . getWidth ( ) , image . getHeight ( ) , BufferedImage . TYPE_INT_ARGB_PRE ) ; Graphics2D g = convertedImage . createGraphics ( ) ; g . setColor ( new java . awt . Color ( _NUM , _NUM , _NUM , _NUM ) ) ; g . fillRect ( _NUM , _NUM , image . getWidth ( ) , image . getHeight ( ) ) ; g . drawImage ( image , _NUM , _NUM , null ) ; g . dispose ( ) ; return convertedImage ; }
public long start ( ) { startTime = System . currentTimeMillis ( ) ; return startTime ; }
public void next ( ) { if ( iterator . hasNext ( ) ) { View currentView = iterator . next ( ) ; if ( isUsingDefaultListener ( ) ) currentView . setOnClickListener ( null ) ; if ( iterator . nextIndex ( ) < mViews . size ( ) ) { View nextView = mViews . get ( iterator . nextIndex ( ) ) ; if ( isUsingDefaultListener ( ) ) nextView . setOnClickListener ( listener ) ; ControllerAnimator animator = getDefaultForwardAnimation ( ) ; animator . setOldView ( currentView ) ; animator . setNewView ( nextView ) ; currentView . startAnimation ( animator ) ; if ( iterator . nextIndex ( ) == mViews . size ( ) - _NUM ) if ( hasControllerListener ( ) ) mListener . onEndReached ( ) ; } else { if ( mLoop ) { iterator = mViews . listIterator ( ) ; View nextView = mViews . get ( _NUM ) ; if ( mUseDefaultListener ) nextView . setOnClickListener ( listener ) ; ControllerAnimator animator = getDefaultForwardAnimation ( ) ; animator . setOldView ( currentView ) ; animator . setNewView ( nextView ) ; currentView . startAnimation ( animator ) ; } } } }
private boolean isHHSign ( String str ) { boolean sign = _BOOL ; try { char r = ( char ) Integer . parseInt ( str , _NUM ) ; } catch ( NumberFormatException e ) { sign = _BOOL ; } return sign ; }
public void simulateMethod ( SootMethod method , ReferenceVariable thisVar , ReferenceVariable returnVar , ReferenceVariable params [ ] ) { String subSignature = method . getSubSignature ( ) ; if ( subSignature . equals ( _STR ) ) { sun_misc_Unsafe_allocateInstance ( method , thisVar , returnVar , params ) ; return ; } { defaultMethod ( method , thisVar , returnVar , params ) ; return ; } }
public void cacheResolvedMethod ( Class clas , Class [ ] types , Method method ) { if ( Interpreter . DEBUG ) Interpreter . debug ( _STR + clas + _STR + method ) ; SignatureKey sk = new SignatureKey ( clas , method . getName ( ) , types ) ; if ( Modifier . isStatic ( method . getModifiers ( ) ) ) resolvedStaticMethods . put ( sk , method ) ; else resolvedObjectMethods . put ( sk , method ) ; }
public void testSetBitTopPositive ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = _NUM ; int number = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . setBit ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
private void destroyBeans ( Map < String , Object > viewMap , Map < String , ViewScopeContextObject > contextMap ) { ArrayList < String > removalNameList = new ArrayList < > ( ) ; if ( contextMap != null ) { for ( Map . Entry < String , ViewScopeContextObject > entry : contextMap . entrySet ( ) ) { String passivationCapableId = entry . getKey ( ) ; Contextual contextual = beanManager . getPassivationCapableBean ( passivationCapableId ) ; ViewScopeContextObject contextObject = entry . getValue ( ) ; CreationalContext creationalContext = beanManager . createCreationalContext ( contextual ) ; contextual . destroy ( viewMap . get ( contextObject . getName ( ) ) , creationalContext ) ; removalNameList . add ( contextObject . getName ( ) ) ; } Iterator < String > removalNames = removalNameList . iterator ( ) ; while ( removalNames . hasNext ( ) ) { String name = removalNames . next ( ) ; viewMap . remove ( name ) ; } contextMap . clear ( ) ; } }
public static void close ( @ CheckForNull OutputStream outputStream ) { if ( outputStream == null ) { return ; } try { outputStream . close ( ) ; } catch ( IOException e ) { } }
@ Override public Node item ( int index ) { return ( nodes != null && index < nodes . size ( ) ) ? ( Node ) ( nodes . get ( index ) ) : null ; }
private int charToVisibleWidth ( char c , @ JdkConstants . FontStyle int fontType , int currentX ) { if ( c == _STR ) { return _NUM ; } if ( c == _STR ) { return EditorUtil . nextTabStop ( currentX , this ) - currentX ; } return EditorUtil . charWidth ( c , fontType , this ) ; }
public static void createDir ( File target ) throws AdeUsageException { if ( ! target . exists ( ) && ! target . mkdir ( ) && ! target . exists ( ) ) { throw new AdeUsageException ( _STR + target . getPath ( ) ) ; } }
public GTSEncoder ( long baseTimestamp ) { this . baseTimestamp = baseTimestamp ; this . stream = new ByteArrayOutputStream ( ) ; this . wrappingKey = null ; }
public static String encode ( final Coordinate [ ] coords ) { long lastLat = _NUM ; long lastLng = _NUM ; final StringBuffer result = new StringBuffer ( ) ; for ( final Coordinate point : coords ) { long lat = Math . round ( point . y * _NUM ) ; long lng = Math . round ( point . x * _NUM ) ; long dLat = lat - lastLat ; long dLng = lng - lastLng ; encode ( dLat , result ) ; encode ( dLng , result ) ; lastLat = lat ; lastLng = lng ; } return result . toString ( ) ; }
private void extractWeightValues ( List < Synapse > synapses ) { int exWeights = _NUM ; int inWeights = _NUM ; for ( Synapse s : synapses ) { double w = s . getStrength ( ) ; if ( w > _NUM ) { exWeights ++ ; } else { inWeights ++ ; } } weights [ _NUM ] = new double [ exWeights ] ; weights [ _NUM ] = new double [ inWeights ] ; exWeights = _NUM ; inWeights = _NUM ; if ( weights [ _NUM ] . length != _NUM ) { for ( Synapse s : synapses ) { double w = s . getStrength ( ) ; if ( w > _NUM ) { weights [ _NUM ] [ exWeights ++ ] = w ; } else { weights [ _NUM ] [ inWeights ++ ] = w ; } } } }
@ Override public void close ( ) { try { flush ( ) ; } catch ( AMLogException ale ) { Debug . error ( tableName + _STR + ale . getMessage ( ) ) ; } if ( conn != null ) { try { conn . close ( ) ; } catch ( SQLException ce ) { Debug . error ( tableName + _STR , ce ) ; } } stopBufferTimer ( ) ; }
public boolean contains ( List < Integer > hashes ) { Iterator < Integer > ni = hashes . iterator ( ) ; for ( int i = _NUM ; i < hashFunctions ; ++ i ) { if ( ! testBit ( ( int ) ( ( ni . next ( ) & _NUM ) % ( filter . length * _NUM ) ) ) ) { return _BOOL ; } } return _BOOL ; }
private void ensureCapacity ( int additionalData ) { if ( ( this . position + additionalData ) > this . byteBuffer . length ) { int newLength = ( int ) ( this . byteBuffer . length * _NUM ) ; if ( newLength < ( this . byteBuffer . length + additionalData ) ) { newLength = this . byteBuffer . length + ( int ) ( additionalData * _NUM ) ; } if ( newLength < this . byteBuffer . length ) { newLength = this . byteBuffer . length + additionalData ; } byte [ ] newBytes = new byte [ newLength ] ; System . arraycopy ( this . byteBuffer , _NUM , newBytes , _NUM , this . byteBuffer . length ) ; this . byteBuffer = newBytes ; } }
public boolean isValidNumber ( PhoneNumber number ) { String regionCode = getRegionCodeForNumber ( number ) ; return isValidNumberForRegion ( number , regionCode ) ; }
private String trimUrl ( String uri ) { if ( uri == null ) return _STR ; if ( uri . endsWith ( _STR ) ) uri = uri . substring ( _NUM , uri . length ( ) - _NUM ) ; return uri ; }
public Pair < Integer , List < Long > > next ( ) { try { classesProcessed ++ ; Integer key = iterator . next ( ) ; long pos = classificationBlockRMA2 . getPos ( key ) ; int count = classificationBlockRMA2 . getSum ( key ) ; classDumpReader . seek ( pos ) ; List < Long > list = new LinkedList < > ( ) ; for ( int i = _NUM ; i < count ; i ++ ) list . add ( classDumpReader . readLong ( ) ) ; return new Pair < > ( key , list ) ; } catch ( Exception e ) { Basic . caught ( e ) ; error = _BOOL ; return null ; } }
public static String addAlpha ( String originalColor , double alpha ) { long alphaFixed = Math . round ( alpha * _NUM ) ; String alphaHex = Long . toHexString ( alphaFixed ) ; if ( alphaHex . length ( ) == _NUM ) { alphaHex = _STR + alphaHex ; } originalColor = originalColor . replace ( _STR , _STR + alphaHex ) ; return originalColor ; }
public void stop ( ) { server . stop ( _NUM ) ; }
protected DateTimeData parse ( String str , int durationType ) throws SchemaDateTimeException { int len = str . length ( ) ; DateTimeData date = new DateTimeData ( str , this ) ; int start = _NUM ; char c = str . charAt ( start ++ ) ; if ( c != _STR && c != _STR ) { throw new SchemaDateTimeException ( ) ; } else { date . utc = ( c == _STR ) ? _STR : _NUM ; if ( c == _STR && str . charAt ( start ++ ) != _STR ) { throw new SchemaDateTimeException ( ) ; } } int negate = _NUM ; if ( date . utc == _STR ) { negate = - _NUM ; } boolean designator = _BOOL ; int endDate = indexOf ( str , start , len , _STR ) ; if ( endDate == - _NUM ) { endDate = len ; } else if ( durationType == YEARMONTHDURATION_TYPE ) { throw new SchemaDateTimeException ( ) ; } int end = indexOf ( str , start , endDate , _STR ) ; if ( end != - _NUM ) { if ( durationType == DAYTIMEDURATION_TYPE ) { throw new SchemaDateTimeException ( ) ; } date . year = negate * parseInt ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } end = indexOf ( str , start , endDate , _STR ) ; if ( end != - _NUM ) { if ( durationType == DAYTIMEDURATION_TYPE ) { throw new SchemaDateTimeException ( ) ; } date . month = negate * parseInt ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } end = indexOf ( str , start , endDate , _STR ) ; if ( end != - _NUM ) { if ( durationType == YEARMONTHDURATION_TYPE ) { throw new SchemaDateTimeException ( ) ; } date . day = negate * parseInt ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } if ( len == endDate && start != len ) { throw new SchemaDateTimeException ( ) ; } if ( len != endDate ) { end = indexOf ( str , ++ start , len , _STR ) ; if ( end != - _NUM ) { date . hour = negate * parseInt ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } end = indexOf ( str , start , len , _STR ) ; if ( end != - _NUM ) { date . minute = negate * parseInt ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } end = indexOf ( str , start , len , _STR ) ; if ( end != - _NUM ) { date . second = negate * parseSecond ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } if ( start != len || str . charAt ( -- start ) == _STR ) { throw new SchemaDateTimeException ( ) ; } } if ( ! designator ) { throw new SchemaDateTimeException ( ) ; } return date ; }
final void copyIntoLocalState ( Operand [ ] _localState ) { localState = new Operand [ _localState . length ] ; System . arraycopy ( _localState , _NUM , localState , _NUM , _localState . length ) ; setLocalKnown ( ) ; }
@ SuppressWarnings ( _STR ) private HashMap < String , DBObject > loadDBObjects ( Class objectClass ) { HashMap < String , DBObject > objectMap = new HashMap < String , DBObject > ( ) ; DBObject dbObject = new DBObject ( this , objectClass ) ; String objectToLoad = s_logger . localizeMessage ( _STR ) ; String objectsToLoad = s_logger . localizeMessage ( _STR ) ; String sqlLoadHeaders = null ; String sqlLoadContents = null ; if ( dbObject != null ) { objectToLoad = dbObject . getObjectType ( ) ; objectsToLoad = dbObject . getObjectTypes ( ) ; sqlLoadHeaders = dbObject . getLoadHeaderSQL ( ) ; sqlLoadContents = dbObject . getLoadContentSQL ( ) ; } s_logger . log ( Level . FINE , _STR , new Object [ ] { objectsToLoad , getDirection ( ) } ) ; PreparedStatementWrapper stmtLoadHeaders = setPreparedStatement ( sqlLoadHeaders ) ; PreparedStatementWrapper stmtLoadContents = setPreparedStatement ( sqlLoadContents ) ; int counter = _NUM ; if ( dbObject != null ) { String sql = dbObject . getLoadObjectSQL ( ) ; Statement stmt = setStatement ( ) ; ResultSet rs = executeQuery ( stmt , sql ) ; while ( getResultSetNext ( rs ) ) { String s = getResultSetString ( rs , _STR ) ; if ( ! objectMap . containsKey ( s ) ) { DBObject obj = new DBObject ( this , objectClass , s ) ; obj . populate ( stmtLoadHeaders , stmtLoadContents ) ; if ( obj . isPopulated ( ) ) { objectMap . put ( s . toUpperCase ( ) , obj ) ; counter ++ ; } } } releaseResultSet ( rs ) ; releaseStatement ( stmt ) ; } releasePreparedStatement ( stmtLoadHeaders ) ; releasePreparedStatement ( stmtLoadContents ) ; if ( counter == _NUM ) s_logger . log ( Level . FINE , _STR , new Object [ ] { Integer . toString ( counter ) , objectToLoad } ) ; else s_logger . log ( Level . FINE , _STR , new Object [ ] { Integer . toString ( counter ) , objectsToLoad } ) ; s_logger . flush ( ) ; return objectMap ; }
protected Object attemptReadResponse ( Connection cnx ) throws Exception { Message msg = createResponseMessage ( ) ; if ( msg != null ) { msg . setComms ( cnx . getSocket ( ) , cnx . getInputStream ( ) , cnx . getOutputStream ( ) , cnx . getCommBuffer ( ) , cnx . getStats ( ) ) ; if ( msg instanceof ChunkedMessage ) { try { return processResponse ( msg , cnx ) ; } finally { msg . unsetComms ( ) ; processSecureBytes ( cnx , msg ) ; } } else { try { msg . recv ( ) ; } finally { msg . unsetComms ( ) ; processSecureBytes ( cnx , msg ) ; } return processResponse ( msg , cnx ) ; } } else { return null ; } }
public synchronized boolean add ( E e , boolean hasNext ) { while ( mInternalQueue . size ( ) >= mMaxSize && ! mClosed ) { notifyAll ( ) ; try { wait ( TIMEOUT ) ; } catch ( InterruptedException e1 ) { mClosed = _BOOL ; ProgramState . checkAbort ( ) ; throw new IllegalStateException ( _STR , e1 ) ; } ProgramState . checkAbort ( ) ; } if ( mClosed ) { return _BOOL ; } final boolean wasEmpty = mInternalQueue . isEmpty ( ) ; mHasNext = hasNext ; mInternalQueue . add ( e ) ; if ( wasEmpty ) { notifyAll ( ) ; } return _BOOL ; }
public TranslatableComponent ( ) { }
public void addPart ( int index , PduPart part ) { if ( null == part ) { throw new NullPointerException ( ) ; } putPartToMaps ( part ) ; mParts . add ( index , part ) ; }
public StrBuilder insert ( int index , boolean value ) { validateIndex ( index ) ; if ( value ) { ensureCapacity ( size + _NUM ) ; System . arraycopy ( buffer , index , buffer , index + _NUM , size - index ) ; buffer [ index ++ ] = _STR ; buffer [ index ++ ] = _STR ; buffer [ index ++ ] = _STR ; buffer [ index ] = _STR ; size += _NUM ; } else { ensureCapacity ( size + _NUM ) ; System . arraycopy ( buffer , index , buffer , index + _NUM , size - index ) ; buffer [ index ++ ] = _STR ; buffer [ index ++ ] = _STR ; buffer [ index ++ ] = _STR ; buffer [ index ++ ] = _STR ; buffer [ index ] = _STR ; size += _NUM ; } return this ; }
public boolean hasNatureAndWeapon ( Nature nature , String weapon ) { return this . nature == nature && ( ( weapon == null && this . weapon == null ) || ( weapon != null && weapon . equals ( this . weapon ) ) ) ; }
public void dump ( String infoMsg ) { storage . getOnlineMembers ( ) ; storage . getOfflineMembers ( ) ; storage . getOfflineAndEqualMembers ( ) ; storage . getMyInitializingID ( ) ; storage . getMyPersistentID ( ) ; final StringBuilder buf = new StringBuilder ( _NUM ) ; if ( infoMsg != null ) { buf . append ( infoMsg ) ; buf . append ( _STR ) ; } buf . append ( _STR ) ; buf . append ( storage . getMyPersistentID ( ) ) ; buf . append ( _STR ) ; buf . append ( storage . getMyInitializingID ( ) ) ; buf . append ( _STR ) ; for ( PersistentMemberID id : storage . getOnlineMembers ( ) ) { buf . append ( _STR ) ; buf . append ( id ) ; buf . append ( _STR ) ; } buf . append ( _STR ) ; for ( PersistentMemberID id : storage . getOfflineMembers ( ) ) { buf . append ( _STR ) ; buf . append ( id ) ; buf . append ( _STR ) ; } buf . append ( _STR ) ; for ( PersistentMemberID id : storage . getOfflineAndEqualMembers ( ) ) { buf . append ( _STR ) ; buf . append ( id ) ; buf . append ( _STR ) ; } logger . debug ( buf . toString ( ) ) ; }
private Node < K , V > findNode ( Object key ) { if ( key == null ) throw new NullPointerException ( ) ; Comparator < ? super K > cmp = comparator ; outer : for ( ; ; ) { for ( Node < K , V > b = findPredecessor ( key , cmp ) , n = b . next ; ; ) { Object v ; int c ; if ( n == null ) break outer ; Node < K , V > f = n . next ; if ( n != b . next ) break ; if ( ( v = n . value ) == null ) { n . helpDelete ( b , f ) ; break ; } if ( b . value == null || v == n ) break ; if ( ( c = cpr ( cmp , key , n . key ) ) == _NUM ) return n ; if ( c < _NUM ) break outer ; b = n ; n = f ; } } return null ; }
static Sort parseSort ( long timestampSec , IndexState state , List < Object > fields , List < String > sortFieldNames , Map < String , FieldDef > dynamicFields ) { List < SortField > sortFields = new ArrayList < SortField > ( ) ; for ( Object _sub : fields ) { Request sub = ( Request ) _sub ; String fieldName = sub . getString ( _STR ) ; SortField sf ; if ( sortFieldNames != null ) { sortFieldNames . add ( fieldName ) ; } if ( fieldName . equals ( _STR ) ) { sf = SortField . FIELD_DOC ; } else if ( fieldName . equals ( _STR ) ) { sf = SortField . FIELD_SCORE ; } else { FieldDef fd ; if ( dynamicFields != null ) { fd = dynamicFields . get ( fieldName ) ; } else { fd = null ; } if ( fd == null ) { fd = state . getField ( fieldName ) ; } if ( fd == null ) { sub . fail ( _STR , _STR + fieldName + _STR ) ; fd = null ; } if ( fd . valueSource != null ) { sf = fd . valueSource . getSortField ( sub . getBoolean ( _STR ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . LAT_LON ) { if ( fd . fieldType . docValuesType ( ) == DocValuesType . NONE ) { sub . fail ( _STR , _STR + fieldName + _STR ) ; } Request sub2 = sub . getStruct ( _STR ) ; sf = LatLonDocValuesField . newDistanceSort ( fieldName , sub2 . getDouble ( _STR ) , sub2 . getDouble ( _STR ) ) ; } else { if ( ( fd . fieldType != null && fd . fieldType . docValuesType ( ) == DocValuesType . NONE ) || ( fd . fieldType == null && fd . valueSource == null ) ) { sub . fail ( _STR , _STR + fieldName + _STR ) ; } if ( fd . multiValued ) { String selectorString = sub . getEnum ( _STR ) ; if ( fd . valueType == FieldDef . FieldValueType . ATOM ) { SortedSetSelector . Type selector ; if ( selectorString . equals ( _STR ) ) { selector = SortedSetSelector . Type . MIN ; } else if ( selectorString . equals ( _STR ) ) { selector = SortedSetSelector . Type . MAX ; } else if ( selectorString . equals ( _STR ) ) { selector = SortedSetSelector . Type . MIDDLE_MIN ; } else if ( selectorString . equals ( _STR ) ) { selector = SortedSetSelector . Type . MIDDLE_MAX ; } else { assert _BOOL ; selector = null ; } sf = new SortedSetSortField ( fieldName , sub . getBoolean ( _STR ) , selector ) ; } else if ( fd . valueType == FieldDef . FieldValueType . INT ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . INT , sub . getBoolean ( _STR ) , parseNumericSelector ( sub , selectorString ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . LONG ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . LONG , sub . getBoolean ( _STR ) , parseNumericSelector ( sub , selectorString ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . FLOAT ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . FLOAT , sub . getBoolean ( _STR ) , parseNumericSelector ( sub , selectorString ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . DOUBLE ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . DOUBLE , sub . getBoolean ( _STR ) , parseNumericSelector ( sub , selectorString ) ) ; } else { sub . fail ( _STR , _STR + fieldName + _STR + fd . valueType ) ; assert _BOOL ; sf = null ; } } else { SortField . Type sortType ; if ( fd . valueType == FieldDef . FieldValueType . ATOM ) { sortType = SortField . Type . STRING ; } else if ( fd . valueType == FieldDef . FieldValueType . LONG || fd . valueType == FieldDef . FieldValueType . DATE_TIME ) { sortType = SortField . Type . LONG ; } else if ( fd . valueType == FieldDef . FieldValueType . INT ) { sortType = SortField . Type . INT ; } else if ( fd . valueType == FieldDef . FieldValueType . DOUBLE ) { sortType = SortField . Type . DOUBLE ; } else if ( fd . valueType == FieldDef . FieldValueType . FLOAT ) { sortType = SortField . Type . FLOAT ; } else { sub . fail ( _STR , _STR + fieldName + _STR + fd . valueType ) ; assert _BOOL ; sortType = null ; } sf = new SortField ( fieldName , sortType , sub . getBoolean ( _STR ) ) ; } } boolean hasMissingLast = sub . hasParam ( _STR ) ; boolean missingLast = sub . getBoolean ( _STR ) ; if ( fd . valueType == FieldDef . FieldValueType . ATOM ) { if ( missingLast ) { sf . setMissingValue ( SortField . STRING_LAST ) ; } else { sf . setMissingValue ( SortField . STRING_FIRST ) ; } } else if ( fd . valueType == FieldDef . FieldValueType . INT ) { sf . setMissingValue ( missingLast ? Integer . MAX_VALUE : Integer . MIN_VALUE ) ; } else if ( fd . valueType == FieldDef . FieldValueType . LONG ) { sf . setMissingValue ( missingLast ? Long . MAX_VALUE : Long . MIN_VALUE ) ; } else if ( fd . valueType == FieldDef . FieldValueType . FLOAT ) { sf . setMissingValue ( missingLast ? Float . POSITIVE_INFINITY : Float . NEGATIVE_INFINITY ) ; } else if ( fd . valueType == FieldDef . FieldValueType . DOUBLE ) { sf . setMissingValue ( missingLast ? Double . POSITIVE_INFINITY : Double . NEGATIVE_INFINITY ) ; } else if ( hasMissingLast ) { sub . fail ( _STR , _STR + fieldName + _STR + sf . getType ( ) ) ; } } sortFields . add ( sf ) ; } return new Sort ( sortFields . toArray ( new SortField [ sortFields . size ( ) ] ) ) ; }
public synchronized void open ( ) { }
@ NotNull private Optional < TypeConversion > findConversionFromDbValue ( @ NotNull Type source , @ NotNull Type target ) { if ( isAssignable ( target , source ) ) return Optional . of ( TypeConversion . identity ( ) ) ; Optional < TypeConversion > directConversion = typeConversionRegistry . findConversionFromDbValue ( source , target ) ; if ( directConversion . isPresent ( ) ) return directConversion ; Optional < TypeConversion > arrayConversion = findArrayConversion ( source , target ) ; if ( arrayConversion . isPresent ( ) ) return arrayConversion ; Optional < TypeConversion > optionalConversion = findOptionalConversion ( source , target ) ; if ( optionalConversion . isPresent ( ) ) return optionalConversion ; Optional < TypeConversion > enumConversion = findEnumConversion ( target ) ; if ( enumConversion . isPresent ( ) ) return enumConversion ; return Optional . empty ( ) ; }
private boolean advanceApiUpTo ( TreeSet < AreaPanelInfo > sortedApiTree , AreaPanelInfo api , int time ) { AreaPanel ap = api . ap ( ) ; TimeTree rootTt = ap . getTimeTree ( ) ; TimeTree tt = rootTt . getEncompassigTimeTreeOrMaxTimeTreeBeforeTime ( time , _BOOL ) ; if ( tt == null || tt . id == api . currTtId ) return _BOOL ; sortedApiTree . remove ( api ) ; if ( api . setTt ( tt , Integer . MAX_VALUE ) ) sortedApiTree . add ( api ) ; return _BOOL ; }
@ RequestMapping ( value = { _STR , _STR } , method = RequestMethod . POST ) @ ResponseBody public RestWrapper update ( @ ModelAttribute ( _STR ) @ Valid UserRoles userRoles , BindingResult bindingResult , Principal principal ) { RestWrapper restWrapper = null ; if ( bindingResult . hasErrors ( ) ) { BindingResultError bindingResultError = new BindingResultError ( ) ; return bindingResultError . errorMessage ( bindingResult ) ; } try { com . wipro . ats . bdre . md . dao . jpa . UserRoles jpaUserRoles = new com . wipro . ats . bdre . md . dao . jpa . UserRoles ( ) ; jpaUserRoles . setUserRoleId ( userRoles . getUserRoleId ( ) ) ; jpaUserRoles . setRole ( userRoles . getRole ( ) ) ; Users users = new Users ( ) ; users . setUsername ( userRoles . getUsername ( ) ) ; jpaUserRoles . setUsers ( users ) ; userRolesDAO . update ( jpaUserRoles ) ; restWrapper = new RestWrapper ( userRoles , RestWrapper . OK ) ; LOGGER . info ( _STR + userRoles . getUserRoleId ( ) + _STR + principal . getName ( ) + userRoles ) ; } catch ( Exception e ) { LOGGER . error ( e ) ; restWrapper = new RestWrapper ( e . getMessage ( ) , RestWrapper . ERROR ) ; } return restWrapper ; }
private void sendRequestOption ( ) throws IOException { String request = _STR + mParameters . host + _STR + mParameters . port + mParameters . path + _STR + addHeaders ( ) ; Log . i ( TAG , request . substring ( _NUM , request . indexOf ( _STR ) ) ) ; mOutputStream . write ( request . getBytes ( _STR ) ) ; Response . parseResponse ( mBufferedReader ) ; }
@ Override public Result doComparisonTest ( final Properties properties ) throws Exception { final long timeout = Long . parseLong ( properties . getProperty ( TestOptions . TIMEOUT ) ) ; final int nresources = Integer . parseInt ( properties . getProperty ( TestOptions . NRESOURCES ) ) ; final int minLocks = Integer . parseInt ( properties . getProperty ( TestOptions . MIN_LOCKS ) ) ; final int maxLocks = Integer . parseInt ( properties . getProperty ( TestOptions . MAX_LOCKS ) ) ; final int ntrials = Integer . parseInt ( properties . getProperty ( TestOptions . NTRIALS ) ) ; final int keyLen = Integer . parseInt ( properties . getProperty ( TestOptions . KEYLEN ) ) ; final int nops = Integer . parseInt ( properties . getProperty ( TestOptions . NOPS ) ) ; final double failureRate = Double . parseDouble ( properties . getProperty ( TestOptions . FAILURE_RATE ) ) ; Result result = doConcurrentClientTest ( journal , timeout , nresources , minLocks , maxLocks , ntrials , keyLen , nops , failureRate ) ; return result ; }
public static void printThreadInfo ( PrintWriter stream , String title ) { final int STACK_DEPTH = _NUM ; boolean contention = threadBean . isThreadContentionMonitoringEnabled ( ) ; long [ ] threadIds = threadBean . getAllThreadIds ( ) ; stream . println ( _STR + title ) ; stream . println ( threadIds . length + _STR ) ; for ( long tid : threadIds ) { ThreadInfo info = threadBean . getThreadInfo ( tid , STACK_DEPTH ) ; if ( info == null ) { stream . println ( _STR ) ; continue ; } stream . println ( _STR + getTaskName ( info . getThreadId ( ) , info . getThreadName ( ) ) + _STR ) ; Thread . State state = info . getThreadState ( ) ; stream . println ( _STR + state ) ; stream . println ( _STR + info . getBlockedCount ( ) ) ; stream . println ( _STR + info . getWaitedCount ( ) ) ; if ( contention ) { stream . println ( _STR + info . getBlockedTime ( ) ) ; stream . println ( _STR + info . getWaitedTime ( ) ) ; } if ( state == Thread . State . WAITING ) { stream . println ( _STR + info . getLockName ( ) ) ; } else if ( state == Thread . State . BLOCKED ) { stream . println ( _STR + info . getLockName ( ) ) ; stream . println ( _STR + getTaskName ( info . getLockOwnerId ( ) , info . getLockOwnerName ( ) ) ) ; } stream . println ( _STR ) ; for ( StackTraceElement frame : info . getStackTrace ( ) ) { stream . println ( _STR + frame . toString ( ) ) ; } } stream . flush ( ) ; }
public void addDelete ( IResource delete ) { if ( fDelete == null ) fDelete = new ArrayList < IResource > ( _NUM ) ; fDelete . add ( delete ) ; if ( fIgnoreCount == _NUM ) { internalAdd ( new DeleteDescription ( delete ) ) ; } }
public static double max ( final double a , final double b ) { if ( a > b ) { return a ; } if ( a < b ) { return b ; } if ( a != b ) { return Double . NaN ; } long bits = Double . doubleToRawLongBits ( a ) ; if ( bits == _NUM ) { return b ; } return a ; }
public void addContainer ( ImageContainer container ) { mContainers . add ( container ) ; }
@ Override public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeObject ( approximation ) ; }
public void add ( String methodName , List < Expression > parameters ) { chain . add ( new DotExpressionItem ( methodName , parameters , _BOOL ) ) ; }
public static Request request ( ) { return threadLocal . get ( ) ; }
public static String createHash ( String password ) throws NoSuchAlgorithmException , InvalidKeySpecException { return createHash ( password . toCharArray ( ) ) ; }
private void scheduleCommercial ( int length ) { Long delay = commercialDelay . getSettingValue ( ) ; if ( delay == null ) { setCommercialResult ( _STR ) ; clearCommercialButtonsSelection ( ) ; } else { scheduledCommercialTime = System . currentTimeMillis ( ) + delay * _NUM ; scheduledCommercialLength = length ; update ( ) ; } }
public int hashCode ( ) { long bits = Double . doubleToLongBits ( m00 ) ; bits = bits * _NUM + Double . doubleToLongBits ( m01 ) ; bits = bits * _NUM + Double . doubleToLongBits ( m02 ) ; bits = bits * _NUM + Double . doubleToLongBits ( m10 ) ; bits = bits * _NUM + Double . doubleToLongBits ( m11 ) ; bits = bits * _NUM + Double . doubleToLongBits ( m12 ) ; return ( ( ( int ) bits ) ^ ( ( int ) ( bits > > _NUM ) ) ) ; }
public void unsubscribe ( AWSIotMessage message ) throws AWSIotException { try { unsubscribeTopic ( message ) ; } catch ( AwsIotRetryableException e ) { if ( client . getMaxOfflineQueueSize ( ) > _NUM && unsubscribeQueue . size ( ) < client . getMaxOfflineQueueSize ( ) ) { unsubscribeQueue . add ( message ) ; } else { LOGGER . info ( _STR + message . getTopic ( ) ) ; throw new AWSIotException ( e ) ; } } }
public static boolean isDigitalUnix ( ) { return osName . indexOf ( _STR ) > - _NUM ; }
public void clientDisconnect ( ) { try { OutHttpApp responseStream = _responseStream ; if ( responseStream != null ) { responseStream . close ( ) ; } } catch ( Exception e ) { log . log ( Level . FINER , e . toString ( ) , e ) ; } ConnectionTcp conn = connTcp ( ) ; if ( conn != null ) { conn . clientDisconnect ( ) ; } killKeepalive ( _STR ) ; }
public boolean endsWith ( Name n ) { if ( n instanceof CompoundName ) { return ( impl . endsWith ( n . size ( ) , n . getAll ( ) ) ) ; } else { return _BOOL ; } }
private int calculateTotalHeight ( float starSize , int numberOfStars , float starsSeparation , boolean padding ) { return Math . round ( starSize ) + ( padding ? getPaddingTop ( ) + getPaddingBottom ( ) : _NUM ) ; }
@ SuppressWarnings ( _STR ) private static boolean isRegex ( String s ) { try { Pattern . compile ( s ) ; } catch ( PatternSyntaxException e ) { return _BOOL ; } return _BOOL ; }
private static boolean hasSpecializedHandlerIntents ( Context context , Intent intent ) { try { PackageManager pm = context . getPackageManager ( ) ; List < ResolveInfo > handlers = pm . queryIntentActivities ( intent , PackageManager . GET_RESOLVED_FILTER ) ; if ( handlers == null || handlers . size ( ) == _NUM ) { return _BOOL ; } for ( ResolveInfo resolveInfo : handlers ) { IntentFilter filter = resolveInfo . filter ; if ( filter == null ) continue ; if ( filter . countDataAuthorities ( ) == _NUM || filter . countDataPaths ( ) == _NUM ) continue ; if ( resolveInfo . activityInfo == null ) continue ; return _BOOL ; } } catch ( RuntimeException e ) { Log . e ( TAG , _STR ) ; } return _BOOL ; }
public static void flush ( ) { clearBuffer ( ) ; try { out . flush ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
private String attachFooterToText ( String content ) throws MessagingException , IOException { StringBuilder builder = new StringBuilder ( content ) ; ensureTrailingCarriageReturn ( content , builder ) ; builder . append ( getFooterText ( ) ) ; return builder . toString ( ) ; }
public static Sentence make ( final Connective connective , final Sentence ... children2 ) { return make ( connective , Arrays . asList ( children2 ) ) ; }
public final void testIsStatePreserved1 ( ) { byte [ ] encodedKey = new byte [ ] { ( byte ) _NUM , ( byte ) _NUM , ( byte ) _NUM , ( byte ) _NUM } ; EncodedKeySpec meks = new MyEncodedKeySpec ( encodedKey ) ; encodedKey [ _NUM ] = ( byte ) _NUM ; byte [ ] ek = meks . getEncoded ( ) ; assertTrue ( ek [ _NUM ] == ( byte ) _NUM ) ; }
public synchronized void init ( ) { init = _BOOL ; for ( String mapName : store . getMapNames ( ) ) { if ( mapName . startsWith ( _STR ) ) { MVMap < Object , Integer > temp = openTempMap ( mapName ) ; store . removeMap ( temp ) ; } } synchronized ( undoLog ) { if ( undoLog . size ( ) > _NUM ) { for ( Long key : undoLog . keySet ( ) ) { int transactionId = getTransactionId ( key ) ; openTransactions . set ( transactionId ) ; } } } }
public static TDoubleDoubleHashMap createCumulativeHistogram ( TDoubleDoubleHashMap histogram ) { double [ ] keys = histogram . keys ( ) ; Arrays . sort ( keys ) ; double sum = _NUM ; for ( double key : keys ) { double val = histogram . get ( key ) ; sum += val ; histogram . put ( key , sum ) ; } return histogram ; }
public synchronized void updateIconsForPkg ( String packageName , UserHandleCompat user ) { removeIconsForPkg ( packageName , user ) ; try { PackageInfo info = mPackageManager . getPackageInfo ( packageName , PackageManager . GET_UNINSTALLED_PACKAGES ) ; long userSerial = mUserManager . getSerialNumberForUser ( user ) ; for ( LauncherActivityInfoCompat app : mLauncherApps . getActivityList ( packageName , user ) ) { addIconToDBAndMemCache ( app , info , userSerial ) ; } } catch ( NameNotFoundException e ) { Log . d ( TAG , _STR , e ) ; return ; } }
protected DateTimeData parse ( String str ) throws SchemaDateTimeException { DateTimeData date = new DateTimeData ( str , this ) ; int len = str . length ( ) ; int end = indexOf ( str , _NUM , len , _STR ) ; int dateEnd = getDate ( str , _NUM , end , date ) ; getTime ( str , end + _NUM , len , date ) ; if ( dateEnd != end ) { throw new RuntimeException ( str + _STR + _STR ) ; } validateDateTime ( date ) ; saveUnnormalized ( date ) ; if ( date . utc != _NUM && date . utc != _STR ) { normalize ( date ) ; } return date ; }
void addAttributeValues ( String attrName , Set values ) throws SMSException { if ( attrName != null && values != null && ! values . isEmpty ( ) ) { Map attrs = getAttributes ( ) ; Set origValues = ( Set ) attrs . get ( attrName ) ; Set newValues = new HashSet ( values ) ; if ( origValues != null && ! origValues . isEmpty ( ) ) { newValues . addAll ( origValues ) ; } Map newAttrs = new HashMap ( ) ; newAttrs . put ( attrName , newValues ) ; setAttributes ( newAttrs ) ; } }
public void test_parkUntil_3 ( ) throws Exception { CyclicBarrier barrier = new CyclicBarrier ( _NUM ) ; Parker parker = new Parker ( barrier , _BOOL , _NUM ) ; Thread parkerThread = new Thread ( parker ) ; UNSAFE . unpark ( parkerThread ) ; parkerThread . start ( ) ; parker . assertDurationIsInRange ( _NUM ) ; parkerThread . join ( ) ; }
SegmentManager commitIndex ( long commitIndex ) { this . commitIndex = Math . max ( this . commitIndex , commitIndex ) ; return this ; }
public void finishFragments ( ) { for ( Fragment comment : closingFragments ) { finishFragment ( comment ) ; } closingFragments . clear ( ) ; }
private final void _writeUTF8Segments ( byte [ ] utf8 , int offset , int totalLen ) throws IOException , JsonGenerationException { do { int len = Math . min ( _outputMaxContiguous , totalLen ) ; _writeUTF8Segment ( utf8 , offset , len ) ; offset += len ; totalLen -= len ; } while ( totalLen > _NUM ) ; }
public static String hexToStringNoException ( final String data ) { try { return ConversionUtils . arrayToString ( Hex . decodeHex ( data . toCharArray ( ) ) ) ; } catch ( DecoderException e ) { return _STR ; } }
public Collection < Node > matchingScenariosAndExamples ( final Feature feature ) { final List < ScenarioDefinition > allScenarios = feature . getScenarioDefinitions ( ) ; final List < Node > matchingScenariosAndExamples = new LinkedList < Node > ( ) ; for ( final ScenarioDefinition scenario : allScenarios ) { final Set < Tag > allTagsForScenario = new HashSet < Tag > ( scenario . getTags ( ) ) ; allTagsForScenario . addAll ( feature . getTags ( ) ) ; if ( scenario instanceof ScenarioOutline ) { matchingScenariosAndExamples . addAll ( matchingExamples ( ( ScenarioOutline ) scenario , allTagsForScenario ) ) ; } else { if ( matches ( allTagsForScenario ) ) { matchingScenariosAndExamples . add ( scenario ) ; } } } return matchingScenariosAndExamples ; }
private boolean traverse ( Tree tree , NodeRef node , int [ ] operatorNumber , boolean flip ) { boolean update = _BOOL ; int nodeNum = node . getNumber ( ) ; NodeRef parent = tree . getParent ( node ) ; if ( operatorNumber != null ) { operatorNumber [ _NUM ] = - _NUM ; } if ( parent != null && updateNode [ nodeNum ] ) { final double branchRate = branchRateModel . getBranchRate ( tree , node ) ; final double branchTime = branchRate * ( tree . getNodeHeight ( parent ) - tree . getNodeHeight ( node ) ) ; if ( branchTime < _NUM ) { throw new RuntimeException ( _STR + branchTime ) ; } if ( flip ) { matrixBufferHelper . flipOffset ( nodeNum ) ; } final int eigenIndex = _NUM ; final int updateCount = branchUpdateCount [ eigenIndex ] ; matrixUpdateIndices [ eigenIndex ] [ updateCount ] = matrixBufferHelper . getOffsetIndex ( nodeNum ) ; branchLengths [ eigenIndex ] [ updateCount ] = branchTime ; branchUpdateCount [ eigenIndex ] ++ ; update = _BOOL ; } if ( ! tree . isExternal ( node ) ) { NodeRef child1 = tree . getChild ( node , _NUM ) ; final int [ ] op1 = { - _NUM } ; final boolean update1 = traverse ( tree , child1 , op1 , flip ) ; NodeRef child2 = tree . getChild ( node , _NUM ) ; final int [ ] op2 = { - _NUM } ; final boolean update2 = traverse ( tree , child2 , op2 , flip ) ; if ( update1 || update2 ) { int x = operationCount [ operationListCount ] * Beagle . OPERATION_TUPLE_SIZE ; if ( flip ) { partialBufferHelper . flipOffset ( nodeNum ) ; } final int [ ] operations = this . operations [ operationListCount ] ; operations [ x ] = partialBufferHelper . getOffsetIndex ( nodeNum ) ; if ( useScaleFactors ) { int n = nodeNum - tipCount ; if ( recomputeScaleFactors ) { scaleBufferHelper . flipOffset ( n ) ; scaleBufferIndices [ n ] = scaleBufferHelper . getOffsetIndex ( n ) ; operations [ x + _NUM ] = scaleBufferIndices [ n ] ; operations [ x + _NUM ] = Beagle . NONE ; } else { operations [ x + _NUM ] = Beagle . NONE ; operations [ x + _NUM ] = scaleBufferIndices [ n ] ; } } else { if ( useAutoScaling ) { scaleBufferIndices [ nodeNum - tipCount ] = partialBufferHelper . getOffsetIndex ( nodeNum ) ; } operations [ x + _NUM ] = Beagle . NONE ; operations [ x + _NUM ] = Beagle . NONE ; } operations [ x + _NUM ] = partialBufferHelper . getOffsetIndex ( child1 . getNumber ( ) ) ; operations [ x + _NUM ] = matrixBufferHelper . getOffsetIndex ( child1 . getNumber ( ) ) ; operations [ x + _NUM ] = partialBufferHelper . getOffsetIndex ( child2 . getNumber ( ) ) ; operations [ x + _NUM ] = matrixBufferHelper . getOffsetIndex ( child2 . getNumber ( ) ) ; operationCount [ operationListCount ] ++ ; update = _BOOL ; } } return update ; }
public static String rate2speed ( double rate ) { return NUMBER_FORMAT0 . format ( rate ) + _STR + GENERAL_UNIT_KBPSEC ; }
public long next ( ) { long result = - _NUM ; if ( cache < _NUM && bufferElements > _NUM ) { result = getNextFromBuffer ( ) ; bufferElements -- ; } else { result = cache ; cache = - _NUM ; } if ( ! cs . isEmpty ( ) ) { long first = cs . first ( ) ; if ( result > first || result == - _NUM ) { cs . remove ( first ) ; cache = result ; result = first ; } } if ( result == - _NUM ) { throw new NoSuchElementException ( ) ; } Assert . check ( previous < result , EC . GENERAL ) ; previous = result ; readElements ++ ; return result ; }
public boolean isSetQueueSize ( ) { return __isset_bit_vector . get ( __QUEUESIZE_ISSET_ID ) ; }
public void requestContactCapabilities ( Set < ContactId > contacts ) throws RcsServiceNotRegisteredException , RcsServiceNotAvailableException , RcsGenericException { if ( mApi == null ) { throw new RcsServiceNotAvailableException ( ) ; } if ( contacts == null || contacts . isEmpty ( ) ) { throw new RcsIllegalArgumentException ( _STR ) ; } try { mApi . requestContactCapabilities2 ( new ArrayList < > ( contacts ) ) ; } catch ( Exception e ) { RcsIllegalArgumentException . assertException ( e ) ; RcsServiceNotRegisteredException . assertException ( e ) ; throw new RcsGenericException ( e ) ; } }
private static String toString ( double coeff ) { final String c = Double . toString ( coeff ) ; if ( c . endsWith ( _STR ) ) { return c . substring ( _NUM , c . length ( ) - _NUM ) ; } else { return c ; } }
public static final IndexCreatedEvent createTestIndexCreationStatusWithBulkDataHit ( ) { IndexCreatedEvent toReturn = new IndexCreatedEvent ( UUID . randomUUID ( ) , new Date ( ) , new Date ( ) , createTestIndexWithBulkDataHit ( ) , _NUM , _NUM ) ; toReturn . calculateValues ( ) ; return toReturn ; }
public boolean validate ( String value , String rule ) { return ( value . equalsIgnoreCase ( rule ) ) ; }
public String findURIFromDoc ( int owner ) { int n = m_sourceTree . size ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { SourceTree sTree = ( SourceTree ) m_sourceTree . elementAt ( i ) ; if ( owner == sTree . m_root ) return sTree . m_url ; } return null ; }
static public final int random ( int start , int end ) { return start + random . nextInt ( end - start + _NUM ) ; }
private void pop ( final String desc ) { char c = desc . charAt ( _NUM ) ; if ( c == _STR ) { pop ( ( Type . getArgumentsAndReturnSizes ( desc ) > > _NUM ) - _NUM ) ; } else if ( c == _STR || c == _STR ) { pop ( _NUM ) ; } else { pop ( _NUM ) ; } }
public boolean offer ( E event , int taskId ) throws InterruptedException { assertNotDone ( ) ; if ( predicate . match ( event ) ) { this . matched [ taskId ] = _BOOL ; for ( boolean match : matched ) { if ( ! match ) return _BOOL ; } responseQueue . put ( new EventHolder ( event ) ) ; done = _BOOL ; return _BOOL ; } else return _BOOL ; }
private void push ( final int type ) { if ( outputStack == null ) { outputStack = new int [ _NUM ] ; } int n = outputStack . length ; if ( outputStackTop >= n ) { int [ ] t = new int [ Math . max ( outputStackTop + _NUM , _NUM * n ) ] ; System . arraycopy ( outputStack , _NUM , t , _NUM , n ) ; outputStack = t ; } outputStack [ outputStackTop ++ ] = type ; int top = owner . inputStackTop + outputStackTop ; if ( top > owner . outputStackMax ) { owner . outputStackMax = top ; } }
private static AlgorithmParameterSpec algorithmParameterSpec ( ) { final SecureRandom random = new SecureRandom ( ) ; final byte [ ] bytes = new byte [ CcAes . BLOCK ] ; random . nextBytes ( bytes ) ; return new IvParameterSpec ( bytes ) ; }
static ZoneOffsetTransitionRule readExternal ( DataInput in ) throws IOException { int data = in . readInt ( ) ; Month month = Month . of ( data > > > _NUM ) ; int dom = ( ( data & ( _NUM << _NUM ) ) > > > _NUM ) - _NUM ; int dowByte = ( data & ( _NUM << _NUM ) ) > > > _NUM ; DayOfWeek dow = dowByte == _NUM ? null : DayOfWeek . of ( dowByte ) ; int timeByte = ( data & ( _NUM << _NUM ) ) > > > _NUM ; TimeDefinition defn = TimeDefinition . values ( ) [ ( data & ( _NUM << _NUM ) ) > > > _NUM ] ; int stdByte = ( data & ( _NUM << _NUM ) ) > > > _NUM ; int beforeByte = ( data & ( _NUM << _NUM ) ) > > > _NUM ; int afterByte = ( data & _NUM ) ; LocalTime time = ( timeByte == _NUM ? LocalTime . ofSecondOfDay ( in . readInt ( ) ) : LocalTime . of ( timeByte % _NUM , _NUM ) ) ; ZoneOffset std = ( stdByte == _NUM ? ZoneOffset . ofTotalSeconds ( in . readInt ( ) ) : ZoneOffset . ofTotalSeconds ( ( stdByte - _NUM ) * _NUM ) ) ; ZoneOffset before = ( beforeByte == _NUM ? ZoneOffset . ofTotalSeconds ( in . readInt ( ) ) : ZoneOffset . ofTotalSeconds ( std . getTotalSeconds ( ) + beforeByte * _NUM ) ) ; ZoneOffset after = ( afterByte == _NUM ? ZoneOffset . ofTotalSeconds ( in . readInt ( ) ) : ZoneOffset . ofTotalSeconds ( std . getTotalSeconds ( ) + afterByte * _NUM ) ) ; return ZoneOffsetTransitionRule . of ( month , dom , dow , time , timeByte == _NUM , defn , std , before , after ) ; }
protected boolean isTokenChar ( char ch ) { if ( Character . isLetterOrDigit ( ch ) ) return _BOOL ; if ( Character . isISOControl ( ch ) ) return _BOOL ; if ( isHttpSeparator ( ch ) ) return _BOOL ; return _BOOL ; }
public void drawLinesAndPoints ( Graphics2D g2d , ArrayList < ComparableLabel > orderedDateSet , HashMap < ComparableLabel , Integer > dataPoints , long yMaxMark ) { int sectionWidth = this . graphWidth / orderedDateSet . size ( ) ; int xOffset = sectionWidth / _NUM ; int yPrevValue ; int yCurrentValue ; float prevOffsetPerc ; float currentOffsetPerc ; g2d . setColor ( this . lineColor ) ; for ( int i = _NUM ; i < orderedDateSet . size ( ) ; i ++ ) { if ( i != _NUM ) { yPrevValue = dataPoints . get ( orderedDateSet . get ( i - _NUM ) ) ; yCurrentValue = dataPoints . get ( orderedDateSet . get ( i ) ) ; prevOffsetPerc = yPrevValue / ( float ) yMaxMark ; currentOffsetPerc = yCurrentValue / ( float ) yMaxMark ; g2d . drawLine ( this . graphLeft + ( i - _NUM ) * sectionWidth + xOffset , this . graphBottom - Math . round ( prevOffsetPerc * this . graphHeight ) , this . graphLeft + i * sectionWidth + xOffset , Math . round ( this . graphBottom - currentOffsetPerc * this . graphHeight ) ) ; } else { yCurrentValue = dataPoints . get ( orderedDateSet . get ( i ) ) ; currentOffsetPerc = yCurrentValue / ( float ) yMaxMark ; g2d . fillOval ( this . graphLeft + ( i ) * sectionWidth + xOffset - this . pointRadius , this . graphBottom - Math . round ( currentOffsetPerc * this . graphHeight ) - this . pointRadius , this . pointRadius * _NUM , this . pointRadius * _NUM ) ; } } }
@ SuppressLint ( _STR ) public void elementType ( String name , int model , int memberOf , int flags ) { ElementType e = new ElementType ( name , model , memberOf , flags , this ) ; theElementTypes . put ( name . toLowerCase ( ) , e ) ; if ( memberOf == M_ROOT ) theRoot = e ; }
public static String makeLogTag ( Class cls ) { return makeLogTag ( cls . getSimpleName ( ) ) ; }
final public void println ( String s ) { Writer out = this . out ; if ( out == null ) return ; try { if ( s == null ) out . write ( _nullChars , _NUM , _nullChars . length ) ; else out . write ( s , _NUM , s . length ( ) ) ; out . write ( _newline , _NUM , _newline . length ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
private static URI refragUri ( URI uri , String frag ) throws URISyntaxException { return new URI ( uri . getScheme ( ) , uri . getSchemeSpecificPart ( ) , frag ) ; }
@ Override public void paint ( final PPaintContext ppc ) { final Paint paint = getPaint ( ) ; if ( paint != null ) { final Graphics2D g2 = ppc . getGraphics ( ) ; final PBounds bounds = getUnionOfChildrenBounds ( null ) ; if ( fillBackground ) { g2 . setPaint ( backgroundColor ) ; g2 . fillRect ( ( int ) bounds . getX ( ) - outlinePadding , ( int ) bounds . getY ( ) - outlinePadding , ( int ) bounds . getWidth ( ) + _NUM * outlinePadding , ( int ) bounds . getHeight ( ) + _NUM * outlinePadding ) ; } if ( drawOutline ) { g2 . setPaint ( lineColor ) ; g2 . drawRoundRect ( ( int ) bounds . getX ( ) - outlinePadding , ( int ) bounds . getY ( ) - outlinePadding , ( int ) bounds . getWidth ( ) + _NUM * outlinePadding , ( int ) bounds . getHeight ( ) + _NUM * outlinePadding , ROUNDING_WIDTH_HEIGHT , ROUNDING_WIDTH_HEIGHT ) ; } } }
public final synchronized byte [ ] toByteArray ( ) { ByteArrayOutputStream baos = null ; DataOutputStream dos = null ; try { baos = new ByteArrayOutputStream ( _NUM ) ; dos = new DataOutputStream ( baos ) ; game . writeToStream ( dos ) ; dos . flush ( ) ; return baos . toByteArray ( ) ; } catch ( IOException e ) { return null ; } finally { if ( dos != null ) try { dos . close ( ) ; } catch ( IOException ex ) { } if ( baos != null ) try { baos . close ( ) ; } catch ( IOException ex ) { } } }
public void addImport ( @ NotNull PsiElement importable , @ NotNull PsiFile file , @ Nullable PyImportElement importElement ) { myImports . add ( new ImportCandidateHolder ( importable , file , importElement , null ) ) ; }
protected final void drawArrowHead ( Graphics2D g , int x , int y , int sgn ) { g . setStroke ( Strokes . getStroke ( StrokeType . SOLID , _NUM ) ) ; int size = diagram ( ) . arrowSize ; switch ( headType ) { case CLOSED : Polygon p = new Polygon ( new int [ ] { x , x + sgn * size , x + sgn * size , x } , new int [ ] { y , y - size , y + size , y } , _NUM ) ; g . fillPolygon ( p ) ; break ; case OPEN : g . drawLine ( x , y , x + sgn * size , y - size ) ; g . drawLine ( x , y , x + sgn * size , y + size ) ; break ; case ROUNDED : int left = sgn == - _NUM ? x - _NUM * size : x ; int top = y - size ; g . fillArc ( left , top , size * _NUM , size * _NUM , _NUM , sgn * _NUM ) ; } }
public void classLoaderInit ( DynamicClassLoader loader ) { EnvLoaderListener listener = _listenerRef . get ( ) ; if ( listener != null ) listener . classLoaderInit ( loader ) ; }
private Object [ ] unmarshalParametersChecked ( DeserializationChecker checker , Method method , MarshalInputStream in ) throws IOException , ClassNotFoundException { int callID = methodCallIDCount . getAndIncrement ( ) ; MyChecker myChecker = new MyChecker ( checker , method , callID ) ; in . setStreamChecker ( myChecker ) ; try { Class < ? > [ ] types = method . getParameterTypes ( ) ; Object [ ] values = new Object [ types . length ] ; for ( int i = _NUM ; i < types . length ; i ++ ) { myChecker . setIndex ( i ) ; values [ i ] = unmarshalValue ( types [ i ] , in ) ; } myChecker . end ( callID ) ; return values ; } finally { in . setStreamChecker ( null ) ; } }
private void loadDataFromService ( ) { List < ExceptionSensorData > exData = null ; if ( ( null != fromDate ) && ( null != toDate ) ) { exData = dataAccessService . getUngroupedExceptionOverview ( template , limit , fromDate , toDate , resultComparator ) ; } else { exData = dataAccessService . getUngroupedExceptionOverview ( template , limit , resultComparator ) ; } exceptionSensorData . clear ( ) ; if ( null != exData ) { exceptionSensorData . addAll ( exData ) ; } }
public static String createResourceName ( String resource , Locale locale , boolean removeExtension ) { String resourceName = resource ; if ( removeExtension ) { if ( resourceName . endsWith ( _STR ) ) { resourceName = resourceName . replace ( _STR , _STR ) ; } else if ( resourceName . endsWith ( _STR ) ) { resourceName = resourceName . replace ( _STR , _STR ) ; } } if ( locale != null ) { if ( UtilValidate . isNotEmpty ( locale . toString ( ) ) ) { resourceName = resourceName + _STR + locale ; } } return resourceName ; }
public static String toString ( Object [ ] objects , Displayable renderer ) { if ( objects == null ) return _STR ; StringBuffer buffer = new StringBuffer ( _NUM ) ; for ( int i = _NUM ; i < objects . length ; i ++ ) { if ( i > _NUM ) buffer . append ( _STR ) ; buffer . append ( renderer . displayString ( objects [ i ] ) ) ; } return buffer . toString ( ) ; }
void drawIcon ( Graphics g , int ax , int ay , int aw , int ah , float align , Component c ) { int gap = isLeftToRight ? - ( img . getIconWidth ( ) + bulletgap ) : ( aw + bulletgap ) ; int x = ax + gap ; int y = Math . max ( ay , ay + ( int ) ( align * ah ) - img . getIconHeight ( ) ) ; img . paintIcon ( c , g , x , y ) ; }
public int syncQuery ( String query ) { long start = System . currentTimeMillis ( ) ; int modified = execute ( _STR , UPDATE_COUNT_RESPONSE , query ) ; log . debug ( _STR , System . currentTimeMillis ( ) - start , modified ) ; return modified ; }
public static void fullReset ( ) { resetRuntime ( ) ; synchronized ( readProperties ) { readProperties . clear ( ) ; } }
private BufferedImage toBufferedImage ( final Image image ) { if ( image instanceof BufferedImage ) { return ( BufferedImage ) image ; } if ( image instanceof VolatileImage ) { VolatileImage volatileImage = ( VolatileImage ) image ; return volatileImage . getSnapshot ( ) ; } GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; GraphicsDevice graphicsDevice = graphicsEnvironment . getDefaultScreenDevice ( ) ; GraphicsConfiguration graphicsConfiguration = graphicsDevice . getDefaultConfiguration ( ) ; BufferedImage bufferedImage = graphicsConfiguration . createCompatibleImage ( image . getWidth ( null ) , image . getHeight ( null ) ) ; Graphics2D g = bufferedImage . createGraphics ( ) ; g . drawImage ( image , _NUM , _NUM , null ) ; g . dispose ( ) ; return bufferedImage ; }
public static void writeByteArrayToFile ( File file , byte [ ] data , boolean append ) throws IOException { OutputStream out = null ; try { out = openOutputStream ( file , append ) ; out . write ( data ) ; out . close ( ) ; } finally { IOUtils . closeQuietly ( out ) ; } }
public final boolean isCancelled ( ) { if ( cancelled ) { pass ( _STR , cancelled ) ; } else { fail ( _STR ) ; } return cancelled ; }
public void remove ( DirectedEdge de ) { outEdges . remove ( de ) ; }
@ Override public boolean eventGeneratable ( String eventName ) { if ( m_listenee == null ) { return _BOOL ; } if ( ! eventName . equals ( _STR ) && ! eventName . equals ( _STR ) ) { return _BOOL ; } if ( m_listenee instanceof DataSource ) { if ( m_listenee instanceof EventConstraints ) { EventConstraints ec = ( EventConstraints ) m_listenee ; return ec . eventGeneratable ( eventName ) ; } } if ( m_listenee instanceof TrainingSetProducer ) { if ( m_listenee instanceof EventConstraints ) { EventConstraints ec = ( EventConstraints ) m_listenee ; if ( ! eventName . equals ( _STR ) ) { return _BOOL ; } if ( ! ec . eventGeneratable ( _STR ) ) { return _BOOL ; } } } if ( m_listenee instanceof TestSetProducer ) { if ( m_listenee instanceof EventConstraints ) { EventConstraints ec = ( EventConstraints ) m_listenee ; if ( ! eventName . equals ( _STR ) ) { return _BOOL ; } if ( ! ec . eventGeneratable ( _STR ) ) { return _BOOL ; } } } return _BOOL ; }
@ Override protected void onMessageOnProducerThread ( T msg ) { _lock . lock ( ) ; try { if ( _pending . isEmpty ( ) ) { _queue . schedule ( _flushRunnable , _interval , _timeUnit ) ; } _pending . add ( msg ) ; } finally { _lock . unlock ( ) ; } }
public Builder untilDate ( Date date ) { untilDate = QUERY_DATE . format ( date ) ; return this ; }
private boolean isInThumbRange ( float touchX , double normalizedThumbValue ) { return Math . abs ( touchX - normalizedToScreen ( normalizedThumbValue ) ) <= mThumbHalfWidth ; }
public static void cleanupAllFiles ( FileSystem fileSystem , String BaseUri ) throws IOException { try { if ( fileSystem != null ) { Path rootDir = new Path ( BaseUri ) ; FileStatus [ ] files = fileSystem . listStatus ( rootDir ) ; for ( FileStatus file : files ) { fileSystem . delete ( file . getPath ( ) , _BOOL ) ; } } } catch ( Exception e ) { LOG . error ( _STR ) ; } }
@ Override public boolean canBeCollidedWith ( ) { return _BOOL ; }
public void update ( long duration , TimeUnit unit ) { update ( unit . toNanos ( duration ) ) ; }
public FileInputStream openRead ( ) throws FileNotFoundException { if ( mBackupName . exists ( ) ) { mBaseName . delete ( ) ; mBackupName . renameTo ( mBaseName ) ; } return new FileInputStream ( mBaseName ) ; }
public void submit ( String queueName , DispatcherTask dispatcherTask ) { synchronized ( syncRoot ) { DispatcherTaskRunner currentTaskRunner = currentTasksMap . get ( queueName ) ; if ( currentTaskRunner == null ) { currentTaskRunner = new DispatcherTaskRunner ( queueName , dispatcherTask ) ; currentTasksMap . put ( queueName , currentTaskRunner ) ; executorService . execute ( currentTaskRunner ) ; } else { enqueueNextTask ( queueName , dispatcherTask ) ; } } }
public static Executor createTaskDistributor ( ) { return Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , _STR ) ) ; }
public void dump ( Writer writer ) { PrintWriter pw = new PrintWriter ( new BufferedWriter ( writer ) ) ; pw . println ( _STR ) ; pw . println ( _STR ) ; pw . println ( _STR + ( int ) audioFormat . getSampleRate ( ) ) ; pw . println ( _STR + samples . length / _NUM ) ; pw . println ( _STR + audioFormat . getChannels ( ) ) ; if ( samples != null ) { for ( int i = _NUM ; i < samples . length ; i += _NUM ) { pw . println ( WaveUtils . bytesToShort ( samples [ i ] , samples [ i + _NUM ] ) ) ; } } pw . flush ( ) ; }
public void addFieldBuffered ( VEditor editor , GridField mField ) { wrap = mField != null ? ! mField . isSameLine ( ) : _BOOL ; if ( prevEditor != null && prevField != null ) addField ( prevEditor , prevField ) ; prevEditor = editor ; prevField = mField ; }
public ExpandRoomFreespaceIncomplete add_incomplete_expansion_room ( ShapeTile p_shape , int p_layer , ShapeTile p_contained_shape ) { ExpandRoomFreespaceIncomplete new_room = new ExpandRoomFreespaceIncomplete ( p_shape , p_layer , p_contained_shape ) ; incomplete_expansion_rooms . add ( new_room ) ; return new_room ; }
static double computeDesiredEllipsoidMagnitude ( final PlanetModel planetModel , final double x , final double y , final double z ) { return _NUM / Math . sqrt ( x * x * planetModel . inverseAbSquared + y * y * planetModel . inverseAbSquared + z * z * planetModel . inverseCSquared ) ; }
public static String trim ( CharSequence s ) { if ( s == null ) { return null ; } Matcher m = sTrimPattern . matcher ( s ) ; return m . replaceAll ( _STR ) ; }
private void validateVNXFileSMISProviderMandatoryDetails ( StorageSystemRequestParam param ) { ArgValidator . checkFieldValidIP ( param . getSmisProviderIP ( ) , _STR ) ; ArgValidator . checkFieldNotNull ( param . getSmisPortNumber ( ) , _STR ) ; ArgValidator . checkFieldRange ( param . getSmisPortNumber ( ) , _NUM , _NUM , _STR ) ; ArgValidator . checkFieldNotEmpty ( param . getSmisUserName ( ) , _STR ) ; ArgValidator . checkFieldNotEmpty ( param . getSmisPassword ( ) , _STR ) ; }
private static NSObject parseObject ( Node n ) throws ParseException , IOException { String type = n . getNodeName ( ) ; if ( type . equals ( _STR ) ) { NSDictionary dict = new NSDictionary ( ) ; List < Node > children = filterElementNodes ( n . getChildNodes ( ) ) ; for ( int i = _NUM ; i < children . size ( ) ; i += _NUM ) { Node key = children . get ( i ) ; Node val = children . get ( i + _NUM ) ; String keyString = getNodeTextContents ( key ) ; dict . put ( keyString , parseObject ( val ) ) ; } return dict ; } else if ( type . equals ( _STR ) ) { List < Node > children = filterElementNodes ( n . getChildNodes ( ) ) ; NSArray array = new NSArray ( children . size ( ) ) ; for ( int i = _NUM ; i < children . size ( ) ; i ++ ) { array . setValue ( i , parseObject ( children . get ( i ) ) ) ; } return array ; } else if ( type . equals ( _STR ) ) { return new NSNumber ( _BOOL ) ; } else if ( type . equals ( _STR ) ) { return new NSNumber ( _BOOL ) ; } else if ( type . equals ( _STR ) ) { return new NSNumber ( getNodeTextContents ( n ) ) ; } else if ( type . equals ( _STR ) ) { return new NSNumber ( getNodeTextContents ( n ) ) ; } else if ( type . equals ( _STR ) ) { return new NSString ( getNodeTextContents ( n ) ) ; } else if ( type . equals ( _STR ) ) { return new NSData ( getNodeTextContents ( n ) ) ; } else if ( type . equals ( _STR ) ) { return new NSDate ( getNodeTextContents ( n ) ) ; } return null ; }
public void createAccrualBasedJournalEntriesAndReversalsForLoanCharges ( final Office office , final String currencyCode , final Integer accountTypeToBeDebited , final Integer accountTypeToBeCredited , final Long loanProductId , final Long loanId , final String transactionId , final Date transactionDate , final BigDecimal totalAmount , final Boolean isReversal , final List < ChargePaymentDTO > chargePaymentDTOs ) { GLAccount receivableAccount = getLinkedGLAccountForLoanCharges ( loanProductId , accountTypeToBeDebited , null ) ; final Map < GLAccount , BigDecimal > creditDetailsMap = new LinkedHashMap < > ( ) ; for ( final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs ) { final Long chargeId = chargePaymentDTO . getChargeId ( ) ; final GLAccount chargeSpecificAccount = getLinkedGLAccountForLoanCharges ( loanProductId , accountTypeToBeCredited , chargeId ) ; BigDecimal chargeSpecificAmount = chargePaymentDTO . getAmount ( ) ; if ( creditDetailsMap . containsKey ( chargeSpecificAccount ) ) { final BigDecimal existingAmount = creditDetailsMap . get ( chargeSpecificAccount ) ; chargeSpecificAmount = chargeSpecificAmount . add ( existingAmount ) ; } creditDetailsMap . put ( chargeSpecificAccount , chargeSpecificAmount ) ; } BigDecimal totalCreditedAmount = BigDecimal . ZERO ; for ( final Map . Entry < GLAccount , BigDecimal > entry : creditDetailsMap . entrySet ( ) ) { final GLAccount account = entry . getKey ( ) ; final BigDecimal amount = entry . getValue ( ) ; totalCreditedAmount = totalCreditedAmount . add ( amount ) ; if ( isReversal ) { createDebitJournalEntryForLoan ( office , currencyCode , account , loanId , transactionId , transactionDate , amount ) ; createCreditJournalEntryForLoan ( office , currencyCode , receivableAccount , loanId , transactionId , transactionDate , amount ) ; } else { createDebitJournalEntryForLoan ( office , currencyCode , receivableAccount , loanId , transactionId , transactionDate , amount ) ; createCreditJournalEntryForLoan ( office , currencyCode , account , loanId , transactionId , transactionDate , amount ) ; } } if ( totalAmount . compareTo ( totalCreditedAmount ) != _NUM ) { throw new PlatformDataIntegrityException ( _STR , _STR , totalCreditedAmount , totalAmount ) ; } }
private ArtLocateResult calculate_next_trace ( boolean p_layer_changed , boolean p_at_fanout_end ) { Collection < PlaPointFloat > corner_list = new LinkedList < PlaPointFloat > ( ) ; corner_list . add ( current_from_point ) ; if ( ! p_at_fanout_end ) { PlaPointFloat adjusted_start_corner = adjust_start_corner ( ) ; if ( adjusted_start_corner != current_from_point ) { PlaPointFloat add_corner = calculate_additional_corner ( current_from_point , adjusted_start_corner , _BOOL , angle_restriction ) ; corner_list . add ( add_corner ) ; corner_list . add ( adjusted_start_corner ) ; previous_from_point = current_from_point ; current_from_point = adjusted_start_corner ; } } PlaPointFloat prev_corner = current_from_point ; for ( int c_limit = _NUM ; c_limit < _NUM ; c_limit ++ ) { Collection < PlaPointFloat > next_corners = calculate_next_trace_corners ( ) ; if ( next_corners . isEmpty ( ) ) break ; for ( PlaPointFloat curr_next_corner : next_corners ) { if ( curr_next_corner == prev_corner ) continue ; corner_list . add ( curr_next_corner ) ; previous_from_point = current_from_point ; current_from_point = curr_next_corner ; prev_corner = curr_next_corner ; } } int next_layer = current_trace_layer ; if ( p_layer_changed ) { current_from_door_index = current_target_door_index + _NUM ; ExpandRoomComplete next_room = backtrack_array [ current_from_door_index ] . next_room ; if ( next_room != null ) { next_layer = next_room . get_layer ( ) ; } } PlaPointIntAlist rounded_corner_list = new PlaPointIntAlist ( corner_list . size ( ) ) ; PlaPointInt prev_point = null ; for ( PlaPointFloat a_float : corner_list ) { PlaPointInt curr_point = a_float . round ( ) ; if ( curr_point . equals ( prev_point ) ) continue ; rounded_corner_list . add ( curr_point ) ; prev_point = curr_point ; } ArtLocateResult result = new ArtLocateResult ( rounded_corner_list , current_trace_layer ) ; current_trace_layer = next_layer ; return result ; }
public static < ValueT > ByteBuffer toByteBuffer ( ValueT obj ) throws IOException { byte [ ] bytes = null ; ByteArrayOutputStream bos = null ; ObjectOutputStream oos = null ; try { bos = new ByteArrayOutputStream ( ) ; oos = new ObjectOutputStream ( bos ) ; oos . writeObject ( obj ) ; oos . flush ( ) ; bytes = bos . toByteArray ( ) ; } finally { if ( oos != null ) { oos . close ( ) ; } if ( bos != null ) { bos . close ( ) ; } } return ByteBuffer . wrap ( bytes ) ; }
void writeBytes ( ChannelHandlerContext ctx , ByteBuf bytes ) ;
@ Override protected Sensor createNewSensor ( String systemName , String userName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + systemName + _STR + userName ) ; } Sensor s ; String sName = SerialAddress . normalizeSystemName ( systemName ) ; if ( sName . equals ( _STR ) ) { log . error ( _STR + systemName ) ; return null ; } s = getBySystemName ( sName ) ; if ( s != null ) { log . error ( _STR + systemName ) ; return null ; } String altName = SerialAddress . convertSystemNameToAlternate ( sName ) ; s = getBySystemName ( altName ) ; if ( s != null ) { log . error ( _STR + systemName + _STR + altName + _STR ) ; return null ; } int bit = SerialAddress . getBitFromSystemName ( sName ) ; if ( ( bit <= _NUM ) || ( bit >= SENSORSPERNODE ) ) { log . error ( _STR + Integer . toString ( bit ) + _STR + Integer . toString ( SENSORSPERNODE - _NUM ) ) ; return null ; } if ( userName == null ) { s = new SerialSensor ( sName ) ; } else { s = new SerialSensor ( sName , userName ) ; } SerialNode node = SerialAddress . getNodeFromSystemName ( sName ) ; if ( node == null ) { log . warn ( _STR + sName + _STR ) ; return s ; } node . registerSensor ( s , bit ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + s . getSystemName ( ) + _STR + node ) ; } return s ; }
private double [ ] max ( double [ ] distances1 , double [ ] distances2 ) { if ( distances1 . length != distances2 . length ) { throw new RuntimeException ( _STR ) ; } double [ ] result = new double [ distances1 . length ] ; for ( int i = _NUM ; i < distances1 . length ; i ++ ) { result [ i ] = Math . max ( distances1 [ i ] , distances2 [ i ] ) ; } return result ; }
public void fill_shape ( PlaPointFloat [ ] p_points , Graphics p_g , Color p_color , double p_translucency_factor ) { if ( p_color == null ) return ; Graphics2D g2 = ( Graphics2D ) p_g ; Polygon draw_polygon = new Polygon ( ) ; for ( int index = _NUM ; index < p_points . length ; index ++ ) { Point2D curr_corner = coordinate_transform . board_to_screen ( p_points [ index ] ) ; draw_polygon . addPoint ( ( int ) Math . round ( curr_corner . getX ( ) ) , ( int ) Math . round ( curr_corner . getY ( ) ) ) ; } g2 . setColor ( p_color ) ; set_translucency ( g2 , p_translucency_factor ) ; g2 . setRenderingHint ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; g2 . fill ( draw_polygon ) ; }
public void writeExif ( InputStream jpegStream , OutputStream exifOutStream ) throws IOException { if ( jpegStream == null || exifOutStream == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = getExifWriterStream ( exifOutStream ) ; doExifStreamIO ( jpegStream , s ) ; s . flush ( ) ; }
private static void decodeBase256Segment ( BitSource bits , StringBuilder result , Collection < byte [ ] > byteSegments ) throws FormatException { int codewordPosition = _NUM + bits . getByteOffset ( ) ; int d1 = unrandomize255State ( bits . readBits ( _NUM ) , codewordPosition ++ ) ; int count ; if ( d1 == _NUM ) { count = bits . available ( ) / _NUM ; } else if ( d1 < _NUM ) { count = d1 ; } else { count = _NUM * ( d1 - _NUM ) + unrandomize255State ( bits . readBits ( _NUM ) , codewordPosition ++ ) ; } if ( count < _NUM ) { throw FormatException . getFormatInstance ( ) ; } byte [ ] bytes = new byte [ count ] ; for ( int i = _NUM ; i < count ; i ++ ) { if ( bits . available ( ) < _NUM ) { throw FormatException . getFormatInstance ( ) ; } bytes [ i ] = ( byte ) unrandomize255State ( bits . readBits ( _NUM ) , codewordPosition ++ ) ; } byteSegments . add ( bytes ) ; try { result . append ( new String ( bytes , _STR ) ) ; } catch ( UnsupportedEncodingException uee ) { throw new IllegalStateException ( _STR + uee ) ; } }
public void goToCurrentDay ( ) { int monthDifference = FlexibleCalendarHelper . getMonthDifference ( displayYear , displayMonth ) ; Calendar cal = Calendar . getInstance ( ) ; selectedDateItem . setDay ( cal . get ( Calendar . DAY_OF_MONTH ) ) ; selectedDateItem . setMonth ( cal . get ( Calendar . MONTH ) ) ; selectedDateItem . setYear ( cal . get ( Calendar . YEAR ) ) ; if ( disableAutoDateSelection ) { this . userSelectedItem = selectedDateItem . clone ( ) ; } if ( monthDifference != _NUM ) { resetAdapters = _BOOL ; if ( monthDifference < _NUM ) { monthInfPagerAdapter . setFakeCount ( lastPosition ) ; monthInfPagerAdapter . notifyDataSetChanged ( ) ; } shouldOverrideComputedDate = _BOOL ; moveToPosition ( monthDifference ) ; } else { FlexibleCalendarGridAdapter currentlyVisibleAdapter = monthViewPagerAdapter . getMonthAdapterAtPosition ( lastPosition % MonthViewPagerAdapter . VIEWS_IN_PAGER ) ; currentlyVisibleAdapter . notifyDataSetChanged ( ) ; } }
public static byte [ ] toIPv4AddressBytes ( int ipAddress ) { return new byte [ ] { ( byte ) ( ipAddress > > > _NUM ) , ( byte ) ( ipAddress > > > _NUM ) , ( byte ) ( ipAddress > > > _NUM ) , ( byte ) ipAddress } ; }
public boolean isValidTemplate ( ) { return isValidTemplate ( template ) ; }
public Object take ( ) throws InterruptedException , ForceReattemptException { throw new UnsupportedOperationException ( ) ; }
@ SuppressWarnings ( { _STR } ) public static double normalCdf ( double y ) { double f , h ; int j ; double dcphi , x , z , f1 , f2 , f3 , f4 , f5 ; x = y ; if ( Math . abs ( x ) > _NUM ) { dcphi = _NUM ; } else { j = ( int ) Math . floor ( Math . abs ( x ) * _NUM + _NUM ) ; z = j * _NUM ; h = Math . abs ( x ) - z ; f = r [ j ] ; f1 = f * z - _NUM ; f2 = f + z * f1 ; f3 = f1 * _NUM + z * f2 ; f4 = f2 * _NUM + z * f3 ; f5 = f3 * _NUM + z * f4 ; dcphi = f + h * ( f1 * _NUM + h * ( f2 * _NUM + h * ( f3 * _NUM + h * ( f4 * _NUM + h * f5 ) ) ) ) / _NUM ; dcphi = dcphi * _NUM * Math . exp ( x * - _NUM * x ) ; } if ( x < _NUM ) { return dcphi ; } else { return ( _NUM - dcphi ) ; } }
private void destroy ( ) { if ( log . isLoggable ( Level . FINEST ) ) { log . finest ( this + _STR ) ; } try { _socket . forceShutdown ( ) ; } catch ( Throwable e ) { } try { closeConnection ( ) ; } catch ( Throwable e ) { log . log ( Level . FINER , e . toString ( ) , e ) ; } _port . removeConnection ( this ) ; }
int atom ( ) throws RESyntaxException { int ret = node ( RE . OP_ATOM , _NUM ) ; int lenAtom = _NUM ; atomLoop : while ( idx < len ) { if ( ( idx + _NUM ) < len ) { char c = pattern . charAt ( idx + _NUM ) ; if ( pattern . charAt ( idx ) == _STR ) { int idxEscape = idx ; escape ( ) ; if ( idx < len ) { c = pattern . charAt ( idx ) ; } idx = idxEscape ; } switch ( c ) { case _STR : case _STR : case _STR : case _STR : if ( lenAtom != _NUM ) { break atomLoop ; } } } switch ( pattern . charAt ( idx ) ) { case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : break atomLoop ; case _STR : case _STR : case _STR : case _STR : if ( lenAtom == _NUM ) { syntaxError ( _STR ) ; } break atomLoop ; case _STR : { int idxBeforeEscape = idx ; int c = escape ( ) ; if ( ( c & ESC_MASK ) == ESC_MASK ) { idx = idxBeforeEscape ; break atomLoop ; } emit ( ( char ) c ) ; lenAtom ++ ; } break ; default : emit ( pattern . charAt ( idx ++ ) ) ; lenAtom ++ ; break ; } } if ( lenAtom == _NUM ) { internalError ( ) ; } instruction [ ret + RE . offsetOpdata ] = ( char ) lenAtom ; return ret ; }
@ Override public void drawItem ( Graphics2D g2 , CategoryItemRendererState state , Rectangle2D dataArea , CategoryPlot plot , CategoryAxis domainAxis , ValueAxis rangeAxis , CategoryDataset dataset , int row , int column , int pass ) { int visibleRow = state . getVisibleSeriesIndex ( row ) ; if ( visibleRow < _NUM ) { return ; } Number dataValue = dataset . getValue ( row , column ) ; if ( dataValue == null ) { return ; } double value = dataValue . doubleValue ( ) ; PlotOrientation orientation = plot . getOrientation ( ) ; double barW0 = calculateBarW0 ( plot , orientation , dataArea , domainAxis , state , visibleRow , column ) ; RectangleEdge edge = plot . getRangeAxisEdge ( ) ; double barL = rangeAxis . valueToJava2D ( value , dataArea , edge ) ; Line2D line ; double x , y ; if ( orientation . isHorizontal ( ) ) { x = barL ; y = barW0 + state . getBarWidth ( ) / _NUM ; line = new Line2D . Double ( barL , barW0 , barL , barW0 + state . getBarWidth ( ) ) ; } else { x = barW0 + state . getBarWidth ( ) / _NUM ; y = barL ; line = new Line2D . Double ( barW0 , barL , barW0 + state . getBarWidth ( ) , barL ) ; } if ( state . getElementHinting ( ) ) { beginElementGroup ( g2 , dataset . getRowKey ( row ) , dataset . getColumnKey ( column ) ) ; } Stroke itemStroke = getItemStroke ( row , column ) ; Paint itemPaint = getItemPaint ( row , column ) ; g2 . setStroke ( itemStroke ) ; g2 . setPaint ( itemPaint ) ; g2 . draw ( line ) ; if ( state . getElementHinting ( ) ) { endElementGroup ( g2 ) ; } CategoryItemLabelGenerator generator = getItemLabelGenerator ( row , column ) ; if ( generator != null && isItemLabelVisible ( row , column ) ) { drawItemLabel ( g2 , orientation , dataset , row , column , x , y , ( value < _NUM ) ) ; } int datasetIndex = plot . indexOf ( dataset ) ; updateCrosshairValues ( state . getCrosshairState ( ) , dataset . getRowKey ( row ) , dataset . getColumnKey ( column ) , value , datasetIndex , barW0 , barL , orientation ) ; EntityCollection entities = state . getEntityCollection ( ) ; if ( entities != null ) { addItemEntity ( entities , dataset , row , column , line . getBounds ( ) ) ; } }
public static < T > UnaryOperator < List < T > > from ( Collection < String > commandLineUdids , Function < T , ICloud . MBSBackup > mbsBackup , Function < ICloud . MBSBackup , String > formatter , Printer out , InputStream in ) { return commandLineUdids . isEmpty ( ) ? new User ( mbsBackup , out , in , formatter ) : new Udid ( mbsBackup , out , in , new ArrayList < > ( commandLineUdids ) ) ; }
public boolean isNetworkConnected ( ) { ConnectivityManager connectivityManager = ( ConnectivityManager ) getSystemService ( CONNECTIVITY_SERVICE ) ; NetworkInfo networkInfo = connectivityManager . getActiveNetworkInfo ( ) ; return networkInfo != null && networkInfo . isConnectedOrConnecting ( ) ; }
@ Override public void onTabClosing ( long time , int id ) { reset ( ) ; forceAnimationToFinish ( ) ; TabModel model = mTabModelSelector . getModelForTabId ( id ) ; if ( model != null ) { mClosedTab = createLayoutTab ( id , model . isIncognito ( ) , NO_CLOSE_BUTTON , NO_TITLE ) ; mClosedTab . setBorderAlpha ( _NUM ) ; mLayoutTabs = new LayoutTab [ ] { mClosedTab } ; updateCacheVisibleIds ( new LinkedList < Integer > ( Arrays . asList ( id ) ) ) ; } else { mLayoutTabs = null ; mClosedTab = null ; } super . onTabClosing ( time , id ) ; }
public void put ( String name , String supported , String authScheme , String level , boolean isDefault ) { SAMLv2AuthContext c = new SAMLv2AuthContext ( ) ; c . name = name ; c . supported = supported ; if ( authScheme . length ( ) != _NUM && authScheme != null ) { int index = authScheme . lastIndexOf ( _STR ) ; c . value = authScheme . substring ( index + _NUM ) ; c . key = authScheme . substring ( _NUM , index ) ; } else { c . value = _STR ; c . key = _STR ; } c . level = level ; c . isDefault = isDefault ; collections . put ( name , c ) ; }
public final void close ( LsServerPacket closePacket , boolean forced ) { synchronized ( guard ) { if ( isWriteDisabled ( ) ) { return ; } log . debug ( _STR + closePacket + _STR ) ; pendingClose = _BOOL ; isForcedClosing = forced ; sendMsgQueue . clear ( ) ; sendMsgQueue . addLast ( closePacket ) ; enableWriteInterest ( ) ; } }
private void replaceCollapsedEdges ( ) { List newEdges = new ArrayList ( ) ; for ( Iterator it = edgeList . iterator ( ) ; it . hasNext ( ) ; ) { Edge e = ( Edge ) it . next ( ) ; if ( e . isCollapsed ( ) ) { it . remove ( ) ; newEdges . add ( e . getCollapsedEdge ( ) ) ; } } edgeList . addAll ( newEdges ) ; }
private int readAnnotationValue ( int v , final char [ ] buf , final String name , final AnnotationVisitor av ) { int i ; if ( av == null ) { switch ( b [ v ] & _NUM ) { case _STR : return v + _NUM ; case _STR : return readAnnotationValues ( v + _NUM , buf , _BOOL , null ) ; case _STR : return readAnnotationValues ( v + _NUM , buf , _BOOL , null ) ; default : return v + _NUM ; } } switch ( b [ v ++ ] & _NUM ) { case _STR : case _STR : case _STR : case _STR : av . visit ( name , readConst ( readUnsignedShort ( v ) , buf ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , readInt ( items [ readUnsignedShort ( v ) ] ) == _NUM ? Boolean . FALSE : Boolean . TRUE ) ; v += _NUM ; break ; case _STR : av . visit ( name , ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , readUTF8 ( v , buf ) ) ; v += _NUM ; break ; case _STR : av . visitEnum ( name , readUTF8 ( v , buf ) , readUTF8 ( v + _NUM , buf ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , Type . getType ( readUTF8 ( v , buf ) ) ) ; v += _NUM ; break ; case _STR : v = readAnnotationValues ( v + _NUM , buf , _BOOL , av . visitAnnotation ( name , readUTF8 ( v , buf ) ) ) ; break ; case _STR : int size = readUnsignedShort ( v ) ; v += _NUM ; if ( size == _NUM ) { return readAnnotationValues ( v - _NUM , buf , _BOOL , av . visitArray ( name ) ) ; } switch ( this . b [ v ++ ] & _NUM ) { case _STR : byte [ ] bv = new byte [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { bv [ i ] = ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , bv ) ; -- v ; break ; case _STR : boolean [ ] zv = new boolean [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { zv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) != _NUM ; v += _NUM ; } av . visit ( name , zv ) ; -- v ; break ; case _STR : short [ ] sv = new short [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { sv [ i ] = ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , sv ) ; -- v ; break ; case _STR : char [ ] cv = new char [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { cv [ i ] = ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , cv ) ; -- v ; break ; case _STR : int [ ] iv = new int [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { iv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , iv ) ; -- v ; break ; case _STR : long [ ] lv = new long [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { lv [ i ] = readLong ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , lv ) ; -- v ; break ; case _STR : float [ ] fv = new float [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { fv [ i ] = Float . intBitsToFloat ( readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; } av . visit ( name , fv ) ; -- v ; break ; case _STR : double [ ] dv = new double [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { dv [ i ] = Double . longBitsToDouble ( readLong ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; } av . visit ( name , dv ) ; -- v ; break ; default : v = readAnnotationValues ( v - _NUM , buf , _BOOL , av . visitArray ( name ) ) ; } } return v ; }
public void timingEvent ( float fraction ) { current . x = ( int ) ( start . x + ( end . x - start . x ) * fraction ) ; current . y = ( int ) ( start . y + ( end . y - start . y ) * fraction ) ; track . setCarPosition ( current ) ; }
public SeaGlassTitlePane ( JRootPane rootPane , SeaGlassRootPaneUI ui ) { this . rootPane = rootPane ; this . rootPaneUI = ui ; rootParent = ( RootPaneContainer ) rootPane . getParent ( ) ; installTitlePane ( ) ; }
public String toString ( ) { StringBuilder s = new StringBuilder ( ) ; for ( Item item : this ) s . append ( item + _STR ) ; return s . toString ( ) ; }
public void writeLong ( long value ) throws IOException { checkWritePrimitiveTypes ( ) ; primitiveTypes . writeLong ( value ) ; }
static public URL findContainerXML ( String _containerName ) { URL _containerNameURL = null ; String _containerNameFilePath = Constants . Container . CONTAINER_CONFIG_DIRECTORY + _STR + _containerName + _STR ; _containerNameURL = getResourceURL ( _containerNameFilePath ) ; if ( _containerNameURL != null ) { if ( _logger . isLoggable ( Level . INFO ) ) { _logger . info ( _STR + _containerNameURL + _STR ) ; } } return _containerNameURL ; }
public static List < String > expandWildcards ( Iterable < File > dirs , List < String > names , Backend forBackend ) { List < String > result = new ArrayList < String > ( names . size ( ) ) ; for ( String name : names ) { expandWildcard ( result , dirs , name , forBackend ) ; } return result ; }
public static Charset forName ( String charsetName ) { return forName ( charsetName , null ) ; }
public NSNumber ( int i ) { doubleValue = longValue = i ; type = INTEGER ; }
public static void dump ( String message , StackTraceElement [ ] stackTrace ) { dump ( message , Arrays . asList ( stackTrace ) ) ; }
public void execQuery ( String sql , ExecQueryCallbackFunctionIF aListener ) throws GenericEntityException { if ( _connection == null ) { getConnection ( ) ; } try { if ( Debug . verboseOn ( ) ) Debug . logVerbose ( _STR + sql , module ) ; executeQuery ( sql ) ; boolean keepGoing = _BOOL ; while ( keepGoing && _rs . next ( ) ) { keepGoing = aListener . processNextRow ( _rs ) ; } if ( _manualTX ) { _connection . commit ( ) ; } } catch ( SQLException sqle ) { Debug . logWarning ( _STR + sql + _STR , module ) ; Debug . logWarning ( sqle . getMessage ( ) , module ) ; throw new GenericEntityException ( _STR + _sql , sqle ) ; } finally { close ( ) ; } }
private Name cacheName ( String sig ) { StringBuilder buf = new StringBuilder ( ) ; if ( sig . startsWith ( _STR ) ) { buf = buf . append ( _STR ) ; while ( sig . startsWith ( _STR ) ) { buf = buf . append ( target . syntheticNameChar ( ) ) ; sig = sig . substring ( _NUM ) ; } if ( sig . startsWith ( _STR ) ) { sig = sig . substring ( _NUM , sig . length ( ) - _NUM ) ; } } else { buf = buf . append ( _STR + target . syntheticNameChar ( ) ) ; } buf = buf . append ( sig . replace ( _STR , target . syntheticNameChar ( ) ) ) ; return names . fromString ( buf . toString ( ) ) ; }
@ Override public boolean eIsSet ( int featureID ) { switch ( featureID ) { case EipPackage . CONDITIONAL_ROUTE__CONDITION : return CONDITION_EDEFAULT == null ? condition != null : ! CONDITION_EDEFAULT . equals ( condition ) ; case EipPackage . CONDITIONAL_ROUTE__CHANNEL : return channel != null ; } return super . eIsSet ( featureID ) ; }
public static native String mapLibraryName ( String libname ) ;
public Matcher next ( ) throws IOException { readahead ( ) ; if ( matches == null ) { throw new NoSuchElementException ( ) ; } Matcher matcher = matches . next ( ) ; if ( discard ) { Pattern pattern = matcher . pattern ( ) ; for ( int n = _NUM ; n < patterns . length ; n ++ ) { if ( patterns [ n ] == pattern ) { patterns [ n ] = null ; break ; } } } return matcher ; }
@ CalledOnlyBy ( AmidstThread . FRAGMENT_LOADER ) public void processQueues ( ) { Dimension dimension = dimensionSetting . get ( ) ; updateLayerManager ( dimension ) ; processRecycleQueue ( ) ; Fragment fragment ; while ( ( fragment = loadingQueue . poll ( ) ) != null ) { loadFragment ( dimension , fragment ) ; dimension = dimensionSetting . get ( ) ; updateLayerManager ( dimension ) ; processRecycleQueue ( ) ; } layerManager . clearInvalidatedLayers ( ) ; }
default FieldDeclaration addPrivateField ( Class < ? > typeClass , String name ) { return addField ( typeClass , name , Modifier . PRIVATE ) ; }
void ReconstructPrivateSubrs ( int Font , IndexBaseItem [ ] fdPrivateBase , OffsetItem [ ] fdSubrs ) { for ( int i = _NUM ; i < fonts [ Font ] . fdprivateLengths . length ; i ++ ) { if ( fdSubrs [ i ] != null && fonts [ Font ] . PrivateSubrsOffset [ i ] >= _NUM ) { OutputList . addLast ( new SubrMarkerItem ( fdSubrs [ i ] , fdPrivateBase [ i ] ) ) ; if ( NewLSubrsIndex [ i ] != null ) OutputList . addLast ( new RangeItem ( new RandomAccessFileOrArray ( rasFactory . createSource ( NewLSubrsIndex [ i ] ) ) , _NUM , NewLSubrsIndex [ i ] . length ) ) ; } } }
public boolean matchChomp ( String seq ) { if ( matches ( seq ) ) { pos += seq . length ( ) ; return _BOOL ; } else { return _BOOL ; } }
public void initGL ( ) { mEglCore = new EglCore ( null , EglCore . FLAG_RECORDABLE | EglCore . FLAG_TRY_GLES3 ) ; mWindowSurface = new WindowSurface ( mEglCore , mSurfaceTexture ) ; mWindowSurface . makeCurrent ( ) ; mRecordSurface = new WindowSurface ( mEglCore , mMediaRecorder . getSurface ( ) , _BOOL ) ; initGLComponents ( ) ; }
void clear ( ) { if ( mViewTypeCount == _NUM ) { final ArrayList < View > scrap = mCurrentScrap ; final int scrapCount = scrap . size ( ) ; for ( int i = _NUM ; i < scrapCount ; i ++ ) { removeDetachedView ( scrap . remove ( scrapCount - _NUM - i ) , _BOOL ) ; } } else { final int typeCount = mViewTypeCount ; for ( int i = _NUM ; i < typeCount ; i ++ ) { final ArrayList < View > scrap = mScrapViews [ i ] ; final int scrapCount = scrap . size ( ) ; for ( int j = _NUM ; j < scrapCount ; j ++ ) { removeDetachedView ( scrap . remove ( scrapCount - _NUM - j ) , _BOOL ) ; } } } if ( mTransientStateViews != null ) { mTransientStateViews . clear ( ) ; } }
protected void contributeTokenRequestParameters ( final QueryString bodyParameters ) { }
public int read ( char cbuf [ ] , int off , int len ) { int k ; if ( position >= document . getLength ( ) ) { return - _NUM ; } k = len ; if ( ( position + k ) >= document . getLength ( ) ) k = document . getLength ( ) - ( int ) position ; if ( off + k >= cbuf . length ) k = cbuf . length - off ; try { document . getText ( ( int ) position , k , segment ) ; position += k ; System . arraycopy ( segment . array , segment . offset , cbuf , off , k ) ; return k ; } catch ( BadLocationException ble ) { return - _NUM ; } }
Builder addLenient ( String line ) { int index = line . indexOf ( _STR , _NUM ) ; if ( index != - _NUM ) { return addLenient ( line . substring ( _NUM , index ) , line . substring ( index + _NUM ) ) ; } else if ( line . startsWith ( _STR ) ) { return addLenient ( _STR , line . substring ( _NUM ) ) ; } else { return addLenient ( _STR , line ) ; } }
public static void mergeNodeChildren ( TreeNode node ) { DefaultMutableTreeNode masterNode = ( DefaultMutableTreeNode ) node ; for ( int i = _NUM ; i < masterNode . getChildCount ( ) ; i ++ ) { DefaultMutableTreeNode child = ( DefaultMutableTreeNode ) masterNode . getChildAt ( i ) ; if ( ! child . isLeaf ( ) ) { MergeHelpUtilities . mergeNodeChildren ( DEFAULT_MERGE_TYPE , child ) ; } } }
public void testNegateNegative ( ) { String a = _STR ; int aScale = _NUM ; String c = _STR ; int cScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal cNumber = new BigDecimal ( new BigInteger ( c ) , cScale ) ; assertEquals ( _STR , cNumber , aNumber . negate ( ) ) ; }
private static Object createAndBindItem ( ParameterAccess parameters , Class < ? > itemType ) { try { Object value = itemType . newInstance ( ) ; bind ( value , parameters ) ; return value ; } catch ( InstantiationException | IllegalAccessException e ) { throw new BindingException ( _STR + itemType , e ) ; } }
public SimpleSetupPanel ( Experiment exp ) { this ( ) ; setExperiment ( exp ) ; }
public static void addListener ( Listener listener ) { listeners . addLast ( listener ) ; }
private static void processArgs ( String [ ] args ) { for ( int i = _NUM ; i < args . length ; i ++ ) { String arg = args [ i ] ; if ( arg . equals ( _STR ) ) { outputDir = args [ ++ i ] ; } else if ( arg . equals ( _STR ) ) { unicodeData = args [ ++ i ] ; } else if ( arg . equals ( _STR ) ) { language = args [ ++ i ] ; } else if ( arg . equals ( _STR ) ) { country = args [ ++ i ] ; } else if ( arg . equals ( _STR ) ) { valiant = args [ ++ i ] ; } else { usage ( ) ; } } localeName = getLocaleName ( ) ; }
public static boolean isZoningRequired ( DbClient dbClient , VirtualArray nh ) { if ( nh . getAutoSanZoning ( ) == _BOOL ) { _log . info ( _STR + nh . getLabel ( ) ) ; return _BOOL ; } return NetworkUtil . areNetworkSystemDiscovered ( dbClient ) ; }
private void initXMLTree ( ) throws Exception { updateFilteredTokens ( ) ; ArrayList elements = getElements ( getFilteredTokens ( ) ) ; if ( elements . size ( ) > _NUM ) { throw new Exception ( _STR ) ; } setRootElement ( ( XMLElement ) elements . get ( _NUM ) ) ; }
public boolean hasNameValue ( String name ) { return nameValueMap . containsKey ( name . toLowerCase ( ) ) ; }
public boolean startsWith ( CharSeq prefix ) { return str . startsWith ( prefix . str ) ; }
public boolean containsWindow ( Class < ? > windowClass ) { return ( getWindow ( windowClass ) != null ) ; }
protected final void firePropertyChange ( String propertyName , long oldValue , long newValue ) { firePropertyChange ( propertyName , Long . valueOf ( oldValue ) , Long . valueOf ( newValue ) ) ; }
public void fadeToLayer ( int index ) { mTransitionState = TRANSITION_STARTING ; Arrays . fill ( mIsLayerOn , _BOOL ) ; mIsLayerOn [ index ] = _BOOL ; invalidateSelf ( ) ; }
private void fitImageToView ( ) { Drawable drawable = getDrawable ( ) ; if ( drawable == null || drawable . getIntrinsicWidth ( ) == _NUM || drawable . getIntrinsicHeight ( ) == _NUM ) { return ; } if ( matrix == null || prevMatrix == null ) { return ; } int drawableWidth = drawable . getIntrinsicWidth ( ) ; int drawableHeight = drawable . getIntrinsicHeight ( ) ; float scaleX = ( float ) viewWidth / drawableWidth ; float scaleY = ( float ) viewHeight / drawableHeight ; switch ( mScaleType ) { case CENTER : scaleX = scaleY = _NUM ; break ; case CENTER_CROP : scaleX = scaleY = Math . max ( scaleX , scaleY ) ; break ; case CENTER_INSIDE : scaleX = scaleY = Math . min ( _NUM , Math . min ( scaleX , scaleY ) ) ; case FIT_CENTER : scaleX = scaleY = Math . min ( scaleX , scaleY ) ; break ; case FIT_XY : break ; default : throw new UnsupportedOperationException ( _STR ) ; } float redundantXSpace = viewWidth - ( scaleX * drawableWidth ) ; float redundantYSpace = viewHeight - ( scaleY * drawableHeight ) ; matchViewWidth = viewWidth - redundantXSpace ; matchViewHeight = viewHeight - redundantYSpace ; if ( ! isZoomed ( ) && ! imageRenderedAtLeastOnce ) { matrix . setScale ( scaleX , scaleY ) ; matrix . postTranslate ( redundantXSpace / _NUM , redundantYSpace / _NUM ) ; normalizedScale = _NUM ; } else { if ( prevMatchViewWidth == _NUM || prevMatchViewHeight == _NUM ) { savePreviousImageValues ( ) ; } prevMatrix . getValues ( m ) ; m [ Matrix . MSCALE_X ] = matchViewWidth / drawableWidth * normalizedScale ; m [ Matrix . MSCALE_Y ] = matchViewHeight / drawableHeight * normalizedScale ; float transX = m [ Matrix . MTRANS_X ] ; float transY = m [ Matrix . MTRANS_Y ] ; float prevActualWidth = prevMatchViewWidth * normalizedScale ; float actualWidth = getImageWidth ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_X , transX , prevActualWidth , actualWidth , prevViewWidth , viewWidth , drawableWidth ) ; float prevActualHeight = prevMatchViewHeight * normalizedScale ; float actualHeight = getImageHeight ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_Y , transY , prevActualHeight , actualHeight , prevViewHeight , viewHeight , drawableHeight ) ; matrix . setValues ( m ) ; } fixTrans ( ) ; setImageMatrix ( matrix ) ; }
public static int hashCode ( boolean [ ] field ) { return field == null || field . length == _NUM ? _NUM : Arrays . hashCode ( field ) ; }
public AbstractSurfaceObject ( AbstractSurfaceObject source ) { super ( source ) ; this . visible = source . visible ; this . uniqueId = nextUniqueId ( ) ; this . lastModifiedTime = System . currentTimeMillis ( ) ; this . enableBatchPicking = source . enableBatchPicking ; }
public SootMethodAndClass parseSootMethodString ( String parseString ) { if ( ! parseString . startsWith ( _STR ) || ! parseString . endsWith ( _STR ) ) { throw new IllegalArgumentException ( _STR + parseString + _STR ) ; } String name = _STR ; String className = _STR ; String returnType = _STR ; Pattern pattern = Pattern . compile ( _STR ) ; Matcher matcher = pattern . matcher ( parseString ) ; if ( matcher . find ( ) ) { className = matcher . group ( _NUM ) ; } pattern = Pattern . compile ( _STR ) ; matcher = pattern . matcher ( parseString ) ; if ( matcher . find ( ) ) { returnType = matcher . group ( _NUM ) ; parseString = parseString . substring ( matcher . end ( _NUM ) ) ; } pattern = Pattern . compile ( _STR ) ; matcher = pattern . matcher ( parseString ) ; if ( matcher . find ( ) ) { name = matcher . group ( _NUM ) ; } List < String > paramList = new ArrayList < String > ( ) ; pattern = Pattern . compile ( _STR ) ; matcher = pattern . matcher ( parseString ) ; if ( matcher . find ( ) ) { String params = matcher . group ( _NUM ) ; for ( String param : params . split ( _STR ) ) paramList . add ( param . trim ( ) ) ; } return new SootMethodAndClass ( name , className , returnType , paramList ) ; }
private void createNewReviewTask ( TaskRepository repository , TaskData taskData ) throws CoreException { Repository repo = AppraisePluginUtils . getGitRepoForRepository ( repository ) ; AppraisePluginReviewClient client ; try { client = new AppraisePluginReviewClient ( repository ) ; } catch ( GitClientException e1 ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , _STR ) ) ; } String currentBranch ; try { currentBranch = repo . getFullBranch ( ) ; } catch ( IOException e ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , _STR , e ) ) ; } if ( MASTER_REF . equals ( currentBranch ) ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , _STR ) ) ; } setAttributeValue ( taskData , schema . REQUESTER , repository . getUserName ( ) ) ; setAttributeValue ( taskData , schema . TARGET_REF , MASTER_REF ) ; setAttributeValue ( taskData , schema . REVIEW_REF , currentBranch ) ; RevCommit reviewCommit ; try { reviewCommit = client . getReviewCommit ( currentBranch , MASTER_REF ) ; } catch ( GitClientException e ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , _STR , e ) ) ; } if ( reviewCommit == null ) { throw new CoreException ( new Status ( IStatus . INFO , AppraiseConnectorPlugin . PLUGIN_ID , _STR + currentBranch ) ) ; } setAttributeValue ( taskData , schema . DESCRIPTION , reviewCommit . getFullMessage ( ) ) ; setAttributeValue ( taskData , schema . REVIEW_COMMIT , reviewCommit . getName ( ) ) ; try { List < DiffEntry > diffs = client . getReviewDiffs ( currentBranch , MASTER_REF ) ; populateDiffs ( repository , diffs , taskData ) ; } catch ( Exception e ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , _STR , e ) ) ; } }
public boolean isCritical ( ) { return _BOOL ; }
@ Override public void startup ( ) throws Exception { Log . d ( Mary . LOG , _STR ) ; List < String > voiceNames = MaryProperties . getList ( _STR ) ; for ( String voiceName : voiceNames ) { long time = System . currentTimeMillis ( ) ; Voice unitSelVoice = new UnitSelectionVoice ( voiceName , this ) ; Log . d ( Mary . LOG , _STR + unitSelVoice + _STR ) ; Voice . registerVoice ( unitSelVoice ) ; long newtime = System . currentTimeMillis ( ) - time ; Log . i ( Mary . LOG , _STR + voiceName + _STR + newtime + _STR ) ; } Log . i ( Mary . LOG , _STR ) ; }
public int findStartOfColumn ( int column ) { if ( column == mColumns ) return getSpaceUsed ( ) ; int currentColumn = _NUM ; int currentCharIndex = _NUM ; while ( _BOOL ) { int newCharIndex = currentCharIndex ; char c = mText [ newCharIndex ++ ] ; boolean isHigh = Character . isHighSurrogate ( c ) ; int codePoint = isHigh ? Character . toCodePoint ( c , mText [ newCharIndex ++ ] ) : c ; int wcwidth = WcWidth . width ( codePoint ) ; if ( wcwidth > _NUM ) { currentColumn += wcwidth ; if ( currentColumn == column ) { while ( newCharIndex < mSpaceUsed ) { if ( Character . isHighSurrogate ( mText [ newCharIndex ] ) ) { if ( WcWidth . width ( Character . toCodePoint ( mText [ newCharIndex ] , mText [ newCharIndex + _NUM ] ) ) <= _NUM ) { newCharIndex += _NUM ; } else { break ; } } else if ( WcWidth . width ( mText [ newCharIndex ] ) <= _NUM ) { newCharIndex ++ ; } else { break ; } } return newCharIndex ; } else if ( currentColumn > column ) { return currentCharIndex ; } } currentCharIndex = newCharIndex ; } }
private TripSchedule rerouteTripSchedule ( TripSchedule originalSchedule ) { TripSchedule schedule = originalSchedule . clone ( ) ; schedule . arrivals = new int [ newPatternLength ] ; schedule . departures = new int [ newPatternLength ] ; int prevOutputDeparture = _NUM ; for ( int ss = _NUM , ts = _NUM ; ts < newPatternLength ; ss ++ , ts ++ ) { if ( ( ss == insertBeginIndex - _NUM ) || ( ss == _NUM && insertBeginIndex == _NUM ) ) { int hopTime = originalSchedule . arrivals [ ss ] ; if ( ss > _NUM ) hopTime -= originalSchedule . departures [ ss - _NUM ] ; schedule . arrivals [ ts ] = prevOutputDeparture + hopTime ; schedule . departures [ ts ] = schedule . arrivals [ ts ] + dwellTimes [ _NUM ] ; prevOutputDeparture = schedule . departures [ ts ] ; ts ++ ; for ( int hop = _NUM , dwell = _NUM ; dwell < dwellTimes . length ; hop ++ , dwell ++ ) { schedule . arrivals [ ts ] = prevOutputDeparture + hopTimes [ hop ] ; schedule . departures [ ts ] = schedule . arrivals [ ts ] + dwellTimes [ dwell ] ; prevOutputDeparture = schedule . departures [ ts ] ; ts ++ ; } ss = insertEndIndex + _NUM ; if ( ts == newPatternLength ) break ; } int hopTime = originalSchedule . arrivals [ ss ] ; if ( ss > _NUM ) hopTime -= originalSchedule . departures [ ss - _NUM ] ; schedule . arrivals [ ts ] = prevOutputDeparture + hopTime ; int dwellTime = originalSchedule . departures [ ss ] - originalSchedule . arrivals [ ss ] ; schedule . departures [ ts ] = schedule . arrivals [ ts ] + dwellTime ; prevOutputDeparture = schedule . departures [ ts ] ; } int timeShift = originalSchedule . arrivals [ originalFixedPointStopIndex ] - schedule . arrivals [ newFixedPointStopIndex ] ; for ( int i = _NUM ; i < newPatternLength ; i ++ ) { schedule . arrivals [ i ] += timeShift ; schedule . departures [ i ] += timeShift ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( _STR , originalSchedule . arrivals ) ; LOG . debug ( _STR , originalSchedule . departures ) ; LOG . debug ( _STR , schedule . arrivals ) ; LOG . debug ( _STR , schedule . departures ) ; } return schedule ; }
public static Color decode ( String color , Color defaultColor ) { if ( color == null ) { return defaultColor ; } Color c = getNamedColor ( color ) ; if ( c == null ) { try { c = Color . decode ( color ) ; } catch ( NumberFormatException ex ) { return defaultColor ; } } return c ; }
public static LinkedList < MaryModule > modulesRequiredForProcessing ( MaryDataType sourceType , MaryDataType targetType , Locale locale , Voice voice ) { if ( ! registrationComplete ) throw new IllegalStateException ( _STR ) ; if ( sourceType == null ) throw new NullPointerException ( _STR ) ; if ( targetType == null ) throw new NullPointerException ( _STR ) ; LinkedList < MaryDataType > seenTypes = new LinkedList < MaryDataType > ( ) ; seenTypes . add ( sourceType ) ; return modulesRequiredForProcessing ( sourceType , targetType , locale , voice , seenTypes ) ; }
public double distance ( Vector o ) { return Math . sqrt ( NumberConversions . square ( x - o . x ) + NumberConversions . square ( y - o . y ) + NumberConversions . square ( z - o . z ) ) ; }
public static long calculateElapsedGC ( ) { long timeMillis = _NUM ; for ( GarbageCollectorMXBean gcbean : gcbeans ) { timeMillis += gcbean . getCollectionTime ( ) ; } return timeMillis ; }
public void close ( ) { }
public static < V > int addDistinctList ( List < V > sourceList , List < V > entryList ) { if ( sourceList == null || isEmpty ( entryList ) ) { return _NUM ; } int sourceCount = sourceList . size ( ) ; for ( V entry : entryList ) { if ( ! sourceList . contains ( entry ) ) { sourceList . add ( entry ) ; } } return sourceList . size ( ) - sourceCount ; }
public void startObject ( int numfields ) { notNested ( ) ; if ( vtable == null || vtable . length < numfields ) vtable = new int [ numfields ] ; vtable_in_use = numfields ; Arrays . fill ( vtable , _NUM , vtable_in_use , _NUM ) ; nested = _BOOL ; object_start = offset ( ) ; }
private Map < String , String > produceStream ( String topic ) { List < ProducerRecord < String , String > > messages = new ArrayList < > ( EVENT_CNT ) ; Map < String , String > keyValMap = new HashMap < > ( ) ; for ( int evt = _NUM ; evt < EVENT_CNT ; evt ++ ) { long runtime = System . currentTimeMillis ( ) ; String key = topic + _STR + String . valueOf ( evt ) ; String msg = runtime + String . valueOf ( evt ) ; messages . add ( new ProducerRecord < > ( topic , key , msg ) ) ; keyValMap . put ( key , msg ) ; } kafkaBroker . sendMessages ( messages ) ; return keyValMap ; }
public static String stringOfChar ( char ch , int count ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { buf . append ( ch ) ; } return buf . toString ( ) ; }
private void addConnectionView ( Connection connection ) { PlatformImpl . runAndWait ( null ) ; }
public static void trim ( CharSequence aText , int [ ] aSpan ) { int begin = aSpan [ _NUM ] ; int end = aSpan [ _NUM ] - _NUM ; CharSequence data = aText ; while ( ( begin < ( data . length ( ) - _NUM ) ) && trimChar ( data . charAt ( begin ) ) ) { begin ++ ; } while ( ( end > _NUM ) && trimChar ( data . charAt ( end ) ) ) { end -- ; } end ++ ; aSpan [ _NUM ] = begin ; aSpan [ _NUM ] = end ; }
public void addScriptFinishedListener ( ScriptExecutionListener l ) { m_FinishedListeners . add ( l ) ; }
public void onConsumeFinished ( Purchase purchase , IabResult result ) ;
public void test_getPutByteArray ( ) { final int size = _NUM ; final IDataRecord buf = new FixedByteArrayBuffer ( size ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( _NUM ) ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( size - _NUM ) ) ; final int pos = _NUM ; for ( int i = _NUM ; i < LIMIT ; i ++ ) { final byte [ ] expected = new byte [ r . nextInt ( size - _NUM ) ] ; r . nextBytes ( expected ) ; buf . put ( pos , expected ) ; assertEquals ( _NUM , BytesUtil . compareBytesWithLenAndOffset ( _NUM , expected . length , expected , pos , expected . length , buf . array ( ) ) ) ; final byte [ ] actual = new byte [ expected . length ] ; buf . get ( pos , actual ) ; assertTrue ( BytesUtil . bytesEqual ( expected , actual ) ) ; } assertEquals ( ( byte ) _NUM , buf . getByte ( _NUM ) ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( pos + size - _NUM ) ) ; }
public static double [ ] concatAllDouble ( double [ ] ... arrays ) { int totalLength = _NUM ; final int subArrayCount = arrays . length ; for ( int i = _NUM ; i < subArrayCount ; ++ i ) { totalLength += arrays [ i ] . length ; } double [ ] result = Arrays . copyOf ( arrays [ _NUM ] , totalLength ) ; int offset = arrays [ _NUM ] . length ; for ( int i = _NUM ; i < subArrayCount ; ++ i ) { System . arraycopy ( arrays [ i ] , _NUM , result , offset , arrays [ i ] . length ) ; offset += arrays [ i ] . length ; } return result ; }
private T [ ] ensureCapacity ( int minCapacity ) { if ( tmp . length < minCapacity ) { int newSize = minCapacity ; newSize |= newSize > > _NUM ; newSize |= newSize > > _NUM ; newSize |= newSize > > _NUM ; newSize |= newSize > > _NUM ; newSize |= newSize > > _NUM ; newSize ++ ; if ( newSize < _NUM ) newSize = minCapacity ; else newSize = Math . min ( newSize , a . length > > > _NUM ) ; T [ ] newArray = ( T [ ] ) new Object [ newSize ] ; tmp = newArray ; } return tmp ; }
public synchronized void add ( String category , double minValue , double maxValue ) { super . add ( category , minValue ) ; mMaxValues . add ( maxValue ) ; }
public void CONT ( int sessionNumber ) throws Exception { this . maxSessionNumber = Math . max ( this . maxSessionNumber , sessionNumber ) ; testElements . add ( new ContinuationElement ( sessionNumber ) ) ; }
public static double calcRotationAngleInDegrees ( PointF centerPt , PointF targetPt ) { double theta = Math . atan2 ( targetPt . y - centerPt . y , targetPt . x - centerPt . x ) ; double angle = Math . toDegrees ( theta ) ; if ( angle < _NUM ) { angle += _NUM ; } return angle ; }
public int countIn ( CharSequence sequence ) { int count = _NUM ; for ( int i = _NUM ; i < sequence . length ( ) ; i ++ ) { if ( matches ( sequence . charAt ( i ) ) ) { count ++ ; } } return count ; }
public DeltaCRLIndicatorExtension ( int crlNum ) throws IOException { super ( PKIXExtensions . DeltaCRLIndicator_Id , _BOOL , BigInteger . valueOf ( crlNum ) , NAME , LABEL ) ; }
public static void v ( String tag , String s , Object ... args ) { if ( LOG . VERBOSE >= LOGLEVEL ) Log . v ( tag , String . format ( s , args ) ) ; }
static private double calcLogProb ( int numAppear , double mu ) { final double sigma = calcSigmaFromMu ( mu ) ; final double logNumAppear = Math . log ( numAppear ) ; final double overMu = Math . max ( logNumAppear - mu , _NUM ) ; final double res = - ( _NUM / _NUM ) * ( overMu * overMu ) / ( sigma * sigma ) - s_logSqrtTwoPi - Math . log ( sigma ) ; assert ( res <= _NUM ) ; return res ; }
@ Override public SoftwarePIDController withTolerance ( double tolerance ) { target = target . withTolerance ( Math . abs ( tolerance ) ) ; return this ; }
protected final void dragDropFinished ( final boolean success , final int operations , final int x , final int y ) { DragSourceEvent event = new DragSourceDropEvent ( getDragSourceContext ( ) , operations & sourceActions , success , x , y ) ; EventDispatcher dispatcher = new EventDispatcher ( DISPATCH_FINISH , event ) ; SunToolkit . invokeLaterOnAppContext ( SunToolkit . targetToAppContext ( getComponent ( ) ) , dispatcher ) ; startSecondaryEventLoop ( ) ; setNativeContext ( _NUM ) ; dragImage = null ; dragImageOffset = null ; }
@ Override public byte [ ] write ( InternalLog log ) throws IOException { final byte [ ] rowkey = RowkeyBuilder . buildRowkey ( log ) ; final Put p = new Put ( rowkey ) ; populateColumnValues ( p , log ) ; tbl . put ( p ) ; final List < byte [ ] > indexRowkeys = log . getIndexRowkeys ( ) ; if ( indexRowkeys != null ) { writeIndexes ( rowkey , indexRowkeys ) ; } return rowkey ; }
private void insertIntoDynamicTable ( int index , Header entry ) { headerList . add ( entry ) ; int delta = entry . hpackSize ; if ( index != - _NUM ) { delta -= dynamicTable [ dynamicTableIndex ( index ) ] . hpackSize ; } if ( delta > maxDynamicTableByteCount ) { clearDynamicTable ( ) ; return ; } int bytesToRecover = ( dynamicTableByteCount + delta ) - maxDynamicTableByteCount ; int entriesEvicted = evictToRecoverBytes ( bytesToRecover ) ; if ( index == - _NUM ) { if ( headerCount + _NUM > dynamicTable . length ) { Header [ ] doubled = new Header [ dynamicTable . length * _NUM ] ; System . arraycopy ( dynamicTable , _NUM , doubled , dynamicTable . length , dynamicTable . length ) ; nextHeaderIndex = dynamicTable . length - _NUM ; dynamicTable = doubled ; } index = nextHeaderIndex -- ; dynamicTable [ index ] = entry ; headerCount ++ ; } else { index += dynamicTableIndex ( index ) + entriesEvicted ; dynamicTable [ index ] = entry ; } dynamicTableByteCount += delta ; }
protected static String extractSecretAccessKey ( String s3uri ) { return s3uri . substring ( s3uri . indexOf ( _STR , s3uri . indexOf ( _STR ) + _NUM ) + _NUM , s3uri . indexOf ( _STR ) ) ; }
private void dial ( String contactInformation , boolean makeTheCall , boolean usePhoneSpeaker ) { if ( contactInformation . equals ( _STR ) ) { String lastRecipient = RecipientCmd . getLastRecipientNumber ( ) ; String lastRecipientName = RecipientCmd . getLastRecipientName ( ) ; if ( lastRecipient != null ) { doDial ( lastRecipientName , lastRecipient , makeTheCall , usePhoneSpeaker ) ; } else { send ( _STR ) ; } } else { ResolvedContact resolvedContact = mContactsResolver . resolveContact ( contactInformation , ContactsResolver . TYPE_ALL ) ; if ( resolvedContact == null ) { send ( R . string . chat_no_match_for , contactInformation ) ; } else if ( resolvedContact . isDistinct ( ) ) { doDial ( resolvedContact . getName ( ) , resolvedContact . getNumber ( ) , makeTheCall , usePhoneSpeaker ) ; } else { askForMoreDetails ( resolvedContact . getCandidates ( ) ) ; } } }
public void addSafeClass ( SootClass clz ) { safeClasses . add ( clz . getName ( ) ) ; }
private boolean activeListHasRoom ( ) { int maxDownloads = _NUM ; return mActiveList . size ( ) < maxDownloads ; }
public static final double parseTime ( final String time , final char separator ) { if ( time == null || time . length ( ) == _NUM || time . equals ( _STR ) ) { return Time . UNDEFINED_TIME ; } boolean isNegative = ( time . charAt ( _NUM ) == _STR ) ; String [ ] strings = ( isNegative ? StringUtils . explode ( time . substring ( _NUM ) , separator ) : StringUtils . explode ( time , separator ) ) ; double seconds = _NUM ; if ( strings . length == _NUM ) { seconds = Math . abs ( Double . parseDouble ( strings [ _NUM ] ) ) ; } else if ( strings . length == _NUM ) { int h = Integer . parseInt ( strings [ _NUM ] ) ; int m = Integer . parseInt ( strings [ _NUM ] ) ; if ( ( m < _NUM ) || ( m > _NUM ) ) { throw new IllegalArgumentException ( _STR + time ) ; } seconds = Math . abs ( h ) * _NUM + m * _NUM ; } else if ( strings . length == _NUM ) { int h = Integer . parseInt ( strings [ _NUM ] ) ; int m = Integer . parseInt ( strings [ _NUM ] ) ; double s = Double . parseDouble ( strings [ _NUM ] ) ; if ( ( m < _NUM ) || ( m > _NUM ) ) { throw new IllegalArgumentException ( _STR + time ) ; } if ( ( s < _NUM ) || ( s >= _NUM ) ) { throw new IllegalArgumentException ( _STR + time ) ; } seconds = Math . abs ( h ) * _NUM + m * _NUM + s ; } else { throw new IllegalArgumentException ( _STR + time ) ; } if ( isNegative ) { seconds = - seconds ; } return seconds ; }
public boolean isRunning ( ) { return this . running ; }
protected static Map < String , Step > parse ( Class < ? extends RSLPStemmerBase > clazz , String resource ) { try { InputStream is = clazz . getResourceAsStream ( resource ) ; LineNumberReader r = new LineNumberReader ( new InputStreamReader ( is , StandardCharsets . UTF_8 ) ) ; Map < String , Step > steps = new HashMap < > ( ) ; String step ; while ( ( step = readLine ( r ) ) != null ) { Step s = parseStep ( r , step ) ; steps . put ( s . name , s ) ; } r . close ( ) ; return steps ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public String betToString ( ) { final StringBuilder sb = new StringBuilder ( ) ; sb . append ( amount ) ; sb . append ( _STR ) ; sb . append ( itemName ) ; sb . append ( _STR ) ; sb . append ( target ) ; return sb . toString ( ) ; }
public void test_nonEmptyJournal ( ) throws IOException , InterruptedException , ExecutionException { final File out = File . createTempFile ( getName ( ) , Options . JNL ) ; try { final Journal src = getStore ( getProperties ( ) ) ; try { if ( ! ( src . getBufferStrategy ( ) instanceof IHABufferStrategy ) ) { return ; } src . write ( getRandomData ( _NUM ) ) ; src . commit ( ) ; try { final ISnapshotFactory snapshotFactory = new MySnapshotFactory ( getName ( ) , _BOOL ) ; final Future < ISnapshotResult > f = src . snapshot ( snapshotFactory ) ; final ISnapshotResult snapshotResult = f . get ( ) ; final File snapshotFile = snapshotResult . getFile ( ) ; try { final Journal tmp = openSnapshot ( snapshotResult ) ; assertEquals ( src . getRootBlockView ( ) , tmp . getRootBlockView ( ) ) ; tmp . destroy ( ) ; } finally { if ( snapshotFile . exists ( ) ) { snapshotFile . delete ( ) ; } } } catch ( IllegalArgumentException ex ) { log . info ( _STR + ex ) ; } } finally { src . destroy ( ) ; } } finally { out . delete ( ) ; } }
private boolean checkMatchIp ( Map < String , Object > rows ) { boolean matchEther = _BOOL ; String val = ( String ) rows . get ( StaticFlowEntryPusher . COLUMN_DL_TYPE ) ; if ( val != null ) { int type = _NUM ; if ( val . startsWith ( _STR ) ) { type = Integer . parseInt ( val . substring ( _NUM ) , _NUM ) ; } else { try { type = Integer . parseInt ( val ) ; } catch ( NumberFormatException e ) { } } if ( type == _NUM ) matchEther = _BOOL ; } if ( ( rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_DST ) || rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_SRC ) || rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_PROTO ) || rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_TOS ) ) && ( matchEther == _BOOL ) ) return _BOOL ; return _BOOL ; }
public static double powQuick ( double value , double power ) { if ( USE_JDK_MATH ) { return STRICT_MATH ? StrictMath . pow ( value , power ) : Math . pow ( value , power ) ; } return FastMath . exp ( power * FastMath . logQuick ( value ) ) ; }
private String classToEntryPath ( Class < ? > clazz ) { String name = _STR ; Class < ? > parent ; while ( ( parent = clazz . getEnclosingClass ( ) ) != null ) { name = _STR + clazz . getSimpleName ( ) + name ; clazz = parent ; } return classNameToEntryPath ( clazz . getCanonicalName ( ) + name ) ; }
public static String write ( POSMikheevCounter counter ) { return POSBaseLineCounter . write ( counter ) ; }
private Map < String , AnnotationMirror > annosInPackage ( PackageElement packageElement ) { return createImportedAnnotationsMap ( ElementFilter . typesIn ( packageElement . getEnclosedElements ( ) ) ) ; }
public OsmElement pasteFrom ( ) { List < Way > ways = storage . getWays ( ) ; List < Node > nodes = storage . getNodes ( ) ; if ( mode == Mode . CUT ) { reset ( ) ; if ( ways != null && ways . size ( ) == _NUM ) { Way w = ways . get ( _NUM ) ; w . setState ( savedState ) ; for ( Node nd : w . getNodes ( ) ) { Log . d ( _STR , _STR + nd . getOsmId ( ) ) ; nd . setState ( savedNdState . get ( nd ) ) ; } return w ; } else if ( nodes != null && nodes . size ( ) == _NUM ) { Node n = nodes . get ( _NUM ) ; n . setState ( savedState ) ; return n ; } } else { if ( ways != null && ways . size ( ) == _NUM ) { return ways . get ( _NUM ) ; } else if ( nodes != null && nodes . size ( ) == _NUM ) { return nodes . get ( _NUM ) ; } } return null ; }
public final void updateCursor ( ) { updatePending . set ( _BOOL ) ; updateCursorImpl ( ) ; }
public static boolean isMiddleMouseButton ( MouseEvent anEvent ) { return ( ( anEvent . getModifiersEx ( ) & InputEvent . BUTTON2_DOWN_MASK ) != _NUM || anEvent . getButton ( ) == MouseEvent . BUTTON2 ) ; }
public void addSuccessMessage ( final String successMessage ) { successMessageList . add ( successMessage ) ; }
private void startStoppedChanged ( ) { clock . setStartStopped ( startStoppedCheckBox . isSelected ( ) ) ; changed = _BOOL ; }
public void close ( ) throws IOException { try { Debug . message ( _STR , _STR ) ; if ( Debug . debugging ( _STR ) ) { Thread . sleep ( _NUM ) ; } if ( inputStream != null ) inputStream . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } inputStream = null ; }
public static Long nextLogSegmentSequenceNumber ( List < LogSegmentMetadata > segmentListDesc ) { int lastAssignedLogSegmentIdx = - _NUM ; Long lastAssignedLogSegmentSeqNo = null ; Long nextLogSegmentSeqNo = null ; for ( int i = _NUM ; i < segmentListDesc . size ( ) ; i ++ ) { LogSegmentMetadata metadata = segmentListDesc . get ( i ) ; if ( LogSegmentMetadata . supportsLogSegmentSequenceNo ( metadata . getVersion ( ) ) ) { lastAssignedLogSegmentSeqNo = metadata . getLogSegmentSequenceNumber ( ) ; lastAssignedLogSegmentIdx = i ; break ; } } if ( null != lastAssignedLogSegmentSeqNo ) { nextLogSegmentSeqNo = lastAssignedLogSegmentSeqNo + lastAssignedLogSegmentIdx + _NUM ; } return nextLogSegmentSeqNo ; }
private void readBinary ( final LittleEndianDataInputStream dis ) throws IOException { RajLog . i ( _STR ) ; dis . skip ( _NUM ) ; int facetCount = dis . readInt ( ) ; float [ ] verticesArr = new float [ facetCount * _NUM ] ; float [ ] normalsArr = new float [ facetCount * _NUM ] ; int [ ] indicesArr = new int [ facetCount * _NUM ] ; float [ ] tempNorms = new float [ _NUM ] ; int vertPos = _NUM , normPos = _NUM ; for ( int i = _NUM ; i < indicesArr . length ; i ++ ) indicesArr [ i ] = i ; while ( dis . available ( ) > _NUM ) { for ( int j = _NUM ; j < _NUM ; j ++ ) { tempNorms [ j ] = dis . readFloat ( ) ; if ( Float . isNaN ( tempNorms [ j ] ) || Float . isInfinite ( tempNorms [ j ] ) ) { RajLog . w ( _STR ) ; tempNorms [ _NUM ] = _NUM ; tempNorms [ _NUM ] = _NUM ; tempNorms [ _NUM ] = _NUM ; break ; } } for ( int j = _NUM ; j < _NUM ; j ++ ) { normalsArr [ normPos ++ ] = tempNorms [ _NUM ] ; normalsArr [ normPos ++ ] = tempNorms [ _NUM ] ; normalsArr [ normPos ++ ] = tempNorms [ _NUM ] ; } for ( int j = _NUM ; j < _NUM ; j ++ ) verticesArr [ vertPos ++ ] = dis . readFloat ( ) ; dis . skip ( _NUM ) ; } mRootObject . setData ( verticesArr , normalsArr , null , null , indicesArr , _BOOL ) ; }
public static void assertSpecificLang ( String specificLang ) throws XMPException { if ( specificLang == null || specificLang . length ( ) == _NUM ) { throw new XMPException ( _STR , XMPError . BADPARAM ) ; } }
public int onBlockExploded ( ) { return ( int ) ( fuseTime / _NUM + Math . random ( ) * fuseTime / _NUM ) ; }
@ Override public boolean hasQueuedReaderThreads ( ) { return readerLock . hasQueuedThreads ( ) ; }
public long inactiveTimeMillis ( ) { return System . currentTimeMillis ( ) - lastTimeMillis ; }
public static void check ( boolean cond , Object value ) { if ( ! cond ) error ( String . valueOf ( value ) ) ; }
public void addDefinition ( ICOSDefinition cosDef ) throws UMSException { if ( ! ( cosDef instanceof DirectCOSDefinition ) ) { String msg = i18n . getString ( IUMSConstants . INVALID_COSDEFINITION ) ; throw new UMSException ( msg ) ; } String [ ] cosAttributes = cosDef . getCOSAttributes ( ) ; AbstractCollection aList = ( AbstractCollection ) Arrays . asList ( ICOSDefinition . qualifiers ) ; for ( int i = _NUM ; i < cosAttributes . length ; i ++ ) { String cosAttribute = null ; String qualifier = null ; StringTokenizer st = new StringTokenizer ( cosAttributes [ i ] ) ; if ( st . hasMoreTokens ( ) ) { cosAttribute = st . nextToken ( ) ; } if ( cosAttribute == null ) { String msg = i18n . getString ( IUMSConstants . INVALID_COS_ATTRIBUTE_QUALIFIER ) ; throw new UMSException ( msg ) ; } if ( st . hasMoreTokens ( ) ) qualifier = st . nextToken ( ) ; if ( qualifier == null ) { qualifier = ICOSDefinition . qualifiers [ ICOSDefinition . DEFAULT ] ; cosDef . removeCOSAttribute ( cosAttribute ) ; cosDef . addCOSAttribute ( cosAttribute , ICOSDefinition . DEFAULT ) ; } if ( ! aList . contains ( qualifier ) ) { String msg = i18n . getString ( IUMSConstants . INVALID_COS_ATTRIBUTE_QUALIFIER ) ; throw new UMSException ( msg ) ; } } PersistentObject po = ( PersistentObject ) cosDef ; _parentObject . addChild ( po ) ; }
public static SourceDataQuality fromXML ( Element domElement ) { NodeList fields = domElement . getChildNodes ( ) ; int fieldsCount = fields . getLength ( ) ; String fieldName ; String fieldValueString ; Node fieldNode ; SourceDataQuality result = new SourceDataQuality ( ) ; for ( int i = _NUM ; i != fieldsCount ; i ++ ) { fieldNode = fields . item ( i ) ; if ( fieldNode . getNodeType ( ) == Node . ELEMENT_NODE ) { fieldName = fieldNode . getNodeName ( ) ; Node fieldValueNode = fieldNode . getFirstChild ( ) ; if ( fieldValueNode != null ) { fieldValueString = fieldValueNode . getNodeValue ( ) ; } else { fieldValueString = _STR ; } if ( fieldName . equals ( XML_ELEMENT_QUALITY_CODE ) ) { result . qualityCode = Short . parseShort ( fieldValueString ) ; } else if ( fieldName . equals ( XML_ELEMENT_QUALITY_DESC ) ) { result . description = fieldValueString ; } } } return result ; }
QName toQName ( Class < ? > outputClass ) { String localPart ; String namespaceUri ; if ( outputClass . isAnnotationPresent ( XmlRootElement . class ) ) { XmlRootElement annotation = outputClass . getAnnotation ( XmlRootElement . class ) ; localPart = annotation . name ( ) ; namespaceUri = annotation . namespace ( ) ; } else if ( outputClass . isAnnotationPresent ( XmlType . class ) ) { XmlType annotation = outputClass . getAnnotation ( XmlType . class ) ; localPart = annotation . name ( ) ; namespaceUri = annotation . namespace ( ) ; } else { throw new IllegalArgumentException ( _STR + outputClass + _STR + _STR ) ; } if ( JAXB_DEFAULT_ANNOTATION_VALUE . equals ( localPart ) ) { localPart = ClassUtils . getShortNameAsProperty ( outputClass ) ; } if ( JAXB_DEFAULT_ANNOTATION_VALUE . equals ( namespaceUri ) ) { Package outputClassPackage = outputClass . getPackage ( ) ; if ( outputClassPackage != null && outputClassPackage . isAnnotationPresent ( XmlSchema . class ) ) { XmlSchema annotation = outputClassPackage . getAnnotation ( XmlSchema . class ) ; namespaceUri = annotation . namespace ( ) ; } else { namespaceUri = XMLConstants . NULL_NS_URI ; } } return new QName ( namespaceUri , localPart ) ; }
private void adjustBottom ( RectF rect , float bottom , RectF bounds , int viewHeight , float snapMargin , float aspectRatio , boolean leftMoves , boolean rightMoves ) { float newBottom = bottom ; if ( newBottom > viewHeight ) { newBottom = viewHeight + ( newBottom - viewHeight ) / _NUM ; mTouchOffset . y -= ( newBottom - viewHeight ) / _NUM ; } if ( newBottom > bounds . bottom ) { mTouchOffset . y -= ( newBottom - bounds . bottom ) / _NUM ; } if ( bounds . bottom - newBottom < snapMargin ) { newBottom = bounds . bottom ; } if ( newBottom - rect . top < mMinCropHeight ) { newBottom = rect . top + mMinCropHeight ; } if ( newBottom - rect . top > mMaxCropHeight ) { newBottom = rect . top + mMaxCropHeight ; } if ( bounds . bottom - newBottom < snapMargin ) { newBottom = bounds . bottom ; } if ( aspectRatio > _NUM ) { float newWidth = ( newBottom - rect . top ) * aspectRatio ; if ( newWidth < mMinCropWidth ) { newBottom = Math . min ( bounds . bottom , rect . top + mMinCropWidth / aspectRatio ) ; newWidth = ( newBottom - rect . top ) * aspectRatio ; } if ( newWidth > mMaxCropWidth ) { newBottom = Math . min ( bounds . bottom , rect . top + mMaxCropWidth / aspectRatio ) ; newWidth = ( newBottom - rect . top ) * aspectRatio ; } if ( leftMoves && rightMoves ) { newBottom = Math . min ( newBottom , Math . min ( bounds . bottom , rect . top + bounds . width ( ) / aspectRatio ) ) ; } else { if ( leftMoves && rect . right - newWidth < bounds . left ) { newBottom = Math . min ( bounds . bottom , rect . top + ( rect . right - bounds . left ) / aspectRatio ) ; newWidth = ( newBottom - rect . top ) * aspectRatio ; } if ( rightMoves && rect . left + newWidth > bounds . right ) { newBottom = Math . min ( newBottom , Math . min ( bounds . bottom , rect . top + ( bounds . right - rect . left ) / aspectRatio ) ) ; } } } rect . bottom = newBottom ; }
private static String generateJWT ( String secret , String jwtID , String iss , Integer ttl , Map < String , String > claims ) throws HmacException { try { return signJWT ( secret , jwtID , ttl , iss , claims ) ; } catch ( JOSEException e ) { e . printStackTrace ( ) ; throw new HmacException ( _STR , e ) ; } }
public void exportSymbols ( String [ ] exportNames , Symbol [ ] symbols ) { if ( exportedSymbols == null ) { exportedSymbols = new ArrayList ( ) ; } for ( int i = _NUM ; i < exportNames . length && i < symbols . length ; i ++ ) { exportedSymbols . add ( new ExportedSymbol ( symbols [ i ] , exportNames [ i ] ) ) ; } }
static boolean isFulfilling ( int m ) { return ( m & FULFILLING ) != _NUM ; }
@ Override public synchronized void addDataSourceListener ( DataSourceListener dsl ) { m_dataSourceListeners . addElement ( dsl ) ; if ( m_format != null ) { DataSetEvent e = new DataSetEvent ( this , m_format ) ; dsl . acceptDataSet ( e ) ; } }
public static AnnotationMirror findEffectiveAnnotationInHierarchy ( final QualifierHierarchy qualifierHierarchy , final AnnotatedTypeMirror toSearch , final AnnotationMirror top ) { return findEffectiveAnnotationInHierarchy ( qualifierHierarchy , toSearch , top , _BOOL ) ; }
public boolean toFail ( ) { LifecycleState state ; synchronized ( this ) { state = _state ; if ( state . isAfterDestroying ( ) ) { return _BOOL ; } _state = FAILED ; _lastChangeTime = CurrentTime . currentTime ( ) ; } if ( _log != null && _log . isLoggable ( _level ) ) _log . log ( _level , _STR + _name ) ; notifyListeners ( state , FAILED ) ; _failCount ++ ; return _BOOL ; }
private static void read ( InputStream in , byte [ ] buf , int pos , int n ) throws IOException { int read = _NUM ; int res = _NUM ; while ( read < n ) { res = in . read ( buf , read + pos , n - read ) ; if ( res > _NUM ) { read += res ; } else { throw new IOException ( _STR + read + _STR + n ) ; } } }
public double evaluate ( VectorInstance x , VectorInstance y ) throws Exception { VectorInstance diff = x . subtract ( y ) ; double result = - m_gamma * diff . dotProduct ( diff ) ; return Math . exp ( result ) ; }
void parseFinish ( ) { mChildren = mCurrentGroup . getChildren ( ) ; }
void cancelIncludedOnly ( ) { if ( ! _showAllInput ) { _inputAllButton . doClick ( ) ; } if ( ! _showAllOutput ) { _outputAllButton . doClick ( ) ; } if ( ! _showAllAlign ) { _alignAllButton . doClick ( ) ; } }
List < Entry > killAll ( boolean rootIncluded ) { List < Entry > killed = new ArrayList < > ( rootIncluded ? entries . size ( ) : entries . size ( ) - _NUM ) ; Entry entry ; for ( int i = entries . size ( ) - _NUM ; i > ( rootIncluded ? - _NUM : _NUM ) ; i -- ) { entry = entries . get ( i ) ; if ( entry . dead ) continue ; entry . dead = _BOOL ; if ( i != _NUM ) { killed . add ( entry ) ; } } return killed ; }
public static void createErrorDialog ( final String title , final String message ) { final Alert alert = new Alert ( AlertType . ERROR ) ; alert . setTitle ( title ) ; alert . setContentText ( message ) ; alert . setHeaderText ( null ) ; alert . showAndWait ( ) ; }
public static String checkIndexHeaderSuffix ( DataInput in , String expectedSuffix ) throws IOException { int suffixLength = in . readByte ( ) & _NUM ; byte suffixBytes [ ] = new byte [ suffixLength ] ; in . readBytes ( suffixBytes , _NUM , suffixBytes . length ) ; String suffix = new String ( suffixBytes , _NUM , suffixBytes . length , StandardCharsets . UTF_8 ) ; if ( ! suffix . equals ( expectedSuffix ) ) { throw new CorruptIndexException ( _STR + expectedSuffix + _STR + suffix , in ) ; } return suffix ; }
protected void tag ( String tag , ArrayList names , ArrayList values , int nattr , boolean close ) { spacing ( ) ; m_out . print ( _STR ) ; m_out . print ( tag ) ; for ( int i = _NUM ; i < nattr ; ++ i ) { m_out . print ( _STR ) ; m_out . print ( ( String ) names . get ( i ) ) ; m_out . print ( _STR ) ; m_out . print ( _STR ) ; escapeString ( ( String ) values . get ( i ) ) ; m_out . print ( _STR ) ; } if ( close ) m_out . print ( _STR ) ; m_out . print ( _STR ) ; println ( ) ; if ( ! close ) { m_tagStack . add ( tag ) ; } }
public static String parseDiskString ( String input ) { String delims = _STR ; String [ ] tokens = input . split ( delims ) ; return tokens [ _NUM ] ; }
protected void drawCloud ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean shadow ) { GeneralPath path = new GeneralPath ( ) ; path . moveTo ( ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) , ( float ) x , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) x , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) ( x + _NUM * w ) , ( float ) ( y + h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) ( x + w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) ( x + w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . closePath ( ) ; drawPath ( path , fillColor , fillPaint , penColor , shadow ) ; }
private static boolean isTrusted ( Object obj , TrustVerifier . Context ctx ) throws RemoteException { Object saved = state . get ( ) ; try { state . set ( obj ) ; return ctx . isTrustedObject ( obj ) ; } finally { state . set ( saved ) ; } }
public static PersistentSearchRequestControl newControl ( final boolean isCritical , final boolean changesOnly , final boolean returnECs , final PersistentSearchChangeType ... changeTypes ) { Reject . ifNull ( ( Object ) changeTypes ) ; return newControl ( isCritical , changesOnly , returnECs , Arrays . asList ( changeTypes ) ) ; }
private void connectEqualized ( SynapseGroup synapseGroup ) { currentOrderingIndices = new int [ sourceNeurons . length ] ; int numConnectsPerSrc ; int expectedNumSyns ; if ( synapseGroup . isRecurrent ( ) && ! selfConnectionAllowed ) { numConnectsPerSrc = ( int ) ( connectionDensity * ( sourceNeurons . length - _NUM ) ) ; } else { numConnectsPerSrc = ( int ) ( connectionDensity * targetNeurons . length ) ; } expectedNumSyns = numConnectsPerSrc * sourceNeurons . length ; synapseGroup . preAllocateSynapses ( expectedNumSyns ) ; for ( int i = _NUM , n = sourceNeurons . length ; i < n ; i ++ ) { currentOrderingIndices [ i ] = numConnectsPerSrc ; Neuron src = sourceNeurons [ i ] ; Neuron tar ; for ( int j = _NUM ; j < numConnectsPerSrc ; j ++ ) { tar = targetNeurons [ sparseOrdering [ i ] [ j ] ] ; Synapse s = new Synapse ( src , tar ) ; synapseGroup . addNewSynapse ( s ) ; } } }
public static Number multiply ( Character left , Character right ) { return multiply ( Integer . valueOf ( left ) , right ) ; }
public static String normalize ( final CharSequence self ) { final String s = self . toString ( ) ; int nx = s . indexOf ( _STR ) ; if ( nx < _NUM ) { return s ; } final int len = s . length ( ) ; final StringBuilder sb = new StringBuilder ( len ) ; int i = _NUM ; do { sb . append ( s , i , nx ) ; sb . append ( _STR ) ; if ( ( i = nx + _NUM ) >= len ) break ; if ( s . charAt ( i ) == _STR ) { if ( ++ i >= len ) break ; } nx = s . indexOf ( _STR , i ) ; } while ( nx > _NUM ) ; sb . append ( s , i , len ) ; return sb . toString ( ) ; }
public void addZoneChangeListener ( ZoneChangeListener listener ) { zoneChangeListeners . add ( listener ) ; }
public void write ( final int b ) throws IOException { if ( m_store == null ) { throw new IllegalStateException ( ERR_NO_STORE ) ; } if ( m_isSaved ) { throw new IllegalStateException ( ERR_ALREADY_SAVED ) ; } if ( m_count == m_blobThreshold && ! m_writingHdr ) { if ( m_blobHeader == null ) { m_blobHeader = new ArrayList < Integer > ( ) ; } final int curAddr = ( int ) m_store . alloc ( m_buf , m_count , m_context ) ; m_blobHeader . add ( curAddr ) ; m_count = _NUM ; } m_buf [ m_count ++ ] = ( byte ) b ; m_bytesWritten ++ ; }
public StartListener ( Object resource ) { _resource = resource ; }
public List < T > asFlatList ( ) { List < T > list = new ArrayList < T > ( ) ; for ( int i = _NUM ; i < getRowCount ( ) ; i ++ ) { for ( int j = _NUM ; j < getColumnCount ( ) ; j ++ ) { list . add ( getLogicalValueAt ( i , j ) ) ; } } return list ; }
@ Beta public void reset ( ) { schedulersHook . set ( null ) ; }
public static String hashKeyForDisk ( String key ) { String cacheKey ; try { final MessageDigest mDigest = MessageDigest . getInstance ( _STR ) ; mDigest . update ( key . getBytes ( ) ) ; cacheKey = bytesToHexString ( mDigest . digest ( ) ) ; } catch ( NoSuchAlgorithmException e ) { cacheKey = String . valueOf ( key . hashCode ( ) ) ; } return cacheKey ; }
public void recordTimestamp ( ) { long curTimestamp = System . currentTimeMillis ( ) ; if ( usedFields > _NUM ) { long diff = curTimestamp - lastValue ; if ( usedFields == diffs . length ) { long removedValue = diffs [ curPosition ] ; diffs [ curPosition ] = diff ; calculateNewAverage ( removedValue , diff , _BOOL ) ; shiftEnd ( ) ; } else { calculateNewAverage ( _NUM , diff , _BOOL ) ; diffs [ curPosition ] = diff ; shiftEnd ( ) ; } } else if ( lastValue != - _NUM ) { long diff = curTimestamp - lastValue ; currentAverage = _NUM ; diffs [ curPosition ] = diff ; calculateNewAverage ( _NUM , diff , _BOOL ) ; shiftEnd ( ) ; } lastValue = curTimestamp ; }
@ AfterMethod public void tearDown ( ) throws Exception { Throwable t = threadFailure . getAndSet ( null ) ; if ( t != null ) { if ( t instanceof Error ) throw ( Error ) t ; else if ( t instanceof RuntimeException ) throw ( RuntimeException ) t ; else if ( t instanceof Exception ) throw ( Exception ) t ; else { AssertionFailedError afe = new AssertionFailedError ( t . toString ( ) ) ; afe . initCause ( t ) ; throw afe ; } } if ( Thread . interrupted ( ) ) tearDownFail ( _STR ) ; checkForkJoinPoolThreadLeaks ( ) ; }
public void parse ( String string ) { if ( string == null ) { throw new NullPointerException ( _STR ) ; } int bufferSize = Math . max ( MIN_BUFFER_SIZE , Math . min ( DEFAULT_BUFFER_SIZE , string . length ( ) ) ) ; try { parse ( new StringReader ( string ) , bufferSize ) ; } catch ( IOException exception ) { throw new RuntimeException ( exception ) ; } }
protected double defaultMaxRadius ( ) { return Math . sqrt ( _NUM ) ; }
public char [ ] toCharArray ( ) { char [ ] newValue = new char [ count ] ; System . arraycopy ( buf , _NUM , newValue , _NUM , count ) ; return newValue ; }
@ Override protected int sizePendingWorkers ( ) { return _pendingWorkers . size ( ) ; }
public void insert ( Component component , int index ) { if ( index < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } int nitems = getComponentCount ( ) ; Vector < Component > tempItems = new Vector < Component > ( ) ; for ( int i = index ; i < nitems ; i ++ ) { tempItems . addElement ( getComponent ( index ) ) ; remove ( index ) ; } add ( component ) ; for ( Component tempItem : tempItems ) { add ( tempItem ) ; } }
public static List < String > unescape ( String source , char escapeChar , char [ ] specialCharacters , char splitCharacter , int splitLimit ) { List < String > result = new LinkedList < > ( ) ; StringBuilder b = new StringBuilder ( ) ; boolean readEscape = _BOOL ; int indexCount = - _NUM ; for ( char c : source . toCharArray ( ) ) { indexCount ++ ; if ( readEscape ) { boolean found = _BOOL ; if ( c == splitCharacter ) { found = _BOOL ; b . append ( c ) ; } else if ( c == escapeChar ) { found = _BOOL ; b . append ( c ) ; } else { for ( char s : specialCharacters ) { if ( s == c ) { found = _BOOL ; b . append ( c ) ; break ; } } } if ( ! found ) { throw new IllegalArgumentException ( _STR + source + _STR + c + _STR ) ; } readEscape = _BOOL ; } else if ( c == escapeChar ) { readEscape = _BOOL ; } else if ( c == splitCharacter ) { readEscape = _BOOL ; result . add ( b . toString ( ) ) ; if ( splitLimit != - _NUM ) { if ( result . size ( ) == splitLimit - _NUM ) { result . add ( source . substring ( indexCount + _NUM ) ) ; return result ; } } b = new StringBuilder ( ) ; } else { readEscape = _BOOL ; b . append ( c ) ; } } result . add ( b . toString ( ) ) ; return result ; }
protected int drawLegend ( Canvas canvas , DefaultRenderer renderer , String [ ] titles , int left , int right , int y , int width , int height , int legendSize , Paint paint , boolean calculate ) { float size = _NUM ; if ( renderer . isShowLegend ( ) ) { float currentX = left ; float currentY = y + height - legendSize + size ; paint . setTextAlign ( Align . LEFT ) ; paint . setTextSize ( renderer . getLegendTextSize ( ) ) ; int sLength = Math . min ( titles . length , renderer . getSeriesRendererCount ( ) ) ; for ( int i = _NUM ; i < sLength ; i ++ ) { SimpleSeriesRenderer r = renderer . getSeriesRendererAt ( i ) ; final float lineSize = getLegendShapeWidth ( i ) ; if ( r . isShowLegendItem ( ) ) { String text = titles [ i ] ; if ( titles . length == renderer . getSeriesRendererCount ( ) ) { paint . setColor ( r . getColor ( ) ) ; } else { paint . setColor ( Color . LTGRAY ) ; } float [ ] widths = new float [ text . length ( ) ] ; paint . getTextWidths ( text , widths ) ; float sum = _NUM ; for ( float value : widths ) { sum += value ; } float extraSize = lineSize + _NUM + sum ; float currentWidth = currentX + extraSize ; if ( i > _NUM && getExceed ( currentWidth , renderer , right , width ) ) { currentX = left ; currentY += renderer . getLegendTextSize ( ) ; size += renderer . getLegendTextSize ( ) ; currentWidth = currentX + extraSize ; } if ( getExceed ( currentWidth , renderer , right , width ) ) { float maxWidth = right - currentX - lineSize - _NUM ; if ( isVertical ( renderer ) ) { maxWidth = width - currentX - lineSize - _NUM ; } int nr = paint . breakText ( text , _BOOL , maxWidth , widths ) ; text = text . substring ( _NUM , nr ) + _STR ; } if ( ! calculate ) { drawLegendShape ( canvas , r , currentX , currentY , i , paint ) ; drawString ( canvas , text , currentX + lineSize + _NUM , currentY + _NUM , paint ) ; } currentX += extraSize ; } } } return Math . round ( size + renderer . getLegendTextSize ( ) ) ; }
@ Override public String append ( String path , InputStream is ) throws MalformedURLException , IOException , AuthenticationException { String resp = null ; ensureValidToken ( ) ; String spec = MessageFormat . format ( _STR , URLUtil . encodePath ( path ) , this . principal ) ; String redirectUrl = null ; HttpURLConnection conn = authenticatedURL . openConnection ( new URL ( new URL ( httpfsUrl ) , spec ) , token ) ; conn . setRequestMethod ( _STR ) ; conn . setInstanceFollowRedirects ( _BOOL ) ; conn . connect ( ) ; logger . info ( _STR + conn . getHeaderField ( _STR ) ) ; resp = result ( conn , _BOOL ) ; if ( conn . getResponseCode ( ) == _NUM ) redirectUrl = conn . getHeaderField ( _STR ) ; conn . disconnect ( ) ; if ( redirectUrl != null ) { conn = authenticatedURL . openConnection ( new URL ( redirectUrl ) , token ) ; conn . setRequestMethod ( _STR ) ; conn . setDoOutput ( _BOOL ) ; conn . setDoInput ( _BOOL ) ; conn . setUseCaches ( _BOOL ) ; conn . setRequestProperty ( _STR , _STR ) ; final int _SIZE = is . available ( ) ; conn . setRequestProperty ( _STR , _STR + _SIZE ) ; conn . setFixedLengthStreamingMode ( _SIZE ) ; conn . connect ( ) ; OutputStream os = conn . getOutputStream ( ) ; copy ( is , os ) ; is . close ( ) ; os . close ( ) ; resp = result ( conn , _BOOL ) ; conn . disconnect ( ) ; } return resp ; }
public EconomyConcurrentHashMap ( Map < ? extends K , ? extends V > m , IHashEntryHandler < K , V > handler ) { this ( Math . max ( ( int ) ( m . size ( ) / DEFAULT_LOAD_FACTOR ) + _NUM , DEFAULT_INITIAL_CAPACITY ) , DEFAULT_LOAD_FACTOR , DEFAULT_CONCURRENCY_LEVEL , handler ) ; putAll ( m ) ; }
void addRule ( String [ ] selector , AttributeSet declaration , boolean isLinked ) { int n = selector . length ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( selector [ _NUM ] ) ; for ( int counter = _NUM ; counter < n ; counter ++ ) { sb . append ( _STR ) ; sb . append ( selector [ counter ] ) ; } String selectorName = sb . toString ( ) ; Style rule = getStyle ( selectorName ) ; if ( rule == null ) { Style altRule = addStyle ( selectorName , null ) ; synchronized ( this ) { SelectorMapping mapping = getRootSelectorMapping ( ) ; for ( int i = n - _NUM ; i >= _NUM ; i -- ) { mapping = mapping . getChildSelectorMapping ( selector [ i ] , _BOOL ) ; } rule = mapping . getStyle ( ) ; if ( rule == null ) { rule = altRule ; mapping . setStyle ( rule ) ; refreshResolvedRules ( selectorName , selector , rule , mapping . getSpecificity ( ) ) ; } } } if ( isLinked ) { rule = getLinkedStyle ( rule ) ; } rule . addAttributes ( declaration ) ; }
public Builder appendReadData ( byte [ ] data ) { Assertions . checkState ( data != null && data . length > _NUM ) ; segments . add ( new Segment ( data , null ) ) ; return this ; }
private boolean isLatestDssKeystore ( TSLParserResult parseResult ) { List < String > englishSchemeInformationURIs = parseResult . getEnglishSchemeInformationURIs ( ) ; return englishSchemeInformationURIs . contains ( ojUrl ) ; }
private synchronized void initResourceBundle ( String resourceBundleName ) { String current = this . resourceBundleName ; if ( current != null ) { if ( current . equals ( resourceBundleName ) ) { return ; } else { throw new IllegalArgumentException ( _STR + resourceBundleName + _STR + current + _STR ) ; } } if ( resourceBundleName != null ) { this . resourceBundle = loadResourceBundle ( resourceBundleName ) ; this . resourceBundleName = resourceBundleName ; } }
public LayerGraphicWarehouseSupport ( ) { initDrawingAttributes ( ) ; graphics = new OMGraphicList ( ) ; graphics . setTraverseMode ( OMGraphicList . LAST_ADDED_ON_TOP ) ; }
public boolean matchesNamingConvension ( ) { return packageName . matches ( JAVA_PACKAGE_CONVENSION ) ; }
void rememberFactory ( String host , RMISocketFactory factory ) { synchronized ( successTable ) { while ( hostList . size ( ) >= MaxRememberedHosts ) { successTable . remove ( hostList . elementAt ( _NUM ) ) ; hostList . removeElementAt ( _NUM ) ; } hostList . addElement ( host ) ; successTable . put ( host , factory ) ; } }
public void put ( String key , long value ) { if ( key != null ) { urlParams . put ( key , String . valueOf ( value ) ) ; } }
public char next ( ) { return pos < in . length ( ) ? in . charAt ( pos ++ ) : _STR ; }
private Map . Entry < K , V > doRemoveFirstEntry ( ) { for ( Node < K , V > b , n ; ; ) { if ( ( n = ( b = head . node ) . next ) == null ) return null ; Node < K , V > f = n . next ; if ( n != b . next ) continue ; Object v = n . value ; if ( v == null ) { n . helpDelete ( b , f ) ; continue ; } if ( ! n . casValue ( v , null ) ) continue ; if ( ! n . appendMarker ( f ) || ! b . casNext ( n , f ) ) findFirst ( ) ; clearIndexToFirst ( ) ; @ SuppressWarnings ( _STR ) V vv = ( V ) v ; return new AbstractMap . SimpleImmutableEntry < K , V > ( n . key , vv ) ; } }
public ComputeTaskCancelledException ( Throwable cause ) { this ( cause . getMessage ( ) , cause ) ; }
public static int normalize ( char [ ] src , int srcStart , int srcLimit , char [ ] dest , int destStart , int destLimit , Mode mode , int options ) { int length = mode . normalize ( src , srcStart , srcLimit , dest , destStart , destLimit , options ) ; if ( length <= ( destLimit - destStart ) ) { return length ; } else { throw new IndexOutOfBoundsException ( Integer . toString ( length ) ) ; } }
private void removeObsoleteElements ( List < String > names , Map < String , View > sharedElements , List < String > elementsToRemove ) { if ( elementsToRemove . size ( ) > _NUM ) { names . removeAll ( elementsToRemove ) ; for ( String elementToRemove : elementsToRemove ) { sharedElements . remove ( elementToRemove ) ; } } }
public boolean isHighlightWithInvisibleEdge ( ) { return highlightWithInvisibleEdge ; }
public void removeAction ( NetworkUpdateAction action ) { actionList . remove ( action ) ; for ( UpdateManagerListener listener : listeners ) { listener . actionRemoved ( action ) ; } }
public static double bufferDistanceError ( int quadSegs ) { double alpha = Math . PI / _NUM / quadSegs ; return _NUM - Math . cos ( alpha / _NUM ) ; }
public Pair < String , String > next ( ) { try { currentHeaderPosition = nextHeaderPosition ; String readHeader = nextLine ; nextHeaderPosition += readHeader . length ( ) + endOfLineBytes ; readHeader = _STR + readHeader . substring ( _NUM ) ; String readSequence = r . readLine ( ) ; nextHeaderPosition += readSequence . length ( ) + endOfLineBytes ; String comments = r . readLine ( ) ; nextHeaderPosition += comments . length ( ) + endOfLineBytes ; if ( comments . startsWith ( _STR ) ) { String qualityValues = r . readLine ( ) ; nextHeaderPosition += qualityValues . length ( ) + endOfLineBytes ; } nextLine = r . readLine ( ) ; return new Pair < > ( readHeader , readSequence ) ; } catch ( IOException e ) { Basic . caught ( e ) ; } return null ; }
public void add ( Character character ) { elements . add ( character == null ? JsonNull . INSTANCE : new JsonPrimitive ( character ) ) ; }
public static boolean isValidIfd ( int ifdId ) { return ifdId == IfdId . TYPE_IFD_0 || ifdId == IfdId . TYPE_IFD_1 || ifdId == IfdId . TYPE_IFD_EXIF || ifdId == IfdId . TYPE_IFD_INTEROPERABILITY || ifdId == IfdId . TYPE_IFD_GPS ; }
public void removeChild ( Group theGroup ) { mChildren . remove ( theGroup ) ; }
protected StoragePort checkPortExistsInDB ( String nativeGuid ) throws IOException { StoragePort port = null ; List < StoragePort > portInDB = CustomQueryUtility . getActiveStoragePortByNativeGuid ( _dbClient , nativeGuid ) ; if ( portInDB != null && ! portInDB . isEmpty ( ) ) { port = portInDB . get ( _NUM ) ; } return port ; }
public void appendSplitElement ( Fragment aSplit ) { splits . add ( aSplit ) ; }
public Iterator enumerateLiteralResultAttributes ( ) { return ( null == m_avts ) ? null : m_avts . iterator ( ) ; }
public OsmHandler ( MapBuilder meConsumer ) { osmElementProcessor = new OsmElementProcessor ( null , meConsumer ) ; }
public void close ( ) throws IOException { flushBits ( ) ; out . close ( ) ; }
public RespokeDirectConnection directConnection ( ) { if ( null != directConnectionReference ) { return directConnectionReference . get ( ) ; } else { return null ; } }
private String appendNationalNumber ( String nationalNumber ) { int prefixBeforeNationalNumberLength = prefixBeforeNationalNumber . length ( ) ; if ( shouldAddSpaceAfterNationalPrefix && prefixBeforeNationalNumberLength > _NUM && prefixBeforeNationalNumber . charAt ( prefixBeforeNationalNumberLength - _NUM ) != SEPARATOR_BEFORE_NATIONAL_NUMBER ) { return new String ( prefixBeforeNationalNumber ) + SEPARATOR_BEFORE_NATIONAL_NUMBER + nationalNumber ; } else { return prefixBeforeNationalNumber + nationalNumber ; } }
public void cut ( ) { copy ( ) ; deleteSelectedObjects ( ) ; }
public void stop ( ) { setLedOn ( _BOOL ) ; if ( null != blinkFuture ) { blinkFuture . cancel ( _BOOL ) ; } if ( null != blinkService ) { blinkService . shutdownNow ( ) ; } }
public synchronized void release ( ) { index . clear ( ) ; }
public void configure ( ) { if ( cmdPrefix != null ) { prefix = cmdPrefix . split ( _STR ) ; } }
protected void writeTransform ( AffineTransform t ) throws IOException { pageStream . matrix ( t ) ; }
public void testSignumPositive ( ) { String a = _STR ; int aScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; assertEquals ( _STR , _NUM , aNumber . signum ( ) ) ; }
public PainterChain prependPainter ( Painter p ) { Painter [ ] newChain = new Painter [ chain . length + _NUM ] ; System . arraycopy ( chain , _NUM , newChain , _NUM , chain . length ) ; newChain [ _NUM ] = p ; return new PainterChain ( newChain ) ; }
@ Nullable private Operator . Kind parseOperator ( TokenStream tokens ) { if ( tokens . has ( _STR ) ) { tokens . next ( ) ; tokens . expect ( _STR ) ; return Operator . Kind . EQUALS ; } if ( tokens . has ( _STR ) ) { tokens . next ( ) ; tokens . expect ( _STR ) ; return Operator . Kind . NOT_EQUALS ; } if ( tokens . has ( _STR ) ) { tokens . next ( ) ; if ( tokens . has ( _STR ) ) { tokens . next ( ) ; return Operator . Kind . LESS_EQUAL ; } return Operator . Kind . LESS ; } if ( tokens . has ( _STR ) ) { tokens . next ( ) ; if ( tokens . has ( _STR ) ) { tokens . next ( ) ; return Operator . Kind . GREATER_EQUAL ; } return Operator . Kind . GREATER ; } return null ; }
@ Override public boolean dragTo ( Selector obj , Selector destObj , int steps ) throws UiObjectNotFoundException , NotImplementedException { return dragTo ( device . findObject ( obj . toUiSelector ( ) ) , destObj , steps ) ; }
private void queueUpSyncs ( final Cursor contactsCursor ) { ContactSyncEntry syncEntry = null ; while ( contactsCursor . moveToNext ( ) ) { if ( syncEntry == null ) { syncEntry = new ContactSyncEntry ( UPLOAD_BATCH_SIZE ) ; } final String number = contactsCursor . getString ( contactsCursor . getColumnIndex ( ContactsContract . CommonDataKinds . Phone . NUMBER ) ) ; final String name = contactsCursor . getString ( contactsCursor . getColumnIndex ( ContactsContract . CommonDataKinds . Phone . DISPLAY_NAME ) ) ; if ( ! TextUtils . isEmpty ( number ) ) { syncEntry . addNumber ( numberToNational ( number ) ) ; syncEntry . addName ( name ) ; if ( syncEntry . isFull ( ) ) { Logger . d ( TAG , _STR ) ; mSyncQueue . add ( syncEntry ) ; syncEntry = null ; } } } }
public synchronized void removeSeries ( int index ) { mSeries . remove ( index ) ; }
public static void addGlue ( JComponent b , int layout ) { b . add ( getAxis ( b , layout ) == BoxLayout . X_AXIS ? Box . createHorizontalGlue ( ) : Box . createVerticalGlue ( ) ) ; }
public static void writeResultToFile ( Result result , String fname ) throws Exception { PrintWriter outer = new PrintWriter ( new BufferedWriter ( new FileWriter ( fname ) ) ) ; outer . write ( result . toString ( ) ) ; outer . close ( ) ; }
private JMXProvider ( ) { }
protected void writeBlockletInfoToFile ( List < BlockletInfoColumnar > infoList , FileChannel channel , String filePath ) throws CarbonDataWriterException { try { long currentPosition = channel . size ( ) ; CarbonFooterWriter writer = new CarbonFooterWriter ( filePath ) ; FileFooter convertFileMeta = CarbonMetadataUtil . convertFileFooter ( infoList , localCardinality . length , localCardinality , thriftColumnSchemaList , segmentProperties ) ; fillBlockIndexInfoDetails ( infoList , convertFileMeta . getNum_rows ( ) , filePath , currentPosition ) ; writer . writeFooter ( convertFileMeta , currentPosition ) ; } catch ( IOException e ) { throw new CarbonDataWriterException ( _STR , e ) ; } }
private static void renderTree ( Tree tree , int indent , boolean parentLabelNull , boolean firstSibling , boolean leftSiblingPreTerminal , boolean topLevel , StringBuilder sb ) { boolean suppressIndent = ( parentLabelNull || ( firstSibling && tree . isPreTerminal ( ) ) || ( leftSiblingPreTerminal && tree . isPreTerminal ( ) ) ) ; if ( suppressIndent ) { sb . append ( _STR ) ; } else { if ( ! topLevel ) { sb . append ( _STR ) ; } for ( int i = _NUM ; i < indent ; i ++ ) { sb . append ( _STR ) ; } } if ( tree . isLeaf ( ) || tree . isPreTerminal ( ) ) { renderFlat ( tree , sb ) ; return ; } sb . append ( _STR ) ; sb . append ( tree . getLabel ( ) ) ; renderChildren ( tree . getChildren ( ) , indent + _NUM , _BOOL , sb ) ; sb . append ( _STR ) ; }
public static StringBuffer replaceRegex ( StringBuffer original , String regex , String replace , boolean CASE_INSENSITIVE ) { int flags = _NUM ; if ( CASE_INSENSITIVE ) flags = Pattern . CASE_INSENSITIVE ; Pattern p = Pattern . compile ( regex , flags ) ; Matcher m = p . matcher ( original ) ; StringBuffer newSB = new StringBuffer ( ) ; boolean result = m . find ( ) ; while ( result ) { m . appendReplacement ( newSB , replace ) ; result = m . find ( ) ; } m . appendTail ( newSB ) ; return newSB ; }
public boolean equalsChars ( String a , int ai , String b , int bi , boolean ignoreCase ) { char ca = a . charAt ( ai ) ; char cb = b . charAt ( bi ) ; if ( ignoreCase ) { ca = Character . toUpperCase ( ca ) ; cb = Character . toUpperCase ( cb ) ; } return ca == cb ; }
private void adjustBackingFileLength ( byte [ ] buffer , long index ) throws IOException { if ( buffer == null || buffer . length == _NUM ) { throw new IOException ( _STR ) ; } long newsize = fHeader . headerSize ( ) + ( index * CHUNK_ENC_SIZE ) + CHUNK_IV_SIZE + buffer . length + CHUNK_TLEN ; if ( newsize > realLength ( ) ) { backingRandomAccessFile . setLength ( newsize ) ; } }
private static Collection < Collection < DsnNetPin > > create_ordered_subnets ( Collection < DsnNetPin > p_pin_list ) { Collection < Collection < DsnNetPin > > result = new LinkedList < Collection < DsnNetPin > > ( ) ; if ( p_pin_list . isEmpty ( ) ) { return result ; } Iterator < DsnNetPin > it = p_pin_list . iterator ( ) ; DsnNetPin prev_pin = it . next ( ) ; while ( it . hasNext ( ) ) { DsnNetPin next_pin = it . next ( ) ; Set < DsnNetPin > curr_subnet_pin_list = new java . util . TreeSet < DsnNetPin > ( ) ; curr_subnet_pin_list . add ( prev_pin ) ; curr_subnet_pin_list . add ( next_pin ) ; result . add ( curr_subnet_pin_list ) ; prev_pin = next_pin ; } return result ; }
@ Override public void run ( int connID , String [ ] args ) { if ( args . length == _NUM ) { server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; } try { if ( args . length > _NUM ) { String cmd = args [ _NUM ] ; if ( cmd . equalsIgnoreCase ( _STR ) ) { if ( args . length > _NUM ) { int id = Integer . parseInt ( args [ _NUM ] ) ; server . sendServerChat ( connID , strListNetwork ( connID , id , _BOOL ) ) ; } else { server . sendServerChat ( connID , strListNetworks ( connID , _BOOL ) ) ; } } else if ( cmd . equalsIgnoreCase ( _STR ) ) { if ( args . length > _NUM ) { int id = Integer . parseInt ( args [ _NUM ] ) ; server . sendServerChat ( connID , strListNetwork ( connID , id , _BOOL ) ) ; } else { server . sendServerChat ( connID , strListNetworks ( connID , _BOOL ) ) ; } } else if ( cmd . equalsIgnoreCase ( _STR ) ) { debug ( connID , server ) ; } else if ( cmd . equalsIgnoreCase ( _STR ) ) { if ( args . length > _NUM ) { int id1 = Integer . parseInt ( args [ _NUM ] ) ; int id2 = Integer . parseInt ( args [ _NUM ] ) ; int id3 = Integer . parseInt ( args [ _NUM ] ) ; server . sendServerChat ( connID , strLink3 ( connID , id1 , id2 , id3 ) ) ; } else if ( args . length > _NUM ) { int id1 = Integer . parseInt ( args [ _NUM ] ) ; int id2 = Integer . parseInt ( args [ _NUM ] ) ; server . sendServerChat ( connID , strLink2 ( connID , id1 , id2 ) ) ; } } else if ( cmd . equalsIgnoreCase ( _STR ) ) { if ( args . length > _NUM ) { int id = Integer . parseInt ( args [ _NUM ] ) ; server . sendServerChat ( connID , strUnlinkID ( connID , id ) ) ; } else { server . sendServerChat ( connID , strUnlinkAll ( connID ) ) ; } } else { String failstr = args [ _NUM ] ; for ( int i = _NUM ; i < args . length ; i ++ ) { failstr += _STR + args [ i ] ; } server . sendServerChat ( connID , _STR + failstr + _STR ) ; } } } catch ( NumberFormatException nfe ) { server . sendServerChat ( connID , _STR ) ; } catch ( NullPointerException npe ) { server . sendServerChat ( connID , _STR ) ; } catch ( IndexOutOfBoundsException ioobe ) { server . sendServerChat ( connID , _STR ) ; } }
private char [ ] parseEntityReference ( ) throws IOException { int pos = strpos ; if ( ( ch = readCh ( ) ) == _STR ) { int n = _NUM ; ch = readCh ( ) ; if ( ( ch >= _STR ) && ( ch <= _STR ) || ch == _STR || ch == _STR ) { if ( ( ch >= _STR ) && ( ch <= _STR ) ) { while ( ( ch >= _STR ) && ( ch <= _STR ) ) { n = ( n * _NUM ) + ch - _STR ; ch = readCh ( ) ; } } else { ch = readCh ( ) ; char lch = ( char ) Character . toLowerCase ( ch ) ; while ( ( lch >= _STR ) && ( lch <= _STR ) || ( lch >= _STR ) && ( lch <= _STR ) ) { if ( lch >= _STR && lch <= _STR ) { n = ( n * _NUM ) + lch - _STR ; } else { n = ( n * _NUM ) + lch - _STR + _NUM ; } ch = readCh ( ) ; lch = ( char ) Character . toLowerCase ( ch ) ; } } switch ( ch ) { case _STR : ln ++ ; ch = readCh ( ) ; lfCount ++ ; break ; case _STR : ln ++ ; if ( ( ch = readCh ( ) ) == _STR ) { ch = readCh ( ) ; crlfCount ++ ; } else { crCount ++ ; } break ; case _STR : ch = readCh ( ) ; break ; } char data [ ] = mapNumericReference ( n ) ; return data ; } addString ( _STR ) ; if ( ! parseIdentifier ( _BOOL ) ) { error ( _STR ) ; strpos = pos ; char data [ ] = { _STR , _STR } ; return data ; } } else if ( ! parseIdentifier ( _BOOL ) ) { char data [ ] = { _STR } ; return data ; } boolean semicolon = _BOOL ; switch ( ch ) { case _STR : ln ++ ; ch = readCh ( ) ; lfCount ++ ; break ; case _STR : ln ++ ; if ( ( ch = readCh ( ) ) == _STR ) { ch = readCh ( ) ; crlfCount ++ ; } else { crCount ++ ; } break ; case _STR : semicolon = _BOOL ; ch = readCh ( ) ; break ; } String nm = getString ( pos ) ; Entity ent = dtd . getEntity ( nm ) ; if ( ! strict && ( ent == null ) ) { ent = dtd . getEntity ( nm . toLowerCase ( ) ) ; } if ( ( ent == null ) || ! ent . isGeneral ( ) ) { if ( nm . length ( ) == _NUM ) { error ( _STR , nm ) ; return new char [ _NUM ] ; } String str = _STR + nm + ( semicolon ? _STR : _STR ) ; char b [ ] = new char [ str . length ( ) ] ; str . getChars ( _NUM , b . length , b , _NUM ) ; return b ; } return ent . getData ( ) ; }
private static String createJsMethodInvocationExpression ( String methodName , boolean isStatic , String ... paramNames ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( isStatic ? WND : THIS ) ; sb . append ( _STR ) ; sb . append ( methodName ) ; sb . append ( _STR ) ; for ( int i = _NUM ; i < paramNames . length ; i ++ ) { if ( i != _NUM ) { sb . append ( _STR ) ; } sb . append ( paramNames [ i ] ) ; } sb . append ( _STR ) ; return sb . toString ( ) ; }
public void doDoubleClickAction ( ) { doDoubleClickAction ( null ) ; }
public static Node serializableInstance ( ) { return new GraphNode ( _STR ) ; }
protected void dropTables ( List < String > dropTableNames , SQLiteDatabase db ) { if ( dropTableNames != null && ! dropTableNames . isEmpty ( ) ) { String [ ] dropTableSQLS = new String [ dropTableNames . size ( ) ] ; for ( int i = _NUM ; i < dropTableSQLS . length ; i ++ ) { dropTableSQLS [ i ] = generateDropTableSQL ( dropTableNames . get ( i ) ) ; } execute ( dropTableSQLS , db ) ; } }
private Segment createDiskSegment ( SegmentDescriptor descriptor ) { File segmentFile = SegmentFile . createSegmentFile ( name , storage . directory ( ) , descriptor . id ( ) , descriptor . version ( ) ) ; Buffer buffer = FileBuffer . allocate ( segmentFile , Math . min ( DEFAULT_BUFFER_SIZE , descriptor . maxSegmentSize ( ) ) , Integer . MAX_VALUE ) ; descriptor . copyTo ( buffer ) ; Segment segment = new Segment ( new SegmentFile ( segmentFile ) , buffer . slice ( ) , descriptor , createIndex ( descriptor ) , new OffsetPredicate ( ) , serializer . clone ( ) , this ) ; LOGGER . debug ( _STR , segment ) ; return segment ; }
public Boolean exists ( String email ) { for ( Person person : people ) { if ( email . equals ( person . getEmail ( ) ) ) { return _BOOL ; } } return _BOOL ; }
public synchronized boolean removeAll ( Collection c ) { Object [ ] elements = getArray ( ) ; int len = elements . length ; if ( len != _NUM ) { int newlen = _NUM ; Object [ ] temp = new Object [ len ] ; for ( int i = _NUM ; i < len ; ++ i ) { Object element = elements [ i ] ; if ( ! c . contains ( element ) ) temp [ newlen ++ ] = element ; } if ( newlen != len ) { setArray ( copyOfRange ( temp , _NUM , newlen , Object [ ] . class ) ) ; return _BOOL ; } } return _BOOL ; }
public long convertPolarStereographicToGeodetic ( double Easting , double Northing ) { double dy = _NUM , dx = _NUM ; double rho = _NUM ; double t ; double PHI , sin_PHI ; double tempPHI = _NUM ; double essin ; double pow_es ; double delta_radius ; long Error_Code = POLAR_NO_ERROR ; double min_easting = Polar_False_Easting - Polar_Delta_Easting ; double max_easting = Polar_False_Easting + Polar_Delta_Easting ; double min_northing = Polar_False_Northing - Polar_Delta_Northing ; double max_northing = Polar_False_Northing + Polar_Delta_Northing ; if ( Easting > max_easting || Easting < min_easting ) { Error_Code |= POLAR_EASTING_ERROR ; } if ( Northing > max_northing || Northing < min_northing ) { Error_Code |= POLAR_NORTHING_ERROR ; } if ( Error_Code == POLAR_NO_ERROR ) { dy = Northing - Polar_False_Northing ; dx = Easting - Polar_False_Easting ; rho = Math . sqrt ( dx * dx + dy * dy ) ; delta_radius = Math . sqrt ( Polar_Delta_Easting * Polar_Delta_Easting + Polar_Delta_Northing * Polar_Delta_Northing ) ; if ( rho > delta_radius ) { Error_Code |= POLAR_RADIUS_ERROR ; } } if ( Error_Code == POLAR_NO_ERROR ) { if ( ( dy == _NUM ) && ( dx == _NUM ) ) { Latitude = PI_OVER_2 ; Longitude = Polar_Origin_Long ; } else { if ( Southern_Hemisphere != _NUM ) { dy *= - _NUM ; dx *= - _NUM ; } if ( Math . abs ( Math . abs ( Polar_Origin_Lat ) - PI_OVER_2 ) > _NUM ) t = rho * tc / ( Polar_a_mc ) ; else t = rho * e4 / ( two_Polar_a ) ; PHI = PI_OVER_2 - _NUM * Math . atan ( t ) ; while ( Math . abs ( PHI - tempPHI ) > _NUM ) { tempPHI = PHI ; sin_PHI = Math . sin ( PHI ) ; essin = es * sin_PHI ; pow_es = Math . pow ( ( _NUM - essin ) / ( _NUM + essin ) , es_OVER_2 ) ; PHI = PI_OVER_2 - _NUM * Math . atan ( t * pow_es ) ; } Latitude = PHI ; Longitude = Polar_Origin_Long + Math . atan2 ( dx , - dy ) ; if ( Longitude > PI ) Longitude -= TWO_PI ; else if ( Longitude < - PI ) Longitude += TWO_PI ; if ( Latitude > PI_OVER_2 ) Latitude = PI_OVER_2 ; else if ( Latitude < - PI_OVER_2 ) Latitude = - PI_OVER_2 ; if ( Longitude > PI ) Longitude = PI ; else if ( Longitude < - PI ) Longitude = - PI ; } if ( Southern_Hemisphere != _NUM ) { Latitude *= - _NUM ; Longitude *= - _NUM ; } } return ( Error_Code ) ; }
public void assertURIEquals ( String assertID , String scheme , String path , String host , String file , String name , String query , String fragment , Boolean isAbsolute , String actual ) { assertNotNull ( assertID , actual ) ; String uri = actual ; int lastPound = actual . lastIndexOf ( _STR ) ; String actualFragment = _STR ; if ( lastPound != - _NUM ) { uri = actual . substring ( _NUM , lastPound ) ; actualFragment = actual . substring ( lastPound + _NUM ) ; } if ( fragment != null ) { assertEquals ( assertID , fragment , actualFragment ) ; } int lastQuestion = uri . lastIndexOf ( _STR ) ; String actualQuery = _STR ; if ( lastQuestion != - _NUM ) { uri = actual . substring ( _NUM , lastQuestion ) ; actualQuery = actual . substring ( lastQuestion + _NUM ) ; } if ( query != null ) { assertEquals ( assertID , query , actualQuery ) ; } int firstColon = uri . indexOf ( _STR ) ; int firstSlash = uri . indexOf ( _STR ) ; String actualPath = uri ; String actualScheme = _STR ; if ( firstColon != - _NUM && firstColon < firstSlash ) { actualScheme = uri . substring ( _NUM , firstColon ) ; actualPath = uri . substring ( firstColon + _NUM ) ; } if ( scheme != null ) { assertEquals ( assertID , scheme , actualScheme ) ; } if ( path != null ) { assertEquals ( assertID , path , actualPath ) ; } if ( host != null ) { String actualHost = _STR ; if ( actualPath . startsWith ( _STR ) ) { int termSlash = actualPath . indexOf ( _STR , _NUM ) ; actualHost = actualPath . substring ( _NUM , termSlash ) ; } assertEquals ( assertID , host , actualHost ) ; } String actualFile = actualPath ; if ( file != null || name != null ) { int finalSlash = actualPath . lastIndexOf ( _STR ) ; if ( finalSlash != - _NUM ) { actualFile = actualPath . substring ( finalSlash + _NUM ) ; } if ( file != null ) { assertEquals ( assertID , file , actualFile ) ; } } if ( name != null ) { String actualName = actualFile ; int finalPeriod = actualFile . lastIndexOf ( _STR ) ; if ( finalPeriod != - _NUM ) { actualName = actualFile . substring ( _NUM , finalPeriod ) ; } assertEquals ( assertID , name , actualName ) ; } if ( isAbsolute != null ) { assertEquals ( assertID , isAbsolute . booleanValue ( ) , actualPath . startsWith ( _STR ) || actualPath . startsWith ( _STR ) ) ; } }
private double maxIgnoreNaN ( double a , double b ) { if ( Double . isNaN ( a ) ) { return b ; } if ( Double . isNaN ( b ) ) { return a ; } else { return Math . max ( a , b ) ; } }
public void crabDownDirBlockForModification ( BlockId blk ) { lockTbl . xLock ( blk , txNum ) ; writenIndexBlks . add ( blk ) ; }
private static void removeReferenceToConnection ( final HttpConnectionWithReference connection ) { synchronized ( REFERENCE_TO_CONNECTION_SOURCE ) { REFERENCE_TO_CONNECTION_SOURCE . remove ( connection . reference ) ; } }
public boolean matchesWord ( ) { return ! isEmpty ( ) && Character . isLetterOrDigit ( queue . charAt ( pos ) ) ; }
public VacuumEnvironment ( ) { Random r = new Random ( ) ; envState = new VacuumEnvironmentState ( _NUM == r . nextInt ( _NUM ) ? LocationState . Clean : LocationState . Dirty , _NUM == r . nextInt ( _NUM ) ? LocationState . Clean : LocationState . Dirty ) ; }
public void generate ( BatchEnvironment env , ClassDefinition cdef , File destDir ) { RemoteClass remoteClass = RemoteClass . forClass ( env , cdef ) ; if ( remoteClass == null ) return ; RMIGenerator gen ; try { gen = new RMIGenerator ( env , cdef , destDir , remoteClass , version ) ; } catch ( ClassNotFound e ) { env . error ( _NUM , _STR , e . name ) ; return ; } gen . generate ( ) ; }
public BaseViewHolder addOnLongClickListener ( int viewId ) { itemChildLongClickViewIds . add ( viewId ) ; return this ; }
public void remove ( final CreatureRespawnPoint point ) { respawnPoints . remove ( point ) ; }
public Photo ( File d , File f ) throws IOException , NumberFormatException { ExtendedExifInterface exif = new ExtendedExifInterface ( f . toString ( ) ) ; String lonStr = exif . getAttribute ( ExifInterface . TAG_GPS_LONGITUDE ) ; if ( lonStr == null ) { throw new IOException ( _STR ) ; } float lonf = convertToDegree ( lonStr ) ; String lonRef = exif . getAttribute ( ExifInterface . TAG_GPS_LONGITUDE_REF ) ; if ( lonRef != null && ! lonRef . equals ( _STR ) ) { lonf = - lonf ; } float latf = convertToDegree ( exif . getAttribute ( ExifInterface . TAG_GPS_LATITUDE ) ) ; String latRef = exif . getAttribute ( ExifInterface . TAG_GPS_LATITUDE_REF ) ; if ( latRef != null && ! latRef . equals ( _STR ) ) { latf = - latf ; } lat = ( int ) ( latf * _NUM ) ; lon = ( int ) ( lonf * _NUM ) ; Log . d ( _STR , _STR + lat + _STR + lon ) ; ref = d . getAbsolutePath ( ) + _STR + f . getName ( ) ; String dir = exif . getAttribute ( ExtendedExifInterface . TAG_GPS_IMG_DIRECTION ) ; if ( dir != null ) { direction = ( int ) Double . parseDouble ( dir ) ; directionRef = exif . getAttribute ( ExtendedExifInterface . TAG_GPS_IMG_DIRECTION_REF ) ; Log . d ( _STR , _STR + dir + _STR + direction + _STR + directionRef ) ; } }
public static long bytesToLong ( final byte [ ] bytes ) { final ByteBuffer buffer = ByteBuffer . allocate ( _NUM ) ; buffer . put ( bytes , _NUM , _NUM ) ; buffer . flip ( ) ; return buffer . getLong ( ) ; }
protected int unicodeEscapeLexer ( int c ) throws IOException { int ret = _NUM ; c = in . read ( ) ; code . clear ( ) ; try { for ( int i = _NUM ; i < _NUM ; i ++ ) { c = in . read ( ) ; if ( isEndOfFile ( c ) || isEndOfLine ( c ) ) { throw new NumberFormatException ( _STR ) ; } code . append ( ( char ) c ) ; } ret = Integer . parseInt ( code . toString ( ) , _NUM ) ; } catch ( NumberFormatException e ) { throw new IOException ( _STR + getLineNumber ( ) + _STR + code . toString ( ) + _STR + e . toString ( ) ) ; } return ret ; }
@ Override public void mouseEntered ( MouseEvent evt ) { delegate . mouseMoved ( evt ) ; }
public static String removeFormatting ( String line ) { int length = line . length ( ) ; StringBuilder buffer = new StringBuilder ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { char ch = line . charAt ( i ) ; if ( ch != _STR && ch != _STR && ch != _STR && ch != _STR ) buffer . append ( ch ) ; } return buffer . toString ( ) ; }
public void testNegPosFirstShorter ( ) { String numA = _STR ; String numB = _STR ; String res = _STR ; BigInteger aNumber = new BigInteger ( numA ) ; BigInteger bNumber = new BigInteger ( numB ) ; BigInteger result = aNumber . xor ( bNumber ) ; assertTrue ( res . equals ( result . toString ( ) ) ) ; }
public void print ( ) { Object [ ] iterChargingTimes = chargingTimes . toArray ( ) ; Arrays . sort ( iterChargingTimes ) ; for ( int i = _NUM ; i < iterChargingTimes . length ; i ++ ) { ChargeLog curItem = ( ChargeLog ) iterChargingTimes [ i ] ; curItem . print ( ) ; } }
public boolean isEmpty ( ) { return rdns . isEmpty ( ) ; }
private void writeLocalCSV ( MedtronicSensorRecord mostRecentData , Context context ) { try { if ( mostRecentData == null || mostRecentData . bGValue == null ) log . debug ( _STR ) ; else log . debug ( _STR + mostRecentData . bGValue ) ; ObjectOutputStream oos = new ObjectOutputStream ( new FileOutputStream ( new File ( context . getFilesDir ( ) , _STR ) ) ) ; oos . writeObject ( mostRecentData ) ; oos . flush ( ) ; oos . close ( ) ; } catch ( Exception e ) { Log . e ( TAG , _STR , e ) ; log . error ( _STR , e ) ; } }
public ServiceConfig createOrganizationConfig ( String orgName , Map attrs ) throws SMSException , SSOException { validateSSM ( ) ; ServiceSchemaImpl ss = ssm . getSchema ( SchemaType . ORGANIZATION ) ; if ( ss == null ) { String [ ] args = { serviceName } ; throw ( new SMSException ( IUMSConstants . UMS_BUNDLE_NAME , _STR , args ) ) ; } String orgdn = DNMapper . orgNameToDN ( orgName ) ; CreateServiceConfig . checkBaseNodesForOrg ( token , orgdn , serviceName , version ) ; String orgDN = scm . constructServiceConfigDN ( SMSUtils . DEFAULT , CreateServiceConfig . ORG_CONFIG_NODE , orgdn ) ; try { CachedSMSEntry cEntry = CachedSMSEntry . getInstance ( token , orgDN ) ; if ( cEntry . isDirty ( ) ) { cEntry . refresh ( ) ; } if ( cEntry . isNewEntry ( ) ) { CreateServiceConfig . createSubConfigEntry ( token , orgDN , ss , null , null , attrs , orgName ) ; if ( ServiceManager . isCoexistenceMode ( ) ) { String smsDN = DNMapper . orgNameToDN ( orgName ) ; OrgConfigViaAMSDK amsdk = new OrgConfigViaAMSDK ( token , DNMapper . realmNameToAMSDKName ( smsDN ) , smsDN ) ; amsdk . assignService ( serviceName ) ; } } else if ( attrs != null && ! attrs . isEmpty ( ) ) { ServiceConfig sc = getOrganizationConfig ( orgName , null ) ; sc . setAttributes ( attrs ) ; } } catch ( ServiceAlreadyExistsException slee ) { } return ( getOrganizationConfig ( orgName , null ) ) ; }
public void deleteAuthenticationDomain ( String realm , String cotName ) throws AMConsoleException { String [ ] param = { realm , cotName } ; logEvent ( _STR , param ) ; try { CircleOfTrustManager manager = getCircleOfTrustManager ( ) ; manager . deleteCircleOfTrust ( realm , cotName ) ; logEvent ( _STR , param ) ; } catch ( COTException e ) { String strError = getErrorString ( e ) ; String [ ] paramsEx = { realm , cotName , strError } ; logEvent ( _STR , paramsEx ) ; throw new AMConsoleException ( strError ) ; } }
protected void addSourceCodeRemark ( TestSolution testSolution , Element element , String messageCode , EvidenceElement evidenceElement ) { if ( evidenceElement != null ) { Collection < EvidenceElement > evidenceElementList = new ArrayList < > ( ) ; evidenceElementList . add ( evidenceElement ) ; processRemarkService . addSourceCodeRemarkOnElement ( testSolution , element , messageCode , evidenceElementList ) ; } else { processRemarkService . addSourceCodeRemarkOnElement ( testSolution , element , messageCode ) ; } }
void eventPreModify ( ActionType type , long position , boolean isSingle ) { if ( type != currentActionType || ! isSingle || System . currentTimeMillis ( ) - previousTime > MERGE_TIME || ( type == ActionType . INSERT || type == ActionType . OVERWRITE ) && actionExclusiveEnd ( ) != position || type == ActionType . DELETE && actionPosition ( ) != position && actionPosition ( ) - _NUM != position ) { startAction ( type , isSingle ) ; } else { isBackspace = actionPosition ( ) > position ; } if ( isSingle && type == ActionType . INSERT ) { updateNewRange ( position ) ; previousTime = System . currentTimeMillis ( ) ; } }
private byte [ ] decodePEM ( InputStream inStream , byte [ ] boundary_suffix ) throws IOException { int ch ; for ( int i = _NUM ; i < PEM_BEGIN . length ; ++ i ) { if ( PEM_BEGIN [ i ] != ( ch = inStream . read ( ) ) ) { throw new IOException ( _STR + ( ( boundary_suffix == null ) ? _STR : new String ( boundary_suffix ) ) + _STR ) ; } } if ( boundary_suffix == null ) { while ( ( ch = inStream . read ( ) ) != _STR ) { if ( ch == - _NUM ) { throw new IOException ( _STR ) ; } } } else { for ( int i = _NUM ; i < boundary_suffix . length ; i ++ ) { if ( boundary_suffix [ i ] != inStream . read ( ) ) { throw new IOException ( _STR + new String ( boundary_suffix ) + _STR ) ; } } if ( ( ch = inStream . read ( ) ) == _STR ) { ch = inStream . read ( ) ; } if ( ch != _STR ) { throw new IOException ( _STR + _STR ) ; } } int size = _NUM ; byte [ ] buff = new byte [ size ] ; int index = _NUM ; while ( ( ch = inStream . read ( ) ) != _STR ) { if ( ch == - _NUM ) { throw new IOException ( _STR ) ; } buff [ index ++ ] = ( byte ) ch ; if ( index == size ) { byte [ ] newbuff = new byte [ size + _NUM ] ; System . arraycopy ( buff , _NUM , newbuff , _NUM , size ) ; buff = newbuff ; size += _NUM ; } } if ( buff [ index - _NUM ] != _STR ) { throw new IOException ( _STR + _STR ) ; } for ( int i = _NUM ; i < PEM_END . length ; ++ i ) { if ( PEM_END [ i ] != inStream . read ( ) ) { throw badEnd ( boundary_suffix ) ; } } if ( boundary_suffix == null ) { while ( ( ( ch = inStream . read ( ) ) != - _NUM ) && ( ch != _STR ) && ( ch != _STR ) ) { } } else { for ( int i = _NUM ; i < boundary_suffix . length ; i ++ ) { if ( boundary_suffix [ i ] != inStream . read ( ) ) { throw badEnd ( boundary_suffix ) ; } } } inStream . mark ( _NUM ) ; while ( ( ( ch = inStream . read ( ) ) != - _NUM ) && ( ch == _STR || ch == _STR ) ) { inStream . mark ( _NUM ) ; } inStream . reset ( ) ; buff = Base64 . decode ( buff , index ) ; if ( buff == null ) { throw new IOException ( _STR ) ; } return buff ; }
void saveAsync ( DocumentEntity entity , Consumer < DocumentEntity > callBack ) throws ExecuteAsyncQueryException , UnsupportedOperationException ;
public boolean markSupported ( ) { return fInputStream . markSupported ( ) ; }
private static int encodeText ( CharSequence msg , int startpos , int count , StringBuilder sb , int initialSubmode ) { StringBuilder tmp = new StringBuilder ( count ) ; int submode = initialSubmode ; int idx = _NUM ; while ( _BOOL ) { char ch = msg . charAt ( startpos + idx ) ; switch ( submode ) { case SUBMODE_ALPHA : if ( isAlphaUpper ( ch ) ) { if ( ch == _STR ) { tmp . append ( ( char ) _NUM ) ; } else { tmp . append ( ( char ) ( ch - _NUM ) ) ; } } else { if ( isAlphaLower ( ch ) ) { submode = SUBMODE_LOWER ; tmp . append ( ( char ) _NUM ) ; continue ; } else if ( isMixed ( ch ) ) { submode = SUBMODE_MIXED ; tmp . append ( ( char ) _NUM ) ; continue ; } else { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; break ; } } break ; case SUBMODE_LOWER : if ( isAlphaLower ( ch ) ) { if ( ch == _STR ) { tmp . append ( ( char ) _NUM ) ; } else { tmp . append ( ( char ) ( ch - _NUM ) ) ; } } else { if ( isAlphaUpper ( ch ) ) { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) ( ch - _NUM ) ) ; break ; } else if ( isMixed ( ch ) ) { submode = SUBMODE_MIXED ; tmp . append ( ( char ) _NUM ) ; continue ; } else { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; break ; } } break ; case SUBMODE_MIXED : if ( isMixed ( ch ) ) { tmp . append ( ( char ) MIXED [ ch ] ) ; } else { if ( isAlphaUpper ( ch ) ) { submode = SUBMODE_ALPHA ; tmp . append ( ( char ) _NUM ) ; continue ; } else if ( isAlphaLower ( ch ) ) { submode = SUBMODE_LOWER ; tmp . append ( ( char ) _NUM ) ; continue ; } else { if ( startpos + idx + _NUM < count ) { char next = msg . charAt ( startpos + idx + _NUM ) ; if ( isPunctuation ( next ) ) { submode = SUBMODE_PUNCTUATION ; tmp . append ( ( char ) _NUM ) ; continue ; } } tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; } } break ; default : if ( isPunctuation ( ch ) ) { tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; } else { submode = SUBMODE_ALPHA ; tmp . append ( ( char ) _NUM ) ; continue ; } } idx ++ ; if ( idx >= count ) { break ; } } char h = _NUM ; int len = tmp . length ( ) ; for ( int i = _NUM ; i < len ; i ++ ) { boolean odd = ( i % _NUM ) != _NUM ; if ( odd ) { h = ( char ) ( ( h * _NUM ) + tmp . charAt ( i ) ) ; sb . append ( h ) ; } else { h = tmp . charAt ( i ) ; } } if ( ( len % _NUM ) != _NUM ) { sb . append ( ( char ) ( ( h * _NUM ) + _NUM ) ) ; } return submode ; }
public String resolveParentRelationName ( String parentName , Object parent , String childName , Object child ) { return parentName ; }
public ByteColumn ( int nrows , int capacity , byte defaultValue ) { super ( byte . class , new Byte ( defaultValue ) ) ; if ( capacity < nrows ) { throw new IllegalArgumentException ( _STR ) ; } m_values = new byte [ capacity ] ; Arrays . fill ( m_values , defaultValue ) ; m_size = nrows ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public RelNode convertSelect ( SqlSelect select , boolean top ) { final SqlValidatorScope selectScope = validator . getWhereScope ( select ) ; final Blackboard bb = createBlackboard ( selectScope , null , top ) ; convertSelectImpl ( bb , select ) ; return bb . root ; }
public static Object executeScript ( String filePath , String functionName , Map < String , Object > context ) { return executeScript ( filePath , functionName , context , new Object [ ] { context } ) ; }
public XercesHTML2DocumentBuilderFactory ( DocumentBuilderSetting [ ] settings ) throws DOMTestIncompatibleException { super ( settings ) ; try { ClassLoader classLoader = ClassLoader . getSystemClassLoader ( ) ; Class htmlBuilderClass = classLoader . loadClass ( _STR ) ; htmlBuilderConstructor = htmlBuilderClass . getConstructor ( NO_CLASSES ) ; getHTMLDocumentMethod = htmlBuilderClass . getMethod ( _STR , NO_CLASSES ) ; Class htmlDOMImpl = classLoader . loadClass ( _STR ) ; Method method = htmlDOMImpl . getMethod ( _STR , NO_CLASSES ) ; domImpl = ( DOMImplementation ) method . invoke ( null , NO_OBJECTS ) ; Class saxFactoryClass = classLoader . loadClass ( _STR ) ; factory = ( SAXParserFactory ) saxFactoryClass . newInstance ( ) ; } catch ( InvocationTargetException ex ) { throw new DOMTestIncompatibleException ( ex . getTargetException ( ) , null ) ; } catch ( Exception ex ) { throw new DOMTestIncompatibleException ( ex , null ) ; } if ( settings != null ) { for ( int i = _NUM ; i < settings . length ; i ++ ) { } } try { factory . newSAXParser ( ) ; } catch ( ParserConfigurationException ex ) { throw new DOMTestIncompatibleException ( ex , null ) ; } catch ( SAXException ex ) { throw new DOMTestIncompatibleException ( ex , null ) ; } }
private static String formatSampleRate ( int rate ) { return MHZ_FORMATTER . format ( ( double ) rate / _NUM ) ; }
public final boolean isClosed ( ) { return closed . get ( ) ; }
void start ( ) { this . running = _BOOL ; Thread thread = new Thread ( this , _STR + hashCode ( ) ) ; thread . setDaemon ( _BOOL ) ; thread . start ( ) ; }
TypeSimplifier ( Types typeUtils , String packageName , Set < TypeMirror > types , TypeMirror base ) { this . typeUtils = typeUtils ; Set < TypeMirror > typesPlusBase = new TypeMirrorSet ( types ) ; if ( base != null ) { typesPlusBase . add ( base ) ; } Set < TypeMirror > referenced = referencedClassTypes ( typeUtils , typesPlusBase ) ; Set < TypeMirror > defined = nonPrivateDeclaredTypes ( typeUtils , base ) ; this . imports = findImports ( typeUtils , packageName , referenced , defined ) ; }
public static byte [ ] escape ( final byte [ ] bytes ) { final byte [ ] temp = new byte [ _NUM * bytes . length ] ; int currentPosition = _NUM ; for ( final byte b : bytes ) { if ( b == ESCAPE_CHAR ) { temp [ currentPosition ++ ] = ESCAPE_CHAR ; temp [ currentPosition ++ ] = REPLACEMENT_CHAR ; } else if ( b == DELIMITER ) { temp [ currentPosition ++ ] = ESCAPE_CHAR ; temp [ currentPosition ++ ] = ESCAPE_CHAR ; } else { temp [ currentPosition ++ ] = b ; } } final byte [ ] escaped = new byte [ currentPosition ] ; System . arraycopy ( temp , _NUM , escaped , _NUM , currentPosition ) ; return escaped ; }
public final native String name ( ) ;
protected void drawChartValuesText ( Canvas canvas , XYSeries series , XYSeriesRenderer renderer , Paint paint , List < Float > points , int seriesIndex , int startIndex ) { if ( points . size ( ) > _NUM ) { float previousPointX = points . get ( _NUM ) ; float previousPointY = points . get ( _NUM ) ; for ( int k = _NUM ; k < points . size ( ) ; k += _NUM ) { if ( k == _NUM ) { if ( Math . abs ( points . get ( _NUM ) - points . get ( _NUM ) ) > renderer . getDisplayChartValuesDistance ( ) || Math . abs ( points . get ( _NUM ) - points . get ( _NUM ) ) > renderer . getDisplayChartValuesDistance ( ) ) { drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex ) ) , points . get ( _NUM ) , points . get ( _NUM ) - renderer . getChartValuesSpacing ( ) , paint , _NUM ) ; drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex + _NUM ) ) , points . get ( _NUM ) , points . get ( _NUM ) - renderer . getChartValuesSpacing ( ) , paint , _NUM ) ; previousPointX = points . get ( _NUM ) ; previousPointY = points . get ( _NUM ) ; } } else if ( k > _NUM ) { if ( Math . abs ( points . get ( k ) - previousPointX ) > renderer . getDisplayChartValuesDistance ( ) || Math . abs ( points . get ( k + _NUM ) - previousPointY ) > renderer . getDisplayChartValuesDistance ( ) ) { drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex + k / _NUM ) ) , points . get ( k ) , points . get ( k + _NUM ) - renderer . getChartValuesSpacing ( ) , paint , _NUM ) ; previousPointX = points . get ( k ) ; previousPointY = points . get ( k + _NUM ) ; } } } } else { for ( int k = _NUM ; k < points . size ( ) ; k += _NUM ) { drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex + k / _NUM ) ) , points . get ( k ) , points . get ( k + _NUM ) - renderer . getChartValuesSpacing ( ) , paint , _NUM ) ; } } }
public static String toString ( Document hostDoc ) throws IOException { try { StringWriter out = new StringWriter ( ) ; DOMSource domSource = new DOMSource ( hostDoc ) ; StreamResult streamResult = new StreamResult ( out ) ; TransformerFactory tf = TransformerFactory . newInstance ( ) ; Transformer serializer = tf . newTransformer ( ) ; serializer . setOutputProperty ( OutputKeys . ENCODING , ENC . name ( ) ) ; serializer . setOutputProperty ( OutputKeys . METHOD , _STR ) ; serializer . setOutputProperty ( OutputKeys . INDENT , _STR ) ; serializer . setOutputProperty ( OutputKeys . DOCTYPE_PUBLIC , HtmlDomUtil . HTML_STRICT ) ; serializer . transform ( domSource , streamResult ) ; return out . toString ( ) ; } catch ( TransformerException e ) { IOException r = new IOException ( _STR ) ; r . initCause ( e ) ; throw r ; } }
public MongoClient clientForMembers ( ServerAddress ... seeds ) { List < ServerAddress > addresses = new ArrayList < > ( ) ; for ( ServerAddress seedAddress : seeds ) { if ( seedAddress != null ) addresses . add ( seedAddress ) ; } return clientForMembers ( addresses ) ; }
public static boolean stringToBooleanValue ( String str ) throws ExpressionException { str = StringUtil . toLowerCase ( str . trim ( ) ) ; if ( str . equals ( _STR ) || str . equals ( _STR ) ) return _BOOL ; else if ( str . equals ( _STR ) || str . equals ( _STR ) ) return _BOOL ; throw new CasterException ( _STR + str + _STR ) ; }
public boolean hasMoreWork ( ) { return ! workList . isEmpty ( ) ; }
protected synchronized void engineSetSeed ( byte [ ] seed ) { if ( seed == null ) { throw new NullPointerException ( _STR ) ; } if ( state == NEXT_BYTES ) { System . arraycopy ( copies , HASHCOPY_OFFSET , this . seed , HASH_OFFSET , EXTRAFRAME_OFFSET ) ; } state = SET_SEED ; if ( seed . length != _NUM ) { updateSeed ( seed ) ; } }
public void generateClassFile ( OutputStream os ) { ClassWriter cw = new SootASMClassWriter ( ClassWriter . COMPUTE_FRAMES ) ; cv = cw ; generateByteCode ( ) ; try { os . write ( cw . toByteArray ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( _STR , e ) ; } }
private static boolean useCompactFontFormat ( Map < String , Object > args , int compatibilityVersion ) { String value = ( String ) args . get ( EMBEDASCFF ) ; boolean useCFF = _BOOL ; if ( compatibilityVersion < MxmlConfiguration . VERSION_4_0 ) useCFF = _BOOL ; if ( value != null ) { useCFF = Boolean . parseBoolean ( value . trim ( ) ) ; } return useCFF ; }
public static void main ( String [ ] args ) { new GeneratorTester ( args ) ; }
private String mosesize ( String feature ) { if ( joshuaConfiguration . moses ) { if ( feature . startsWith ( _STR ) || feature . startsWith ( _STR ) ) return feature . replace ( _STR , _STR ) ; } return feature ; }
public static int calcTextHeight ( Paint paint , String demoText ) { Rect r = new Rect ( ) ; paint . getTextBounds ( demoText , _NUM , demoText . length ( ) , r ) ; return r . height ( ) ; }
private void checkShutdown ( ) { synchronized ( mux ) { if ( isBeingShutdown ) throw new RejectedExecutionException ( _STR ) ; } }
public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = _BOOL ; }
private static final void checkQueueForDependenciesAndExecuteUnblockedTasks ( ) { List < ProgressThread > toRemove = new LinkedList < > ( ) ; synchronized ( LOCK ) { for ( ProgressThread pg : queuedThreads ) { if ( ! pg . isBlockedByDependencies ( ) ) { if ( ! pg . isWaiting ( ) ) { toRemove . add ( pg ) ; EXECUTOR . execute ( pg . makeWrapper ( ) ) ; } } } } for ( ProgressThread pg : toRemove ) { synchronized ( LOCK ) { queuedThreads . remove ( pg ) ; } } }
private static short CallShortMethodV ( JNIEnvironment env , int objJREF , int methodID , Address argAddress ) throws Exception { if ( traceJNI ) VM . sysWrite ( _STR ) ; RuntimeEntrypoints . checkJNICountDownToGC ( ) ; try { Object obj = env . getJNIRef ( objJREF ) ; Object returnObj = JNIHelpers . invokeWithVarArg ( obj , methodID , argAddress , TypeReference . Short , _BOOL ) ; return Reflection . unwrapShort ( returnObj ) ; } catch ( Throwable unexpected ) { if ( traceJNI ) unexpected . printStackTrace ( System . err ) ; env . recordException ( unexpected ) ; return _NUM ; } }
public static void drawVerticalMarginIndicator ( Graphics2D g , String text , int x , int y1 , int y2 ) { if ( y1 > y2 ) { int temp = y1 ; y1 = y2 ; y2 = temp ; } if ( text == null ) { g . drawLine ( x , y1 , x , y2 ) ; g . drawLine ( x , y1 , x - CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y1 , x + CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x - CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x + CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; return ; } Canvas c = new Canvas ( ) ; FontMetrics fm = c . getFontMetrics ( sFont ) ; g . setFont ( sFont ) ; int padding = _NUM ; Rectangle2D bounds = fm . getStringBounds ( text , g ) ; int th = ( int ) bounds . getHeight ( ) ; int offset = _NUM * CONNECTION_ARROW_SIZE ; int h = ( ( y2 - y1 ) - ( th + _NUM * padding ) ) / _NUM ; if ( h <= padding ) { g . drawLine ( x , y1 , x , y2 ) ; g . drawString ( text , ( int ) ( x - bounds . getWidth ( ) / _NUM ) + offset , y2 - h - padding ) ; g . drawLine ( x - CONNECTION_ARROW_SIZE , y1 , x + CONNECTION_ARROW_SIZE , y1 ) ; g . drawLine ( x - CONNECTION_ARROW_SIZE , y2 , x + CONNECTION_ARROW_SIZE , y2 ) ; } else { g . drawLine ( x , y1 , x , y1 + h ) ; g . drawLine ( x , y2 - h , x , y2 ) ; g . drawString ( text , ( int ) ( x - bounds . getWidth ( ) / _NUM ) , y2 - h - padding ) ; g . drawLine ( x , y1 , x - CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y1 , x + CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x - CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x + CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; } }
public void fireIndexedPropertyChange ( String propertyName , int index , boolean oldValue , boolean newValue ) { if ( oldValue != newValue ) { fireIndexedPropertyChange ( propertyName , index , Boolean . valueOf ( oldValue ) , Boolean . valueOf ( newValue ) ) ; } }
protected void removeMarkers ( ) { for ( int i = markerImage . size ( ) ; i > _NUM ; i -- ) { LocoIcon il = markerImage . get ( i - _NUM ) ; if ( ( il != null ) && ( il . isActive ( ) ) ) { markerImage . remove ( i - _NUM ) ; il . remove ( ) ; il . dispose ( ) ; setDirty ( _BOOL ) ; } } super . removeMarkers ( ) ; repaint ( ) ; }
public IElementType captureString ( ) { CharSequence buffer = getBuffer ( ) ; int currentPosition = getTokenEnd ( ) ; setTokenStart ( currentPosition ) ; int bufferEnd = getBufferEnd ( ) ; char openQuote = buffer . charAt ( currentPosition ) ; char closeQuote = RegexBlock . getQuoteCloseChar ( openQuote ) ; boolean quotesDiffer = openQuote != closeQuote ; boolean isEscaped = _BOOL ; int quotesDepth = _NUM ; currentPosition ++ ; while ( currentPosition < bufferEnd ) { char currentChar = buffer . charAt ( currentPosition ) ; if ( ! isEscaped && quotesDepth == _NUM && currentChar == closeQuote ) { break ; } if ( ! isEscaped && quotesDiffer ) { if ( currentChar == openQuote ) { quotesDepth ++ ; } else if ( currentChar == closeQuote ) { quotesDepth -- ; } } isEscaped = ! isEscaped && currentChar == _STR ; currentPosition ++ ; } if ( currentPosition < bufferEnd ) { currentPosition ++ ; } setTokenEnd ( currentPosition ) ; PerlStringLexer stringLexer = getStringLexer ( ) ; popState ( ) ; preparsedTokensList . addAll ( lexCurrentToken ( stringLexer ) ) ; return getPreParsedToken ( ) ; }
public static String toLocalizedInteger ( long value ) { return NUMBER_FORMAT0 . format ( value ) ; }
public void testParseClientHandshake ( ) throws Exception { for ( int splitPos = _NUM ; splitPos < _NUM ; splitPos ++ ) { log . info ( _STR + splitPos ) ; ByteBuffer tmp = clientHandshakePacket ( ) ; ByteBuffer [ ] split = split ( tmp , splitPos ) ; GridNioSession ses = new MockNioSession ( ) ; ses . addMeta ( MARSHALLER . ordinal ( ) , new GridClientOptimizedMarshaller ( ) ) ; GridTcpRestParser parser = new GridTcpRestParser ( _BOOL ) ; Collection < GridClientMessage > lst = new ArrayList < > ( _NUM ) ; for ( ByteBuffer buf : split ) { GridClientMessage r ; while ( buf . hasRemaining ( ) && ( r = parser . decode ( ses , buf ) ) != null ) lst . add ( r ) ; assertTrue ( _STR , buf . remaining ( ) == _NUM ) ; } assertEquals ( _NUM , lst . size ( ) ) ; GridClientHandshakeRequest req = ( GridClientHandshakeRequest ) F . first ( lst ) ; assertNotNull ( req ) ; assertEquals ( U . bytesToShort ( new byte [ ] { _NUM , _NUM } , _NUM ) , req . version ( ) ) ; } }
public void initialize ( Context context , HapticFeedbackController hapticFeedbackController , int initialHoursOfDay , int initialMinutes , boolean is24HourMode ) { if ( mTimeInitialized ) { Log . e ( TAG , _STR ) ; return ; } mHapticFeedbackController = hapticFeedbackController ; mIs24HourMode = is24HourMode ; mHideAmPm = mAccessibilityManager . isTouchExplorationEnabled ( ) ? _BOOL : mIs24HourMode ; mCircleView . initialize ( context , mHideAmPm ) ; mCircleView . invalidate ( ) ; if ( ! mHideAmPm ) { mAmPmCirclesView . initialize ( context , initialHoursOfDay < _NUM ? AM : PM ) ; mAmPmCirclesView . invalidate ( ) ; } Resources res = context . getResources ( ) ; int [ ] hours = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int [ ] hours_24 = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int [ ] minutes = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; String [ ] hoursTexts = new String [ _NUM ] ; String [ ] innerHoursTexts = new String [ _NUM ] ; String [ ] minutesTexts = new String [ _NUM ] ; for ( int i = _NUM ; i < _NUM ; i ++ ) { hoursTexts [ i ] = is24HourMode ? String . format ( _STR , hours_24 [ i ] ) : String . format ( _STR , hours [ i ] ) ; innerHoursTexts [ i ] = String . format ( _STR , hours [ i ] ) ; minutesTexts [ i ] = String . format ( _STR , minutes [ i ] ) ; } mHourRadialTextsView . initialize ( res , hoursTexts , ( is24HourMode ? innerHoursTexts : null ) , mHideAmPm , _BOOL ) ; mHourRadialTextsView . invalidate ( ) ; mMinuteRadialTextsView . initialize ( res , minutesTexts , null , mHideAmPm , _BOOL ) ; mMinuteRadialTextsView . invalidate ( ) ; setValueForItem ( HOUR_INDEX , initialHoursOfDay ) ; setValueForItem ( MINUTE_INDEX , initialMinutes ) ; int hourDegrees = ( initialHoursOfDay % _NUM ) * HOUR_VALUE_TO_DEGREES_STEP_SIZE ; mHourRadialSelectorView . initialize ( context , mHideAmPm , is24HourMode , _BOOL , hourDegrees , isHourInnerCircle ( initialHoursOfDay ) ) ; int minuteDegrees = initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE ; mMinuteRadialSelectorView . initialize ( context , mHideAmPm , _BOOL , _BOOL , minuteDegrees , _BOOL ) ; mTimeInitialized = _BOOL ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . deleteData ( _NUM , _NUM ) ; childData = child . getData ( ) ; assertEquals ( _STR , _STR , childData ) ; }
void checkFrameValue ( final Object value ) { if ( value == Opcodes . TOP || value == Opcodes . INTEGER || value == Opcodes . FLOAT || value == Opcodes . LONG || value == Opcodes . DOUBLE || value == Opcodes . NULL || value == Opcodes . UNINITIALIZED_THIS ) { return ; } if ( value instanceof String ) { checkInternalName ( ( String ) value , _STR ) ; return ; } if ( ! ( value instanceof Label ) ) { throw new IllegalArgumentException ( _STR + value ) ; } else { usedLabels . add ( ( Label ) value ) ; } }
protected void sqrtLayout ( VisualTable labels ) { Rectangle2D b = getLayoutBounds ( ) ; double breadth = getBreadth ( b ) ; double span = m_hi - m_lo ; double splo = MathLib . safeSqrt ( m_prevlo ) ; double spspan = MathLib . safeSqrt ( m_prevhi ) - splo ; double vlo = Math . pow ( _NUM , Math . floor ( MathLib . safeLog10 ( m_lo ) ) ) ; double slo = MathLib . safeSqrt ( m_lo ) ; double sspan = MathLib . safeSqrt ( m_hi ) - slo ; Iterator iter = labels . tuples ( ) ; while ( iter . hasNext ( ) ) { VisualItem item = ( VisualItem ) iter . next ( ) ; reset ( item ) ; double v = item . getDouble ( VALUE ) ; double x = span == _NUM ? _NUM : ( ( MathLib . safeSqrt ( v ) - slo ) / sspan ) * breadth ; set ( item , x , b ) ; } Index index = labels . index ( VALUE ) ; double step = getLinearStep ( span , breadth / span ) ; if ( step == _NUM ) step = _NUM ; int r ; for ( double x , v = vlo ; v <= m_hi ; v += step ) { x = ( ( MathLib . safeSqrt ( v ) - slo ) / sspan ) * breadth ; if ( x < - _NUM ) { continue ; } else if ( ( r = index . get ( v ) ) >= _NUM ) { VisualItem item = labels . getItem ( r ) ; item . setVisible ( _BOOL ) ; item . setEndVisible ( _BOOL ) ; } else { VisualItem item = labels . addItem ( ) ; item . set ( LABEL , m_nf . format ( v ) ) ; item . setDouble ( VALUE , v ) ; double f = spspan == _NUM ? _NUM : ( ( MathLib . safeSqrt ( v ) - splo ) / spspan ) ; if ( f <= _NUM || f >= _NUM ) { item . setStartVisible ( _BOOL ) ; } set ( item , f * breadth , b ) ; set ( item , x , b ) ; } } }
public static Template create ( String value ) { if ( Settings . isFunction ( value ) ) { return new FunctionalTemplate ( value ) ; } if ( Graph . isRelational ( value ) ) { try { return new RelationalTemplate ( value ) ; } catch ( Exception e ) { log . warning ( _STR + value + _STR ) ; return new StringTemplate ( value ) ; } } else if ( RegexTemplate . isPossibleRegex ( value ) ) { try { if ( ArithmeticTemplate . isArithmeticExpression ( value ) ) { return new ArithmeticTemplate ( value ) ; } return new RegexTemplate ( value ) ; } catch ( PatternSyntaxException e ) { log . warning ( _STR + value + _STR ) ; return new StringTemplate ( value ) ; } } else { return new StringTemplate ( value ) ; } }
protected boolean customShouldTakeFocus ( ) { if ( customArea instanceof Label ) { return _BOOL ; } if ( customArea instanceof CLabel ) { return ( customArea . getStyle ( ) & SWT . NO_FOCUS ) > _NUM ; } return _BOOL ; }
public void init ( PrivateKey key ) { try { if ( signature != null ) { signature . initSign ( key ) ; } else if ( cipher != null ) { cipher . init ( Cipher . ENCRYPT_MODE , key ) ; } } catch ( InvalidKeyException e ) { throw new AlertException ( AlertProtocol . BAD_CERTIFICATE , new SSLException ( _STR , e ) ) ; } }
private Map < String , List < Zone > > selectZonesForInitiatorsAndPorts ( NetworkLite network , Map < String , List < Zone > > wwnToZones , Map < String , StoragePort > initiatorPortsMap ) { Map < String , List < Zone > > filteredMap = new HashMap < String , List < Zone > > ( ) ; Zone zone = null ; List < Zone > zones = null ; for ( String initiatorWwn : wwnToZones . keySet ( ) ) { for ( String portWwn : initiatorPortsMap . keySet ( ) ) { zone = _networkScheduler . selectExistingZoneForInitiatorPort ( network , initiatorWwn , portWwn , wwnToZones . get ( initiatorWwn ) ) ; if ( zone != null ) { zones = filteredMap . get ( initiatorWwn ) ; if ( zones == null ) { zones = new ArrayList < > ( ) ; filteredMap . put ( initiatorWwn , zones ) ; } zones . add ( zone ) ; } } } return filteredMap ; }
public static boolean isExtension ( String filename , Collection < String > extensions ) { if ( filename == null ) return _BOOL ; if ( extensions == null || extensions . isEmpty ( ) ) return indexOfExtension ( filename ) == - _NUM ; String fileExt = getExtension ( filename ) ; for ( String extension : extensions ) { if ( fileExt . equals ( extension ) ) return _BOOL ; } return _BOOL ; }
private void writeJarPostResource ( Element postResourceEl , String path ) { postResourceEl . setAttribute ( _STR , JAR_RESOURCE_SET ) ; postResourceEl . setAttribute ( _STR , path . replace ( _STR , _STR ) ) ; }
public void closeFile ( ) throws IOException { file . close ( ) ; file = null ; }
public TypedEventListener ( EventListener < E > wrappedListener , Class < E > eventClass ) { this . eventClass = eventClass ; this . wrappedListener = wrappedListener ; }
public static List < ? extends Node > childNodeList ( Node node ) { if ( node == null ) return null ; List < Node > nodes = new LinkedList < Node > ( ) ; do { if ( node . getNodeType ( ) == Node . ELEMENT_NODE || node . getNodeType ( ) == Node . COMMENT_NODE ) { nodes . add ( node ) ; } } while ( ( node = node . getNextSibling ( ) ) != null ) ; return nodes ; }
public static Corleone context ( String jobContext ) { if ( jobContext == null || jobContext . equals ( _STR ) ) { throw new IllegalArgumentException ( _STR ) ; } contexts . clear ( ) ; contexts . add ( jobContext ) ; return getInstance ( ) ; }
protected final void init ( ) throws NoGlyphException { char [ ] codes = chars . toCharArray ( ) ; indices = new int [ codes . length ] ; advances = new int [ codes . length ] ; double maxAscent = _NUM ; double maxDescent = _NUM ; double scale = size * SWFConstants . TWIPS / _NUM ; for ( int i = _NUM ; i < codes . length ; i ++ ) { int code = ( int ) codes [ i ] ; int [ ] index = new int [ _NUM ] ; FontDefinition . Glyph glyph = getGlyph ( code , index ) ; indices [ i ] = index [ _NUM ] ; if ( glyph != null ) { Shape shape = glyph . getShape ( ) ; double [ ] outline = shape . getBoundingRectangle ( ) ; double x1 = outline [ _NUM ] * scale ; double y1 = outline [ _NUM ] * scale ; double x2 = outline [ _NUM ] * scale ; double y2 = outline [ _NUM ] * scale ; if ( maxAscent < - y1 ) { maxAscent = - y1 ; } if ( maxDescent < y2 ) { maxDescent = y2 ; } double advance = glyph . getAdvance ( ) * scale ; if ( advance == _NUM ) { advance = x2 - x1 ; } if ( i < codes . length - _NUM ) { advance += ( fontDef . getKerningOffset ( code , ( int ) codes [ i + _NUM ] ) * scale ) ; } totalAdvance += advance ; advances [ i ] = ( int ) ( advance * SWFConstants . TWIPS ) ; if ( i == _NUM ) { leftMargin = - y1 ; } if ( i == codes . length - _NUM ) { rightMargin = x2 - advance ; } } } ascent = fontDef . getAscent ( ) * scale ; if ( ascent == _NUM ) { ascent = maxAscent ; } descent = fontDef . getDescent ( ) * scale ; if ( descent == _NUM ) { descent = maxDescent ; } }
public static double info ( int counts [ ] ) { int total = _NUM ; double x = _NUM ; for ( int count : counts ) { x -= xlogx ( count ) ; total += count ; } return x + xlogx ( total ) ; }
public void addMethod ( SootMethod m ) { checkLevel ( SIGNATURES ) ; if ( m . isDeclared ( ) ) throw new RuntimeException ( _STR + m . getName ( ) ) ; if ( subSigToMethods . get ( m . getNumberedSubSignature ( ) ) != null ) { throw new RuntimeException ( _STR + m . getSubSignature ( ) + _STR + this + _STR ) ; } subSigToMethods . put ( m . getNumberedSubSignature ( ) , m ) ; methodList . add ( m ) ; m . setDeclared ( _BOOL ) ; m . setDeclaringClass ( this ) ; }
public void addSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < SwipeListener > ( ) ; } mListeners . add ( listener ) ; }
public void clear ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { for ( Node < E > f = first ; f != null ; ) { f . item = null ; Node < E > n = f . next ; f . prev = null ; f . next = null ; f = n ; } first = last = null ; count = _NUM ; notFull . signalAll ( ) ; } finally { lock . unlock ( ) ; } }
private void addReplicationFactor ( Operation op ) { op . addRequestHeader ( Operation . REPLICATION_QUORUM_HEADER , Operation . REPLICATION_QUORUM_HEADER_VALUE_ALL ) ; }
private static Frame showInitialSplash ( ) { Frame splashFrame = null ; Image image = null ; URL imageURL = getChosenSplashURL ( ) ; if ( imageURL != null ) { try { image = ImageIO . read ( imageURL ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } if ( image != null ) { splashFrame = AWTSplashWindow . splash ( image ) ; } } return splashFrame ; }
protected void decodeLineSuffix ( PushbackInputStream inStream , OutputStream outStream ) throws IOException { int c ; while ( _BOOL ) { c = inStream . read ( ) ; if ( c == - _NUM ) { throw new CEStreamExhausted ( ) ; } if ( c == _STR ) { break ; } if ( c == _STR ) { c = inStream . read ( ) ; if ( ( c != _STR ) && ( c != - _NUM ) ) { inStream . unread ( c ) ; } break ; } } }
public void addTransaction ( SIPServerTransaction serverTransaction ) throws IOException { if ( isLoggingEnabled ( ) ) stackLogger . logDebug ( _STR + serverTransaction ) ; serverTransaction . map ( ) ; addTransactionHash ( serverTransaction ) ; }
private float spacing ( MotionEvent event ) { float x = event . getX ( _NUM ) - event . getX ( _NUM ) ; float y = event . getY ( _NUM ) - event . getY ( _NUM ) ; return ( float ) Math . sqrt ( x * x + y * y ) ; }
public boolean containsPoly ( SootMethod method ) { return getMethod ( method ) != null ; }
public JKTagMapping ( final String sourceQName , final String targetQName , final JKNamespace namespace ) { logger . info ( String . format ( _STR , sourceQName , targetQName ) ) ; this . sourceQName = sourceQName ; this . targetQName = targetQName ; this . namespace = namespace ; this . auto = _BOOL ; }
private void selectAttributeSetInstance ( ) { int m_warehouse_id = getM_Warehouse_ID ( ) ; int m_product_id = getM_Product_ID ( ) ; if ( m_product_id <= _NUM ) return ; MProduct product = MProduct . get ( getCtx ( ) , m_product_id ) ; MWarehouse wh = MWarehouse . get ( getCtx ( ) , m_warehouse_id ) ; String title = product . get_Translation ( MProduct . COLUMNNAME_Name ) + _STR + wh . get_Translation ( MWarehouse . COLUMNNAME_Name ) ; PAttributeInstance pai = new PAttributeInstance ( m_frame , title , m_warehouse_id , _NUM , m_product_id , _NUM ) ; if ( pai . getM_AttributeSetInstance_ID ( ) != - _NUM ) { fAttrSetInstance_ID . setText ( pai . getM_AttributeSetInstanceName ( ) ) ; fAttrSetInstance_ID . setValue ( new Integer ( pai . getM_AttributeSetInstance_ID ( ) ) ) ; } else { fAttrSetInstance_ID . setValue ( Integer . valueOf ( _NUM ) ) ; } }
private void ensureFileOpen ( ) { if ( savingDisabled ) { Log . e ( TAG , _STR ) ; return ; } if ( saveFileStream != null ) return ; File saveFile = new File ( ctx . getFilesDir ( ) , SAVEFILE ) ; try { FileOutputStream fileOutput = null ; DataOutputStream out = null ; if ( saveFile . exists ( ) ) { fileOutput = ctx . openFileOutput ( SAVEFILE , Context . MODE_APPEND ) ; out = new DataOutputStream ( new BufferedOutputStream ( fileOutput ) ) ; } else { fileOutput = ctx . openFileOutput ( SAVEFILE , Context . MODE_PRIVATE ) ; out = new DataOutputStream ( new BufferedOutputStream ( fileOutput ) ) ; out . writeInt ( TrackPoint . FORMAT_VERSION ) ; savedTrackPoints = _NUM ; } saveFileStream = out ; } catch ( Exception e ) { markSavingBroken ( _STR , e ) ; } }
public void test_canonicalizingCache ( ) { final Properties properties = getProperties ( ) ; properties . setProperty ( AbstractTransactionService . Options . MIN_RELEASE_AGE , _STR ) ; final Journal journal = new Journal ( properties ) ; try { final long commitTime0 = journal . commit ( ) ; assertTrue ( commitTime0 != _NUM ) ; final ICommitRecord commitRecord0 = journal . getCommitRecord ( commitTime0 ) ; assertEquals ( commitRecord0 , journal . getCommitRecord ( ) ) ; journal . write ( ByteBuffer . wrap ( new byte [ ] { _NUM , _NUM , _NUM } ) ) ; final long commitTime1 = journal . commit ( ) ; assertTrue ( commitTime1 != _NUM ) ; final ICommitRecord commitRecord1 = journal . getCommitRecord ( commitTime1 ) ; assertEquals ( commitRecord1 , journal . getCommitRecord ( ) ) ; assertTrue ( commitRecord0 == journal . getCommitRecord ( commitTime1 - _NUM ) ) ; assertTrue ( commitRecord1 == journal . getCommitRecord ( commitTime1 + _NUM ) ) ; assertTrue ( commitRecord1 == journal . getCommitRecord ( commitTime1 + _NUM ) ) ; } finally { journal . destroy ( ) ; } }
public static void print ( Object x ) { out . print ( x ) ; out . flush ( ) ; }
@ Override public void stop ( Runnable arg0 ) { stop ( ) ; arg0 . run ( ) ; }
protected int read ( InputStream inputStream , byte [ ] buffer , char divider ) throws IOException { int index = _NUM ; do { byte readByte = ( byte ) ( _NUM & inputStream . read ( ) ) ; if ( readByte == - _NUM || readByte == ( byte ) divider ) { return index ; } buffer [ index ] = readByte ; index ++ ; } while ( index < buffer . length ) ; return index ; }
private static void generateGraphFile ( TransMeta transMeta , String graphFile ) throws GraphGeneratorException { DataOutputStream dos = null ; try { String xml = transMeta . getXML ( ) ; dos = new DataOutputStream ( new FileOutputStream ( new File ( graphFile ) ) ) ; dos . write ( xml . getBytes ( CarbonCommonConstants . DEFAULT_CHARSET ) ) ; } catch ( KettleException kettelException ) { throw new GraphGeneratorException ( _STR , kettelException ) ; } catch ( FileNotFoundException e ) { throw new GraphGeneratorException ( _STR , e ) ; } catch ( UnsupportedEncodingException ue ) { throw new GraphGeneratorException ( _STR , ue ) ; } catch ( IOException ioe ) { throw new GraphGeneratorException ( _STR , ioe ) ; } finally { if ( dos != null ) { try { dos . close ( ) ; } catch ( IOException e ) { e . getMessage ( ) ; } } } }
public static void closeOutputStream ( OutputStream stream , String tag ) { if ( stream != null ) { try { stream . close ( ) ; } catch ( IOException e ) { Log . e ( tag , _STR + e ) ; } } }
private void testMultiStatement ( ) { MVStore s = MVStore . open ( null ) ; TransactionStore ts = new TransactionStore ( s ) ; ts . init ( ) ; Transaction tx ; TransactionMap < String , String > m ; long startUpdate ; tx = ts . begin ( ) ; startUpdate = tx . setSavepoint ( ) ; m = tx . openMap ( _STR ) ; m . setSavepoint ( startUpdate ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertTrue ( m . trySet ( _STR , _STR , _BOOL ) ) ; assertTrue ( m . trySet ( _STR , _STR , _BOOL ) ) ; assertNull ( m . get ( _STR ) ) ; assertNull ( m . get ( _STR ) ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertTrue ( m . trySet ( _STR , null , _BOOL ) ) ; assertTrue ( m . trySet ( _STR , _STR , _BOOL ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertTrue ( m . trySet ( _STR , null , _BOOL ) ) ; assertTrue ( m . trySet ( _STR , _STR , _BOOL ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertNull ( m . get ( _STR ) ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertNull ( m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertTrue ( m . trySet ( _STR , null , _BOOL ) ) ; assertTrue ( m . trySet ( _STR , _STR , _BOOL ) ) ; assertTrue ( m . trySet ( _STR , null , _BOOL ) ) ; assertFalse ( m . trySet ( _STR , _STR , _BOOL ) ) ; tx . rollbackToSavepoint ( startUpdate ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertNull ( m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; tx . commit ( ) ; ts . close ( ) ; s . close ( ) ; }
public void addPropertyChangeListener ( String propertyName , PropertyChangeListener in_pcl ) { beanContextChildSupport . addPropertyChangeListener ( propertyName , in_pcl ) ; }
public void createEntityConfig ( String realm , FederationConfigElement config ) throws WSFederationMetaException { String federationId = config . getFederationID ( ) ; if ( federationId == null ) { debug . error ( _STR + _STR ) ; String [ ] data = { realm } ; LogUtil . error ( Level . INFO , LogUtil . NO_ENTITY_ID_CREATE_ENTITY_CONFIG , data , null ) ; throw new WSFederationMetaException ( _STR , null ) ; } if ( realm == null ) { realm = _STR ; } String [ ] objs = { federationId , realm } ; try { Map attrs = WSFederationMetaUtils . convertJAXBToAttrMap ( ATTR_ENTITY_CONFIG , config ) ; Map oldAttrs = configInst . getConfiguration ( realm , federationId ) ; if ( oldAttrs == null ) { LogUtil . error ( Level . INFO , LogUtil . NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG , objs , null ) ; throw new WSFederationMetaException ( _STR , objs ) ; } Set oldValues = ( Set ) oldAttrs . get ( ATTR_ENTITY_CONFIG ) ; if ( oldValues != null && ! oldValues . isEmpty ( ) ) { LogUtil . error ( Level . INFO , LogUtil . ENTITY_CONFIG_EXISTS , objs , null ) ; throw new WSFederationMetaException ( _STR , objs ) ; } configInst . setConfiguration ( realm , federationId , attrs ) ; LogUtil . access ( Level . INFO , LogUtil . ENTITY_CONFIG_CREATED , objs , null ) ; SPSSOConfigElement spconfig = getSPSSOConfig ( realm , federationId ) ; if ( spconfig != null ) { addToCircleOfTrust ( spconfig , realm , federationId ) ; } IDPSSOConfigElement idpconfig = getIDPSSOConfig ( realm , federationId ) ; if ( idpconfig != null ) { addToCircleOfTrust ( idpconfig , realm , federationId ) ; } } catch ( ConfigurationException e ) { debug . error ( _STR , e ) ; String [ ] data = { e . getMessage ( ) , federationId , realm } ; LogUtil . error ( Level . INFO , LogUtil . CONFIG_ERROR_CREATE_ENTITY_CONFIG , data , null ) ; throw new WSFederationMetaException ( e ) ; } catch ( JAXBException jaxbe ) { debug . error ( _STR , jaxbe ) ; LogUtil . error ( Level . INFO , LogUtil . CREATE_INVALID_ENTITY_CONFIG , objs , null ) ; throw new WSFederationMetaException ( _STR , objs ) ; } }
public boolean isExpired ( ) { return this . ttl < System . currentTimeMillis ( ) ; }
private void loadUserInfoIntoActionBar ( ) { if ( ! TextUtils . isEmpty ( mWithUserImage ) ) { Utils . loadCircularImage ( getActivity ( ) , mWithImageView , mWithUserImage , AvatarBitmapTransformation . AvatarSize . NORMAL ) ; } }
public static Direction directionForArrowKey ( KeyEvent e ) { int index = Math . max ( _NUM , Math . min ( e . getKeyCode ( ) , KeyEvent . VK_DOWN ) - KeyEvent . VK_LEFT ) ; return Direction . values ( ) [ index ] ; }
public TraceGraph ( Collection < Span > spans ) { this . spansByParent = new SpansByParent ( spans ) ; this . spansByTracerId = new SpansByTracerId ( spans ) ; }
public boolean isPersistent ( ) { return m_persist ; }
public static java . util . Date toDate ( String monthStr , String dayStr , String yearStr , String hourStr , String minuteStr , String secondStr ) { int month , day , year , hour , minute , second ; try { month = Integer . parseInt ( monthStr ) ; day = Integer . parseInt ( dayStr ) ; year = Integer . parseInt ( yearStr ) ; hour = Integer . parseInt ( hourStr ) ; minute = Integer . parseInt ( minuteStr ) ; second = Integer . parseInt ( secondStr ) ; } catch ( Exception e ) { return null ; } return toDate ( month , day , year , hour , minute , second ) ; }
protected void handleMesosFailure ( String taskId ) { int attempt = TaskUtils . getAttemptForTaskId ( taskId ) ; BaseContainer container = containersInfo . get ( TaskUtils . getContainerIndexForTaskId ( taskId ) ) ; boolean hasAttemptsLeft = attempt < container . retries ; if ( hasAttemptsLeft ) { LOG . warning ( String . format ( _STR , container . name , attempt + _NUM ) ) ; String newTaskId = TaskUtils . getTaskId ( container . name , attempt + _NUM ) ; scheduleNewTask ( newTaskId ) ; } else { LOG . severe ( _STR + attempt ) ; } }
private void updateLtp ( SingleChannelElement sce ) { IndividualChannelStream ics = sce . ics ; float saved [ ] = sce . saved ; float savedLtp [ ] = sce . coeffs ; final float lwindow [ ] = ics . useKbWindow [ _NUM ] ? ff_aac_kbd_long_1024 : ff_sine_1024 ; final float swindow [ ] = ics . useKbWindow [ _NUM ] ? ff_aac_kbd_short_128 : ff_sine_128 ; if ( ics . windowSequence [ _NUM ] == EIGHT_SHORT_SEQUENCE ) { System . arraycopy ( saved , _NUM , savedLtp , _NUM , _NUM ) ; Arrays . fill ( savedLtp , _NUM , _NUM + _NUM , _NUM ) ; FloatDSP . vectorFmulReverse ( savedLtp , _NUM , ac . bufMdct , _NUM , swindow , _NUM , _NUM ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { savedLtp [ i + _NUM ] = ac . bufMdct [ _NUM - i ] * swindow [ _NUM - i ] ; } } else if ( ics . windowSequence [ _NUM ] == LONG_START_SEQUENCE ) { System . arraycopy ( ac . bufMdct , _NUM , savedLtp , _NUM , _NUM ) ; Arrays . fill ( savedLtp , _NUM , _NUM + _NUM , _NUM ) ; FloatDSP . vectorFmulReverse ( savedLtp , _NUM , ac . bufMdct , _NUM , swindow , _NUM , _NUM ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { savedLtp [ i + _NUM ] = ac . bufMdct [ _NUM - i ] * swindow [ _NUM - i ] ; } } else { FloatDSP . vectorFmulReverse ( savedLtp , _NUM , ac . bufMdct , _NUM , lwindow , _NUM , _NUM ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { savedLtp [ i + _NUM ] = ac . bufMdct [ _NUM - i ] * lwindow [ _NUM - i ] ; } } System . arraycopy ( sce . ltpState , _NUM , sce . ltpState , _NUM , _NUM ) ; System . arraycopy ( sce . ret , _NUM , sce . ltpState , _NUM , _NUM ) ; System . arraycopy ( savedLtp , _NUM , sce . ltpState , _NUM , _NUM ) ; }
public static File findConfigInWorkingDirectory ( ) { for ( final String suffix : SUFFIXES ) { final File configFile = new File ( System . getProperty ( _STR ) , PREFIX + suffix ) ; if ( configFile . isFile ( ) ) { return configFile ; } } return null ; }
@ Override public void drawRangeMarker ( Graphics2D g2 , XYPlot plot , ValueAxis rangeAxis , Marker marker , Rectangle2D dataArea ) { if ( marker instanceof ValueMarker ) { ValueMarker vm = ( ValueMarker ) marker ; double value = vm . getValue ( ) ; Range range = rangeAxis . getRange ( ) ; if ( ! range . contains ( value ) ) { return ; } double v = rangeAxis . valueToJava2D ( value , dataArea , plot . getRangeAxisEdge ( ) ) ; PlotOrientation orientation = plot . getOrientation ( ) ; Line2D line = null ; if ( orientation == PlotOrientation . HORIZONTAL ) { line = new Line2D . Double ( v , dataArea . getMinY ( ) , v , dataArea . getMaxY ( ) ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { line = new Line2D . Double ( dataArea . getMinX ( ) , v , dataArea . getMaxX ( ) , v ) ; } else { throw new IllegalStateException ( _STR ) ; } final Composite originalComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , marker . getAlpha ( ) ) ) ; g2 . setPaint ( marker . getPaint ( ) ) ; g2 . setStroke ( marker . getStroke ( ) ) ; g2 . draw ( line ) ; String label = marker . getLabel ( ) ; RectangleAnchor anchor = marker . getLabelAnchor ( ) ; if ( label != null ) { Font labelFont = marker . getLabelFont ( ) ; g2 . setFont ( labelFont ) ; Point2D coords = calculateRangeMarkerTextAnchorPoint ( g2 , orientation , dataArea , line . getBounds2D ( ) , marker . getLabelOffset ( ) , LengthAdjustmentType . EXPAND , anchor ) ; Rectangle2D r = TextUtils . calcAlignedStringBounds ( label , g2 , ( float ) coords . getX ( ) , ( float ) coords . getY ( ) , marker . getLabelTextAnchor ( ) ) ; g2 . setPaint ( marker . getLabelBackgroundColor ( ) ) ; g2 . fill ( r ) ; g2 . setPaint ( marker . getLabelPaint ( ) ) ; TextUtilities . drawAlignedString ( label , g2 , ( float ) coords . getX ( ) , ( float ) coords . getY ( ) , marker . getLabelTextAnchor ( ) ) ; } g2 . setComposite ( originalComposite ) ; } else if ( marker instanceof IntervalMarker ) { IntervalMarker im = ( IntervalMarker ) marker ; double start = im . getStartValue ( ) ; double end = im . getEndValue ( ) ; Range range = rangeAxis . getRange ( ) ; if ( ! ( range . intersects ( start , end ) ) ) { return ; } double start2d = rangeAxis . valueToJava2D ( start , dataArea , plot . getRangeAxisEdge ( ) ) ; double end2d = rangeAxis . valueToJava2D ( end , dataArea , plot . getRangeAxisEdge ( ) ) ; double low = Math . min ( start2d , end2d ) ; double high = Math . max ( start2d , end2d ) ; PlotOrientation orientation = plot . getOrientation ( ) ; Rectangle2D rect = null ; if ( orientation == PlotOrientation . HORIZONTAL ) { low = Math . max ( low , dataArea . getMinX ( ) ) ; high = Math . min ( high , dataArea . getMaxX ( ) ) ; rect = new Rectangle2D . Double ( low , dataArea . getMinY ( ) , high - low , dataArea . getHeight ( ) ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { low = Math . max ( low , dataArea . getMinY ( ) ) ; high = Math . min ( high , dataArea . getMaxY ( ) ) ; rect = new Rectangle2D . Double ( dataArea . getMinX ( ) , low , dataArea . getWidth ( ) , high - low ) ; } final Composite originalComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , marker . getAlpha ( ) ) ) ; Paint p = marker . getPaint ( ) ; if ( p instanceof GradientPaint ) { GradientPaint gp = ( GradientPaint ) p ; GradientPaintTransformer t = im . getGradientPaintTransformer ( ) ; if ( t != null ) { gp = t . transform ( gp , rect ) ; } g2 . setPaint ( gp ) ; } else { g2 . setPaint ( p ) ; } g2 . fill ( rect ) ; if ( im . getOutlinePaint ( ) != null && im . getOutlineStroke ( ) != null ) { if ( orientation == PlotOrientation . VERTICAL ) { Line2D line = new Line2D . Double ( ) ; double x0 = dataArea . getMinX ( ) ; double x1 = dataArea . getMaxX ( ) ; g2 . setPaint ( im . getOutlinePaint ( ) ) ; g2 . setStroke ( im . getOutlineStroke ( ) ) ; if ( range . contains ( start ) ) { line . setLine ( x0 , start2d , x1 , start2d ) ; g2 . draw ( line ) ; } if ( range . contains ( end ) ) { line . setLine ( x0 , end2d , x1 , end2d ) ; g2 . draw ( line ) ; } } else { Line2D line = new Line2D . Double ( ) ; double y0 = dataArea . getMinY ( ) ; double y1 = dataArea . getMaxY ( ) ; g2 . setPaint ( im . getOutlinePaint ( ) ) ; g2 . setStroke ( im . getOutlineStroke ( ) ) ; if ( range . contains ( start ) ) { line . setLine ( start2d , y0 , start2d , y1 ) ; g2 . draw ( line ) ; } if ( range . contains ( end ) ) { line . setLine ( end2d , y0 , end2d , y1 ) ; g2 . draw ( line ) ; } } } String label = marker . getLabel ( ) ; RectangleAnchor anchor = marker . getLabelAnchor ( ) ; if ( label != null ) { Font labelFont = marker . getLabelFont ( ) ; g2 . setFont ( labelFont ) ; Point2D coords = calculateRangeMarkerTextAnchorPoint ( g2 , orientation , dataArea , rect , marker . getLabelOffset ( ) , marker . getLabelOffsetType ( ) , anchor ) ; Rectangle2D r = TextUtils . calcAlignedStringBounds ( label , g2 , ( float ) coords . getX ( ) , ( float ) coords . getY ( ) , marker . getLabelTextAnchor ( ) ) ; g2 . setPaint ( marker . getLabelBackgroundColor ( ) ) ; g2 . fill ( r ) ; g2 . setPaint ( marker . getLabelPaint ( ) ) ; TextUtilities . drawAlignedString ( label , g2 , ( float ) coords . getX ( ) , ( float ) coords . getY ( ) , marker . getLabelTextAnchor ( ) ) ; } g2 . setComposite ( originalComposite ) ; } }
protected boolean attemptToAddWord ( Word word ) { double additionalLength = word . getWordWidth ( ) ; additionalLength += ! words . isEmpty ( ) ? spaceSize : _NUM ; if ( currentLineLength + additionalLength <= maxLength || maxLength == - _NUM ) { words . add ( word ) ; currentLineLength += additionalLength ; return _BOOL ; } else { return _BOOL ; } }
@ Override public boolean onPreferenceClick ( Preference preference ) { if ( preference == mPlayExample ) { getSampleText ( ) ; return _BOOL ; } return _BOOL ; }
public void readWwwAuthenticateHeader ( String header ) { if ( header != null ) { mIsDigestAuthentication = header . startsWith ( HttpDigestMd5Authentication . HTTP_DIGEST_SCHEMA ) ; if ( ! mIsDigestAuthentication ) { return ; } String value = getValue ( header , _STR ) ; mDigest . setRealm ( value ) ; value = getValue ( header , _STR ) ; mDigest . setOpaque ( value ) ; value = getValue ( header , _STR ) ; mDigest . setQop ( value ) ; value = getValue ( header , _STR ) ; mDigest . setNextnonce ( value ) ; } }
public static String valueOf ( Boolean value ) { return value != null ? String . valueOf ( value ) : null ; }
public void testSendReceive ( ) throws Exception { messages . clear ( ) ; for ( int i = _NUM ; i < data . length ; i ++ ) { Message message = session . createTextMessage ( data [ i ] ) ; message . setStringProperty ( _STR , data [ i ] ) ; message . setIntProperty ( _STR , i ) ; if ( verbose ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( _STR + message + _STR + data [ i ] ) ; } } sendToProducer ( producer , producerDestination , message ) ; messageSent ( ) ; } assertMessagesAreReceived ( ) ; LOG . info ( _STR + data . length + _STR ) ; }
public void addLive ( boolean live ) { query . append ( _STR + live ) ; }
public static String toString ( URI uri , Charset encoding ) throws IOException { return toString ( uri . toURL ( ) , Charsets . toCharset ( encoding ) ) ; }
public boolean exists ( String key ) { return exists ( key , _BOOL ) ; }
public AllocationSite ( int line , int column ) { synchronized ( sites ) { this . id = sites . size ( ) ; sites . add ( this ) ; } this . line = line ; this . column = column ; }
public boolean drawImage ( Image img , AffineTransform xform , ImageObserver obs ) { return mGraphics . drawImage ( img , xform , obs ) ; }
public final static int parseInt ( char [ ] digitChars , int offset , int len ) { int num = digitChars [ offset ] - _STR ; len += offset ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; } } } } } } } } return num ; }
public ActivityMonitorSample ( ) { initComponents ( ) ; ownerARadio . setActionCommand ( _STR ) ; ownerBRadio . setActionCommand ( _STR ) ; ownerCRadio . setActionCommand ( _STR ) ; indicatorA . setActivityOwner ( _STR ) ; indicatorB . setActivityOwner ( _STR ) ; indicatorC . setActivityOwner ( _STR ) ; JActivityWindow . getInstance ( ) ; }
public static LatLon [ ] greatCircleExtremeLocations ( LatLon location , Angle azimuth ) { if ( location == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( azimuth == null ) { throw new IllegalArgumentException ( _STR ) ; } double lat0 = location . getLatitude ( ) . radians ; double az = azimuth . radians ; double tanDistance = - Math . tan ( lat0 ) / Math . cos ( az ) ; double distance = Math . atan ( tanDistance ) ; Angle extremeDistance1 = Angle . fromRadians ( distance + ( Math . PI / _NUM ) ) ; Angle extremeDistance2 = Angle . fromRadians ( distance - ( Math . PI / _NUM ) ) ; return new LatLon [ ] { greatCircleEndPosition ( location , azimuth , extremeDistance1 ) , greatCircleEndPosition ( location , azimuth , extremeDistance2 ) } ; }
private void initCheckbox ( CheckBoxPreference checkbox , boolean checked , boolean enabled ) { checkbox . setChecked ( checked ) ; checkbox . setEnabled ( enabled ) ; }
private void paintCheckIconEnabledAndSelected ( Graphics2D g , int width , int height ) { Shape s = shapeGenerator . createCheckMark ( _NUM , _NUM , width , height ) ; g . setPaint ( iconEnabledSelected ) ; g . fill ( s ) ; }
public static int findURISplitIndex ( String uri ) { int uriLength = uri . length ( ) ; int idx = uriLength - _NUM ; for ( ; idx >= _NUM ; idx -- ) { if ( ! TurtleUtil . isNameChar ( uri . charAt ( idx ) ) ) { break ; } } idx ++ ; for ( ; idx < uriLength ; idx ++ ) { if ( TurtleUtil . isNameStartChar ( uri . charAt ( idx ) ) ) { break ; } } if ( ! TurtleUtil . isNameEndChar ( uri . charAt ( uriLength - _NUM ) ) ) { return - _NUM ; } if ( idx > _NUM && idx < uriLength ) { return idx ; } return - _NUM ; }
private void writeLog ( String cmd ) { try { if ( m_writer == null ) { File file = File . createTempFile ( _STR , _STR ) ; m_writer = new PrintWriter ( new FileWriter ( file ) ) ; log . info ( file . toString ( ) ) ; } m_writer . println ( cmd ) ; m_writer . flush ( ) ; } catch ( Exception e ) { log . severe ( e . toString ( ) ) ; } }
public void reload ( String why ) { mFullPhotoPaths = mRootDir . list ( MediaScanner . JPG_FILENAME_FILTER ) ; if ( ( mFullPhotoPaths != null ) && ( mFullPhotoPaths . length == _NUM ) ) { mFullPhotoPaths = null ; Log . i ( Global . LOG_CONTEXT , mDebugPrefix + why + _STR + mRootDir + _STR + _NUM ) ; } else if ( mFullPhotoPaths != null ) { if ( Global . debugEnabled ) { Log . i ( Global . LOG_CONTEXT , mDebugPrefix + why + _STR + mRootDir + _STR + mFullPhotoPaths . length ) ; } String parentDirString = mRootDir . getAbsolutePath ( ) ; for ( int i = _NUM ; i < mFullPhotoPaths . length ; i ++ ) { mFullPhotoPaths [ i ] = parentDirString + _STR + mFullPhotoPaths [ i ] ; } } }
DNSRecord ( String name , DNSRecordType type , DNSRecordClass recordClass , boolean unique , int ttl ) { super ( name , type , recordClass , unique ) ; this . _ttl = ttl ; this . _created = System . currentTimeMillis ( ) ; }
public static String block ( Stream < String > rows ) { return block ( rows . collect ( joining ( nl ( ) ) ) ) ; }
protected void addContentSpecToElement ( XMLElementDecl elementDecl ) { if ( ( fDepth == _NUM || ( fDepth == _NUM && elementDecl . type == XMLElementDecl . TYPE_MIXED ) ) && fNodeIndexStack != null ) { if ( elementDecl . type == XMLElementDecl . TYPE_MIXED ) { int pcdata = addUniqueLeafNode ( null ) ; if ( fNodeIndexStack [ _NUM ] == - _NUM ) { fNodeIndexStack [ _NUM ] = pcdata ; } else { fNodeIndexStack [ _NUM ] = addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , pcdata , fNodeIndexStack [ _NUM ] ) ; } } setContentSpecIndex ( fCurrentElementIndex , fNodeIndexStack [ fDepth ] ) ; } }
private void growSpine ( ) { spine = new int [ ( spine . length << _NUM ) + _NUM ] ; threshold = ( int ) ( spine . length * loadFactor ) ; Arrays . fill ( spine , - _NUM ) ; for ( int i = _NUM ; i < size ; i ++ ) { insert ( objs [ i ] , i ) ; } }
public void reconnect ( ) { if ( opened && ! allowConnectionRecovery ) { return ; } reconnectwait thread = new reconnectwait ( ) ; thread . start ( ) ; try { thread . join ( ) ; } catch ( InterruptedException e ) { log . error ( _STR + e . getMessage ( ) ) ; } if ( ! opened ) { log . error ( _STR ) ; } else { log . info ( _STR + getCurrentPortName ( ) ) ; resetupConnection ( ) ; } }
public Collection < GridPortRecord > records ( ) { synchronized ( recs ) { return Collections . unmodifiableCollection ( new ArrayList < > ( recs ) ) ; } }
@ Override public String toString ( ) { return buf . toString ( ) ; }
public boolean hasChangeEvent ( String name ) { if ( var != null ) { List < MetaData > mdList = var . getMetaData ( StandardDefs . MD_CHANGEEVENT ) ; if ( mdList != null ) { for ( int i = _NUM , size = mdList . size ( ) ; i < size ; i ++ ) { MetaData md = mdList . get ( i ) ; if ( name . equals ( md . getValue ( _NUM ) ) ) { return _BOOL ; } } } } return _BOOL ; }
protected void resetXML11 ( ) throws XNIException { int count = fXML11Components . size ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { XMLComponent c = ( XMLComponent ) fXML11Components . get ( i ) ; c . reset ( this ) ; } }
public float distanceToOtherCircle ( Circle circle ) { return ( float ) Math . abs ( Math . sqrt ( Math . pow ( circle . center . x - center . x , _NUM ) + Math . pow ( circle . center . y - center . y , _NUM ) ) ) ; }
public SimpleCommand ( String commandName , String ... args ) { this ( commandName , ( Argument ) null ) ; ArrayList < Argument > argList = new ArrayList < Argument > ( ) ; for ( String arg : args ) argList . add ( new Argument ( arg ) ) ; _arguments = argList . toArray ( new Argument [ _NUM ] ) ; }
private void grow ( ) { m_allocatedSize *= _NUM ; boolean newVector [ ] = new boolean [ m_allocatedSize ] ; System . arraycopy ( m_values , _NUM , newVector , _NUM , m_index + _NUM ) ; m_values = newVector ; }
public String convertToLowerCase ( String table ) { return table . toLowerCase ( ) ; }
public PickingGraphMousePlugin ( int selectionModifiers , int addToSelectionModifiers ) { super ( selectionModifiers ) ; this . addToSelectionModifiers = addToSelectionModifiers ; this . lensPaintable = new LensPaintable ( ) ; this . cursor = Cursor . getPredefinedCursor ( Cursor . HAND_CURSOR ) ; }
public int [ ] breadthFirstSearch ( int intialValue , IBFSTraversable < N > traversable , int firstValue , IIntegerBfsNextValueIterator < N > nextValueIterator , List < Integer > sourcesIndex ) { int [ ] results = new int [ nodes . length ] ; Arrays . fill ( results , intialValue ) ; boolean [ ] alreadyScanned = new boolean [ nodes . length ] ; Arrays . fill ( alreadyScanned , _BOOL ) ; Set < Integer > currentNodesIndex = new HashSet < > ( sourcesIndex ) ; iterativeIntegerBreadthFirstSearch ( results , alreadyScanned , currentNodesIndex , firstValue , _NUM , traversable , nextValueIterator ) ; return results ; }
public ViewRefRender ( ViewRender < T > view , Class < T > type , int priority ) { Objects . requireNonNull ( view ) ; _view = view ; _type = type ; _priority = priority ; }
public void checkNumberArgs ( int argNum ) throws WrongNumberArgsException { if ( argNum < _NUM ) reportWrongNumberArgs ( ) ; }
private boolean announce ( String [ ] groups ) { if ( dataPackets == null || ! lastLocator . equals ( myLocator ) || ! Arrays . equals ( lastGroups , groups ) ) { List < DatagramPacket > packets = new ArrayList < DatagramPacket > ( ) ; Discovery disco ; try { disco = getDiscovery ( multicastAnnouncementConstraints . chooseProtocolVersion ( ) ) ; } catch ( DiscoveryProtocolException e ) { throw new AssertionError ( e ) ; } EncodeIterator ei = disco . encodeMulticastAnnouncement ( new MulticastAnnouncement ( announcementSeqNo ++ , myLocator . getHost ( ) , myLocator . getPort ( ) , groups , myServiceID ) , multicastAnnouncementConstraints . getMulticastMaxPacketSize ( DEFAULT_MAX_PACKET_SIZE ) , multicastAnnouncementConstraints . getUnfulfilledConstraints ( ) ) ; while ( ei . hasNext ( ) ) { try { packets . addAll ( Arrays . asList ( ei . next ( ) ) ) ; } catch ( Exception e ) { logger . log ( ( e instanceof UnsupportedConstraintException ) ? Levels . HANDLED : Level . INFO , _STR + _STR , e ) ; } } lastLocator = myLocator ; lastGroups = groups ; dataPackets = packets . toArray ( new DatagramPacket [ packets . size ( ) ] ) ; } try { send ( dataPackets ) ; } catch ( InterruptedIOException e ) { return _BOOL ; } return _BOOL ; }
public DrawingAttributes ( ) { propertyChangeSupport = new PropertyChangeSupport ( this ) ; }
public void close ( ) { scanner . close ( ) ; }
static void createPolicyTree ( String configName , String configId , ServiceConfigManager scm , String org ) throws NoPermissionException , PolicyException , SSOException { try { ServiceConfig pConfig = scm . getOrganizationConfig ( org , null ) ; if ( pConfig == null ) { scm . createOrganizationConfig ( org , null ) ; pConfig = scm . getOrganizationConfig ( org , null ) ; } pConfig . addSubConfig ( configName , configId , _NUM , null ) ; } catch ( ServiceAlreadyExistsException se ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + configName + _STR + configId + _STR + org ) ; } } catch ( SMSException e ) { String [ ] objs = { org } ; if ( e . getExceptionCode ( ) == SMSException . STATUS_NO_PERMISSION ) { throw ( new NoPermissionException ( ResBundleUtils . rbName , _STR , null ) ) ; } else { throw ( new PolicyException ( ResBundleUtils . rbName , _STR , objs , e ) ) ; } } }
private void rollbackMethodForCreateSnapshot ( boolean isSnapshotCreated , boolean isDummyLunPathAdded , HDSApiClient hdsApiClient , StorageSystem storage , URI snapshot ) throws Exception { if ( isDummyLunPathAdded ) { log . info ( _STR ) ; hdsProtectionOperations . removeDummyLunPath ( storage , snapshot ) ; } if ( isSnapshotCreated ) { log . info ( _STR ) ; BlockSnapshot snapshotObj = dbClient . queryObject ( BlockSnapshot . class , snapshot ) ; String systemObjectID = HDSUtils . getSystemObjectID ( storage ) ; String logicalUnitObjId = HDSUtils . getLogicalUnitObjectId ( snapshotObj . getNativeId ( ) , storage ) ; hdsApiClient . deleteSnapshotVolume ( systemObjectID , logicalUnitObjId , storage . getModel ( ) ) ; } }
public static int convertStringToTimeSeconds ( String time ) { int result = _NUM ; if ( time . endsWith ( _STR ) ) { int hoursToAdd = Integer . valueOf ( StringUtils . remove ( time , _STR ) ) ; result = ( _NUM * _NUM ) * hoursToAdd ; } else if ( time . endsWith ( _STR ) ) { int minsToAdd = Integer . valueOf ( StringUtils . remove ( time , _STR ) ) ; result = _NUM * minsToAdd ; } else if ( time . endsWith ( _STR ) ) { int secsToAdd = Integer . valueOf ( StringUtils . remove ( time , _STR ) ) ; result = secsToAdd ; } return result ; }
public void detach ( AppCompatActivity activity ) { attrViewMaps . remove ( activity . hashCode ( ) ) ; }
public void readPrefs ( SharedPreferences settings , ActionFactory factory ) { boolean visible = _BOOL ; String actionId = settings . getString ( _STR + name + _STR , _STR ) ; mainAction = factory . getAction ( actionId ) ; if ( mainAction != null ) visible = _BOOL ; menuActions . clear ( ) ; for ( int i = _NUM ; i < maxMenuActions ; i ++ ) { actionId = settings . getString ( _STR + name + _STR + ( i + _NUM ) , _STR ) ; UIAction a = factory . getAction ( actionId ) ; if ( a != null ) visible = _BOOL ; menuActions . add ( a ) ; } if ( button != null ) button . setVisibility ( visible ? View . VISIBLE : View . GONE ) ; }
public boolean addToActiveList ( DownloadInfoRunnable downloadInfoRunnable ) { return activeListHasRoom ( ) && mActiveList . add ( downloadInfoRunnable ) ; }
private void addExprToTLA ( TLAExpr expr ) { Vector sv = expr . toStringVector ( ) ; Vector exprMapping = expr . toMappingVector ( ) ; int indent = tlacodeNextLine . length ( ) ; int nextLine = _NUM ; if ( indent != _NUM ) { MappingObject . shiftMappingVector ( exprMapping , indent ) ; tlacodeNextLine = tlacodeNextLine + ( ( String ) sv . elementAt ( _NUM ) ) ; mappingVectorNextLine . addAll ( ( Vector ) exprMapping . elementAt ( _NUM ) ) ; nextLine = _NUM ; if ( sv . size ( ) > _NUM ) { endCurrentLineOfTLA ( ) ; } } if ( sv . size ( ) > _NUM ) { String spaces = NSpaces ( indent ) ; while ( nextLine < sv . size ( ) - _NUM ) { tlacode . addElement ( spaces + ( ( String ) sv . elementAt ( nextLine ) ) ) ; mappingVector . addElement ( ( Vector ) exprMapping . elementAt ( nextLine ) ) ; nextLine ++ ; } tlacodeNextLine = spaces + ( ( String ) sv . elementAt ( nextLine ) ) ; mappingVectorNextLine = ( Vector ) exprMapping . elementAt ( nextLine ) ; } else if ( indent == _NUM ) { tlacodeNextLine = tlacodeNextLine + ( ( String ) sv . elementAt ( _NUM ) ) ; mappingVectorNextLine . addAll ( ( Vector ) exprMapping . elementAt ( _NUM ) ) ; } }
private boolean isUpperCaseCamelCaseHunk ( String hunk ) { if ( hunk . length ( ) < _NUM ) return _BOOL ; for ( int i = _NUM ; i < hunk . length ( ) ; i ++ ) { if ( ! isLegalChar ( hunk . charAt ( i ) ) ) return _BOOL ; } return _BOOL ; }
void addFillComponents ( Container panel , int [ ] cols , int [ ] rows ) { Dimension filler = new Dimension ( _NUM , _NUM ) ; boolean filled_cell_11 = _BOOL ; CellConstraints cc = new CellConstraints ( ) ; if ( cols . length > _NUM && rows . length > _NUM ) { if ( cols [ _NUM ] == _NUM && rows [ _NUM ] == _NUM ) { panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , _NUM ) ) ; filled_cell_11 = _BOOL ; } } for ( int index = _NUM ; index < cols . length ; index ++ ) { if ( cols [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( cols [ index ] , _NUM ) ) ; } for ( int index = _NUM ; index < rows . length ; index ++ ) { if ( rows [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , rows [ index ] ) ) ; } }
public void type ( String string ) { for ( int i = _NUM ; i < string . length ( ) ; i ++ ) { char c = string . charAt ( i ) ; type ( c ) ; } }
public boolean providesIdentifier ( ) { return _BOOL ; }
static void removeRedundantAffix ( TranslatorUtils . IContain iContain , List < String > strList ) { if ( strList . size ( ) <= _NUM ) { return ; } int w = _NUM ; for ( String str : strList ) { if ( w == _NUM || ! iContain . containFunc ( str , strList . get ( w - _NUM ) ) ) { strList . set ( w , str ) ; w ++ ; } } strList = strList . subList ( _NUM , w ) ; }
public static int nextInt ( int n ) { Random random = getRandom ( ) ; int value = random . nextInt ( n ) ; if ( ! _isTest ) _freeRandomList . free ( random ) ; return value ; }
protected void doResumeUpdates ( ) { Calendar cal = Calendar . getInstance ( Locale . getDefault ( ) ) ; mFirstDayOfWeek = cal . getFirstDayOfWeek ( ) - _NUM ; mShowWeekNumber = _BOOL ; updateHeader ( ) ; goTo ( mSelectedDay . toMillis ( _BOOL ) , _BOOL , _BOOL , _BOOL ) ; mAdapter . setSelectedDay ( mSelectedDay ) ; mTodayUpdater . run ( ) ; }
private void storeLastUsed ( ) { put ( LAST_USE , ( int ) ( System . currentTimeMillis ( ) / _NUM ) ) ; }
private boolean canContain ( ElementContainmentInfo child , ElementContainmentInfo top , int topIndex ) { int childTypes = child . types ; int contents = top . contents ; int transparencyAllowed = childTypes & ( top . transparentToContents & ~ contents ) ; for ( int containerIndex = topIndex - _NUM ; transparencyAllowed != _NUM ; -- containerIndex ) { if ( containerIndex < _NUM ) { contents |= transparencyAllowed ; break ; } ElementContainmentInfo container = openElements . get ( containerIndex ) ; contents |= transparencyAllowed & container . contents ; transparencyAllowed = transparencyAllowed & container . transparentToContents & ~ contents ; } return ( contents & childTypes ) != _NUM ; }
public static int [ ] extractArcs ( ASN1ObjectIdentifier oid ) throws InvalidObjectIdException { String oidStr = oid . getId ( ) ; StringTokenizer strTokCnt = new StringTokenizer ( oidStr , _STR , _BOOL ) ; int arcCount = strTokCnt . countTokens ( ) ; StringTokenizer strTok = new StringTokenizer ( oidStr , _STR , _BOOL ) ; boolean expectDelimiter = _BOOL ; int [ ] arcs = new int [ arcCount ] ; int i = _NUM ; while ( strTok . hasMoreTokens ( ) ) { String token = strTok . nextToken ( ) ; if ( expectDelimiter && ( ! token . equals ( _STR ) || ! strTok . hasMoreTokens ( ) ) ) { throw new InvalidObjectIdException ( res . getString ( _STR ) ) ; } else if ( ! expectDelimiter ) { try { arcs [ i ] = Integer . parseInt ( token ) ; if ( arcs [ i ] < _NUM ) { throw new InvalidObjectIdException ( res . getString ( _STR ) ) ; } i ++ ; } catch ( NumberFormatException ex ) { throw new InvalidObjectIdException ( res . getString ( _STR ) ) ; } } expectDelimiter = ! expectDelimiter ; } return arcs ; }
public void testIsDuplicateString ( ) { int count = _NUM ; ActiveMQMessageAudit audit = new ActiveMQMessageAudit ( ) ; IdGenerator idGen = new IdGenerator ( ) ; List < String > list = new ArrayList < > ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { String id = idGen . generateId ( ) ; list . add ( id ) ; assertFalse ( audit . isDuplicate ( id ) ) ; } List < String > windowList = list . subList ( list . size ( ) - _NUM - audit . getAuditDepth ( ) , list . size ( ) - _NUM ) ; for ( String id : windowList ) { assertTrue ( _STR + id , audit . isDuplicate ( id ) ) ; } }
protected void updateStatsForConditionalDensityEstimator ( ConditionalDensityEstimator classifier , Instance classMissing , double classValue ) throws Exception { if ( m_PriorEstimator == null ) { setNumericPriorsFromBuffer ( ) ; } m_SumSchemeEntropy -= classifier . logDensity ( classMissing , classValue ) * classMissing . weight ( ) / Utils . log2 ; m_SumPriorEntropy -= m_PriorEstimator . logDensity ( classValue ) * classMissing . weight ( ) / Utils . log2 ; }
@ Override public boolean accept ( File f ) { if ( f != null ) { if ( f . isDirectory ( ) ) { return _BOOL ; } String extension = getExtension ( f ) ; if ( extension != null && filters . get ( getExtension ( f ) ) != null ) { return _BOOL ; } ; } return _BOOL ; }
public void testCase3 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte rBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = - _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . add ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
@ Override public PollResult startPoll ( PollController conn ) { if ( ! _lifecycle . isActive ( ) ) { log . warning ( this + _STR ) ; return PollResult . CLOSED ; } SocketBar socket = conn . getSocket ( ) ; if ( socket == null ) { log . warning ( this + _STR + conn ) ; return PollResult . CLOSED ; } SelectableChannel selChannel = socket . selectableChannel ( ) ; if ( selChannel == null ) { log . warning ( this + _STR + socket ) ; return PollResult . CLOSED ; } _connectionCount . incrementAndGet ( ) ; _activeCount . incrementAndGet ( ) ; _registerQueue . offer ( conn ) ; return PollResult . START ; }
@ Override public void incrementAccessCount ( ) { accessCount . incrementAndGet ( ) ; }
public ClusterPolicy createClusterPolicy ( String clusterMemberName ) throws CreateException { long time1 = System . currentTimeMillis ( ) ; if ( _clusterPolicies == null ) { _clusterMemberNames = getClusterMemberNames ( ) ; if ( _clusterMemberNames != null && _clusterMemberNames . length > _NUM ) { _clusterPolicies = new HashMap < String , ClusterPolicy > ( ) ; ClusterPolicy [ ] tempPolicy = new ClusterPolicy [ _clusterMemberNames . length ] ; for ( int i = _NUM ; i < _clusterMemberNames . length ; i ++ ) tempPolicy [ i ] = createClusterPolicyInternal ( _clusterMemberNames [ i ] ) ; ArrayList < ReplicationPolicy > selectedReplPolicies = new ArrayList < ReplicationPolicy > ( _clusterMemberNames . length ) ; List < String > selectedReplGroupNames = new ArrayList < String > ( _clusterMemberNames . length ) ; for ( int i = _NUM ; i < tempPolicy . length ; i ++ ) if ( tempPolicy [ i ] . m_ReplicationPolicy != null && ! selectedReplGroupNames . contains ( tempPolicy [ i ] . m_ReplicationPolicy . m_ReplicationGroupName ) ) { selectedReplPolicies . add ( tempPolicy [ i ] . m_ReplicationPolicy ) ; selectedReplGroupNames . add ( tempPolicy [ i ] . m_ReplicationPolicy . m_ReplicationGroupName ) ; } if ( selectedReplPolicies . isEmpty ( ) ) selectedReplPolicies = null ; else selectedReplPolicies . trimToSize ( ) ; for ( int i = _NUM ; i < _clusterMemberNames . length ; i ++ ) { tempPolicy [ i ] . m_ReplicationGroups = selectedReplPolicies ; _clusterPolicies . put ( _clusterMemberNames [ i ] , tempPolicy [ i ] ) ; } } } ClusterPolicy result = _clusterPolicies . get ( clusterMemberName ) ; if ( result == null ) result = createClusterPolicyInternal ( clusterMemberName ) ; long time2 = System . currentTimeMillis ( ) ; if ( _logger . isLoggable ( Level . FINE ) ) { _logger . fine ( _STR + clusterMemberName + _STR + ( time2 - time1 ) + _STR ) ; } return result ; }
public static boolean compareDoubles ( double a , double b ) { if ( Double . isNaN ( a ) && Double . isNaN ( b ) ) return _BOOL ; if ( ! Double . isInfinite ( a ) && ! Double . isInfinite ( b ) ) return Math . abs ( a - b ) <= EPSILON ; return a == b ; }
public static byte [ ] bitmapToByte ( Bitmap b ) { ByteArrayOutputStream o = new ByteArrayOutputStream ( ) ; b . compress ( Bitmap . CompressFormat . PNG , _NUM , o ) ; return o . toByteArray ( ) ; }
public ConfigureCoerceiveParsingDialog_NB ( CoerciveParsing coerciveParsing ) { this . coerciveParsing = coerciveParsing ; initComponents ( ) ; final IterateModel numberOfTagsIterator = coerciveParsing . getNumberOfTagsIterator ( ) ; configureIterateModel_NB2 . setStartAt ( String . valueOf ( numberOfTagsIterator . getStartAt ( ) ) ) ; configureIterateModel_NB2 . setStopAt ( String . valueOf ( numberOfTagsIterator . getStopAt ( ) ) ) ; configureIterateModel_NB2 . setIncrement ( String . valueOf ( numberOfTagsIterator . getIncrement ( ) ) ) ; configureIterateModel_NB2 . setIterateStrategie ( numberOfTagsIterator . getIterateStrategie ( ) ) ; List < String > tagNames = Arrays . asList ( coerciveParsing . getTagNames ( ) ) ; configureStringList_NB1 . setStringList ( tagNames ) ; }
public static double logOfBase ( double number , int base ) { return Math . log ( number ) / Math . log ( base ) ; }
public Entry editEntry ( User user , String id , String note , String quotation , boolean isPublic , Long modTime , boolean isAdmin , Errors errors ) { if ( modTime == null ) { Errors . add ( errors , errorMessages . errorModTimeIsNull ( ) ) ; return null ; } if ( user == null ) { Errors . add ( errors , errorMessages . errorUserIsNull ( ) ) ; return null ; } if ( id != null && ! idGenerator . isIdWellFormed ( id ) ) { Errors . add ( errors , errorMessages . errorIdIsInvalid ( ) ) ; return null ; } final Entry entry = getEntryById ( id ) ; if ( entry == null ) { Errors . add ( errors , errorMessages . errorTheEntryCouldNotBeFound ( ) ) ; return null ; } if ( ! canUserModifyEntry ( user , entry , isAdmin ) ) { Errors . add ( errors , errorMessages . errorTheUserIsNotEntitledToModifyTheEntry ( ) ) ; return null ; } if ( note != null ) { note = cleanUpText ( note ) ; } if ( entry . isNotebook ( ) ) { entry . setNotebookTitle ( note ) ; } else if ( entry . isSource ( ) ) { entry . setSourceTitle ( note ) ; } else { entry . setNote ( note ) ; } entry . setModTime ( modTime ) ; entry . setIsPublic ( isPublic ) ; if ( entry . getCreateTime ( ) > modTime . longValue ( ) ) { modTime = entry . getCreateTime ( ) ; } if ( entry . isQuotation ( ) ) { if ( quotation != null ) { quotation = cleanUpText ( quotation ) ; entry . setQuotation ( quotation ) ; } } return entry ; }
public static void UF6 ( double [ ] x , double [ ] f , int nx ) { int count1 = _NUM ; int count2 = _NUM ; double sum1 = _NUM ; double sum2 = _NUM ; double prod1 = _NUM ; double prod2 = _NUM ; double yj ; double hj ; double pj ; double N = _NUM ; double E = _NUM ; for ( int j = _NUM ; j <= nx ; j ++ ) { yj = x [ j - _NUM ] - Math . sin ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; pj = Math . cos ( _NUM * yj * PI / Math . sqrt ( j + _NUM ) ) ; if ( j % _NUM == _NUM ) { sum2 += yj * yj ; prod2 *= pj ; count2 ++ ; } else { sum1 += yj * yj ; prod1 *= pj ; count1 ++ ; } } hj = _NUM * ( _NUM / N + E ) * Math . sin ( _NUM * N * PI * x [ _NUM ] ) ; if ( hj < _NUM ) { hj = _NUM ; } f [ _NUM ] = x [ _NUM ] + hj + _NUM * ( _NUM * sum1 - _NUM * prod1 + _NUM ) / ( double ) count1 ; f [ _NUM ] = _NUM - x [ _NUM ] + hj + _NUM * ( _NUM * sum2 - _NUM * prod2 + _NUM ) / ( double ) count2 ; }
public FileSaverDescriptor ( @ NotNull String title , @ NotNull String description , String ... extensions ) { super ( _BOOL , _BOOL , _BOOL , _BOOL , _BOOL , _BOOL ) ; setTitle ( title ) ; setDescription ( description ) ; this . extensions = Arrays . asList ( extensions ) ; }
protected int readBlock ( ) { blockSize = read ( ) ; int n = _NUM ; if ( blockSize > _NUM ) { try { int count ; while ( n < blockSize ) { count = blockSize - n ; rawData . get ( block , n , count ) ; n += count ; } } catch ( final Exception e ) { Log . w ( TAG , _STR , e ) ; status = STATUS_FORMAT_ERROR ; } } return n ; }
public void addRun ( final Run run ) { runs . add ( run ) ; run . setId ( runIdCounter ++ ) ; }
void copyInto ( Converter [ ] converters ) { System . arraycopy ( iConverters , _NUM , converters , _NUM , iConverters . length ) ; }
@ Override public boolean addOutputSensor ( String sensorName , int state ) { OutputSensor outputSensor = new OutputSensor ( sensorName ) ; if ( ! outputSensor . setState ( state ) ) { return _BOOL ; } _outputSensorList . add ( outputSensor ) ; return _BOOL ; }
public void init ( SocketChannel channel ) { _channel = channel ; _readBuffer . clear ( ) ; _readBuffer . flip ( ) ; _needsFlush = _BOOL ; }
public void reset ( ) { Timber . i ( _STR ) ; mCurrentPlayer . reset ( ) ; mNextPlayer . reset ( ) ; mQueue = Collections . emptyList ( ) ; mQueueIndex = _NUM ; mRequestedSeekPosition = _NUM ; mPlayWhenPrepared = _BOOL ; }
@ Override public Expected < T > ifPresent ( final Consumer < ? super T > consumer ) { if ( this . value != null ) consumer . accept ( this . value ) ; return this ; }
protected void sendIntensity ( double intensity ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + intensity + _STR + _STR + lastOutputStep + _STR + maxDimStep ) ; } int newStep = ( int ) Math . round ( intensity * maxDimStep ) ; if ( ( newStep < _NUM ) || ( newStep > maxDimStep ) ) { log . error ( _STR + newStep + _STR + intensity ) ; } if ( newStep == _NUM ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + intensity + _STR ) ; } return ; } X10Sequence out = new X10Sequence ( ) ; out . addExtData ( housecode , devicecode , X10Sequence . EXTCMD_DIM , newStep ) ; tc . sendX10Sequence ( out , null ) ; lastOutputStep = newStep ; if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + intensity + _STR + X10Sequence . houseValueToText ( housecode ) + _STR + devicecode + _STR + newStep ) ; } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public static float readFloat ( ) { return scanner . nextFloat ( ) ; }
public GlowScheduler ( GlowServer server , WorldScheduler worlds ) { this . server = server ; this . worlds = worlds ; inTickTaskCondition = worlds . getAdvanceCondition ( ) ; tickEndRun = null ; primaryThread = Thread . currentThread ( ) ; }
public void test_fill$IIII ( ) { int val = Integer . MAX_VALUE ; int d [ ] = new int [ _NUM ] ; Arrays . fill ( d , _NUM , d . length , val ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) assertTrue ( _STR , ! ( d [ i ] == val ) ) ; for ( int i = _NUM ; i < d . length ; i ++ ) assertTrue ( _STR , d [ i ] == val ) ; try { Arrays . fill ( d , _NUM , _NUM , val ) ; fail ( _STR ) ; } catch ( IllegalArgumentException e ) { } try { Arrays . fill ( d , - _NUM , _NUM , val ) ; fail ( _STR ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } try { Arrays . fill ( d , _NUM , d . length + _NUM , val ) ; fail ( _STR ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } }
private int calculateLayoutWidth ( int widthSize , int mode ) { initResourcesIfNecessary ( ) ; itemsLayout . setLayoutParams ( new LayoutParams ( LayoutParams . WRAP_CONTENT , LayoutParams . WRAP_CONTENT ) ) ; itemsLayout . measure ( MeasureSpec . makeMeasureSpec ( widthSize , MeasureSpec . UNSPECIFIED ) , MeasureSpec . makeMeasureSpec ( _NUM , MeasureSpec . UNSPECIFIED ) ) ; int width = itemsLayout . getMeasuredWidth ( ) ; if ( mode == MeasureSpec . EXACTLY ) { width = widthSize ; } else { width += _NUM * PADDING ; width = Math . max ( width , getSuggestedMinimumWidth ( ) ) ; if ( mode == MeasureSpec . AT_MOST && widthSize < width ) { width = widthSize ; } } itemsLayout . measure ( MeasureSpec . makeMeasureSpec ( width - _NUM * PADDING , MeasureSpec . EXACTLY ) , MeasureSpec . makeMeasureSpec ( _NUM , MeasureSpec . UNSPECIFIED ) ) ; return width ; }
public void delete ( ) throws IOException { close ( ) ; Utils . deleteContents ( directory ) ; }
@ Override public boolean execute ( @ NotNull PsiElement pe , @ NotNull ResolveState state ) { if ( pe instanceof PsiVariable ) { final PsiVariable pvar = ( PsiVariable ) pe ; if ( ! myStaticSensitiveFlag || ! myStaticScopeFlag || pvar . hasModifierProperty ( PsiModifier . STATIC ) ) { if ( check ( pvar , state ) ) { myResultList . add ( pvar ) ; } } } return _BOOL ; }
public void characters ( char [ ] ch , int start , int length ) throws SAXException { try { stopTerminator ( ) ; if ( w == null ) return ; int end = start + length ; for ( int i = start ; i < end ; i ++ ) { char c = ch [ i ] ; switch ( c ) { case _STR : w . write ( _STR ) ; break ; case _STR : w . write ( _STR ) ; break ; case _STR : w . write ( _STR ) ; break ; case _STR : case _STR : case _STR : w . write ( c ) ; break ; default : if ( canEncode ( c ) ) { w . write ( c ) ; } else { w . write ( _STR ) ; w . write ( Integer . toString ( c ) ) ; w . write ( _STR ) ; } break ; } } } catch ( IOException e ) { throw new SAXException ( e ) ; } }
public static String toHumanReadableString ( final String iso8601Duration ) { String str = _STR ; if ( iso8601Duration . matches ( _STR ) ) { str = _STR ; } else { String hours = getHours ( iso8601Duration ) , minutes = getMinutes ( iso8601Duration ) , seconds = getSeconds ( iso8601Duration ) ; if ( hours != null ) { str = hours ; if ( minutes != null && minutes . length ( ) == _NUM ) { minutes = _STR + minutes ; } } if ( str . isEmpty ( ) ) str = minutes ; else str += _STR + minutes ; if ( str . isEmpty ( ) ) str = seconds ; else str += _STR + seconds ; } return str ; }
@ Override public IChatMessage sendMessage ( final String text ) throws RemoteException { if ( TextUtils . isEmpty ( text ) ) { throw new ServerApiIllegalArgumentException ( _STR ) ; } int messageLength = text . length ( ) ; int maxMessageLength = mRcsSettings . getMaxGroupChatMessageLength ( ) ; if ( messageLength > maxMessageLength ) { throw new ServerApiIllegalArgumentException ( _STR + messageLength + _STR + maxMessageLength + _STR ) ; } if ( ! isAllowedToSendMessage ( ) ) { throw new ServerApiPermissionDeniedException ( _STR ) ; } try { mImService . removeGroupChatComposingStatus ( mChatId ) ; long timestamp = System . currentTimeMillis ( ) ; final ChatMessage msg = ChatUtils . createTextMessage ( null , text , timestamp , timestamp ) ; ChatMessagePersistedStorageAccessor persistedStorage = new ChatMessagePersistedStorageAccessor ( mMessagingLog , msg . getMessageId ( ) , msg . getRemoteContact ( ) , text , msg . getMimeType ( ) , mChatId , Direction . OUTGOING ) ; addOutgoingGroupChatMessage ( msg , Content . Status . QUEUED , Content . ReasonCode . UNSPECIFIED ) ; if ( ! mChatService . isGroupChatActive ( mChatId ) ) { mChatService . setGroupChatStateAndReasonCode ( mChatId , GroupChat . State . STARTED , GroupChat . ReasonCode . UNSPECIFIED ) ; } mImService . tryToDequeueGroupChatMessagesAndGroupFileTransfers ( mChatId ) ; return new ChatMessageImpl ( persistedStorage ) ; } catch ( ServerApiBaseException e ) { if ( ! e . shouldNotBeLogged ( ) ) { sLogger . error ( ExceptionUtil . getFullStackTrace ( e ) ) ; } throw e ; } catch ( Exception e ) { sLogger . error ( ExceptionUtil . getFullStackTrace ( e ) ) ; throw new ServerApiGenericException ( e ) ; } }
public java . lang . String toString ( ) { return toString ( value ) ; }
void remove ( TcpServerThread t ) { running . remove ( t ) ; }
public DockNodeEventHandler ( Node node ) { this . node = node ; }
private int readSourceToLog ( Settings settings ) { String sourceToLog = settings . get ( INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG , _STR ) ; try { return Integer . parseInt ( sourceToLog , _NUM ) ; } catch ( NumberFormatException e ) { return Booleans . parseBoolean ( sourceToLog , _BOOL ) ? Integer . MAX_VALUE : _NUM ; } }
private void deleteCurrentLicenseFileOnDisk ( ) { File licenseFile = new File ( LicenseConstants . LICENSE_FILE_PATH ) ; if ( licenseFile . exists ( ) ) { licenseFile . delete ( ) ; } }
@ Deprecated public static NetworkParameters testNet ( ) { return TestNet3Params . get ( ) ; }
@ Override public void run ( ) { synchronized ( mSync ) { mRequestStop = _BOOL ; mRequestDrain = _NUM ; mSync . notify ( ) ; } final boolean isRunning = _BOOL ; boolean localRequestStop ; boolean localRequestDrain ; while ( isRunning ) { synchronized ( mSync ) { localRequestStop = mRequestStop ; localRequestDrain = ( mRequestDrain > _NUM ) ; if ( localRequestDrain ) mRequestDrain -- ; } if ( localRequestStop ) { drain ( ) ; signalEndOfInputStream ( ) ; drain ( ) ; release ( ) ; break ; } if ( localRequestDrain ) { drain ( ) ; } else { synchronized ( mSync ) { try { mSync . wait ( ) ; } catch ( final InterruptedException e ) { break ; } } } } if ( DEBUG ) Log . d ( TAG , _STR ) ; synchronized ( mSync ) { mRequestStop = _BOOL ; mIsCapturing = _BOOL ; } }
public final void readFromStream ( DataInputStream dis , int version ) throws IOException , ChessParseError { event = dis . readUTF ( ) ; site = dis . readUTF ( ) ; date = dis . readUTF ( ) ; round = dis . readUTF ( ) ; white = dis . readUTF ( ) ; black = dis . readUTF ( ) ; startPos = TextIO . readFEN ( dis . readUTF ( ) ) ; currentPos = new Position ( startPos ) ; timeControl = dis . readUTF ( ) ; if ( version >= _NUM ) { whiteTimeControl = dis . readUTF ( ) ; blackTimeControl = dis . readUTF ( ) ; } else { whiteTimeControl = _STR ; blackTimeControl = _STR ; } int nTags = dis . readInt ( ) ; tagPairs . clear ( ) ; for ( int i = _NUM ; i < nTags ; i ++ ) { TagPair tp = new TagPair ( ) ; tp . tagName = dis . readUTF ( ) ; tp . tagValue = dis . readUTF ( ) ; tagPairs . add ( tp ) ; } rootNode = new Node ( ) ; Node . readFromStream ( dis , rootNode ) ; currentNode = rootNode ; int pathLen = dis . readInt ( ) ; for ( int i = _NUM ; i < pathLen ; i ++ ) goForward ( dis . readInt ( ) ) ; updateListener ( ) ; }
public Rect updateFastScrollerBounds ( BaseRecyclerView rv , int lastTouchY ) { mInvalidateRect . set ( mBgBounds ) ; if ( isVisible ( ) ) { int edgePadding = rv . getMaxScrollbarWidth ( ) ; int bgPadding = ( mBgOriginalSize - mTextBounds . height ( ) ) / _NUM ; int bgHeight = mBgOriginalSize ; int bgWidth = Math . max ( mBgOriginalSize , mTextBounds . width ( ) + ( _NUM * bgPadding ) ) ; if ( Utilities . isRtl ( mRes ) ) { mBgBounds . left = rv . getBackgroundPadding ( ) . left + ( _NUM * rv . getMaxScrollbarWidth ( ) ) ; mBgBounds . right = mBgBounds . left + bgWidth ; } else { mBgBounds . right = rv . getWidth ( ) - rv . getBackgroundPadding ( ) . right - ( _NUM * rv . getMaxScrollbarWidth ( ) ) ; mBgBounds . left = mBgBounds . right - bgWidth ; } mBgBounds . top = lastTouchY - ( int ) ( FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight ) ; mBgBounds . top = Math . max ( edgePadding , Math . min ( mBgBounds . top , rv . getHeight ( ) - edgePadding - bgHeight ) ) ; mBgBounds . bottom = mBgBounds . top + bgHeight ; } else { mBgBounds . setEmpty ( ) ; } mInvalidateRect . union ( mBgBounds ) ; return mInvalidateRect ; }
public DNetscapeCaPolicyUrl ( JDialog parent ) { super ( parent ) ; setTitle ( res . getString ( _STR ) ) ; initComponents ( ) ; }
public boolean textboxKeyTyped ( char p_146201_1_ , int p_146201_2_ ) { if ( ! isFocused ) return _BOOL ; else if ( GuiScreen . func_175278_g ( p_146201_2_ ) ) { setCursorPositionEnd ( ) ; setSelectionPos ( _NUM ) ; return _BOOL ; } else if ( GuiScreen . func_175280_f ( p_146201_2_ ) ) { GuiScreen . setClipboardString ( getSelectedText ( ) ) ; return _BOOL ; } else if ( GuiScreen . func_175279_e ( p_146201_2_ ) ) { if ( isEnabled ) writeText ( GuiScreen . getClipboardString ( ) ) ; return _BOOL ; } else if ( GuiScreen . func_175277_d ( p_146201_2_ ) ) { GuiScreen . setClipboardString ( getSelectedText ( ) ) ; if ( isEnabled ) writeText ( _STR ) ; return _BOOL ; } else switch ( p_146201_2_ ) { case _NUM : if ( GuiScreen . isCtrlKeyDown ( ) ) { if ( isEnabled ) deleteWords ( - _NUM ) ; } else if ( isEnabled ) deleteFromCursor ( - _NUM ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) setSelectionPos ( _NUM ) ; else setCursorPositionZero ( ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) { if ( GuiScreen . isCtrlKeyDown ( ) ) setSelectionPos ( getNthWordFromPos ( - _NUM , getSelectionEnd ( ) ) ) ; else setSelectionPos ( getSelectionEnd ( ) - _NUM ) ; } else if ( GuiScreen . isCtrlKeyDown ( ) ) setCursorPosition ( getNthWordFromCursor ( - _NUM ) ) ; else moveCursorBy ( - _NUM ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) { if ( GuiScreen . isCtrlKeyDown ( ) ) setSelectionPos ( getNthWordFromPos ( _NUM , getSelectionEnd ( ) ) ) ; else setSelectionPos ( getSelectionEnd ( ) + _NUM ) ; } else if ( GuiScreen . isCtrlKeyDown ( ) ) setCursorPosition ( getNthWordFromCursor ( _NUM ) ) ; else moveCursorBy ( _NUM ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) setSelectionPos ( text . length ( ) ) ; else setCursorPositionEnd ( ) ; return _BOOL ; case _NUM : if ( GuiScreen . isCtrlKeyDown ( ) ) { if ( isEnabled ) deleteWords ( _NUM ) ; } else if ( isEnabled ) deleteFromCursor ( _NUM ) ; return _BOOL ; default : if ( EmailAllowedCharacters . isAllowedCharacter ( p_146201_1_ ) ) { if ( isEnabled ) writeText ( Character . toString ( p_146201_1_ ) ) ; return _BOOL ; } else return _BOOL ; } }
protected int match_bitap ( String text , String pattern , int loc ) { assert ( Match_MaxBits == _NUM || pattern . length ( ) <= Match_MaxBits ) : _STR ; Map < Character , Integer > s = match_alphabet ( pattern ) ; double score_threshold = Match_Threshold ; int best_loc = text . indexOf ( pattern , loc ) ; if ( best_loc != - _NUM ) { score_threshold = Math . min ( match_bitapScore ( _NUM , best_loc , loc , pattern ) , score_threshold ) ; best_loc = text . lastIndexOf ( pattern , loc + pattern . length ( ) ) ; if ( best_loc != - _NUM ) { score_threshold = Math . min ( match_bitapScore ( _NUM , best_loc , loc , pattern ) , score_threshold ) ; } } int matchmask = _NUM << ( pattern . length ( ) - _NUM ) ; best_loc = - _NUM ; int bin_min , bin_mid ; int bin_max = pattern . length ( ) + text . length ( ) ; int [ ] last_rd = new int [ _NUM ] ; for ( int d = _NUM ; d < pattern . length ( ) ; d ++ ) { bin_min = _NUM ; bin_mid = bin_max ; while ( bin_min < bin_mid ) { if ( match_bitapScore ( d , loc + bin_mid , loc , pattern ) <= score_threshold ) { bin_min = bin_mid ; } else { bin_max = bin_mid ; } bin_mid = ( bin_max - bin_min ) / _NUM + bin_min ; } bin_max = bin_mid ; int start = Math . max ( _NUM , loc - bin_mid + _NUM ) ; int finish = Math . min ( loc + bin_mid , text . length ( ) ) + pattern . length ( ) ; int [ ] rd = new int [ finish + _NUM ] ; rd [ finish + _NUM ] = ( _NUM << d ) - _NUM ; for ( int j = finish ; j >= start ; j -- ) { int charMatch ; if ( text . length ( ) <= j - _NUM || ! s . containsKey ( text . charAt ( j - _NUM ) ) ) { charMatch = _NUM ; } else { charMatch = s . get ( text . charAt ( j - _NUM ) ) ; } if ( d == _NUM ) { rd [ j ] = ( ( rd [ j + _NUM ] << _NUM ) | _NUM ) & charMatch ; } else { rd [ j ] = ( ( ( rd [ j + _NUM ] << _NUM ) | _NUM ) & charMatch ) | ( ( ( last_rd [ j + _NUM ] | last_rd [ j ] ) << _NUM ) | _NUM ) | last_rd [ j + _NUM ] ; } if ( ( rd [ j ] & matchmask ) != _NUM ) { double score = match_bitapScore ( d , j - _NUM , loc , pattern ) ; if ( score <= score_threshold ) { score_threshold = score ; best_loc = j - _NUM ; if ( best_loc > loc ) { start = Math . max ( _NUM , _NUM * loc - best_loc ) ; } else { break ; } } } } if ( match_bitapScore ( d + _NUM , loc , loc , pattern ) > score_threshold ) { break ; } last_rd = rd ; } return best_loc ; }
public static Path createDirectory ( final Path parent , final String folderName ) { final File file = new File ( parent . toFile ( ) , folderName ) ; if ( ! file . exists ( ) ) { if ( ! file . mkdir ( ) ) { throw new RuntimeException ( _STR + parent + _STR + folderName + _STR ) ; } } file . deleteOnExit ( ) ; return file . toPath ( ) ; }
public static boolean isWindows8 ( ) { return osName . indexOf ( _STR ) > - _NUM && ( osVersion . equals ( _STR ) || osVersion . equals ( _STR ) ) ; }
protected Set < FunctionInterface > findUnusedFunctions ( Set < UnitInterface > units ) { Set < FunctionInterface > allFunctions = new HashSet < FunctionInterface > ( ) ; Set < FunctionInterface > usedFunctions = new HashSet < FunctionInterface > ( ) ; for ( UnitInterface unit : units ) { List < FunctionInterface > unitFunctions = getUnitFunctions ( unit ) ; allFunctions . addAll ( unitFunctions ) ; for ( FunctionInterface unitFunction : unitFunctions ) { for ( FunctionInterface usedFunction : unitFunction . getCalledFunctions ( ) ) { usedFunctions . add ( usedFunction ) ; } } } allFunctions . removeAll ( usedFunctions ) ; return allFunctions ; }
private static void addItemsToList ( int startIndex , int endIndex ) { for ( int i = startIndex ; i < endIndex ; i ++ ) { values . add ( new Integer ( i ) ) ; } }
public static synchronized List < Proxy > noProxyList ( ) { if ( noProxyList == null ) { ArrayList < Proxy > list = new ArrayList < Proxy > ( _NUM ) ; list . add ( Proxy . NO_PROXY ) ; noProxyList = Collections . unmodifiableList ( list ) ; } return noProxyList ; }
public void addIncludes ( String [ ] definitions ) { addStrings ( INCLUDES , definitions ) ; addStrings ( linker_more , INCLUDES , definitions ) ; newLinkerOptionsAfterCompile . add ( INCLUDES ) ; }
protected void add ( double value , int group ) { if ( ( group < _NUM ) || ( group >= numberOfGroups ) ) { throw new IllegalArgumentException ( ) ; } data . add ( new RankedObservation ( value , group ) ) ; }
public void tallyVariant ( VcfHeader header , VcfRecord rec ) { tallyVariant ( rec , header . getSampleNames ( ) ) ; }
public int read ( byte [ ] b , int off , int len ) throws IOException { if ( closed ) { throw new IOException ( _STR ) ; } if ( eof ) { return - _NUM ; } if ( pos >= chunkSize ) { nextChunk ( ) ; if ( eof ) { return - _NUM ; } } len = Math . min ( len , chunkSize - pos ) ; int count = in . read ( b , off , len ) ; pos += count ; return count ; }
public LDIFEntryReader ( final String ... ldifLines ) { super ( Arrays . asList ( ldifLines ) ) ; }
public void updatePresonInfo ( ) { this . leftPerson = person2LeavingPersonInfo . get ( this . personId ) ; this . enteredPerson = person2EnteringPersonInfo . get ( this . personId ) ; }
public MyMap remove ( int position ) { MyMap mm = null ; if ( position >= _NUM && position < getItemCount ( ) ) { mm = myMaps . remove ( position ) ; notifyItemRemoved ( position ) ; } return mm ; }
public void presentLicenses ( boolean preAccept ) { LicenseSet licenses = licenseModule . getRequiredLicenses ( ) ; if ( preAccept ) { licenses . acceptAll ( ) ; } else { for ( License license : licenses ) { if ( license . isAccepted ( ) ) { continue ; } user . show ( _STR ) ; user . show ( license . getLicenseText ( ) ) ; String input = user . ask ( _STR ) ; if ( input != null && YES . startsWith ( input . toLowerCase ( ) ) ) { license . accept ( ) ; } else { license . reject ( ) ; } } } }
public void addGeoKey ( XTIFFField geoKey ) { geoKeyIndex . put ( new Integer ( geoKey . getTag ( ) ) , geoKey ) ; hasGeoKeys = _BOOL ; }
public static GeoTimeSerie detect ( GeoTimeSerie gts , int alphabetSize , int wordLen , int windowLen , Collection < String > patterns , boolean standardizePAA ) throws WarpScriptException { GeoTimeSerie gtsPatterns = GTSHelper . bSAX ( gts , alphabetSize , wordLen , windowLen , standardizePAA ) ; GTSHelper . sort ( gtsPatterns ) ; GeoTimeSerie detected = new GeoTimeSerie ( gts . lastbucket , gts . bucketcount , gts . bucketspan , _NUM ) ; detected . setMetadata ( gts . getMetadata ( ) ) ; int lastidx = - _NUM ; for ( int i = _NUM ; i < gtsPatterns . values ; i ++ ) { if ( ! patterns . contains ( gtsPatterns . stringValues [ i ] ) ) { continue ; } for ( int j = _NUM ; j < windowLen ; j ++ ) { if ( i + j > lastidx ) { lastidx = i + j ; GTSHelper . setValue ( detected , GTSHelper . tickAtIndex ( gts , lastidx ) , GTSHelper . locationAtIndex ( gts , lastidx ) , GTSHelper . elevationAtIndex ( gts , lastidx ) , GTSHelper . valueAtIndex ( gts , lastidx ) , _BOOL ) ; } } } return detected ; }
private StringBuilder debugDumpCandidates ( StringBuilder msg , List < ? extends Itemset > candidates , VectorFieldTypeInformation < BitVector > meta ) { msg . append ( _STR ) ; for ( Itemset itemset : candidates ) { msg . append ( _STR ) ; itemset . appendTo ( msg , meta ) ; msg . append ( _STR ) ; } return msg ; }
public static final void writeBooleanArrayXml ( boolean [ ] val , String name , XmlSerializer out ) throws XmlPullParserException , java . io . IOException { if ( val == null ) { out . startTag ( null , _STR ) ; out . endTag ( null , _STR ) ; return ; } out . startTag ( null , _STR ) ; if ( name != null ) { out . attribute ( null , _STR , name ) ; } final int N = val . length ; out . attribute ( null , _STR , Integer . toString ( N ) ) ; for ( int i = _NUM ; i < N ; i ++ ) { out . startTag ( null , _STR ) ; out . attribute ( null , _STR , Boolean . toString ( val [ i ] ) ) ; out . endTag ( null , _STR ) ; } out . endTag ( null , _STR ) ; }
public void addOutboundRule ( final OutboundRule outboundRule ) { outboundRule . setId ( outboundRuleIdCounter ++ ) ; outboundRules . add ( outboundRule ) ; }
public Skype ( String username , String password ) { this . username = username ; this . password = password ; }
private void stopDrag ( MotionEvent ev ) { mTouchMode = TOUCH_MODE_IDLE ; final boolean commitChange = ev . getAction ( ) == MotionEvent . ACTION_UP && isEnabled ( ) ; final boolean oldState = isChecked ( ) ; final boolean newState ; if ( commitChange ) { mVelocityTracker . computeCurrentVelocity ( _NUM ) ; final float xvel = mVelocityTracker . getXVelocity ( ) ; if ( Math . abs ( xvel ) > mMinFlingVelocity ) { newState = ViewUtils . isLayoutRtl ( this ) ? ( xvel < _NUM ) : ( xvel > _NUM ) ; } else { newState = getTargetCheckedState ( ) ; } } else { newState = oldState ; } if ( newState != oldState ) { playSoundEffect ( SoundEffectConstants . CLICK ) ; } setChecked ( newState ) ; cancelSuperTouch ( ev ) ; }
private void addFlags ( int newflags ) { flags = getLayoutFlags ( ) | newflags ; }
public static String matchCertificate ( KeyStore keyStore , X509Certificate cert ) throws CryptoException { try { for ( Enumeration aliases = keyStore . aliases ( ) ; aliases . hasMoreElements ( ) ; ) { String alias = ( String ) aliases . nextElement ( ) ; if ( keyStore . isCertificateEntry ( alias ) ) { X509Certificate compCert = X509CertUtil . convertCertificate ( keyStore . getCertificate ( alias ) ) ; if ( cert . equals ( compCert ) ) { return alias ; } } } return null ; } catch ( KeyStoreException ex ) { throw new CryptoException ( res . getString ( _STR ) , ex ) ; } }
void purgeLastArticles ( int amountToPurge ) { if ( ! isDBAvailable ( ) ) return ; long time = System . currentTimeMillis ( ) ; String query = _STR + TABLE_ARTICLES + _STR + ( Utils . ARTICLE_LIMIT - amountToPurge + _STR ) ; safelyDeleteArticles ( query , null ) ; Log . d ( TAG , _STR + ( System . currentTimeMillis ( ) - time ) + _STR ) ; }
public void reclaimViews ( List < View > views ) { int childCount = getChildCount ( ) ; RecyclerListener listener = mRecycler . mRecyclerListener ; for ( int i = _NUM ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; TwoWayAbsListView . LayoutParams lp = ( TwoWayAbsListView . LayoutParams ) child . getLayoutParams ( ) ; if ( lp != null && mRecycler . shouldRecycleViewType ( lp . viewType ) ) { views . add ( child ) ; if ( listener != null ) { listener . onMovedToScrapHeap ( child ) ; } } } mRecycler . reclaimScrapViews ( views ) ; removeAllViewsInLayout ( ) ; }
ProxyVerifier ( TxnManager serverProxy , Uuid proxyID ) { if ( ! ( serverProxy instanceof RemoteMethodControl ) ) { throw new UnsupportedOperationException ( _STR ) ; } else if ( ! ( serverProxy instanceof TrustEquivalence ) ) { throw new UnsupportedOperationException ( _STR + _STR ) ; } else if ( proxyID == null ) { throw new IllegalArgumentException ( _STR ) ; } this . serverProxy = ( RemoteMethodControl ) serverProxy ; this . proxyID = proxyID ; }
public void paint ( Graphics g ) { g . translate ( _NUM , translateY ) ; super . paint ( g ) ; }
private void beforeKey ( ) throws JSONException { Scope context = peek ( ) ; if ( context == Scope . NONEMPTY_OBJECT ) { out . append ( _STR ) ; } else if ( context != Scope . EMPTY_OBJECT ) { throw new JSONException ( _STR ) ; } newline ( ) ; replaceTop ( Scope . DANGLING_KEY ) ; }
public static void transfer ( InputStream in , OutputStream out , int bufferSize ) throws IOException { byte [ ] buffer = new byte [ bufferSize ] ; int bytesRead ; while ( ( bytesRead = in . read ( buffer ) ) != - _NUM ) { out . write ( buffer , _NUM , bytesRead ) ; } }
public void testFileDirectory ( ) throws Exception { Properties properties = loadProperties ( _STR ) ; assertEquals ( _STR , properties . getProperty ( _STR ) ) ; }
private static long addAndCheck ( long a , long b , Localizable pattern ) throws MathRuntimeException { final long result = a + b ; if ( ! ( ( a ^ b ) < _NUM || ( a ^ result ) >= _NUM ) ) { throw new MathRuntimeException ( pattern , a , b ) ; } return result ; }
private void serializeCompactRDFGeneralQualifier ( int indent , XMPNode node ) throws IOException , XMPException { write ( _STR ) ; writeNewline ( ) ; serializeCanonicalRDFProperty ( node , _BOOL , _BOOL , indent + _NUM ) ; for ( Iterator iq = node . iterateQualifier ( ) ; iq . hasNext ( ) ; ) { XMPNode qualifier = ( XMPNode ) iq . next ( ) ; serializeCanonicalRDFProperty ( qualifier , _BOOL , _BOOL , indent + _NUM ) ; } }
private JCheckBox addCheckbox ( String text , Container container ) { JCheckBox checkbox = new JCheckBox ( text ) ; checkbox . setAlignmentX ( Component . LEFT_ALIGNMENT ) ; checkbox . setBorder ( BorderFactory . createEmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; container . add ( checkbox ) ; return checkbox ; }
@ Override public void drawBackground ( Graphics2D g2 , CategoryPlot plot , Rectangle2D dataArea ) { float x0 = ( float ) dataArea . getX ( ) ; float x1 = x0 + ( float ) Math . abs ( this . xOffset ) ; float x3 = ( float ) dataArea . getMaxX ( ) ; float x2 = x3 - ( float ) Math . abs ( this . xOffset ) ; float y0 = ( float ) dataArea . getMaxY ( ) ; float y1 = y0 - ( float ) Math . abs ( this . yOffset ) ; float y3 = ( float ) dataArea . getMinY ( ) ; float y2 = y3 + ( float ) Math . abs ( this . yOffset ) ; GeneralPath clip = new GeneralPath ( ) ; clip . moveTo ( x0 , y0 ) ; clip . lineTo ( x0 , y2 ) ; clip . lineTo ( x1 , y3 ) ; clip . lineTo ( x3 , y3 ) ; clip . lineTo ( x3 , y1 ) ; clip . lineTo ( x2 , y0 ) ; clip . closePath ( ) ; Composite originalComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , plot . getBackgroundAlpha ( ) ) ) ; Paint backgroundPaint = plot . getBackgroundPaint ( ) ; if ( backgroundPaint != null ) { g2 . setPaint ( backgroundPaint ) ; g2 . fill ( clip ) ; } GeneralPath leftWall = new GeneralPath ( ) ; leftWall . moveTo ( x0 , y0 ) ; leftWall . lineTo ( x0 , y2 ) ; leftWall . lineTo ( x1 , y3 ) ; leftWall . lineTo ( x1 , y1 ) ; leftWall . closePath ( ) ; g2 . setPaint ( getWallPaint ( ) ) ; g2 . fill ( leftWall ) ; GeneralPath bottomWall = new GeneralPath ( ) ; bottomWall . moveTo ( x0 , y0 ) ; bottomWall . lineTo ( x1 , y1 ) ; bottomWall . lineTo ( x3 , y1 ) ; bottomWall . lineTo ( x2 , y0 ) ; bottomWall . closePath ( ) ; g2 . setPaint ( getWallPaint ( ) ) ; g2 . fill ( bottomWall ) ; g2 . setPaint ( Color . lightGray ) ; Line2D corner = new Line2D . Double ( x0 , y0 , x1 , y1 ) ; g2 . draw ( corner ) ; corner . setLine ( x1 , y1 , x1 , y3 ) ; g2 . draw ( corner ) ; corner . setLine ( x1 , y1 , x3 , y1 ) ; g2 . draw ( corner ) ; Image backgroundImage = plot . getBackgroundImage ( ) ; if ( backgroundImage != null ) { Rectangle2D adjusted = new Rectangle2D . Double ( dataArea . getX ( ) + getXOffset ( ) , dataArea . getY ( ) , dataArea . getWidth ( ) - getXOffset ( ) , dataArea . getHeight ( ) - getYOffset ( ) ) ; plot . drawBackgroundImage ( g2 , adjusted ) ; } g2 . setComposite ( originalComposite ) ; }
public void push ( ) { state . cliprgn = g . getClipBounds ( ) ; stack . push ( state ) ; state = ( GraphicsState ) state . clone ( ) ; }
public static void dropIndex ( Connection conn , String schema , String table ) throws SQLException { init ( conn ) ; PreparedStatement prep = conn . prepareStatement ( _STR + SCHEMA + _STR ) ; prep . setString ( _NUM , schema ) ; prep . setString ( _NUM , table ) ; ResultSet rs = prep . executeQuery ( ) ; if ( ! rs . next ( ) ) { return ; } int indexId = rs . getInt ( _NUM ) ; prep = conn . prepareStatement ( _STR + SCHEMA + _STR ) ; prep . setInt ( _NUM , indexId ) ; prep . execute ( ) ; createOrDropTrigger ( conn , schema , table , _BOOL ) ; prep = conn . prepareStatement ( _STR + SCHEMA + _STR ) ; while ( _BOOL ) { prep . setInt ( _NUM , indexId ) ; int deleted = prep . executeUpdate ( ) ; if ( deleted == _NUM ) { break ; } } prep = conn . prepareStatement ( _STR + SCHEMA + _STR + _STR + SCHEMA + _STR ) ; while ( _BOOL ) { int deleted = prep . executeUpdate ( ) ; if ( deleted == _NUM ) { break ; } } }
public E peek ( ) { if ( isEmpty ( ) ) { return null ; } return elements [ _NUM ] ; }
public synchronized int add ( IAudioProcessor processor ) { processors . add ( processor ) ; buildFinalProcessor ( ) ; return processors . indexOf ( processor ) ; }
public ScriptBuilder data ( int index , byte [ ] data ) { byte [ ] copy = Arrays . copyOf ( data , data . length ) ; int opcode ; if ( data . length == _NUM ) { opcode = OP_0 ; } else if ( data . length == _NUM ) { byte b = data [ _NUM ] ; if ( b >= _NUM && b <= _NUM ) opcode = Script . encodeToOpN ( b ) ; else opcode = _NUM ; } else if ( data . length < OP_PUSHDATA1 ) { opcode = data . length ; } else if ( data . length < _NUM ) { opcode = OP_PUSHDATA1 ; } else if ( data . length < _NUM ) { opcode = OP_PUSHDATA2 ; } else { throw new RuntimeException ( _STR ) ; } return addChunk ( index , new ScriptChunk ( opcode , copy ) ) ; }
public void initialize ( Map configParams ) { String delimiterConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_DELIMITER ) ; if ( delimiterConfig != null ) { this . delimiter = delimiterConfig ; } String caseConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_CASE_SENSITIVE ) ; if ( caseConfig != null ) { if ( caseConfig . equals ( _STR ) ) { this . caseSensitive = _BOOL ; } else if ( caseConfig . equals ( _STR ) ) { this . caseSensitive = _BOOL ; } else { this . caseSensitive = _BOOL ; } } String wildcardConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_WILDCARD ) ; if ( wildcardConfig != null ) { this . wildcard = wildcardConfig ; } String oneLevelWildcardConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD ) ; if ( oneLevelWildcardConfig != null ) { this . oneLevelWildcard = oneLevelWildcardConfig ; } if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + delimiter + _STR + wildcard + _STR + oneLevelWildcard + _STR + caseConfig ) ; } oneLevelWildcardLength = oneLevelWildcard . length ( ) ; wildcardLength = wildcard . length ( ) ; if ( oneLevelWildcard . indexOf ( wildcard ) != - _NUM ) { wildcardEmbedded = _BOOL ; } else { wildcardEmbedded = _BOOL ; } if ( wildcard . indexOf ( oneLevelWildcard ) != - _NUM ) { oneLevelWildcardEmbedded = _BOOL ; } else { oneLevelWildcardEmbedded = _BOOL ; } if ( debug . messageEnabled ( ) ) { debug . message ( _STR + wildcardEmbedded + _STR + oneLevelWildcardEmbedded ) ; } return ; }
protected void deleteLeastUsedEntry ( ) { try { poolLock . lock ( ) ; BasicPoolEntry entry = freeConnections . remove ( ) ; if ( entry != null ) { deleteEntry ( entry ) ; } else if ( log . isDebugEnabled ( ) ) { log . debug ( _STR ) ; } } finally { poolLock . unlock ( ) ; } }
private String convertLessThanOneThousand ( int number ) { String soFar ; if ( number % _NUM < _NUM ) { soFar = numNames [ number % _NUM ] ; number /= _NUM ; } else { soFar = numNames [ number % _NUM ] ; number /= _NUM ; String s = Integer . toString ( number ) ; if ( s . endsWith ( _STR ) && ! soFar . equals ( _STR ) ) soFar = _STR + soFar . trim ( ) ; else if ( soFar . equals ( _STR ) ) soFar = tensNames [ number % _NUM ] + soFar ; else soFar = tensNames [ number % _NUM ] + _STR + soFar ; number /= _NUM ; } if ( number == _NUM ) return tensNames [ number % _NUM ] + soFar ; if ( number > _NUM ) soFar = _STR + soFar ; if ( number == _NUM && ! soFar . equals ( _STR ) ) number = _NUM ; return numNames [ number ] + _STR + soFar ; }
public static boolean isEmbeddedBase64Image ( String uri ) { return ( uri != null && uri . startsWith ( _STR ) ) ; }
void changeState ( int newState ) { int oldState ; synchronized ( stateLock ) { if ( state == newState ) return ; oldState = state ; state = newState ; stateLock . notifyAll ( ) ; } sendStateChangeNotification ( oldState , newState ) ; }
private int parseLinkLabel ( ) { String m = match ( LINK_LABEL ) ; return m == null ? _NUM : m . length ( ) ; }
private static void insertCommentsInNode ( Node node , List < Comment > commentsToAttribute ) { if ( commentsToAttribute . size ( ) == _NUM ) return ; List < Node > children = node . getChildrenNodes ( ) ; PositionUtils . sortByBeginPosition ( children ) ; for ( Node child : children ) { List < Comment > commentsInsideChild = new LinkedList < Comment > ( ) ; for ( Comment c : commentsToAttribute ) { if ( PositionUtils . nodeContains ( child , c , _doNotConsiderAnnotationsAsNodeStartForCodeAttribution ) ) { commentsInsideChild . add ( c ) ; } } commentsToAttribute . removeAll ( commentsInsideChild ) ; insertCommentsInNode ( child , commentsInsideChild ) ; } List < Comment > attributedComments = new LinkedList < Comment > ( ) ; for ( Comment comment : commentsToAttribute ) { if ( comment . isLineComment ( ) ) { for ( Node child : children ) { if ( child . getEndLine ( ) == comment . getBeginLine ( ) ) { if ( attributeLineCommentToNodeOrChild ( child , comment . asLineComment ( ) ) ) { attributedComments . add ( comment ) ; } } } } } Comment previousComment = null ; attributedComments = new LinkedList < Comment > ( ) ; List < Node > childrenAndComments = new LinkedList < Node > ( ) ; childrenAndComments . addAll ( children ) ; childrenAndComments . addAll ( commentsToAttribute ) ; PositionUtils . sortByBeginPosition ( childrenAndComments , _doNotConsiderAnnotationsAsNodeStartForCodeAttribution ) ; for ( Node thing : childrenAndComments ) { if ( thing instanceof Comment ) { previousComment = ( Comment ) thing ; if ( ! previousComment . isOrphan ( ) ) { previousComment = null ; } } else { if ( previousComment != null && ! thing . hasComment ( ) ) { if ( ! _doNotAssignCommentsPreceedingEmptyLines || ! thereAreLinesBetween ( previousComment , thing ) ) { thing . setComment ( previousComment ) ; attributedComments . add ( previousComment ) ; previousComment = null ; } } } } commentsToAttribute . removeAll ( attributedComments ) ; for ( Comment c : commentsToAttribute ) { if ( c . isOrphan ( ) ) { node . addOrphanComment ( c ) ; } } }
public static String readFileAsString ( File file ) throws FileNotFoundException { return readFileAsString ( file . getAbsolutePath ( ) ) ; }
protected void onException ( final WroRuntimeException e ) { throw e ; }
public synchronized void checkAccess ( LicenseCheckerCallback callback ) { if ( mPolicy . allowAccess ( ) ) { Log . i ( TAG , _STR ) ; callback . allow ( Policy . LICENSED ) ; } else { LicenseValidator validator = new LicenseValidator ( mPolicy , new NullDeviceLimiter ( ) , callback , generateNonce ( ) , mPackageName , mVersionCode ) ; if ( mService == null ) { Log . i ( TAG , _STR ) ; try { boolean bindResult = mContext . bindService ( new Intent ( new String ( Base64 . decode ( _STR ) ) ) , this , Context . BIND_AUTO_CREATE ) ; if ( bindResult ) { mPendingChecks . offer ( validator ) ; } else { Log . e ( TAG , _STR ) ; handleServiceConnectionError ( validator ) ; } } catch ( SecurityException e ) { callback . applicationError ( LicenseCheckerCallback . ERROR_MISSING_PERMISSION ) ; } catch ( Base64DecoderException e ) { e . printStackTrace ( ) ; } } else { mPendingChecks . offer ( validator ) ; runChecks ( ) ; } } }
public void close ( ) { if ( ! isOpen ) return ; Log . d ( TAG , _STR ) ; loadingLock . lock ( ) ; try { save ( ) ; if ( saveFileStream != null ) { SavingHelper . close ( saveFileStream ) ; saveFileStream = null ; } savingDisabled = _BOOL ; isOpen = _BOOL ; Log . i ( TAG , _STR ) ; } finally { loadingLock . unlock ( ) ; } }
protected int selectOperator ( ) { lastUpdate ++ ; if ( ( lastUpdate >= UPDATE_WINDOW ) || ( probabilities == null ) ) { lastUpdate = _NUM ; probabilities = getOperatorProbabilities ( ) ; } double rand = PRNG . nextDouble ( ) ; double sum = _NUM ; for ( int i = _NUM ; i < operators . size ( ) ; i ++ ) { sum += probabilities [ i ] ; if ( sum > rand ) { return i ; } } throw new IllegalStateException ( ) ; }
@ Override public List chunkString ( String sToChunk ) { Integer [ ] iRes = splitPointsByDelimiterList ( sToChunk , getDelimiters ( ) ) ; String [ ] sRes = splitStringByDelimiterPoints ( sToChunk , iRes ) ; return Arrays . asList ( sRes ) ; }
public static String convertBooleanArrToString ( Boolean [ ] noDictionaryDimsMapping ) { StringBuilder builder = new StringBuilder ( ) ; int index = _NUM ; for ( ; index < noDictionaryDimsMapping . length ; index ++ ) { builder . append ( noDictionaryDimsMapping [ index ] ) ; builder . append ( CarbonCommonConstants . COMA_SPC_CHARACTER ) ; } int lastIndex = builder . lastIndexOf ( CarbonCommonConstants . COMA_SPC_CHARACTER ) ; String str = - _NUM != lastIndex ? builder . substring ( _NUM , lastIndex ) : builder . toString ( ) ; return str ; }
public ByteBuffer decodeBufferToByteBuffer ( String inputString ) throws IOException { return ByteBuffer . wrap ( decodeBuffer ( inputString ) ) ; }
public void clear ( ) { m_Model . clear ( ) ; setButtons ( null ) ; }
public static int brighter ( int c ) { int r = red ( c ) , g = green ( c ) , b = blue ( c ) ; int i = ( int ) ( _NUM / ( _NUM - scale ) ) ; if ( r == _NUM && g == _NUM && b == _NUM ) { return rgba ( i , i , i , alpha ( c ) ) ; } if ( r > _NUM && r < i ) r = i ; if ( g > _NUM && g < i ) g = i ; if ( b > _NUM && b < i ) b = i ; return rgba ( Math . min ( _NUM , ( int ) ( r / scale ) ) , Math . min ( _NUM , ( int ) ( g / scale ) ) , Math . min ( _NUM , ( int ) ( b / scale ) ) , alpha ( c ) ) ; }
public void shutdown ( ) { running = _BOOL ; if ( networkThreads != null ) { for ( NetworkThread n : networkThreads ) { n . stopped = _BOOL ; } } networkThreads = null ; synchronized ( LOCK ) { LOCK . notifyAll ( ) ; } }
public SerialMessage ( byte [ ] a ) { super ( String . valueOf ( a ) ) ; setBinary ( _BOOL ) ; }
@ Override @ SuppressWarnings ( _STR ) public void completed ( int bytesTransferred , boolean canInvokeDirect ) { if ( bytesTransferred == _NUM ) { bytesTransferred = - _NUM ; } else { updateBuffers ( bytesTransferred ) ; } releaseBuffers ( ) ; synchronized ( result ) { if ( result . isDone ( ) ) return ; enableReading ( ) ; if ( scatteringRead ) { result . setResult ( ( V ) Long . valueOf ( bytesTransferred ) ) ; } else { result . setResult ( ( V ) Integer . valueOf ( bytesTransferred ) ) ; } } if ( canInvokeDirect ) { Invoker . invokeUnchecked ( result ) ; } else { Invoker . invoke ( result ) ; } }
public void writeGolomb ( int divisor , int value ) { int q = value / divisor ; for ( int i = _NUM ; i < q ; i ++ ) { writeBit ( _NUM ) ; } writeBit ( _NUM ) ; int r = value - q * divisor ; int bit = _NUM - Integer . numberOfLeadingZeros ( divisor - _NUM ) ; if ( r < ( ( _NUM << bit ) - divisor ) ) { bit -- ; } else { r += ( _NUM << bit ) - divisor ; } for ( ; bit >= _NUM ; bit -- ) { writeBit ( ( r > > > bit ) & _NUM ) ; } }
public void addForce ( Force f ) { if ( f . isItemForce ( ) ) { if ( iforces . length == iflen ) { Force [ ] newf = new Force [ iflen + _NUM ] ; System . arraycopy ( iforces , _NUM , newf , _NUM , iforces . length ) ; iforces = newf ; } iforces [ iflen ++ ] = f ; } if ( f . isSpringForce ( ) ) { if ( sforces . length == sflen ) { Force [ ] newf = new Force [ sflen + _NUM ] ; System . arraycopy ( sforces , _NUM , newf , _NUM , sforces . length ) ; sforces = newf ; } sforces [ sflen ++ ] = f ; } }
private static MetricValue number_to_metric_value_ ( Number elem ) { if ( elem == null ) return MetricValue . EMPTY ; final String num = elem . toString ( ) ; try { return MetricValue . fromIntValue ( Long . parseLong ( num ) ) ; } catch ( NumberFormatException ex ) { } try { return MetricValue . fromDblValue ( Double . parseDouble ( num ) ) ; } catch ( NumberFormatException ex ) { } return MetricValue . fromStrValue ( num ) ; }
public boolean overlaps ( String sequence , int start , int end ) { if ( start == MISSING || end == MISSING || end < start ) { throw new IllegalArgumentException ( ) ; } if ( ! mSequence . equals ( sequence ) ) { return _BOOL ; } if ( ( mEnd != MISSING && start >= mEnd ) || ( end <= mStart ) ) { return _BOOL ; } return _BOOL ; }
public OkapiBM25 ( double k1 , double b ) { if ( Double . isNaN ( k1 ) || Double . isInfinite ( k1 ) || k1 < _NUM ) throw new IllegalArgumentException ( _STR + k1 ) ; this . k1 = k1 ; if ( Double . isNaN ( b ) || b < _NUM || b > _NUM ) throw new IllegalArgumentException ( _STR + b ) ; this . b = b ; }
protected void prepare ( ) { for ( ProcessInfoParameter para : getParameter ( ) ) { String name = para . getParameterName ( ) ; if ( para . getParameter ( ) == null ) ; else if ( name . equals ( PARAM_M_Warehouse_ID ) ) p_M_Warehouse_ID = para . getParameterAsInt ( ) ; else log . log ( Level . SEVERE , _STR + name ) ; } p_C_Invoice_ID = getRecord_ID ( ) ; }
public boolean isConfigured ( ) { LOG . debug ( _STR + url ) ; return url != null && ! url . isEmpty ( ) ; }
public static String [ ] commaDelimitedListToStringArray ( String str ) { return delimitedListToStringArray ( str , _STR ) ; }
@ Override public byte [ ] readByteArray ( String filePath , long offset , int length ) { FileChannel fileChannel = updateCache ( filePath ) ; ByteBuffer byteBffer = read ( fileChannel , length , offset ) ; return byteBffer . array ( ) ; }
private static void FatalError ( JNIEnvironment env , Address messageAddress ) { if ( traceJNI ) VM . sysWrite ( _STR ) ; RuntimeEntrypoints . checkJNICountDownToGC ( ) ; try { VM . sysWrite ( JNIGenericHelpers . createStringFromC ( messageAddress ) ) ; System . exit ( EXIT_STATUS_JNI_TROUBLE ) ; } catch ( Throwable unexpected ) { if ( traceJNI ) unexpected . printStackTrace ( System . err ) ; System . exit ( EXIT_STATUS_RECURSIVELY_SHUTTING_DOWN ) ; } }
public boolean makeBackupFile ( String directory , File file ) { if ( file == null ) { log . info ( _STR ) ; } else if ( file . canWrite ( ) ) { String backupFullName = directory + File . separator + createFileNameWithDate ( file . getName ( ) ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + backupFullName ) ; } File backupFile = findFile ( backupFullName ) ; if ( backupFile != null ) { if ( backupFile . delete ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + backupFullName ) ; } } } else { backupFile = new File ( backupFullName ) ; } File parentDir = backupFile . getParentFile ( ) ; if ( ! parentDir . exists ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + parentDir . getName ( ) ) ; } if ( ! parentDir . mkdirs ( ) ) { log . error ( _STR ) ; return _BOOL ; } } if ( file . renameTo ( new File ( backupFullName ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + backupFullName ) ; } } else { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + backupFullName ) ; } return _BOOL ; } } return _BOOL ; }
public final void pushPair ( int v1 , int v2 ) { if ( null == m_map ) { m_map = new int [ m_blocksize ] ; m_mapSize = m_blocksize ; } else { if ( ( m_firstFree + _NUM ) >= m_mapSize ) { m_mapSize += m_blocksize ; int newMap [ ] = new int [ m_mapSize ] ; System . arraycopy ( m_map , _NUM , newMap , _NUM , m_firstFree ) ; m_map = newMap ; } } m_map [ m_firstFree ] = v1 ; m_map [ m_firstFree + _NUM ] = v2 ; m_firstFree += _NUM ; }
public void removeStorage ( ) throws BackupException { logger . debug ( _STR + dataDirSpec . getAbsolutePath ( ) ) ; processHelper . exec ( _STR , rmCmd ) ; }
private void appendContainerConfig ( DockerSlaveTemplate slaveTemplate , CreateContainerCmd containerConfig ) { Map < String , String > labels = containerConfig . getLabels ( ) ; if ( labels == null ) { labels = new HashMap < > ( ) ; } labels . put ( DOCKER_CLOUD_LABEL , getDisplayName ( ) ) ; labels . put ( DOCKER_TEMPLATE_LABEL , slaveTemplate . getId ( ) ) ; containerConfig . withLabels ( labels ) ; }
ReadOnlyGameSettings ( ) { }
public void deleteUsers ( Set users ) throws AMException , SSOException { Iterator iter = users . iterator ( ) ; while ( iter . hasNext ( ) ) { String userDN = ( String ) iter . next ( ) ; AMUser user = new AMUserImpl ( super . token , userDN ) ; user . delete ( ) ; } }
@ Override public boolean accept ( File file ) { String name = file . getName ( ) ; for ( String wildcard : wildcards ) { if ( FilenameUtils . wildcardMatch ( name , wildcard , caseSensitivity ) ) { return _BOOL ; } } return _BOOL ; }
public void removeRegion ( Region r ) { regions . remove ( r ) ; }
public static void silentCloseInputStream ( InputStream is ) { try { if ( is != null ) { is . close ( ) ; } } catch ( IOException e ) { log . w ( LOG_TAG , _STR , e ) ; } }
@ Override public void startElement ( String uri , String localName , String qName , Attributes attributes ) throws SAXException { if ( requestID == null && localName . equals ( _STR ) ) { requestID = attributes . getValue ( _STR ) ; } super . startElement ( uri , localName , qName , attributes ) ; }
public void stop ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( _BOOL , _BOOL ) ) { return ; } List < WebSocket > socketsToClose = null ; synchronized ( connections ) { socketsToClose = new ArrayList < WebSocket > ( connections ) ; } for ( WebSocket ws : socketsToClose ) { ws . close ( CloseFrame . GOING_AWAY ) ; } synchronized ( this ) { if ( selectorthread != null ) { if ( Thread . currentThread ( ) != selectorthread ) { } if ( selectorthread != Thread . currentThread ( ) ) { if ( socketsToClose . size ( ) > _NUM ) selectorthread . join ( timeout ) ; selectorthread . interrupt ( ) ; selectorthread . join ( ) ; } } } }
public Storage ( ) { this ( new File ( getTemporaryStorageDirectoryString ( ) ) ) ; }
protected void calculateItemWidth ( CategoryPlot plot , Rectangle2D dataArea , int rendererIndex , CategoryItemRendererState state ) { CategoryAxis domainAxis = getDomainAxis ( plot , rendererIndex ) ; CategoryDataset dataset = plot . getDataset ( rendererIndex ) ; if ( dataset != null ) { int columns = dataset . getColumnCount ( ) ; int rows = state . getVisibleSeriesCount ( ) >= _NUM ? state . getVisibleSeriesCount ( ) : dataset . getRowCount ( ) ; double space = _NUM ; PlotOrientation orientation = plot . getOrientation ( ) ; if ( orientation == PlotOrientation . HORIZONTAL ) { space = dataArea . getHeight ( ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { space = dataArea . getWidth ( ) ; } double maxWidth = space * getMaximumItemWidth ( ) ; double categoryMargin = _NUM ; double currentItemMargin = _NUM ; if ( columns > _NUM ) { categoryMargin = domainAxis . getCategoryMargin ( ) ; } if ( rows > _NUM ) { currentItemMargin = getItemMargin ( ) ; } double used = space * ( _NUM - domainAxis . getLowerMargin ( ) - domainAxis . getUpperMargin ( ) - categoryMargin - currentItemMargin ) ; if ( ( rows * columns ) > _NUM ) { state . setBarWidth ( Math . min ( used / ( rows * columns ) , maxWidth ) ) ; } else { state . setBarWidth ( Math . min ( used , maxWidth ) ) ; } } }
@ RequiresPermission ( Manifest . permission . CAMERA ) public CameraSource start ( ) throws IOException { synchronized ( mCameraLock ) { if ( mCamera != null ) { return this ; } mCamera = createCamera ( ) ; if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . HONEYCOMB ) { mDummySurfaceTexture = new SurfaceTexture ( DUMMY_TEXTURE_NAME ) ; mCamera . setPreviewTexture ( mDummySurfaceTexture ) ; } else { mDummySurfaceView = new SurfaceView ( mContext ) ; mCamera . setPreviewDisplay ( mDummySurfaceView . getHolder ( ) ) ; } mCamera . startPreview ( ) ; isSafeToTakePicture = _BOOL ; mProcessingThread = new Thread ( mFrameProcessor ) ; mFrameProcessor . setActive ( _BOOL ) ; mProcessingThread . start ( ) ; } return this ; }
public void addBreakpointListener ( final BreakpointListener listener ) { breakpointListeners . add ( listener ) ; }
public void update ( Graphics g ) { if ( isShowing ( ) ) { if ( ! ( peer instanceof LightweightPeer ) ) { g . clearRect ( _NUM , _NUM , width , height ) ; } paint ( g ) ; } }
private void releaseWaiters ( int phase ) { QNode q ; Thread t ; AtomicReference < QNode > head = ( phase & _NUM ) == _NUM ? evenQ : oddQ ; while ( ( q = head . get ( ) ) != null && q . phase != ( int ) ( root . state > > > PHASE_SHIFT ) ) { if ( head . compareAndSet ( q , q . next ) && ( t = q . thread ) != null ) { q . thread = null ; LockSupport . unpark ( t ) ; } } }
public static DateFormat toDateTimeFormat ( String dateTimeFormat , TimeZone tz , Locale locale ) { DateFormat df = null ; if ( UtilValidate . isEmpty ( dateTimeFormat ) ) { df = DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . MEDIUM , locale ) ; } else { df = new SimpleDateFormat ( dateTimeFormat , locale == null ? Locale . getDefault ( ) : locale ) ; } df . setTimeZone ( tz ) ; return df ; }
public static void printStackTrace ( Throwable e ) { try { Debug . printStackTrace ( e ) ; } catch ( Throwable f ) { e . printStackTrace ( ) ; } }
@ Override public Void visitType ( TypeElement e , Void p ) { scan ( e . getTypeParameters ( ) , p ) ; checkCamelCase ( e , _BOOL ) ; super . visitType ( e , p ) ; return null ; }
public Block ( boolean multiPush ) { this ( multiPush , _STR , null , Arrays . asList ( _STR , _STR ) ) ; }
private double Poisson ( double x ) { return Math . exp ( - m_Lambda + ( x * Math . log ( m_Lambda ) ) - logFac ( x ) ) ; }
protected Expression findExpression ( String source ) { if ( source != null && source . length ( ) > _NUM ) { source = source . trim ( ) ; if ( source . length ( ) == _NUM ) { return null ; } String leftSide = source ; String rightSide = null ; Connector op = findOp ( leftSide ) ; if ( op != null ) { rightSide = op . getRightSide ( leftSide ) ; leftSide = leftSide . substring ( _NUM , op . sourceLoc ) ; Expression leftExpression = findExpression ( leftSide ) ; Expression rightExpression = findExpression ( rightSide ) ; if ( leftExpression != null ) { op . addExpr ( leftExpression ) ; } if ( rightExpression != null ) { op . addExpr ( rightExpression ) ; } return op ; } op = findMiniOp ( leftSide ) ; if ( op != null ) { rightSide = op . getRightSide ( leftSide ) ; leftSide = leftSide . substring ( _NUM , op . sourceLoc ) ; Expression leftExpression = findExpression ( leftSide ) ; Expression rightExpression = findExpression ( rightSide ) ; if ( leftExpression != null ) { op . addExpr ( leftExpression ) ; } if ( rightExpression != null ) { op . addExpr ( rightExpression ) ; } return op ; } if ( logger . isLoggable ( Level . FINER ) ) { logger . finer ( _STR + source ) ; } return findMathOp ( source ) ; } return null ; }
void putChannel ( final StoredClientChannel channel ) { putChannel ( channel , _BOOL ) ; }
private void deleteFilesInDir ( File dir ) { for ( File child : dir . listFiles ( ) ) { child . delete ( ) ; } }
@ SuppressWarnings ( _STR ) public static void pipeInputToOutputStream ( InputStream in , File fileOut , boolean ignoreErrors ) throws IOException { if ( fileOut == null ) { logger . error ( _STR ) ; if ( ! ignoreErrors ) { throw new IOException ( _STR ) ; } } else { File parent = fileOut . getParentFile ( ) ; if ( parent != null && ! parent . exists ( ) ) { parent . mkdirs ( ) ; } OutputStream fileStream = null ; try { fileStream = new FileOutputStream ( fileOut ) ; pipeInputToOutputStream ( in , fileStream , _BOOL , ignoreErrors ) ; } catch ( IOException e ) { if ( fileStream != null ) { try { fileStream . close ( ) ; } catch ( IOException ex ) { logger . error ( _STR , ex . getMessage ( ) ) ; } } if ( ! ignoreErrors ) { throw e ; } } } }
@ SuppressLint ( _STR ) void release ( ) { assert ( mProcessingThread . getState ( ) == State . TERMINATED ) ; mDetector . release ( ) ; mDetector = null ; }
public static String trimLeadingCharacter ( String str , char leadingCharacter ) { if ( ! hasLength ( str ) ) { return str ; } StringBuilder sb = new StringBuilder ( str ) ; while ( sb . length ( ) > _NUM && sb . charAt ( _NUM ) == leadingCharacter ) { sb . deleteCharAt ( _NUM ) ; } return sb . toString ( ) ; }
public E take ( ) throws InterruptedException { final ReentrantLock lock = this . lock ; lock . lockInterruptibly ( ) ; long t = now ( ) ; TenantQueue . Item item = null ; try { for ( ; ; ) { TenantQueue q = nextQueue ( t ) ; if ( q == null ) available . await ( ) ; else { long delay = q . next - t ; if ( delay <= _NUM ) { item = q . poll ( t ) ; return item == null ? null : item . element ; } else if ( leader != null ) available . await ( ) ; else { Thread thisThread = Thread . currentThread ( ) ; leader = thisThread ; try { available . awaitNanos ( delay ) ; } finally { if ( leader == thisThread ) leader = null ; } } } t = System . nanoTime ( ) ; } } finally { if ( leader == null && hasNext ( ) ) available . signal ( ) ; lock . unlock ( ) ; done ( item , t ) ; } }
public boolean threadSafeTimeout ( long delayTime , TimeUnit unit , Action0 action ) { boolean scheduled = _BOOL ; Thread currentThread = Thread . currentThread ( ) ; if ( currentThread . equals ( dutyThread ) ) { timerWheel . newTimeout ( delayTime , unit , null ) ; } else { scheduled = actions . offer ( null ) ; } return scheduled ; }
void submit ( ProcessAndDisplayImageTask task ) { initExecutorsIfNeed ( ) ; taskExecutorForCachedImages . execute ( task ) ; }
void addAttributeSelection ( String exp ) { int index = exp . indexOf ( _STR ) ; String value = null ; int constraint = AttString . EQUALS ; if ( index != - _NUM ) { if ( index == _NUM ) { setTagId ( TAG_CSS_ILLEGAL_SELECTOR ) ; return ; } int opIndex = index ; char c = exp . charAt ( index - _NUM ) ; if ( c == _STR ) { constraint = AttString . CONTAINS_WORD ; opIndex -- ; } else if ( c == _STR ) { constraint = AttString . BEGINS_WITH ; opIndex -- ; } value = exp . substring ( index + _NUM ) ; if ( ( ( value . startsWith ( _STR ) ) && ( value . endsWith ( _STR ) ) ) || ( ( value . startsWith ( _STR ) ) && ( value . endsWith ( _STR ) ) ) ) { value = value . substring ( _NUM , value . length ( ) - _NUM ) ; } exp = exp . substring ( _NUM , opIndex ) ; } if ( attributeSelections == null ) { attributeSelections = new Vector ( ) ; } attributeSelections . addElement ( new AttString ( exp , constraint , value ) ) ; }
private void createLeftOver ( ) { int lineLengthBytes = currentLastBytePos + _NUM ; if ( lineLengthBytes > _NUM ) { leftOver = new byte [ lineLengthBytes ] ; System . arraycopy ( data , _NUM , leftOver , _NUM , lineLengthBytes ) ; } else { leftOver = null ; } currentLastBytePos = - _NUM ; }
public Value sample ( ) { int index = sampler . nextInt ( actionValues . size ( ) ) ; if ( actionValuesAsArray == null ) { actionValuesAsArray = actionValues . toArray ( new Value [ actionValues . size ( ) ] ) ; } return actionValuesAsArray [ index ] ; }
@ Override public void channelClosed ( ChannelHandlerContext channelHandlerContext , ChannelStateEvent channelStateEvent ) throws Exception { curr_conns . decrementAndGet ( ) ; channelGroup . remove ( channelHandlerContext . getChannel ( ) ) ; }
private static void configureHeadLessSimulation ( ) { System . setProperty ( _STR , _STR ) ; GAMA . setHeadLessMode ( ) ; }
public static boolean isNextWindow ( URI id ) { return id == null || NEXT . equals ( id ) ; }
public static boolean isVisible ( Class < ? > clazz , ClassLoader classLoader ) { if ( classLoader == null ) { return _BOOL ; } try { Class < ? > actualClass = classLoader . loadClass ( clazz . getName ( ) ) ; return ( clazz == actualClass ) ; } catch ( ClassNotFoundException ex ) { return _BOOL ; } }
public byte [ ] remove ( QueueEvent event ) throws KeeperException , InterruptedException { TimerContext time = stats . time ( dir + _STR ) ; try { String path = event . getId ( ) ; String responsePath = dir + _STR + response_prefix + path . substring ( path . lastIndexOf ( _STR ) + _NUM ) ; if ( zookeeper . exists ( responsePath , _BOOL ) ) { zookeeper . setData ( responsePath , event . getBytes ( ) , _BOOL ) ; } byte [ ] data = zookeeper . getData ( path , null , null , _BOOL ) ; zookeeper . delete ( path , - _NUM , _BOOL ) ; return data ; } finally { time . stop ( ) ; } }
public PropertyXMLBuilder ( ServiceSchema serviceSchema , AMModel model , Set attributeSchemas ) throws SMSException , SSOException { this . model = model ; this . serviceName = serviceSchema . getServiceName ( ) ; getServiceResourceBundle ( serviceSchema ) ; if ( serviceBundle != null ) { mapTypeToAttributeSchema = new HashMap ( attributeSchemas . size ( ) * _NUM ) ; mapTypeToAttributeSchema . put ( NULL_TYPE , attributeSchemas ) ; } }
public boolean is ( String arg , boolean allowAbbr ) { if ( name . equalsIgnoreCase ( arg ) ) { return _BOOL ; } if ( allowAbbr && arg . length ( ) == _NUM ) { if ( arg . charAt ( _NUM ) == c ) { return _BOOL ; } } return _BOOL ; }
static public void addAll ( List < String > list , String [ ] array ) { for ( String item : array ) list . add ( item ) ; }
void remove ( SuperCardToast superCardToast ) { mList . remove ( superCardToast ) ; }
public void test_vmstat_header_and_data_parse ( ) { final Pattern pattern = VMStatCollector . pattern ; final String header = _STR ; final String data = _STR ; { final String [ ] fields = pattern . split ( header . trim ( ) , _NUM ) ; for ( int i = _NUM ; i < fields . length ; i ++ ) { if ( log . isInfoEnabled ( ) ) log . info ( _STR + i + _STR + fields [ i ] + _STR ) ; } assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; } { final String [ ] fields = pattern . split ( data . trim ( ) , _NUM ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; } }
public static SecretKeys generateKeyFromPassword ( String password , String salt ) throws GeneralSecurityException { return generateKeyFromPassword ( password , Base64 . decode ( salt , BASE64_FLAGS ) ) ; }
private String partiallyEscapeAssertionValue ( String assertionValue ) { StringBuilder sb = new StringBuilder ( assertionValue . length ( ) ) ; for ( int j = _NUM ; j < assertionValue . length ( ) ; j ++ ) { char c = assertionValue . charAt ( j ) ; if ( c == _STR ) { sb . append ( c ) ; } else { sb . append ( Filter . escapeAssertionValue ( String . valueOf ( c ) ) ) ; } } return sb . toString ( ) ; }
protected boolean filterLeftoverView ( ViewGroup parent , int childIndex ) { parent . removeViewAt ( childIndex ) ; return _BOOL ; }
protected boolean declAlreadyDeclared ( String prefix ) { int startDecls = m_contextIndexes . peek ( ) ; java . util . Vector prefixMappings = m_prefixMappings ; int nDecls = prefixMappings . size ( ) ; for ( int i = startDecls ; i < nDecls ; i += _NUM ) { String prefixDecl = ( String ) prefixMappings . elementAt ( i ) ; if ( prefixDecl == null ) continue ; if ( prefixDecl . equals ( prefix ) ) return _BOOL ; } return _BOOL ; }
@ Override public void step ( MessageLogger logger ) { try { addAgent ( ) ; env . step ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public static AttackStatus calculatePhysicalStatus ( Creature attacker , Creature attacked , boolean isMainHand ) { return calculatePhysicalStatus ( attacker , attacked , isMainHand , _NUM , _NUM , _BOOL , _BOOL ) ; }
public T vertexProcessor ( final BiConsumer < Vertex , Map < String , Object > > vertexProcessor ) { this . vertexProcessor = Optional . ofNullable ( vertexProcessor ) ; return extendingClass . cast ( this ) ; }
synchronized boolean release ( ) { d ( _STR ) ; if ( state == BUSY ) { state = IDLE ; idleSince = System . currentTimeMillis ( ) ; return _BOOL ; } else { return _BOOL ; } }
private void validateReplicaAvailability ( Slice slice , String shard , String collectionName , int count ) { if ( slice != null ) { Collection < Replica > allReplicasForShard = slice . getReplicas ( ) ; if ( allReplicasForShard == null ) { throw new SolrException ( SolrException . ErrorCode . BAD_REQUEST , _STR + shard + _STR + collectionName ) ; } if ( allReplicasForShard . size ( ) == _NUM ) { throw new SolrException ( SolrException . ErrorCode . BAD_REQUEST , _STR + shard + _STR + collectionName + _STR ) ; } if ( allReplicasForShard . size ( ) <= count ) { throw new SolrException ( SolrException . ErrorCode . BAD_REQUEST , _STR + shard + _STR + collectionName + _STR + count + _STR + allReplicasForShard . size ( ) + _STR ) ; } } }
default ClassDeclaration asClass ( ) { throw new UnsupportedOperationException ( String . format ( _STR , this ) ) ; }
private static String partitionSpecToName ( Map < String , String > spec ) { StringBuilder sb = new StringBuilder ( ) ; for ( Map . Entry < String , String > entry : spec . entrySet ( ) ) { if ( sb . length ( ) != _NUM ) { sb . append ( _STR ) ; } sb . append ( entry . getKey ( ) + _STR + entry . getValue ( ) ) ; } return sb . toString ( ) ; }
public static InputStream toInputStream ( CharSequence input , Charset encoding ) { return toInputStream ( input . toString ( ) , encoding ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public void testHitEndAfterFind ( ) { hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; String floatRegex = getHexFloatRegex ( ) ; hitEndTest ( _BOOL , _STR , floatRegex , Double . toHexString ( - _NUM ) , _BOOL ) ; hitEndTest ( _BOOL , _STR , floatRegex , _STR + Double . toHexString ( Double . NaN ) + _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , floatRegex , Double . toHexString ( - _NUM ) + _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , floatRegex , _STR + Double . toHexString ( Double . MIN_VALUE ) + _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; }
@ Modifying @ Transactional public void deleteCheque ( @ PathVariable Long chequeID ) { chequeRepository . delete ( chequeID ) ; photoRepository . deleteByChequeId ( chequeID . toString ( ) ) ; }
public static synchronized double partialCorrelation ( TetradMatrix submatrix ) { try { TetradMatrix inverse = submatrix . inverse ( ) ; double a = - _NUM * inverse . get ( _NUM , _NUM ) ; double v0 = inverse . get ( _NUM , _NUM ) ; double v1 = inverse . get ( _NUM , _NUM ) ; double b = Math . sqrt ( v0 * v1 ) ; return a / b ; } catch ( Exception e ) { e . printStackTrace ( ) ; return Double . NaN ; } }
public void addColumn ( String name , String expr ) { Expression ex = ExpressionParser . parse ( expr ) ; Throwable t = ExpressionParser . getError ( ) ; if ( t != null ) { throw new RuntimeException ( t ) ; } else { addColumn ( name , ex ) ; } }
public void addPutAndGetTimeNanos ( long duration ) { putTimeNanos . addAndGet ( duration ) ; getTimeNanos . addAndGet ( duration ) ; if ( delegate != null ) delegate . addPutAndGetTimeNanos ( duration ) ; }
private float checkSaturationValid ( final float val ) { float tempval = val ; if ( val > _NUM ) { tempval = _NUM ; } if ( val < _NUM ) { tempval = _NUM ; } return tempval ; }
String parse ( String cellStr , int layoutConstant ) { return cellStr . split ( LayoutConstants . CELL_PTRN ) [ layoutConstant ] ; }
public void pseudoPropertyChange ( String propName , Object old , Object n ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + getSystemName ( ) + _STR + propName + _STR + n . toString ( ) ) ; } firePropertyChange ( propName , old , n ) ; }
public static String runCmd ( File directory , List < String > cmd , String errorMessage ) throws Exception { ProcessBuilder pb = new ProcessBuilder ( cmd ) ; pb . directory ( directory ) ; pb . redirectErrorStream ( _BOOL ) ; Process p = pb . start ( ) ; String s ; StringBuilder sb = new StringBuilder ( ) ; BufferedReader stdout = new BufferedReader ( new InputStreamReader ( p . getInputStream ( ) ) ) ; while ( ( s = stdout . readLine ( ) ) != null ) { logger . info ( s ) ; sb . append ( s ) ; sb . append ( _STR ) ; } String sbs = sb . toString ( ) ; int exitValue = p . waitFor ( ) ; if ( exitValue != _NUM ) throw new Exception ( errorMessage + _STR + exitValue + _STR + sbs ) ; return sbs ; }
@ Override public SelectableChannel selectableChannel ( ) { return socketChannel ; }
public void test_ConstructorIIIIII ( ) { Date d1 = new Date ( _NUM , _NUM , _NUM , _NUM , _NUM , _NUM ) ; Date d2 = new Date ( _NUM + d1 . getTimezoneOffset ( ) * _NUM * _NUM + _NUM * _NUM * _NUM + _NUM * _NUM + _NUM ) ; assertTrue ( _STR , d1 . equals ( d2 ) ) ; }
public static String fromTag ( ByteArrayTag tag ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( ARRAY_START ) ; boolean start = _BOOL ; for ( byte value : tag . getValue ( ) ) { ByteTag b = new ByteTag ( value ) ; if ( start ) { start = _BOOL ; } else { builder . append ( ELEMENT_SEPERATOR ) ; } builder . append ( fromTag ( b ) ) ; } builder . append ( ARRAY_END ) ; return builder . toString ( ) ; }
@ Override protected void addChooserFilters ( JFileChooser chooser ) { javax . swing . filechooser . FileNameExtensionFilter filter = new javax . swing . filechooser . FileNameExtensionFilter ( Bundle . getMessage ( _STR , _STR ) , _STR , _STR ) ; chooser . addChoosableFileFilter ( new javax . swing . filechooser . FileNameExtensionFilter ( _STR , _STR ) ) ; chooser . addChoosableFileFilter ( new javax . swing . filechooser . FileNameExtensionFilter ( _STR , _STR ) ) ; chooser . addChoosableFileFilter ( filter ) ; chooser . setFileFilter ( filter ) ; }
private static byte [ ] WindowsRegEnumValue1 ( int hKey , int valueIndex , int maxValueNameLength ) { byte [ ] result = WindowsRegEnumValue ( hKey , valueIndex , maxValueNameLength ) ; if ( result != null ) { return result ; } else { long sleepTime = INIT_SLEEP_TIME ; for ( int i = _NUM ; i < MAX_ATTEMPTS ; i ++ ) { try { Thread . sleep ( sleepTime ) ; } catch ( InterruptedException e ) { return result ; } sleepTime *= _NUM ; result = WindowsRegEnumValue ( hKey , valueIndex , maxValueNameLength ) ; if ( result != null ) { return result ; } } } return result ; }
public static DateTime parseRfc822 ( String str ) throws ParseException { Date date ; synchronized ( dateTimeFormat822 ) { try { date = dateTimeFormat822 . parse ( str ) ; } catch ( java . text . ParseException e ) { throw new ParseException ( e ) ; } } return new DateTime ( date ) ; }
public void testEmptyIndex ( ) throws Exception { IndexSearcher empty = newSearcher ( new MultiReader ( ) ) ; Query query = new TermQuery ( new Term ( _STR , _STR ) ) ; Sort sort = new Sort ( ) ; TopDocs td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; sort . setSort ( SortField . FIELD_DOC ) ; td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; sort . setSort ( new SortField ( _STR , SortField . Type . INT ) , SortField . FIELD_DOC ) ; td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; sort . setSort ( new SortField ( _STR , SortField . Type . STRING , _BOOL ) , SortField . FIELD_DOC ) ; td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; sort . setSort ( new SortField ( _STR , SortField . Type . STRING_VAL , _BOOL ) , SortField . FIELD_DOC ) ; td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; sort . setSort ( new SortField ( _STR , SortField . Type . FLOAT ) , new SortField ( _STR , SortField . Type . STRING ) ) ; td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; }
public Model validateModel ( Dataset dataset , URI shapesGraphURI , Resource minSeverity , boolean validateShapes , Function < RDFNode , String > labelFunction , ProgressMonitor monitor ) throws InterruptedException { if ( dataset . getDefaultModel ( ) == null ) { throw new IllegalArgumentException ( _STR ) ; } Model shapesModel = dataset . getNamedModel ( shapesGraphURI . toString ( ) ) ; if ( monitor != null ) { monitor . subTask ( _STR ) ; } List < Property > constraintProperties = SHACLUtil . getAllConstraintProperties ( validateShapes ) ; Map < Resource , List < SHConstraint > > map = buildShape2ConstraintsMap ( shapesModel , dataset . getDefaultModel ( ) , constraintProperties , validateShapes ) ; if ( monitor != null ) { monitor . subTask ( _STR ) ; } if ( monitor != null ) { monitor . beginTask ( _STR + map . size ( ) + _STR , map . size ( ) ) ; } Model results = JenaUtil . createMemoryModel ( ) ; results . setNsPrefixes ( dataset . getDefaultModel ( ) ) ; for ( Resource shape : map . keySet ( ) ) { for ( SHConstraint constraint : map . get ( shape ) ) { validateConstraintForShape ( dataset , shapesGraphURI , minSeverity , constraint , shape , results , labelFunction , monitor ) ; if ( monitor != null ) { monitor . worked ( _NUM ) ; if ( monitor . isCanceled ( ) ) { throw new InterruptedException ( ) ; } } } } return results ; }
public PdfPage addAnnotation ( PdfAnnotation annotation ) { return addAnnotation ( - _NUM , annotation , _BOOL ) ; }
public static String findPreferredIDP ( String realm , HttpServletRequest request ) { if ( request == null ) { return null ; } String succinctID = request . getParameter ( IFSConstants . PROVIDER_ID_KEY ) ; if ( ( succinctID == null ) || succinctID . length ( ) == _NUM ) { debug . message ( _STR ) ; return null ; } succinctID = succinctID . trim ( ) ; String preferredSuccinctId = null ; StringTokenizer st = new StringTokenizer ( succinctID , _STR ) ; while ( st . hasMoreTokens ( ) ) { preferredSuccinctId = st . nextToken ( ) ; if ( ( preferredSuccinctId . length ( ) < _NUM ) && st . hasMoreTokens ( ) ) { preferredSuccinctId = preferredSuccinctId + _STR + st . nextToken ( ) ; } } preferredSuccinctId = SAMLUtils . byteArrayToString ( Base64 . decode ( preferredSuccinctId ) ) ; return getProviderIDFromSuccinctID ( realm , preferredSuccinctId ) ; }
private void checkAndCreateDirectory ( final String directoryName ) { try { final File dir = new File ( directoryName ) ; if ( ! dir . exists ( ) && dir . mkdirs ( ) ) { _logger . debug ( _STR ) ; } } catch ( Exception ex ) { _logger . error ( _STR , ex . getMessage ( ) ) ; } }
@ SafeVarargs public final AssertSubscriber < T > assertValuesWith ( Consumer < T > ... expectations ) { if ( ! valuesStorage ) { throw new IllegalStateException ( _STR ) ; } final int expectedValueCount = expectations . length ; if ( expectedValueCount != values . size ( ) ) { throw new AssertionError ( _STR + expectedValueCount + _STR + valueCount , null ) ; } for ( int i = _NUM ; i < expectedValueCount ; i ++ ) { Consumer < T > consumer = expectations [ i ] ; T actualValue = values . get ( i ) ; consumer . accept ( actualValue ) ; } return this ; }
private boolean journalRebuildRequired ( ) { final int REDUNDANT_OP_COMPACT_THRESHOLD = _NUM ; return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries . size ( ) ; }
public int findEventPositionNearestTime ( Time time , long id ) { if ( mRowInfo == null ) { return _NUM ; } long millis = time . toMillis ( _BOOL ) ; long minDistance = Integer . MAX_VALUE ; long idFoundMinDistance = Integer . MAX_VALUE ; int minIndex = _NUM ; int idFoundMinIndex = _NUM ; int eventInTimeIndex = - _NUM ; int allDayEventInTimeIndex = - _NUM ; int allDayEventDay = _NUM ; int minDay = _NUM ; boolean idFound = _BOOL ; int len = mRowInfo . size ( ) ; for ( int index = _NUM ; index < len ; index ++ ) { RowInfo row = mRowInfo . get ( index ) ; if ( row . mType == TYPE_DAY ) { continue ; } if ( row . mEventId == id ) { if ( row . mEventStartTimeMilli == millis ) { return index ; } long distance = Math . abs ( millis - row . mEventStartTimeMilli ) ; if ( distance < idFoundMinDistance ) { idFoundMinDistance = distance ; idFoundMinIndex = index ; } idFound = _BOOL ; } if ( ! idFound ) { if ( millis >= row . mEventStartTimeMilli && millis <= row . mEventEndTimeMilli ) { if ( row . mAllDay ) { if ( allDayEventInTimeIndex == - _NUM ) { allDayEventInTimeIndex = index ; allDayEventDay = row . mDay ; } } else if ( eventInTimeIndex == - _NUM ) { eventInTimeIndex = index ; } } else if ( eventInTimeIndex == - _NUM ) { long distance = Math . abs ( millis - row . mEventStartTimeMilli ) ; if ( distance < minDistance ) { minDistance = distance ; minIndex = index ; minDay = row . mDay ; } } } } if ( idFound ) { return idFoundMinIndex ; } if ( eventInTimeIndex != - _NUM ) { return eventInTimeIndex ; } else if ( allDayEventInTimeIndex != - _NUM && minDay != allDayEventDay ) { return allDayEventInTimeIndex ; } return minIndex ; }
final public void println ( float v ) { String s = String . valueOf ( v ) ; write ( s , _NUM , s . length ( ) ) ; println ( ) ; }
private static TranslationResult extractRegister ( final ITranslationEnvironment environment , final long offset , final String subRegister ) throws InternalTranslationException { final ArrayList < ReilInstruction > instructions = new ArrayList < ReilInstruction > ( ) ; final String parentRegister = getParentRegister ( subRegister ) ; final OperandSize archSize = environment . getArchitectureSize ( ) ; if ( isHigher8BitRegister ( subRegister ) ) { final String maskResult = environment . getNextVariableString ( ) ; final String shiftResult = environment . getNextVariableString ( ) ; instructions . add ( ReilHelpers . createAnd ( offset , archSize , parentRegister , OperandSize . WORD , _STR , OperandSize . WORD , maskResult ) ) ; instructions . add ( ReilHelpers . createBsh ( offset + _NUM , OperandSize . WORD , maskResult , OperandSize . WORD , _STR , OperandSize . BYTE , shiftResult ) ) ; return new TranslationResult ( shiftResult , OperandSize . BYTE , TranslationResultType . REGISTER , null , instructions , offset ) ; } else { final OperandSize subRegisterSize = getRegisterSize ( subRegister ) ; final String mask = String . valueOf ( TranslationHelpers . getAllBitsMask ( subRegisterSize ) ) ; final String result = environment . getNextVariableString ( ) ; instructions . add ( ReilHelpers . createAnd ( offset , archSize , parentRegister , subRegisterSize , mask , subRegisterSize , result ) ) ; return new TranslationResult ( result , subRegisterSize , TranslationResultType . REGISTER , null , instructions , offset ) ; } }
public void onLoginFailure ( Map requestParamsMap , HttpServletRequest req , HttpServletResponse res ) throws AuthenticationException { debug . message ( _STR ) ; }
public Interceptor [ ] buildMethodInterceptors ( Method method ) { Interceptors before = method . getAnnotation ( Interceptors . class ) ; return before != null ? createInterceptors ( before ) : NULL_INTERCEPTOR_ARRAY ; }
protected String buildQualifierRegex ( String qualifierValue ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( _STR ) ; sb . append ( qualifierValue ) ; sb . append ( _STR ) ; return sb . toString ( ) ; }
private static void lookForChanges ( DataObject left , DataObject right , HashMap < String , Change > changes , Set < String > included , Set < String > excluded , Set < String > contained ) { Class refClass = left . getClass ( ) ; Method [ ] methods = refClass . getMethods ( ) ; for ( Method method : methods ) { boolean contain = _BOOL ; Name nameAnn = method . getAnnotation ( Name . class ) ; if ( nameAnn == null ) { continue ; } String key = nameAnn . value ( ) ; if ( contained != null && contained . contains ( key ) ) { contain = _BOOL ; } else if ( included != null && ! included . contains ( key ) ) { continue ; } if ( excluded . contains ( key ) ) { continue ; } Class type = method . getReturnType ( ) ; try { Object obja = method . invoke ( left ) ; Object objb = method . invoke ( right ) ; if ( type == StringSet . class ) { if ( contain ) { analyzeNewStringSetContainsOldStringSetValues ( ( StringSet ) obja , ( StringSet ) objb , key , changes ) ; } else { analyzeStringSets ( ( StringSet ) obja , ( StringSet ) objb , key , changes ) ; } } else if ( type == StringMap . class ) { analyzeStringMaps ( ( StringMap ) obja , ( StringMap ) objb , key , changes ) ; } else if ( type == StringSetMap . class ) { analyzeStringSetMaps ( ( StringSetMap ) obja , ( StringSetMap ) objb , key , changes ) ; } else { if ( ! isEqual ( obja , objb ) ) { Change change = new Change ( key , obja , objb , nameAnn . value ( ) ) ; changes . put ( key , change ) ; } } } catch ( IllegalAccessException ex ) { throw new ServiceCodeException ( ServiceCode . UNFORSEEN_ERROR , ex , ex . getMessage ( ) , new String [ ] { } ) ; } catch ( InvocationTargetException ex ) { throw new ServiceCodeException ( ServiceCode . UNFORSEEN_ERROR , ex , ex . getMessage ( ) , new String [ ] { } ) ; } } }
static void removeAllPhis ( IR ir ) { for ( Instruction s = ir . firstInstructionInCodeOrder ( ) , sentinel = ir . lastInstructionInCodeOrder ( ) , nextInstr = null ; s != sentinel ; s = nextInstr ) { nextInstr = s . nextInstructionInCodeOrder ( ) ; if ( Phi . conforms ( s ) ) s . remove ( ) ; } }
protected int countToken ( String token , String target ) { int tokenIndex = _NUM ; int count = _NUM ; while ( tokenIndex != - _NUM ) { tokenIndex = target . indexOf ( token , tokenIndex ) ; if ( tokenIndex > - _NUM ) { tokenIndex ++ ; count ++ ; } } return count ; }
private Map < TestCase , Set < TestFitnessFunction > > initializeCoverageMapFromTests ( List < TestCase > tests ) { Map < TestCase , Set < TestFitnessFunction > > testToGoals = new LinkedHashMap < > ( ) ; for ( TestCase test : tests ) { testToGoals . put ( test , filterSupportedGoals ( new LinkedHashSet < > ( test . getCoveredGoals ( ) ) ) ) ; } return testToGoals ; }
public Interceptor [ ] buildRouteInterceptors ( Interceptor [ ] defaultInters , Interceptor [ ] resourceInters , Class < ? extends Resource > resourceClass , Interceptor [ ] methodInters , Method method ) { List < Interceptor > allInters = new ArrayList < Interceptor > ( ) ; for ( Interceptor defaultInter : defaultInters ) { allInters . add ( defaultInter ) ; } for ( Interceptor resourceInter : resourceInters ) { allInters . add ( resourceInter ) ; } for ( Interceptor methodInter : methodInters ) { allInters . add ( methodInter ) ; } Class < ? extends Interceptor > [ ] resourceClears = getResourceClears ( resourceClass ) ; Class < ? extends Interceptor > [ ] methodClears = getMethodClears ( method ) ; if ( ( resourceClears != null && resourceClears . length > _NUM ) || ( methodClears != null && methodClears . length > _NUM ) ) { for ( int i = _NUM ; i < allInters . size ( ) ; i ++ ) { i = clearInterceptor ( allInters , resourceClears , i ) ; i = clearInterceptor ( allInters , methodClears , i ) ; } } return allInters . toArray ( new Interceptor [ allInters . size ( ) ] ) ; }
public static boolean checkGMLFootprint ( String footprint ) { try { Configuration configuration = new GMLConfiguration ( ) ; Parser parser = new Parser ( configuration ) ; Geometry geom = ( Geometry ) parser . parse ( new InputSource ( new StringReader ( footprint ) ) ) ; if ( ! geom . isEmpty ( ) && ! geom . isValid ( ) ) { logger . error ( _STR ) ; return _BOOL ; } } catch ( Exception e ) { logger . error ( _STR + e . getMessage ( ) ) ; return _BOOL ; } return _BOOL ; }
public static void main ( String [ ] args ) { double preBuffer = Double . parseDouble ( args [ _NUM ] ) ; double postBuffer = Double . parseDouble ( args [ _NUM ] ) ; run ( args [ _NUM ] , args [ _NUM ] , args [ _NUM ] , args [ _NUM ] , preBuffer , postBuffer ) ; }
public static double quantile ( double p , double k , double theta , double shift ) { return Math . exp ( GammaDistribution . quantile ( p , k , theta ) ) + shift ; }
public static CipherParameters makePBEMacParameters ( BCPBEKey pbeKey , AlgorithmParameterSpec spec ) { if ( ( spec == null ) || ! ( spec instanceof PBEParameterSpec ) ) { throw new IllegalArgumentException ( _STR ) ; } PBEParameterSpec pbeParam = ( PBEParameterSpec ) spec ; PBEParametersGenerator generator = makePBEGenerator ( pbeKey . getType ( ) , pbeKey . getDigest ( ) ) ; byte [ ] key = pbeKey . getEncoded ( ) ; CipherParameters param ; if ( pbeKey . shouldTryWrongPKCS12 ( ) ) { key = new byte [ _NUM ] ; } generator . init ( key , pbeParam . getSalt ( ) , pbeParam . getIterationCount ( ) ) ; param = generator . generateDerivedMacParameters ( pbeKey . getKeySize ( ) ) ; for ( int i = _NUM ; i != key . length ; i ++ ) { key [ i ] = _NUM ; } return param ; }
public OrionEditorInit ( final TextEditorConfiguration configuration , final CodeAssistantFactory codeAssistantFactory , final QuickAssistAssistant quickAssist , final OrionEditorPresenter textEditor ) { this . configuration = configuration ; this . codeAssistantFactory = codeAssistantFactory ; this . quickAssist = quickAssist ; this . textEditor = textEditor ; }
final void putByte ( int offset , byte value ) { unsafe . putByte ( offset + address , value ) ; }
public final void addValidationError ( String error ) { validationErrors . add ( error ) ; }
public static void parseOptionSettingTo ( String optionSetting , Map < String , String > dst ) { int eqIndex = optionSetting . indexOf ( _STR ) ; if ( eqIndex == - _NUM ) { throw new InternalError ( _STR + optionSetting ) ; } dst . put ( optionSetting . substring ( _NUM , eqIndex ) , optionSetting . substring ( eqIndex + _NUM ) ) ; }
public BigInteger generateClientCredentials ( byte [ ] salt , byte [ ] identity , byte [ ] password ) { this . x = SRP6Util . calculateX ( digest , N , salt , identity , password ) ; this . a = selectPrivateValue ( ) ; this . A = g . modPow ( a , N ) ; return A ; }
public void build ( SolrCore core , SolrIndexSearcher searcher ) throws IOException { LOG . info ( _STR + name + _STR ) ; dictionary = dictionaryFactory . create ( core , searcher ) ; lookup . build ( dictionary ) ; if ( storeDir != null ) { File target = getStoreFile ( ) ; if ( ! lookup . store ( new FileOutputStream ( target ) ) ) { LOG . error ( _STR ) ; } else { LOG . info ( _STR + target . getAbsolutePath ( ) ) ; } } }
public void start ( String json ) { guidedTourSteps . clear ( ) ; GuidedTourConfiguration configuration = dtoFactory . createDtoFromJson ( json , GuidedTourConfiguration . class ) ; log . setDebugMode ( configuration . getDebugMode ( ) ) ; this . guidedTourSteps = configuration . getSteps ( ) ; this . tourName = configuration . getName ( ) ; if ( this . tourName == null || tourName . isEmpty ( ) ) { tourName = _STR ; } this . hasWelcomeStep = configuration . getHasWelcomeStep ( ) ; startTour ( ) ; }
private void connect ( ) throws IOException { JMXServiceURL jmxUrl = new JMXServiceURL ( String . format ( fmtUrl , host , port ) ) ; Map < String , Object > env = new HashMap < String , Object > ( ) ; if ( username != null ) { String [ ] creds = { username , password } ; env . put ( JMXConnector . CREDENTIALS , creds ) ; } env . put ( _STR , getRMIClientSocketFactory ( ) ) ; jmxc = JMXConnectorFactory . connect ( jmxUrl , env ) ; mbeanServerConn = jmxc . getMBeanServerConnection ( ) ; try { ObjectName name = new ObjectName ( ssObjName ) ; ssProxy = JMX . newMBeanProxy ( mbeanServerConn , name , StorageServiceMBean . class ) ; name = new ObjectName ( MessagingService . MBEAN_NAME ) ; msProxy = JMX . newMBeanProxy ( mbeanServerConn , name , MessagingServiceMBean . class ) ; name = new ObjectName ( StreamManagerMBean . OBJECT_NAME ) ; streamProxy = JMX . newMBeanProxy ( mbeanServerConn , name , StreamManagerMBean . class ) ; name = new ObjectName ( CompactionManager . MBEAN_OBJECT_NAME ) ; compactionProxy = JMX . newMBeanProxy ( mbeanServerConn , name , CompactionManagerMBean . class ) ; name = new ObjectName ( FailureDetector . MBEAN_NAME ) ; fdProxy = JMX . newMBeanProxy ( mbeanServerConn , name , FailureDetectorMBean . class ) ; name = new ObjectName ( CacheService . MBEAN_NAME ) ; cacheService = JMX . newMBeanProxy ( mbeanServerConn , name , CacheServiceMBean . class ) ; name = new ObjectName ( StorageProxy . MBEAN_NAME ) ; spProxy = JMX . newMBeanProxy ( mbeanServerConn , name , StorageProxyMBean . class ) ; name = new ObjectName ( HintedHandOffManager . MBEAN_NAME ) ; hhProxy = JMX . newMBeanProxy ( mbeanServerConn , name , HintedHandOffManagerMBean . class ) ; name = new ObjectName ( GCInspector . MBEAN_NAME ) ; gcProxy = JMX . newMBeanProxy ( mbeanServerConn , name , GCInspectorMXBean . class ) ; name = new ObjectName ( Gossiper . MBEAN_NAME ) ; gossProxy = JMX . newMBeanProxy ( mbeanServerConn , name , GossiperMBean . class ) ; } catch ( MalformedObjectNameException e ) { throw new RuntimeException ( _STR , e ) ; } memProxy = ManagementFactory . newPlatformMXBeanProxy ( mbeanServerConn , ManagementFactory . MEMORY_MXBEAN_NAME , MemoryMXBean . class ) ; runtimeProxy = ManagementFactory . newPlatformMXBeanProxy ( mbeanServerConn , ManagementFactory . RUNTIME_MXBEAN_NAME , RuntimeMXBean . class ) ; }
private static void runRandomTest ( final int wordLength , final int bytePadding , final int wordCount ) { final long seed = randomLong ( ) ; final Random random = new Random ( seed ) ; final Random verificationRandom = new Random ( seed ) ; final long wordMask ; if ( wordLength == _NUM ) { wordMask = ~ _NUM ; } else { wordMask = ( _NUM << wordLength ) - _NUM ; } final BigEndianAscendingWordSerializer serializer = new BigEndianAscendingWordSerializer ( wordLength , wordCount , bytePadding ) ; for ( int i = _NUM ; i < wordCount ; i ++ ) { final long value = random . nextLong ( ) & wordMask ; serializer . writeWord ( value ) ; } final byte [ ] bytes = serializer . getBytes ( ) ; final BigEndianAscendingWordDeserializer deserializer = new BigEndianAscendingWordDeserializer ( wordLength , bytePadding , bytes ) ; assertEquals ( deserializer . totalWordCount ( ) , wordCount ) ; for ( int i = _NUM ; i < wordCount ; i ++ ) { assertEquals ( deserializer . readWord ( ) , ( verificationRandom . nextLong ( ) & wordMask ) ) ; } }
public void addListener ( T listener ) { if ( listener == null ) { throw new NullPointerException ( ) ; } listeners . add ( listener ) ; }
public static MaildirMessageName createUniqueName ( MaildirFolder parentFolder , long size ) { String timestamp = String . valueOf ( System . currentTimeMillis ( ) ) ; timestamp = timestamp . substring ( _NUM , timestamp . length ( ) - _NUM ) ; StringBuilder uniquePart = new StringBuilder ( ) ; uniquePart . append ( Integer . toHexString ( random . nextInt ( ) ) ) ; uniquePart . append ( timestamp . substring ( timestamp . length ( ) - _NUM ) ) ; uniquePart . append ( processName ) ; uniquePart . append ( getNextDeliveryNumber ( ) ) ; String sizeString = _STR + String . valueOf ( size ) ; String fullName = timestamp + _STR + uniquePart . toString ( ) + _STR + currentHostname + sizeString ; MaildirMessageName uniqueName = new MaildirMessageName ( parentFolder , fullName ) ; uniqueName . timestamp = timestamp ; uniqueName . uniqueString = uniquePart . toString ( ) ; uniqueName . hostname = currentHostname ; uniqueName . sizeString = sizeString ; uniqueName . isSplit = _BOOL ; uniqueName . size = size ; return uniqueName ; }
private float clampMag ( float value , float absMin , float absMax ) { final float absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
@ Override public void handleClick ( int x , int y , PlotRenderingInfo info ) { }
private void adjustBCIndex ( Instruction barrier ) { NormalMethod source = barrier . position ( ) . method ; if ( source . isForOsrSpecialization ( ) ) { barrier . adjustBytecodeIndex ( - source . getOsrPrologueLength ( ) ) ; } }
@ Override public String toString ( ) { StringBuilder risul = new StringBuilder ( _NUM ) ; risul . append ( _STR ) ; risul . append ( _STR ) ; return risul . toString ( ) ; }
public static long [ ] interpose ( long [ ] vector , int vectorLen , int offset , int len ) { long [ ] updated = create ( vectorLen + len ) ; int idx = offset > > _NUM ; System . arraycopy ( vector , _NUM , updated , _NUM , idx ) ; if ( idx < vector . length ) { int delta = offset & _NUM ; updated [ idx ] |= vector [ idx ] & maskBelow ( delta ) ; } copy ( vector , offset , updated , offset + len , vectorLen - offset ) ; return updated ; }
public static File createTemporaryDirectory ( String prefix ) { while ( _BOOL ) { String candidateName = prefix + TEMPORARY_DIRECTORY_PRNG . nextInt ( ) ; File result = new File ( System . getProperty ( _STR ) , candidateName ) ; if ( result . mkdir ( ) ) { return result ; } } }
Task < Void > synchronizeAllAuthDataAsync ( ) { Map < String , Map < String , String > > authData ; synchronized ( mutex ) { if ( ! isCurrentUser ( ) ) { return Task . forResult ( null ) ; } authData = getAuthData ( ) ; } List < Task < Void > > tasks = new ArrayList < > ( authData . size ( ) ) ; for ( String authType : authData . keySet ( ) ) { tasks . add ( synchronizeAuthDataAsync ( authType ) ) ; } return Task . whenAll ( tasks ) ; }
public static Element createElementInEncryptionSpace ( Document doc , String elementName ) { if ( doc == null ) { throw new RuntimeException ( _STR ) ; } if ( ( xencPrefix == null ) || ( xencPrefix . length ( ) == _NUM ) ) { return doc . createElementNS ( EncryptionConstants . EncryptionSpecNS , elementName ) ; } return doc . createElementNS ( EncryptionConstants . EncryptionSpecNS , xencPrefix + _STR + elementName ) ; }
void scrapActiveViews ( ) { final View [ ] activeViews = mActiveViews ; final boolean multipleScraps = mViewTypeCount > _NUM ; ArrayList < View > scrapViews = mCurrentScrap ; final int count = activeViews . length ; for ( int i = count - _NUM ; i >= _NUM ; i -- ) { final View victim = activeViews [ i ] ; if ( victim != null ) { final LayoutParams lp = ( LayoutParams ) victim . getLayoutParams ( ) ; activeViews [ i ] = null ; final boolean scrapHasTransientState = ViewCompat . hasTransientState ( victim ) ; int viewType = lp . viewType ; if ( ! shouldRecycleViewType ( viewType ) || scrapHasTransientState ) { if ( viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER || scrapHasTransientState ) { removeDetachedView ( victim , _BOOL ) ; } if ( scrapHasTransientState ) { if ( mTransientStateViews == null ) { mTransientStateViews = new SparseArrayCompat < View > ( ) ; } mTransientStateViews . put ( mFirstActivePosition + i , victim ) ; } continue ; } if ( multipleScraps ) { scrapViews = mScrapViews [ viewType ] ; } lp . position = mFirstActivePosition + i ; scrapViews . add ( victim ) ; } } pruneScrapViews ( ) ; }
private void drawWind ( Canvas canvas , float y , float xOffset ) { float cof = ( mScreenWidth + xOffset ) / ( LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT ) ; float time = mLoadingAnimationTime ; if ( mLastAnimationTime - mLoadingAnimationTime > _NUM ) { mInverseDirection = _BOOL ; time = ( LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT ) - mLoadingAnimationTime ; } else { mNewWindSet = _BOOL ; mInverseDirection = _BOOL ; } float x = ( mScreenWidth - ( time * cof ) ) + xOffset - mWindLineWidth ; float xEnd = x + mWindLineWidth ; canvas . drawLine ( x , y , xEnd , y , mWindPaint ) ; }
private boolean hasProxySettings ( Properties settings ) { String proxyHost = settings . getProperty ( _STR , null ) ; return proxyHost != null && proxyHost . length ( ) > _NUM ; }
public boolean equalsDefault ( ) { return ( Double . doubleToLongBits ( value ) == _NUM ) ; }
public static Map < String , String > parseKeyAndValueToMap ( String source , boolean ignoreSpace ) { return parseKeyAndValueToMap ( source , DEFAULT_KEY_AND_VALUE_SEPARATOR , DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR , ignoreSpace ) ; }
@ Override protected void onSizeChanged ( int w , int h , int oldw , int oldh ) { super . onSizeChanged ( w , h , oldw , oldh ) ; setupBounds ( w , h ) ; setupPaints ( ) ; invalidate ( ) ; }
private void needNewBuffer ( int newcount ) { if ( currentBufferIndex < buffers . size ( ) - _NUM ) { filledBufferSum += currentBuffer . length ; currentBufferIndex ++ ; currentBuffer = buffers . get ( currentBufferIndex ) ; } else { int newBufferSize ; if ( currentBuffer == null ) { newBufferSize = newcount ; filledBufferSum = _NUM ; } else { newBufferSize = Math . max ( currentBuffer . length << _NUM , newcount - filledBufferSum ) ; filledBufferSum += currentBuffer . length ; } currentBufferIndex ++ ; currentBuffer = new byte [ newBufferSize ] ; buffers . add ( currentBuffer ) ; } }
@ Nullable public static WebsiteAddress create ( String originOrHostOrPattern ) { if ( originOrHostOrPattern == null || originOrHostOrPattern . isEmpty ( ) ) { return null ; } if ( originOrHostOrPattern . startsWith ( ANY_SUBDOMAIN_PATTERN ) ) { String origin = null ; String scheme = null ; String host = originOrHostOrPattern . substring ( ANY_SUBDOMAIN_PATTERN . length ( ) ) ; boolean omitProtocolAndPort = _BOOL ; return new WebsiteAddress ( originOrHostOrPattern , origin , scheme , host , omitProtocolAndPort ) ; } if ( originOrHostOrPattern . indexOf ( SCHEME_SUFFIX ) != - _NUM ) { Uri uri = Uri . parse ( originOrHostOrPattern ) ; String origin = trimTrailingBackslash ( originOrHostOrPattern ) ; boolean omitProtocolAndPort = HTTP_SCHEME . equals ( uri . getScheme ( ) ) && ( uri . getPort ( ) == - _NUM || uri . getPort ( ) == _NUM ) ; return new WebsiteAddress ( originOrHostOrPattern , origin , uri . getScheme ( ) , uri . getHost ( ) , omitProtocolAndPort ) ; } String origin = null ; String scheme = null ; boolean omitProtocolAndPort = _BOOL ; return new WebsiteAddress ( originOrHostOrPattern , origin , scheme , originOrHostOrPattern , omitProtocolAndPort ) ; }
public void test_filter_001 ( ) throws IOException { final File basefile = File . createTempFile ( getName ( ) , _STR ) ; try { final String basename = basefile . toString ( ) ; final NameAndExtensionFilter logFilter = new NameAndExtensionFilter ( basename , _STR ) ; assertSameFiles ( new File [ ] { } , logFilter . getFiles ( ) ) ; } finally { basefile . delete ( ) ; } }
public void resetTeleMissileAttacks ( ) { pendingTeleMissileAttacks . removeAllElements ( ) ; }
public int addPadding ( byte [ ] in , int inOff ) { byte code = ( byte ) ( in . length - inOff ) ; while ( inOff < ( in . length - _NUM ) ) { in [ inOff ] = ( byte ) random . nextInt ( ) ; inOff ++ ; } in [ inOff ] = code ; return code ; }
public void addCommands ( PDFPage page , Matrix extra ) { synchronized ( commands ) { addPush ( ) ; if ( extra != null ) { addXform ( extra ) ; } commands . addAll ( page . getCommands ( ) ) ; addPop ( ) ; } updateImages ( ) ; }
public String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; char [ ] separator = { _STR , _STR } ; int n = rows . length ; for ( int i = _NUM ; i < n ; i ++ ) { separator [ _NUM ] = _STR ; for ( int j = _NUM ; j <= i ; j ++ ) { sb . append ( separator ) ; sb . append ( rows [ i ] [ j ] ) ; separator [ _NUM ] = _STR ; } sb . append ( _STR ) ; sb . append ( _STR ) ; } return sb . toString ( ) ; }
public void addLast ( StatementSequence statements ) { if ( statements != null ) { sequence . addAll ( statements . sequence ) ; } }
private void notifyActivityStateChanged ( Bundle bundle ) { if ( ! mRecords . isEmpty ( ) ) { Log . d ( TAG , _STR + mRecords . size ( ) ) ; synchronized ( mRecords ) { Iterator < Record > iterator = mRecords . iterator ( ) ; while ( iterator . hasNext ( ) ) { Record record = ( Record ) iterator . next ( ) ; FmRadioListener listener = record . mCallback ; if ( listener == null ) { iterator . remove ( ) ; return ; } listener . onCallBack ( bundle ) ; } } } }
public double elasticity ( final double spot ) { final double val = value ( ) ; final double del = delta ( spot ) ; if ( val > Constants . QL_EPSILON ) return del / val * spot ; else if ( Math . abs ( del ) < Constants . QL_EPSILON ) return _NUM ; else if ( del > _NUM ) return Double . MAX_VALUE ; else return Double . MIN_VALUE ; }
private byte [ ] entityToBytes ( HttpEntity entity , Request request ) throws IOException , ServerError { PoolingByteArrayOutputStream bytes = new PoolingByteArrayOutputStream ( mPool , ( int ) entity . getContentLength ( ) ) ; byte [ ] buffer = null ; try { InputStream in = entity . getContent ( ) ; if ( in == null ) { throw new ServerError ( ) ; } buffer = mPool . getBuf ( _NUM ) ; int progress = _NUM ; int count ; while ( ( count = in . read ( buffer ) ) != - _NUM ) { bytes . write ( buffer , _NUM , count ) ; progress += count ; request . progressUpdate ( progress ) ; } return bytes . toByteArray ( ) ; } finally { try { entity . consumeContent ( ) ; } catch ( IOException e ) { VinciLog . d ( _STR ) ; } mPool . returnBuf ( buffer ) ; bytes . close ( ) ; } }
@ Override public Foo fetchByUuid_First ( String uuid , OrderByComparator < Foo > orderByComparator ) { List < Foo > list = findByUuid ( uuid , _NUM , _NUM , orderByComparator ) ; if ( ! list . isEmpty ( ) ) { return list . get ( _NUM ) ; } return null ; }
public static float roundDecimal ( float value ) { return roundDecimal ( value , Math . log10 ( INT_PRECISION ) ) ; }
@ AssistedInject public RunnerImpl ( @ NotNull RunnerLocalizationConstant locale , @ NotNull RunnerCounter runnerCounter , @ NotNull GetEnvironmentsUtil util , @ NotNull @ Assisted RunOptions runOptions , @ NotNull @ Assisted Scope environmentScope , @ Nullable @ Assisted String environmentName ) { this . runOptions = runOptions ; this . ram = runOptions . getMemorySize ( ) ; this . title = RUNNER_NAME + runnerCounter . getRunnerNumber ( ) + ( environmentName == null ? _STR : _STR + getCorrectName ( environmentName ) ) ; this . activeTab = locale . runnerTabConsole ( ) ; this . status = IN_QUEUE ; this . scope = environmentScope ; creationTime = System . currentTimeMillis ( ) ; String environmentId = runOptions . getEnvironmentId ( ) ; if ( environmentId == null || environmentId . startsWith ( _STR ) ) { this . type = util . getType ( ) ; } else { this . type = util . getCorrectCategoryName ( runOptions . getEnvironmentId ( ) ) ; } if ( environmentId != null ) { runOptions . setEnvironmentId ( environmentId ) ; } }
public String globalInfo ( ) { return _STR + _STR ; }
public static boolean isWindowsMe ( ) { return osName . indexOf ( _STR ) > - _NUM && osVersion . equals ( _STR ) ; }
private String dateToString ( Date input ) { if ( input == null ) { return null ; } else { return input . toString ( ) ; } }
private static int componentSize ( Component component , FormSpec formSpec , int cellSize , FormLayout . Measure minMeasure , FormLayout . Measure prefMeasure ) { if ( formSpec == null ) { return prefMeasure . sizeOf ( component ) ; } else if ( formSpec . getSize ( ) == Sizes . MINIMUM ) { return minMeasure . sizeOf ( component ) ; } else if ( formSpec . getSize ( ) == Sizes . PREFERRED ) { return prefMeasure . sizeOf ( component ) ; } else { return Math . min ( cellSize , prefMeasure . sizeOf ( component ) ) ; } }
protected synchronized void start ( long curPrimaryGen ) throws IOException { if ( state . equals ( _STR ) == _BOOL ) { throw new IllegalStateException ( _STR ) ; } message ( _STR ) ; try { String segmentsFileName = SegmentInfos . getLastCommitSegmentsFileName ( dir ) ; long maxPendingGen = - _NUM ; for ( String fileName : dir . listAll ( ) ) { if ( fileName . startsWith ( IndexFileNames . PENDING_SEGMENTS ) ) { long gen = Long . parseLong ( fileName . substring ( IndexFileNames . PENDING_SEGMENTS . length ( ) + _NUM ) , Character . MAX_RADIX ) ; if ( gen > maxPendingGen ) { maxPendingGen = gen ; } } } SegmentInfos infos ; if ( segmentsFileName == null ) { infos = new SegmentInfos ( ) ; message ( _STR ) ; } else { message ( _STR + segmentsFileName ) ; infos = SegmentInfos . readCommit ( dir , segmentsFileName ) ; message ( _STR + infos . toString ( ) + _STR + infos . getVersion ( ) ) ; Collection < String > indexFiles = infos . files ( _BOOL ) ; lastCommitFiles . add ( segmentsFileName ) ; lastCommitFiles . addAll ( indexFiles ) ; deleter . incRef ( lastCommitFiles ) ; lastNRTFiles . addAll ( indexFiles ) ; deleter . incRef ( lastNRTFiles ) ; message ( _STR + lastCommitFiles ) ; message ( _STR + lastNRTFiles ) ; } message ( _STR + Arrays . toString ( dir . listAll ( ) ) ) ; deleter . deleteUnknownFiles ( segmentsFileName ) ; message ( _STR + Arrays . toString ( dir . listAll ( ) ) ) ; String s = infos . getUserData ( ) . get ( PRIMARY_GEN_KEY ) ; long myPrimaryGen ; if ( s == null ) { assert infos . size ( ) == _NUM ; myPrimaryGen = - _NUM ; } else { myPrimaryGen = Long . parseLong ( s ) ; } message ( _STR + myPrimaryGen ) ; boolean doCommit ; if ( infos . size ( ) > _NUM && myPrimaryGen != - _NUM && myPrimaryGen != curPrimaryGen ) { assert myPrimaryGen < curPrimaryGen ; final long initSyncStartNS = System . nanoTime ( ) ; message ( _STR + myPrimaryGen + _STR + curPrimaryGen + _STR ) ; CopyJob job = null ; message ( _STR + segmentsFileName ) ; assert deleter . getRefCount ( segmentsFileName ) == _NUM ; deleter . decRef ( Collections . singleton ( segmentsFileName ) ) ; if ( dir instanceof FSDirectory && ( ( FSDirectory ) dir ) . checkPendingDeletions ( ) ) { throw new RuntimeException ( _STR + segmentsFileName + _STR ) ; } boolean didRemove = lastCommitFiles . remove ( segmentsFileName ) ; assert didRemove ; while ( _BOOL ) { job = newCopyJob ( _STR + name ( ) + _STR + infos . getVersion ( ) , null , null , _BOOL , null ) ; job . start ( ) ; message ( _STR + job . getCopyState ( ) . version ) ; try { job . runBlocking ( ) ; job . finish ( ) ; break ; } catch ( IOException ioe ) { job . cancel ( _STR , ioe ) ; if ( ioe . getMessage ( ) . contains ( _STR ) ) { message ( _STR + ioe + _STR ) ; } else { throw ioe ; } } } lastPrimaryGen = job . getCopyState ( ) . primaryGen ; byte [ ] infosBytes = job . getCopyState ( ) . infosBytes ; SegmentInfos syncInfos = SegmentInfos . readCommit ( dir , new BufferedChecksumIndexInput ( new ByteArrayIndexInput ( _STR , job . getCopyState ( ) . infosBytes ) ) , job . getCopyState ( ) . gen ) ; syncInfos . updateGeneration ( infos ) ; infos = syncInfos ; assert infos . getVersion ( ) == job . getCopyState ( ) . version ; message ( _STR + infos . getVersion ( ) + _STR + infos . toString ( ) ) ; message ( _STR + job . getFileNames ( ) ) ; deleter . incRef ( job . getFileNames ( ) ) ; message ( _STR + lastNRTFiles ) ; deleter . decRef ( lastNRTFiles ) ; lastNRTFiles . clear ( ) ; lastNRTFiles . addAll ( job . getFileNames ( ) ) ; message ( _STR + lastNRTFiles ) ; lastFileMetaData = job . getCopyState ( ) . files ; message ( String . format ( Locale . ROOT , _STR , id , ( System . nanoTime ( ) - initSyncStartNS ) / _NUM , bytesToString ( job . getTotalBytesCopied ( ) ) , job . getCopyState ( ) . version ) ) ; doCommit = _BOOL ; } else { doCommit = _BOOL ; lastPrimaryGen = curPrimaryGen ; message ( _STR ) ; } if ( infos . getGeneration ( ) < maxPendingGen ) { message ( _STR + infos . getGeneration ( ) + _STR + maxPendingGen ) ; infos . setNextWriteGeneration ( maxPendingGen ) ; } sendNewReplica ( ) ; mgr = new SegmentInfosSearcherManager ( dir , this , infos , searcherFactory ) ; IndexSearcher searcher = mgr . acquire ( ) ; try { int hitCount = searcher . count ( new TermQuery ( new Term ( _STR , _STR ) ) ) ; message ( _STR + hitCount + _STR + ( ( DirectoryReader ) searcher . getIndexReader ( ) ) . getVersion ( ) ) ; } finally { mgr . release ( searcher ) ; } if ( doCommit ) { commit ( ) ; } message ( _STR ) ; state = _STR ; } catch ( Throwable t ) { if ( t . getMessage ( ) . startsWith ( _STR ) == _BOOL ) { message ( _STR ) ; t . printStackTrace ( printStream ) ; } else { dir . close ( ) ; } IOUtils . reThrow ( t ) ; } }
public static boolean isSameElementType ( ASTNode node1 , ASTNode node2 ) { return node1 != null && node2 != null && node1 . getElementType ( ) == node1 . getElementType ( ) ; }
@ Override public LogMessage readNextLogMessage ( ) { try { if ( reader == null ) { return null ; } while ( _BOOL ) { String line = reader . readLine ( ) ; if ( line == null ) { close ( ) ; if ( currentLog != null && matchRegex ( currentLog ) ) { incrementLogCount ( currentLog ) ; return currentLog ; } return null ; } fileLineNumber ++ ; LogMessage nextLog = null ; if ( parser != null ) { nextLog = parser . parseLine ( line , request ) ; } else { for ( LogParser parser : parserTable ) { nextLog = parser . parseLine ( line , request ) ; if ( ! nextLog . isContinuation ( ) ) { this . parser = parser ; break ; } } if ( nextLog == null || nextLog . isContinuation ( ) ) { status . appendInfo ( this . filePath , fileLineNumber ) ; continue ; } } if ( nextLog . isContinuation ( ) ) { if ( currentLog != null ) { currentLog . appendMessage ( LogUtil . stringToBytes ( line ) ) ; } } else if ( nextLog . isRejected ( ) ) { if ( currentLog != null ) { LogMessage returnedLog = currentLog ; currentLog = null ; if ( matchRegex ( returnedLog ) ) { incrementLogCount ( returnedLog ) ; return returnedLog ; } } } else if ( nextLog . isRejectedLast ( ) ) { if ( currentLog != null ) { LogMessage returnedLog = currentLog ; currentLog = null ; if ( matchRegex ( returnedLog ) ) { incrementLogCount ( returnedLog ) ; return returnedLog ; } } break ; } else { if ( currentLog != null ) { LogMessage returnedLog = currentLog ; currentLog = nextLog ; if ( returnedLog . isHeader ( ) && currentLog . isHeader ( ) ) { continue ; } if ( matchRegex ( returnedLog ) ) { incrementLogCount ( returnedLog ) ; return returnedLog ; } } else { currentLog = nextLog ; } } } } catch ( IOException e ) { status . appendErrFileName ( filePath ) ; } return null ; }
public void appendDataTo ( StringBuilder stringBuilder ) { stringBuilder . append ( buffer ) ; }
private static boolean hasResponseBody ( int requestMethod , int responseCode ) { return requestMethod != Request . Method . HEAD && ! ( HttpStatus . SC_CONTINUE <= responseCode && responseCode < HttpStatus . SC_OK ) && responseCode != HttpStatus . SC_NO_CONTENT && responseCode != HttpStatus . SC_NOT_MODIFIED ; }
private void loadBinary ( DataInputStream is ) throws IOException { if ( is . readInt ( ) != MAGIC ) { throw new Error ( _STR ) ; } if ( is . readInt ( ) != VERSION ) { throw new Error ( _STR ) ; } continuityWeight = is . readInt ( ) ; optimalCoupling = is . readInt ( ) ; extendSelections = is . readInt ( ) ; joinMethod = is . readInt ( ) ; joinWeightShift = is . readInt ( ) ; int weightLength = is . readInt ( ) ; joinWeights = new int [ weightLength ] ; for ( int i = _NUM ; i < joinWeights . length ; i ++ ) { joinWeights [ i ] = is . readInt ( ) ; } int unitsLength = is . readInt ( ) ; units = new DatabaseClusterUnit [ unitsLength ] ; for ( int i = _NUM ; i < units . length ; i ++ ) { units [ i ] = new DatabaseClusterUnit ( is ) ; } int unitTypesLength = is . readInt ( ) ; unitTypes = new UnitType [ unitTypesLength ] ; for ( int i = _NUM ; i < unitTypes . length ; i ++ ) { unitTypes [ i ] = new UnitType ( is ) ; } sts = new SampleSet ( is ) ; mcep = new SampleSet ( is ) ; int numCarts = is . readInt ( ) ; cartMap = new HashMap ( ) ; for ( int i = _NUM ; i < numCarts ; i ++ ) { String name = Utilities . getString ( is ) ; CART cart = CARTImpl . loadBinary ( is ) ; cartMap . put ( name , cart ) ; if ( defaultCart == null ) { defaultCart = cart ; } } }
public static String toString ( long l ) { if ( l < NUMBERS_MIN || l > NUMBERS_MAX ) { return Long . toString ( l , _NUM ) ; } return NUMBERS [ ( int ) l ] ; }
@ Override public synchronized void reset ( ) { pos = _NUM ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
public static int readSingleByte ( InputStream in ) throws IOException { byte [ ] buffer = new byte [ _NUM ] ; int result = in . read ( buffer , _NUM , _NUM ) ; return ( result != - _NUM ) ? buffer [ _NUM ] & _NUM : - _NUM ; }
public static void write ( File file , CharSequence data ) throws IOException { write ( file , data , Charset . defaultCharset ( ) , _BOOL ) ; }
protected boolean isIDPProxyEnabled ( FSAuthnRequest authnRequest ) throws FSException { if ( authnRequest . getMinorVersion ( ) != IFSConstants . FF_12_PROTOCOL_MINOR_VERSION ) { return _BOOL ; } FSScoping scoping = authnRequest . getScoping ( ) ; if ( scoping != null && scoping . getProxyCount ( ) == _NUM ) { return _BOOL ; } String enabledString = IDFFMetaUtils . getFirstAttributeValueFromConfig ( spConfig , IFSConstants . ENABLE_IDP_PROXY ) ; if ( enabledString != null && enabledString . equalsIgnoreCase ( _STR ) ) { return _BOOL ; } else { return _BOOL ; } }
private void compileProlog ( ObjectId prolog , File tempDir ) throws IOException , CompileException { File tempRules = copyToTempFile ( prolog , tempDir ) ; try { Compiler comp = new Compiler ( ) ; comp . prologToJavaSource ( tempRules . getPath ( ) , tempDir . getPath ( ) ) ; } finally { tempRules . delete ( ) ; } }
public Spring removeAllListeners ( ) { mListeners . clear ( ) ; return this ; }
public SelectionInputDialog ( Window owner , String key , boolean editable , T [ ] selectionValues , T initialSelectionValue , InputValidator < T > inputValidator , Object ... keyArguments ) { this ( owner , key , selectionValues , initialSelectionValue , inputValidator , keyArguments ) ; comboBox . setEditable ( editable ) ; }
public void build ( SolrCore core , SolrIndexSearcher searcher ) throws IOException { LOG . info ( _STR ) ; dictionary = dictionaryFactory . create ( core , searcher ) ; lookup . build ( dictionary ) ; if ( storeDir != null ) { File target = new File ( storeDir , factory . storeFileName ( ) ) ; if ( ! lookup . store ( new FileOutputStream ( target ) ) ) { LOG . error ( _STR ) ; } else { LOG . info ( _STR + target . getAbsolutePath ( ) ) ; } } }
public static String convertClassNameToResourcePath ( String className ) { Assert . notNull ( className , _STR ) ; return className . replace ( _STR , _STR ) ; }
public URI ( String scheme , String schemeSpecificPart , String fragment ) throws URISyntaxException { StringBuilder uri = new StringBuilder ( ) ; if ( scheme != null ) { uri . append ( scheme ) ; uri . append ( _STR ) ; } if ( schemeSpecificPart != null ) { ALL_LEGAL_ENCODER . appendEncoded ( uri , schemeSpecificPart ) ; } if ( fragment != null ) { uri . append ( _STR ) ; ALL_LEGAL_ENCODER . appendEncoded ( uri , fragment ) ; } parseURI ( uri . toString ( ) , _BOOL ) ; }
private int addToPopulation ( Solution solution ) { int id = nextFreeId ( ) ; solutions . put ( id , solution ) ; return id ; }
public byte [ ] toByteArray ( ) { return Arrays . copyOf ( buf , cnt ) ; }
public void createDiskAsync ( final String projectId , final DiskCreateSpec diskCreateSpec , final FutureCallback < Task > responseCallback ) throws IOException { final String path = String . format ( _STR , getBasePath ( ) , projectId ) ; createObjectAsync ( path , serializeObjectAsJson ( diskCreateSpec ) , responseCallback ) ; }
@ Override public boolean domainMatch ( final String host , final String domain ) { return host . endsWith ( domain ) ; }
public synchronized void disableAttribute ( String name ) { enabledAttributes . removeElement ( name ) ; }
public Criteria createCriteria ( ) { Criteria criteria = createCriteriaInternal ( ) ; if ( oredCriteria . size ( ) == _NUM ) { oredCriteria . add ( criteria ) ; } return criteria ; }
public void push ( final Handle handle ) { mv . visitLdcInsn ( handle ) ; }
@ Deprecated public static String encodePostBody ( Bundle parameters , String boundary ) { if ( parameters == null ) return _STR ; StringBuilder sb = new StringBuilder ( ) ; for ( String key : parameters . keySet ( ) ) { Object parameter = parameters . get ( key ) ; if ( ! ( parameter instanceof String ) ) { continue ; } sb . append ( _STR + key + _STR + ( String ) parameter ) ; sb . append ( _STR + _STR + boundary + _STR ) ; } return sb . toString ( ) ; }
public static IFitsHeader lookup ( String key ) { int keyLength = key . length ( ) ; if ( keyLength > _NUM && Character . isDigit ( key . charAt ( keyLength - _NUM ) ) ) { StringBuilder builder = new StringBuilder ( ) ; for ( int index = _NUM ; index < keyLength ; index ++ ) { char character = key . charAt ( index ) ; if ( Character . isDigit ( character ) ) { if ( builder . charAt ( builder . length ( ) - _NUM ) != _STR ) { builder . append ( _STR ) ; } } else { builder . append ( character ) ; } } return STANDARD_KEYS . get ( builder . toString ( ) ) ; } return STANDARD_KEYS . get ( key ) ; }
private static void assertChangeEvents ( Collection < PortChangeEvent > earlyEvents , Collection < PortChangeEvent > lateEvents , Collection < PortChangeEvent > anytimeEvents , Collection < PortChangeEvent > actualEvents ) { String inputDesc = String . format ( _STR + _STR , earlyEvents , lateEvents , anytimeEvents , actualEvents ) ; Collection < PortChangeEvent > early = new ArrayList < PortChangeEvent > ( earlyEvents ) ; Collection < PortChangeEvent > late = new ArrayList < PortChangeEvent > ( lateEvents ) ; Collection < PortChangeEvent > any = new ArrayList < PortChangeEvent > ( anytimeEvents ) ; for ( PortChangeEvent ev : early ) { assertFalse ( _STR , late . contains ( ev ) ) ; assertFalse ( _STR , any . contains ( ev ) ) ; } for ( PortChangeEvent ev : late ) { assertFalse ( _STR , early . contains ( ev ) ) ; assertFalse ( _STR , any . contains ( ev ) ) ; } for ( PortChangeEvent ev : any ) { assertFalse ( _STR , early . contains ( ev ) ) ; assertFalse ( _STR , late . contains ( ev ) ) ; } for ( PortChangeEvent a : actualEvents ) { if ( early . remove ( a ) ) { continue ; } if ( any . remove ( a ) ) { continue ; } if ( late . remove ( a ) ) { if ( ! early . isEmpty ( ) ) { fail ( a + _STR + _STR + inputDesc ) ; } else { continue ; } } fail ( a + _STR + inputDesc ) ; } if ( ! early . isEmpty ( ) ) fail ( _STR + early + _STR + inputDesc ) ; if ( ! late . isEmpty ( ) ) fail ( _STR + late + _STR + inputDesc ) ; if ( ! any . isEmpty ( ) ) fail ( _STR + any + _STR + inputDesc ) ; }
@ Override public void write ( Kryo kryo , Output output ) { int size = index . size ( ) ; output . writeInt ( size + _NUM , _BOOL ) ; for ( int i = _NUM ; i < size ; ++ i ) { String s = index . get ( i ) ; if ( s == null ) { throw new RuntimeException ( _STR + Integer . toString ( i ) ) ; } output . writeString ( s ) ; } }
public final ObjectProperty < Control > toggleNodeProperty ( ) { return this . toggleNode ; }
private static int decodeOctets ( int i , ByteBuffer bb , StringBuilder sb ) { if ( bb . limit ( ) == _NUM && ( bb . get ( _NUM ) & _NUM ) < _NUM ) { sb . append ( ( char ) bb . get ( _NUM ) ) ; return i + _NUM ; } else { CharBuffer cb = UTF_8_CHARSET . decode ( bb ) ; sb . append ( cb . toString ( ) ) ; return i + bb . limit ( ) * _NUM - _NUM ; } }
public ArrayFieldVector ( FieldVector < T > v1 , T [ ] v2 ) throws NullArgumentException { MathUtils . checkNotNull ( v1 ) ; MathUtils . checkNotNull ( v2 ) ; field = v1 . getField ( ) ; final T [ ] v1Data = ( v1 instanceof ArrayFieldVector ) ? ( ( ArrayFieldVector < T > ) v1 ) . data : v1 . toArray ( ) ; data = MathArrays . buildArray ( field , v1Data . length + v2 . length ) ; System . arraycopy ( v1Data , _NUM , data , _NUM , v1Data . length ) ; System . arraycopy ( v2 , _NUM , data , v1Data . length , v2 . length ) ; }
public void reverse ( ) { final ArrayList < Animator > animators = mAnimatedVectorState . mAnimators ; final int size = animators . size ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { final Animator animator = animators . get ( i ) ; if ( canReverse ( animator ) ) { reverse ( animator ) ; } else { Log . w ( LOG_TAG , _STR ) ; } } }
public void start ( ) { if ( sLogger . isActivated ( ) ) { sLogger . info ( _STR ) ; } mCleanupExecutor = Executors . newSingleThreadExecutor ( ) ; if ( ! mObserverIsRegistered ) { mContactsContractObserver = new ContactsContractObserver ( new Handler ( ) ) ; mContactsContractCursor = mContentResolver . query ( Phone . CONTENT_URI , null , null , null , null ) ; CursorUtil . assertCursorIsNotNull ( mContactsContractCursor , Phone . CONTENT_URI ) ; mContactsContractCursor . registerContentObserver ( mContactsContractObserver ) ; mObserverIsRegistered = _BOOL ; } }
protected final void fireVetoableChange ( String propertyName , double oldValue , double newValue ) throws PropertyVetoException { fireVetoableChange ( propertyName , Double . valueOf ( oldValue ) , Double . valueOf ( newValue ) ) ; }
public void testLMDirichlet ( ) throws IOException { float p = ( FREQ + _NUM * ( TOTAL_TERM_FREQ + _NUM ) / ( NUMBER_OF_FIELD_TOKENS + _NUM ) ) / ( DOC_LEN + _NUM ) ; float a = _NUM / ( DOC_LEN + _NUM ) ; float gold = ( float ) ( Math . log ( p / ( a * ( TOTAL_TERM_FREQ + _NUM ) / ( NUMBER_OF_FIELD_TOKENS + _NUM ) ) ) + Math . log ( a ) ) ; correctnessTestCore ( new LMDirichletSimilarity ( ) , gold ) ; }
public void onSinksReceived ( String sourceUrn , List < MediaSink > sinks ) { mSinks . put ( sourceUrn , sinks ) ; nativeOnSinksReceived ( mNativeMediaRouterAndroid , sourceUrn , sinks . size ( ) ) ; }
public User toEntity ( UserDTO dto ) { return toEntity ( dto , _NUM ) ; }
protected void writeExternalForeignKeyDropStmt ( Table table , ForeignKey foreignKey , StringBuilder ddl ) { writeTableAlterStmt ( table , ddl ) ; ddl . append ( _STR ) ; printIdentifier ( getForeignKeyName ( table , foreignKey ) , ddl ) ; printEndOfStatement ( ddl ) ; }
public void obtain ( long timeout_ms ) throws IOException , InterruptedException , TimeoutException { Long quit_time = System . currentTimeMillis ( ) + timeout_ms ; if ( fileLock != null && fileLock . isValid ( ) ) { return ; } do { try { fileLock = fileToLock . tryLock ( ) ; return ; } catch ( OverlappingFileLockException e ) { Thread . sleep ( _NUM ) ; } } while ( System . currentTimeMillis ( ) < quit_time ) ; throw new TimeoutException ( ) ; }
@ Deprecated public void pointToData ( Data o ) throws FitsException { o . fillHeader ( this ) ; }
@ NotNull protected VirtualFile [ ] collectAffectedFiles ( @ NotNull Project project , @ NotNull VirtualFile [ ] files ) { List < VirtualFile > affectedFiles = new ArrayList < VirtualFile > ( files . length ) ; ProjectLevelVcsManager projectLevelVcsManager = ProjectLevelVcsManager . getInstance ( project ) ; for ( VirtualFile file : files ) { if ( ! file . isDirectory ( ) && projectLevelVcsManager . getVcsFor ( file ) instanceof GitVcs ) { affectedFiles . add ( file ) ; } else if ( file . isDirectory ( ) && isRecursive ( ) ) { addChildren ( project , affectedFiles , file ) ; } } return VfsUtilCore . toVirtualFileArray ( affectedFiles ) ; }
public void updatePosition ( Particle particle , long elapsedTime ) { Vector3f speed = particle . getSpeed ( ) ; float delta = elapsedTime / _NUM ; float dx = speed . x * delta ; float dy = speed . y * delta ; float dz = speed . z * delta ; Vector3f pos = particle . getPosition ( ) ; particle . setPosition ( pos . x + dx , pos . y + dy , pos . z + dz ) ; }
protected void update ( int length ) { tickLabelValues . clear ( ) ; tickLabels . clear ( ) ; tickLabelPositions . clear ( ) ; if ( scale . isLogScaleEnabled ( ) ) { updateTickLabelForLogScale ( length ) ; } else { updateTickLabelForLinearScale ( length ) ; } updateTickVisibility ( ) ; updateTickLabelMaxLengthAndHeight ( ) ; }
private static boolean isWithinBounds ( VisualPosition targetPosition , VisualPosition startPosition , VisualPosition endPosition ) { return targetPosition . line >= startPosition . line && targetPosition . line <= endPosition . line && targetPosition . column >= startPosition . column && targetPosition . column <= endPosition . column ; }
static public void assertStatementIndicesConsistent ( final AbstractTripleStore db , final int maxerrors ) { if ( log . isInfoEnabled ( ) ) log . info ( _STR ) ; final AtomicInteger nerrs = new AtomicInteger ( _NUM ) ; final int from , to ; if ( db . getSPOKeyArity ( ) == _NUM ) { from = SPOKeyOrder . FIRST_TRIPLE_INDEX ; to = SPOKeyOrder . LAST_TRIPLE_INDEX ; } else { from = SPOKeyOrder . FIRST_QUAD_INDEX ; to = SPOKeyOrder . LAST_QUAD_INDEX ; } for ( int i = from ; i <= to ; i ++ ) { for ( int j = from ; j <= to ; j ++ ) { if ( i <= j ) { continue ; } assertSameStatements ( db , SPOKeyOrder . valueOf ( i ) , SPOKeyOrder . valueOf ( j ) , nerrs , maxerrors ) ; } } assertEquals ( _NUM , nerrs . get ( ) ) ; }
public void show ( @ IdRes final int itemId ) { map . add ( itemId ) ; navigation . invalidateBadge ( itemId ) ; }
public Options put ( String option , Integer value ) { if ( value == null ) { return remove ( option ) ; } options . put ( option , value . toString ( ) ) ; return this ; }
private int determineTargetPage ( int currentPage , float pageOffset , int velocity , int deltaX ) { int targetPage ; if ( Math . abs ( deltaX ) > flingDistance && Math . abs ( velocity ) > minimumVelocity ) { if ( virtualPos < _NUM ) { targetPage = velocity > _NUM ? currentPage : currentPage + _NUM ; } else { targetPage = velocity > _NUM ? currentPage + _NUM : currentPage ; } } else { final float truncator = currentPage >= currentItem ? _NUM : _NUM ; targetPage = ( int ) ( currentPage + pageOffset + truncator ) ; } if ( items . size ( ) > _NUM ) { final ItemInfo firstItem = items . get ( _NUM ) ; final ItemInfo lastItem = items . get ( items . size ( ) - _NUM ) ; targetPage = Math . max ( firstItem . position , Math . min ( targetPage , lastItem . position ) ) ; } if ( targetPage > currentPage && onCardChangeListener != null ) { onCardChangeListener . onCardDismissed ( currentPage , virtualPos > _NUM ) ; } return targetPage ; }
protected String form ( ObjectMatrix1D matrix , int index , Former formatter ) { Object value = matrix . get ( index ) ; if ( value == null ) return _STR ; return String . valueOf ( value ) ; }
public void clone ( Vector3f source ) { System . arraycopy ( source . points , _NUM , points , _NUM , _NUM ) ; }
public void disable ( BluetoothAdapter adapter ) { int mask = ( BluetoothReceiver . STATE_TURNING_OFF_FLAG | BluetoothReceiver . STATE_OFF_FLAG | BluetoothReceiver . SCAN_MODE_NONE_FLAG ) ; long start = - _NUM ; BluetoothReceiver receiver = getBluetoothReceiver ( mask ) ; int state = adapter . getState ( ) ; switch ( state ) { case BluetoothAdapter . STATE_OFF : assertFalse ( adapter . isEnabled ( ) ) ; removeReceiver ( receiver ) ; return ; case BluetoothAdapter . STATE_TURNING_ON : assertFalse ( adapter . isEnabled ( ) ) ; start = System . currentTimeMillis ( ) ; break ; case BluetoothAdapter . STATE_ON : assertTrue ( adapter . isEnabled ( ) ) ; start = System . currentTimeMillis ( ) ; assertTrue ( adapter . disable ( ) ) ; break ; case BluetoothAdapter . STATE_TURNING_OFF : assertFalse ( adapter . isEnabled ( ) ) ; mask = _NUM ; break ; default : removeReceiver ( receiver ) ; fail ( String . format ( _STR , state ) ) ; } long s = System . currentTimeMillis ( ) ; while ( System . currentTimeMillis ( ) - s < ENABLE_DISABLE_TIMEOUT ) { state = adapter . getState ( ) ; if ( state == BluetoothAdapter . STATE_OFF && ( receiver . getFiredFlags ( ) & mask ) == mask ) { assertFalse ( adapter . isEnabled ( ) ) ; long finish = receiver . getCompletedTime ( ) ; if ( start != - _NUM && finish != - _NUM ) { writeOutput ( String . format ( _STR , ( finish - start ) ) ) ; } else { writeOutput ( _STR ) ; } removeReceiver ( receiver ) ; return ; } sleep ( POLL_TIME ) ; } int firedFlags = receiver . getFiredFlags ( ) ; removeReceiver ( receiver ) ; fail ( String . format ( _STR , state , BluetoothAdapter . STATE_OFF , firedFlags , mask ) ) ; }
public static String toRegex ( String glob , String separator ) { checkNotNull ( separator , _STR ) ; checkArgument ( separator . length ( ) == _NUM , _STR , separator ) ; return toRegex ( glob , separator . charAt ( _NUM ) ) ; }
protected void forceNoLoss ( boolean value ) { }
public static String [ ] splitWithoutEscaped ( String str , char separatorChar , boolean retainEmpty ) { int len = str . length ( ) ; if ( len == _NUM ) { return new String [ _NUM ] ; } List < String > list = new ArrayList < String > ( ) ; int i = _NUM ; int start = _NUM ; boolean match = _BOOL ; while ( i < len ) { if ( str . charAt ( i ) == _STR ) { match = _BOOL ; i += _NUM ; } else if ( str . charAt ( i ) == separatorChar ) { if ( retainEmpty || match ) { list . add ( str . substring ( start , i ) ) ; match = _BOOL ; } start = ++ i ; } else { match = _BOOL ; i ++ ; } } if ( retainEmpty || match ) { list . add ( str . substring ( start , i ) ) ; } return list . toArray ( new String [ list . size ( ) ] ) ; }
private static HashMap < BasicBlockPair , HashSet < Register > > findSplitPoints ( IR ir , LiveAnalysis live , LSTGraph lst ) { HashMap < BasicBlockPair , HashSet < Register > > result = new HashMap < BasicBlockPair , HashSet < Register > > ( _NUM ) ; for ( Enumeration < GraphNode > e = lst . enumerateNodes ( ) ; e . hasMoreElements ( ) ; ) { LSTNode node = ( LSTNode ) e . nextElement ( ) ; BasicBlock header = node . getHeader ( ) ; BitVector loop = node . getLoop ( ) ; if ( loop == null ) continue ; for ( Enumeration < BasicBlock > in = header . getIn ( ) ; in . hasMoreElements ( ) ; ) { BasicBlock bb = in . nextElement ( ) ; if ( loop . get ( bb . getNumber ( ) ) ) continue ; HashSet < Register > liveRegisters = live . getLiveRegistersOnEdge ( bb , header ) ; for ( Register r : liveRegisters ) { if ( r . isSymbolic ( ) ) { HashSet < Register > s = findOrCreateSplitSet ( result , bb , header ) ; s . add ( r ) ; } } } for ( int i = _NUM ; i < loop . length ( ) ; i ++ ) { if ( loop . get ( i ) ) { BasicBlock bb = ir . getBasicBlock ( i ) ; for ( Enumeration < BasicBlock > out = bb . getNormalOut ( ) ; out . hasMoreElements ( ) ; ) { BasicBlock dest = out . nextElement ( ) ; if ( loop . get ( dest . getNumber ( ) ) ) continue ; HashSet < Register > liveRegisters = live . getLiveRegistersOnEdge ( bb , dest ) ; for ( Register r : liveRegisters ) { if ( r . isSymbolic ( ) ) { HashSet < Register > s = findOrCreateSplitSet ( result , bb , dest ) ; s . add ( r ) ; } } } } } } addEntriesForInfrequentBlocks ( ir , live , result ) ; return result ; }
public void testSplitEscapedSemicolons ( ) { Properties inner = PropertyUtils . splitPropertiesOnSemicolon ( PropertyUtils . escapeBackSlashesIfNotNull ( _STR ) ) ; assertEquals ( _NUM , inner . size ( ) ) ; assertEquals ( _STR , inner . getProperty ( _STR ) ) ; assertEquals ( _STR , inner . getProperty ( _STR ) ) ; assertEquals ( _STR , inner . getProperty ( _STR ) ) ; assertEquals ( _STR , inner . getProperty ( _STR ) ) ; }
public static void removeObjectAtOffset ( Object [ ] sourceArray , Object [ ] destinationArray , int offset ) { System . arraycopy ( sourceArray , _NUM , destinationArray , _NUM , offset ) ; System . arraycopy ( sourceArray , offset + _NUM , destinationArray , offset , sourceArray . length - offset - _NUM ) ; }
@ SuppressWarnings ( _STR ) public DictionaryAdapter ( Context context , File dbPath , String dbName , String defaultTable ) { mContext = context ; mDbName = dbName ; mDefaultTable = defaultTable ; mDbPath = dbPath ; mDbFile = new File ( dbPath , mDbName ) ; if ( mDbFile . exists ( ) ) { open ( ) ; } }
public boolean isTabAssociatedWithNonDestroyedActivity ( boolean isIncognito , int tabId ) { List < WeakReference < Activity > > activities = ApplicationStatus . getRunningActivities ( ) ; for ( WeakReference < Activity > ref : activities ) { Activity activity = ref . get ( ) ; if ( activity != null && isValidActivity ( isIncognito , activity . getIntent ( ) ) && getTabIdFromIntent ( activity . getIntent ( ) ) == tabId && ! isActivityDestroyed ( activity ) ) { return _BOOL ; } } return _BOOL ; }
HttpStreamWrapper ( HttpStream stream ) throws IOException { _stream = stream ; }
public boolean handleFile ( File file ) { if ( DEBUG ) { logger . fine ( _STR + file . getAbsolutePath ( ) ) ; } filenames . add ( file ) ; return _BOOL ; }
public boolean looksLikeNumberComing ( ) { if ( n >= s . length ( ) ) return _BOOL ; return Character . isDigit ( s . charAt ( n ) ) ; }
public PartialHull ( IPoint first , IPoint second ) { points . add ( first ) ; points . add ( second ) ; }
public void addSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < SwipeListener > ( ) ; } mListeners . add ( listener ) ; }
public short readShort ( ) throws IOException { return primitiveTypes . readShort ( ) ; }
public void print ( int inum ) { print ( String . valueOf ( inum ) ) ; }
public static < NodeType extends IViewNode < ? > > ZyProximityNode < ? > createProximityNode ( final Graph2D graph , final ZyGraphNode < ? > attachedNode , final int degree , final boolean isIncoming ) { Preconditions . checkNotNull ( graph , _STR ) ; Preconditions . checkNotNull ( attachedNode , _STR ) ; final ZyLabelContent labelcontent = new ZyLabelContent ( null ) ; labelcontent . addLineContent ( new ZyLineContent ( String . valueOf ( degree ) , new Font ( _STR , Font . PLAIN , _NUM ) , null ) ) ; final ZyProximityNodeRealizer < NodeType > r = new ZyProximityNodeRealizer < NodeType > ( labelcontent ) ; final Node node = graph . createNode ( r ) ; @ SuppressWarnings ( _STR ) final ZyProximityNode < NodeType > infoNode = new ZyProximityNode < NodeType > ( node , r , ( ZyGraphNode < NodeType > ) attachedNode , isIncoming ) ; final ZyNodeData < ZyProximityNode < NodeType > > data = new ZyNodeData < ZyProximityNode < NodeType > > ( infoNode ) ; r . setUserData ( data ) ; return infoNode ; }
public static boolean isZoningRequired ( DbClient dbClient , URI varrayUri ) { if ( varrayUri != null ) { VirtualArray nh = dbClient . queryObject ( VirtualArray . class , varrayUri ) ; if ( nh != null ) { return isZoningRequired ( dbClient , nh ) ; } } return _BOOL ; }
public void reply ( List < String > responseHeaders , boolean out ) throws IOException { assert ( ! Thread . holdsLock ( SpdyStream . this ) ) ; boolean outFinished = _BOOL ; synchronized ( this ) { if ( responseHeaders == null ) { throw new NullPointerException ( _STR ) ; } if ( isLocallyInitiated ( ) ) { throw new IllegalStateException ( _STR ) ; } if ( this . responseHeaders != null ) { throw new IllegalStateException ( _STR ) ; } this . responseHeaders = responseHeaders ; if ( ! out ) { this . out . finished = _BOOL ; outFinished = _BOOL ; } } connection . writeSynReply ( id , outFinished , responseHeaders ) ; }
protected CCAnimation ( String name , float delay , ArrayList < CCSpriteFrame > frames ) { delay_ = delay ; name_ = name ; frames_ = new ArrayList < CCSpriteFrame > ( ) ; if ( frames != null ) frames_ . addAll ( frames ) ; }
private void navigateToDump ( ) { TreePath currentPath = tree . getSelectionPath ( ) ; tree . setSelectionPath ( currentPath . getParentPath ( ) ) ; tree . scrollPathToVisible ( currentPath . getParentPath ( ) ) ; }
public synchronized void addMessages ( ArrayList < SmsMmsMessage > newMessages ) { if ( newMessages != null ) { messages . addAll ( _NUM , newMessages ) ; UpdateMessageCount ( ) ; } }
public static Cache . Entry makeRandomCacheEntry ( byte [ ] data , boolean isExpired , boolean needsRefresh ) { Random random = new Random ( ) ; Cache . Entry entry = new Cache . Entry ( ) ; if ( data != null ) { entry . data = data ; } else { entry . data = new byte [ random . nextInt ( _NUM ) ] ; } entry . etag = String . valueOf ( random . nextLong ( ) ) ; entry . serverDate = random . nextLong ( ) ; entry . ttl = isExpired ? _NUM : Long . MAX_VALUE ; entry . softTtl = needsRefresh ? _NUM : Long . MAX_VALUE ; return entry ; }
public int swap ( ) { if ( ! egl . eglSwapBuffers ( eglDisplay , eglSurface ) ) { return egl . eglGetError ( ) ; } return EGL10 . EGL_SUCCESS ; }
public static List < Window > windows ( String words , int windowSize ) { StringTokenizer tokenizer = new StringTokenizer ( words ) ; List < String > list = new ArrayList < String > ( ) ; while ( tokenizer . hasMoreTokens ( ) ) list . add ( tokenizer . nextToken ( ) ) ; return windows ( list , windowSize ) ; }
protected void drawCenterText ( Canvas c ) { CharSequence centerText = mChart . getCenterText ( ) ; if ( mChart . isDrawCenterTextEnabled ( ) && centerText != null ) { MPPointF center = mChart . getCenterCircleBox ( ) ; MPPointF offset = mChart . getCenterTextOffset ( ) ; float x = center . x + offset . x ; float y = center . y + offset . y ; float innerRadius = mChart . isDrawHoleEnabled ( ) && ! mChart . isDrawSlicesUnderHoleEnabled ( ) ? mChart . getRadius ( ) * ( mChart . getHoleRadius ( ) / _NUM ) : mChart . getRadius ( ) ; RectF holeRect = mRectBuffer [ _NUM ] ; holeRect . left = x - innerRadius ; holeRect . top = y - innerRadius ; holeRect . right = x + innerRadius ; holeRect . bottom = y + innerRadius ; RectF boundingRect = mRectBuffer [ _NUM ] ; boundingRect . set ( holeRect ) ; float radiusPercent = mChart . getCenterTextRadiusPercent ( ) / _NUM ; if ( radiusPercent > _NUM ) { boundingRect . inset ( ( boundingRect . width ( ) - boundingRect . width ( ) * radiusPercent ) / _NUM , ( boundingRect . height ( ) - boundingRect . height ( ) * radiusPercent ) / _NUM ) ; } if ( ! centerText . equals ( mCenterTextLastValue ) || ! boundingRect . equals ( mCenterTextLastBounds ) ) { mCenterTextLastBounds . set ( boundingRect ) ; mCenterTextLastValue = centerText ; float width = mCenterTextLastBounds . width ( ) ; mCenterTextLayout = new StaticLayout ( centerText , _NUM , centerText . length ( ) , mCenterTextPaint , ( int ) Math . max ( Math . ceil ( width ) , _NUM ) , Layout . Alignment . ALIGN_CENTER , _NUM , _NUM , _BOOL ) ; } float layoutHeight = mCenterTextLayout . getHeight ( ) ; c . save ( ) ; if ( Build . VERSION . SDK_INT >= _NUM ) { Path path = mDrawCenterTextPathBuffer ; path . reset ( ) ; path . addOval ( holeRect , Path . Direction . CW ) ; c . clipPath ( path ) ; } c . translate ( boundingRect . left , boundingRect . top + ( boundingRect . height ( ) - layoutHeight ) / _NUM ) ; mCenterTextLayout . draw ( c ) ; c . restore ( ) ; MPPointF . recycleInstance ( center ) ; MPPointF . recycleInstance ( offset ) ; } }
public static String buildPath ( JsonPath jsonPath ) { List < String > urlParts = new LinkedList < > ( ) ; JsonPath currentJsonPath = jsonPath ; String pathPart ; do { if ( currentJsonPath instanceof RelationshipsPath ) { pathPart = RELATIONSHIP_MARK + SEPARATOR + currentJsonPath . getElementName ( ) ; } else if ( currentJsonPath instanceof FieldPath ) { pathPart = currentJsonPath . getElementName ( ) ; } else { pathPart = currentJsonPath . getElementName ( ) ; if ( currentJsonPath . getIds ( ) != null ) { pathPart += SEPARATOR + mergeIds ( currentJsonPath . getIds ( ) ) ; } } urlParts . add ( pathPart ) ; currentJsonPath = currentJsonPath . getParentResource ( ) ; } while ( currentJsonPath != null ) ; Collections . reverse ( urlParts ) ; return SEPARATOR + StringUtils . join ( SEPARATOR , urlParts ) + SEPARATOR ; }
protected void groupFrames ( Vector < Frame > frames , Vector < Group > groups , boolean isDchum ) throws MakeTocException { Frame frame ; Group group ; int groupCount ; int nFrames = frames . size ( ) ; Debug . message ( _STR , _STR ) ; for ( int i = _NUM ; i < nFrames ; i ++ ) { Debug . message ( _STR , _STR ) ; frame = ( Frame ) frames . elementAt ( i ) ; if ( ! frame . marked ) { groupCount = groups . size ( ) ; group = new Group ( ) ; group . left = maxSide / _NUM ; group . right = group . left + _NUM ; group . top = maxSide / _NUM ; group . bottom = group . top + _NUM ; group . horiz_pos [ group . top ] = frame . top ; group . horiz_pos [ group . bottom ] = frame . bottom ; group . vert_pos [ group . left ] = frame . left ; group . vert_pos [ group . right ] = frame . right ; group . h_interval = frame . h_interval ; group . v_interval = frame . v_interval ; group . h_resolution = frame . h_resolution ; group . v_resolution = frame . v_resolution ; group . scale = frame . scale ; group . zone = frame . zone ; group . cib = frame . cib ; group . cdted = frame . cdted ; frame . x = group . left ; frame . y = group . top ; frame . group = groupCount ; frame . marked = _BOOL ; Debug . message ( _STR , _STR + groupCount + _STR + i + _STR + frame . filename + _STR ) ; if ( ! isDchum ) { for ( int j = _NUM ; j < nFrames ; j ++ ) { if ( i == j ) { Debug . message ( _STR , _STR + i + _STR ) ; continue ; } Frame f = ( Frame ) frames . elementAt ( j ) ; if ( addFrameToGroup ( group , f , groupCount ) ) { Debug . message ( _STR , _STR + j + _STR + groupCount ) ; continue ; } } } Debug . message ( _STR , _STR + groupCount + _STR ) ; groups . add ( group ) ; } fireProgressUpdate ( ProgressEvent . UPDATE , _STR , i , nFrames ) ; } if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + groups . size ( ) ) ; } }
private static Object add ( final Object array , final int index , final Object element , final Class < ? > clss ) { if ( array == null ) { if ( index != _NUM ) { throw new IndexOutOfBoundsException ( _STR + index + _STR ) ; } Object joinedArray = Array . newInstance ( clss , _NUM ) ; Array . set ( joinedArray , _NUM , element ) ; return joinedArray ; } int length = Array . getLength ( array ) ; if ( index > length || index < _NUM ) { throw new IndexOutOfBoundsException ( _STR + index + _STR + length ) ; } Object result = Array . newInstance ( clss , length + _NUM ) ; System . arraycopy ( array , _NUM , result , _NUM , index ) ; Array . set ( result , index , element ) ; if ( index < length ) { System . arraycopy ( array , index , result , index + _NUM , length - index ) ; } return result ; }
public double doubleValue ( ) { return d . doubleValue ( ) ; }
public String toMatlab ( ) { StringBuffer result ; int i ; int n ; result = new StringBuffer ( ) ; result . append ( _STR ) ; for ( i = _NUM ; i < getRowDimension ( ) ; i ++ ) { if ( i > _NUM ) { result . append ( _STR ) ; } for ( n = _NUM ; n < getColumnDimension ( ) ; n ++ ) { if ( n > _NUM ) { result . append ( _STR ) ; } result . append ( Double . toString ( get ( i , n ) ) ) ; } } result . append ( _STR ) ; return result . toString ( ) ; }
public FileInputReader ( File f ) throws IOException { if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + f . getAbsolutePath ( ) ) ; } name = f . getName ( ) ; absolutePath = f . getAbsolutePath ( ) ; inputFile = init ( f ) ; }
public static ObjectOutputStream newObjectOutputStream ( Path self ) throws IOException { return new ObjectOutputStream ( Files . newOutputStream ( self ) ) ; }
@ Override public Set < K > keySet ( ) { HashSet < K > set = new HashSet < K > ( ) ; for ( Segment < K , V > s : segments ) { set . addAll ( s . keySet ( ) ) ; } return set ; }
private void updateBaseMatrix ( Drawable d ) { ImageView imageView = getImageView ( ) ; if ( null == imageView || null == d ) { return ; } final float viewWidth = imageView . getWidth ( ) ; final float viewHeight = imageView . getHeight ( ) ; final int drawableWidth = d . getIntrinsicWidth ( ) ; final int drawableHeight = d . getIntrinsicHeight ( ) ; mBaseMatrix . reset ( ) ; final float widthScale = viewWidth / drawableWidth ; final float heightScale = viewHeight / drawableHeight ; if ( mScaleType == ScaleType . CENTER ) { mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth ) / _NUM , ( viewHeight - drawableHeight ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_CROP ) { float scale = Math . max ( widthScale , heightScale ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_INSIDE ) { float scale = Math . min ( _NUM , Math . min ( widthScale , heightScale ) ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else { RectF mTempSrc = new RectF ( _NUM , _NUM , drawableWidth , drawableHeight ) ; RectF mTempDst = new RectF ( _NUM , _NUM , viewWidth , viewHeight ) ; switch ( mScaleType ) { case FIT_CENTER : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . CENTER ) ; break ; case FIT_START : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . START ) ; break ; case FIT_END : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . END ) ; break ; case FIT_XY : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . FILL ) ; break ; default : break ; } } resetMatrix ( ) ; }
public void add ( final CertificateValidity certificateValidity ) { certificateValidityList . add ( certificateValidity ) ; }
public void addPolicyListener ( PolicyListener policyListener ) { policyCache . addPolicyListener ( policyListener ) ; }
public static Result verify ( String sid , String code ) { String id = _STR + sid ; Code c = ( Code ) Cache . get ( id ) ; if ( c == null ) { log . warn ( _STR + sid ) ; return Result . badcode ; } else if ( ! X . isSame ( code , c . code ) ) { log . warn ( _STR + c . code + _STR + code ) ; return Result . badcode ; } else if ( c . expired < System . currentTimeMillis ( ) ) { log . warn ( _STR + c . expired ) ; return Result . expired ; } return Result . ok ; }
private ScriptEngine newScriptEngine ( File file ) throws ScriptException { String filename = file . getName ( ) ; int index = filename . lastIndexOf ( _STR ) ; if ( ( index < _NUM ) || ( index >= filename . length ( ) - _NUM ) ) { throw new ScriptException ( _STR ) ; } String extension = filename . substring ( index + _NUM ) ; ScriptEngineManager manager = new ScriptEngineManager ( ) ; ScriptEngine engine = manager . getEngineByExtension ( extension ) ; if ( engine == null ) { throw new ScriptException ( _STR + extension ) ; } return engine ; }
protected static INaviRawModule findRawModule ( final int rawModuleId , final List < INaviRawModule > rawModules ) { Preconditions . checkArgument ( rawModuleId > _NUM , _STR , rawModuleId ) ; Preconditions . checkNotNull ( rawModules , _STR ) ; for ( final INaviRawModule rawModule : rawModules ) { if ( rawModule . getId ( ) == rawModuleId ) { return rawModule ; } } throw new IllegalStateException ( _STR ) ; }
public static Object extractTypeChecked ( List < Object > args , int i , Class clazz , Function < List < Object > , Object > extractFunc ) { if ( args . size ( ) < i + _NUM ) { return null ; } else if ( clazz . isInstance ( args . get ( i ) ) ) { return extractFunc . apply ( args ) ; } else { return null ; } }
@ Override public JapaneseDate dateYearDay ( int prolepticYear , int dayOfYear ) { return new JapaneseDate ( LocalDate . ofYearDay ( prolepticYear , dayOfYear ) ) ; }
private Pair < Entry , char [ ] > recoverEntry ( KeyStore ks , String alias , char [ ] pstore , char [ ] pkey ) throws Exception { if ( ks . containsAlias ( alias ) == _BOOL ) { MessageFormat form = new MessageFormat ( rb . getString ( _STR ) ) ; Object [ ] source = { alias } ; throw new Exception ( form . format ( source ) ) ; } PasswordProtection pp = null ; Entry entry ; try { entry = ks . getEntry ( alias , pp ) ; pkey = null ; } catch ( UnrecoverableEntryException une ) { if ( P11KEYSTORE . equalsIgnoreCase ( ks . getType ( ) ) || KeyStoreUtil . isWindowsKeyStore ( ks . getType ( ) ) ) { throw une ; } if ( pkey != null ) { pp = new PasswordProtection ( pkey ) ; entry = ks . getEntry ( alias , pp ) ; } else { try { pp = new PasswordProtection ( pstore ) ; entry = ks . getEntry ( alias , pp ) ; pkey = pstore ; } catch ( UnrecoverableEntryException une2 ) { if ( P12KEYSTORE . equalsIgnoreCase ( ks . getType ( ) ) ) { throw une2 ; } else { pkey = getKeyPasswd ( alias , null , null ) ; pp = new PasswordProtection ( pkey ) ; entry = ks . getEntry ( alias , pp ) ; } } } } return Pair . of ( entry , pkey ) ; }
URLClassLoader newLoader ( URL base ) { return new URLClassLoader ( new URL [ ] { base } ) ; }
public void testMinUnequal1 ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = _NUM ; String c = _STR ; int cScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal cNumber = new BigDecimal ( new BigInteger ( c ) , cScale ) ; assertEquals ( _STR , cNumber , aNumber . min ( bNumber ) ) ; }
public Wiser ( ) { this . server = new SMTPServer ( new SimpleMessageListenerAdapter ( this ) ) ; }
protected static int [ ] concat ( @ Nullable int [ ] arr , int ... obj ) { int [ ] newArr ; if ( arr == null || arr . length == _NUM ) newArr = obj ; else { newArr = Arrays . copyOf ( arr , arr . length + obj . length ) ; System . arraycopy ( obj , _NUM , newArr , arr . length , obj . length ) ; } return newArr ; }
public void truckCamera ( float size ) { moveToPosition ( - ( float ) ( targetXoff + ( size * Math . sin ( Math . toRadians ( zrot - _NUM ) ) ) ) , - ( float ) ( targetYoff + ( size * Math . cos ( Math . toRadians ( zrot - _NUM ) ) ) ) ) ; }
public static byte [ ] decode2 ( String encoded ) { if ( encoded == null ) { return null ; } char [ ] base64Data = encoded . toCharArray ( ) ; int len = removeWhiteSpace ( base64Data ) ; if ( len % FOURBYTE != _NUM ) { return null ; } int numberQuadruple = ( len / FOURBYTE ) ; if ( numberQuadruple == _NUM ) { return new byte [ _NUM ] ; } byte decodedData [ ] = null ; byte b1 = _NUM , b2 = _NUM , b3 = _NUM , b4 = _NUM ; char d1 = _NUM , d2 = _NUM , d3 = _NUM , d4 = _NUM ; int i = _NUM ; int encodedIndex = _NUM ; int dataIndex = _NUM ; decodedData = new byte [ ( numberQuadruple ) * _NUM ] ; for ( ; i < numberQuadruple - _NUM ; i ++ ) { if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d3 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d4 = base64Data [ dataIndex ++ ] ) ) ) { return null ; } b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; decodedData [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( b3 << _NUM | b4 ) ; } if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) ) { return null ; } b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; d3 = base64Data [ dataIndex ++ ] ; d4 = base64Data [ dataIndex ++ ] ; if ( ! isData ( ( d3 ) ) || ! isData ( ( d4 ) ) ) { if ( isPad ( d3 ) && isPad ( d4 ) ) { if ( ( b2 & _NUM ) != _NUM ) { return null ; } byte [ ] tmp = new byte [ i * _NUM + _NUM ] ; System . arraycopy ( decodedData , _NUM , tmp , _NUM , i * _NUM ) ; tmp [ encodedIndex ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; return tmp ; } else if ( ! isPad ( d3 ) && isPad ( d4 ) ) { b3 = base64Alphabet [ d3 ] ; if ( ( b3 & _NUM ) != _NUM ) { return null ; } byte [ ] tmp = new byte [ i * _NUM + _NUM ] ; System . arraycopy ( decodedData , _NUM , tmp , _NUM , i * _NUM ) ; tmp [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; tmp [ encodedIndex ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; return tmp ; } else { return null ; } } else { b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; decodedData [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( b3 << _NUM | b4 ) ; } return decodedData ; }
public void shutdown ( ) { scheduledExecutorService . shutdownNow ( ) ; }
public Builder clear ( ) { localeBuilder . clear ( ) ; return this ; }
public static String deflate ( String previous , String current ) { if ( previous == null ) return current ; StringBuilder buf = new StringBuilder ( ) ; int start1 = _NUM ; int start2 = _NUM ; while ( start1 < previous . length ( ) && start2 < current . length ( ) ) { int end1 = start1 ; int end2 = start2 ; while ( end1 <= previous . length ( ) && end2 <= current . length ( ) ) { int c1 = ( end1 < previous . length ( ) ? previous . charAt ( end1 ) : _STR ) ; int c2 = ( end2 < current . length ( ) ? current . charAt ( end2 ) : _STR ) ; if ( c1 == c2 ) { if ( c1 == _STR ) { buf . append ( _STR ) ; break ; } else { end1 ++ ; end2 ++ ; } } else { while ( end1 < previous . length ( ) && previous . charAt ( end1 ) != _STR ) { end1 ++ ; } while ( end2 < current . length ( ) && current . charAt ( end2 ) != _STR ) { end2 ++ ; } for ( int i = start2 ; i < end2 ; i ++ ) buf . append ( current . charAt ( i ) ) ; break ; } } start1 = end1 + _NUM ; start2 = end2 + _NUM ; if ( start2 < current . length ( ) ) buf . append ( _STR ) ; } return buf . toString ( ) ; }
protected int splitListIndex ( List < Pair < Double , Integer > > S ) { return S . size ( ) / _NUM ; }
public static void e ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_ERROR ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . e ( tag , msg ) ; }
public static synchronized void addPropertyChangeListener ( PropertyChangeListener l ) { if ( ! listeners . contains ( l ) ) { listeners . add ( l ) ; } }
private static void cleanDirectory ( File path ) { if ( path == null ) return ; if ( path . exists ( ) ) { for ( File f : path . listFiles ( ) ) { if ( f . isDirectory ( ) ) cleanDirectory ( f ) ; f . delete ( ) ; } } }
private GridCacheVersion minVersion ( Iterable < IgniteTxEntry > entries , GridCacheVersion min , IgniteInternalTx tx ) { for ( IgniteTxEntry txEntry : entries ) { GridCacheEntryEx cached = txEntry . cached ( ) ; assert txEntry . isRead ( ) || ! cached . obsolete ( tx . xidVersion ( ) ) : _STR + cached + _STR + tx + _STR ; for ( GridCacheMvccCandidate cand : cached . remoteMvccSnapshot ( ) ) if ( min == null || cand . version ( ) . isLess ( min ) ) min = cand . version ( ) ; } return min ; }
public DimensionedScalar ( String fieldValue ) throws IllegalArgumentException { super ( _STR , _STR ) ; Matcher matcher = PATTERN . matcher ( fieldValue ) ; if ( matcher . find ( ) ) { String name = matcher . group ( _NUM ) ; String dimensions = matcher . group ( _NUM ) ; String value = matcher . group ( _NUM ) ; setName ( name ) ; setValue ( value ) ; this . dimensions = new Dimensions ( dimensions ) ; } else { throw new DictionaryException ( _STR + fieldValue + _STR ) ; } }
public void characters ( char ch [ ] , int start , int length ) throws SAXException { m_valueBuffer . append ( ch , start , length ) ; }
protected double computeStdDev ( Instance inst , Matrix k ) throws Exception { double kappa = m_kernel . eval ( - _NUM , - _NUM , inst ) + m_deltaSquared ; double s = _NUM ; int n = m_L . length ; for ( int i = _NUM ; i < n ; i ++ ) { double t = _NUM ; for ( int j = _NUM ; j < n ; j ++ ) { t -= k . get ( j , _NUM ) * ( i > j ? m_L [ i ] [ j ] : m_L [ j ] [ i ] ) ; } s += t * k . get ( i , _NUM ) ; } double sigma = m_delta ; if ( kappa > s ) { sigma = Math . sqrt ( kappa - s ) ; } return sigma ; }
protected void initialize ( Properties p ) { }
public void add ( int index , int element ) { checkRangeIncludingEndpoint ( index ) ; ensureCapacity ( size + _NUM ) ; int numtomove = size - index ; System . arraycopy ( array , index , array , index + _NUM , numtomove ) ; array [ index ] = element ; size ++ ; }
public MultiplexManager ( DataStore ... dataStores ) { this . dataStores = Arrays . asList ( dataStores ) ; }
public boolean matchesRawNamePattern ( Object item ) { String prefix = patternMatcher . getPattern ( ) ; String text = getElementName ( item ) ; if ( text == null ) return _BOOL ; int textLength = text . length ( ) ; int prefixLength = prefix . length ( ) ; if ( textLength < prefixLength ) { return _BOOL ; } for ( int i = prefixLength - _NUM ; i >= _NUM ; i -- ) { if ( Character . toLowerCase ( prefix . charAt ( i ) ) != Character . toLowerCase ( text . charAt ( i ) ) ) return _BOOL ; } return _BOOL ; }
public static @ Nonnull < T > T valueOrDefault ( @ Nullable T value , @ Nonnull T defaultValue ) { return value == null ? defaultValue : value ; }
protected abstract int compareToLastMsg ( Pair < K , V > tupleKeyValue , Pair < byte [ ] , byte [ ] > lastReceivedKeyValue ) ;
public void paintComponent ( Graphics g ) { g . drawImage ( track , _NUM , _NUM , null ) ; Graphics2D g2d = ( Graphics2D ) g . create ( ) ; g2d . translate ( carPosition . x , carPosition . y ) ; g2d . rotate ( Math . toRadians ( carRotation ) ) ; g2d . translate ( - ( carPosition . x ) , - ( carPosition . y ) ) ; g2d . drawImage ( car , carPosition . x - carWHalf , carPosition . y - carHHalf , null ) ; }
public static java . sql . Time toSqlTime ( String time ) { java . util . Date newDate = toDate ( _STR , time ) ; if ( newDate != null ) { return new java . sql . Time ( newDate . getTime ( ) ) ; } else { return null ; } }
private void parseMenu ( XmlPullParser parser , AttributeSet attrs , SublimeMenu menu ) throws XmlPullParserException , IOException { MenuState menuState = new MenuState ( menu ) ; int eventType = parser . getEventType ( ) ; String tagName ; boolean lookingForEndOfUnknownTag = _BOOL ; String unknownTagName = null ; do { if ( eventType == XmlPullParser . START_TAG ) { tagName = parser . getName ( ) ; if ( tagName . equals ( XML_MENU ) ) { eventType = parser . next ( ) ; break ; } throw new RuntimeException ( _STR + tagName ) ; } eventType = parser . next ( ) ; } while ( eventType != XmlPullParser . END_DOCUMENT ) ; boolean reachedEndOfMenu = _BOOL ; while ( ! reachedEndOfMenu ) { switch ( eventType ) { case XmlPullParser . START_TAG : if ( lookingForEndOfUnknownTag ) { break ; } tagName = parser . getName ( ) ; if ( tagName . equals ( XML_GROUP ) ) { if ( menuState . groupId != MenuState . defaultGroupId ) { throw new RuntimeException ( _STR + _STR ) ; } menuState . readGroup ( attrs ) ; menuState . addGroup ( ) ; } else if ( tagName . equals ( XML_TEXT ) || tagName . equals ( XML_TEXT_WITH_BADGE ) || tagName . equals ( XML_CHECKBOX ) || tagName . equals ( XML_SWITCH ) ) { menuState . readMenuItem ( attrs , tagName ) ; } else if ( tagName . equals ( XML_SEPARATOR ) ) { menuState . readMenuItem ( attrs , tagName ) ; } else if ( tagName . equals ( XML_GROUP_HEADER ) ) { if ( menuState . groupId == MenuState . defaultGroupId ) { throw new RuntimeException ( _STR + _STR ) ; } menuState . readMenuItem ( attrs , tagName ) ; } else if ( tagName . equals ( XML_MENU ) ) { throw new RuntimeException ( _STR + _STR + _STR ) ; } else { lookingForEndOfUnknownTag = _BOOL ; unknownTagName = tagName ; } break ; case XmlPullParser . END_TAG : tagName = parser . getName ( ) ; if ( lookingForEndOfUnknownTag && tagName . equals ( unknownTagName ) ) { lookingForEndOfUnknownTag = _BOOL ; unknownTagName = null ; } else if ( tagName . equals ( XML_GROUP ) ) { if ( menuState . isGroupCollapsible ( ) && menuState . groupHeadersAdded != _NUM ) { if ( menuState . groupHeadersAdded < _NUM ) { throw new RuntimeException ( _STR + _STR ) ; } else { throw new RuntimeException ( _STR + _STR + menuState . groupHeadersAdded + _STR ) ; } } menuState . resetGroup ( ) ; } else if ( tagName . equals ( XML_TEXT ) || tagName . equals ( XML_TEXT_WITH_BADGE ) || tagName . equals ( XML_CHECKBOX ) || tagName . equals ( XML_SWITCH ) || tagName . equals ( XML_GROUP_HEADER ) || tagName . equals ( XML_SEPARATOR ) ) { if ( ! menuState . hasAddedItem ( ) ) { menuState . addItem ( ) ; } } else if ( tagName . equals ( XML_MENU ) ) { reachedEndOfMenu = _BOOL ; } break ; case XmlPullParser . END_DOCUMENT : throw new RuntimeException ( _STR ) ; } eventType = parser . next ( ) ; } }
public static double crossTrackDistanceRad ( double lat1 , double lon1 , double lat2 , double lon2 , double latQ , double lonQ ) { final double dlon12 = lon2 - lon1 ; final double dlon1Q = lonQ - lon1 ; final double dlat1Q = latQ - lat1 ; final double clat1 = Math . cos ( lat1 ) , slat1 = MathUtil . cosToSin ( lat1 , clat1 ) ; final double clatQ = Math . cos ( latQ ) , slatQ = MathUtil . cosToSin ( latQ , clatQ ) ; final double clat2 = Math . cos ( lat2 ) , slat2 = MathUtil . cosToSin ( lat2 , clat2 ) ; final double slat = Math . sin ( dlat1Q * _NUM ) ; final double slon = Math . sin ( dlon1Q * _NUM ) ; final double a = slat * slat + slon * slon * clat1 * clatQ ; final double angDist1Q = _NUM * Math . atan2 ( Math . sqrt ( a ) , Math . sqrt ( _NUM - a ) ) ; final double sdlon12 = Math . sin ( dlon12 ) , cdlon12 = MathUtil . sinToCos ( dlon12 , sdlon12 ) ; final double sdlon1Q = Math . sin ( dlon1Q ) , cdlon1Q = MathUtil . sinToCos ( dlon1Q , sdlon1Q ) ; final double yE = sdlon12 * clat2 ; final double yQ = sdlon1Q * clatQ ; final double xE = clat1 * slat2 - slat1 * clat2 * cdlon12 ; final double xQ = clat1 * slatQ - slat1 * clatQ * cdlon1Q ; final double crs12 = Math . atan2 ( yE , xE ) ; final double crs1Q = Math . atan2 ( yQ , xQ ) ; return Math . asin ( Math . sin ( angDist1Q ) * Math . sin ( crs1Q - crs12 ) ) ; }
public String chooseServerAlias ( String keyType , Principal [ ] issuers , Socket socket ) { return defaultX509KM . chooseServerAlias ( keyType , issuers , socket ) ; }
public static double pdf ( double x , double shape , double scale , double factor ) { if ( x <= _NUM ) return _NUM ; final double a = Math . exp ( shape * Math . log ( scale ) - ( shape + _NUM ) * Math . log ( x ) - ( scale / x ) - GammaFunction . lnGamma ( shape ) ) ; return factor * a ; }
public String charge ( Properties ctx , int WindowNo , GridTab mTab , GridField mField , Object value ) { Integer C_Charge_ID = ( Integer ) value ; if ( C_Charge_ID == null || C_Charge_ID . intValue ( ) == _NUM ) return _STR ; String sql = _STR ; PreparedStatement pstmt = null ; ResultSet rs = null ; try { pstmt = DB . prepareStatement ( sql , null ) ; pstmt . setInt ( _NUM , C_Charge_ID . intValue ( ) ) ; rs = pstmt . executeQuery ( ) ; if ( rs . next ( ) ) { mTab . setValue ( _STR , rs . getBigDecimal ( _NUM ) ) ; } } catch ( SQLException e ) { log . log ( Level . SEVERE , sql , e ) ; return e . getLocalizedMessage ( ) ; } finally { DB . close ( rs , pstmt ) ; rs = null ; pstmt = null ; } return tax ( ctx , WindowNo , mTab , mField , value ) ; }
protected Array < Actor > parse ( ) { actors = GdxArrays . newArray ( Actor . class ) ; invokePreListeners ( actors ) ; final StringBuilder builder = new StringBuilder ( ) ; while ( templateReader . hasNextCharacter ( ) ) { final char character = templateReader . nextCharacter ( ) ; if ( character == syntax . getArgumentOpening ( ) ) { processArgument ( ) ; } else if ( character == syntax . getTagOpening ( ) ) { if ( isNextCharacterCommentOpening ( ) ) { processComment ( ) ; continue ; } if ( currentParentTag != null ) { currentParentTag . handleDataBetweenTags ( builder ) ; } Strings . clearBuilder ( builder ) ; processTag ( builder ) ; } else { builder . append ( character ) ; } } if ( currentParentTag != null ) { throwError ( _STR + currentParentTag . getTagName ( ) + _STR ) ; } invokePortListeners ( actors ) ; return actors ; }
public void testABandCBbrokerNetwork ( ) throws Exception { bridgeBrokers ( _STR , _STR ) ; bridgeBrokers ( _STR , _STR ) ; startAllBrokers ( ) ; Destination dest = createDestination ( _STR , _BOOL ) ; MessageConsumer clientA = createConsumer ( _STR , dest ) ; MessageConsumer clientB = createConsumer ( _STR , dest ) ; MessageConsumer clientC = createConsumer ( _STR , dest ) ; Thread . sleep ( _NUM ) ; sendMessages ( _STR , dest , MESSAGE_COUNT ) ; sendMessages ( _STR , dest , MESSAGE_COUNT ) ; sendMessages ( _STR , dest , MESSAGE_COUNT ) ; MessageIdList msgsA = getConsumerMessages ( _STR , clientA ) ; MessageIdList msgsB = getConsumerMessages ( _STR , clientB ) ; MessageIdList msgsC = getConsumerMessages ( _STR , clientC ) ; msgsA . waitForMessagesToArrive ( MESSAGE_COUNT ) ; msgsB . waitForMessagesToArrive ( MESSAGE_COUNT * _NUM ) ; msgsC . waitForMessagesToArrive ( MESSAGE_COUNT ) ; assertEquals ( MESSAGE_COUNT , msgsA . getMessageCount ( ) ) ; assertEquals ( MESSAGE_COUNT * _NUM , msgsB . getMessageCount ( ) ) ; assertEquals ( MESSAGE_COUNT , msgsC . getMessageCount ( ) ) ; }
public void flush ( ) throws IOException { WspUtil . writeUint8 ( os_ , _NUM ) ; writePublicIdentifier ( os_ , publicID_ ) ; WspUtil . writeUintvar ( os_ , WapConstants . MIB_ENUM_UTF_8 ) ; writeStringTable ( os_ ) ; wbxmlBody_ . close ( ) ; wbxmlBody_ . writeTo ( os_ ) ; os_ . flush ( ) ; }
public static void discard ( ) { current . remove ( ) ; }
private Token toASIToken ( ILeafNode leaf ) { if ( leaf . isHidden ( ) ) { return newSemicolonToken ( leaf ) ; } else { if ( ! leafNodes . hasNext ( ) ) { int tokenType = tokenTypeMapper . getInternalTokenType ( leaf ) ; int semicolonTokenType = tokenTypeMapper . getInternalTokenType ( semicolon ) ; if ( tokenType == semicolonTokenType ) { return new CommonToken ( semicolonTokenType , leaf . getText ( ) ) ; } if ( leaf . getTotalEndOffset ( ) == endOffset ) { leafNodes = Iterators . emptyIterator ( ) ; return new CommonToken ( tokenType , leaf . getText ( ) ) ; } next = new CommonToken ( semicolonTokenType , leaf . getText ( ) ) ; return new CommonToken ( tokenType , leaf . getText ( ) ) ; } else if ( leaf . getGrammarElement ( ) == rightCurlyInBlock || leaf . getGrammarElement ( ) == rightCurlyInArrowExpression ) { int tokenType = tokenTypeMapper . getInternalTokenType ( leaf ) ; next = new CommonToken ( tokenType ) ; return new CommonToken ( tokenTypeMapper . getInternalTokenType ( semicolon ) , leaf . getText ( ) ) ; } else { return newSemicolonToken ( leaf ) ; } } }
@ Override public PacketBuffer write ( PacketBuffer buf ) { values . forEach ( null ) ; return buf ; }
public final void registerFileType ( @ NotNull FileType type , @ NonNls @ Nullable String ... defaultAssociatedExtensions ) { List < FileNameMatcher > matchers = new ArrayList < FileNameMatcher > ( ) ; if ( defaultAssociatedExtensions != null ) { for ( String extension : defaultAssociatedExtensions ) { matchers . add ( new ExtensionFileNameMatcher ( extension ) ) ; } } registerFileType ( type , matchers ) ; }
public int parseInt ( String localeFormattedInteger ) { return Integer . parseInt ( localeFormattedInteger ) ; }
public static RequestSecurityTokenResponse parseXML ( String xml ) throws WSFederationException { Document doc = XMLUtils . toDOMDocument ( xml , debug ) ; Element root = doc . getDocumentElement ( ) ; return new RequestSecurityTokenResponse ( root ) ; }
@ Override public void requestResources ( SamzaResourceRequest resourceRequest ) { final int DEFAULT_PRIORITY = _NUM ; log . info ( _STR + resourceRequest . getPreferredHost ( ) + _STR + resourceRequest . getContainerID ( ) ) ; int memoryMb = resourceRequest . getMemoryMB ( ) ; int cpuCores = resourceRequest . getNumCores ( ) ; String containerLabel = yarnConfig . getContainerLabel ( ) ; String preferredHost = resourceRequest . getPreferredHost ( ) ; Resource capability = Resource . newInstance ( memoryMb , cpuCores ) ; Priority priority = Priority . newInstance ( DEFAULT_PRIORITY ) ; AMRMClient . ContainerRequest issuedRequest ; if ( preferredHost . equals ( _STR ) ) { log . info ( _STR + preferredHost ) ; issuedRequest = new AMRMClient . ContainerRequest ( capability , null , null , priority , _BOOL , containerLabel ) ; } else { log . info ( _STR + preferredHost ) ; issuedRequest = new AMRMClient . ContainerRequest ( capability , new String [ ] { preferredHost } , null , priority , _BOOL , containerLabel ) ; } synchronized ( lock ) { requestsMap . put ( resourceRequest , issuedRequest ) ; amClient . addContainerRequest ( issuedRequest ) ; } }
private Collection < ExtractedItemsCollection > filterItemsByLevel ( Player player , List < ExtractedItemsCollection > itemsCollections ) { int playerLevel = player . getLevel ( ) ; Collection < ExtractedItemsCollection > result = new ArrayList < ExtractedItemsCollection > ( ) ; for ( ExtractedItemsCollection collection : itemsCollections ) { if ( collection . getMinLevel ( ) > playerLevel ) { continue ; } if ( collection . getMaxLevel ( ) > _NUM && collection . getMaxLevel ( ) < playerLevel ) { continue ; } result . add ( collection ) ; } return result ; }
private String printDFormat ( String sx ) { int nLeadingZeros = _NUM ; int nBlanks = _NUM , n = _NUM ; int i = _NUM ; final int jFirst ; final boolean neg = sx . charAt ( _NUM ) == _STR ; if ( sx . equals ( _STR ) && precisionSet && precision == _NUM ) { sx = _STR ; } if ( ! neg ) { if ( precisionSet && sx . length ( ) < precision ) { nLeadingZeros = precision - sx . length ( ) ; } } else { if ( precisionSet && ( sx . length ( ) - _NUM ) < precision ) { nLeadingZeros = precision - sx . length ( ) + _NUM ; } } if ( nLeadingZeros < _NUM ) { nLeadingZeros = _NUM ; } if ( fieldWidthSet ) { nBlanks = fieldWidth - nLeadingZeros - sx . length ( ) ; if ( ! neg && ( leadingSign || leadingSpace ) ) { nBlanks -- ; } } if ( nBlanks < _NUM ) { nBlanks = _NUM ; } if ( leadingSign ) { n ++ ; } else if ( leadingSpace ) { n ++ ; } n += nBlanks ; n += nLeadingZeros ; n += sx . length ( ) ; final char [ ] ca = new char [ n ] ; if ( leftJustify ) { if ( neg ) { ca [ i ++ ] = _STR ; } else if ( leadingSign ) { ca [ i ++ ] = _STR ; } else if ( leadingSpace ) { ca [ i ++ ] = _STR ; } final char [ ] csx = sx . toCharArray ( ) ; jFirst = neg ? _NUM : _NUM ; for ( int j = _NUM ; j < nLeadingZeros ; i ++ , j ++ ) { ca [ i ] = _STR ; } for ( int j = jFirst ; j < csx . length ; j ++ , i ++ ) { ca [ i ] = csx [ j ] ; } for ( int j = _NUM ; j < nBlanks ; i ++ , j ++ ) { ca [ i ] = _STR ; } } else { if ( ! leadingZeros ) { for ( i = _NUM ; i < nBlanks ; i ++ ) { ca [ i ] = _STR ; } if ( neg ) { ca [ i ++ ] = _STR ; } else if ( leadingSign ) { ca [ i ++ ] = _STR ; } else if ( leadingSpace ) { ca [ i ++ ] = _STR ; } } else { if ( neg ) { ca [ i ++ ] = _STR ; } else if ( leadingSign ) { ca [ i ++ ] = _STR ; } else if ( leadingSpace ) { ca [ i ++ ] = _STR ; } for ( int j = _NUM ; j < nBlanks ; j ++ , i ++ ) { ca [ i ] = _STR ; } } for ( int j = _NUM ; j < nLeadingZeros ; j ++ , i ++ ) { ca [ i ] = _STR ; } final char [ ] csx = sx . toCharArray ( ) ; jFirst = neg ? _NUM : _NUM ; for ( int j = jFirst ; j < csx . length ; j ++ , i ++ ) { ca [ i ] = csx [ j ] ; } } return new String ( ca ) ; }
private void drawHost ( Graphics2D g2 ) { Coord loc = node . getLocation ( ) ; if ( drawCoverage && node . isRadioActive ( ) ) { ArrayList < NetworkInterface > interfaces = new ArrayList < NetworkInterface > ( ) ; interfaces . addAll ( node . getInterfaces ( ) ) ; for ( NetworkInterface ni : interfaces ) { double range = ni . getTransmitRange ( ) ; Ellipse2D . Double coverage ; coverage = new Ellipse2D . Double ( scale ( loc . getX ( ) - range ) , scale ( loc . getY ( ) - range ) , scale ( range * _NUM ) , scale ( range * _NUM ) ) ; g2 . setColor ( rangeColor ) ; g2 . draw ( coverage ) ; } } if ( drawConnections ) { g2 . setColor ( conColor ) ; Coord c1 = node . getLocation ( ) ; ArrayList < Connection > conList = new ArrayList < Connection > ( ) ; conList . addAll ( node . getConnections ( ) ) ; for ( Connection c : conList ) { DTNHost otherNode = c . getOtherNode ( node ) ; Coord c2 ; if ( otherNode == null ) { continue ; } c2 = otherNode . getLocation ( ) ; g2 . drawLine ( scale ( c1 . getX ( ) ) , scale ( c1 . getY ( ) ) , scale ( c2 . getX ( ) ) , scale ( c2 . getY ( ) ) ) ; } } g2 . setColor ( hostColor ) ; g2 . drawRect ( scale ( loc . getX ( ) - _NUM ) , scale ( loc . getY ( ) - _NUM ) , scale ( _NUM ) , scale ( _NUM ) ) ; if ( isHighlighted ( ) ) { g2 . setColor ( highlightedNodeColor ) ; g2 . fillRect ( scale ( loc . getX ( ) ) - _NUM , scale ( loc . getY ( ) ) - _NUM , _NUM , _NUM ) ; } if ( drawNodeName ) { g2 . setColor ( hostNameColor ) ; g2 . drawString ( node . toString ( ) , scale ( loc . getX ( ) ) , scale ( loc . getY ( ) ) ) ; } }
public static int binarySearchFloor ( long [ ] a , long key , boolean inclusive , boolean stayInBounds ) { int index = Arrays . binarySearch ( a , key ) ; index = index < _NUM ? - ( index + _NUM ) : ( inclusive ? index : ( index - _NUM ) ) ; return stayInBounds ? Math . max ( _NUM , index ) : index ; }
public boolean add ( symbol sym ) throws internal_error { Object previous ; not_null ( sym ) ; previous = _all . put ( sym . name ( ) , sym ) ; return previous == null ; }
protected static final String addEscapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = _NUM ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case _NUM : continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < _NUM || ch > _NUM ) { String s = _STR + Integer . toString ( ch , _NUM ) ; retval . append ( _STR + s . substring ( s . length ( ) - _NUM , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; }
public final int size ( ) { if ( GWT . isScript ( ) ) { return jsArray . size ( ) ; } else { return javaArray . size ( ) ; } }
public boolean intersects ( final PlanetModel planetModel , final Plane q , final GeoPoint [ ] notablePoints , final GeoPoint [ ] moreNotablePoints , final Membership [ ] bounds , final Membership ... moreBounds ) { if ( isNumericallyIdentical ( q ) ) { for ( GeoPoint p : notablePoints ) { if ( meetsAllBounds ( p , bounds , moreBounds ) ) { return _BOOL ; } } for ( GeoPoint p : moreNotablePoints ) { if ( meetsAllBounds ( p , bounds , moreBounds ) ) { return _BOOL ; } } return _BOOL ; } final double lineVectorX = y * q . z - z * q . y ; final double lineVectorY = z * q . x - x * q . z ; final double lineVectorZ = x * q . y - y * q . x ; if ( Math . abs ( lineVectorX ) < MINIMUM_RESOLUTION && Math . abs ( lineVectorY ) < MINIMUM_RESOLUTION && Math . abs ( lineVectorZ ) < MINIMUM_RESOLUTION ) { return _BOOL ; } double x0 ; double y0 ; double z0 ; final double denomYZ = this . y * q . z - this . z * q . y ; final double denomXZ = this . x * q . z - this . z * q . x ; final double denomXY = this . x * q . y - this . y * q . x ; if ( Math . abs ( denomYZ ) >= Math . abs ( denomXZ ) && Math . abs ( denomYZ ) >= Math . abs ( denomXY ) ) { if ( Math . abs ( denomYZ ) < MINIMUM_RESOLUTION_SQUARED ) { return _BOOL ; } final double denom = _NUM / denomYZ ; x0 = _NUM ; y0 = ( - this . D * q . z - this . z * - q . D ) * denom ; z0 = ( this . y * - q . D + this . D * q . y ) * denom ; } else if ( Math . abs ( denomXZ ) >= Math . abs ( denomXY ) && Math . abs ( denomXZ ) >= Math . abs ( denomYZ ) ) { if ( Math . abs ( denomXZ ) < MINIMUM_RESOLUTION_SQUARED ) { return _BOOL ; } final double denom = _NUM / denomXZ ; x0 = ( - this . D * q . z - this . z * - q . D ) * denom ; y0 = _NUM ; z0 = ( this . x * - q . D + this . D * q . x ) * denom ; } else { if ( Math . abs ( denomXY ) < MINIMUM_RESOLUTION_SQUARED ) { return _BOOL ; } final double denom = _NUM / denomXY ; x0 = ( - this . D * q . y - this . y * - q . D ) * denom ; y0 = ( this . x * - q . D + this . D * q . x ) * denom ; z0 = _NUM ; } final double A = lineVectorX * lineVectorX * planetModel . inverseAbSquared + lineVectorY * lineVectorY * planetModel . inverseAbSquared + lineVectorZ * lineVectorZ * planetModel . inverseCSquared ; final double B = _NUM * ( lineVectorX * x0 * planetModel . inverseAbSquared + lineVectorY * y0 * planetModel . inverseAbSquared + lineVectorZ * z0 * planetModel . inverseCSquared ) ; final double C = x0 * x0 * planetModel . inverseAbSquared + y0 * y0 * planetModel . inverseAbSquared + z0 * z0 * planetModel . inverseCSquared - _NUM ; final double BsquaredMinus = B * B - _NUM * A * C ; if ( Math . abs ( BsquaredMinus ) < MINIMUM_RESOLUTION_SQUARED ) { final double inverse2A = _NUM / ( _NUM * A ) ; final double t = - B * inverse2A ; final double pointX = lineVectorX * t + x0 ; final double pointY = lineVectorY * t + y0 ; final double pointZ = lineVectorZ * t + z0 ; for ( final Membership bound : bounds ) { if ( ! bound . isWithin ( pointX , pointY , pointZ ) ) { return _BOOL ; } } for ( final Membership bound : moreBounds ) { if ( ! bound . isWithin ( pointX , pointY , pointZ ) ) { return _BOOL ; } } return _BOOL ; } else if ( BsquaredMinus > _NUM ) { final double inverse2A = _NUM / ( _NUM * A ) ; final double sqrtTerm = Math . sqrt ( BsquaredMinus ) ; final double t1 = ( - B + sqrtTerm ) * inverse2A ; final double t2 = ( - B - sqrtTerm ) * inverse2A ; final double point1X = lineVectorX * t1 + x0 ; final double point1Y = lineVectorY * t1 + y0 ; final double point1Z = lineVectorZ * t1 + z0 ; boolean point1Valid = _BOOL ; for ( final Membership bound : bounds ) { if ( ! bound . isWithin ( point1X , point1Y , point1Z ) ) { point1Valid = _BOOL ; break ; } } if ( point1Valid ) { for ( final Membership bound : moreBounds ) { if ( ! bound . isWithin ( point1X , point1Y , point1Z ) ) { point1Valid = _BOOL ; break ; } } } if ( point1Valid ) { return _BOOL ; } final double point2X = lineVectorX * t2 + x0 ; final double point2Y = lineVectorY * t2 + y0 ; final double point2Z = lineVectorZ * t2 + z0 ; for ( final Membership bound : bounds ) { if ( ! bound . isWithin ( point2X , point2Y , point2Z ) ) { return _BOOL ; } } for ( final Membership bound : moreBounds ) { if ( ! bound . isWithin ( point2X , point2Y , point2Z ) ) { return _BOOL ; } } return _BOOL ; } else { return _BOOL ; } }
public static long longFromBase64 ( String value ) { int pos = _NUM ; long longVal = base64Values [ value . charAt ( pos ++ ) ] ; int len = value . length ( ) ; while ( pos < len ) { longVal <<= _NUM ; longVal |= base64Values [ value . charAt ( pos ++ ) ] ; } return longVal ; }
public List < LocalTime > bottom ( int n ) { List < LocalTime > bottom = new ArrayList < > ( ) ; int [ ] values = data . toIntArray ( ) ; IntArrays . parallelQuickSort ( values ) ; for ( int i = _NUM ; i < n && i < values . length ; i ++ ) { bottom . add ( PackedLocalTime . asLocalTime ( values [ i ] ) ) ; } return bottom ; }
public double SumOutlinkAuthorityScore ( Page page ) { List < String > outLinks = page . getOutlinks ( ) ; double authScore = _NUM ; for ( int i = _NUM ; i < outLinks . size ( ) ; i ++ ) { Page outLink = pTable . get ( outLinks . get ( i ) ) ; if ( outLink != null ) { authScore += outLink . authority ; } } return authScore ; }
public synchronized void end ( ) { graphicsToBeDrawn . close ( ) ; if ( currentGraphics != null ) { graphicsDrawn . append ( currentGraphics ) ; } graphicsDrawn . closeWhenEmpty ( ) ; if ( printerJobThread != null && printerJobThread . isAlive ( ) ) { try { printerJobThread . join ( ) ; } catch ( InterruptedException e ) { } } }
public List < FileStatus > browse ( String filePath ) throws Exception { LOG . info ( _STR + filePath + _STR + hdfsEndPoint ) ; FileSystem hdfsFileSystem = null ; FileStatus [ ] listStatus ; try { Configuration config = createConfig ( ) ; hdfsFileSystem = getFileSystem ( config ) ; Path path = new Path ( filePath ) ; listStatus = hdfsFileSystem . listStatus ( path ) ; } catch ( Exception ex ) { LOG . error ( _STR + filePath , ex . getMessage ( ) ) ; throw new Exception ( _STR + ex . getMessage ( ) ) ; } finally { if ( hdfsFileSystem != null ) hdfsFileSystem . close ( ) ; } return Arrays . asList ( listStatus ) ; }
public void append ( CharSequence s ) { text . append ( s ) ; }
public EipModelWizardInitialObjectCreationPage ( String pageId ) { super ( pageId ) ; }
private void unwrapData ( ) throws IgniteCheckedException , SSLException { if ( log . isDebugEnabled ( ) ) log . debug ( _STR ) ; inNetBuf . flip ( ) ; SSLEngineResult res = unwrap0 ( ) ; inNetBuf . compact ( ) ; checkStatus ( res ) ; renegotiateIfNeeded ( res ) ; }
public boolean isAttributeSpecified ( int attributeHandle ) { int type = getNodeType ( attributeHandle ) ; if ( DTM . ATTRIBUTE_NODE == type ) { Attr attr = ( Attr ) getNode ( attributeHandle ) ; return attr . getSpecified ( ) ; } return _BOOL ; }
private static void checkPermission ( ) throws SecurityException { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPermission ( new JodaTimePermission ( _STR ) ) ; } }
private void storePassword ( String password ) { if ( isStore && sharedState != null ) { sharedState . put ( getPwdKey ( ) , password ) ; } }
public void or ( Criteria criteria ) { oredCriteria . add ( criteria ) ; }
void deleteChild ( PolicyNode childNode ) { if ( isImmutable ) { throw new IllegalStateException ( _STR ) ; } mChildren . remove ( childNode ) ; }
void addFillComponents ( Container panel , int [ ] cols , int [ ] rows ) { Dimension filler = new Dimension ( _NUM , _NUM ) ; boolean filled_cell_11 = _BOOL ; CellConstraints cc = new CellConstraints ( ) ; if ( cols . length > _NUM && rows . length > _NUM ) { if ( cols [ _NUM ] == _NUM && rows [ _NUM ] == _NUM ) { panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , _NUM ) ) ; filled_cell_11 = _BOOL ; } } for ( int index = _NUM ; index < cols . length ; index ++ ) { if ( cols [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( cols [ index ] , _NUM ) ) ; } for ( int index = _NUM ; index < rows . length ; index ++ ) { if ( rows [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , rows [ index ] ) ) ; } }
public void testFloatValuePlusZero ( ) { String a = _STR ; BigDecimal aNumber = new BigDecimal ( a ) ; int zero = _NUM ; float result = aNumber . floatValue ( ) ; assertTrue ( _STR , Float . floatToIntBits ( result ) == zero ) ; }
public ExternalProcessResult awaitTerminationAndResult ( int timeoutMs , boolean destroyOnError ) throws InterruptedException , TimeoutException , OperationCancellation , IOException { awaitTermination ( timeoutMs , destroyOnError ) ; return new ExternalProcessResult ( process . exitValue ( ) , getStdOutBytes ( ) , getStdErrBytes ( ) ) ; }
public void refreshInheritedMethods ( Set modifiedSuperExpandos ) { for ( Iterator i = modifiedSuperExpandos . iterator ( ) ; i . hasNext ( ) ; ) { ExpandoMetaClass superExpando = ( ExpandoMetaClass ) i . next ( ) ; if ( superExpando != this ) { refreshInheritedMethods ( superExpando ) ; } } }
public static List < Fragment > parsePlaceholder ( String parseString ) throws PlaceholderParseException { List < Fragment > result = new ArrayList < Fragment > ( ) ; int currOutputIndex = _NUM ; int currSearchIndex = _NUM ; while ( _BOOL ) { if ( currSearchIndex == parseString . length ( ) ) { break ; } int startIndex = parseString . indexOf ( _STR , currSearchIndex ) ; if ( startIndex == - _NUM ) { if ( currOutputIndex < parseString . length ( ) ) { String endString = parseString . substring ( currOutputIndex , parseString . length ( ) ) ; TextFragment textFragment = new TextFragment ( endString ) ; result . add ( textFragment ) ; } break ; } if ( startIndex > _NUM ) { String textSoFar = parseString . substring ( currOutputIndex , startIndex ) ; if ( textSoFar . length ( ) != _NUM ) { result . add ( new TextFragment ( textSoFar ) ) ; } } if ( ( startIndex > _NUM ) && ( parseString . charAt ( startIndex - _NUM ) == _STR ) ) { currOutputIndex = startIndex + _NUM ; currSearchIndex = startIndex + _NUM ; continue ; } int endIndex = parseString . indexOf ( _STR , startIndex ) ; if ( endIndex == - _NUM ) { throw new PlaceholderParseException ( _STR + parseString . substring ( startIndex , parseString . length ( ) ) + _STR ) ; } String between = parseString . substring ( startIndex + _NUM , endIndex ) ; ParameterFragment parameterFragment = new ParameterFragment ( between ) ; result . add ( parameterFragment ) ; currOutputIndex = endIndex + _NUM ; currSearchIndex = endIndex ; } LinkedList < Fragment > fragments = new LinkedList < Fragment > ( ) ; fragments . add ( result . get ( _NUM ) ) ; for ( int i = _NUM ; i < result . size ( ) ; i ++ ) { Fragment fragment = result . get ( i ) ; if ( ! ( result . get ( i ) instanceof TextFragment ) ) { fragments . add ( fragment ) ; continue ; } if ( ! ( fragments . getLast ( ) instanceof TextFragment ) ) { fragments . add ( fragment ) ; continue ; } TextFragment textFragment = ( TextFragment ) fragments . getLast ( ) ; fragments . removeLast ( ) ; fragments . add ( new TextFragment ( textFragment . getValue ( ) + fragment . getValue ( ) ) ) ; } return fragments ; }
@ Override protected void failed ( ) { relation . setCanceled ( _BOOL ) ; super . failed ( ) ; }
private void routeSingleGetRequest ( RequestAndResponse requestAndResponse , String uri ) throws IOException , ServletException { if ( uri . startsWith ( _STR ) ) { handleHtmlShowNotebooks ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowQuotations ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowSources ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowSource ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowNotebook ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlSearch ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlBasicHelp ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlAdvancedHelp ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlHelp ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlUserBackupForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlUserRestoreForm ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowAccount ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowAccounts ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlShutdownForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlClearForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlOnlineBackupForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlCheckForErrorsForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlShowDBBackups ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlOfflineDbBackupForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleJsonShowEntry ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleJsonShowEntryParent ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleJsonShowEntryChildren ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleJsonSearchNotes ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlNewNotebookForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlNothing ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlCouldNotCreateNote ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlShowRestoreDbBackupCommand ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlShowSignedOut ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlChangePassword ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlChangeAccount ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlCloseAccount ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleJsonIsSignedIn ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlUserRestoreFrame ( requestAndResponse ) ; } else { returnHtml404 ( requestAndResponse ) ; } }
private void changeAnnotationDocumentState ( SourceDocument aSourceDocument , User aUser , AnnotationDocumentStateTransition aAnnotationDocumentStateTransition ) { AnnotationDocument annotationDocument = repository . getAnnotationDocument ( aSourceDocument , aUser ) ; annotationDocument . setState ( AnnotationDocumentStateTransition . transition ( aAnnotationDocumentStateTransition ) ) ; try { repository . createAnnotationDocument ( annotationDocument ) ; } catch ( IOException e ) { LOG . info ( _STR ) ; } }
boolean removeEdge ( SparseEdge e ) { boolean removedEdge = edges . remove ( e ) ; boolean removedNeighbour = neighbours . remove ( e . getOpposite ( this ) ) ; if ( removedEdge && removedNeighbour ) return _BOOL ; else if ( ! removedEdge && ! removedNeighbour ) return _BOOL ; else throw new RuntimeException ( _STR ) ; }
protected void longKeyPress ( int keyCode ) { }
public boolean hasDescendant ( Pattern pattern ) { Queue < BNode > nodesToProcess = new LinkedList < BNode > ( ) ; nodesToProcess . add ( this ) ; while ( ! nodesToProcess . isEmpty ( ) ) { BNode currentNode = nodesToProcess . poll ( ) ; for ( BNode descendantNode : currentNode . getOutputNodes ( ) ) { Matcher matcher = pattern . matcher ( descendantNode . getId ( ) ) ; if ( matcher . matches ( ) ) { return _BOOL ; } if ( ! nodesToProcess . contains ( descendantNode ) ) { nodesToProcess . add ( descendantNode ) ; } } } return _BOOL ; }
public int fileWrite ( long handle , byte [ ] buffer , int offset , int count ) { if ( ( offset | count ) < _NUM || offset > buffer . length || buffer . length - offset < count ) { throw new ArrayIndexOutOfBoundsException ( _STR + buffer . length + _STR + offset + _STR + count ) ; } if ( count == _NUM ) { return _NUM ; } byte [ ] data = buffer ; if ( offset > _NUM ) { data = new byte [ count ] ; System . arraycopy ( buffer , offset , data , _NUM , count ) ; } IntOut bytesWrittenOut = new IntOut ( ) ; try { checkResult ( LibIMobileDevice . afc_file_write ( getRef ( ) , handle , data , count , bytesWrittenOut ) ) ; int bytesWritten = bytesWrittenOut . getValue ( ) ; return bytesWritten ; } finally { bytesWrittenOut . delete ( ) ; } }
private static void generateFiles ( ) { String [ ] classNames ; ResourceBundle rules , info ; info = ResourceBundle . getBundle ( _STR , new Locale ( language , country , valiant ) , BreakIteratorRBControl . INSTANCE ) ; classNames = info . getStringArray ( _STR ) ; rules = ResourceBundle . getBundle ( _STR , new Locale ( language , country , valiant ) , BreakIteratorRBControl . INSTANCE ) ; if ( info . containsKey ( _STR ) ) { generateDataFile ( info . getString ( _STR ) , rules . getString ( _STR ) , classNames [ _NUM ] ) ; } if ( info . containsKey ( _STR ) ) { generateDataFile ( info . getString ( _STR ) , rules . getString ( _STR ) , classNames [ _NUM ] ) ; } if ( info . containsKey ( _STR ) ) { generateDataFile ( info . getString ( _STR ) , rules . getString ( _STR ) , classNames [ _NUM ] ) ; } if ( info . containsKey ( _STR ) ) { generateDataFile ( info . getString ( _STR ) , rules . getString ( _STR ) , classNames [ _NUM ] ) ; } }
public static boolean isCglibProxy ( Object object ) { return ClassUtils . isCglibProxyClass ( object . getClass ( ) ) ; }
private float [ ] calculateImageIndents ( ) { mTempMatrix . reset ( ) ; mTempMatrix . setRotate ( - getCurrentAngle ( ) ) ; float [ ] unrotatedImageCorners = Arrays . copyOf ( mCurrentImageCorners , mCurrentImageCorners . length ) ; float [ ] unrotatedCropBoundsCorners = RectUtils . getCornersFromRect ( mCropRect ) ; mTempMatrix . mapPoints ( unrotatedImageCorners ) ; mTempMatrix . mapPoints ( unrotatedCropBoundsCorners ) ; RectF unrotatedImageRect = RectUtils . trapToRect ( unrotatedImageCorners ) ; RectF unrotatedCropRect = RectUtils . trapToRect ( unrotatedCropBoundsCorners ) ; float deltaLeft = unrotatedImageRect . left - unrotatedCropRect . left ; float deltaTop = unrotatedImageRect . top - unrotatedCropRect . top ; float deltaRight = unrotatedImageRect . right - unrotatedCropRect . right ; float deltaBottom = unrotatedImageRect . bottom - unrotatedCropRect . bottom ; float indents [ ] = new float [ _NUM ] ; indents [ _NUM ] = ( deltaLeft > _NUM ) ? deltaLeft : _NUM ; indents [ _NUM ] = ( deltaTop > _NUM ) ? deltaTop : _NUM ; indents [ _NUM ] = ( deltaRight < _NUM ) ? deltaRight : _NUM ; indents [ _NUM ] = ( deltaBottom < _NUM ) ? deltaBottom : _NUM ; mTempMatrix . reset ( ) ; mTempMatrix . setRotate ( getCurrentAngle ( ) ) ; mTempMatrix . mapPoints ( indents ) ; return indents ; }
public void testBug10630 ( ) throws Exception { Connection conn2 = null ; Statement stmt2 = null ; try { conn2 = getConnectionWithProps ( ( Properties ) null ) ; stmt2 = conn2 . createStatement ( ) ; conn2 . close ( ) ; stmt2 . getWarnings ( ) ; fail ( _STR ) ; } catch ( SQLException sqlEx ) { assertEquals ( SQLError . SQL_STATE_ILLEGAL_ARGUMENT , sqlEx . getSQLState ( ) ) ; } finally { if ( stmt2 != null ) { stmt2 . close ( ) ; } if ( conn2 != null ) { conn2 . close ( ) ; } } }
public static boolean equals ( boolean [ ] field1 , boolean [ ] field2 ) { if ( field1 == null || field1 . length == _NUM ) { return field2 == null || field2 . length == _NUM ; } else { return Arrays . equals ( field1 , field2 ) ; } }
public void toFront ( final WorkflowAnnotation anno ) { if ( anno == null ) { throw new IllegalArgumentException ( _STR ) ; } synchronized ( lock ) { if ( annotationsDrawOrder . remove ( anno ) ) { annotationsDrawOrder . add ( anno ) ; } if ( annotationsEventOrder . remove ( anno ) ) { annotationsEventOrder . add ( _NUM , anno ) ; } } }
public synchronized void addFrame ( final Image image , final long frameDuration ) { totalDuration += frameDuration ; frames . add ( new AnimFrame ( image , totalDuration ) ) ; }
public static String printCodePointAsString ( int codePoint ) { StringBuilder builder = new StringBuilder ( _NUM ) ; builder . append ( _STR ) ; try { printStringCodePoint ( builder , codePoint ) ; } catch ( IOException e ) { throw new Error ( e ) ; } builder . append ( _STR ) ; return builder . toString ( ) ; }
private void cleanupMinidumpFile ( ) { if ( ! CrashFileManager . tryMarkAsUploaded ( mFileToUpload ) ) { Log . w ( TAG , _STR + mFileToUpload + _STR ) ; if ( ! mFileToUpload . delete ( ) ) { Log . w ( TAG , _STR + mFileToUpload ) ; } } }
boolean closeOutbound ( ) throws SSLException { if ( sslEngine == null || sslEngine . isOutboundDone ( ) ) { return _BOOL ; } sslEngine . closeOutbound ( ) ; createOutNetBuffer ( _NUM ) ; SSLEngineResult result ; for ( ; ; ) { result = sslEngine . wrap ( emptyBuffer . buf ( ) , outNetBuffer . buf ( ) ) ; if ( result . getStatus ( ) == SSLEngineResult . Status . BUFFER_OVERFLOW ) { outNetBuffer . capacity ( outNetBuffer . capacity ( ) << _NUM ) ; outNetBuffer . limit ( outNetBuffer . capacity ( ) ) ; } else { break ; } } if ( result . getStatus ( ) != SSLEngineResult . Status . CLOSED ) { throw new SSLException ( _STR + result ) ; } outNetBuffer . flip ( ) ; return _BOOL ; }
@ Nullable private static Bitmap extractThumbnail ( Bitmap source , int width , int height ) { return extractThumbnail ( source , width , height , OPTIONS_NONE ) ; }
private void writePkgInfo ( ) throws BuildException { File pkgInfo = new File ( mContentsDir , _STR ) ; PrintWriter writer = null ; try { writer = new PrintWriter ( new BufferedWriter ( new FileWriter ( pkgInfo ) ) ) ; writer . print ( bundleProperties . getCFBundlePackageType ( ) ) ; writer . println ( bundleProperties . getCFBundleSignature ( ) ) ; writer . flush ( ) ; } catch ( IOException ex ) { throw new BuildException ( _STR + ex ) ; } finally { mFileUtils . close ( writer ) ; } }
public EventBean [ ] toArray ( ) { if ( firstEvent == null ) { return new EventBean [ _NUM ] ; } if ( additionalEvents == null ) { return new EventBean [ ] { firstEvent } ; } EventBean [ ] events = new EventBean [ _NUM + additionalEvents . size ( ) ] ; events [ _NUM ] = firstEvent ; int count = _NUM ; for ( EventBean theEvent : additionalEvents ) { events [ count ] = theEvent ; count ++ ; } return events ; }
private byte [ ] decode ( DerInputStream in ) throws IOException { DerValue val = in . getDerValue ( ) ; byte [ ] derEncoding = val . toByteArray ( ) ; derEncoding [ _NUM ] = DerValue . tag_SetOf ; DerInputStream derIn = new DerInputStream ( derEncoding ) ; DerValue [ ] derVals = derIn . getSet ( _NUM , _BOOL ) ; PKCS9Attribute attrib ; ObjectIdentifier oid ; boolean reuseEncoding = _BOOL ; for ( int i = _NUM ; i < derVals . length ; i ++ ) { try { attrib = new PKCS9Attribute ( derVals [ i ] ) ; } catch ( ParsingException e ) { if ( ignoreUnsupportedAttributes ) { reuseEncoding = _BOOL ; continue ; } else { throw e ; } } oid = attrib . getOID ( ) ; if ( attributes . get ( oid ) != null ) throw new IOException ( _STR + oid ) ; if ( permittedAttributes != null && ! permittedAttributes . containsKey ( oid ) ) throw new IOException ( _STR + oid + _STR ) ; attributes . put ( oid , attrib ) ; } return reuseEncoding ? derEncoding : generateDerEncoding ( ) ; }
StringVector processPREFIX_LIST ( StylesheetHandler handler , String uri , String name , String rawName , String value ) throws org . xml . sax . SAXException { StringTokenizer tokenizer = new StringTokenizer ( value , _STR ) ; int nStrings = tokenizer . countTokens ( ) ; StringVector strings = new StringVector ( nStrings ) ; for ( int i = _NUM ; i < nStrings ; i ++ ) { String prefix = tokenizer . nextToken ( ) ; String url = handler . getNamespaceForPrefix ( prefix ) ; if ( prefix . equals ( Constants . ATTRVAL_DEFAULT_PREFIX ) || url != null ) strings . addElement ( prefix ) ; else throw new org . xml . sax . SAXException ( XSLMessages . createMessage ( XSLTErrorResources . ER_CANT_RESOLVE_NSPREFIX , new Object [ ] { prefix } ) ) ; } return strings ; }
@ Override public CategoricalResults clone ( ) { CategoricalResults copy = new CategoricalResults ( n ) ; copy . probabilities = Arrays . copyOf ( probabilities , probabilities . length ) ; return copy ; }
private static StringBuilder dump ( StringBuilder _lbuffer , long value ) { for ( int j = _NUM ; j < _NUM ; j ++ ) { _lbuffer . append ( _hexcodes [ ( int ) ( value > > _shifts [ j ] ) & _NUM ] ) ; } return _lbuffer ; }
private boolean typeSpecialChar ( char c ) { switch ( c ) { case _STR : controller . keyPress ( KeyEvent . VK_TAB ) ; controller . keyRelease ( KeyEvent . VK_TAB ) ; return _BOOL ; case _STR : controller . keyPress ( KeyEvent . VK_ENTER ) ; controller . keyRelease ( KeyEvent . VK_ENTER ) ; return _BOOL ; default : return _BOOL ; } }
protected static boolean eq ( Object o1 , Object o2 ) { return o1 == null ? o2 == null : o1 . equals ( o2 ) ; }
public static boolean hasMimeType ( String mimeType ) { if ( mimeType == null || mimeType . isEmpty ( ) ) { return _BOOL ; } return mimeTypeToExtensionMap . containsKey ( mimeType ) ; }
public Iterable < Notification > skip ( @ Nonnull final Iterable < Notification > notifications , final long startId , final boolean inclusive , final int limitSize ) { Objects . requireNonNull ( notifications ) ; final int position = indexOf ( notifications , startId ) ; if ( position == - _NUM ) { return Iterables . limit ( notifications , limitSize ) ; } if ( inclusive ) { return Iterables . limit ( Iterables . skip ( notifications , position ) , limitSize ) ; } return Iterables . limit ( Iterables . skip ( notifications , position + _NUM ) , limitSize ) ; }
public boolean writeData ( PdxWriter writer , Object obj ) { if ( isRelevant ( obj . getClass ( ) ) ) { writeData ( writer , obj , getClassInfo ( obj . getClass ( ) ) ) ; return _BOOL ; } return _BOOL ; }
protected final void writeC ( ByteBuffer buf , int value ) { buf . put ( ( byte ) value ) ; }
public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
public boolean isEmpty ( ) { return priorityQueue . isEmpty ( ) ; }
public ViterbiPoint ( Item item ) { this . item = item ; }
protected void paintContentBorderBottomEdge ( Graphics g , int x , int y , int w , int h , boolean drawBroken , Rectangle selRect , boolean isContentBorderPainted ) { if ( isContentBorderPainted ) { g . setColor ( darkShadow ) ; g . fillRect ( x , y + h - _NUM , w - _NUM , _NUM ) ; } }
private void emitListAdd ( Method method , String fieldName , StringBuilder builder ) { builder . append ( _STR ) ; builder . append ( getListAdderName ( fieldName ) ) ; builder . append ( _STR ) ; builder . append ( getTypeArgumentImplName ( ( ParameterizedType ) method . getGenericReturnType ( ) , _NUM ) ) ; builder . append ( _STR ) ; builder . append ( getEnsureName ( fieldName ) ) ; builder . append ( _STR ) ; builder . append ( fieldName ) ; builder . append ( _STR ) ; builder . append ( _STR ) ; }
public RSAPublicKey parsePEMPublicKey ( String pem ) throws GeneralSecurityException { try { byte [ ] bs = decodeAsciiArmoredPEM ( pem ) ; ByteBuffer data = ByteBuffer . wrap ( bs ) ; final ASN1Object ob = asn1Parser . parseASN1 ( data ) ; final List < ASN1Object > seq = asn1ObjectToSequence ( ob , _NUM ) ; final BigInteger modulus = asn1ObjectToBigInt ( seq . get ( _NUM ) ) ; final BigInteger exponent = asn1ObjectToBigInt ( seq . get ( _NUM ) ) ; return createKeyFromModulusAndExponent ( modulus , exponent ) ; } catch ( IllegalArgumentException e ) { throw new InvalidKeyException ( ) ; } }
public static < T > ParallelPublisher < T > from ( Publisher < ? extends T > source , boolean ordered , int parallelism ) { return from ( source , ordered , parallelism , Px . bufferSize ( ) , Px . defaultQueueSupplier ( Px . bufferSize ( ) ) ) ; }
public long next ( long startTime , long fromTime , long currentCount ) { if ( startTime == _NUM ) startTime = RecurrenceUtil . now ( ) ; if ( fromTime == _NUM ) fromTime = startTime ; if ( getEndTime ( ) != _NUM && getEndTime ( ) <= RecurrenceUtil . now ( ) ) return _NUM ; Debug . logVerbose ( _STR , module ) ; if ( getCount ( ) != - _NUM && currentCount >= getCount ( ) ) return _NUM ; Debug . logVerbose ( _STR , module ) ; boolean isSeeking = _BOOL ; long nextRuntime = _NUM ; long seekTime = fromTime ; int loopProtection = _NUM ; int maxLoop = ( _NUM * _NUM * _NUM * _NUM * _NUM ) ; while ( isSeeking && loopProtection < maxLoop ) { Date nextRun = getNextFreq ( startTime , seekTime ) ; seekTime = nextRun . getTime ( ) ; if ( validByRule ( nextRun ) ) { isSeeking = _BOOL ; nextRuntime = nextRun . getTime ( ) ; } loopProtection ++ ; } return nextRuntime ; }
public void addToQueue ( Var var ) { addToQueue ( Collections . singleton ( var ) ) ; }
public String canonicalize ( String simpleURL ) { String resultURL = simpleURL ; if ( simpleURL . startsWith ( _STR ) ) { resultURL = _STR + simpleURL ; } else if ( simpleURL . startsWith ( _STR ) ) { resultURL = _STR + simpleURL ; } else if ( simpleURL . startsWith ( _STR ) ) { resultURL = _STR + simpleURL ; } else if ( ! hasProtocolName ( simpleURL ) ) { if ( isSimpleHostName ( simpleURL ) ) { simpleURL = _STR + simpleURL + _STR ; } resultURL = _STR + simpleURL ; } return resultURL ; }
public String read ( String filename ) throws IOException { return ProcFile . readFile ( String . format ( _STR , pid , filename ) ) ; }
private long calculateAnimationDuration ( float initialVelocity , float displacement ) { return MathUtils . clamp ( Math . round ( Math . abs ( _NUM * displacement / initialVelocity ) ) , MINIMUM_ANIMATION_DURATION_MS , MAXIMUM_ANIMATION_DURATION_MS ) ; }
@ RequestProcessing ( value = _STR , method = HTTPRequestMethod . GET ) @ Before ( adviceClass = { StopwatchStartAdvice . class , AnonymousViewCheck . class , UserBlockCheck . class } ) @ After ( adviceClass = StopwatchEndAdvice . class ) public void showHomePoints ( final HTTPRequestContext context , final HttpServletRequest request , final HttpServletResponse response , final String userName ) throws Exception { final JSONObject user = ( JSONObject ) request . getAttribute ( User . USER ) ; request . setAttribute ( Keys . TEMAPLTE_DIR_NAME , Symphonys . get ( _STR ) ) ; final AbstractFreeMarkerRenderer renderer = new SkinRenderer ( ) ; context . setRenderer ( renderer ) ; renderer . setTemplateName ( _STR ) ; final Map < String , Object > dataModel = renderer . getDataModel ( ) ; filler . fillHeaderAndFooter ( request , response , dataModel ) ; String pageNumStr = request . getParameter ( _STR ) ; if ( Strings . isEmptyOrNull ( pageNumStr ) || ! Strings . isNumeric ( pageNumStr ) ) { pageNumStr = _STR ; } final int pageNum = Integer . valueOf ( pageNumStr ) ; final int pageSize = Symphonys . getInt ( _STR ) ; final int windowSize = Symphonys . getInt ( _STR ) ; fillHomeUser ( dataModel , user ) ; avatarQueryService . fillUserAvatarURL ( user ) ; final String followingId = user . optString ( Keys . OBJECT_ID ) ; dataModel . put ( Follow . FOLLOWING_ID , followingId ) ; final JSONObject userPointsResult = pointtransferQueryService . getUserPoints ( user . optString ( Keys . OBJECT_ID ) , pageNum , pageSize ) ; final List < JSONObject > userPoints = CollectionUtils . < JSONObject > jsonArrayToList ( userPointsResult . optJSONArray ( Keys . RESULTS ) ) ; dataModel . put ( Common . USER_HOME_POINTS , userPoints ) ; final boolean isLoggedIn = ( Boolean ) dataModel . get ( Common . IS_LOGGED_IN ) ; if ( isLoggedIn ) { final JSONObject currentUser = ( JSONObject ) dataModel . get ( Common . CURRENT_USER ) ; final String followerId = currentUser . optString ( Keys . OBJECT_ID ) ; final boolean isFollowing = followQueryService . isFollowing ( followerId , user . optString ( Keys . OBJECT_ID ) ) ; dataModel . put ( Common . IS_FOLLOWING , isFollowing ) ; } user . put ( UserExt . USER_T_CREATE_TIME , new Date ( user . getLong ( Keys . OBJECT_ID ) ) ) ; final int pointsCnt = userPointsResult . optInt ( Pagination . PAGINATION_RECORD_COUNT ) ; final int pageCount = ( int ) Math . ceil ( ( double ) pointsCnt / ( double ) pageSize ) ; final List < Integer > pageNums = Paginator . paginate ( pageNum , pageSize , pageCount , windowSize ) ; if ( ! pageNums . isEmpty ( ) ) { dataModel . put ( Pagination . PAGINATION_FIRST_PAGE_NUM , pageNums . get ( _NUM ) ) ; dataModel . put ( Pagination . PAGINATION_LAST_PAGE_NUM , pageNums . get ( pageNums . size ( ) - _NUM ) ) ; } dataModel . put ( Pagination . PAGINATION_CURRENT_PAGE_NUM , pageNum ) ; dataModel . put ( Pagination . PAGINATION_PAGE_COUNT , pageCount ) ; dataModel . put ( Pagination . PAGINATION_PAGE_NUMS , pageNums ) ; }
private static double norm ( final double [ ] v ) { double agg = _NUM ; for ( int i = _NUM ; i < v . length ; i ++ ) { agg += ( v [ i ] * v [ i ] ) ; } return Math . sqrt ( agg ) ; }
private int measureHeight ( int measureSpec ) { float result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = mPaintSelected . getStrokeWidth ( ) + getPaddingTop ( ) + getPaddingBottom ( ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return ( int ) ( ( float ) Math . ceil ( result ) ) ; }
public void layout ( Container container ) { Map < Location , Drawable > comps = getComponentsByLocation ( container ) ; Drawable north = comps . get ( Location . NORTH ) ; Drawable northEast = comps . get ( Location . NORTH_EAST ) ; Drawable east = comps . get ( Location . EAST ) ; Drawable southEast = comps . get ( Location . SOUTH_EAST ) ; Drawable south = comps . get ( Location . SOUTH ) ; Drawable southWest = comps . get ( Location . SOUTH_WEST ) ; Drawable west = comps . get ( Location . WEST ) ; Drawable northWest = comps . get ( Location . NORTH_WEST ) ; Drawable center = comps . get ( Location . CENTER ) ; double widthWest = getMaxWidth ( northWest , west , southWest ) ; double widthEast = getMaxWidth ( northEast , east , southEast ) ; double heightNorth = getMaxHeight ( northWest , north , northEast ) ; double heightSouth = getMaxHeight ( southWest , south , southEast ) ; double gapEast = ( widthEast > _NUM ) ? getGapX ( ) : _NUM ; double gapWest = ( widthWest > _NUM ) ? getGapX ( ) : _NUM ; double gapNorth = ( heightNorth > _NUM ) ? getGapY ( ) : _NUM ; double gapSouth = ( heightSouth > _NUM ) ? getGapY ( ) : _NUM ; Rectangle2D bounds = container . getBounds ( ) ; Insets2D insets = container . getInsets ( ) ; if ( insets == null ) { insets = new Insets2D . Double ( ) ; } double xWest = bounds . getMinX ( ) + insets . getLeft ( ) - gapWest - widthWest ; double xCenter = bounds . getMinX ( ) + insets . getLeft ( ) ; double xEast = bounds . getMaxX ( ) - insets . getRight ( ) + gapEast ; double yNorth = bounds . getMinY ( ) + insets . getTop ( ) - gapNorth - heightNorth ; double yCenter = bounds . getMinY ( ) + insets . getTop ( ) ; double ySouth = bounds . getMaxY ( ) - insets . getBottom ( ) + gapSouth ; layoutComponent ( northWest , xWest , yNorth , widthWest , heightNorth ) ; layoutComponent ( north , xCenter , yNorth , bounds . getWidth ( ) - insets . getHorizontal ( ) , heightNorth ) ; layoutComponent ( northEast , xEast , yNorth , widthEast , heightNorth ) ; layoutComponent ( east , xEast , yCenter , widthEast , bounds . getHeight ( ) - insets . getVertical ( ) ) ; layoutComponent ( southEast , xEast , ySouth , widthEast , heightSouth ) ; layoutComponent ( south , xCenter , ySouth , bounds . getWidth ( ) - insets . getHorizontal ( ) , heightSouth ) ; layoutComponent ( southWest , xWest , ySouth , widthWest , heightSouth ) ; layoutComponent ( west , xWest , yCenter , widthWest , bounds . getHeight ( ) - insets . getVertical ( ) ) ; layoutComponent ( center , xCenter + getGapX ( ) , yCenter + getGapY ( ) , bounds . getWidth ( ) - insets . getHorizontal ( ) - _NUM * getGapX ( ) , bounds . getHeight ( ) - insets . getVertical ( ) - _NUM * getGapY ( ) ) ; }
void fullyUnlock ( ) { takeLock . unlock ( ) ; putLock . unlock ( ) ; }
public void add ( int i , int data ) { if ( _length + _NUM > _capacity ) ensureCapacity ( _length + _NUM ) ; System . arraycopy ( _buffer , i , _buffer , i + _NUM , _length - i ) ; _buffer [ i ] = ( byte ) data ; _length += _NUM ; }
private double mean ( double [ ] vec ) { double result = _NUM ; for ( int i = _NUM ; i < vec . length ; i ++ ) result += vec [ i ] ; return result / vec . length ; }
private Sprite ( float xPos , float yPos , float xVel , float yVel , Image ... sprites ) { if ( sprites != null ) spriteFrame = new ImageView ( sprites [ _NUM ] ) ; playerStates . addAll ( Arrays . asList ( sprites ) ) ; spriteFrame . setTranslateX ( xPos ) ; spriteFrame . setTranslateY ( yPos ) ; this . xPos = xPos ; this . yPos = yPos ; this . xVel = xVel ; this . yVel = yVel ; }
public void close ( ) { out . close ( ) ; }
protected static SyncToken createSyncToken ( String dateString , @ Nullable String uuid ) { try { return new SyncToken ( DB_DATE_FORMAT . parse ( dateString ) , uuid ) ; } catch ( ParseException e ) { throw new RuntimeException ( e ) ; } }
private static boolean equalsHandlesNulls ( Object a , Object b ) { return a == b || ( a != null && a . equals ( b ) ) ; }
public void init ( String flagzDirectory ) throws FlagException , EtcdFlagFieldUpdaterException { this . directoryPrefix = MoreObjects . firstNonNull ( flagzDirectory , directoryFlag . get ( ) ) ; client = new EtcdClient ( uris . toArray ( new URI [ uris . size ( ) ] ) ) ; client . setRetryHandler ( retryPolicy ) ; initialSetAllFlagz ( ) ; }
public static void closeEL ( InputStream is ) { try { if ( is != null ) is . close ( ) ; } catch ( Throwable t ) { } }
public void testRandom ( ) { ExtremityMonitor monitor = new ExtremityMonitor ( ) ; Random random = new Random ( _NUM ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { monitor . update ( random . nextDouble ( ) ) ; } assertTrue ( monitor . getMin ( ) < _NUM ) ; assertTrue ( monitor . getMax ( ) < _NUM ) ; assertTrue ( monitor . getMin ( ) >= _NUM ) ; assertTrue ( monitor . getMax ( ) > _NUM ) ; }
public static String replace ( String str , char oldChar , String newStr ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = _NUM ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch == oldChar ) { buf . append ( newStr ) ; } else { buf . append ( ch ) ; } } return buf . toString ( ) ; }
@ Action ( value = _STR ) @ ValidationErrorPage ( value = ERROR ) @ SkipValidation public String newform ( ) { setLoginDept ( ) ; SimpleDateFormat sdf = new SimpleDateFormat ( _STR ) ; try { cutOffDate = sdf . parse ( collectionsUtil . getAppConfigValue ( CollectionConstants . MODULE_NAME_COLLECTIONS_CONFIG , CollectionConstants . APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE ) ) ; } catch ( ParseException e ) { LOGGER . error ( getText ( _STR ) + e . getMessage ( ) ) ; } return NEW ; }
public TypeDeclaration canonicalize ( ) { List < Type > sts = getSatisfiedTypes ( ) ; if ( sts . isEmpty ( ) ) { return unit . getAnythingDeclaration ( ) ; } else if ( sts . size ( ) == _NUM ) { Type st = sts . get ( _NUM ) ; if ( st . isExactlyNothing ( ) ) { return unit . getNothingDeclaration ( ) ; } } for ( Type st : sts ) { if ( st . isUnion ( ) ) { List < Type > caseTypes = st . getCaseTypes ( ) ; List < Type > ulist = new ArrayList < Type > ( caseTypes . size ( ) ) ; for ( Type ct : caseTypes ) { List < Type > ilist = new ArrayList < Type > ( sts . size ( ) ) ; for ( Type pt : sts ) { if ( pt == st ) { addToIntersection ( ilist , ct , unit ) ; } else { addToIntersection ( ilist , pt , unit ) ; } } Type it = canonicalIntersection ( ilist , unit ) ; addToUnion ( ulist , it ) ; } TypeDeclaration result = new UnionType ( unit ) ; result . setCaseTypes ( ulist ) ; return result ; } } return this ; }
public static void openOtherUri ( final String url , final Activity activity ) { Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( url ) ) ; activity . startActivity ( intent ) ; }
public static boolean waitForAllActiveAndLiveReplicas ( ZkStateReader zkStateReader , int timeoutInMs ) { return waitForAllActiveAndLiveReplicas ( zkStateReader , null , timeoutInMs ) ; }
public synchronized void addElement ( E object ) { if ( elementCount == elementData . length ) { growByOne ( ) ; } elementData [ elementCount ++ ] = object ; modCount ++ ; }
private void updateBaseMatrix ( Drawable d ) { ImageView imageView = getImageView ( ) ; if ( null == imageView || null == d ) { return ; } final float viewWidth = getImageViewWidth ( imageView ) ; final float viewHeight = getImageViewHeight ( imageView ) ; final int drawableWidth = d . getIntrinsicWidth ( ) ; final int drawableHeight = d . getIntrinsicHeight ( ) ; mBaseMatrix . reset ( ) ; final float widthScale = viewWidth / drawableWidth ; final float heightScale = viewHeight / drawableHeight ; if ( mScaleType == ScaleType . CENTER ) { mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth ) / _NUM , ( viewHeight - drawableHeight ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_CROP ) { float scale = Math . max ( widthScale , heightScale ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_INSIDE ) { float scale = Math . min ( _NUM , Math . min ( widthScale , heightScale ) ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else { RectF mTempSrc = new RectF ( _NUM , _NUM , drawableWidth , drawableHeight ) ; RectF mTempDst = new RectF ( _NUM , _NUM , viewWidth , viewHeight ) ; if ( ( int ) mBaseRotation % _NUM != _NUM ) { mTempSrc = new RectF ( _NUM , _NUM , drawableHeight , drawableWidth ) ; } switch ( mScaleType ) { case FIT_CENTER : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . CENTER ) ; break ; case FIT_START : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . START ) ; break ; case FIT_END : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . END ) ; break ; case FIT_XY : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . FILL ) ; break ; default : break ; } } resetMatrix ( ) ; }
public boolean checkForRp ( ) { return NullColumnValueGetter . isNotNullValue ( getRpCopyName ( ) ) ; }
ExternalProblem ( Process process ) { this ( process . getInputStream ( ) , process . getOutputStream ( ) ) ; RedirectStream . redirect ( process . getErrorStream ( ) , System . err ) ; }
public static List < String > splitPath ( File file ) { List < String > output = new ArrayList < > ( ) ; File current = file ; while ( current != null ) { output . add ( current . getName ( ) ) ; current = current . getParentFile ( ) ; } Collections . reverse ( output ) ; return output ; }
private static StsdData parseStsd ( ParsableByteArray stsd , int trackId , long durationUs , int rotationDegrees , String language , boolean isQuickTime ) { stsd . setPosition ( Atom . FULL_HEADER_SIZE ) ; int numberOfEntries = stsd . readInt ( ) ; StsdData out = new StsdData ( numberOfEntries ) ; for ( int i = _NUM ; i < numberOfEntries ; i ++ ) { int childStartPosition = stsd . getPosition ( ) ; int childAtomSize = stsd . readInt ( ) ; Assertions . checkArgument ( childAtomSize > _NUM , _STR ) ; int childAtomType = stsd . readInt ( ) ; if ( childAtomType == Atom . TYPE_avc1 || childAtomType == Atom . TYPE_avc3 || childAtomType == Atom . TYPE_encv || childAtomType == Atom . TYPE_mp4v || childAtomType == Atom . TYPE_hvc1 || childAtomType == Atom . TYPE_hev1 || childAtomType == Atom . TYPE_s263 || childAtomType == Atom . TYPE_vp08 || childAtomType == Atom . TYPE_vp09 ) { parseVideoSampleEntry ( stsd , childAtomType , childStartPosition , childAtomSize , trackId , durationUs , rotationDegrees , out , i ) ; } else if ( childAtomType == Atom . TYPE_mp4a || childAtomType == Atom . TYPE_enca || childAtomType == Atom . TYPE_ac_3 || childAtomType == Atom . TYPE_ec_3 || childAtomType == Atom . TYPE_dtsc || childAtomType == Atom . TYPE_dtse || childAtomType == Atom . TYPE_dtsh || childAtomType == Atom . TYPE_dtsl || childAtomType == Atom . TYPE_samr || childAtomType == Atom . TYPE_sawb || childAtomType == Atom . TYPE_lpcm || childAtomType == Atom . TYPE_sowt ) { parseAudioSampleEntry ( stsd , childAtomType , childStartPosition , childAtomSize , trackId , durationUs , language , isQuickTime , out , i ) ; } else if ( childAtomType == Atom . TYPE_TTML ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_TTML , MediaFormat . NO_VALUE , durationUs , language ) ; } else if ( childAtomType == Atom . TYPE_tx3g ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_TX3G , MediaFormat . NO_VALUE , durationUs , language ) ; } else if ( childAtomType == Atom . TYPE_wvtt ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_MP4VTT , MediaFormat . NO_VALUE , durationUs , language ) ; } else if ( childAtomType == Atom . TYPE_stpp ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_TTML , MediaFormat . NO_VALUE , durationUs , language , _NUM ) ; } stsd . setPosition ( childStartPosition + childAtomSize ) ; } return out ; }
protected boolean isCompatible ( Taxa taxa , List < Taxon > availableTaxa ) { for ( int i = _NUM ; i < taxa . getTaxonCount ( ) ; i ++ ) { Taxon taxon = taxa . getTaxon ( i ) ; if ( ! availableTaxa . contains ( taxon ) ) { return _BOOL ; } } return _BOOL ; }
protected int drawLabelText ( Object nativeGraphics , int textDecoration , boolean rtl , boolean isTickerRunning , boolean endsWith3Points , Object nativeFont , int txtW , int textSpaceW , int shiftText , String text , int x , int y , int fontHeight ) { if ( ( ! isTickerRunning ) || rtl ) { if ( txtW > textSpaceW && textSpaceW > _NUM ) { if ( rtl ) { if ( ( ! isTickerRunning ) && endsWith3Points ) { String points = _STR ; int pointsW = stringWidth ( nativeFont , points ) ; drawString ( nativeGraphics , nativeFont , points , shiftText + x , y , textDecoration , fontHeight ) ; clipRect ( nativeGraphics , pointsW + shiftText + x , y , textSpaceW - pointsW , fontHeight ) ; } x = x - txtW + textSpaceW ; } else if ( endsWith3Points ) { String points = _STR ; int index = _NUM ; int widest = charWidth ( nativeFont , _STR ) ; int pointsW = stringWidth ( nativeFont , points ) ; int textLen = text . length ( ) ; while ( fastCharWidthCheck ( text , index , textSpaceW - pointsW , widest , nativeFont ) && index < textLen ) { index ++ ; } text = text . substring ( _NUM , Math . min ( textLen , Math . max ( _NUM , index - _NUM ) ) ) + points ; txtW = stringWidth ( nativeFont , text ) ; } } } drawString ( nativeGraphics , nativeFont , text , shiftText + x , y , textDecoration , fontHeight ) ; return Math . min ( txtW , textSpaceW ) ; }
public boolean hasMapObjects ( ) { return mapObjects != null && ! mapObjects . isEmpty ( ) ; }
public void performActions ( ) throws Throwable { for ( Throwing . Runnable action : actions ) { action . run ( ) ; } }
public java . util . Collection < ObjectReference > dumpThreadRoots ( int width ) { return Collections . emptyList ( ) ; }
protected void addFieldNameTranslation ( EmbeddableMapping embeddableMapping , String overrideName , DatabaseField overrideField , MappingAccessor aggregatesAccessor ) { DatabaseMapping aggregatesMapping = aggregatesAccessor . getMapping ( ) ; DatabaseField aggregatesMappingField = aggregatesMapping . getField ( ) ; if ( aggregatesAccessor . isId ( ) ) { updatePrimaryKeyField ( aggregatesAccessor , overrideField ) ; } if ( overrideName . contains ( _STR ) ) { embeddableMapping . addNestedFieldTranslation ( overrideName , overrideField , aggregatesMappingField . getName ( ) ) ; } else { embeddableMapping . addFieldTranslation ( overrideField , aggregatesMappingField . getName ( ) ) ; } }
public Dimension minimumLayoutSize ( Container target ) { synchronized ( target . getTreeLock ( ) ) { Dimension dim = new Dimension ( _NUM , _NUM ) ; if ( ( chart != null ) && chart . isVisible ( ) ) { Dimension d = chart . getMinimumSize ( ) ; dim . width = d . width ; dim . height = d . height ; } if ( ( xLabel != null ) && xLabel . isVisible ( ) ) { Dimension d = xLabel . getMinimumSize ( ) ; dim . width = Math . max ( d . width , dim . width ) ; dim . height += d . height + vgap ; } if ( ( yLabel != null ) && yLabel . isVisible ( ) ) { Dimension d = yLabel . getMinimumSize ( ) ; dim . width += d . width + hgap ; dim . height = Math . max ( d . height , dim . height ) ; } if ( ( title != null ) && title . isVisible ( ) ) { Dimension d = title . getMinimumSize ( ) ; dim . width = Math . max ( d . width , dim . width ) ; dim . height += d . height + vgap ; } Insets insets = target . getInsets ( ) ; dim . width += insets . left + insets . right ; dim . height += insets . top + insets . bottom ; return dim ; } }
private void checkResourceChange ( final Resource resource , final Group group , final Callback callback , final AtomicBoolean isChanged ) throws Exception { if ( isChanged ( resource , group . getName ( ) ) ) { isChanged . compareAndSet ( _BOOL , _BOOL ) ; callback . onResourceChanged ( resource ) ; lifecycleCallback . onResourceChanged ( resource ) ; } }
public javax2 . sip . address . TelURL createTelURL ( String uri ) throws ParseException { if ( uri == null ) throw new NullPointerException ( _STR ) ; String telUrl = _STR + uri ; try { StringMsgParser smp = new StringMsgParser ( ) ; TelURLImpl timp = ( TelURLImpl ) smp . parseUrl ( telUrl ) ; return ( TelURL ) timp ; } catch ( ParseException ex ) { throw new ParseException ( ex . getMessage ( ) , _NUM ) ; } }
public EvoSVMModel ( ExampleSet exampleSet , List < SupportVector > supportVectors , Kernel kernel , double bias ) { super ( exampleSet , ExampleSetUtilities . SetsCompareOption . ALLOW_SUPERSET , ExampleSetUtilities . TypesCompareOption . ALLOW_SAME_PARENTS ) ; this . supportVectors = supportVectors ; if ( supportVectors == null || supportVectors . size ( ) == _NUM ) { throw new IllegalArgumentException ( _STR ) ; } this . kernel = kernel ; this . bias = bias ; if ( this . kernel instanceof DotKernel ) { this . weights = new double [ getNumberOfAttributes ( ) ] ; for ( int i = _NUM ; i < getNumberOfSupportVectors ( ) ; i ++ ) { SupportVector sv = getSupportVector ( i ) ; if ( sv != null ) { double [ ] x = sv . getX ( ) ; double alpha = sv . getAlpha ( ) ; double y = sv . getY ( ) ; for ( int j = _NUM ; j < weights . length ; j ++ ) { weights [ j ] += y * alpha * x [ j ] ; } } else { this . weights = null ; break ; } } } }
private synchronized boolean _restart ( ) throws ServletException { if ( singelton != null ) singelton . reset ( ) ; initEngine ( ) ; System . gc ( ) ; return _BOOL ; }
public Sorter ( ) { useDefaultVisual ( ) ; setLayout ( new BorderLayout ( ) ) ; add ( m_visual , BorderLayout . CENTER ) ; m_env = Environment . getSystemWide ( ) ; m_stopRequested = new AtomicBoolean ( _BOOL ) ; }
public String toString ( ) { return Character . toString ( getValue ( ) ) ; }
public static double logpdf ( double x , double mu , double shape ) { if ( ! ( x > _NUM ) || x == Double . POSITIVE_INFINITY ) { return Double . NEGATIVE_INFINITY ; } final double v = ( x - mu ) / mu ; return v < Double . MAX_VALUE ? _NUM * Math . log ( shape / ( MathUtil . TWOPI * x * x * x ) ) - shape * v * v / ( _NUM * x ) : Double . NEGATIVE_INFINITY ; }
@ Override public final short readShort ( ) throws IOException { dis . readFully ( work , _NUM , _NUM ) ; return ( short ) ( ( work [ _NUM ] & _NUM ) << _NUM | ( work [ _NUM ] & _NUM ) ) ; }
public static Format generateFormat ( String codec ) { return ( Format ) SUPPORTED_CODECS . get ( codec . toLowerCase ( ) ) ; }
public void comment ( char ch [ ] , int start , int length ) throws org . xml . sax . SAXException { int start_old = start ; if ( m_inEntityRef ) return ; if ( m_elemContext . m_startTagOpen ) { closeStartTag ( ) ; m_elemContext . m_startTagOpen = _BOOL ; } else if ( m_needToCallStartDocument ) { startDocumentInternal ( ) ; m_needToCallStartDocument = _BOOL ; } try { final int limit = start + length ; boolean wasDash = _BOOL ; if ( m_cdataTagOpen ) closeCDATA ( ) ; if ( shouldIndent ( ) ) indent ( ) ; final java . io . Writer writer = m_writer ; writer . write ( COMMENT_BEGIN ) ; for ( int i = start ; i < limit ; i ++ ) { if ( wasDash && ch [ i ] == _STR ) { writer . write ( ch , start , i - start ) ; writer . write ( _STR ) ; start = i + _NUM ; } wasDash = ( ch [ i ] == _STR ) ; } if ( length > _NUM ) { final int remainingChars = ( limit - start ) ; if ( remainingChars > _NUM ) writer . write ( ch , start , remainingChars ) ; if ( ch [ limit - _NUM ] == _STR ) writer . write ( _STR ) ; } writer . write ( COMMENT_END ) ; } catch ( IOException e ) { throw new SAXException ( e ) ; } m_startNewLine = _BOOL ; if ( m_tracer != null ) super . fireCommentEvent ( ch , start_old , length ) ; }
public OptionalInt maxByInt ( IntUnaryOperator keyExtractor ) { int [ ] result = collect ( null , null , null ) ; return result [ _NUM ] == _NUM ? OptionalInt . of ( result [ _NUM ] ) : OptionalInt . empty ( ) ; }
public T findByCommitCounter ( final long commitCounter ) { if ( commitCounter < _NUM ) throw new IllegalArgumentException ( ) ; final Lock lock = readLock ( ) ; lock . lock ( ) ; try { @ SuppressWarnings ( _STR ) final ITupleIterator < T > itr = rangeIterator ( null , null , _NUM , IRangeQuery . DEFAULT | IRangeQuery . REVERSE , null ) ; while ( itr . hasNext ( ) ) { final ITuple < T > t = itr . next ( ) ; final T r = t . getObject ( ) ; final IRootBlockView rb = r . getRootBlock ( ) ; if ( rb . getCommitCounter ( ) <= commitCounter ) { return r ; } } return null ; } finally { lock . unlock ( ) ; } }
private void startAnimation ( ) { ValueAnimator animator = ValueAnimator . ofFloat ( _NUM ) ; ArrayList < NameValuesHolder > nameValueList = ( ArrayList < NameValuesHolder > ) mPendingAnimations . clone ( ) ; mPendingAnimations . clear ( ) ; int propertyMask = _NUM ; int propertyCount = nameValueList . size ( ) ; for ( int i = _NUM ; i < propertyCount ; ++ i ) { NameValuesHolder nameValuesHolder = nameValueList . get ( i ) ; propertyMask |= nameValuesHolder . mNameConstant ; } mAnimatorMap . put ( animator , new PropertyBundle ( propertyMask , nameValueList ) ) ; animator . addUpdateListener ( mAnimatorEventListener ) ; animator . addListener ( mAnimatorEventListener ) ; if ( mStartDelaySet ) { animator . setStartDelay ( mStartDelay ) ; } if ( mDurationSet ) { animator . setDuration ( mDuration ) ; } if ( mInterpolatorSet ) { animator . setInterpolator ( mInterpolator ) ; } animator . start ( ) ; }
public static String traceExcetion ( Throwable ex ) { final Writer result = new StringWriter ( ) ; final PrintWriter printWriter = new PrintWriter ( result ) ; ex . printStackTrace ( printWriter ) ; String stacktrace = result . toString ( ) ; Log . e ( TAG , _STR + stacktrace ) ; return stacktrace ; }
public static Pair < String , String > split ( String varName ) { int splitIndex = varName . indexOf ( _STR ) ; if ( splitIndex < _NUM ) { return null ; } String left = varName . substring ( _NUM , splitIndex ) ; String right = varName . substring ( splitIndex + _NUM ) ; if ( left == null || left . length ( ) == _NUM || right == null || right . length ( ) == _NUM ) { return null ; } return Pair . of ( left , right ) ; }
public void onChildThreadResumeEnd ( ) { _threadCount . getAndDecrement ( ) ; wake ( ) ; }
public static void registerTransportMBean ( String containerName ) { MBeanServer mBeanServer = getMBeanServer ( containerName ) ; if ( mBeanServer == null ) return ; TransportProtocolMonitorMBean transportConnectionsInfoMBean = new TransportProtocolMonitor ( ) ; ObjectName objName = TransportConstants . createTransportMBeanObjectName ( containerName ) ; if ( ! mBeanServer . isRegistered ( objName ) ) { try { mBeanServer . registerMBean ( transportConnectionsInfoMBean , objName ) ; } catch ( InstanceAlreadyExistsException e ) { if ( _logger . isLoggable ( Level . CONFIG ) ) { _logger . config ( alreadyRegistredTransportMBeanMessage + containerName + _STR ) ; } } catch ( NotCompliantMBeanException e ) { if ( _logger . isLoggable ( Level . WARNING ) ) { _logger . log ( Level . SEVERE , failedTransportMBeanRegistrationMessagePrefix + containerName + _STR , e ) ; } } catch ( MBeanRegistrationException e ) { if ( _logger . isLoggable ( Level . SEVERE ) ) { _logger . log ( Level . SEVERE , failedTransportMBeanRegistrationMessagePrefix + containerName + _STR , e ) ; } } if ( _logger . isLoggable ( Level . CONFIG ) ) { _logger . config ( successfulTransportMBeanRegistrationMessage + containerName + _STR ) ; } } else { if ( _logger . isLoggable ( Level . CONFIG ) ) { _logger . config ( alreadyRegistredTransportMBeanMessage ) ; } } }
public static int update ( String where , Object [ ] args , V sets , Class < ? extends Bean > t ) { Table mapping = ( Table ) t . getAnnotation ( Table . class ) ; if ( mapping == null ) { if ( log . isErrorEnabled ( ) ) log . error ( _STR + t + _STR ) ; return - _NUM ; } if ( ! X . isEmpty ( mapping . name ( ) ) ) { return updateTable ( mapping . name ( ) , where , args , sets ) ; } return - _NUM ; }
private void stopVideoFadingEdgesScreenTimer ( ) { if ( null != mVideoFadingEdgesTimer ) { mVideoFadingEdgesTimer . cancel ( ) ; mVideoFadingEdgesTimer = null ; mVideoFadingEdgesTimerTask = null ; } }
public void removeListener ( final TimeoutEventListener listener ) { listeners . remove ( listener ) ; }
protected static void processGenericPropertiesCreatorProps ( File propsFile ) { try { Properties expProps = new Properties ( ) ; BufferedInputStream bi = new BufferedInputStream ( new FileInputStream ( propsFile ) ) ; expProps . load ( bi ) ; bi . close ( ) ; bi = null ; Properties GPCInputProps = GenericPropertiesCreator . getGlobalInputProperties ( ) ; Set < Object > keys = expProps . keySet ( ) ; Iterator < Object > keysI = keys . iterator ( ) ; while ( keysI . hasNext ( ) ) { String key = ( String ) keysI . next ( ) ; String existingVal = GPCInputProps . getProperty ( key , _STR ) ; if ( existingVal . length ( ) > _NUM ) { String newVal = expProps . getProperty ( key ) ; if ( existingVal . indexOf ( newVal ) < _NUM ) { newVal = existingVal + _STR + newVal ; GPCInputProps . put ( key , newVal ) ; } } else { String newVal = expProps . getProperty ( key ) ; GPCInputProps . put ( key , newVal ) ; } } } catch ( Exception ex ) { } }
private synchronized void addTableLockObject ( AbsoluteTableIdentifier absoluteTableIdentifier ) { if ( null == tableLockMap . get ( absoluteTableIdentifier ) ) { tableLockMap . put ( absoluteTableIdentifier , new Object ( ) ) ; } }
private static String randomElement ( ArrayList < String > list ) { int index = random . nextInt ( list . size ( ) ) ; return list . get ( index ) ; }
public static < T > void updateMappingToImmutableSet ( Map < T , Set < AnnotationMirror > > map , T key , Set < AnnotationMirror > newQual ) { Set < AnnotationMirror > result = AnnotationUtils . createAnnotationSet ( ) ; if ( ! map . containsKey ( key ) ) { result . addAll ( newQual ) ; } else { result . addAll ( map . get ( key ) ) ; result . addAll ( newQual ) ; } map . put ( key , Collections . unmodifiableSet ( result ) ) ; }
public static void join ( final AsyncInvocation < ? > async , final long timeoutMilliseconds ) { join ( async . getThread ( ) , timeoutMilliseconds ) ; }
void define ( MemberDefinition field , int slot , int from , int to ) { if ( from >= to ) { return ; } for ( int i = _NUM ; i < len ; i ++ ) { if ( ( locals [ i ] . field == field ) && ( locals [ i ] . slot == slot ) && ( from <= locals [ i ] . to ) && ( to >= locals [ i ] . from ) ) { locals [ i ] . from = Math . min ( locals [ i ] . from , from ) ; locals [ i ] . to = Math . max ( locals [ i ] . to , to ) ; return ; } } if ( len == locals . length ) { LocalVariable newlocals [ ] = new LocalVariable [ len * _NUM ] ; System . arraycopy ( locals , _NUM , newlocals , _NUM , len ) ; locals = newlocals ; } locals [ len ++ ] = new LocalVariable ( field , slot , from , to ) ; }
protected Connection openConnection ( boolean autocommit ) throws SQLException { Connection conn = dataSrc . getConnection ( ) ; conn . setAutoCommit ( autocommit ) ; return conn ; }
public void error ( XPathContext xctxt , String msg , Object [ ] args ) throws javax . xml . transform . TransformerException { java . lang . String fmsg = XSLMessages . createXPATHMessage ( msg , args ) ; if ( null != xctxt ) { ErrorListener eh = xctxt . getErrorListener ( ) ; TransformerException te = new TransformerException ( fmsg , this ) ; eh . fatalError ( te ) ; } }
public void mousePressed ( MouseEvent e ) { int nclicks = SwingUtilities2 . getAdjustedClickCount ( getComponent ( ) , e ) ; if ( SwingUtilities . isLeftMouseButton ( e ) ) { if ( e . isConsumed ( ) ) { shouldHandleRelease = _BOOL ; } else { shouldHandleRelease = _BOOL ; adjustCaretAndFocus ( e ) ; if ( nclicks == _NUM && SwingUtilities2 . canEventAccessSystemClipboard ( e ) ) { selectWord ( e ) ; } } } }
public static byte [ ] decode ( String str , int flags ) { return decode ( str . getBytes ( ) , flags ) ; }
public Object apply ( String source , int lineNo , int columnNo , Object funcBody , Vector paramNames , Vector arguments ) throws BSFException { Object object = eval ( source , lineNo , columnNo , funcBody ) ; if ( object instanceof Closure ) { Closure closure = ( Closure ) object ; return closure . call ( arguments . toArray ( ) ) ; } return object ; }
public Set keySet ( ) { return totalKeySet ( ) ; }
public void output ( List list , Writer out ) throws IOException { printContentRange ( out , list , _NUM , list . size ( ) , _NUM , createNamespaceStack ( ) ) ; out . flush ( ) ; }
public boolean consumeEncumbranceBudget ( final Map < String , Object > detailsMap ) { if ( detailsMap == null ) throw new ValidationException ( Arrays . asList ( new ValidationError ( _STR , _STR ) ) ) ; detailsMap . put ( Constants . CONSUMEORRELEASE , _BOOL ) ; final BigDecimal bd = getDetails ( detailsMap ) ; return bd . intValue ( ) == _NUM ; }
private int [ ] mod ( int [ ] a , int [ ] f ) { int df = computeDegree ( f ) ; if ( df == - _NUM ) { throw new ArithmeticException ( _STR ) ; } int [ ] result = new int [ a . length ] ; int hc = headCoefficient ( f ) ; hc = field . inverse ( hc ) ; System . arraycopy ( a , _NUM , result , _NUM , result . length ) ; while ( df <= computeDegree ( result ) ) { int [ ] q ; int coeff = field . mult ( headCoefficient ( result ) , hc ) ; q = multWithMonomial ( f , computeDegree ( result ) - df ) ; q = multWithElement ( q , coeff ) ; result = add ( q , result ) ; } return result ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > result = enumToVector ( super . listOptions ( ) ) ; result . addElement ( new Option ( _STR + defaultNumClusters ( ) + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + defaultMinInstNum ( ) + _STR + defaultMaxInstNum ( ) + _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + defaultMinRadius ( ) + _STR + defaultMaxRadius ( ) + _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + defaultDistMult ( ) + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + defaultNumCycles ( ) + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + defaultNoiseRate ( ) + _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; return result . elements ( ) ; }
public static void appendHexJavaScriptRepresentation ( StringBuilder sb , char c ) { sb . append ( _STR ) ; String val = Integer . toHexString ( c ) ; for ( int j = val . length ( ) ; j < _NUM ; j ++ ) { sb . append ( _STR ) ; } sb . append ( val ) ; }
private void printBootstrapMap ( ) { LOG . info ( _STR ) ; for ( Integer i : chainMap . keySet ( ) ) { LOG . info ( String . format ( _STR , i , chainMap . get ( i ) ) ) ; } }
public Vector < Option > enumToVector ( Enumeration < Option > enu ) { Vector < Option > options = new Vector < Option > ( ) ; options . addAll ( Collections . list ( enu ) ) ; return options ; }
private void addToken ( int token ) { try { fTokens [ fTokenCount ] = token ; } catch ( ArrayIndexOutOfBoundsException ex ) { int [ ] oldList = fTokens ; fTokens = new int [ fTokenCount << _NUM ] ; System . arraycopy ( oldList , _NUM , fTokens , _NUM , fTokenCount ) ; fTokens [ fTokenCount ] = token ; } fTokenCount ++ ; }
private P filterLargeValueSets ( FilterSpec fs , MetaDataObject rootMeta , F root , boolean forceEntityBased , JoinType defaultPredicateJoinType ) { ArrayList < FilterSpec > specs = new ArrayList < > ( ) ; List < ? > list = new ArrayList < > ( ( Collection < ? > ) fs . getValue ( ) ) ; for ( int i = _NUM ; i < list . size ( ) ; i += ORACLE_PARAM_LIMIT ) { int nextOffset = i + Math . min ( list . size ( ) - i , ORACLE_PARAM_LIMIT ) ; List < ? > batchList = list . subList ( i , nextOffset ) ; specs . add ( new FilterSpec ( fs . getAttributePath ( ) , fs . getOperator ( ) , batchList ) ) ; } FilterSpec orSpec = FilterSpec . or ( specs ) ; return filterSpecListToPredicate ( rootMeta , root , orSpec , forceEntityBased , defaultPredicateJoinType ) ; }
protected void addTags ( E data , Builder builder ) { PlatformIdent platformIdent = cachedDataService . getPlatformIdentForId ( data . getPlatformIdent ( ) ) ; builder . tag ( Series . TAG_AGENT_ID , String . valueOf ( data . getPlatformIdent ( ) ) ) ; if ( null != platformIdent ) { builder . tag ( Series . TAG_AGENT_NAME , platformIdent . getAgentName ( ) ) ; } }
public int compare ( String s1 , String s2 ) { final Matcher match1 = MATCH_ID_PATTERN . matcher ( s1 ) ; final Matcher match2 = MATCH_ID_PATTERN . matcher ( s2 ) ; final boolean match1matches = match1 . matches ( ) ; final boolean match2matches = match2 . matches ( ) ; if ( match1matches ^ match2matches ) { return ( match1matches ) ? _NUM : - _NUM ; } else if ( match1matches && match2matches ) { int signature1 = Integer . parseInt ( match1 . group ( _NUM ) ) ; int signature2 = Integer . parseInt ( match2 . group ( _NUM ) ) ; int comparison = ( signature1 < signature2 ) ? - _NUM : ( signature1 > signature2 ) ? _NUM : _NUM ; if ( comparison == _NUM ) { int start1 = Integer . parseInt ( match1 . group ( _NUM ) ) ; int start2 = Integer . parseInt ( match2 . group ( _NUM ) ) ; comparison = ( start1 < start2 ) ? - _NUM : ( start1 > start2 ) ? _NUM : _NUM ; } if ( comparison == _NUM ) { int end1 = Integer . parseInt ( match1 . group ( _NUM ) ) ; int end2 = Integer . parseInt ( match2 . group ( _NUM ) ) ; comparison = ( end1 < end2 ) ? - _NUM : ( end1 > end2 ) ? _NUM : _NUM ; } return comparison ; } else { int seqLength1 = s1 . length ( ) , n2 = s2 . length ( ) ; for ( int i1 = _NUM , i2 = _NUM ; i1 < seqLength1 && i2 < n2 ; i1 ++ , i2 ++ ) { char c1 = s1 . charAt ( i1 ) ; char c2 = s2 . charAt ( i2 ) ; if ( c1 != c2 ) { c1 = Character . toUpperCase ( c1 ) ; c2 = Character . toUpperCase ( c2 ) ; if ( c1 != c2 ) { c1 = Character . toLowerCase ( c1 ) ; c2 = Character . toLowerCase ( c2 ) ; if ( c1 != c2 ) { return c1 - c2 ; } } } } return seqLength1 - n2 ; } }
private static int loadBuildNumber ( Context context , PackageManager packageManager ) { try { ApplicationInfo appInfo = packageManager . getApplicationInfo ( context . getPackageName ( ) , PackageManager . GET_META_DATA ) ; Bundle metaData = appInfo . metaData ; if ( metaData != null ) { return metaData . getInt ( BUNDLE_BUILD_NUMBER , _NUM ) ; } } catch ( PackageManager . NameNotFoundException e ) { L . e ( _STR ) ; e . printStackTrace ( ) ; } return _NUM ; }
public static LeftRegularBipartiteGraphSegment buildRandomLeftRegularBipartiteGraph ( int leftSize , int rightSize , int leftDegree , Random random ) { LeftRegularBipartiteGraphSegment leftRegularBipartiteGraphSegment = new LeftRegularBipartiteGraphSegment ( leftSize / _NUM , leftDegree , rightSize / _NUM , leftSize / _NUM , _NUM , Integer . MAX_VALUE , new IdentityEdgeTypeMask ( ) , new NullStatsReceiver ( ) ) ; LongSet addedIds = new LongOpenHashSet ( leftDegree ) ; for ( int i = _NUM ; i < leftSize ; i ++ ) { addedIds . clear ( ) ; for ( int j = _NUM ; j < leftDegree ; j ++ ) { long idToAdd ; do { idToAdd = random . nextInt ( rightSize ) ; } while ( addedIds . contains ( idToAdd ) ) ; addedIds . add ( idToAdd ) ; leftRegularBipartiteGraphSegment . addEdge ( i , idToAdd , ( byte ) _NUM ) ; } } return leftRegularBipartiteGraphSegment ; }
@ Override public void addFocusables ( ArrayList < View > views , int direction , int focusableMode ) { final int focusableCount = views . size ( ) ; final int descendantFocusability = getDescendantFocusability ( ) ; if ( descendantFocusability != FOCUS_BLOCK_DESCENDANTS ) { for ( int i = _NUM ; i < getChildCount ( ) ; i ++ ) { final View child = getChildAt ( i ) ; if ( child . getVisibility ( ) == VISIBLE ) { ItemInfo ii = infoForChild ( child ) ; if ( ii != null && ii . position == mCurItem ) { child . addFocusables ( views , direction , focusableMode ) ; } } } } if ( descendantFocusability != FOCUS_AFTER_DESCENDANTS || ( focusableCount == views . size ( ) ) ) { if ( ! isFocusable ( ) ) { return ; } if ( ( focusableMode & FOCUSABLES_TOUCH_MODE ) == FOCUSABLES_TOUCH_MODE && isInTouchMode ( ) && ! isFocusableInTouchMode ( ) ) { return ; } if ( views != null ) { views . add ( this ) ; } } }
protected HttpURLConnection configureRequest ( final HttpURLConnection request ) { if ( credentials != null ) request . setRequestProperty ( HEADER_AUTHORIZATION , credentials ) ; request . setRequestProperty ( HEADER_USER_AGENT , userAgent ) ; request . setRequestProperty ( HEADER_ACCEPT , getHeaderAccept ( ) ) ; return request ; }
public static String convertToTitle ( int n ) { if ( n <= _NUM ) return _STR ; StringBuilder title = new StringBuilder ( ) ; while ( n > _NUM ) { n -- ; int r = n % _NUM ; title . insert ( _NUM , ( char ) ( _STR + r ) ) ; n = n / _NUM ; } return title . toString ( ) ; }
private char readEscapeCharacter ( ) throws JSONException { char escaped = in . charAt ( pos ++ ) ; switch ( escaped ) { case _STR : if ( pos + _NUM > in . length ( ) ) { throw syntaxError ( _STR ) ; } String hex = in . substring ( pos , pos + _NUM ) ; pos += _NUM ; return ( char ) Integer . parseInt ( hex , _NUM ) ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : case _STR : case _STR : default : return escaped ; } }
static public void process ( String input , String output , String packFileName ) { process ( new Settings ( ) , input , output , packFileName ) ; }
private ReplicatorRuntimeConf ( String serviceName ) { replicatorHomeDir = locateReplicatorHomeDir ( ) ; replicatorLogDir = locateReplicatorLogDir ( ) ; replicatorConfDir = locateReplicatorConfDir ( ) ; replicatorProperties = new File ( locateReplicatorConfDir ( ) , _STR + serviceName + _STR ) ; if ( ! replicatorProperties . isFile ( ) || ! replicatorProperties . canRead ( ) ) { throw new ServerRuntimeException ( _STR + replicatorProperties ) ; } replicatorDynamicProperties = new File ( replicatorConfDir , _STR + serviceName + _STR ) ; replicatorDynamicRole = new File ( replicatorConfDir , _STR + serviceName + _STR ) ; this . clearDynamicProperties = Boolean . parseBoolean ( System . getProperty ( CLEAR_DYNAMIC_PROPERTIES ) ) ; }
private String toLocalNumber ( double n ) { return mDecimalFormat . format ( n ) ; }
public void simulateMethod ( SootMethod method , ReferenceVariable thisVar , ReferenceVariable returnVar , ReferenceVariable params [ ] ) { String subSignature = method . getSubSignature ( ) ; if ( subSignature . equals ( _STR ) ) { java_security_AccessController_doPrivileged ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( _STR ) ) { java_security_AccessController_doPrivileged ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( _STR ) ) { java_security_AccessController_doPrivileged ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( _STR ) ) { java_security_AccessController_doPrivileged ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( _STR ) ) { java_security_AccessController_getStackAccessControlContext ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( _STR ) ) { java_security_AccessController_getInheritedAccessControlContext ( method , thisVar , returnVar , params ) ; return ; } else { defaultMethod ( method , thisVar , returnVar , params ) ; return ; } }
protected final void refreshLoadingViewsSize ( ) { final int maximumPullScroll = ( int ) ( getMaximumPullScroll ( ) * _NUM ) ; int pLeft = getPaddingLeft ( ) ; int pTop = getPaddingTop ( ) ; int pRight = getPaddingRight ( ) ; int pBottom = getPaddingBottom ( ) ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setWidth ( maximumPullScroll ) ; pLeft = - maximumPullScroll ; } else { pLeft = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setWidth ( maximumPullScroll ) ; pRight = - maximumPullScroll ; } else { pRight = _NUM ; } break ; case VERTICAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setHeight ( maximumPullScroll ) ; pTop = - maximumPullScroll ; } else { pTop = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setHeight ( maximumPullScroll ) ; pBottom = - maximumPullScroll ; } else { pBottom = _NUM ; } break ; } if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR , pLeft , pTop , pRight , pBottom ) ) ; } setPadding ( pLeft , pTop , pRight , pBottom ) ; }
public static long [ ] asLongArray ( final List < Long > l ) { final long [ ] a = new long [ l . size ( ) ] ; for ( int i = _NUM ; i < a . length ; i ++ ) { a [ i ] = l . get ( i ) ; } return a ; }
private void updateMenuState ( ) { m_appendAnd . setEnabled ( m_criteriumNode . allowAppend ( CAndCriterium . class ) ) ; m_appendOr . setEnabled ( m_criteriumNode . allowAppend ( COrCriterium . class ) ) ; m_appendNot . setEnabled ( m_criteriumNode . allowAppend ( CNotCriterium . class ) ) ; m_insertAnd . setEnabled ( m_criteriumNode . allowInsert ( CAndCriterium . class ) ) ; m_insertOr . setEnabled ( m_criteriumNode . allowInsert ( COrCriterium . class ) ) ; m_insertNot . setEnabled ( m_criteriumNode . allowInsert ( CNotCriterium . class ) ) ; m_conditionSubmenu . setEnabled ( m_criteriumNode . allowAppend ( CConditionCriterium . class ) ) ; m_remove . setEnabled ( ! m_criteriumNode . isRoot ( ) ) ; m_removeAll . setEnabled ( m_criteriumNode . getChildCount ( ) != _NUM ) ; }
public void testPutGetRemove ( ) throws Exception { initStore ( _NUM ) ; Set < Integer > exp ; try { exp = runPutGetRemoveMultithreaded ( _NUM , _NUM ) ; } finally { shutdownStore ( ) ; } Map < Integer , String > map = delegate . getMap ( ) ; Collection < Integer > extra = new HashSet < > ( map . keySet ( ) ) ; extra . removeAll ( exp ) ; assertTrue ( _STR + extra , extra . isEmpty ( ) ) ; Collection < Integer > missing = new HashSet < > ( exp ) ; missing . removeAll ( map . keySet ( ) ) ; assertTrue ( _STR + missing , missing . isEmpty ( ) ) ; for ( Integer key : exp ) assertEquals ( _STR + key , _STR + key , map . get ( key ) ) ; }
public static String formatListToString ( List < String > list ) { String result = _STR ; for ( String s : list ) result += s + _STR ; result = result . trim ( ) ; return result . toUpperCase ( ) ; }
@ Override public void removeNotificationListener ( NotificationListener listener ) throws ListenerNotFoundException { if ( SNMP_ADAPTOR_LOGGER . isLoggable ( Level . FINEST ) ) { SNMP_ADAPTOR_LOGGER . logp ( Level . FINEST , dbgTag , _STR , _STR + listener ) ; } notifBroadcaster . removeNotificationListener ( listener ) ; }
public static boolean isNewer ( long ts1 , long size1 , long ts2 , long size2 ) { return ts1 > ts2 || ( ts1 == ts2 && size1 < size2 ) ; }
private static void d_ucumm ( double [ ] a , double [ ] agg , double [ ] c , int m , int n , int rl , int ru ) { double [ ] cprods = ( agg != null ) ? agg : new double [ n ] ; if ( agg == null ) Arrays . fill ( cprods , _NUM ) ; for ( int i = rl , aix = rl * n ; i < ru ; i ++ , aix += n ) { productAgg ( a , cprods , aix , _NUM , n ) ; System . arraycopy ( cprods , _NUM , c , aix , n ) ; } }
public static List < ModuleSpec > expandSpecWildcards ( File dir , List < ModuleSpec > modules , Backend forBackend ) { List < File > dirs = new ArrayList < File > ( ) ; dirs . add ( dir ) ; return expandSpecWildcards ( dirs , modules , forBackend ) ; }
private void $$$setupUI$$$ ( ) { myContentPanel = new JPanel ( ) ; myContentPanel . setLayout ( new GridLayoutManager ( _NUM , _NUM , new Insets ( _NUM , _NUM , _NUM , _NUM ) , - _NUM , - _NUM ) ) ; myYoursRadioButton = new JRadioButton ( ) ; myYoursRadioButton . setSelected ( _BOOL ) ; myYoursRadioButton . setText ( _STR ) ; myYoursRadioButton . setMnemonic ( _STR ) ; myYoursRadioButton . setDisplayedMnemonicIndex ( _NUM ) ; myContentPanel . add ( myYoursRadioButton , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , GridConstraints . SIZEPOLICY_CAN_SHRINK | GridConstraints . SIZEPOLICY_CAN_GROW , GridConstraints . SIZEPOLICY_FIXED , null , null , null , _NUM , _BOOL ) ) ; myTheirsRadioButton = new JRadioButton ( ) ; myTheirsRadioButton . setText ( _STR ) ; myTheirsRadioButton . setMnemonic ( _STR ) ; myTheirsRadioButton . setDisplayedMnemonicIndex ( _NUM ) ; myContentPanel . add ( myTheirsRadioButton , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , GridConstraints . SIZEPOLICY_CAN_SHRINK | GridConstraints . SIZEPOLICY_CAN_GROW , GridConstraints . SIZEPOLICY_FIXED , null , null , null , _NUM , _BOOL ) ) ; myUseCustomRadioButton = new JRadioButton ( ) ; myUseCustomRadioButton . setText ( _STR ) ; myUseCustomRadioButton . setMnemonic ( _STR ) ; myUseCustomRadioButton . setDisplayedMnemonicIndex ( _NUM ) ; myContentPanel . add ( myUseCustomRadioButton , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , GridConstraints . SIZEPOLICY_CAN_SHRINK | GridConstraints . SIZEPOLICY_CAN_GROW , GridConstraints . SIZEPOLICY_FIXED , null , null , null , _NUM , _BOOL ) ) ; myCustomPathTextField = new JTextField ( ) ; myCustomPathTextField . setEnabled ( _BOOL ) ; myContentPanel . add ( myCustomPathTextField , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_BOTH , GridConstraints . SIZEPOLICY_WANT_GROW , GridConstraints . SIZEPOLICY_FIXED , null , new Dimension ( _NUM , - _NUM ) , null , _NUM , _BOOL ) ) ; final Spacer spacer1 = new Spacer ( ) ; myContentPanel . add ( spacer1 , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_CENTER , GridConstraints . FILL_VERTICAL , _NUM , GridConstraints . SIZEPOLICY_WANT_GROW , null , null , null , _NUM , _BOOL ) ) ; myErrorLabel = new JLabel ( ) ; myErrorLabel . setForeground ( new Color ( - _NUM ) ) ; myErrorLabel . setText ( _STR ) ; myContentPanel . add ( myErrorLabel , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , GridConstraints . SIZEPOLICY_CAN_GROW , GridConstraints . SIZEPOLICY_FIXED , null , null , null , _NUM , _BOOL ) ) ; ButtonGroup buttonGroup ; buttonGroup = new ButtonGroup ( ) ; buttonGroup . add ( myYoursRadioButton ) ; buttonGroup . add ( myTheirsRadioButton ) ; buttonGroup . add ( myUseCustomRadioButton ) ; }
private static String reportListContents ( Collection < ProcessErrorStateInfo > errList ) { if ( errList == null ) return null ; StringBuilder builder = new StringBuilder ( ) ; Iterator < ProcessErrorStateInfo > iter = errList . iterator ( ) ; while ( iter . hasNext ( ) ) { ProcessErrorStateInfo entry = iter . next ( ) ; String condition ; switch ( entry . condition ) { case ActivityManager . ProcessErrorStateInfo . CRASHED : condition = _STR ; break ; case ActivityManager . ProcessErrorStateInfo . NOT_RESPONDING : condition = _STR ; break ; default : condition = _STR ; break ; } builder . append ( String . format ( _STR , entry . processName , condition , entry . shortMsg ) ) ; if ( entry . condition == ActivityManager . ProcessErrorStateInfo . CRASHED ) { builder . append ( String . format ( _STR , entry . stackTrace ) ) ; } builder . append ( _STR ) ; } return builder . toString ( ) ; }
public void parseArguments ( final String [ ] rawArguments , Properties argumentProperties ) throws ArgumentException { boolean inTrailingArgs = _BOOL ; final int numArguments = rawArguments . length ; for ( int i = _NUM ; i < numArguments ; i ++ ) { final String arg = rawArguments [ i ] ; if ( inTrailingArgs ) { trailingArguments . add ( arg ) ; if ( maxTrailingArguments > _NUM && trailingArguments . size ( ) > maxTrailingArguments ) { final LocalizableMessage message = ERR_ARGPARSER_TOO_MANY_TRAILING_ARGS . get ( maxTrailingArguments ) ; throw new ArgumentException ( message ) ; } continue ; } if ( arg . equals ( _STR ) ) { inTrailingArgs = _BOOL ; } else if ( arg . startsWith ( _STR ) ) { String argName = arg . substring ( _NUM ) ; String argValue = null ; final int equalPos = argName . indexOf ( _STR ) ; if ( equalPos == _NUM ) { throw new ArgumentException ( ERR_ARGPARSER_LONG_ARG_WITHOUT_NAME . get ( arg ) ) ; } else if ( equalPos > _NUM ) { argValue = argName . substring ( equalPos + _NUM ) ; argName = argName . substring ( _NUM , equalPos ) ; } final String origArgName = argName ; argName = formatLongIdentifier ( argName ) ; final Argument a = longIDMap . get ( argName ) ; if ( a == null ) { if ( OPTION_LONG_HELP . equals ( argName ) ) { writeToUsageOutputStream ( getUsage ( ) ) ; return ; } else if ( OPTION_LONG_PRODUCT_VERSION . equals ( argName ) ) { printVersion ( ) ; return ; } else { throw new ArgumentException ( ERR_ARGPARSER_NO_ARGUMENT_WITH_LONG_ID . get ( origArgName ) ) ; } } else { a . setPresent ( _BOOL ) ; if ( isUsageArgument ( a ) ) { writeToUsageOutputStream ( getUsage ( ) ) ; return ; } } if ( a . needsValue ( ) ) { if ( argValue == null ) { if ( ( i + _NUM ) == numArguments ) { throw new ArgumentException ( ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_LONG_ID . get ( origArgName ) ) ; } argValue = rawArguments [ ++ i ] ; } final LocalizableMessageBuilder invalidReason = new LocalizableMessageBuilder ( ) ; if ( ! a . valueIsAcceptable ( argValue , invalidReason ) ) { throw new ArgumentException ( ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_LONG_ID . get ( argValue , origArgName , invalidReason ) ) ; } if ( a . hasValue ( ) && ! a . isMultiValued ( ) ) { throw new ArgumentException ( ERR_ARGPARSER_NOT_MULTIVALUED_FOR_LONG_ID . get ( origArgName ) ) ; } a . addValue ( argValue ) ; } else if ( argValue != null ) { throw new ArgumentException ( ERR_ARGPARSER_ARG_FOR_LONG_ID_DOESNT_TAKE_VALUE . get ( origArgName ) ) ; } } else if ( arg . startsWith ( _STR ) ) { if ( arg . equals ( _STR ) ) { throw new ArgumentException ( ERR_ARGPARSER_INVALID_DASH_AS_ARGUMENT . get ( ) ) ; } final char argCharacter = arg . charAt ( _NUM ) ; String argValue ; if ( arg . length ( ) > _NUM ) { argValue = arg . substring ( _NUM ) ; } else { argValue = null ; } final Argument a = shortIDMap . get ( argCharacter ) ; if ( a == null ) { if ( argCharacter == _STR ) { writeToUsageOutputStream ( getUsage ( ) ) ; return ; } else if ( versionHandler != null && argCharacter == OPTION_SHORT_PRODUCT_VERSION && ! shortIDMap . containsKey ( OPTION_SHORT_PRODUCT_VERSION ) ) { printVersion ( ) ; return ; } else { throw new ArgumentException ( ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID . get ( argCharacter ) ) ; } } else { a . setPresent ( _BOOL ) ; if ( isUsageArgument ( a ) ) { writeToUsageOutputStream ( getUsage ( ) ) ; return ; } } if ( a . needsValue ( ) ) { if ( argValue == null ) { if ( ( i + _NUM ) == numArguments ) { throw new ArgumentException ( ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_SHORT_ID . get ( argCharacter ) ) ; } argValue = rawArguments [ ++ i ] ; } final LocalizableMessageBuilder invalidReason = new LocalizableMessageBuilder ( ) ; if ( ! a . valueIsAcceptable ( argValue , invalidReason ) ) { throw new ArgumentException ( ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_SHORT_ID . get ( argValue , argCharacter , invalidReason ) ) ; } if ( a . hasValue ( ) && ! a . isMultiValued ( ) ) { throw new ArgumentException ( ERR_ARGPARSER_NOT_MULTIVALUED_FOR_SHORT_ID . get ( argCharacter ) ) ; } a . addValue ( argValue ) ; } else if ( argValue != null ) { final int valueLength = argValue . length ( ) ; for ( int j = _NUM ; j < valueLength ; j ++ ) { final char c = argValue . charAt ( j ) ; final Argument b = shortIDMap . get ( c ) ; if ( b == null ) { throw new ArgumentException ( ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID . get ( argCharacter ) ) ; } else if ( b . needsValue ( ) ) { throw new ArgumentException ( ERR_ARGPARSER_CANT_MIX_ARGS_WITH_VALUES . get ( argCharacter , argValue , c ) ) ; } else { b . setPresent ( _BOOL ) ; if ( isUsageArgument ( b ) ) { writeToUsageOutputStream ( getUsage ( ) ) ; return ; } } } } } else if ( allowsTrailingArguments ) { inTrailingArgs = _BOOL ; trailingArguments . add ( arg ) ; } else { throw new ArgumentException ( ERR_ARGPARSER_DISALLOWED_TRAILING_ARGUMENT . get ( arg ) ) ; } } if ( allowsTrailingArguments && minTrailingArguments > _NUM && trailingArguments . size ( ) < minTrailingArguments ) { throw new ArgumentException ( ERR_ARGPARSER_TOO_FEW_TRAILING_ARGUMENTS . get ( minTrailingArguments ) ) ; } if ( argumentProperties == null ) { argumentProperties = checkExternalProperties ( ) ; } normalizeArguments ( argumentProperties , argumentList ) ; }
public void testGetIssuerNames ( ) { X509CRLSelector selector = new X509CRLSelector ( ) ; byte [ ] iss1 = new byte [ ] { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte [ ] iss2 = new byte [ ] { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; assertNull ( _STR , selector . getIssuerNames ( ) ) ; try { selector . addIssuerName ( iss1 ) ; selector . addIssuerName ( iss2 ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; fail ( _STR ) ; } Collection < Object > result = selector . getIssuerNames ( ) ; assertEquals ( _STR , _NUM , result . size ( ) ) ; }
@ Override public boolean start ( ) throws IOException { LOG . info ( _STR , initialCheckpointGenerator ) ; try { KinesisReaderCheckpoint initialCheckpoint = initialCheckpointGenerator . generate ( kinesis ) ; List < ShardRecordsIterator > iterators = newArrayList ( ) ; for ( ShardCheckpoint checkpoint : initialCheckpoint ) { iterators . add ( checkpoint . getShardRecordsIterator ( kinesis ) ) ; } shardIterators = new RoundRobin < > ( iterators ) ; } catch ( TransientKinesisException e ) { throw new IOException ( e ) ; } return advance ( ) ; }
@ Override public XADataSource createXADataSource ( Properties properties ) throws SQLException { Properties propertiesCopy = new Properties ( ) ; if ( properties != null ) { propertiesCopy . putAll ( properties ) ; } rejectUnsupportedOptions ( propertiesCopy ) ; rejectPoolingOptions ( propertiesCopy ) ; JdbcDataSource dataSource = new JdbcDataSource ( ) ; setupH2DataSource ( dataSource , propertiesCopy ) ; return dataSource ; }
public static double toDegrees ( double x ) { if ( Double . isInfinite ( x ) || x == _NUM ) { return x ; } final double facta = _NUM ; final double factb = _NUM ; double xa = doubleHighPart ( x ) ; double xb = x - xa ; return xb * factb + xb * facta + xa * factb + xa * facta ; }
public void addHeaderView ( View v ) { addHeaderView ( v , null , _BOOL ) ; }
public static boolean isAbsolutePath ( String systemId ) { if ( systemId == null ) return _BOOL ; final File file = new File ( systemId ) ; return file . isAbsolute ( ) ; }
void initDemandAndCollectionMap ( final List < String > prepareFieldNames , final Map < String , BigDecimal > demand , final Map < String , BigDecimal > collection , final Map < String , BigDecimal > rebates ) { if ( prepareFieldNames != null && ! prepareFieldNames . isEmpty ( ) ) for ( final String fieldName : prepareFieldNames ) { demand . put ( fieldName , BigDecimal . ZERO ) ; collection . put ( fieldName , BigDecimal . ZERO ) ; rebates . put ( fieldName , BigDecimal . ZERO ) ; } }
protected Instance specifier ( int i ) { return m_Specifiers . get ( i ) ; }
public ShapedCraftingRecipe ( Item nominalOutput , RecipeFunction recipeFunction , String format , boolean mirrored , ItemIngredient ... ingredients ) { this . nominalOutput = nominalOutput ; String [ ] formatLines = format . split ( _STR ) ; int numIngredients = _NUM ; int width = _NUM ; for ( String formatLine : formatLines ) { width = Math . max ( width , formatLine . length ( ) ) ; for ( char c : formatLine . toCharArray ( ) ) { if ( c == _STR ) { continue ; } else if ( c >= _STR && c <= _STR ) { numIngredients ++ ; } else { throw new IllegalArgumentException ( _STR + format + _STR + c ) ; } } } this . width = width ; this . height = formatLines . length ; this . posx = new int [ numIngredients ] ; this . posy = new int [ numIngredients ] ; this . ingredients = new ItemIngredient [ numIngredients ] ; this . mirrored = mirrored ; int ingredientIndex = _NUM ; for ( int y = _NUM ; y < this . height ; y ++ ) { String formatLine = formatLines [ y ] ; for ( int x = _NUM ; x < formatLine . length ( ) ; x ++ ) { char c = formatLine . charAt ( x ) ; if ( c == _STR ) { continue ; } this . posx [ ingredientIndex ] = x ; this . posy [ ingredientIndex ] = y ; this . ingredients [ ingredientIndex ] = ingredients [ c - _STR ] ; ingredientIndex ++ ; } } this . recipeFunction = recipeFunction ; this . lastIngredientIndexOnFirstLine = getLastIngredientIndexOnFirstLine ( ) ; }
public void writeTag ( String tag , Font value ) { startTag ( tag ) ; writeTag ( _STR , value . getName ( ) ) ; int style = value . getStyle ( ) ; if ( ( style & Font . BOLD ) != _NUM && ( style & Font . ITALIC ) != _NUM ) { writeTag ( STYLE , _STR ) ; } else if ( ( style & Font . BOLD ) != _NUM ) { writeTag ( STYLE , _STR ) ; } else if ( ( style & Font . ITALIC ) != _NUM ) { writeTag ( STYLE , _STR ) ; } else { writeTag ( STYLE , _STR ) ; } writeTag ( _STR , value . getSize ( ) ) ; closeTag ( ) ; }
private void internalWrite ( byte [ ] b , int off , int len , boolean finish ) throws IOException { coder . output = embiggen ( coder . output , coder . maxOutputSize ( len ) ) ; if ( ! coder . process ( b , off , len , finish ) ) { throw new Base64DataException ( _STR ) ; } out . write ( coder . output , _NUM , coder . op ) ; }
private Socket connect ( String host , String portString ) throws IOException { int port = _NUM ; Socket sock = null ; boolean DEBUG = Debug . debugging ( _STR ) ; try { port = Integer . parseInt ( portString , _NUM ) ; } catch ( NumberFormatException e ) { if ( DEBUG ) Debug . output ( _STR + host + _STR + portString ) ; throw new IOException ( _STR + portString ) ; } if ( DEBUG ) Debug . output ( _STR + host + _STR + port ) ; try { sock = new Socket ( host , port ) ; } catch ( IOException e ) { if ( sock != null ) sock . close ( ) ; if ( DEBUG ) { Debug . output ( _STR + host + _STR + port + _STR + e ) ; } throw e ; } return sock ; }
@ Override public boolean batchFinished ( ) { if ( getInputFormat ( ) == null ) { throw new IllegalStateException ( _STR ) ; } Instances toFilter = getInputFormat ( ) ; int cutOff = ( int ) Math . round ( toFilter . numInstances ( ) * m_Percentage / _NUM ) ; if ( m_Inverse ) { for ( int i = _NUM ; i < cutOff ; i ++ ) { push ( toFilter . instance ( i ) ) ; } } else { for ( int i = cutOff ; i < toFilter . numInstances ( ) ; i ++ ) { push ( toFilter . instance ( i ) ) ; } } flushInput ( ) ; m_NewBatch = _BOOL ; m_FirstBatchDone = _BOOL ; return ( numPendingOutput ( ) != _NUM ) ; }
public void computeParameters ( ) { if ( ellps == null ) { ellps = Ellipsoid . WGS_84 ; } if ( mode == MODE_BELGIUM ) { alpha = _NUM ; } else { alpha = _NUM ; } double phi1 = ProjMath . degToRad ( lambert_sp_one ) ; double phi2 = ProjMath . degToRad ( lambert_sp_two ) ; double phif = ProjMath . degToRad ( referenceLatitude ) ; double e = ellps . ecc ; double sinphi ; sinphi = Math . sin ( phi1 ) ; double m1 = lambMsfn ( sinphi , Math . cos ( phi1 ) , e ) ; double t1 = lambTsfn ( phi1 , sinphi , e ) ; if ( MoreMath . approximately_equal ( phi1 , phi2 , EPS10 ) ) { n = sinphi ; } else { sinphi = Math . sin ( phi2 ) ; double m2 = lambMsfn ( sinphi , Math . cos ( phi2 ) , e ) ; double t2 = lambTsfn ( phi2 , sinphi , e ) ; n = Math . log ( m1 / m2 ) / Math . log ( t1 / t2 ) ; } F = m1 / ( n * Math . pow ( t1 , n ) ) ; if ( MoreMath . approximately_equal ( phi1 , phi2 , EPS10 ) ) { rf = _NUM ; } else { rf = ellps . radius * F * Math . pow ( lambTsfn ( phif , Math . sin ( phif ) , e ) , n ) ; } lamdaf = ProjMath . degToRad ( centralMeridian ) ; locationCenterXPixel = ( ( double ) getWidth ( ) / _NUM ) ; locationCenterYPixel = ( ( double ) getHeight ( ) / _NUM ) ; locationPixelsPerLambert = ( double ) getPPM ( ) / getScale ( ) ; LatLonPoint origin = new LatLonPoint . Double ( referenceLatitude , centralMeridian ) ; Point2D lp = LLToWorld ( origin . getY ( ) , origin . getX ( ) , new Point2D . Double ( ) ) ; locationOriginX = lp . getX ( ) ; locationOriginY = lp . getY ( ) ; LatLonPoint center = getCenter ( ) ; lp = LLToWorld ( center . getY ( ) , center . getX ( ) , lp ) ; locationCenterXLambert = lp . getX ( ) ; locationCenterYLambert = lp . getY ( ) ; locationOriginXfPixel = locationCenterXPixel + ( locationOriginX - locationCenterXLambert ) * locationPixelsPerLambert ; locationOriginYfPixel = locationCenterYPixel - ( locationOriginY - locationCenterYLambert ) * locationPixelsPerLambert ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + locationCenterXLambert + _STR + locationCenterYLambert ) ; Debug . output ( _STR + locationOriginX + _STR + locationOriginY ) ; } }
protected OkHttpClient configureHttpClient ( ) { final OkHttpClient . Builder builder = new OkHttpClient . Builder ( ) ; final CookieManager cookieManager = new CookieManager ( ) ; cookieManager . setCookiePolicy ( CookiePolicy . ACCEPT_ALL ) ; builder . cookieJar ( new JavaNetCookieJar ( cookieManager ) ) ; builder . connectTimeout ( _NUM , TimeUnit . SECONDS ) ; builder . writeTimeout ( _NUM , TimeUnit . SECONDS ) ; builder . readTimeout ( _NUM , TimeUnit . SECONDS ) ; return builder . build ( ) ; }
public String parseFile ( File file ) { log . config ( file . getAbsolutePath ( ) ) ; String line = null ; try { BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( file ) , Ini . getCharset ( ) ) , _NUM ) ; String errMsg = _STR ; int lineNo = _NUM ; while ( ( line = in . readLine ( ) ) != null && errMsg . length ( ) == _NUM ) { errMsg = parseLine ( line , lineNo ) ; lineNo ++ ; } line = null ; in . close ( ) ; if ( errMsg . length ( ) != _NUM ) return errMsg ; } catch ( Exception ioe ) { String s = ioe . getLocalizedMessage ( ) ; if ( s == null || s . length ( ) == _NUM ) s = ioe . toString ( ) ; return _STR + line + _STR + s ; } return _STR ; }
public static Test suite ( ) throws Exception { return suite ( _BOOL ) ; }
public void load ( Element element , Object o ) { log . error ( _STR ) ; }
public OMRaster ( double lt , double ln , int offset_x1 , int offset_y1 , ImageIcon ii ) { this ( lt , ln , offset_x1 , offset_y1 , ii . getImage ( ) ) ; }
private synchronized boolean startDequeue ( ) { int threads = Math . min ( queue . size ( ) , maxThreads ) ; for ( int i = _NUM ; i < threads ; i ++ ) { ResourceThread t = ( ResourceThread ) queue . firstElement ( ) ; queue . removeElementAt ( _NUM ) ; running . addElement ( t ) ; threadCount ++ ; } for ( Enumeration e = running . elements ( ) ; e . hasMoreElements ( ) ; ) { ResourceThread t = ( ResourceThread ) e . nextElement ( ) ; t . go ( ) ; } return ( threads > _NUM ) ; }
public void propertyChange ( PropertyChangeEvent evt ) { String name = evt . getPropertyName ( ) ; if ( name == _STR || name == _STR ) { invalidateWidthCache ( ) ; fireColumnMarginChanged ( ) ; } }
static WorkQueue commonSubmitterQueue ( ) { ForkJoinPool p ; WorkQueue [ ] ws ; int m ; Submitter z ; return ( ( z = submitters . get ( ) ) != null && ( p = commonPool ) != null && ( ws = p . workQueues ) != null && ( m = ws . length - _NUM ) >= _NUM ) ? ws [ m & z . seed & SQMASK ] : null ; }
public static void assertEquals ( Object object1 , Object object2 ) { checkAssertion ( object1 . equals ( object2 ) , null ) ; }
protected final void refreshLoadingViewsSize ( ) { final int maximumPullScroll = ( int ) ( getMaximumPullScroll ( ) * _NUM ) ; int pLeft = getPaddingLeft ( ) ; int pTop = getPaddingTop ( ) ; int pRight = getPaddingRight ( ) ; int pBottom = getPaddingBottom ( ) ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setWidth ( maximumPullScroll ) ; pLeft = - maximumPullScroll ; } else { pLeft = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setWidth ( maximumPullScroll ) ; pRight = - maximumPullScroll ; } else { pRight = _NUM ; } break ; case VERTICAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setHeight ( maximumPullScroll ) ; pTop = - maximumPullScroll ; } else { pTop = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setHeight ( maximumPullScroll ) ; pBottom = - maximumPullScroll ; } else { pBottom = _NUM ; } break ; } if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR , pLeft , pTop , pRight , pBottom ) ) ; } setPadding ( pLeft , pTop , pRight , pBottom ) ; }
public static String flagNames ( long flags ) { StringBuilder sbuf = new StringBuilder ( ) ; int i = _NUM ; long f = flags & StandardFlags ; while ( f != _NUM ) { if ( ( f & _NUM ) != _NUM ) { sbuf . append ( _STR ) ; sbuf . append ( flagName [ i ] ) ; } f = f > > _NUM ; i ++ ; } return sbuf . toString ( ) ; }
public String formatSQL ( Object obj , Object expr ) { String sql = null ; if ( expr instanceof String ) { sql = ( String ) expr ; if ( log . isLoggable ( Level . FINEST ) ) { log . finest ( _STR + sql ) ; } } else if ( obj != null ) { sql = toString ( obj ) ; if ( sql != null ) { if ( sql . startsWith ( _STR ) ) { sql = sql . replaceFirst ( _STR , _STR ) ; } sql = sql . replaceAll ( _STR , BINARY_SQL_MARKER ) ; } if ( log . isLoggable ( Level . FINEST ) ) { log . finest ( _STR + sql ) ; } } return sql ; }
public void indent ( ) { indent . append ( _STR ) ; }
public void addFakeView ( View childView ) { childView . layout ( _NUM , _NUM , getWidth ( ) , childView . getMeasuredHeight ( ) ) ; views . add ( childView ) ; }
public void compileProjects ( List < File > projects , IssueAcceptor issueAcceptor ) throws N4JSCompileException { compileProjects ( Arrays . asList ( new File ( _STR ) ) , projects , Collections . emptyList ( ) , issueAcceptor ) ; }
protected final void print_contact_info ( ObjectInfoPanel p_window , java . util . Locale p_locale ) { Collection < BrdItem > contacts = get_normal_contacts ( ) ; if ( contacts . isEmpty ( ) ) return ; GuiResources resources = r_board . newGuiResources ( _STR ) ; p_window . append ( _STR + resources . getString ( _STR ) + _STR ) ; Integer contact_count = contacts . size ( ) ; p_window . append_items ( contact_count . toString ( ) , resources . getString ( _STR ) , contacts ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
@ SuppressWarnings ( _STR ) public Promise < Result , Progress > resolve ( Result result ) { List < DoneCallback < Result > > doneCallbacks ; List < AlwaysCallback > alwaysCallbacks ; synchronized ( this ) { validateInPendingState ( ) ; mState = STATE_RESOLVED ; printStateChanged ( _STR ) ; mResult = result ; doneCallbacks = mCallbacks . cloneDoneCallbacks ( ) ; alwaysCallbacks = mCallbacks . cloneAlwaysCallbacks ( ) ; clearCallbacks ( ) ; } if ( doneCallbacks . size ( ) > _NUM || alwaysCallbacks . size ( ) > _NUM ) { triggerAllDones ( doneCallbacks ) ; triggerAllAlways ( alwaysCallbacks ) ; } return this ; }
private void adjustNameAndPosition ( Node node , int deltaX , int deltaY ) { String originalName = node . getName ( ) ; String uniqueName = nextUniqueName ( originalName ) ; if ( ! uniqueName . equals ( originalName ) ) { node . setName ( uniqueName ) ; node . setCenterX ( node . getCenterX ( ) + deltaX ) ; node . setCenterY ( node . getCenterY ( ) + deltaY ) ; } }
private void createSnapshot ( BlockSnapshot snapshot , Snap unitySnap , StorageSystem storage , DbClient dbClient ) { snapshot . setNativeId ( unitySnap . getId ( ) ) ; snapshot . setNativeGuid ( NativeGUIDGenerator . generateNativeGuid ( storage , snapshot ) ) ; snapshot . setDeviceLabel ( unitySnap . getName ( ) ) ; snapshot . setIsSyncActive ( _BOOL ) ; snapshot . setInactive ( _BOOL ) ; snapshot . setCreationTime ( Calendar . getInstance ( ) ) ; snapshot . setWWN ( unitySnap . getAttachedWWN ( ) ) ; snapshot . setAllocatedCapacity ( unitySnap . getSize ( ) ) ; snapshot . setProvisionedCapacity ( unitySnap . getSize ( ) ) ; dbClient . createObject ( snapshot ) ; }
public void save ( ) throws IOException { if ( ! props . isEmpty ( ) ) { ConfigurationUtil . saveConfigurationProperties ( props , propsFile , _BOOL ) ; } ConfigurationUtil . saveConfigurationProperties ( props , new File ( propsFile . getParentFile ( ) , propsFile . getName ( ) + _STR ) , _BOOL ) ; }
public static int len ( String list , String delimiter , boolean ignoreEmpty ) { if ( delimiter . length ( ) == _NUM ) return len ( list , delimiter . charAt ( _NUM ) , ignoreEmpty ) ; char [ ] del = delimiter . toCharArray ( ) ; int len = StringUtil . length ( list ) ; if ( len == _NUM ) return _NUM ; int count = _NUM ; int last = _NUM ; char c ; for ( int i = _NUM ; i < len ; i ++ ) { c = list . charAt ( i ) ; for ( int y = _NUM ; y < del . length ; y ++ ) { if ( c == del [ y ] ) { if ( ! ignoreEmpty || last < i ) count ++ ; last = i + _NUM ; break ; } } } if ( ! ignoreEmpty || last < len ) count ++ ; return count ; }
public synchronized void flush ( ) throws IOException { checkNotClosed ( ) ; trimToSize ( ) ; journalWriter . flush ( ) ; }
public String buildUri ( String representationId , int segmentNumber , int bandwidth , long time ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = _NUM ; i < identifierCount ; i ++ ) { builder . append ( urlPieces [ i ] ) ; if ( identifiers [ i ] == REPRESENTATION_ID ) { builder . append ( representationId ) ; } else if ( identifiers [ i ] == NUMBER_ID ) { builder . append ( String . format ( Locale . US , identifierFormatTags [ i ] , segmentNumber ) ) ; } else if ( identifiers [ i ] == BANDWIDTH_ID ) { builder . append ( String . format ( Locale . US , identifierFormatTags [ i ] , bandwidth ) ) ; } else if ( identifiers [ i ] == TIME_ID ) { builder . append ( String . format ( Locale . US , identifierFormatTags [ i ] , time ) ) ; } } builder . append ( urlPieces [ identifierCount ] ) ; return builder . toString ( ) ; }
static void dispose ( long pData , long pConfigInfo ) { OGLRenderQueue rq = OGLRenderQueue . getInstance ( ) ; rq . lock ( ) ; try { OGLContext . setScratchSurface ( pConfigInfo ) ; RenderBuffer buf = rq . getBuffer ( ) ; rq . ensureCapacityAndAlignment ( _NUM , _NUM ) ; buf . putInt ( DISPOSE_SURFACE ) ; buf . putLong ( pData ) ; rq . flushNow ( ) ; } finally { rq . unlock ( ) ; } }
private void writeKanjiResourceFile ( File file ) throws IOException { FileOutputStream output = null ; KanjiEscapeOutputStream kanji = null ; OutputStreamWriter writer = null ; BufferedWriter w = null ; try { output = new FileOutputStream ( file ) ; kanji = new KanjiEscapeOutputStream ( output ) ; writer = new OutputStreamWriter ( kanji ) ; w = new BufferedWriter ( writer ) ; w . write ( _sb . toString ( ) ) ; } finally { Util . close ( w ) ; Util . close ( writer ) ; Util . close ( kanji ) ; Util . close ( output ) ; } }
public ScannerException ( File file , ErrorMessages message ) { this ( file , ErrorMessages . get ( message ) , message , - _NUM , - _NUM ) ; }
void renderNormal ( ) { glEnable ( GL_DEPTH_TEST ) ; glUseProgram ( this . normalProgram ) ; glUniformMatrix4fv ( viewMatrixUniform , _BOOL , viewMatrix . get ( matrixBuffer ) ) ; glUniformMatrix4fv ( projMatrixUniform , _BOOL , projMatrix . get ( matrixBuffer ) ) ; glUniformMatrix3fv ( normalMatrixUniform , _BOOL , normalMatrix . get ( matrixBuffer ) ) ; glBindFramebufferEXT ( GL_FRAMEBUFFER_EXT , fbo ) ; glClear ( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT ) ; glBindBuffer ( GL_ARRAY_BUFFER , this . cubeVbo ) ; glEnableVertexAttribArray ( _NUM ) ; glVertexAttribPointer ( _NUM , _NUM , GL_FLOAT , _BOOL , _NUM , _NUM ) ; glEnableVertexAttribArray ( _NUM ) ; glVertexAttribPointer ( _NUM , _NUM , GL_FLOAT , _BOOL , _NUM , normalsOffset ) ; glDrawArrays ( GL_TRIANGLES , _NUM , numVertices ) ; glDisableVertexAttribArray ( _NUM ) ; glDisableVertexAttribArray ( _NUM ) ; glBindBuffer ( GL_ARRAY_BUFFER , _NUM ) ; glBindFramebufferEXT ( GL_FRAMEBUFFER_EXT , _NUM ) ; glUseProgram ( _NUM ) ; }
private < T extends CWLResource > List < T > lookForResources ( CWLResourceType type , Class < T > clazz ) { List < T > resources = getRequirements ( type , clazz ) ; if ( resources == null || resources . size ( ) == _NUM ) { resources = getHints ( type , clazz ) ; } return resources ; }
private void calcYValueSum ( ) { mYValueSum = _NUM ; for ( int i = _NUM ; i < mYVals . size ( ) ; i ++ ) { Entry e = mYVals . get ( i ) ; if ( e != null ) mYValueSum += Math . abs ( e . getVal ( ) ) ; } }
@ Override public boolean release ( int decrement ) { if ( isEmpty ) { return _BOOL ; } if ( decrement < _NUM ) { throw new IllegalStateException ( String . format ( _STR , decrement , toVerboseString ( ) ) ) ; } final int refCnt = ledger . decrement ( decrement ) ; if ( BaseAllocator . DEBUG ) { historicalLog . recordEvent ( _STR , decrement , refCnt + decrement ) ; } if ( refCnt < _NUM ) { throw new IllegalStateException ( String . format ( _STR , id , toVerboseString ( ) ) ) ; } return refCnt == _NUM ; }
public static void checkArgument ( boolean expression , Object errorMessage ) { if ( ! expression ) { throw new IllegalArgumentException ( String . valueOf ( errorMessage ) ) ; } }
int listSize ( ) { int result = memSize ( ) ; for ( Iterator it = iterator ( ) ; it . hasNext ( ) ; ) { ASTNode child = ( ASTNode ) it . next ( ) ; result += child . treeSize ( ) ; } return result ; }
public ConnectionTcp findConnectionByThreadId ( long threadId ) { for ( PortTcp listener : getPorts ( ) ) { ConnectionTcp conn = listener . findConnectionByThreadId ( threadId ) ; if ( conn != null ) return conn ; } return null ; }
public UniformDistribution estimate ( double min , double max , final int count ) { double grow = ( count > _NUM ) ? _NUM * ( max - min ) / ( count - _NUM ) : _NUM ; return new UniformDistribution ( Math . max ( min - grow , - Double . MAX_VALUE ) , Math . min ( max + grow , Double . MAX_VALUE ) ) ; }
public static RepositoryMetaData readFrom ( StreamInput in ) throws IOException { String name = in . readString ( ) ; String type = in . readString ( ) ; Settings settings = Settings . readSettingsFromStream ( in ) ; return new RepositoryMetaData ( name , type , settings ) ; }
public static boolean isPrimitiveDatatype ( IRI datatype ) { return datatype . equals ( XMLSchema . DURATION ) || datatype . equals ( XMLSchema . DATETIME ) || datatype . equals ( XMLSchema . TIME ) || datatype . equals ( XMLSchema . DATE ) || datatype . equals ( XMLSchema . GYEARMONTH ) || datatype . equals ( XMLSchema . GYEAR ) || datatype . equals ( XMLSchema . GMONTHDAY ) || datatype . equals ( XMLSchema . GDAY ) || datatype . equals ( XMLSchema . GMONTH ) || datatype . equals ( XMLSchema . STRING ) || datatype . equals ( XMLSchema . BOOLEAN ) || datatype . equals ( XMLSchema . BASE64BINARY ) || datatype . equals ( XMLSchema . HEXBINARY ) || datatype . equals ( XMLSchema . FLOAT ) || datatype . equals ( XMLSchema . DECIMAL ) || datatype . equals ( XMLSchema . DOUBLE ) || datatype . equals ( XMLSchema . ANYURI ) || datatype . equals ( XMLSchema . QNAME ) || datatype . equals ( XMLSchema . NOTATION ) ; }
protected void appendLine ( JComponent c ) { c . setAlignmentX ( _NUM ) ; contents . add ( c ) ; }
private void addLinks ( final SpannableString string , final long accountId , final long extraId , final int type , final boolean sensitive , final OnLinkClickListener listener , final int highlightOption ) { switch ( type ) { case LINK_TYPE_MENTION : { addMentionOrListLinks ( string , accountId , extraId , highlightOption , listener ) ; break ; } case LINK_TYPE_HASHTAG : { addHashtagLinks ( string , accountId , extraId , listener , highlightOption ) ; break ; } case LINK_TYPE_LINK : { final URLSpan [ ] spans = string . getSpans ( _NUM , string . length ( ) , URLSpan . class ) ; for ( final URLSpan span : spans ) { final int start = string . getSpanStart ( span ) ; final int end = string . getSpanEnd ( span ) ; if ( start < _NUM || end > string . length ( ) || start > end ) { continue ; } string . removeSpan ( span ) ; applyLink ( span . getURL ( ) , start , end , string , accountId , extraId , LINK_TYPE_LINK , sensitive , highlightOption , listener ) ; } final List < Extractor . Entity > urls = mExtractor . extractURLsWithIndices ( ParseUtils . parseString ( string ) ) ; for ( final Extractor . Entity entity : urls ) { final int start = entity . getStart ( ) , end = entity . getEnd ( ) ; if ( entity . getType ( ) != Extractor . Entity . Type . URL || string . getSpans ( start , end , URLSpan . class ) . length > _NUM ) { continue ; } applyLink ( entity . getValue ( ) , start , end , string , accountId , extraId , LINK_TYPE_LINK , sensitive , highlightOption , listener ) ; } break ; } case LINK_TYPE_STATUS : { final URLSpan [ ] spans = string . getSpans ( _NUM , string . length ( ) , URLSpan . class ) ; for ( final URLSpan span : spans ) { final Matcher matcher = PATTERN_TWITTER_STATUS . matcher ( span . getURL ( ) ) ; if ( matcher . matches ( ) ) { final int start = string . getSpanStart ( span ) ; final int end = string . getSpanEnd ( span ) ; final String url = matcherGroup ( matcher , GROUP_ID_TWITTER_STATUS_STATUS_ID ) ; string . removeSpan ( span ) ; applyLink ( url , start , end , string , accountId , extraId , LINK_TYPE_STATUS , sensitive , highlightOption , listener ) ; } } break ; } case LINK_TYPE_CASHTAG : { addCashtagLinks ( string , accountId , extraId , listener , highlightOption ) ; break ; } default : { return ; } } }
public void postProcess ( ) { if ( foreignColumnName != null ) { foreignAutoRefresh = _BOOL ; } if ( foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField . NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED ) { maxForeignAutoRefreshLevel = DatabaseField . DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL ; } }
public boolean contains ( Node s ) { runTo ( - _NUM ) ; if ( null == m_map ) return _BOOL ; for ( int i = _NUM ; i < m_firstFree ; i ++ ) { Node node = m_map [ i ] ; if ( ( null != node ) && node . equals ( s ) ) return _BOOL ; } return _BOOL ; }
private void persistNewTemp ( File fileCfg ) { if ( hsDeleteOnExit . size ( ) == _NUM ) { logDebug ( LogArea . CONFIG , _STR ) ; fileCfg . delete ( ) ; return ; } logDebug ( LogArea . CONFIG , _STR , hsDeleteOnExit . size ( ) , fileCfg . getAbsolutePath ( ) ) ; BufferedWriter writer = null ; try { writer = new BufferedWriter ( new FileWriter ( fileCfg ) ) ; for ( File file : hsDeleteOnExit ) { if ( ! file . delete ( ) ) { String f = file . getCanonicalPath ( ) ; writer . write ( f ) ; writer . newLine ( ) ; logWarn ( LogArea . JAR , _STR , f ) ; } } } catch ( IOException e ) { } finally { if ( writer != null ) { try { writer . close ( ) ; } catch ( IOException e ) { } } } }
public static double clamp ( double value , double low , double high ) { return Math . min ( Math . max ( value , low ) , high ) ; }
public void addWritten ( byte [ ] value ) { writeSetLock . lock ( ) ; writeSet . add ( new TimestampValuePair ( ets , value ) ) ; writeSetLock . unlock ( ) ; }
public void load ( Entity unit ) throws IllegalArgumentException { if ( ! canLoad ( unit ) ) { throw new IllegalArgumentException ( _STR + unit . getShortName ( ) + _STR ) ; } currentSpace -= _NUM ; troops . addElement ( unit . getId ( ) ) ; }
private void processWorkerExit ( Worker w , boolean completedAbruptly ) { if ( completedAbruptly ) decrementWorkerCount ( ) ; final ReentrantLock mainLock = this . mainLock ; mainLock . lock ( ) ; try { completedTaskCount += w . completedTasks ; workers . remove ( w ) ; } finally { mainLock . unlock ( ) ; } tryTerminate ( ) ; int c = ctl . get ( ) ; if ( runStateLessThan ( c , STOP ) ) { if ( ! completedAbruptly ) { int min = allowCoreThreadTimeOut ? _NUM : corePoolSize ; if ( min == _NUM && ! workQueue . isEmpty ( ) ) min = _NUM ; if ( workerCountOf ( c ) >= min ) return ; } addWorker ( null , _BOOL ) ; } }
public void finish ( ) throws IOException { if ( ! def . finished ( ) ) { def . finish ( ) ; while ( ! def . finished ( ) ) { int len = def . deflate ( buf , _NUM , buf . length ) ; if ( def . finished ( ) && len <= buf . length - TRAILER_SIZE ) { writeTrailer ( buf , len ) ; len = len + TRAILER_SIZE ; out . write ( buf , _NUM , len ) ; return ; } if ( len > _NUM ) out . write ( buf , _NUM , len ) ; } byte [ ] trailer = new byte [ TRAILER_SIZE ] ; writeTrailer ( trailer , _NUM ) ; out . write ( trailer ) ; } }
public boolean free ( T obj ) { AtomicInteger topRef = _top ; while ( _BOOL ) { final int top = topRef . get ( ) ; if ( _capacity <= top ) { return _BOOL ; } boolean isFree = _freeStack . compareAndSet ( top , null , obj ) ; topRef . compareAndSet ( top , top + _NUM ) ; if ( isFree ) { return _BOOL ; } } }
public static boolean hasBinding ( Injector injector , Key < ? > key ) { Binding < ? > binding = getBinding ( injector , key ) ; return binding != null ; }
private OpenReplicatorManagerMBean createInternalService ( String serviceName ) throws ReplicatorException { logger . info ( _STR + serviceName ) ; try { OpenReplicatorManager orm = new OpenReplicatorManager ( serviceName ) ; orm . setRmiHost ( managerRMIHost ) ; orm . setRmiPort ( managerRMIPort ) ; orm . setHostTimeZone ( hostTimeZone ) ; orm . setReplicatorTimeZone ( replicatorTimeZone ) ; orm . advertiseInternal ( ) ; orm . setSecurityInfo ( this . securityInfo ) ; return ( OpenReplicatorManagerMBean ) orm ; } catch ( Exception e ) { throw new ReplicatorException ( String . format ( _STR , serviceName ) , e ) ; } }
public static CheckIndex . Status checkIndex ( Directory dir ) throws IOException { return checkIndex ( dir , _BOOL ) ; }
static void policyChanged ( String serviceTypeName , PolicyEvent pe ) { if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + serviceTypeName ) ; } resourceNamesMap . remove ( serviceTypeName ) ; Cache resourceNamesCache = ( Cache ) resourceNamesMap . get ( serviceTypeName ) ; if ( ( resourceNamesCache == null ) || ( resourceNamesCache . isEmpty ( ) ) ) { return ; } try { DEBUG . error ( _STR ) ; ServiceTypeManager stm = ServiceTypeManager . getServiceTypeManager ( ) ; ServiceType serviceType = stm . getServiceType ( serviceTypeName ) ; Set resourceNamesToRemove = new HashSet ( ) ; synchronized ( resourceNamesCache ) { Enumeration resourceNames = resourceNamesCache . keys ( ) ; while ( resourceNames . hasMoreElements ( ) ) { String resourceName = ( String ) resourceNames . nextElement ( ) ; if ( resourceNamesToRemove . contains ( resourceName ) ) { continue ; } Set affectedResourceNames = pe . getResourceNames ( ) ; Iterator iter = affectedResourceNames . iterator ( ) ; while ( iter . hasNext ( ) ) { String affectedResourceName = ( String ) iter . next ( ) ; if ( serviceType . compare ( resourceName , affectedResourceName ) != ResourceMatch . NO_MATCH ) { resourceNamesToRemove . add ( resourceName ) ; } } } Iterator iter1 = resourceNamesToRemove . iterator ( ) ; while ( iter1 . hasNext ( ) ) { String resourceNameToRemove = ( String ) iter1 . next ( ) ; resourceNamesCache . remove ( resourceNameToRemove ) ; } } } catch ( SSOException e ) { DEBUG . error ( _STR , e ) ; } catch ( PolicyException pex ) { DEBUG . error ( _STR , pex ) ; } if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + serviceTypeName + _STR + resourceNamesMap . get ( serviceTypeName ) ) ; } }
private void startHideAnimations ( ) { animationPlaying = _BOOL ; lightAnimationLayout ( ) ; if ( buttonType . equals ( ButtonType . CIRCLE ) ) { if ( hideOrderType . equals ( OrderType . DEFAULT ) ) { for ( int i = _NUM ; i < buttonNum ; i ++ ) { setHideAnimation ( dots [ i ] , circleButtons [ i ] , endLocations [ i ] , startLocations [ i ] , i ) ; } } else if ( hideOrderType . equals ( OrderType . REVERSE ) ) { for ( int i = _NUM ; i < buttonNum ; i ++ ) { setHideAnimation ( dots [ i ] , circleButtons [ i ] , endLocations [ i ] , startLocations [ i ] , buttonNum - i - _NUM ) ; } } else if ( hideOrderType . equals ( OrderType . RANDOM ) ) { Random random = new Random ( ) ; boolean [ ] used = new boolean [ buttonNum ] ; for ( int i = _NUM ; i < buttonNum ; i ++ ) used [ i ] = _BOOL ; int count = _NUM ; while ( _BOOL ) { int i = random . nextInt ( buttonNum ) ; if ( ! used [ i ] ) { used [ i ] = _BOOL ; setHideAnimation ( dots [ count ] , circleButtons [ count ] , endLocations [ count ] , startLocations [ count ] , i ) ; count ++ ; if ( count == buttonNum ) break ; } } } } else if ( buttonType . equals ( ButtonType . HAM ) ) { if ( hideOrderType . equals ( OrderType . DEFAULT ) ) { for ( int i = _NUM ; i < buttonNum ; i ++ ) { setHideAnimation ( bars [ i ] , hamButtons [ i ] , endLocations [ i ] , startLocations [ i ] , i ) ; } } else if ( hideOrderType . equals ( OrderType . REVERSE ) ) { for ( int i = _NUM ; i < buttonNum ; i ++ ) { setHideAnimation ( bars [ i ] , hamButtons [ i ] , endLocations [ i ] , startLocations [ i ] , buttonNum - i - _NUM ) ; } } else if ( hideOrderType . equals ( OrderType . RANDOM ) ) { Random random = new Random ( ) ; boolean [ ] used = new boolean [ buttonNum ] ; for ( int i = _NUM ; i < buttonNum ; i ++ ) used [ i ] = _BOOL ; int count = _NUM ; while ( _BOOL ) { int i = random . nextInt ( buttonNum ) ; if ( ! used [ i ] ) { used [ i ] = _BOOL ; setHideAnimation ( bars [ count ] , hamButtons [ count ] , endLocations [ count ] , startLocations [ count ] , i ) ; count ++ ; if ( count == buttonNum ) break ; } } } } }
public TaggedOutputStream ( OutputStream proxy ) { super ( proxy ) ; }
public List < MType > build ( ) { isClean = _BOOL ; if ( ! isMessagesListMutable && builders == null ) { return messages ; } boolean allMessagesInSync = _BOOL ; if ( ! isMessagesListMutable ) { for ( int i = _NUM ; i < messages . size ( ) ; i ++ ) { Message message = messages . get ( i ) ; SingleFieldBuilder < MType , BType , IType > builder = builders . get ( i ) ; if ( builder != null ) { if ( builder . build ( ) != message ) { allMessagesInSync = _BOOL ; break ; } } } if ( allMessagesInSync ) { return messages ; } } ensureMutableMessageList ( ) ; for ( int i = _NUM ; i < messages . size ( ) ; i ++ ) { messages . set ( i , getMessage ( i , _BOOL ) ) ; } messages = Collections . unmodifiableList ( messages ) ; isMessagesListMutable = _BOOL ; return messages ; }
public static void putShort ( long addr , short val ) { if ( UNALIGNED ) UNSAFE . putShort ( addr , val ) ; else putShortByByte ( addr , val , BIG_ENDIAN ) ; }
public static byte [ ] hashTwice ( byte [ ] input , int offset , int length ) { MessageDigest digest = newDigest ( ) ; digest . update ( input , offset , length ) ; return digest . digest ( digest . digest ( ) ) ; }
public PronounceableFSM ( URL url , boolean scanFromFront ) throws IOException { this . scanFromFront = scanFromFront ; InputStream is = Utilities . getInputStream ( url ) ; loadText ( is ) ; is . close ( ) ; }
private char [ ] applyFloatPadding ( final char [ ] ca4 , final boolean noDigits ) { char [ ] ca5 = ca4 ; if ( fieldWidthSet ) { int i ; int j ; final int nBlanks ; if ( leftJustify ) { nBlanks = fieldWidth - ca4 . length ; if ( nBlanks > _NUM ) { ca5 = new char [ ca4 . length + nBlanks ] ; for ( i = _NUM ; i < ca4 . length ; i ++ ) { ca5 [ i ] = ca4 [ i ] ; } for ( j = _NUM ; j < nBlanks ; j ++ , i ++ ) { ca5 [ i ] = _STR ; } } } else if ( ! leadingZeros || noDigits ) { nBlanks = fieldWidth - ca4 . length ; if ( nBlanks > _NUM ) { ca5 = new char [ ca4 . length + nBlanks ] ; for ( i = _NUM ; i < nBlanks ; i ++ ) { ca5 [ i ] = _STR ; } for ( j = _NUM ; j < ca4 . length ; i ++ , j ++ ) { ca5 [ i ] = ca4 [ j ] ; } } } else if ( leadingZeros ) { nBlanks = fieldWidth - ca4 . length ; if ( nBlanks > _NUM ) { ca5 = new char [ ca4 . length + nBlanks ] ; i = _NUM ; j = _NUM ; if ( ca4 [ _NUM ] == _STR ) { ca5 [ _NUM ] = _STR ; i ++ ; j ++ ; } for ( int k = _NUM ; k < nBlanks ; i ++ , k ++ ) { ca5 [ i ] = _STR ; } for ( ; j < ca4 . length ; i ++ , j ++ ) { ca5 [ i ] = ca4 [ j ] ; } } } } return ca5 ; }
public Object put ( String key , Object value ) { final int len = key . length ( ) ; if ( len > m_charBuffer . length ) { m_charBuffer = new char [ len ] ; } Node node = m_Root ; for ( int i = _NUM ; i < len ; i ++ ) { Node nextNode = node . m_nextChar [ Character . toLowerCase ( key . charAt ( i ) ) ] ; if ( nextNode != null ) { node = nextNode ; } else { for ( ; i < len ; i ++ ) { Node newNode = new Node ( ) ; if ( m_lowerCaseOnly ) { node . m_nextChar [ Character . toLowerCase ( key . charAt ( i ) ) ] = newNode ; } else { node . m_nextChar [ Character . toUpperCase ( key . charAt ( i ) ) ] = newNode ; node . m_nextChar [ Character . toLowerCase ( key . charAt ( i ) ) ] = newNode ; } node = newNode ; } break ; } } Object ret = node . m_Value ; node . m_Value = value ; return ret ; }
@ Override public void makeImmutable ( ) { if ( isMutable ) { if ( authnStatements != null ) { int length = authnStatements . size ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { AuthnStatement authn = ( AuthnStatement ) authnStatements . get ( i ) ; authn . makeImmutable ( ) ; } authnStatements = Collections . unmodifiableList ( authnStatements ) ; } if ( authzDecisionStatements != null ) { int length = authzDecisionStatements . size ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { AuthzDecisionStatement authz = ( AuthzDecisionStatement ) authzDecisionStatements . get ( i ) ; authz . makeImmutable ( ) ; } authzDecisionStatements = Collections . unmodifiableList ( authzDecisionStatements ) ; } if ( attributeStatements != null ) { int length = attributeStatements . size ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { AttributeStatement attr = ( AttributeStatement ) attributeStatements . get ( i ) ; attr . makeImmutable ( ) ; } attributeStatements = Collections . unmodifiableList ( attributeStatements ) ; } if ( statements != null ) { statements = Collections . unmodifiableList ( statements ) ; } if ( conditions != null ) { conditions . makeImmutable ( ) ; } if ( issuer != null ) { issuer . makeImmutable ( ) ; } if ( subject != null ) { subject . makeImmutable ( ) ; } if ( advice != null ) { advice . makeImmutable ( ) ; } isMutable = _BOOL ; } }
@ Override public String findLibrary ( String name ) { String systemName = System . mapLibraryName ( name ) ; ArrayList < Loader > loaders = getLoaders ( ) ; for ( int i = _NUM ; i < loaders . size ( ) ; i ++ ) { Loader loader = loaders . get ( i ) ; Path path = loader . getPath ( systemName ) ; if ( path != null && path . canRead ( ) ) { return path . getNativePath ( ) ; } path = loader . getPath ( _STR + systemName ) ; if ( path != null && path . canRead ( ) ) { return path . getNativePath ( ) ; } } for ( int i = _NUM ; i < _nativePath . size ( ) ; i ++ ) { Path path = _nativePath . get ( i ) ; if ( path . canRead ( ) ) return path . getNativePath ( ) ; } return super . findLibrary ( name ) ; }
public void removeComponentListener ( final ComponentUpdateListener listener ) { componentListeners . remove ( listener ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return APPKEY ; case _NUM : return SEND_TIME ; case _NUM : return LOAD_INFO ; case _NUM : return STATUS ; default : return null ; } }
public static boolean isEmpty ( CharSequence text ) { return text == null || text . length ( ) == _NUM ; }
protected byte [ ] assertEncodeDecode ( final IGangliaMetadataMessage decl , final IGangliaMessage expected ) { if ( expected == null ) throw new IllegalArgumentException ( ) ; final XDROutputBuffer xdr = new XDROutputBuffer ( IGangliaDefaults . BUFFER_SIZE ) ; final GangliaMessageEncoder31 messageEncoder = new GangliaMessageEncoder31 ( ) ; final GangliaMessageDecoder31 messageDecoder = new GangliaMessageDecoder31 ( ) ; if ( expected . isMetricRequest ( ) ) { messageEncoder . writeRequest ( xdr , ( IGangliaRequestMessage ) expected ) ; } else if ( expected . isMetricMetadata ( ) ) { messageEncoder . writeMetadata ( xdr , ( IGangliaMetadataMessage ) expected ) ; } else if ( expected . isMetricValue ( ) ) { if ( decl == null ) throw new IllegalArgumentException ( _STR ) ; messageEncoder . writeMetric ( xdr , decl , ( IGangliaMetricMessage ) expected ) ; } else { throw new AssertionError ( ) ; } final IGangliaMessage actual = messageDecoder . decode ( xdr . getBuffer ( ) , _NUM , xdr . getLength ( ) ) ; assertEquals ( _STR , expected , actual ) ; final byte [ ] actualData = new byte [ xdr . getLength ( ) ] ; System . arraycopy ( xdr . getBuffer ( ) , _NUM , actualData , _NUM , actualData . length ) ; return actualData ; }
private boolean isIndexable ( String term ) { return ( term . length ( ) < _NUM ) && ( term . length ( ) > _NUM ) ; }
private void sendResponse ( String status , String mime , Properties header , InputStream data ) { try { if ( status == null ) throw new Error ( _STR ) ; OutputStream out = mySocket . getOutputStream ( ) ; PrintWriter pw = new PrintWriter ( out ) ; pw . print ( _STR + status + _STR ) ; if ( mime != null ) pw . print ( _STR + mime + _STR ) ; if ( header == null || header . getProperty ( _STR ) == null ) pw . print ( _STR + gmtFrmt . format ( new Date ( ) ) + _STR ) ; if ( header != null ) { Enumeration e = header . keys ( ) ; while ( e . hasMoreElements ( ) ) { String key = ( String ) e . nextElement ( ) ; String value = header . getProperty ( key ) ; pw . print ( key + _STR + value + _STR ) ; } } pw . print ( _STR ) ; pw . flush ( ) ; if ( data != null ) { byte [ ] buff = new byte [ _NUM ] ; while ( _BOOL ) { int read = data . read ( buff , _NUM , _NUM ) ; if ( read <= _NUM ) break ; out . write ( buff , _NUM , read ) ; } } out . flush ( ) ; out . close ( ) ; if ( data != null ) data . close ( ) ; } catch ( IOException ioe ) { try { mySocket . close ( ) ; } catch ( Throwable t ) { } } }
public static String decode ( String encoded , AMEncryption encr ) { if ( checkCaller ( ) ) { try { ISSecurityPermission isp = new ISSecurityPermission ( _STR , _STR ) ; if ( securityManager != null ) { securityManager . checkPermission ( isp ) ; } } catch ( SecurityException e ) { Debug debug = Debug . getInstance ( _STR ) ; debug . error ( _STR + _STR , e ) ; return null ; } } if ( encoded == null || encoded . length ( ) == _NUM ) { return ( null ) ; } byte [ ] encData = null ; encData = Base64 . decode ( encoded . trim ( ) ) ; if ( encData == null ) { return null ; } byte [ ] rawData = encr . decrypt ( encData ) ; if ( rawData == null ) { return ( null ) ; } String answer = null ; try { answer = new String ( rawData , _STR ) ; } catch ( UnsupportedEncodingException uue ) { Debug debug = Debug . getInstance ( _STR ) ; debug . error ( _STR , uue ) ; answer = new String ( rawData ) ; } return ( answer ) ; }
protected void waitForShutdownSignal ( ) throws InterruptedException { if ( mutexWaiting == null ) mutexWaiting = new Object ( ) ; try { synchronized ( mutexWaiting ) { mutexWaiting . wait ( ) ; } } catch ( InterruptedException e ) { if ( ! shutdown ) throw e ; } }
public void addConnection ( Connection connection ) { if ( connection == null ) throw new IllegalArgumentException ( _STR ) ; synchronized ( connectionsLock ) { Connection [ ] newConnections = new Connection [ connections . length + _NUM ] ; newConnections [ _NUM ] = connection ; System . arraycopy ( connections , _NUM , newConnections , _NUM , connections . length ) ; connections = newConnections ; } connection . addListener ( invokeListener ) ; if ( TRACE ) trace ( _STR , _STR + connection ) ; }
public double distance ( Point2D pt ) { final double x_distance = ( pt . getX ( ) - x ) * ( pt . getX ( ) - x ) ; final double y_distance = ( pt . getY ( ) - y ) * ( pt . getY ( ) - y ) ; return Math . sqrt ( x_distance + y_distance ) ; }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( _STR ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
private static int convertToInt ( String value , int defaultValue ) { String trim = value . trim ( ) ; if ( trim . length ( ) == _NUM ) { return defaultValue ; } return Integer . parseInt ( trim ) ; }
public ChainIterable < T > addItem ( @ NotNull T item ) { return ( ChainIterable < T > ) super . add ( Collections . < T > singleton ( item ) ) ; }
private void updateStateView ( int itCount , Collection < Individual < Double > > gen ) { Platform . runLater ( null ) ; simPaneCtrl . waitAfterStep ( ) ; }
@ Override public void run ( ) { try { for ( ; ; ) { int n = portGetn ( port , bufferAddress , MAX_EVENT_COUNT ) ; assert n > _NUM ; long address = bufferAddress ; for ( int i = _NUM ; i < n ; i ++ ) { boolean shutdown = processEvent ( address ) ; if ( shutdown ) return ; address += SIZEOF_PORT_EVENT ; } } } catch ( UnixException x ) { x . printStackTrace ( ) ; } }
@ Override public List < String > allKeys ( ) { List < String > nameFiles = new ArrayList < > ( ) ; File [ ] files = cacheDirectory . listFiles ( ) ; if ( files == null ) return nameFiles ; for ( File file : files ) { if ( file . isFile ( ) ) { nameFiles . add ( file . getName ( ) ) ; } } return nameFiles ; }
public DialogueRecorder ( DialogueSystem system ) { this . settings = system . getSettings ( ) ; }
private String generateUniqueFutureId ( ) { return String . valueOf ( mIdCounter . getAndIncrement ( ) ) ; }
private static final void rescheduleMissedAlarms ( ContentResolver cr , Context context , AlarmManagerInterface manager ) { long now = System . currentTimeMillis ( ) ; long ancient = now - DateUtils . DAY_IN_MILLIS ; String [ ] projection = new String [ ] { CalendarContract . CalendarAlerts . ALARM_TIME } ; if ( Build . VERSION . SDK_INT >= _NUM && ContextCompat . checkSelfPermission ( context , Manifest . permission . READ_CALENDAR ) != PackageManager . PERMISSION_GRANTED ) { Log . d ( TAG , _STR ) ; return ; } Cursor cursor = cr . query ( CalendarAlerts . CONTENT_URI , projection , WHERE_RESCHEDULE_MISSED_ALARMS , ( new String [ ] { Long . toString ( now ) , Long . toString ( ancient ) , Long . toString ( now ) } ) , SORT_ORDER_ALARMTIME_ASC ) ; if ( cursor == null ) { return ; } if ( DEBUG ) { Log . d ( TAG , _STR + cursor . getCount ( ) ) ; } try { long alarmTime = - _NUM ; while ( cursor . moveToNext ( ) ) { long newAlarmTime = cursor . getLong ( _NUM ) ; if ( alarmTime != newAlarmTime ) { if ( DEBUG ) { Log . w ( TAG , _STR + newAlarmTime ) ; } AlertUtils . scheduleAlarm ( context , manager , newAlarmTime ) ; alarmTime = newAlarmTime ; } } } finally { cursor . close ( ) ; } }
public void addName ( String name ) { m_names . add ( name ) ; }
@ Override default CompletableFuture < OptionalDouble > minDouble ( final ToDoubleFunction < ? super T > fn ) { return CompletableFuture . supplyAsync ( null , getExec ( ) ) ; }
private boolean toState ( LifecycleState newState ) { LifecycleState state ; synchronized ( this ) { state = _state ; _state = newState ; _lastChangeTime = CurrentTime . currentTime ( ) ; } if ( _log != null && _log . isLoggable ( _lowLevel ) ) { _log . log ( _lowLevel , newState + _STR + _name ) ; } notifyListeners ( state , newState ) ; return _BOOL ; }
public boolean initDialog ( ) { log . config ( _STR ) ; gbc . anchor = GridBagConstraints . NORTHWEST ; gbc . weightx = _NUM ; gbc . weighty = _NUM ; gbc . gridy = m_line ++ ; gbc . gridx = _NUM ; gbc . gridwidth = _NUM ; gbc . insets = nullInset ; gbc . fill = GridBagConstraints . HORIZONTAL ; centerPanel . add ( Box . createVerticalStrut ( _NUM ) , gbc ) ; MClient client = MClient . get ( Env . getCtx ( ) ) ; String ASPFilter = _STR ; if ( client . isUseASP ( ) ) ASPFilter = _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR ; String sql = null ; if ( Env . isBaseLanguage ( Env . getCtx ( ) , _STR ) ) sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + ASPFilter + _STR ; else sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + Env . getAD_Language ( Env . getCtx ( ) ) + _STR + _STR + ASPFilter + _STR ; boolean hasFields = _BOOL ; try { PreparedStatement pstmt = DB . prepareStatement ( sql , null ) ; pstmt . setInt ( _NUM , m_processInfo . getAD_Process_ID ( ) ) ; ResultSet rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { hasFields = _BOOL ; createField ( rs ) ; } rs . close ( ) ; pstmt . close ( ) ; } catch ( SQLException e ) { log . log ( Level . SEVERE , sql , e ) ; } if ( m_mFields . size ( ) != m_mFields2 . size ( ) || m_mFields . size ( ) != m_vEditors . size ( ) || m_mFields2 . size ( ) != m_vEditors2 . size ( ) ) log . log ( Level . SEVERE , _STR ) ; if ( hasFields ) { gbc . gridy = m_line ++ ; centerPanel . add ( Box . createVerticalStrut ( _NUM ) , gbc ) ; gbc . gridx = _NUM ; centerPanel . add ( Box . createHorizontalStrut ( _NUM ) , gbc ) ; AEnv . positionCenterWindow ( m_frame , this ) ; } else dispose ( ) ; return hasFields ; }
@ Override protected String dateToString ( DateTimeData date ) { StringBuffer message = new StringBuffer ( _NUM ) ; message . append ( _STR ) ; message . append ( _STR ) ; append ( message , date . month , _NUM ) ; append ( message , ( char ) date . utc , _NUM ) ; return message . toString ( ) ; }
private void addTest ( Test newTest ) { if ( m_RuleList == null ) { m_RuleList = new ArrayList < Test > ( ) ; } m_RuleList . add ( newTest ) ; }
public double nextDouble ( double alpha , double lambda ) { double a = alpha ; double aa = - _NUM , aaa = - _NUM , b = _NUM , c = _NUM , d = _NUM , e , r , s = _NUM , si = _NUM , ss = _NUM , q0 = _NUM , q1 = _NUM , q2 = _NUM , q3 = _NUM , q4 = _NUM , q5 = - _NUM , q6 = _NUM , q7 = _NUM , q8 = - _NUM , q9 = _NUM , a1 = _NUM , a2 = - _NUM , a3 = _NUM , a4 = - _NUM , a5 = _NUM , a6 = - _NUM , a7 = _NUM , a8 = - _NUM , a9 = _NUM , e1 = _NUM , e2 = _NUM , e3 = _NUM , e4 = _NUM , e5 = _NUM , e6 = _NUM , e7 = _NUM ; double gds , p , q , t , sign_u , u , v , w , x ; double v1 , v2 , v12 ; if ( a <= _NUM ) throw new IllegalArgumentException ( ) ; if ( lambda <= _NUM ) new IllegalArgumentException ( ) ; if ( a < _NUM ) { b = _NUM + _NUM * a ; for ( ; ; ) { p = b * randomGenerator . raw ( ) ; if ( p <= _NUM ) { gds = Math . exp ( Math . log ( p ) / a ) ; if ( Math . log ( randomGenerator . raw ( ) ) <= - gds ) return ( gds / lambda ) ; } else { gds = - Math . log ( ( b - p ) / a ) ; if ( Math . log ( randomGenerator . raw ( ) ) <= ( ( a - _NUM ) * Math . log ( gds ) ) ) return ( gds / lambda ) ; } } } else { if ( a != aa ) { aa = a ; ss = a - _NUM ; s = Math . sqrt ( ss ) ; d = _NUM - _NUM * s ; } do { v1 = _NUM * randomGenerator . raw ( ) - _NUM ; v2 = _NUM * randomGenerator . raw ( ) - _NUM ; v12 = v1 * v1 + v2 * v2 ; } while ( v12 > _NUM ) ; t = v1 * Math . sqrt ( - _NUM * Math . log ( v12 ) / v12 ) ; x = s + _NUM * t ; gds = x * x ; if ( t >= _NUM ) return ( gds / lambda ) ; u = randomGenerator . raw ( ) ; if ( d * u <= t * t * t ) return ( gds / lambda ) ; if ( a != aaa ) { aaa = a ; r = _NUM / a ; q0 = ( ( ( ( ( ( ( ( q9 * r + q8 ) * r + q7 ) * r + q6 ) * r + q5 ) * r + q4 ) * r + q3 ) * r + q2 ) * r + q1 ) * r ; if ( a > _NUM ) { if ( a > _NUM ) { b = _NUM ; si = _NUM ; c = _NUM / s ; } else { b = _NUM + _NUM * ss ; si = _NUM / s + _NUM ; c = _NUM / s + _NUM ; } } else { b = _NUM + s - _NUM * ss ; si = _NUM ; c = _NUM / s - _NUM + _NUM * s ; } } if ( x > _NUM ) { v = t / ( s + s ) ; if ( Math . abs ( v ) > _NUM ) { q = q0 - s * t + _NUM * t * t + ( ss + ss ) * Math . log ( _NUM + v ) ; } else { q = q0 + _NUM * t * t * ( ( ( ( ( ( ( ( a9 * v + a8 ) * v + a7 ) * v + a6 ) * v + a5 ) * v + a4 ) * v + a3 ) * v + a2 ) * v + a1 ) * v ; } if ( Math . log ( _NUM - u ) <= q ) return ( gds / lambda ) ; } for ( ; ; ) { do { e = - Math . log ( randomGenerator . raw ( ) ) ; u = randomGenerator . raw ( ) ; u = u + u - _NUM ; sign_u = ( u > _NUM ) ? _NUM : - _NUM ; t = b + ( e * si ) * sign_u ; } while ( t <= - _NUM ) ; v = t / ( s + s ) ; if ( Math . abs ( v ) > _NUM ) { q = q0 - s * t + _NUM * t * t + ( ss + ss ) * Math . log ( _NUM + v ) ; } else { q = q0 + _NUM * t * t * ( ( ( ( ( ( ( ( a9 * v + a8 ) * v + a7 ) * v + a6 ) * v + a5 ) * v + a4 ) * v + a3 ) * v + a2 ) * v + a1 ) * v ; } if ( q <= _NUM ) continue ; if ( q > _NUM ) { w = Math . exp ( q ) - _NUM ; } else { w = ( ( ( ( ( ( e7 * q + e6 ) * q + e5 ) * q + e4 ) * q + e3 ) * q + e2 ) * q + e1 ) * q ; } if ( c * u * sign_u <= w * Math . exp ( e - _NUM * t * t ) ) { x = s + _NUM * t ; return ( x * x / lambda ) ; } } } }
public void swap ( int i , int j ) { x . assertTrue ( i < list . size ( ) ) ; x . assertTrue ( j < list . size ( ) ) ; list . set ( i , list . set ( j , list . get ( i ) ) ) ; }
private List < NameValuePair > buildIPTParameters ( Ipt ipt , String organisationKey ) { List < NameValuePair > data = new ArrayList < NameValuePair > ( ) ; if ( ipt != null && organisationKey != null ) { data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( organisationKey ) ) ) ; data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( ipt . getName ( ) ) ) ) ; data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( ipt . getDescription ( ) ) ) ) ; data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( ipt . getPrimaryContactType ( ) ) ) ) ; data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( ipt . getPrimaryContactName ( ) ) ) ) ; data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( ipt . getPrimaryContactEmail ( ) ) ) ) ; data . add ( new BasicNameValuePair ( _STR , SERVICE_TYPE_RSS ) ) ; data . add ( new BasicNameValuePair ( _STR , getRssFeedURL ( ) ) ) ; } else { log . debug ( _STR ) ; } return data ; }
public static < T , U extends Closeable > T withCloseable ( U self , @ ClosureParams ( value = FirstParam . class ) Closure < T > action ) throws IOException { try { T result = action . call ( self ) ; Closeable temp = self ; self = null ; temp . close ( ) ; return result ; } finally { DefaultGroovyMethodsSupport . closeWithWarning ( self ) ; } }
public static boolean isMatch ( String actualString , LinkedList patterns , char wildCard ) { boolean matched = _BOOL ; for ( ListIterator iter = patterns . listIterator ( _NUM ) ; iter . hasNext ( ) ; ) { if ( isMatch ( actualString , ( String ) iter . next ( ) , wildCard ) ) { matched = _BOOL ; break ; } } return matched ; }
public synchronized void addServer ( ServerLocation location , String [ ] groups , ServerLoad initialLoad , long loadPollInterval ) { serverGroupMap . put ( location , groups ) ; LoadHolder connectionLoad = new LoadHolder ( location , initialLoad . getConnectionLoad ( ) , initialLoad . getLoadPerConnection ( ) , loadPollInterval ) ; addGroups ( connectionLoadMap , groups , connectionLoad ) ; LoadHolder queueLoad = new LoadHolder ( location , initialLoad . getSubscriptionConnectionLoad ( ) , initialLoad . getLoadPerSubscriptionConnection ( ) , loadPollInterval ) ; addGroups ( queueLoadMap , groups , queueLoad ) ; updateLoad ( location , initialLoad ) ; }
public void addLeaf ( CatalogTreeLeaf leaf ) { _leaves . add ( leaf ) ; }
private static String stampToString ( long tstamp , String formatMask ) { StringBuilder sb = new StringBuilder ( _NUM ) ; Formatter fmt = new Formatter ( sb , Locale . US ) ; int [ ] pieces = new int [ NUMIDX ] ; ComponentTime . unpackBits ( tstamp , pieces ) ; fmt . format ( formatMask , pieces [ YIDX ] , pieces [ MIDX ] , pieces [ DIDX ] , pieces [ HIDX ] , pieces [ IIDX ] , pieces [ SIDX ] , pieces [ UIDX ] ) ; fmt . close ( ) ; return ( sb . toString ( ) ) ; }
public HttpRequest contentLength ( final String value ) { return contentLength ( Integer . parseInt ( value ) ) ; }
public boolean draw ( Canvas canvas ) { update ( ) ; final float centerX = mBounds . centerX ( ) ; final float centerY = mBounds . height ( ) - mRadius ; canvas . scale ( _NUM , Math . min ( mGlowScaleY , _NUM ) * mBaseGlowScale , centerX , _NUM ) ; final float displacement = Math . max ( _NUM , Math . min ( mDisplacement , _NUM ) ) - _NUM ; float translateX = mBounds . width ( ) * displacement / _NUM ; mPaint . setAlpha ( ( int ) ( _NUM * mGlowAlpha ) ) ; canvas . drawCircle ( centerX + translateX , centerY , mRadius , mPaint ) ; boolean oneLastFrame = _BOOL ; if ( mState == STATE_RECEDE && mGlowScaleY == _NUM ) { mState = STATE_IDLE ; oneLastFrame = _BOOL ; } return mState != STATE_IDLE || oneLastFrame ; }
public VNXeCommandJob modifyLunAsync ( LunModifyParam param , String resourceId ) { StringBuilder urlBld = new StringBuilder ( URL_RESOURCE ) ; urlBld . append ( resourceId ) ; urlBld . append ( URL_LUN_MODIFY_ACTION ) ; _url = urlBld . toString ( ) ; return postRequestAsync ( param ) ; }
public String replace ( CharSequence target , CharSequence replacement ) { if ( target == null ) { throw new NullPointerException ( _STR ) ; } if ( replacement == null ) { throw new NullPointerException ( _STR ) ; } String ts = target . toString ( ) ; int index = indexOf ( ts , _NUM ) ; if ( index == - _NUM ) return this ; String rs = replacement . toString ( ) ; StringBuilder buffer = new StringBuilder ( count ) ; int tl = target . length ( ) ; int tail = _NUM ; do { buffer . append ( value , offset + tail , index - tail ) ; buffer . append ( rs ) ; tail = index + tl ; } while ( ( index = indexOf ( ts , tail ) ) != - _NUM ) ; buffer . append ( value , offset + tail , count - tail ) ; return buffer . toString ( ) ; }
public void delete ( ) throws IOException { close ( ) ; deleteContents ( directory ) ; }
public boolean similarTo ( Object o ) { if ( o == null ) { return _BOOL ; } if ( ! ( o instanceof SemanticConcept ) ) { return _BOOL ; } SemanticConcept otherConcept = ( SemanticConcept ) o ; HashSet < Integer > synset_intersection = new HashSet < Integer > ( this . synsets ) ; synset_intersection . retainAll ( otherConcept . synsets ) ; if ( ! synset_intersection . isEmpty ( ) ) { return _BOOL ; } HashSet < String > concept_intersection = new HashSet < String > ( this . concepts ) ; concept_intersection . retainAll ( otherConcept . concepts ) ; return ! concept_intersection . isEmpty ( ) ; }
public void jGoogleAnalyticsTracker ( final String eventType , final String version , final String trackerId ) { final JGoogleAnalyticsTracker tracker = new JGoogleAnalyticsTracker ( _STR , version , trackerId ) ; final FocusPoint focusPoint = new FocusPoint ( eventType . toLowerCase ( ) ) ; tracker . trackAsynchronously ( focusPoint ) ; }
protected final Tuple addInternal ( Tuple t ) { if ( m_tuples . add ( t ) ) { return t ; } else { return null ; } }
public void put ( Song song ) { if ( ! mSongs . contains ( song ) ) { mSongs . add ( song ) ; } }
@ NotNull public PsiQuery childrenNamed ( @ NotNull final Class < ? extends PsiNamedElement > clazz , @ NotNull final String name ) { final List < PsiElement > result = new ArrayList < PsiElement > ( ) ; for ( final PsiElement element : myPsiElements ) { for ( final PsiNamedElement child : PsiTreeUtil . findChildrenOfType ( element , clazz ) ) { if ( name . equals ( child . getName ( ) ) ) { result . add ( child ) ; } } } return new PsiQuery ( result . toArray ( new PsiElement [ result . size ( ) ] ) ) ; }
private void emitMapPut ( Method method , String fieldName , StringBuilder builder ) { builder . append ( _STR ) ; builder . append ( getMapPutterName ( fieldName ) ) ; builder . append ( _STR ) ; builder . append ( getTypeArgumentImplName ( ( ParameterizedType ) method . getGenericReturnType ( ) , _NUM ) ) ; builder . append ( _STR ) ; builder . append ( getEnsureName ( fieldName ) ) ; builder . append ( _STR ) ; builder . append ( fieldName ) ; builder . append ( _STR ) ; builder . append ( _STR ) ; }
@ Override public boolean equals ( Object o ) { return o . hashCode ( ) == hashCode ( ) ; }
@ Override public String toString ( ) { if ( getUserObject ( ) instanceof TvShow ) { TvShow tvShow = ( TvShow ) getUserObject ( ) ; return tvShow . getTitle ( ) ; } return super . toString ( ) ; }
private ArrayList < String > parseJson ( String text ) { text = text . substring ( text . indexOf ( _STR ) + SIZE_OF_EVENTS , text . indexOf ( _STR ) ) ; ArrayList < String > events = new ArrayList < String > ( ) ; if ( text . isEmpty ( ) ) { return events ; } int startIndex = _NUM , endIndex = _NUM ; while ( endIndex != - _NUM ) { endIndex = text . indexOf ( _STR , startIndex + DELIMITER_SIZE ) ; String eventText = ( endIndex == - _NUM ? text . substring ( startIndex ) : text . substring ( startIndex , endIndex ) ) ; Pattern pattern = Pattern . compile ( _STR ) ; Matcher matcher = pattern . matcher ( eventText ) ; eventText = matcher . replaceAll ( _STR ) ; pattern = Pattern . compile ( _STR ) ; matcher = pattern . matcher ( eventText ) ; if ( matcher . find ( ) ) { eventText = matcher . replaceFirst ( matcher . group ( _NUM ) + _STR ) ; } eventText = _STR + eventText ; startIndex = endIndex + _NUM ; events . add ( eventText ) ; } Collections . reverse ( events ) ; return events ; }
@ Override public void removeTableModelListener ( TableModelListener l ) { m_Listeners . remove ( l ) ; }
public StrBuilder replace ( int startIndex , int endIndex , String replaceStr ) { endIndex = validateRange ( startIndex , endIndex ) ; int insertLen = ( replaceStr == null ? _NUM : replaceStr . length ( ) ) ; replaceImpl ( startIndex , endIndex , endIndex - startIndex , replaceStr , insertLen ) ; return this ; }
public static void addPermissionRecursive ( Path path , PosixFilePermission permission ) throws IOException { changePermissionsRecursive ( path , PermissionChange . ADD , Collections . singleton ( permission ) ) ; }
private void runTimeoutTask ( ) { while ( isActive ( ) ) { reapTimeouts ( ) ; try { Thread . sleep ( _timeoutReapInterval ) ; } catch ( Exception e ) { } } }
public IDevice learnEntity ( long macAddress , Short vlan , Integer ipv4Address , Long switchDPID , Integer switchPort , boolean processUpdates ) { List < IDeviceListener > listeners = deviceListeners . getOrderedListeners ( ) ; if ( ! processUpdates ) { deviceListeners . clearListeners ( ) ; } VlanVid v ; IPv4Address i ; DatapathId d ; OFPort p ; if ( vlan != null && vlan . shortValue ( ) <= _NUM ) vlan = null ; if ( ipv4Address != null && ipv4Address == _NUM ) ipv4Address = null ; if ( vlan == null ) { v = VlanVid . ofVlan ( - _NUM ) ; } else { v = VlanVid . ofVlan ( vlan ) ; } if ( ipv4Address == null ) { i = IPv4Address . NONE ; } else { i = IPv4Address . of ( ipv4Address ) ; } if ( switchDPID == null ) { d = DatapathId . of ( _NUM ) ; } else { d = DatapathId . of ( switchDPID . longValue ( ) ) ; } if ( switchPort == null ) { p = OFPort . ZERO ; } else { p = OFPort . of ( switchPort ) ; } IDevice res = learnDeviceByEntity ( new Entity ( MacAddress . of ( macAddress ) , v , i , d , p , new Date ( ) ) ) ; if ( listeners != null ) { for ( IDeviceListener listener : listeners ) { deviceListeners . addListener ( _STR , listener ) ; } } return res ; }
public static boolean isValidTypeSignature ( String sig , boolean allowVoid ) { int len = sig . length ( ) ; return checkTypeSignature ( sig , _NUM , len , allowVoid ) == len ; }
public void testCase19 ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , - _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . remainder ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public static boolean hasVisibleChildren ( ActionGroup group , PresentationFactory factory , ActionManager actionManager , PerspectiveManager perspectiveManager ) { ActionEvent event = new ActionEvent ( factory . getPresentation ( group ) , actionManager , perspectiveManager ) ; for ( Action anAction : group . getChildren ( event ) ) { if ( anAction == null ) { Log . error ( Utils . class , _STR + group + _STR + factory . getPresentation ( group ) ) ; continue ; } if ( anAction instanceof Separator ) { continue ; } final Presentation presentation = factory . getPresentation ( anAction ) ; anAction . update ( new ActionEvent ( presentation , actionManager , perspectiveManager ) ) ; if ( anAction instanceof ActionGroup ) { ActionGroup childGroup = ( ActionGroup ) anAction ; if ( childGroup . isPopup ( ) ) { if ( ! presentation . isVisible ( ) ) { continue ; } } if ( hasVisibleChildren ( childGroup , factory , actionManager , perspectiveManager ) ) { return _BOOL ; } } else if ( presentation . isVisible ( ) ) { return _BOOL ; } } return _BOOL ; }
private static void checkArgReferences ( String typeSnippet , int numberOfArgs ) { Matcher argRefMatcher = ARG_REF_PATTERN . matcher ( typeSnippet ) ; while ( argRefMatcher . find ( ) ) { int index = Integer . parseInt ( argRefMatcher . group ( _NUM ) , _NUM ) - _NUM ; Preconditions . checkArgument ( index >= _NUM , _STR , argRefMatcher . group ( _NUM ) ) ; Preconditions . checkArgument ( index < numberOfArgs , _STR , argRefMatcher . group ( _NUM ) ) ; } }
public void randomize ( ) { randomizeIncomingWeights ( ) ; normalizeIncomingWeights ( ) ; }
public static void saveAsImage ( int x , int y , int width , int height , String path , CompressFormat compressFormat , int quality ) throws FileNotFoundException { Bitmap bmp = getPixelsFromBuffer ( x , y , width , height ) ; try { File file = new File ( path ) ; try { file . createNewFile ( ) ; } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } FileOutputStream fos = new FileOutputStream ( file ) ; bmp . compress ( compressFormat , quality , fos ) ; try { fos . flush ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } try { fos . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } catch ( FileNotFoundException e ) { throw ( e ) ; } }
private boolean isFileValid ( File file , String methodName ) { if ( file == null ) { Log . printConcatLine ( name , _STR , methodName , _STR ) ; return _BOOL ; } String fileName = file . getName ( ) ; if ( fileName == null || fileName . length ( ) == _NUM ) { Log . printConcatLine ( name , _STR + methodName , _STR ) ; return _BOOL ; } return _BOOL ; }
public void removeSrcClass ( SootClass clz ) { srcClasses . remove ( clz . getName ( ) ) ; }
private void updateRange ( double value ) { mMinValue = Math . min ( mMinValue , value ) ; mMaxValue = Math . max ( mMaxValue , value ) ; }
JSONStringer close ( Scope empty , Scope nonempty , String closeBracket ) throws JSONException { Scope context = peek ( ) ; if ( context != nonempty && context != empty ) { throw new JSONException ( _STR ) ; } stack . remove ( stack . size ( ) - _NUM ) ; if ( context == nonempty ) { newline ( ) ; } out . append ( closeBracket ) ; return this ; }
public void append ( byte [ ] bytes ) { append ( bytes , _NUM , bytes . length ) ; }
public static boolean enoughSpaceOnPhone ( long updateSize ) { return getRealSizeOnPhone ( ) > updateSize ; }
public void cancelButtonActionPerformed ( ) { editMode = _BOOL ; curNode = null ; addButton . setVisible ( _BOOL ) ; editButton . setVisible ( _BOOL ) ; deleteButton . setVisible ( _BOOL ) ; doneButton . setVisible ( _BOOL ) ; updateButton . setVisible ( _BOOL ) ; cancelButton . setVisible ( _BOOL ) ; nodeAddrField . setVisible ( _BOOL ) ; nodeAddrStatic . setVisible ( _BOOL ) ; statusText1 . setText ( stdStatus1 ) ; statusText2 . setText ( stdStatus2 ) ; statusText3 . setText ( stdStatus3 ) ; }
public void addAttribute ( AttributedCharacterIterator . Attribute attribute , Object value ) { if ( attribute == null ) { throw new NullPointerException ( _STR ) ; } if ( text . isEmpty ( ) ) { throw new IllegalArgumentException ( _STR ) ; } List < Range > ranges = attributeMap . get ( attribute ) ; if ( ranges == null ) { ranges = new ArrayList < Range > ( _NUM ) ; attributeMap . put ( attribute , ranges ) ; } else { ranges . clear ( ) ; } ranges . add ( new Range ( _NUM , text . length ( ) , value ) ) ; }
private Object stringToValue ( Object oldValue , String newValue ) throws ReplicatorException { if ( oldValue instanceof String ) { return newValue ; } else if ( oldValue instanceof Integer ) { return Integer . valueOf ( newValue ) ; } else if ( oldValue instanceof SerialBlob ) { try { return DatabaseHelper . getSafeBlob ( newValue . getBytes ( ) ) ; } catch ( SQLException e ) { throw new ReplicatorException ( _STR + e , e ) ; } } else { return newValue ; } }
public void addNodesInDocOrder ( DTMIterator iterator , XPathContext support ) { if ( ! m_mutable ) throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NODESETDTM_NOT_MUTABLE , null ) ) ; int node ; while ( DTM . NULL != ( node = iterator . nextNode ( ) ) ) { addNodeInDocOrder ( node , support ) ; } }
public String toZString ( ) { StringBuilder buffer = new StringBuilder ( _NUM ) ; try { printZ ( buffer ) ; } catch ( IOException e ) { throw new RuntimeException ( _STR , e ) ; } return buffer . toString ( ) ; }
public TrieDictionary < T > build ( int baseId ) { byte [ ] trieBytes = buildTrieBytes ( baseId ) ; TrieDictionary < T > r = new TrieDictionary < T > ( trieBytes ) ; return r ; }
public void recordState ( DialogueState state , String name ) { states . put ( name , state ) ; if ( ! listModel . contains ( name ) ) { int position = name . contains ( CURRENT ) ? _NUM : Math . min ( _NUM , listModel . size ( ) ) ; listModel . add ( position , name ) ; } }
public int writeUTF8 ( final CharSequence chars , int off , int len ) { if ( len > remaining ( ) ) { return writeUTF8Slow ( chars , off , len ) ; } final Block block = current ; int limit = block . limit ; char ch = _STR ; int octets = _NUM ; while ( len > _NUM ) { ch = chars . charAt ( off ) ; if ( ch >= UTF8_2_OCTET_MIN_VALUE ) { break ; } block . data [ limit ++ ] = ( byte ) ch ; octets ++ ; off ++ ; len -- ; } block . limit = limit ; if ( len > _NUM ) { if ( ch < UTF8_3_OCTET_MIN_VALUE ) { return octets + writeUTF8UpTo2Byte ( chars , off , len ) ; } if ( ch >= LOW_SURROGATE_FIRST && ch <= LOW_SURROGATE_LAST ) { throw new IllegalArgumentException ( _STR + ch ) ; } if ( ch >= HIGH_SURROGATE_FIRST && ch <= HIGH_SURROGATE_LAST ) { return octets + writeUTF8Slow ( chars , off , len ) ; } return octets + writeUTF8UpTo3Byte ( chars , off , len ) ; } return octets ; }
public GeoServerWPSClient ( GeoServerConnection connection ) { this . connection = connection ; }
protected ConnectionStateSSLv3 ( SSLSessionImpl session ) { try { CipherSuite cipherSuite = session . cipherSuite ; boolean is_exportabe = cipherSuite . isExportable ( ) ; hash_size = cipherSuite . getMACLength ( ) ; int key_size = ( is_exportabe ) ? cipherSuite . keyMaterial : cipherSuite . expandedKeyMaterial ; int iv_size = cipherSuite . ivSize ; block_size = cipherSuite . getBlockSize ( ) ; String algName = cipherSuite . getBulkEncryptionAlgorithm ( ) ; String hashName = cipherSuite . getHashName ( ) ; if ( logger != null ) { logger . println ( _STR ) ; logger . println ( _STR + session . getCipherSuite ( ) ) ; logger . println ( _STR + algName ) ; logger . println ( _STR + hashName ) ; logger . println ( _STR + hash_size ) ; logger . println ( _STR + block_size ) ; logger . println ( _STR + iv_size ) ; logger . println ( _STR + key_size ) ; } byte [ ] clientRandom = session . clientRandom ; byte [ ] serverRandom = session . serverRandom ; byte [ ] key_block = new byte [ _NUM * hash_size + _NUM * key_size + _NUM * iv_size ] ; byte [ ] seed = new byte [ clientRandom . length + serverRandom . length ] ; System . arraycopy ( serverRandom , _NUM , seed , _NUM , serverRandom . length ) ; System . arraycopy ( clientRandom , _NUM , seed , serverRandom . length , clientRandom . length ) ; PRF . computePRF_SSLv3 ( key_block , session . master_secret , seed ) ; byte [ ] client_mac_secret = new byte [ hash_size ] ; byte [ ] server_mac_secret = new byte [ hash_size ] ; byte [ ] client_key = new byte [ key_size ] ; byte [ ] server_key = new byte [ key_size ] ; boolean is_client = ! session . isServer ; System . arraycopy ( key_block , _NUM , client_mac_secret , _NUM , hash_size ) ; System . arraycopy ( key_block , hash_size , server_mac_secret , _NUM , hash_size ) ; System . arraycopy ( key_block , _NUM * hash_size , client_key , _NUM , key_size ) ; System . arraycopy ( key_block , _NUM * hash_size + key_size , server_key , _NUM , key_size ) ; IvParameterSpec clientIV = null ; IvParameterSpec serverIV = null ; if ( is_exportabe ) { if ( logger != null ) { logger . println ( _STR ) ; } MessageDigest md5 = MessageDigest . getInstance ( _STR ) ; md5 . update ( client_key ) ; md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; client_key = md5 . digest ( ) ; md5 . update ( server_key ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; server_key = md5 . digest ( ) ; key_size = cipherSuite . expandedKeyMaterial ; if ( block_size != _NUM ) { md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; clientIV = new IvParameterSpec ( md5 . digest ( ) , _NUM , iv_size ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; serverIV = new IvParameterSpec ( md5 . digest ( ) , _NUM , iv_size ) ; } } else if ( block_size != _NUM ) { clientIV = new IvParameterSpec ( key_block , _NUM * hash_size + _NUM * key_size , iv_size ) ; serverIV = new IvParameterSpec ( key_block , _NUM * hash_size + _NUM * key_size + iv_size , iv_size ) ; } if ( logger != null ) { logger . println ( _STR + is_exportabe ) ; logger . println ( _STR ) ; logger . print ( session . master_secret ) ; logger . println ( _STR ) ; logger . print ( clientRandom ) ; logger . println ( _STR ) ; logger . print ( serverRandom ) ; logger . println ( _STR ) ; logger . print ( client_mac_secret ) ; logger . println ( _STR ) ; logger . print ( server_mac_secret ) ; logger . println ( _STR ) ; logger . print ( client_key , _NUM , key_size ) ; logger . println ( _STR ) ; logger . print ( server_key , _NUM , key_size ) ; if ( clientIV != null ) { logger . println ( _STR ) ; logger . print ( clientIV . getIV ( ) ) ; logger . println ( _STR ) ; logger . print ( serverIV . getIV ( ) ) ; } else { logger . println ( _STR ) ; } } if ( algName == null ) { encCipher = new NullCipher ( ) ; decCipher = new NullCipher ( ) ; } else { encCipher = Cipher . getInstance ( algName ) ; decCipher = Cipher . getInstance ( algName ) ; if ( is_client ) { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( client_key , _NUM , key_size , algName ) , clientIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( server_key , _NUM , key_size , algName ) , serverIV ) ; } else { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( server_key , _NUM , key_size , algName ) , serverIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( client_key , _NUM , key_size , algName ) , clientIV ) ; } } messageDigest = MessageDigest . getInstance ( hashName ) ; if ( is_client ) { mac_write_secret = client_mac_secret ; mac_read_secret = server_mac_secret ; } else { mac_write_secret = server_mac_secret ; mac_read_secret = client_mac_secret ; } if ( hashName . equals ( _STR ) ) { pad_1 = SSLv3Constants . MD5pad1 ; pad_2 = SSLv3Constants . MD5pad2 ; } else { pad_1 = SSLv3Constants . SHApad1 ; pad_2 = SSLv3Constants . SHApad2 ; } } catch ( Exception e ) { e . printStackTrace ( ) ; throw new AlertException ( AlertProtocol . INTERNAL_ERROR , new SSLProtocolException ( _STR ) ) ; } }
static boolean verifyZipFile ( File file ) { try { ZipFile zipFile = new ZipFile ( file ) ; try { zipFile . close ( ) ; return _BOOL ; } catch ( IOException e ) { Log . w ( TAG , _STR + file . getAbsolutePath ( ) ) ; } } catch ( ZipException ex ) { Log . w ( TAG , _STR + file . getAbsolutePath ( ) + _STR , ex ) ; } catch ( IOException ex ) { Log . w ( TAG , _STR + file . getAbsolutePath ( ) , ex ) ; } return _BOOL ; }
long cleanup ( long now ) { int inUseConnectionCount = _NUM ; int idleConnectionCount = _NUM ; RealConnection longestIdleConnection = null ; long longestIdleDurationNs = Long . MIN_VALUE ; synchronized ( this ) { for ( Iterator < RealConnection > i = connections . iterator ( ) ; i . hasNext ( ) ; ) { RealConnection connection = i . next ( ) ; if ( pruneAndGetAllocationCount ( connection , now ) > _NUM ) { inUseConnectionCount ++ ; continue ; } idleConnectionCount ++ ; long idleDurationNs = now - connection . idleAtNanos ; if ( idleDurationNs > longestIdleDurationNs ) { longestIdleDurationNs = idleDurationNs ; longestIdleConnection = connection ; } } if ( longestIdleDurationNs >= this . keepAliveDurationNs || idleConnectionCount > this . maxIdleConnections ) { connections . remove ( longestIdleConnection ) ; } else if ( idleConnectionCount > _NUM ) { return keepAliveDurationNs - longestIdleDurationNs ; } else if ( inUseConnectionCount > _NUM ) { return keepAliveDurationNs ; } else { cleanupRunning = _BOOL ; return - _NUM ; } } closeQuietly ( longestIdleConnection . socket ( ) ) ; return _NUM ; }
public StateInfo ( ) { }
public boolean compare ( Object expected , Object current ) { if ( current != null ) { equal = current . equals ( expected ) ; } else if ( expected != null ) { equal = expected . equals ( _NUM ) ; } return equal ; }
private static byte [ ] generateSeed ( ) { try { ByteArrayOutputStream seedBuffer = new ByteArrayOutputStream ( ) ; DataOutputStream seedBufferOut = new DataOutputStream ( seedBuffer ) ; seedBufferOut . writeLong ( System . currentTimeMillis ( ) ) ; seedBufferOut . writeLong ( System . nanoTime ( ) ) ; seedBufferOut . writeInt ( Process . myPid ( ) ) ; seedBufferOut . writeInt ( Process . myUid ( ) ) ; seedBufferOut . write ( BUILD_FINGERPRINT_AND_DEVICE_SERIAL ) ; seedBufferOut . close ( ) ; return seedBuffer . toByteArray ( ) ; } catch ( IOException e ) { throw new SecurityException ( _STR , e ) ; } }
boolean needToCheckExclude ( ) { return _BOOL ; }
public static byte [ ] decode ( String hexa ) throws CoderException { if ( hexa == null ) { throw new CoderException ( _STR ) ; } if ( ( hexa . length ( ) % _NUM ) != _NUM ) { throw new CoderException ( _STR ) ; } int tamArray = hexa . length ( ) / _NUM ; byte [ ] retorno = new byte [ tamArray ] ; for ( int i = _NUM ; i < tamArray ; i ++ ) { retorno [ i ] = hexToByte ( hexa . substring ( i * _NUM , i * _NUM + _NUM ) ) ; } return retorno ; }
private List < UserNamespaceAuthorization > createUserNamespaceAuthorizationsFromEntities ( List < UserNamespaceAuthorizationEntity > userNamespaceAuthorizationEntities ) { List < UserNamespaceAuthorization > userNamespaceAuthorizations = new ArrayList < > ( ) ; for ( UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity : userNamespaceAuthorizationEntities ) { userNamespaceAuthorizations . add ( createUserNamespaceAuthorizationFromEntity ( userNamespaceAuthorizationEntity ) ) ; } return userNamespaceAuthorizations ; }
private void readHeader ( ) throws OpenStegoException { this . dataHeader = new DCTDataHeader ( this , this . config ) ; }
@ Override public synchronized void reset ( ) { pos = _NUM ; }
protected < T extends KeySpec > T engineGetKeySpec ( Key key , Class < T > keySpec ) throws InvalidKeySpecException { BigInteger p , q , g , x , y ; if ( key != null ) { if ( keySpec == null ) { throw new NullPointerException ( _STR ) ; } if ( key instanceof DSAPrivateKey ) { DSAPrivateKey privateKey = ( DSAPrivateKey ) key ; if ( keySpec . equals ( DSAPrivateKeySpec . class ) ) { x = privateKey . getX ( ) ; DSAParams params = privateKey . getParams ( ) ; p = params . getP ( ) ; q = params . getQ ( ) ; g = params . getG ( ) ; return ( T ) ( new DSAPrivateKeySpec ( x , p , q , g ) ) ; } if ( keySpec . equals ( PKCS8EncodedKeySpec . class ) ) { return ( T ) ( new PKCS8EncodedKeySpec ( key . getEncoded ( ) ) ) ; } throw new InvalidKeySpecException ( _STR ) ; } if ( key instanceof DSAPublicKey ) { DSAPublicKey publicKey = ( DSAPublicKey ) key ; if ( keySpec . equals ( DSAPublicKeySpec . class ) ) { y = publicKey . getY ( ) ; DSAParams params = publicKey . getParams ( ) ; p = params . getP ( ) ; q = params . getQ ( ) ; g = params . getG ( ) ; return ( T ) ( new DSAPublicKeySpec ( y , p , q , g ) ) ; } if ( keySpec . equals ( X509EncodedKeySpec . class ) ) { return ( T ) ( new X509EncodedKeySpec ( key . getEncoded ( ) ) ) ; } throw new InvalidKeySpecException ( _STR ) ; } } throw new InvalidKeySpecException ( _STR ) ; }
protected void drawText ( String text1 , String text2 , int x , int y , Canvas c ) { if ( textPaint == null ) { Paint p = new Paint ( ) ; p . setTypeface ( RobotoLightTypeface . getInstance ( context ) ) ; p . setColor ( textColor ) ; p . setTextSize ( _NUM * pixelDensity ) ; this . textPaint = p ; } float w = textPaint . measureText ( text1 , _NUM , text1 . length ( ) ) ; int offset = ( int ) w / _NUM ; c . drawText ( text1 , x - offset , y + ( _NUM * pixelDensity ) , textPaint ) ; w = textPaint . measureText ( text2 , _NUM , text2 . length ( ) ) ; offset = ( int ) w / _NUM ; c . drawText ( text2 , x - offset , y + ( _NUM * pixelDensity ) , textPaint ) ; }
public boolean isLessThenOrEqualTo ( Percent Percent ) { assertDefined ( ) ; BigDecimal thisValue = notNull ( this ) ; BigDecimal parameter = notNull ( Percent ) ; return ( thisValue . compareTo ( parameter ) <= _NUM ) ; }
public Object clone ( ) throws CloneNotSupportedException { PredicatedNodeTest clone = ( PredicatedNodeTest ) super . clone ( ) ; if ( ( null != this . m_proximityPositions ) && ( this . m_proximityPositions == clone . m_proximityPositions ) ) { clone . m_proximityPositions = new int [ this . m_proximityPositions . length ] ; System . arraycopy ( this . m_proximityPositions , _NUM , clone . m_proximityPositions , _NUM , this . m_proximityPositions . length ) ; } if ( clone . m_lpi == this ) clone . m_lpi = ( LocPathIterator ) clone ; return clone ; }
public static boolean pointOutsidePrefSize ( JTable table , int row , int column , Point p ) { if ( table . convertColumnIndexToModel ( column ) != _NUM || row == - _NUM ) { return _BOOL ; } TableCellRenderer tcr = table . getCellRenderer ( row , column ) ; Object value = table . getValueAt ( row , column ) ; Component cell = tcr . getTableCellRendererComponent ( table , value , _BOOL , _BOOL , row , column ) ; Dimension itemSize = cell . getPreferredSize ( ) ; Rectangle cellBounds = table . getCellRect ( row , column , _BOOL ) ; cellBounds . width = itemSize . width ; cellBounds . height = itemSize . height ; assert ( p . x >= cellBounds . x && p . y >= cellBounds . y ) ; return p . x > cellBounds . x + cellBounds . width || p . y > cellBounds . y + cellBounds . height ; }
public Builder addSourceFolder ( @ NonNull File folder ) { foldersToScan . add ( folder ) ; return this ; }
public Method suspendSRDFGroupMethod ( final URI systemURI , final RemoteDirectorGroup group , final List < URI > sourceVolumes , final List < URI > targetVolumes ) { return new Workflow . Method ( SUSPEND_SRDF_GROUP_METHOD , systemURI , group , sourceVolumes , targetVolumes ) ; }
private void fieldGoalAtt ( Team offense , Team defense ) { double fgDistRatio = Math . pow ( ( _NUM - gameYardLine ) / _NUM , _NUM ) ; double fgAccRatio = Math . pow ( ( _NUM - gameYardLine ) / _NUM , _NUM ) ; double fgDistChance = ( getHFadv ( ) + offense . getK ( _NUM ) . ratKickPow - fgDistRatio * _NUM ) ; double fgAccChance = ( getHFadv ( ) + offense . getK ( _NUM ) . ratKickAcc - fgAccRatio * _NUM ) ; if ( fgDistChance > _NUM && fgAccChance * Math . random ( ) > _NUM ) { if ( gamePoss ) { homeScore += _NUM ; HomeKStats [ _NUM ] ++ ; HomeKStats [ _NUM ] ++ ; } else { awayScore += _NUM ; AwayKStats [ _NUM ] ++ ; AwayKStats [ _NUM ] ++ ; } gameEventLog += getEventPrefix ( ) + offense . abbr + _STR + offense . getK ( _NUM ) . name + _STR + ( _NUM - gameYardLine ) + _STR ; addPointsQuarter ( _NUM ) ; offense . getK ( _NUM ) . statsFGMade ++ ; offense . getK ( _NUM ) . statsFGAtt ++ ; if ( ! playingOT ) kickOff ( offense ) ; else resetForOT ( ) ; } else { gameEventLog += getEventPrefix ( ) + offense . abbr + _STR + offense . getK ( _NUM ) . name + _STR + ( _NUM - gameYardLine ) + _STR ; offense . getK ( _NUM ) . statsFGAtt ++ ; if ( ! playingOT ) { gameYardLine = Math . max ( _NUM - gameYardLine , _NUM ) ; gameDown = _NUM ; gameYardsNeed = _NUM ; if ( gamePoss ) { HomeKStats [ _NUM ] ++ ; } else { AwayKStats [ _NUM ] ++ ; } gamePoss = ! gamePoss ; } else resetForOT ( ) ; } gameTime -= _NUM ; }
public static final byte [ ] unzip ( byte [ ] in ) throws IOException { ByteArrayOutputStream outStream = new ByteArrayOutputStream ( EXPECTED_COMPRESSION_RATIO * in . length ) ; GZIPInputStream inStream = new GZIPInputStream ( new ByteArrayInputStream ( in ) ) ; byte [ ] buf = new byte [ BUF_SIZE ] ; while ( _BOOL ) { int size = inStream . read ( buf ) ; if ( size <= _NUM ) break ; outStream . write ( buf , _NUM , size ) ; } outStream . close ( ) ; return outStream . toByteArray ( ) ; }
@ Override public double calculateM ( double delta , double epsilon ) { double i = _NUM ; while ( conf ( i , delta ) > epsilon / _NUM ) { i = i + _NUM ; } if ( i > _NUM ) { i = i - _NUM ; } while ( conf ( i , delta ) > ( epsilon / _NUM ) ) { i ++ ; } return Math . ceil ( i ) ; }
public static ServerSocket createServerSocket ( int port , InetAddress bindAddress ) throws IOException { ServerSocket socket = null ; if ( SysProperties . ENABLE_ANONYMOUS_TLS ) { removeAnonFromLegacyAlgorithms ( ) ; } setKeystore ( ) ; ServerSocketFactory f = SSLServerSocketFactory . getDefault ( ) ; SSLServerSocket secureSocket ; if ( bindAddress == null ) { secureSocket = ( SSLServerSocket ) f . createServerSocket ( port ) ; } else { secureSocket = ( SSLServerSocket ) f . createServerSocket ( port , _NUM , bindAddress ) ; } secureSocket . setEnabledProtocols ( disableSSL ( secureSocket . getEnabledProtocols ( ) ) ) ; if ( SysProperties . ENABLE_ANONYMOUS_TLS ) { String [ ] list = enableAnonymous ( secureSocket . getEnabledCipherSuites ( ) , secureSocket . getSupportedCipherSuites ( ) ) ; secureSocket . setEnabledCipherSuites ( list ) ; } socket = secureSocket ; return socket ; }
public void printBytes ( byte [ ] data , int offset , int length ) throws IOException { int i ; for ( ; length >= _NUM ; length -= _NUM ) { int chunk = ( ( ( data [ offset ] & _NUM ) << _NUM ) + ( ( data [ offset + _NUM ] & _NUM ) << _NUM ) + ( data [ offset + _NUM ] & _NUM ) ) ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk ) ) ; offset += _NUM ; } if ( length == _NUM ) { int chunk = ( ( data [ offset ] & _NUM ) << _NUM ) + ( data [ offset + _NUM ] & _NUM ) ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk ) ) ; os . write ( _STR ) ; } else if ( length == _NUM ) { int chunk = data [ offset ] & _NUM ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk ) ) ; os . write ( _STR ) ; os . write ( _STR ) ; } }
public void deleteVVset ( String nativeId ) throws Exception { _log . info ( _STR ) ; ClientResponse clientResp = null ; final String path = MessageFormat . format ( URI_DELETE_CG , nativeId ) ; _log . info ( _STR + path ) ; try { clientResp = delete ( path ) ; if ( clientResp == null ) { _log . error ( _STR ) ; throw new HP3PARException ( _STR ) ; } else if ( clientResp . getStatus ( ) != _NUM ) { String errResp = getResponseDetails ( clientResp ) ; throw new HP3PARException ( errResp ) ; } else { _log . info ( _STR ) ; } } catch ( Exception e ) { throw e ; } finally { if ( clientResp != null ) { clientResp . close ( ) ; } _log . info ( _STR ) ; } }
public void accept ( final AnnotationVisitor av ) { if ( av != null ) { if ( values != null ) { for ( int i = _NUM ; i < values . size ( ) ; i += _NUM ) { String name = ( String ) values . get ( i ) ; Object value = values . get ( i + _NUM ) ; accept ( av , name , value ) ; } } av . visitEnd ( ) ; } }
private int findKeyCommentIndex ( String keyName ) { for ( int i = _NUM ; i < keyValComments . size ( ) ; i ++ ) { String t = keyValComments . get ( i ) ; String targetedKey = _STR + keyName + _STR ; if ( t . startsWith ( targetedKey ) ) { return i ; } } if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + keyName ) ; } return - _NUM ; }
public boolean isExpired ( ) { return ( cookieExpiryDate != null && cookieExpiryDate . getTime ( ) <= System . currentTimeMillis ( ) ) ; }
public static void closeQuietly ( Closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( RuntimeException rethrown ) { throw rethrown ; } catch ( Exception ignored ) { } } }
public static boolean isAddToHomeIntentSupported ( Context context ) { PackageManager pm = context . getPackageManager ( ) ; Intent i = new Intent ( INSTALL_SHORTCUT ) ; List < ResolveInfo > receivers = pm . queryBroadcastReceivers ( i , PackageManager . GET_INTENT_FILTERS ) ; return ! receivers . isEmpty ( ) ; }
public RoundedIconGenerator ( int iconWidthPx , int iconHeightPx , int cornerRadiusPx , int backgroundColor , float textSizePx ) { mIconWidthPx = iconWidthPx ; mIconHeightPx = iconHeightPx ; mCornerRadiusPx = cornerRadiusPx ; mBackgroundRect = new RectF ( _NUM , _NUM , mIconWidthPx , mIconHeightPx ) ; mBackgroundPaint = new Paint ( Paint . ANTI_ALIAS_FLAG ) ; mBackgroundPaint . setColor ( backgroundColor ) ; mTextPaint = new TextPaint ( Paint . ANTI_ALIAS_FLAG ) ; mTextPaint . setColor ( Color . WHITE ) ; mTextPaint . setFakeBoldText ( _BOOL ) ; mTextPaint . setTextSize ( textSizePx ) ; FontMetrics textFontMetrics = mTextPaint . getFontMetrics ( ) ; mTextHeight = ( float ) Math . ceil ( textFontMetrics . bottom - textFontMetrics . top ) ; mTextYOffset = - textFontMetrics . top ; }
InMemoryEntryStore ( ) { entries = Maps . newHashMap ( ) ; topLevelEntries = Sets . newHashSet ( ) ; children = HashMultimap . create ( ) ; }
public void persistConnection ( Connection connection ) throws PersistenceException { MqttConnectOptions conOpts = connection . getConnectionOptions ( ) ; MqttMessage lastWill = conOpts . getWillMessage ( ) ; SQLiteDatabase db = getWritableDatabase ( ) ; ContentValues values = new ContentValues ( ) ; values . put ( COLUMN_HOST , connection . getHostName ( ) ) ; values . put ( COLUMN_port , connection . getPort ( ) ) ; values . put ( COLUMN_client_ID , connection . getId ( ) ) ; values . put ( COLUMN_ssl , connection . isSSL ( ) ) ; values . put ( COLUMN_KEEP_ALIVE , conOpts . getKeepAliveInterval ( ) ) ; values . put ( COLUMN_TIME_OUT , conOpts . getConnectionTimeout ( ) ) ; values . put ( COLUMN_USER_NAME , conOpts . getUserName ( ) ) ; values . put ( COLUMN_TOPIC , conOpts . getWillDestination ( ) ) ; char [ ] password = conOpts . getPassword ( ) ; values . put ( COLUMN_CLEAN_SESSION , conOpts . isCleanSession ( ) ? _NUM : _NUM ) ; values . put ( COLUMN_PASSWORD , password != null ? String . valueOf ( password ) : null ) ; values . put ( COLUMN_MESSAGE , lastWill != null ? new String ( lastWill . getPayload ( ) ) : null ) ; values . put ( COLUMN_QOS , lastWill != null ? lastWill . getQos ( ) : _NUM ) ; if ( lastWill == null ) { values . put ( COLUMN_RETAINED , _NUM ) ; } else { values . put ( COLUMN_RETAINED , lastWill . isRetained ( ) ? _NUM : _NUM ) ; } long newRowId = db . insert ( TABLE_CONNECTIONS , null , values ) ; db . close ( ) ; if ( newRowId == - _NUM ) { throw new PersistenceException ( _STR + connection . handle ( ) ) ; } else { connection . assignPersistenceId ( newRowId ) ; } }
public ClassAnnotator ( URL [ ] codebase , Properties props ) { if ( props != null ) properties . putAll ( props ) ; setAnnotationURLs ( codebase ) ; }
public int next ( ) { return mix ( gen . getAndIncrement ( ) ) ; }
public CholeskyDecomposition ( Matrix Arg ) { double [ ] [ ] A = Arg . getArray ( ) ; n = Arg . getRowDimension ( ) ; L = new double [ n ] [ n ] ; isspd = ( Arg . getColumnDimension ( ) == n ) ; for ( int j = _NUM ; j < n ; j ++ ) { double [ ] Lrowj = L [ j ] ; double d = _NUM ; for ( int k = _NUM ; k < j ; k ++ ) { double [ ] Lrowk = L [ k ] ; double s = _NUM ; for ( int i = _NUM ; i < k ; i ++ ) { s += Lrowk [ i ] * Lrowj [ i ] ; } Lrowj [ k ] = s = ( A [ j ] [ k ] - s ) / L [ k ] [ k ] ; d = d + s * s ; isspd = isspd & ( A [ k ] [ j ] == A [ j ] [ k ] ) ; } d = A [ j ] [ j ] - d ; isspd = isspd & ( d > _NUM ) ; L [ j ] [ j ] = Math . sqrt ( Math . max ( d , _NUM ) ) ; for ( int k = j + _NUM ; k < n ; k ++ ) { L [ j ] [ k ] = _NUM ; } } }
public InputStream put ( final URLConnection connection , final boolean flushCacheOnClose ) { final String key = getKey ( connection ) ; if ( key == null ) return null ; if ( ! isCacheable ( ( HttpURLConnection ) connection ) ) try { cache . remove ( key ) ; return null ; } catch ( IOException e ) { return null ; } String etag = connection . getHeaderField ( HEADER_ETAG ) ; if ( etag == null || etag . length ( ) == _NUM ) return null ; Editor editor ; try { editor = cache . edit ( key ) ; } catch ( IOException e ) { return null ; } if ( editor == null ) return null ; try { editor . set ( ETAG , etag ) ; } catch ( IOException e ) { try { editor . abort ( ) ; } catch ( IOException ignored ) { } return null ; } InputStream input ; try { input = connection . getInputStream ( ) ; if ( ! ( input instanceof InflaterInputStream ) && ENCODING_GZIP . equals ( connection . getHeaderField ( HEADER_CONTENT_ENCODING ) ) ) input = new GZIPInputStream ( input ) ; } catch ( IOException e ) { return null ; } OutputStream output ; try { output = editor . newOutputStream ( BODY ) ; } catch ( IOException e ) { return null ; } if ( output != null ) return new CacheStream ( input , output , editor , this , flushCacheOnClose ) ; else return null ; }
public static String [ ] parseTitle ( String title ) { String v [ ] = { _STR , _STR } ; if ( title == null ) return v ; Pattern p = Pattern . compile ( _STR , Pattern . CASE_INSENSITIVE ) ; Matcher m = p . matcher ( title ) ; if ( m . find ( ) ) { v [ _NUM ] = m . group ( _NUM ) ; v [ _NUM ] = m . group ( _NUM ) ; } else { v [ _NUM ] = title ; } return v ; }
public String sel ( ) { return mSelection . toString ( ) ; }
public double calculateExcitatoryRatio ( ) { excitatoryRatio = exSynapseSet . size ( ) / ( double ) size ( ) ; if ( Double . isNaN ( excitatoryRatio ) ) { return _NUM ; } return excitatoryRatio ; }
public void rootRemoved ( ISVNRepositoryLocation root ) { Iterator it = listeners . iterator ( ) ; while ( it . hasNext ( ) ) { IRepositoryListener listener = ( IRepositoryListener ) it . next ( ) ; listener . repositoryRemoved ( root ) ; } }
public synchronized void insert ( double _priority , Object _data ) { numElements ++ ; if ( numElements == queue . length ) { PriorityQueueNode [ ] tmp = new PriorityQueueNode [ ( int ) ( queue . length * _NUM ) ] ; System . arraycopy ( queue , _NUM , tmp , _NUM , queue . length ) ; for ( int i = queue . length ; i < tmp . length ; i ++ ) { tmp [ i ] = new PriorityQueueNode ( ) ; } queue = tmp ; } queue [ numElements ] . data = _data ; queue [ numElements ] . priority = _priority ; reheapify ( numElements ) ; }
protected Message ( ) { }
protected String wrapLinuxCommand ( String command ) throws IOException , InterruptedException { String setGroup = _STR + getGid ( ) + _STR + getGid ( ) + _STR + getGid ( ) + _STR ; String setUser = _STR + getUid ( ) + _STR + getUid ( ) + _STR + getGid ( ) + _STR ; String chownCommand = _STR ; return setGroup + _STR + setUser + _STR + chownCommand + _STR + command + _STR + chownCommand ; }
public AbstractDMLQuery parseSqlQuery ( SQLQuery sqlQuery , ISpaceProxy space ) throws SQLException { AbstractDMLQuery query = ( AbstractDMLQuery ) getQueryFromCache ( getUniqueKey ( sqlQuery ) ) ; try { if ( query == null ) { if ( _logger . isLoggable ( Level . FINE ) ) { _logger . fine ( _STR ) ; } SqlParser parser = initParser ( sqlQuery . getQuery ( ) ) ; query = parse ( parser ) ; query . setTableName ( sqlQuery . getTypeName ( ) ) ; query . validateQuery ( space ) ; if ( ! query . isPrepared ( ) && ! query . containsSubQueries ( ) ) query . build ( ) ; addQueryToCache ( getUniqueKey ( sqlQuery ) , query ) ; if ( ! query . isPrepared ( ) ) return query ; } query = query . clone ( ) ; return query ; } catch ( SQLException sqlEx ) { if ( _logger . isLoggable ( Level . FINE ) ) { _logger . log ( Level . FINE , _STR + sqlQuery . getQuery ( ) + _STR , sqlEx ) ; } throw sqlEx ; } catch ( Throwable t ) { if ( _logger . isLoggable ( Level . FINE ) ) { _logger . log ( Level . FINE , _STR + sqlQuery . getQuery ( ) + _STR , t ) ; } SQLException sqlEx = new SQLException ( _STR + sqlQuery . getQuery ( ) + _STR + t , _STR , - _NUM ) ; sqlEx . initCause ( t ) ; throw sqlEx ; } }
private int indexOfElementInLevel ( int element , int level [ ] ) throws Exception { for ( int i = _NUM ; i < level . length ; i ++ ) { if ( level [ i ] == element ) { return i ; } } throw new Exception ( _STR + m_nodes . get ( element ) . ID + _STR + _STR ) ; }
public int size ( ) { return _attrs . size ( ) ; }
public String consumeTagName ( ) { int start = pos ; while ( ! isEmpty ( ) && ( matchesWord ( ) || matchesAny ( _STR , _STR , _STR ) ) ) pos ++ ; return queue . substring ( start , pos ) ; }
public void deepSort ( int [ ] setFeatureSequence ) { featureSequence = setFeatureSequence ; numberOfLeaves = _NUM ; tree = new MaryNode ( _NUM , featureVectors . length ) ; sortNode ( _NUM , tree ) ; }
public void removeListeners ( ) { listeners . clear ( ) ; }
public String decrypt ( String sCipherText ) { int nLen = ( sCipherText . length ( ) > > _NUM ) & ~ _NUM ; if ( nLen < BlowfishECB . BLOCKSIZE ) return null ; byte [ ] cbciv = new byte [ BlowfishECB . BLOCKSIZE ] ; int nNumOfBytes = BinConverter . binHexToBytes ( sCipherText , cbciv , _NUM , _NUM , BlowfishECB . BLOCKSIZE ) ; if ( nNumOfBytes < BlowfishECB . BLOCKSIZE ) return null ; m_bfish . setCBCIV ( cbciv ) ; nLen -= BlowfishECB . BLOCKSIZE ; if ( nLen == _NUM ) return _STR ; byte [ ] buf = new byte [ nLen ] ; nNumOfBytes = BinConverter . binHexToBytes ( sCipherText , buf , BlowfishECB . BLOCKSIZE * _NUM , _NUM , nLen ) ; if ( nNumOfBytes < nLen ) return null ; m_bfish . decrypt ( buf ) ; int nPadByte = buf [ buf . length - _NUM ] & _NUM ; if ( ( nPadByte > _NUM ) || ( nPadByte < _NUM ) ) nPadByte = _NUM ; nNumOfBytes -= nPadByte ; if ( nNumOfBytes < _NUM ) return _STR ; return BinConverter . byteArrayToUNCString ( buf , _NUM , nNumOfBytes ) ; }
public static double L_RankLoss ( int y [ ] , int r [ ] ) { int L = y . length ; ArrayList < Integer > tI = new ArrayList < Integer > ( ) ; ArrayList < Integer > fI = new ArrayList < Integer > ( ) ; for ( int j = _NUM ; j < L ; j ++ ) { if ( y [ j ] == _NUM ) { tI . add ( j ) ; } else { fI . add ( j ) ; } } if ( ! tI . isEmpty ( ) && ! fI . isEmpty ( ) ) { int c = _NUM ; for ( int k : tI ) { for ( int l : fI ) { if ( position ( k , r ) < position ( l , r ) ) { c ++ ; } } } return ( double ) c / ( double ) ( tI . size ( ) * fI . size ( ) ) ; } else { return _NUM ; } }
private double addRecursively ( ArrayList < double [ ] > hull , Hierarchy < Cluster < Model > > hier , Cluster < Model > clus ) { final DBIDs ids = clus . getIDs ( ) ; double weight = ids . size ( ) ; for ( DBIDIter iter = ids . iter ( ) ; iter . valid ( ) ; iter . advance ( ) ) { double [ ] projP = proj . fastProjectDataToRenderSpace ( rel . get ( iter ) ) ; if ( projP [ _NUM ] != projP [ _NUM ] || projP [ _NUM ] != projP [ _NUM ] ) { continue ; } hull . add ( projP ) ; } for ( Iter < Cluster < Model > > iter = hier . iterChildren ( clus ) ; iter . valid ( ) ; iter . advance ( ) ) { weight += _NUM * addRecursively ( hull , hier , iter . get ( ) ) ; } return weight ; }
public void attributeUpdate ( PrintServiceAttributeEvent psae ) { log . fine ( _STR + psae ) ; }
public static boolean decodeToFile ( String dataToDecode , String filename ) { boolean success = _BOOL ; Base64 . OutputStream bos = null ; try { bos = new Base64 . OutputStream ( new java . io . FileOutputStream ( filename ) , Base64 . DECODE ) ; bos . write ( dataToDecode . getBytes ( PREFERRED_ENCODING ) ) ; success = _BOOL ; } catch ( java . io . IOException e ) { success = _BOOL ; } finally { try { bos . close ( ) ; } catch ( Exception e ) { } } return success ; }
public void evict ( ) throws Exception { assertOpen ( ) ; boolean isEmpty ; synchronized ( this ) { isEmpty = pool . isEmpty ( ) ; } if ( ! isEmpty ) { if ( softMinEvictableIdleTimeMillis > _NUM ) { int numToEvict = getNumIdle ( ) - getMinIdle ( ) ; evict ( System . currentTimeMillis ( ) - softMinEvictableIdleTimeMillis , numToEvict ) ; } if ( minEvictableIdleTimeMillis > _NUM ) { int numToEvict = getNumIdle ( ) ; evict ( System . currentTimeMillis ( ) - minEvictableIdleTimeMillis , numToEvict ) ; } } }
protected void generateRandomPopulation ( int population_size ) { logger . debug ( _STR ) ; for ( int i = _NUM ; i < population_size ; i ++ ) { T individual = chromosomeFactory . getChromosome ( ) ; for ( FitnessFunction < ? > fitnessFunction : this . fitnessFunctions ) { individual . addFitness ( fitnessFunction ) ; } population . add ( individual ) ; if ( isFinished ( ) ) break ; } logger . debug ( _STR + population . size ( ) + _STR ) ; }
public Session ( ) { long uptime = System . currentTimeMillis ( ) ; mMainHandler = new Handler ( Looper . getMainLooper ( ) ) ; mTimestamp = ( uptime / _NUM ) << _NUM & ( ( ( uptime - ( ( uptime / _NUM ) * _NUM ) ) > > _NUM ) / _NUM ) ; mOrigin = _STR ; try { sSignal . await ( ) ; } catch ( InterruptedException e ) { } }
public List < Visitante > listar ( ) { List < Visitante > dados = new ArrayList < > ( ) ; try { String sql = _STR ; stm = conector . prepareStatement ( sql ) ; rs = stm . executeQuery ( sql ) ; while ( rs . next ( ) ) { dados . add ( new Visitante ( rs . getInt ( _NUM ) , rs . getString ( _NUM ) , rs . getString ( _NUM ) , rs . getString ( _NUM ) , rs . getString ( _NUM ) , rs . getString ( _NUM ) , Tempo . toDate ( rs . getTimestamp ( _NUM ) ) , rs . getString ( _NUM ) , rs . getString ( _NUM ) ) ) ; } stm . close ( ) ; rs . close ( ) ; } catch ( SQLException ex ) { Mensagem . erro ( _STR + ex ) ; } return dados ; }
private void assertAllFromTbl1 ( Statement stmt , String [ ] ones , short [ ] twos ) throws SQLException { ResultSet rs = stmt . executeQuery ( _STR ) ; int i = _NUM ; for ( ; rs . next ( ) ; i ++ ) { assertTrue ( i < ones . length ) ; assertEquals ( ones [ i ] , rs . getString ( _STR ) ) ; assertEquals ( twos [ i ] , rs . getShort ( _STR ) ) ; } assertTrue ( i == ones . length ) ; }
@ Override public Writer append ( char value ) { builder . append ( value ) ; return this ; }
private void insertBefore ( Instruction [ ] list , Instruction s ) { for ( Instruction x : list ) { s . insertBefore ( x ) ; } }
public static Builder newBuilder ( ) { return new Builder ( ) ; }
public int countArray ( String [ ] array ) { return array . length ; }
private void processUnprocessed ( ) { boolean clean_processings = Boolean . getBoolean ( _STR ) ; logger . info ( _STR + _STR + clean_processings + _STR ) ; productService . processUnprocessed ( ! clean_processings ) ; }
public double [ ] popy ( double x_ [ ] ) { return popY ( new double [ ] [ ] { x_ } ) [ _NUM ] ; }
public void gotoFrame ( int frameNumber ) throws IOException { print ( _STR , new String [ ] { Integer . toString ( frameNumber ) } ) ; }
private void pop ( final String desc ) { char c = desc . charAt ( _NUM ) ; if ( c == _STR ) { pop ( ( Type . getArgumentsAndReturnSizes ( desc ) > > _NUM ) - _NUM ) ; } else if ( c == _STR || c == _STR ) { pop ( _NUM ) ; } else { pop ( _NUM ) ; } }
public void delete ( String name ) throws IOException { if ( name . equalsIgnoreCase ( SUBJECT_NAME ) ) { names = null ; } else { throw new IOException ( _STR + _STR ) ; } encodeThis ( ) ; }
public void pushElemAttributeSet ( ElemAttributeSet attrSet ) { m_attrSetStack . push ( attrSet ) ; }
private void finishScrollStacks ( ) { cancelAnimation ( this , Property . STACK_SNAP ) ; final int currentModelIndex = getTabStackIndex ( ) ; float delta = Math . abs ( currentModelIndex + mRenderedScrollOffset ) ; float target = - currentModelIndex ; if ( delta != _NUM ) { long duration = FLING_MIN_DURATION + ( long ) Math . abs ( delta * getFullScrollDistance ( ) / mFlingSpeed ) ; addToAnimation ( this , Property . STACK_SNAP , mRenderedScrollOffset , target , duration , _NUM ) ; } else { setProperty ( Property . STACK_SNAP , target ) ; if ( mTemporarySelectedStack != null ) { mTabModelSelector . selectModel ( mTemporarySelectedStack ) ; mTemporarySelectedStack = null ; } } }
public GeoDistanceBuilder addUnboundedFrom ( String key , double from ) { ranges . add ( new Range ( key , from , null ) ) ; return this ; }
private void sendResponse ( Document doc , MessageFactory messageFactory , String contentType , HttpServletResponse res ) throws IOException , SOAPException { SOAPMessage reply = messageFactory . createMessage ( ) ; SOAPHeader header = reply . getSOAPHeader ( ) ; header . detachNode ( ) ; SOAPBody replyBody = reply . getSOAPBody ( ) ; res . setHeader ( _STR , contentType ) ; replyBody . addDocument ( doc ) ; reply . saveChanges ( ) ; OutputStream os = res . getOutputStream ( ) ; reply . writeTo ( os ) ; os . flush ( ) ; }
public static String replaceChars ( String str , String oldchars , char newchar ) { int pos = indexOfChars ( str , oldchars ) ; if ( pos == - _NUM ) { return str ; } StringBuilder buf = new StringBuilder ( str ) ; do { buf . setCharAt ( pos , newchar ) ; pos = indexOfChars ( str , oldchars , pos + _NUM ) ; } while ( pos != - _NUM ) ; return buf . toString ( ) ; }
public final CharSequence yytext ( ) { return zzBuffer . subSequence ( zzStartRead , zzMarkedPos ) ; }
public static String canonicalizePath ( String path , boolean discardRelativePrefix ) { int segmentStart = _NUM ; int deletableSegments = _NUM ; for ( int i = _NUM ; i <= path . length ( ) ; ) { int nextSegmentStart ; if ( i == path . length ( ) ) { nextSegmentStart = i ; } else if ( path . charAt ( i ) == _STR ) { nextSegmentStart = i + _NUM ; } else { i ++ ; continue ; } if ( i == segmentStart + _NUM && path . regionMatches ( segmentStart , _STR , _NUM , _NUM ) ) { path = path . substring ( _NUM , segmentStart ) + path . substring ( nextSegmentStart ) ; i = segmentStart ; } else if ( i == segmentStart + _NUM && path . regionMatches ( segmentStart , _STR , _NUM , _NUM ) ) { if ( deletableSegments > _NUM || discardRelativePrefix ) { deletableSegments -- ; int prevSegmentStart = path . lastIndexOf ( _STR , segmentStart - _NUM ) + _NUM ; path = path . substring ( _NUM , prevSegmentStart ) + path . substring ( nextSegmentStart ) ; i = segmentStart = prevSegmentStart ; } else { i ++ ; segmentStart = i ; } } else { if ( i > _NUM ) { deletableSegments ++ ; } i ++ ; segmentStart = i ; } } return path ; }
public InMemoryMessageExchangeStore ( final NetworkConfig config , TokenProvider tokenProvider ) { if ( config == null ) { throw new NullPointerException ( _STR ) ; } if ( tokenProvider == null ) { throw new NullPointerException ( _STR ) ; } this . tokenProvider = tokenProvider ; this . config = config ; }
public static void next ( ) { try { if ( musicPlaybackService != null ) { musicPlaybackService . next ( ) ; } } catch ( final RemoteException ignored ) { } }
public long startstack ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
private void drawBitmapWithStroke ( Canvas canvas , Bitmap bitmap , int centerX , int centerY , float radius , Paint drawPaint ) { drawPaint . setStyle ( Paint . Style . FILL ) ; float strokeRadius = radius + mRadiusStrokeWidth ; drawPaint . setXfermode ( new PorterDuffXfermode ( PorterDuff . Mode . CLEAR ) ) ; canvas . drawCircle ( centerX , centerY , strokeRadius , drawPaint ) ; drawPaint . setXfermode ( null ) ; final int halfBitmapWidth = bitmap . getWidth ( ) / _NUM ; final int halfBitmapHeight = bitmap . getHeight ( ) / _NUM ; BitmapShader bitmapShader = new BitmapShader ( bitmap , Shader . TileMode . REPEAT , Shader . TileMode . REPEAT ) ; Matrix shaderMatrix = new Matrix ( ) ; float minSize = bitmap . getWidth ( ) > bitmap . getHeight ( ) ? bitmap . getHeight ( ) : bitmap . getWidth ( ) ; float scale = radius * _NUM / minSize ; shaderMatrix . setScale ( scale , scale ) ; shaderMatrix . postTranslate ( centerX - ( halfBitmapWidth * scale ) , centerY - ( halfBitmapHeight * scale ) ) ; bitmapShader . setLocalMatrix ( shaderMatrix ) ; drawPaint . setShader ( bitmapShader ) ; canvas . drawCircle ( centerX , centerY , radius , drawPaint ) ; drawPaint . setShader ( null ) ; }
SNode awaitFulfill ( SNode s , boolean timed , long nanos ) { final long deadline = timed ? System . nanoTime ( ) + nanos : _NUM ; Thread w = Thread . currentThread ( ) ; int spins = ( shouldSpin ( s ) ? ( timed ? maxTimedSpins : maxUntimedSpins ) : _NUM ) ; for ( ; ; ) { if ( w . isInterrupted ( ) ) s . tryCancel ( ) ; SNode m = s . match ; if ( m != null ) return m ; if ( timed ) { nanos = deadline - System . nanoTime ( ) ; if ( nanos <= _NUM ) { s . tryCancel ( ) ; continue ; } } if ( spins > _NUM ) spins = shouldSpin ( s ) ? ( spins - _NUM ) : _NUM ; else if ( s . waiter == null ) s . waiter = w ; else if ( ! timed ) LockSupport . park ( this ) ; else if ( nanos > spinForTimeoutThreshold ) LockSupport . parkNanos ( this , nanos ) ; } }
public MqttDevice mqttDevice ( ) { return mqttDevice ; }
public AbbaLockingDetector startCollecting ( ) { thread = new Thread ( this , _STR ) ; thread . setDaemon ( _BOOL ) ; thread . start ( ) ; return this ; }
public void addSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < SwipeListener > ( ) ; } mListeners . add ( listener ) ; }
protected Object readObjectOverride ( ) throws OptionalDataException , ClassNotFoundException , IOException { if ( input == null ) { return null ; } throw new IOException ( ) ; }
public float toMeters ( double pixels ) { return ( float ) ( pixels * METERS_PER_PIXELS ) ; }
public static String searchRemoveFromCategory ( HttpServletRequest request , HttpServletResponse response ) { Delegator delegator = ( Delegator ) request . getAttribute ( _STR ) ; String productCategoryId = request . getParameter ( _STR ) ; String errMsg = null ; try { boolean beganTransaction = TransactionUtil . begin ( DEFAULT_TX_TIMEOUT ) ; try { EntityListIterator eli = getProductSearchResults ( request ) ; if ( eli == null ) { errMsg = UtilProperties . getMessage ( resource , _STR , UtilHttp . getLocale ( request ) ) ; request . setAttribute ( _STR , errMsg ) ; return _STR ; } int numRemoved = _NUM ; GenericValue searchResultView = null ; while ( ( searchResultView = eli . next ( ) ) != null ) { String productId = searchResultView . getString ( _STR ) ; numRemoved += delegator . removeByAnd ( _STR , UtilMisc . toMap ( _STR , productCategoryId , _STR , productId ) ) ; } eli . close ( ) ; Map < String , String > messageMap = UtilMisc . toMap ( _STR , Integer . toString ( numRemoved ) ) ; errMsg = UtilProperties . getMessage ( resource , _STR , messageMap , UtilHttp . getLocale ( request ) ) ; request . setAttribute ( _STR , errMsg ) ; } catch ( GenericEntityException e ) { Map < String , String > messageMap = UtilMisc . toMap ( _STR , e . toString ( ) ) ; errMsg = UtilProperties . getMessage ( resource , _STR , messageMap , UtilHttp . getLocale ( request ) ) ; Debug . logError ( e , errMsg , module ) ; request . setAttribute ( _STR , errMsg ) ; TransactionUtil . rollback ( beganTransaction , errMsg , e ) ; return _STR ; } finally { TransactionUtil . commit ( beganTransaction ) ; } } catch ( GenericTransactionException e ) { Map < String , String > messageMap = UtilMisc . toMap ( _STR , e . toString ( ) ) ; errMsg = UtilProperties . getMessage ( resource , _STR , messageMap , UtilHttp . getLocale ( request ) ) ; Debug . logError ( e , errMsg , module ) ; request . setAttribute ( _STR , errMsg ) ; return _STR ; } return _STR ; }
boolean addToBuffer ( char c ) throws IOException { int len = sb . length ( ) ; if ( len == _NUM && c != CHAR_LT ) return _BOOL ; sb . append ( c ) ; if ( ++ len >= minTagLen ) { boolean isClosingTag = ( len >= _NUM && sb . charAt ( _NUM ) == CHAR_SL ) ; String substr ; if ( isClosingTag ) substr = sb . substring ( _NUM ) ; else substr = sb . substring ( _NUM ) ; for ( int i = _NUM ; i < EXCLUDE_TAGS . length ; i ++ ) { if ( substr . equalsIgnoreCase ( EXCLUDE_TAGS [ i ] ) ) { if ( isClosingTag ) { depthDec ( i ) ; printBuffer ( ) ; lastChar = _NUM ; } else { depthInc ( i ) ; } } } } return _BOOL ; }
public static double length ( double x , double y , double z ) { return Math . sqrt ( x * x + y * y + z * z ) ; }
public static < T > T jsonToObject ( String jsonString , Class < T > klass ) { T objectFromJson = null ; try { GfJsonObject jsonObject = new GfJsonObject ( jsonString ) ; objectFromJson = klass . newInstance ( ) ; Method [ ] declaredMethods = klass . getDeclaredMethods ( ) ; Map < String , Method > methodsMap = new HashMap < String , Method > ( ) ; for ( Method method : declaredMethods ) { methodsMap . put ( method . getName ( ) , method ) ; } int noOfFields = jsonObject . size ( ) ; Iterator < String > keys = jsonObject . keys ( ) ; while ( keys . hasNext ( ) ) { String key = keys . next ( ) ; Method method = methodsMap . get ( _STR + capitalize ( key ) ) ; if ( method != null ) { Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; if ( parameterTypes . length == _NUM ) { Class < ? > parameterType = parameterTypes [ _NUM ] ; Object value = jsonObject . get ( key ) ; if ( isPrimitiveOrWrapper ( parameterType ) ) { value = getPrimitiveOrWrapperValue ( parameterType , value ) ; } else if ( isArray ( parameterType ) ) { value = toArray ( value , parameterType ) ; } else if ( isList ( parameterType ) ) { value = toList ( value , parameterType ) ; } else if ( isMap ( parameterType ) ) { value = toMap ( value , parameterType ) ; } else if ( isSet ( parameterType ) ) { value = toSet ( value , parameterType ) ; } else { value = jsonToObject ( value . toString ( ) , parameterType ) ; } method . invoke ( objectFromJson , new Object [ ] { value } ) ; noOfFields -- ; } } } if ( noOfFields != _NUM ) { throw new IllegalArgumentException ( _STR + jsonString + _STR + klass ) ; } } catch ( InstantiationException e ) { throw new IllegalArgumentException ( _STR + klass , e ) ; } catch ( IllegalAccessException e ) { throw new IllegalArgumentException ( _STR + klass , e ) ; } catch ( GfJsonException e ) { throw new IllegalArgumentException ( _STR + klass , e ) ; } catch ( IllegalArgumentException e ) { throw new IllegalArgumentException ( _STR + klass , e ) ; } catch ( InvocationTargetException e ) { throw new IllegalArgumentException ( _STR + klass , e ) ; } return objectFromJson ; }
private Cache createCache ( ) throws CacheException { final Properties props = new Properties ( ) ; props . setProperty ( LOCATORS , _STR ) ; props . setProperty ( MCAST_PORT , _STR ) ; return CacheFactory . create ( DistributedSystem . connect ( props ) ) ; }
public AttributeListPanel ( ) { m_Table . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; m_Table . setColumnSelectionAllowed ( _BOOL ) ; m_Table . setPreferredScrollableViewportSize ( new Dimension ( _NUM , _NUM ) ) ; setLayout ( new BorderLayout ( ) ) ; add ( new JScrollPane ( m_Table ) , BorderLayout . CENTER ) ; }
protected String [ ] [ ] toArray ( ) { int i ; int n ; int ii ; int nn ; int x ; int y ; String [ ] [ ] result ; String [ ] [ ] tmpResult ; int cols ; int rows ; boolean valueExists ; rows = getVisibleRowCount ( ) ; if ( getShowAverage ( ) ) { rows ++ ; } cols = getVisibleColCount ( ) ; if ( getShowStdDev ( ) ) { cols = cols * _NUM ; } else { cols = cols * _NUM ; } result = new String [ rows + _NUM ] [ cols + _NUM ] ; result [ _NUM ] [ _NUM ] = trimString ( _STR , getRowNameWidth ( ) ) ; x = _NUM ; for ( ii = _NUM ; ii < getColCount ( ) ; ii ++ ) { i = getDisplayCol ( ii ) ; if ( getColHidden ( i ) ) { continue ; } result [ _NUM ] [ x ] = trimString ( removeFilterName ( getColName ( i ) ) , getColNameWidth ( ) ) ; x ++ ; if ( getShowStdDev ( ) ) { result [ _NUM ] [ x ] = _STR ; x ++ ; } result [ _NUM ] [ x ] = _STR ; x ++ ; } y = _NUM ; for ( ii = _NUM ; ii < getRowCount ( ) ; ii ++ ) { i = getDisplayRow ( ii ) ; if ( ! getRowHidden ( i ) ) { result [ y ] [ _NUM ] = trimString ( removeFilterName ( getRowName ( i ) ) , getRowNameWidth ( ) ) ; y ++ ; } } y = _NUM ; for ( ii = _NUM ; ii < getRowCount ( ) ; ii ++ ) { i = getDisplayRow ( ii ) ; if ( getRowHidden ( i ) ) { continue ; } x = _NUM ; for ( nn = _NUM ; nn < getColCount ( ) ; nn ++ ) { n = getDisplayCol ( nn ) ; if ( getColHidden ( n ) ) { continue ; } valueExists = ( ! Double . isNaN ( getMean ( n , i ) ) ) ; if ( ! valueExists ) { result [ y ] [ x ] = _STR ; } else { result [ y ] [ x ] = doubleToString ( getMean ( n , i ) , getMeanPrec ( ) ) ; } x ++ ; if ( getShowStdDev ( ) ) { if ( ! valueExists ) { result [ y ] [ x ] = _STR ; } else if ( Double . isInfinite ( getStdDev ( n , i ) ) ) { result [ y ] [ x ] = _STR ; } else { result [ y ] [ x ] = doubleToString ( getStdDev ( n , i ) , getStdDevPrec ( ) ) ; } x ++ ; } if ( ! valueExists ) { result [ y ] [ x ] = _STR ; } else { switch ( getSignificance ( n , i ) ) { case SIGNIFICANCE_TIE : result [ y ] [ x ] = TIE_STRING ; break ; case SIGNIFICANCE_WIN : result [ y ] [ x ] = WIN_STRING ; break ; case SIGNIFICANCE_LOSS : result [ y ] [ x ] = LOSS_STRING ; break ; } } x ++ ; } y ++ ; } if ( getShowAverage ( ) ) { y = result . length - _NUM ; x = _NUM ; result [ y ] [ _NUM ] = _STR ; x ++ ; for ( ii = _NUM ; ii < getColCount ( ) ; ii ++ ) { i = getDisplayCol ( ii ) ; if ( getColHidden ( i ) ) { continue ; } result [ y ] [ x ] = doubleToString ( getAverage ( i ) , getMeanPrec ( ) ) ; x ++ ; if ( getShowStdDev ( ) ) { result [ y ] [ x ] = _STR ; x ++ ; } result [ y ] [ x ] = _STR ; x ++ ; } } y = result . length - _NUM ; x = _NUM ; result [ y ] [ _NUM ] = LEFT_PARENTHESES + WIN_STRING + _STR + TIE_STRING + _STR + LOSS_STRING + RIGHT_PARENTHESES ; x ++ ; for ( ii = _NUM ; ii < getColCount ( ) ; ii ++ ) { i = getDisplayCol ( ii ) ; if ( getColHidden ( i ) ) { continue ; } result [ y ] [ x ] = _STR ; x ++ ; if ( getShowStdDev ( ) ) { result [ y ] [ x ] = _STR ; x ++ ; } result [ y ] [ x ] = LEFT_PARENTHESES + getSignificanceCount ( i , SIGNIFICANCE_WIN ) + _STR + getSignificanceCount ( i , SIGNIFICANCE_TIE ) + _STR + getSignificanceCount ( i , SIGNIFICANCE_LOSS ) + RIGHT_PARENTHESES ; x ++ ; } tmpResult = new String [ result . length ] [ result [ _NUM ] . length - _NUM ] ; x = _NUM ; for ( i = _NUM ; i < result [ _NUM ] . length ; i ++ ) { if ( ( ( i == _NUM ) && ( getShowStdDev ( ) ) ) || ( ( i == _NUM ) && ( ! getShowStdDev ( ) ) ) ) { continue ; } for ( n = _NUM ; n < result . length ; n ++ ) { tmpResult [ n ] [ x ] = result [ n ] [ i ] ; } x ++ ; } result = tmpResult ; return result ; }
private Environment ( ) { throw ContractUtils . unreachable ( ) ; }
public void removePhoto ( PhotoEntity photo ) { photos . remove ( photo ) ; }
public static int binarySearch ( double [ ] array , int startIndex , int endIndex , double value ) { checkIndexForBinarySearch ( array . length , startIndex , endIndex ) ; long longBits = Double . doubleToLongBits ( value ) ; int low = startIndex , mid = - _NUM , high = endIndex - _NUM ; while ( low <= high ) { mid = ( low + high ) > > > _NUM ; if ( lessThan ( array [ mid ] , value ) ) { low = mid + _NUM ; } else if ( longBits == Double . doubleToLongBits ( array [ mid ] ) ) { return mid ; } else { high = mid - _NUM ; } } if ( mid < _NUM ) { int insertPoint = endIndex ; for ( int index = startIndex ; index < endIndex ; index ++ ) { if ( value < array [ index ] ) { insertPoint = index ; } } return - insertPoint - _NUM ; } return - mid - ( lessThan ( value , array [ mid ] ) ? _NUM : _NUM ) ; }
public static void compute ( double minScore , double topPercent , double maxExpected , float minPercentIdentity , IReadBlock readBlock , String classificationName , BitSet activeMatchesForClassification ) { activeMatchesForClassification . clear ( ) ; for ( int i = _NUM ; i < readBlock . getNumberOfAvailableMatchBlocks ( ) ; i ++ ) { final IMatchBlock matchBlock = readBlock . getMatchBlock ( i ) ; if ( ! matchBlock . isIgnore ( ) && matchBlock . getBitScore ( ) >= minScore && matchBlock . getExpected ( ) <= maxExpected && matchBlock . getPercentIdentity ( ) >= minPercentIdentity ) { if ( matchBlock . getId ( classificationName ) > _NUM ) activeMatchesForClassification . set ( i ) ; } } float bestScore = _NUM ; for ( int i = activeMatchesForClassification . nextSetBit ( _NUM ) ; i != - _NUM ; i = activeMatchesForClassification . nextSetBit ( i + _NUM ) ) { final IMatchBlock matchBlock = readBlock . getMatchBlock ( i ) ; float score = matchBlock . getBitScore ( ) ; if ( score > bestScore ) bestScore = score ; } applyTopPercentFilter ( topPercent , bestScore , minPercentIdentity , readBlock , activeMatchesForClassification ) ; }
public E [ ] toArray ( E [ ] a ) { if ( a . length != array . length ( ) ) { throw new ElasticsearchGenerationException ( _STR ) ; } for ( int i = _NUM ; i < array . length ( ) ; i ++ ) { a [ i ] = array . get ( i ) ; } return a ; }
synchronized public void failOn ( Failure fail ) { if ( failures == null ) { failures = new ArrayList < > ( ) ; } failures . add ( fail ) ; }
public void dump_stack ( ) { if ( stack == null ) { debug_message ( _STR ) ; return ; } debug_message ( _STR ) ; for ( int i = _NUM ; i < stack . size ( ) ; i ++ ) { debug_message ( _STR + ( ( symbol ) stack . elementAt ( i ) ) . sym + _STR + ( ( symbol ) stack . elementAt ( i ) ) . parse_state ) ; } debug_message ( _STR ) ; }
private static Set < String > createCategoriesSet ( Set < String > categories ) { Set < String > result = new HashSet < > ( ) ; for ( String cat : categories ) { result . add ( StringUtil . toLowerCase ( cat ) ) ; } return result ; }
public void loadListener ( String serverKey ) throws GenericServiceException { Server server = servers . get ( serverKey ) ; if ( server == null ) throw new GenericServiceException ( _STR ) ; loadListener ( serverKey , server ) ; }
public void upload ( File file , long restartAt , FTPDataTransferListener listener ) throws IllegalStateException , FileNotFoundException , IOException , FTPIllegalReplyException , FTPException , FTPDataTransferException , FTPAbortedException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . getAbsolutePath ( ) ) ; } InputStream inputStream = null ; try { inputStream = new FileInputStream ( file ) ; } catch ( IOException e ) { throw new FTPDataTransferException ( e ) ; } try { upload ( file . getName ( ) , inputStream , restartAt , restartAt , listener ) ; } catch ( IllegalStateException e ) { throw e ; } catch ( IOException e ) { throw e ; } catch ( FTPIllegalReplyException e ) { throw e ; } catch ( FTPException e ) { throw e ; } catch ( FTPDataTransferException e ) { throw e ; } catch ( FTPAbortedException e ) { throw e ; } finally { if ( inputStream != null ) { try { inputStream . close ( ) ; } catch ( Throwable t ) { ; } } } }
public SSLSocket createSSLSocket ( Socket socket ) throws IOException { SSLSocketFactory sf = ( ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ) ; InetSocketAddress remoteAddress = ( InetSocketAddress ) socket . getRemoteSocketAddress ( ) ; SSLSocket s = ( SSLSocket ) ( sf . createSocket ( socket , remoteAddress . getHostName ( ) , socket . getPort ( ) , _BOOL ) ) ; s . setUseClientMode ( _BOOL ) ; s . setEnabledCipherSuites ( s . getSupportedCipherSuites ( ) ) ; return s ; }
private String formatNode ( RightThreadedBinaryNode < T > node ) { RightThreadedBinaryNode < T > n ; StringBuilder response = new StringBuilder ( _STR ) ; if ( ( n = node . getLeftSon ( ) ) != null ) { response . append ( formatNode ( n ) ) ; } response . append ( node . toString ( ) ) ; if ( ( n = node . getRightSon ( ) ) != null ) { response . append ( formatNode ( n ) ) ; } response . append ( _STR ) ; return response . toString ( ) ; }
public static void unregisterMBean ( Class < ? > mbeanInterface ) { MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; try { ObjectName name = generateMBeanObjectName ( mbeanInterface ) ; if ( mbs . isRegistered ( name ) ) { logger . info ( _STR + name . toString ( ) ) ; mbs . unregisterMBean ( name ) ; } else { logger . warn ( _STR + name . toString ( ) ) ; } } catch ( Exception e ) { throw new ServerRuntimeException ( _STR + mbeanInterface , e ) ; } }
public void writeExif ( InputStream jpegStream , String exifOutFileName ) throws FileNotFoundException , IOException { if ( jpegStream == null || exifOutFileName == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = null ; try { s = getExifWriterStream ( exifOutFileName ) ; doExifStreamIO ( jpegStream , s ) ; s . flush ( ) ; } catch ( IOException e ) { closeSilently ( s ) ; throw e ; } s . close ( ) ; }
public void sort ( Comparator < ? super T > comparator ) { synchronized ( mLock ) { if ( mOriginalValues != null ) { Collections . sort ( mOriginalValues , comparator ) ; } else { Collections . sort ( mObjects , comparator ) ; } } if ( mNotifyOnChange ) notifyDataSetChanged ( ) ; }
static boolean causedByRDE ( DiskAccessException dae ) { boolean result = _BOOL ; if ( dae != null ) { Throwable cause = dae . getCause ( ) ; while ( cause != null ) { if ( cause instanceof RegionDestroyedException ) { result = _BOOL ; break ; } cause = cause . getCause ( ) ; } } return result ; }
public JsonArray add ( String value ) { values . add ( Json . value ( value ) ) ; return this ; }
public MagicVariablesArgumentsBundle ( @ NonNull Map < String , String > arguments , @ NonNull Map < String , String > variables , String layerName , @ NonNull DisplayMetrics metrics ) { super ( arguments , metrics ) ; mVariables = variables ; mLayerNamePrefix = _STR + layerName . replace ( _STR , _STR ) + _STR ; }
@ HLEUnimplemented @ HLEFunction ( nid = _NUM , version = _NUM ) public int sceUsbCamSetupVideoEx ( pspUsbCamSetupVideoExParam usbCamSetupVideoExParam , TPointer workArea , int workAreaSize ) { this . workArea = workArea . getAddress ( ) ; this . workAreaSize = workAreaSize ; resolution = convertResolutionExToResolution ( usbCamSetupVideoExParam . resolution ) ; frameRate = usbCamSetupVideoExParam . framerate ; whiteBalance = usbCamSetupVideoExParam . wb ; saturation = usbCamSetupVideoExParam . saturation ; brightness = usbCamSetupVideoExParam . brightness ; contrast = usbCamSetupVideoExParam . contrast ; sharpness = usbCamSetupVideoExParam . sharpness ; imageEffectMode = usbCamSetupVideoExParam . effectmode ; frameSize = usbCamSetupVideoExParam . framesize ; evLevel = usbCamSetupVideoExParam . evlevel ; if ( ! setupVideo ( ) ) { log . warn ( String . format ( _STR ) ) ; return SceKernelErrors . ERROR_USBCAM_NOT_READY ; } return _NUM ; }
public List < User > loadAllDeepFromCursor ( Cursor cursor ) { int count = cursor . getCount ( ) ; List < User > list = new ArrayList < User > ( count ) ; if ( cursor . moveToFirst ( ) ) { if ( identityScope != null ) { identityScope . lock ( ) ; identityScope . reserveRoom ( count ) ; } try { do { list . add ( loadCurrentDeep ( cursor , _BOOL ) ) ; } while ( cursor . moveToNext ( ) ) ; } finally { if ( identityScope != null ) { identityScope . unlock ( ) ; } } } return list ; }
public static Date convertISO8601toDate ( String dateString ) throws ParseException { DateFormat dateFormat = new SimpleDateFormat ( _STR ) ; Date date = dateFormat . parse ( dateString ) ; return date ; }
public static Document createDOM ( InputStream is ) throws ParserConfigurationException , SAXException , IOException { DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; dbf . setValidating ( _BOOL ) ; dbf . setIgnoringComments ( _BOOL ) ; dbf . setIgnoringElementContentWhitespace ( _BOOL ) ; dbf . setNamespaceAware ( _BOOL ) ; dbf . setFeature ( XMLConstants . FEATURE_SECURE_PROCESSING , _BOOL ) ; dbf . setFeature ( DISALLOW_DOCTYPE_DECL , _BOOL ) ; dbf . setFeature ( EXTERNAL_GENERAL_ENTITIES , _BOOL ) ; dbf . setFeature ( EXTERNAL_PARAMETER_ENTITIES , _BOOL ) ; dbf . setFeature ( LOAD_EXTERNAL_DTD , _BOOL ) ; DocumentBuilder db = null ; db = dbf . newDocumentBuilder ( ) ; db . setEntityResolver ( new NullResolver ( ) ) ; db . setErrorHandler ( new SamlParserErrorHandler ( ) ) ; return db . parse ( is ) ; }
public String toString ( ) { return Double . toString ( getValue ( ) ) ; }
public void resetCount ( ) { msgCnt . set ( _NUM ) ; }
public void scheduleAtFixedRate ( TimerTask task , Date when , long period ) { if ( period <= _NUM || when . getTime ( ) < _NUM ) { throw new IllegalArgumentException ( ) ; } long delay = when . getTime ( ) - System . currentTimeMillis ( ) ; scheduleImpl ( task , delay , period , _BOOL ) ; }
void decodeAttributeBody ( byte [ ] attributeValue , char offset , char length ) throws StunException { realm = new byte [ length ] ; System . arraycopy ( attributeValue , offset , realm , _NUM , length ) ; }
public static void copyAssets ( Context context , String assetsFilename , File file , String mode ) throws IOException , InterruptedException { String abi = Build . CPU_ABI ; String libraryName ; if ( abi . equalsIgnoreCase ( _STR ) ) { libraryName = _STR ; } else if ( abi . equalsIgnoreCase ( _STR ) ) { libraryName = _STR ; } else if ( abi . contains ( _STR ) ) { libraryName = _STR ; } else { return ; } AssetManager manager = context . getAssets ( ) ; final InputStream is = manager . open ( libraryName + _STR + assetsFilename ) ; copyFile ( file , is , mode ) ; }
public boolean is_same ( Object obj ) { if ( this == obj ) return _BOOL ; if ( obj == null ) return _BOOL ; if ( getClass ( ) != obj . getClass ( ) ) return _BOOL ; HouseNumber other = ( HouseNumber ) obj ; if ( number == null ) { if ( name == null ) { if ( other . name != null ) return _BOOL ; } else if ( ! name . equals ( other . name ) ) return _BOOL ; } else if ( ! number . equals ( other . number ) ) return _BOOL ; if ( street == null ) { if ( other . street != null ) return _BOOL ; } else if ( ! street . equals ( other . street ) ) return _BOOL ; return _BOOL ; }
public static double nextUp ( double d ) { if ( d == Double . POSITIVE_INFINITY ) return d ; else { d += _NUM ; return Double . longBitsToDouble ( Double . doubleToRawLongBits ( d ) + ( ( d >= _NUM ) ? + _NUM : - _NUM ) ) ; } }
public int threeWayDistance ( Key k1 , Key k2 ) { byte [ ] h0 = hash ; byte [ ] h1 = k1 . hash ; byte [ ] h2 = k2 . hash ; int mmi = mismatch ( h1 , h2 ) ; if ( mmi == - _NUM ) return _NUM ; int h = Byte . toUnsignedInt ( h0 [ mmi ] ) ; int a = Byte . toUnsignedInt ( h1 [ mmi ] ) ; int b = Byte . toUnsignedInt ( h2 [ mmi ] ) ; return Integer . compareUnsigned ( a ^ h , b ^ h ) ; }
static byte [ ] discardWhitespace ( byte [ ] data ) { byte groomedData [ ] = new byte [ data . length ] ; int bytesCopied = _NUM ; for ( int i = _NUM ; i < data . length ; i ++ ) { switch ( data [ i ] ) { case ( byte ) _STR : case ( byte ) _STR : case ( byte ) _STR : case ( byte ) _STR : break ; default : groomedData [ bytesCopied ++ ] = data [ i ] ; } } byte packedData [ ] = new byte [ bytesCopied ] ; System . arraycopy ( groomedData , _NUM , packedData , _NUM , bytesCopied ) ; return packedData ; }
public AsyncSelector ( ) throws IOException { this ( Selector . open ( ) ) ; }
public void removeChildAt ( int index ) { if ( ( index < _NUM ) || ( children == null ) || ( index >= children . size ( ) ) ) { throw new ArrayIndexOutOfBoundsException ( ) ; } Element child = ( Element ) children . get ( index ) ; child . setParent ( null ) ; children . remove ( index ) ; }
private LinkedList < Diff > diff_bisectSplit ( String text1 , String text2 , int x , int y , long deadline ) { String text1a = text1 . substring ( _NUM , x ) ; String text2a = text2 . substring ( _NUM , y ) ; String text1b = text1 . substring ( x ) ; String text2b = text2 . substring ( y ) ; LinkedList < Diff > diffs = diff_main ( text1a , text2a , _BOOL , deadline ) ; LinkedList < Diff > diffsb = diff_main ( text1b , text2b , _BOOL , deadline ) ; diffs . addAll ( diffsb ) ; return diffs ; }
private void paint ( Painter p , SynthContext ctx , Graphics g , int x , int y , int w , int h , AffineTransform transform ) { if ( p != null ) { if ( g instanceof Graphics2D ) { Graphics2D gfx = ( Graphics2D ) g ; if ( transform != null ) { gfx . transform ( transform ) ; } gfx . translate ( x , y ) ; p . paint ( gfx , ctx . getComponent ( ) , w , h ) ; gfx . translate ( - x , - y ) ; if ( transform != null ) { try { gfx . transform ( transform . createInverse ( ) ) ; } catch ( NoninvertibleTransformException e ) { e . printStackTrace ( ) ; } } } else { BufferedImage img = new BufferedImage ( w , h , BufferedImage . TYPE_INT_ARGB ) ; Graphics2D gfx = img . createGraphics ( ) ; if ( transform != null ) { gfx . transform ( transform ) ; } p . paint ( gfx , ctx . getComponent ( ) , w , h ) ; gfx . dispose ( ) ; g . drawImage ( img , x , y , null ) ; img = null ; } } }
static void loadDirectory ( File file , ModuleCandidate candidate ) throws IOException { File [ ] files = file . listFiles ( ) ; if ( files != null ) for ( File f : files ) loadSubDirectory ( file , f , candidate ) ; }
public static boolean hasSuppressed ( @ Nullable Throwable t , @ Nullable Class < ? extends Throwable > cls ) { if ( t == null || cls == null ) return _BOOL ; if ( t . getSuppressed ( ) != null ) { for ( Throwable th : t . getSuppressed ( ) ) { if ( cls . isAssignableFrom ( th . getClass ( ) ) ) return _BOOL ; if ( hasSuppressed ( th , cls ) ) return _BOOL ; } } return _BOOL ; }
static int writeVarLong ( OutputStream out , long x ) throws IOException { int len = _NUM ; while ( ( x & ~ _NUM ) != _NUM ) { out . write ( ( byte ) ( _NUM | ( x & _NUM ) ) ) ; x >>>= _NUM ; len ++ ; } out . write ( ( byte ) x ) ; return ++ len ; }
protected void engineUpdate ( byte b ) throws SignatureException { messageDigest . update ( b ) ; needsReset = _BOOL ; }
private void writeObject ( java . io . ObjectOutputStream s ) throws java . io . IOException { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { s . defaultWriteObject ( ) ; for ( Node < E > p = first ; p != null ; p = p . next ) s . writeObject ( p . item ) ; s . writeObject ( null ) ; } finally { lock . unlock ( ) ; } }
private boolean checkIfInitiatorForRPBeforeMigration ( Initiator initiator ) { if ( initiator == null ) { return _BOOL ; } boolean isRP = _BOOL ; if ( NullColumnValueGetter . isNullValue ( initiator . getHostName ( ) ) || ! NullColumnValueGetter . isNullURI ( initiator . getHost ( ) ) ) { isRP = _BOOL ; } log . debug ( _STR + ( isRP ? _STR : _STR ) ) ; return isRP ; }
@ Override public Collection < SerialMessage > initialize ( boolean refresh ) { ArrayList < SerialMessage > result = new ArrayList < SerialMessage > ( ) ; if ( isSupportRequestSupported == _BOOL && ( refresh == _BOOL || initialiseDone == _BOOL ) && getVersion ( ) > _NUM ) { result . add ( getSupportedMessage ( ) ) ; } return result ; }
public static Object [ ] sortCopy ( Object [ ] objects , Comparer comparer ) { int len = objects . length ; Object [ ] copy = new Object [ len ] ; System . arraycopy ( objects , _NUM , copy , _NUM , len ) ; sort ( copy , comparer ) ; return copy ; }
public static DMLConfig readConfigurationFile ( String configPath ) throws ParseException , FileNotFoundException { DMLConfig config = new DMLConfig ( ) ; if ( configPath != null ) { try { config = new DMLConfig ( configPath , _BOOL ) ; } catch ( FileNotFoundException fnfe ) { LOG . error ( _STR + configPath + _STR ) ; throw fnfe ; } catch ( ParseException e ) { throw e ; } } else { try { config = new DMLConfig ( DEFAULT_SYSTEMML_CONFIG_FILEPATH , _BOOL ) ; } catch ( FileNotFoundException fnfe ) { LOG . info ( _STR + _STR ) ; config = new DMLConfig ( ) ; } catch ( ParseException e ) { throw e ; } } return config ; }
default B withDefault ( String key , int value ) { return withDefault ( key , Integer . toString ( value ) ) ; }
private String [ ] combineResultsFromMultipleReads ( String [ ] buffer , String [ ] lastRead ) { String [ ] t = new String [ buffer . length + lastRead . length ] ; System . arraycopy ( buffer , _NUM , t , _NUM , buffer . length ) ; System . arraycopy ( lastRead , _NUM , t , buffer . length , lastRead . length ) ; return t ; }
private static boolean isRetina ( ) { if ( SystemInfo . isAppleJvm ) { return hasAppleRetinaDevice ( ) ; } if ( SystemInfo . isMac ) { GraphicsEnvironment e = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; GraphicsDevice [ ] devices = e . getScreenDevices ( ) ; for ( GraphicsDevice device : devices ) { if ( isOracleMacRetinaDevice ( device ) ) { return _BOOL ; } } } return _BOOL ; }
protected void scanCompilationUnits ( final List < ICompilationUnit > us ) throws IllegalArgumentException , CoreException { progressMonitor . beginTask ( _STR , us . size ( ) ) ; for ( final ICompilationUnit ¢ : us ) scanCompilationUnit ( ¢ , newSubMonitor ( progressMonitor ) ) ; progressMonitor . done ( ) ; }
public void pOln ( Object o ) throws IOException { pO ( o . toString ( ) ) ; pln ( ) ; }
private void drawCombat ( final Graphics2D g2d , final int x , final int y , final int width , final int height ) { Rectangle2D wrect = entity . getArea ( ) ; final Rectangle srect = new Rectangle ( ( int ) ( wrect . getX ( ) * IGameScreen . SIZE_UNIT_PIXELS ) , ( int ) ( wrect . getY ( ) * IGameScreen . SIZE_UNIT_PIXELS ) , ( int ) ( wrect . getWidth ( ) * IGameScreen . SIZE_UNIT_PIXELS ) , ( int ) ( wrect . getHeight ( ) * IGameScreen . SIZE_UNIT_PIXELS ) ) ; int circleHeight = ( int ) ( ( srect . height - _NUM ) / SQRT2 ) ; circleHeight = Math . max ( circleHeight , srect . height - IGameScreen . SIZE_UNIT_PIXELS / _NUM ) ; if ( entity . isAttacking ( User . get ( ) ) ) { g2d . setColor ( RING_COLOR_ORANGE ) ; g2d . drawOval ( srect . x - _NUM , srect . y + srect . height - circleHeight , srect . width , circleHeight ) ; g2d . drawOval ( srect . x , srect . y + srect . height - circleHeight , srect . width , circleHeight ) ; g2d . drawOval ( srect . x + _NUM , srect . y + srect . height - circleHeight , srect . width , circleHeight ) ; drawShadedOval ( g2d , srect . x + _NUM , srect . y + srect . height - circleHeight + _NUM , srect . width - _NUM , circleHeight - _NUM , RING_COLOR_ORANGE , _BOOL , _BOOL ) ; } if ( entity . isBeingAttacked ( ) ) { Color lineColor ; g2d . setColor ( RING_COLOR_RED ) ; if ( entity . isAttacking ( User . get ( ) ) ) { lineColor = RING_COLOR_RED ; drawShadedOval ( g2d , srect . x - _NUM , srect . y + srect . height - circleHeight - _NUM , srect . width + _NUM , circleHeight + _NUM , RING_COLOR_RED , _BOOL , _BOOL ) ; } else { lineColor = RING_COLOR_DARK_RED ; g2d . drawOval ( srect . x - _NUM , srect . y + srect . height - circleHeight , srect . width , circleHeight ) ; g2d . drawOval ( srect . x , srect . y + srect . height - circleHeight , srect . width , circleHeight ) ; g2d . drawOval ( srect . x + _NUM , srect . y + srect . height - circleHeight , srect . width , circleHeight ) ; drawShadedOval ( g2d , srect . x + _NUM , srect . y + srect . height - circleHeight + _NUM , srect . width - _NUM , circleHeight - _NUM , RING_COLOR_RED , _BOOL , _BOOL ) ; drawShadedOval ( g2d , srect . x - _NUM , srect . y + srect . height - circleHeight - _NUM , srect . width + _NUM , circleHeight + _NUM , RING_COLOR_ORANGE , _BOOL , _BOOL ) ; } EnumSet < Direction > directions = EnumSet . noneOf ( Direction . class ) ; for ( Entity attacker : entity . getAttackers ( ) ) { directions . add ( Direction . getAreaDirectionTowardsArea ( entity . getArea ( ) , attacker . getArea ( ) ) ) ; } drawArrows ( g2d , srect . x - _NUM , srect . y + srect . height - circleHeight - _NUM , srect . width + _NUM , circleHeight + _NUM , directions , lineColor ) ; } else if ( entity . isAttacking ( User . get ( ) ) ) { drawShadedOval ( g2d , srect . x - _NUM , srect . y + srect . height - circleHeight - _NUM , srect . width + _NUM , circleHeight + _NUM , RING_COLOR_ORANGE , _BOOL , _BOOL ) ; } drawAttack ( g2d , x , y , width , height ) ; if ( entity . isDefending ( ) ) { final int sx = srect . x + srect . width - ICON_OFFSET ; final int sy = y + height - _NUM * ICON_OFFSET ; switch ( entity . getResolution ( ) ) { case BLOCKED : blockedSprite . draw ( g2d , sx , sy ) ; break ; case MISSED : missedSprite . draw ( g2d , sx , sy ) ; break ; case HIT : hitSprite . draw ( g2d , sx , sy ) ; break ; default : } } }
public ActivityResolveInfo ( ResolveInfo resolveInfo ) { this . resolveInfo = resolveInfo ; }
private static Pair < String , String > postIndexedLSR ( final long offset , final ITranslationEnvironment environment , final List < ReilInstruction > instructions , final String registerNodeValue1 , final String registerNodeValue2 , final String immediateNodeValue ) { final String address = environment . getNextVariableString ( ) ; final String tmpVar1 = environment . getNextVariableString ( ) ; final String tmpVar2 = environment . getNextVariableString ( ) ; final String index = environment . getNextVariableString ( ) ; long baseOffset = offset ; instructions . add ( ReilHelpers . createStr ( baseOffset ++ , dw , registerNodeValue1 , dw , address ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , dw , _STR + immediateNodeValue , qw , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , qw , tmpVar1 , dw , dWordBitMask , dw , index ) ) ; instructions . add ( ReilHelpers . createAdd ( baseOffset ++ , dw , registerNodeValue1 , dw , index , dw , tmpVar2 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dw , tmpVar2 , dw , dWordBitMask , dw , registerNodeValue1 ) ) ; return new Pair < String , String > ( address , registerNodeValue1 ) ; }
private void endFormals ( ) { if ( hasFormals ) { hasFormals = _BOOL ; buf . append ( _STR ) ; } }
public boolean nextIsSep ( ) { if ( Character . isLetterOrDigit ( str . charAt ( currentPosition ) ) ) return _BOOL ; else return _BOOL ; }
private String extractProjectNameFromUri ( @ NotNull String uri ) { int indexFinishProjectName = uri . lastIndexOf ( _STR ) ; int indexStartProjectName = uri . lastIndexOf ( _STR ) != - _NUM ? uri . lastIndexOf ( _STR ) + _NUM : ( uri . lastIndexOf ( _STR ) + _NUM ) ; if ( indexStartProjectName != _NUM && indexStartProjectName < indexFinishProjectName ) { return uri . substring ( indexStartProjectName , indexFinishProjectName ) ; } if ( indexStartProjectName != _NUM ) { return uri . substring ( indexStartProjectName ) ; } return _STR ; }
public final void addReference ( Object ref ) { refSet . add ( ref ) ; }
private void resetNotes2 ( ) { if ( errorInStatus2 ) { if ( editMode ) { statusText1 . setText ( editStatus2 ) ; } else { statusText2 . setText ( stdStatus2 ) ; } errorInStatus2 = _BOOL ; } }
public RequirementsBuilder addRequireProperty ( String name , RequirementsBuilder builder ) { addProperty ( name , builder ) ; requiredProperties . add ( name ) ; return this ; }
private Cell detectAndAddHit ( float x , float y ) { final Cell cell = checkForNewHit ( x , y ) ; if ( cell != null ) { Cell fillInGapCell = null ; final ArrayList < Cell > pattern = mPattern ; if ( ! pattern . isEmpty ( ) ) { final Cell lastCell = pattern . get ( pattern . size ( ) - _NUM ) ; int dRow = cell . row - lastCell . row ; int dColumn = cell . column - lastCell . column ; int fillInRow = lastCell . row ; int fillInColumn = lastCell . column ; if ( Math . abs ( dRow ) == _NUM && Math . abs ( dColumn ) != _NUM ) { fillInRow = lastCell . row + ( ( dRow > _NUM ) ? _NUM : - _NUM ) ; } if ( Math . abs ( dColumn ) == _NUM && Math . abs ( dRow ) != _NUM ) { fillInColumn = lastCell . column + ( ( dColumn > _NUM ) ? _NUM : - _NUM ) ; } fillInGapCell = Cell . of ( fillInRow , fillInColumn ) ; } if ( fillInGapCell != null && ! mPatternDrawLookup [ fillInGapCell . row ] [ fillInGapCell . column ] ) { addCellToPattern ( fillInGapCell ) ; } addCellToPattern ( cell ) ; if ( mEnableHapticFeedback ) { performHapticFeedback ( HapticFeedbackConstants . VIRTUAL_KEY , HapticFeedbackConstants . FLAG_IGNORE_VIEW_SETTING | HapticFeedbackConstants . FLAG_IGNORE_GLOBAL_SETTING ) ; } return cell ; } return null ; }
public HeadRule ( String dir , String rule ) { String [ ] tmp = P_TAGSETS . split ( rule ) ; int i , size = tmp . length ; b_r2l = dir . equals ( DIR_RIGHT_TO_LEFT ) ; a_tagSets = new HeadTagSet [ size ] ; for ( i = _NUM ; i < size ; i ++ ) a_tagSets [ i ] = new HeadTagSet ( tmp [ i ] ) ; }
public void testNegPosFirstShorter ( ) { byte aBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; int aSign = - _NUM ; int bSign = _NUM ; byte rBytes [ ] = { - _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . or ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , result . signum ( ) ) ; }
@ Override public < T > Future < T > submit ( Callable < T > task ) { synchronized ( this ) { active . incrementAndGet ( ) ; long timeout = _NUM ; while ( queue . remainingCapacity ( ) == _NUM ) { try { if ( timeout <= giveupTime ) { Thread . sleep ( DEFAULT_SLEEP ) ; timeout += DEFAULT_SLEEP ; } else { throw new RuntimeException ( _STR ) ; } } catch ( InterruptedException e ) { throw new RuntimeException ( e ) ; } } return super . submit ( task ) ; } }
public void testSubtractMathContextDiffScalePosNeg ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = - _NUM ; String c = _STR ; int cScale = - _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; MathContext mc = new MathContext ( _NUM , RoundingMode . DOWN ) ; BigDecimal result = aNumber . subtract ( bNumber , mc ) ; assertEquals ( _STR , c , result . toString ( ) ) ; assertEquals ( _STR , cScale , result . scale ( ) ) ; }
protected XSQLDA allocateXSqlDa ( RowDescriptor rowDescriptor ) { if ( rowDescriptor == null || rowDescriptor . getCount ( ) == _NUM ) { final XSQLDA xSqlDa = new XSQLDA ( _NUM ) ; xSqlDa . sqld = xSqlDa . sqln = _NUM ; return xSqlDa ; } final XSQLDA xSqlDa = new XSQLDA ( rowDescriptor . getCount ( ) ) ; for ( int idx = _NUM ; idx < rowDescriptor . getCount ( ) ; idx ++ ) { final FieldDescriptor fieldDescriptor = rowDescriptor . getFieldDescriptor ( idx ) ; final XSQLVAR xSqlVar = xSqlDa . sqlvar [ idx ] ; xSqlVar . sqltype = ( short ) ( fieldDescriptor . getType ( ) | _NUM ) ; xSqlVar . sqlsubtype = ( short ) fieldDescriptor . getSubType ( ) ; xSqlVar . sqlscale = ( short ) fieldDescriptor . getScale ( ) ; xSqlVar . sqllen = ( short ) fieldDescriptor . getLength ( ) ; xSqlVar . sqlind = new ShortByReference ( ) ; final int requiredDataSize = fieldDescriptor . isVarying ( ) ? fieldDescriptor . getLength ( ) + _NUM : fieldDescriptor . getLength ( ) + _NUM ; xSqlVar . sqldata = new Memory ( requiredDataSize ) ; } return xSqlDa ; }
public static void overwrite ( long [ ] vector , long val , int offset , int len ) { int idx = offset > > _NUM ; int bitIdx = offset & _NUM ; int truncatedValLen = Math . min ( len , _NUM - bitIdx ) ; vector [ idx ] &= ~ ( maskBelow ( truncatedValLen ) << bitIdx ) ; vector [ idx ] |= val << bitIdx ; if ( len != truncatedValLen ) { long mask = maskBelow ( len - truncatedValLen ) ; vector [ idx + _NUM ] &= ~ mask ; vector [ idx + _NUM ] |= ( val > > > truncatedValLen ) ; } }
public static boolean isEmpty ( String string ) { if ( null == string ) return _BOOL ; return string . equals ( EMPTY ) ; }
public void addScrollViewListener ( WXScrollViewListener scrollViewListener ) { if ( ! mScrollViewListeners . contains ( scrollViewListener ) ) { mScrollViewListeners . add ( scrollViewListener ) ; } }
static boolean checkStandardUPCEANChecksum ( CharSequence s ) throws FormatException { int length = s . length ( ) ; if ( length == _NUM ) { return _BOOL ; } int sum = _NUM ; for ( int i = length - _NUM ; i >= _NUM ; i -= _NUM ) { int digit = ( int ) s . charAt ( i ) - ( int ) _STR ; if ( digit < _NUM || digit > _NUM ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } sum *= _NUM ; for ( int i = length - _NUM ; i >= _NUM ; i -= _NUM ) { int digit = ( int ) s . charAt ( i ) - ( int ) _STR ; if ( digit < _NUM || digit > _NUM ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } return sum % _NUM == _NUM ; }
Callbacks tryGetCallbacks ( Callbacks oldCallbacks ) { synchronized ( mLock ) { if ( mStopped ) { return null ; } if ( mCallbacks == null ) { return null ; } final Callbacks callbacks = mCallbacks . get ( ) ; if ( callbacks != oldCallbacks ) { return null ; } if ( callbacks == null ) { Log . w ( TAG , _STR ) ; return null ; } return callbacks ; } }
public void beginUpdateMemoryUsed ( long bytesUsed , boolean willSendEvent ) ;
@ Override public Point translateJava2DToScreen ( Point2D java2DPoint ) { Insets insets = getInsets ( ) ; int x = ( int ) ( java2DPoint . getX ( ) * this . scaleX + insets . left ) ; int y = ( int ) ( java2DPoint . getY ( ) * this . scaleY + insets . top ) ; return new Point ( x , y ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
protected FastMap < String > readDeclaredProperties ( WidgetCreatorContext context ) { FastMap < String > declaredProperties = new FastMap < String > ( ) ; String backColor = context . readWidgetProperty ( _STR ) ; if ( backColor != null && backColor . length ( ) > _NUM ) { declaredProperties . put ( _STR , backColor ) ; } String fontName = context . readWidgetProperty ( _STR ) ; if ( fontName != null && fontName . length ( ) > _NUM ) { declaredProperties . put ( _STR , fontName ) ; } String fontSize = context . readWidgetProperty ( _STR ) ; if ( fontSize != null && fontSize . length ( ) > _NUM ) { declaredProperties . put ( _STR , fontSize ) ; } String foreColor = context . readWidgetProperty ( _STR ) ; if ( foreColor != null && foreColor . length ( ) > _NUM ) { declaredProperties . put ( _STR , foreColor ) ; } String justification = context . readWidgetProperty ( _STR ) ; if ( justification != null && justification . length ( ) > _NUM ) { declaredProperties . put ( _STR , justification ) ; } String bold = context . readWidgetProperty ( _STR ) ; if ( bold != null && bold . length ( ) > _NUM ) { declaredProperties . put ( _STR , bold ) ; } String italic = context . readWidgetProperty ( _STR ) ; if ( italic != null && italic . length ( ) > _NUM ) { declaredProperties . put ( _STR , italic ) ; } String subscript = context . readWidgetProperty ( _STR ) ; if ( subscript != null && subscript . length ( ) > _NUM ) { declaredProperties . put ( _STR , subscript ) ; } String superscript = context . readWidgetProperty ( _STR ) ; if ( superscript != null && superscript . length ( ) > _NUM ) { declaredProperties . put ( _STR , superscript ) ; } String underline = context . readWidgetProperty ( _STR ) ; if ( underline != null && underline . length ( ) > _NUM ) { declaredProperties . put ( _STR , underline ) ; } String strikethrough = context . readWidgetProperty ( _STR ) ; if ( strikethrough != null && strikethrough . length ( ) > _NUM ) { declaredProperties . put ( _STR , strikethrough ) ; } return declaredProperties ; }
private void updateTrafficProjections ( ) { List < AirMapTraffic > updated = new ArrayList < > ( ) ; for ( AirMapTraffic traffic : allTraffic ) { if ( traffic . getGroundSpeedKt ( ) > - _NUM && traffic . getTrueHeading ( ) > - _NUM ) { allTraffic . remove ( traffic ) ; Coordinate projected = projectedCoordinate ( traffic ) ; traffic . setCoordinate ( projected ) ; traffic . setShowAlert ( _BOOL ) ; allTraffic . add ( traffic ) ; updated . add ( traffic ) ; } } notifyUpdated ( updated ) ; }
public static void logStackTrace ( Level level , Throwable throwable ) { logStackTrace ( level , throwable , null ) ; }
public static float computeContrastBetweenColors ( int bg , int fg ) { float bgR = Color . red ( bg ) / _NUM ; float bgG = Color . green ( bg ) / _NUM ; float bgB = Color . blue ( bg ) / _NUM ; bgR = ( bgR < _NUM ) ? bgR / _NUM : ( float ) Math . pow ( ( bgR + _NUM ) / _NUM , _NUM ) ; bgG = ( bgG < _NUM ) ? bgG / _NUM : ( float ) Math . pow ( ( bgG + _NUM ) / _NUM , _NUM ) ; bgB = ( bgB < _NUM ) ? bgB / _NUM : ( float ) Math . pow ( ( bgB + _NUM ) / _NUM , _NUM ) ; float bgL = _NUM * bgR + _NUM * bgG + _NUM * bgB ; float fgR = Color . red ( fg ) / _NUM ; float fgG = Color . green ( fg ) / _NUM ; float fgB = Color . blue ( fg ) / _NUM ; fgR = ( fgR < _NUM ) ? fgR / _NUM : ( float ) Math . pow ( ( fgR + _NUM ) / _NUM , _NUM ) ; fgG = ( fgG < _NUM ) ? fgG / _NUM : ( float ) Math . pow ( ( fgG + _NUM ) / _NUM , _NUM ) ; fgB = ( fgB < _NUM ) ? fgB / _NUM : ( float ) Math . pow ( ( fgB + _NUM ) / _NUM , _NUM ) ; float fgL = _NUM * fgR + _NUM * fgG + _NUM * fgB ; return Math . abs ( ( fgL + _NUM ) / ( bgL + _NUM ) ) ; }
@ Override public int read ( ) throws IOException { int ch = super . read ( ) ; if ( ch != - _NUM ) { branch . write ( ch ) ; } return ch ; }
private SublimeBaseMenuItem addInternal ( int group , int id , CharSequence title , CharSequence hint , SublimeBaseMenuItem . ItemType itemType , boolean valueProvidedAsync , CharSequence badgeText , boolean showsIconSpace , boolean addedByUser ) { SublimeBaseMenuItem item ; boolean isGroupHeader = _BOOL ; switch ( itemType ) { case SEPARATOR : item = new SublimeSeparatorMenuItem ( this , group , id ) ; break ; case BADGE : item = new SublimeTextWithBadgeMenuItem ( this , group , id , title , hint , valueProvidedAsync , badgeText , showsIconSpace ) ; break ; case SWITCH : item = new SublimeSwitchMenuItem ( this , group , id , title , hint , valueProvidedAsync , showsIconSpace ) ; break ; case CHECKBOX : item = new SublimeCheckboxMenuItem ( this , group , id , title , hint , valueProvidedAsync , showsIconSpace ) ; break ; case GROUP_HEADER : isGroupHeader = _BOOL ; item = new SublimeGroupHeaderMenuItem ( this , group , id , title , hint , valueProvidedAsync , showsIconSpace ) ; break ; default : item = new SublimeTextMenuItem ( this , group , id , title , hint , valueProvidedAsync , showsIconSpace ) ; break ; } checkExistenceOfGroup ( group ) ; if ( isGroupHeader ) { checkIfGroupHeaderAlreadyExistsForGroup ( group ) ; int index = findGroupIndex ( group ) ; if ( index >= _NUM ) { mItems . add ( index , item ) ; } else { mItems . add ( item ) ; } } else if ( addedByUser ) { if ( group != NO_GROUP_ID ) { int lastGroupIndex = findLastGroupIndex ( group ) ; mItems . add ( lastGroupIndex == mItems . size ( ) ? lastGroupIndex : lastGroupIndex + _NUM , item ) ; } else { mItems . add ( item ) ; } } else { mItems . add ( item ) ; } onItemsChanged ( ) ; return item ; }
public static String decodeBCD ( final short bcd ) { return String . format ( _STR , ( bcd & _NUM ) > > _NUM , bcd & _NUM ) ; }
public void drawBackground ( Graphics g ) { g . fillRect ( _NUM , _NUM , getWidth ( ) , getHeight ( ) ) ; }
public void put ( int key , int value ) { int i = binarySearch ( mKeys , _NUM , mSize , key ) ; if ( i >= _NUM ) { mValues [ i ] = value ; } else { i = ~ i ; if ( mSize >= mKeys . length ) { int n = Math . max ( mSize + _NUM , mKeys . length * _NUM ) ; int [ ] nkeys = new int [ n ] ; int [ ] nvalues = new int [ n ] ; System . arraycopy ( mKeys , _NUM , nkeys , _NUM , mKeys . length ) ; System . arraycopy ( mValues , _NUM , nvalues , _NUM , mValues . length ) ; mKeys = nkeys ; mValues = nvalues ; } if ( mSize - i != _NUM ) { System . arraycopy ( mKeys , i , mKeys , i + _NUM , mSize - i ) ; System . arraycopy ( mValues , i , mValues , i + _NUM , mSize - i ) ; } mKeys [ i ] = key ; mValues [ i ] = value ; mSize ++ ; } }
public void addLayoutEditor ( LayoutEditor panel ) { if ( panels . size ( ) > _NUM ) { for ( int i = _NUM ; i < panels . size ( ) ; i ++ ) { LayoutEditor ed = panels . get ( i ) ; if ( ed == panel ) { return ; } } } panels . add ( panel ) ; }
void triggerWildcardExpander ( final Collection < File > allFiles , final WildcardContext wildcardContext ) throws IOException { LOG . debug ( _STR , allFiles ) ; if ( allFiles . isEmpty ( ) ) { final String message = String . format ( _STR , wildcardContext . getWildcard ( ) ) ; LOG . warn ( message ) ; throw new IOException ( message ) ; } if ( wildcardExpanderHandler != null ) { try { wildcardExpanderHandler . apply ( allFiles ) ; } catch ( final IOException e ) { throw e ; } catch ( final Exception e ) { LOG . debug ( _STR , e ) ; throw new IOException ( _STR + e . getMessage ( ) ) ; } } }
@ POST @ Consumes ( { MediaType . APPLICATION_XML , MediaType . APPLICATION_JSON } ) @ Produces ( { MediaType . APPLICATION_XML , MediaType . APPLICATION_JSON } ) @ CheckPermission ( roles = { Role . TENANT_ADMIN } ) @ Path ( _STR ) public IpInterfaceRestRep createIpInterface ( @ PathParam ( _STR ) URI id , IpInterfaceCreateParam createParam ) throws DatabaseException { Host host = queryObject ( Host . class , id , _BOOL ) ; validateIpInterfaceData ( createParam , null ) ; IpInterface ipInterface = new IpInterface ( ) ; ipInterface . setHost ( host . getId ( ) ) ; ipInterface . setId ( URIUtil . createId ( IpInterface . class ) ) ; populateIpInterface ( createParam , ipInterface ) ; _dbClient . createObject ( ipInterface ) ; auditOp ( OperationTypeEnum . CREATE_HOST_IPINTERFACE , _BOOL , null , ipInterface . auditParameters ( ) ) ; return map ( ipInterface ) ; }
protected List < IEditProposal > collectEditProposals ( ) { List < IEditProposal > proposals = new ArrayList < IEditProposal > ( ) ; View selectedView = getSelectedView ( ) ; if ( selectedView != null ) { if ( proposalProviders != null ) { for ( IEditProposalProvider provider : proposalProviders ) { for ( IEditProposal editProposal : provider . getProposals ( selectedView ) ) { if ( editProposal . isApplicable ( ) ) proposals . add ( editProposal ) ; } } } } return proposals ; }
public ExtensionQuery ( String pluginId , String extensionPointName , String attributeName ) { this . pluginId = extensionPointName . contains ( _STR ) ? null : pluginId ; this . extensionPointName = extensionPointName ; this . attributeName = attributeName ; }
private void ensureNamespaceExists ( Result result ) { DockerImage image = DockerImage . fromImageName ( result . name ) ; if ( image . getNamespace ( ) == null ) { result . name = String . format ( _STR , DEFAULT_NAMESPACE , image . getRepository ( ) ) ; } }
public static < K , V > Map < K , V > of ( K k1 , V v1 , K k2 , V v2 , K k3 , V v3 , K k4 , V v4 , K k5 , V v5 ) { Map map = of ( ) ; map . put ( k1 , v1 ) ; map . put ( k2 , v2 ) ; map . put ( k3 , v3 ) ; map . put ( k4 , v4 ) ; map . put ( k5 , v5 ) ; return map ; }
public void testFilteredClassifier ( ) { Instances data ; int i ; if ( m_FilteredClassifier == null ) { return ; } try { data = getFilteredClassifierData ( ) ; m_FilteredClassifier . buildClassifier ( data ) ; for ( i = _NUM ; i < data . numInstances ( ) ; i ++ ) { m_FilteredClassifier . classifyInstance ( data . instance ( i ) ) ; } } catch ( Exception e ) { fail ( _STR + e . toString ( ) ) ; } }
public static String upperFirstChar ( String string ) { if ( string == null ) return null ; if ( string . length ( ) <= _NUM ) return string . toLowerCase ( ) ; StringBuilder sb = new StringBuilder ( string ) ; sb . setCharAt ( _NUM , Character . toUpperCase ( sb . charAt ( _NUM ) ) ) ; return sb . toString ( ) ; }
protected int chooseRandomIndexBasedOnProportions ( double [ ] proportionArray , Random random ) { double probSum ; double val ; int index ; double sum ; probSum = Utils . sum ( proportionArray ) ; val = random . nextDouble ( ) * probSum ; index = _NUM ; sum = _NUM ; while ( ( sum <= val ) && ( index < proportionArray . length ) ) { sum += proportionArray [ index ++ ] ; } return index - _NUM ; }
private void checkWidth ( final int [ ] rect ) { final int x1 = rect [ _NUM ] ; final int y2 = rect [ _NUM ] ; final int y1 = y2 + rect [ _NUM ] ; final int x2 = x1 + rect [ _NUM ] ; if ( x1 < pageX1 ) { pageX1 = x1 ; } if ( x2 > pageX2 ) { pageX2 = x2 ; } if ( y1 > pageY1 ) { pageY1 = y1 ; } if ( y2 < pageY2 ) { pageY2 = y2 ; } }
@ NotNull public static Map < RadComponent , List < RadComponent > > groupSiblings ( @ NotNull List < ? extends RadComponent > components ) { Map < RadComponent , List < RadComponent > > siblingLists = new HashMap < RadComponent , List < RadComponent > > ( ) ; if ( components . isEmpty ( ) ) { return siblingLists ; } if ( components . size ( ) == _NUM ) { RadComponent component = components . get ( _NUM ) ; siblingLists . put ( component . getParent ( ) , Collections . singletonList ( component ) ) ; return siblingLists ; } for ( RadComponent component : components ) { RadComponent parent = component . getParent ( ) ; List < RadComponent > children = siblingLists . get ( parent ) ; if ( children == null ) { children = new ArrayList < RadComponent > ( ) ; siblingLists . put ( parent , children ) ; } children . add ( component ) ; } return siblingLists ; }
private int countNonNewline ( String str , int off , int len ) { for ( int cnt = _NUM ; cnt < len ; cnt ++ ) { final int pos = off + cnt ; if ( str . charAt ( pos ) == UNIX_NEWLINE ) { return cnt ; } if ( str . charAt ( pos ) == CARRIAGE_RETURN ) { return cnt ; } } return len ; }
private static int convertSpanToSparseGrid ( int curIx , int span , TreeSet < Integer > indexes ) { int lastIx = curIx + span ; int retSpan = _NUM ; for ( Integer ix : indexes ) { if ( ix <= curIx ) continue ; if ( ix >= lastIx ) break ; retSpan ++ ; } return retSpan ; }
@ Override public boolean equals ( Object otherRules ) { if ( this == otherRules ) { return _BOOL ; } if ( otherRules instanceof ZoneRules ) { ZoneRules other = ( ZoneRules ) otherRules ; return Arrays . equals ( standardTransitions , other . standardTransitions ) && Arrays . equals ( standardOffsets , other . standardOffsets ) && Arrays . equals ( savingsInstantTransitions , other . savingsInstantTransitions ) && Arrays . equals ( wallOffsets , other . wallOffsets ) && Arrays . equals ( lastRules , other . lastRules ) ; } return _BOOL ; }
public String description ( ) { StringBuilder sb = new StringBuilder ( ) ; if ( isCombo ( ) ) { int i = _NUM ; for ( NewComboLeg leg : m_comboLegs ) { if ( i ++ > _NUM ) { sb . append ( _STR ) ; } sb . append ( leg . toString ( ) ) ; } } else { sb . append ( m_symbol ) ; app ( sb , m_secType ) ; app ( sb , m_exchange ) ; if ( m_exchange != null && m_exchange . equals ( _STR ) && m_primaryExch != null ) { app ( sb , m_primaryExch ) ; } app ( sb , m_expiry ) ; if ( m_strike != _NUM ) { app ( sb , m_strike ) ; } if ( m_right != Right . None ) { app ( sb , m_right ) ; } } return sb . toString ( ) ; }
public void addClaimedSignerRole ( final String claimedSignerRole ) { if ( ( claimedSignerRole == null ) || ( claimedSignerRole . length ( ) == _NUM ) ) { throw new NullPointerException ( _STR ) ; } if ( claimedSignerRoles == null ) { claimedSignerRoles = new ArrayList < String > ( ) ; } claimedSignerRoles . add ( claimedSignerRole ) ; }
@ SuppressWarnings ( _STR ) @ GwtIncompatible ( _STR ) public static < K extends Object , V extends Object > void writeMap ( Map < K , V > map , ObjectOutputStream stream ) throws IOException { stream . writeInt ( map . size ( ) ) ; for ( Map . Entry < K , V > entry : map . entrySet ( ) ) { stream . writeObject ( entry . getKey ( ) ) ; stream . writeObject ( entry . getValue ( ) ) ; } }
protected void sleep ( int sleepMillis , int sleepNanos ) throws InterruptedException { Thread . sleep ( sleepMillis , sleepNanos ) ; }
public static void restorePreviousOutAndErrStream ( ) { if ( ! alreadyMuted ) { return ; } System . setOut ( latestOut ) ; System . setErr ( latestErr ) ; alreadyMuted = _BOOL ; }
public static BigInteger CRT ( List < BigInteger > congs , List < BigInteger > moduli ) { BigInteger [ ] cs = ArrayConverter . convertListToArray ( congs ) ; BigInteger [ ] ms = ArrayConverter . convertListToArray ( moduli ) ; return CRT ( cs , ms ) ; }
private int measureHeight ( int measureSpec ) { int result = _NUM ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; mAscent = ( int ) mTextPaint . ascent ( ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) ( - mAscent + mTextPaint . descent ( ) ) + getPaddingTop ( ) + getPaddingBottom ( ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
public ByteVector putByteArray ( final byte [ ] b , final int off , final int len ) { if ( length + len > data . length ) { enlarge ( len ) ; } if ( b != null ) { System . arraycopy ( b , off , data , length , len ) ; } length += len ; return this ; }
public void testCase17 ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , - _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . remainder ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
protected < T extends TaskServiceDocument < E > , E extends Enum < E > > T waitForTaskCompletion ( String documentSelfLink , Class < T > type ) throws Throwable { return waitForPropertyValue ( documentSelfLink , type , TaskServiceDocument . FIELD_NAME_TASK_STAGE , Arrays . asList ( TaskStage . FINISHED , TaskStage . FAILED , TaskStage . CANCELLED ) , _BOOL , waitForStageChangeCountLonger ( ) ) ; }
public Action ( String content , int priority ) { this . content = content . trim ( ) ; this . priority = priority ; }
private List < EndIsland > findSurroundingIslands ( int chunkX , int chunkY , int chunksPerFragmentX , int chunksPerFragmentY ) { List < EndIsland > result = new LinkedList < EndIsland > ( ) ; for ( int y = - SURROUNDING_CHUNKS ; y <= chunksPerFragmentY + SURROUNDING_CHUNKS ; y ++ ) { for ( int x = - SURROUNDING_CHUNKS ; x <= chunksPerFragmentX + SURROUNDING_CHUNKS ; x ++ ) { EndIsland island = tryCreateEndIsland ( chunkX + x , chunkY + y ) ; if ( island != null ) { result . add ( island ) ; } } } return result ; }
void insertFunction2 ( ByteBuffer bb ) { int baseSec = ( int ) ( windowId > > _NUM ) ; bb . putInt ( baseSec ) ; Integer operId = operatorId ; for ( int i = _NUM ; i < _NUM ; i ++ ) { byte num = ( byte ) ( operId > > _NUM * ( _NUM - i ) ) ; bb . put ( num ) ; } bb . putShort ( ( short ) ( windowId & _NUM ) ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { byte num = ( byte ) ( tupleId > > _NUM * ( _NUM - i ) ) ; bb . put ( num ) ; } }
private static boolean calculateGap ( Rectangle a , Rectangle b , Rectangle gap ) { if ( a . intersects ( b ) ) { gap . width = _NUM ; return _BOOL ; } int ax1 = a . x ; int ax2 = a . x + a . width ; int ay1 = a . y ; int ay2 = a . y + a . height ; int bx1 = b . x ; int bx2 = b . x + b . width ; int by1 = b . y ; int by2 = b . y + b . height ; int xOverlap = Math . min ( ax2 , bx2 ) - Math . max ( ax1 , bx1 ) ; int yOverlap = Math . min ( ay2 , by2 ) - Math . max ( ay1 , by1 ) ; if ( xOverlap <= _NUM && yOverlap <= _NUM ) { gap . width = _NUM ; return _BOOL ; } if ( xOverlap > _NUM ) { gap . x = Math . max ( ax1 , bx1 ) ; gap . y = ( ay1 > by1 ) ? by2 : ay2 ; gap . width = xOverlap ; gap . height = - yOverlap ; } if ( yOverlap > _NUM ) { gap . x = ( ax1 > bx1 ) ? bx2 : ax2 ; gap . y = Math . max ( ay1 , by1 ) ; gap . width = - xOverlap ; gap . height = yOverlap ; } return _BOOL ; }
public boolean nextTile ( ) throws ModelControlException { boolean movedToRow = super . nextTile ( ) ; if ( movedToRow ) { curTile = getTileIndex ( ) ; setDisplayFieldValue ( TXT_PARENT_INDEX , parentIdx ) ; setDisplayFieldValue ( TXT_CHOICE , choices [ curTile ] ) ; setDisplayFieldValue ( TXT_INDEX , Integer . toString ( curTile ) ) ; } return movedToRow ; }
private boolean journalRebuildRequired ( ) { final int REDUNDANT_OP_COMPACT_THRESHOLD = _NUM ; return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries . size ( ) ; }
public boolean hasMyomerBooster ( ) { for ( Mounted mEquip : getMisc ( ) ) { MiscType mtype = ( MiscType ) mEquip . getType ( ) ; if ( mtype . hasFlag ( MiscType . F_MASC ) && ! mEquip . isInoperable ( ) ) { return _BOOL ; } } return _BOOL ; }
public static boolean isIntentAvailable ( Context context , String action ) { final PackageManager packageManager = context . getPackageManager ( ) ; final Intent intent = new Intent ( action ) ; Log . d ( MP_TAG , _STR + action ) ; List < ResolveInfo > list = packageManager . queryIntentServices ( intent , PackageManager . MATCH_DEFAULT_ONLY ) ; return list . size ( ) > _NUM ; }
@ KnownFailure ( _STR ) public void test_wrap_02 ( ) throws SSLException { String host = _STR ; int port = _NUM ; ByteBuffer bb = ByteBuffer . allocate ( _NUM ) ; ByteBuffer [ ] bbA = { ByteBuffer . allocate ( _NUM ) , ByteBuffer . allocate ( _NUM ) , ByteBuffer . allocate ( _NUM ) } ; SSLEngine sse = getEngine ( host , port ) ; sse . setUseClientMode ( _BOOL ) ; try { sse . wrap ( bbA , - _NUM , _NUM , bb ) ; fail ( _STR ) ; } catch ( IndexOutOfBoundsException iobe ) { } try { sse . wrap ( bbA , _NUM , - _NUM , bb ) ; fail ( _STR ) ; } catch ( IndexOutOfBoundsException iobe ) { } try { sse . wrap ( bbA , bbA . length + _NUM , bbA . length , bb ) ; fail ( _STR ) ; } catch ( IndexOutOfBoundsException iobe ) { } try { sse . wrap ( bbA , _NUM , bbA . length + _NUM , bb ) ; fail ( _STR ) ; } catch ( IndexOutOfBoundsException iobe ) { } }
private void sendCONNECTRequest ( ) throws IOException { int port = url . getPort ( ) ; requests . set ( _NUM , HTTP_CONNECT + _STR + connectRequestURI ( url ) + _STR + httpVersion , null ) ; requests . setIfNotSet ( _STR , userAgent ) ; String host = url . getHost ( ) ; if ( port != - _NUM && port != url . getDefaultPort ( ) ) { host += _STR + String . valueOf ( port ) ; } requests . setIfNotSet ( _STR , host ) ; requests . setIfNotSet ( _STR , acceptString ) ; if ( http . getHttpKeepAliveSet ( ) ) { requests . setIfNotSet ( _STR , _STR ) ; } setPreemptiveProxyAuthentication ( requests ) ; if ( logger . isLoggable ( PlatformLogger . Level . FINE ) ) { logger . fine ( requests . toString ( ) ) ; } http . writeRequests ( requests , null ) ; }
private boolean isSelfSigned ( X509Certificate cert ) { return signedBy ( cert , cert ) ; }
@ RequestMapping ( value = { _STR , _STR } , method = RequestMethod . PUT ) @ ResponseBody public RestWrapper insert ( @ ModelAttribute ( _STR ) @ Valid UserRoles userRoles , BindingResult bindingResult , Principal principal ) { RestWrapper restWrapper = null ; if ( bindingResult . hasErrors ( ) ) { BindingResultError bindingResultError = new BindingResultError ( ) ; return bindingResultError . errorMessage ( bindingResult ) ; } try { com . wipro . ats . bdre . md . dao . jpa . UserRoles jpaUserRoles = new com . wipro . ats . bdre . md . dao . jpa . UserRoles ( ) ; jpaUserRoles . setUserRoleId ( userRoles . getUserRoleId ( ) ) ; jpaUserRoles . setRole ( userRoles . getRole ( ) ) ; Users users = new Users ( ) ; users . setUsername ( userRoles . getUsername ( ) ) ; jpaUserRoles . setUsers ( users ) ; Integer userRolesId = userRolesDAO . insert ( jpaUserRoles ) ; userRoles . setUserRoleId ( userRolesId ) ; restWrapper = new RestWrapper ( userRoles , RestWrapper . OK ) ; LOGGER . info ( _STR + userRoles . getUserRoleId ( ) + _STR + principal . getName ( ) + userRoles ) ; } catch ( Exception e ) { LOGGER . error ( e ) ; restWrapper = new RestWrapper ( e . getMessage ( ) , RestWrapper . ERROR ) ; } return restWrapper ; }
public Set < WordToken > nearestWords ( final int distance , final WordToken ... start ) { return nearestWords ( distance , null , Arrays . asList ( start ) ) ; }
public DERUTCTime ( Date time ) { SimpleDateFormat dateF = new SimpleDateFormat ( _STR ) ; dateF . setTimeZone ( new SimpleTimeZone ( _NUM , _STR ) ) ; this . time = Strings . toByteArray ( dateF . format ( time ) ) ; }
public void add ( String category , String [ ] titles , double [ ] values ) { mCategories . add ( category ) ; mTitles . add ( titles ) ; mValues . add ( values ) ; }
public void rewind ( ) { synchronized ( used ) { for ( ParameterPair pair : used ) { current . addParameter ( pair . option , pair . value ) ; } used . clear ( ) ; } }
public List < Interval > merge ( List < Interval > intervals ) { List < Interval > res = new ArrayList < > ( ) ; if ( intervals == null || intervals . size ( ) == _NUM ) { return res ; } Collections . sort ( intervals , null ) ; Interval prev = null ; for ( Interval i : intervals ) { if ( prev == null || prev . end < i . start ) { res . add ( i ) ; prev = i ; } else if ( i . end > prev . end ) { prev . end = i . end ; } } return res ; }
private String formatType ( Object typeRep ) { StringTokenizer tokenizer = new StringTokenizer ( typeRep . toString ( ) , _STR , _BOOL ) ; StringBuilder sb = new StringBuilder ( ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . length ( ) == _NUM || token . lastIndexOf ( _STR ) == - _NUM ) sb . append ( token ) ; else { int index = token . lastIndexOf ( _STR ) ; sb . append ( token . substring ( index + _NUM ) ) ; } } return sb . toString ( ) ; }
@ NotNull public static String sha1 ( @ NotNull File keyStoreFile ) throws Exception { return sha1 ( keyStoreFile , null , null ) ; }
@ Override protected void onSizeChanged ( int w , int h , int oldw , int oldh ) { super . onSizeChanged ( w , h , oldw , oldh ) ; setupBounds ( w , h ) ; setupPaints ( ) ; invalidate ( ) ; }
@ Override public void panDomainAxes ( double panRange , PlotRenderingInfo info , Point2D source ) { XYPlot subplot = findSubplot ( info , source ) ; if ( subplot == null ) { return ; } if ( ! subplot . isDomainPannable ( ) ) { return ; } PlotRenderingInfo subplotInfo = info . getSubplotInfo ( info . getSubplotIndex ( source ) ) ; if ( subplotInfo == null ) { return ; } for ( int i = _NUM ; i < subplot . getDomainAxisCount ( ) ; i ++ ) { ValueAxis domainAxis = subplot . getDomainAxis ( i ) ; if ( domainAxis != null ) { domainAxis . pan ( panRange ) ; } } }
private void init ( ) { startController = new PourStartController ( ) ; startController . setCheckView ( this ) ; waveController = new WaveController ( ) ; waveController . setCheckView ( this ) ; PourFinishController finishController = new PourFinishController ( ) ; finishController . setCheckView ( this ) ; TickController tickController = new TickController ( ) ; tickController . setCheckView ( this ) ; List < BaseController > finishControllers = new ArrayList < > ( ) ; finishControllers . add ( finishController ) ; finishControllers . add ( tickController ) ; this . finishControllers = finishControllers ; }
private JLabel createIconLabel ( JCheckBox checkBox ) { checkBox . setOpaque ( _BOOL ) ; checkBox . setSize ( checkBox . getMinimumSize ( ) ) ; Image image = new BufferedImage ( checkBox . getWidth ( ) , checkBox . getHeight ( ) , Transparency . TRANSLUCENT ) ; Graphics g = image . getGraphics ( ) ; checkBox . paint ( g ) ; g . dispose ( ) ; return new JLabel ( new ImageIcon ( image ) ) ; }
public void closeWindow ( ) { WindowEvent ev = new WindowEvent ( frame , WindowEvent . WINDOW_CLOSING ) ; frame . dispatchEvent ( ev ) ; }
private void populateHostData ( Host host , HostParam param ) { if ( param . getName ( ) != null ) { host . setLabel ( param . getName ( ) ) ; } if ( param . getHostName ( ) != null ) { host . setHostName ( param . getHostName ( ) ) ; } if ( param . getCluster ( ) != null ) { host . setCluster ( param . getCluster ( ) ) ; } if ( param . getOsVersion ( ) != null ) { host . setOsVersion ( param . getOsVersion ( ) ) ; } if ( param . getUserName ( ) != null ) { host . setUsername ( param . getUserName ( ) ) ; } if ( param . getPassword ( ) != null ) { host . setPassword ( param . getPassword ( ) ) ; } if ( param . getPortNumber ( ) != null ) { host . setPortNumber ( param . getPortNumber ( ) ) ; } if ( param . getUseSsl ( ) != null ) { host . setUseSSL ( param . getUseSsl ( ) ) ; } if ( param . getType ( ) != null ) { host . setType ( param . getType ( ) ) ; } if ( param . getDiscoverable ( ) != null ) { host . setDiscoverable ( param . getDiscoverable ( ) ) ; } if ( param . getVcenterDataCenter ( ) != null ) { host . setVcenterDataCenter ( NullColumnValueGetter . isNullURI ( param . getVcenterDataCenter ( ) ) ? NullColumnValueGetter . getNullURI ( ) : param . getVcenterDataCenter ( ) ) ; } Cluster cluster = null ; if ( ! NullColumnValueGetter . isNullURI ( param . getCluster ( ) ) ) { cluster = queryObject ( Cluster . class , param . getCluster ( ) , _BOOL ) ; if ( ! NullColumnValueGetter . isNullURI ( cluster . getVcenterDataCenter ( ) ) ) { host . setVcenterDataCenter ( cluster . getVcenterDataCenter ( ) ) ; } if ( ! NullColumnValueGetter . isNullURI ( cluster . getProject ( ) ) ) { host . setProject ( cluster . getProject ( ) ) ; } } if ( param . getBootVolume ( ) != null ) { host . setBootVolumeId ( NullColumnValueGetter . isNullURI ( param . getBootVolume ( ) ) ? NullColumnValueGetter . getNullURI ( ) : param . getBootVolume ( ) ) ; } }
@ Nullable public AvdInfo createOrUpdateAvd ( @ Nullable AvdInfo currentInfo , @ NotNull String avdName , @ NotNull Device device , @ NotNull SystemImageDescription systemImageDescription , @ NotNull ScreenOrientation orientation , boolean isCircular , @ Nullable String sdCard , @ Nullable File skinFolder , @ NotNull Map < String , String > hardwareProperties , boolean createSnapshot ) { if ( ! initIfNecessary ( ) ) { return null ; } File avdFolder ; try { if ( currentInfo != null ) { avdFolder = new File ( currentInfo . getDataFolderPath ( ) ) ; } else { avdFolder = AvdInfo . getDefaultAvdFolder ( myAvdManager , avdName , myFileOp , _BOOL ) ; } } catch ( AndroidLocation . AndroidLocationException e ) { IJ_LOG . error ( _STR + avdName , e ) ; return null ; } Dimension resolution = device . getScreenSize ( orientation ) ; assert resolution != null ; String skinName = null ; if ( skinFolder == null && isCircular ) { skinFolder = getRoundSkin ( systemImageDescription ) ; } if ( FileUtil . filesEqual ( skinFolder , AvdWizardUtils . NO_SKIN ) ) { skinFolder = null ; } if ( skinFolder == null ) { skinName = String . format ( _STR , Math . round ( resolution . getWidth ( ) ) , Math . round ( resolution . getHeight ( ) ) ) ; } if ( orientation == ScreenOrientation . LANDSCAPE ) { hardwareProperties . put ( HardwareProperties . HW_INITIAL_ORIENTATION , ScreenOrientation . LANDSCAPE . getShortDisplayValue ( ) . toLowerCase ( Locale . ROOT ) ) ; } if ( currentInfo != null && ! avdName . equals ( currentInfo . getName ( ) ) ) { boolean success = myAvdManager . moveAvd ( currentInfo , avdName , currentInfo . getDataFolderPath ( ) , SDK_LOG ) ; if ( ! success ) { return null ; } } return myAvdManager . createAvd ( avdFolder , avdName , systemImageDescription . getSystemImage ( ) , skinFolder , skinName , sdCard , hardwareProperties , device . getBootProps ( ) , createSnapshot , _BOOL , currentInfo != null , SDK_LOG ) ; }
public void engineDeleteEntry ( String alias ) throws KeyStoreException { synchronized ( entries ) { entries . remove ( alias . toLowerCase ( Locale . ENGLISH ) ) ; } }
public DisjointSets ( int numElements ) { array = new int [ numElements ] ; Arrays . fill ( array , - _NUM ) ; }
public final void printClusters ( PrintWriter out , List < ClusterData > clusterData , int [ ] matIndexToMsgInternalId ) throws AdeException { if ( m_finalClusters == null ) { updateClusters ( clusterData , matIndexToMsgInternalId ) ; } for ( Map . Entry < String , Collection < Integer > > entry : m_finalClusters . entrySet ( ) ) { final String n = entry . getKey ( ) ; final Collection < Integer > c = entry . getValue ( ) ; out . printf ( _STR , n ) ; for ( int m : c ) { out . printf ( _STR , matIndexToMsgInternalId [ m ] ) ; } out . println ( ) ; } }
protected void addToGUI ( JPanel gui , JTextField b , String cmd ) { b . setActionCommand ( cmd ) ; b . addActionListener ( this ) ; gui . add ( b ) ; }
public synchronized void remove ( int index ) { mCategories . remove ( index ) ; mValues . remove ( index ) ; }
static TokenStream wrap ( String fieldName , Analyzer indexAnalyzer , String content , char splitChar ) throws IOException { if ( indexAnalyzer . getOffsetGap ( fieldName ) != _NUM ) { throw new IllegalArgumentException ( _STR + fieldName + _STR ) ; } int splitCharIdx = content . indexOf ( splitChar ) ; if ( splitCharIdx == - _NUM ) { return indexAnalyzer . tokenStream ( fieldName , content ) ; } TokenStream subTokenStream = indexAnalyzer . tokenStream ( fieldName , content . substring ( _NUM , splitCharIdx ) ) ; return new MultiValueTokenStream ( subTokenStream , fieldName , indexAnalyzer , content , splitChar , splitCharIdx ) ; }
public final boolean check_trace ( Polyline p_polyline , int p_half_width , int p_layer , NetNosList p_net_no_arr , int p_clearance_class_no , int p_max_recursion_depth , int p_max_via_recursion_depth , int p_max_spring_over_recursion_depth ) { AwtreeShapeSearch search_tree = search_tree_manager . get_default_tree ( ) ; int compensated_half_width = p_half_width + search_tree . get_clearance_compensation ( p_clearance_class_no , p_layer ) ; ArrayList < ShapeTile > trace_shapes = p_polyline . offset_shapes ( compensated_half_width , _NUM , p_polyline . corner_count ( ) ) ; for ( int index = _NUM ; index < trace_shapes . size ( ) ; ++ index ) { ShapeTile curr_trace_shape = trace_shapes . get ( index ) ; BrdFromSide from_side = new BrdFromSide ( p_polyline , index + _NUM , curr_trace_shape ) ; boolean check_shove_ok = shove_trace_algo . shove_trace_check ( curr_trace_shape , from_side , null , p_layer , p_net_no_arr , p_clearance_class_no , p_max_recursion_depth , p_max_via_recursion_depth , p_max_spring_over_recursion_depth , null ) ; if ( ! check_shove_ok ) return _BOOL ; } return _BOOL ; }
public static void delete ( File fileOrFolder ) throws IOException { if ( fileOrFolder != null ) delete ( fileOrFolder . toPath ( ) ) ; }
public static double [ ] expandArrayD ( int bufferSize , double [ ] currentArray ) { if ( currentArray == null ) { return new double [ bufferSize * _NUM ] ; } int length = currentArray . length ; double [ ] ret = new double [ length + bufferSize * _NUM ] ; System . arraycopy ( currentArray , _NUM , ret , _NUM , length ) ; return ret ; }
@ SuppressWarnings ( _STR ) public void postProcessBeanFactory ( ConfigurableListableBeanFactory configurableListableBeanFactory ) { if ( configurableListableBeanFactory . containsBean ( sessionFactoryBeanName ) ) { BeanDefinition sessionFactoryBeanDefinition = configurableListableBeanFactory . getBeanDefinition ( sessionFactoryBeanName ) ; MutablePropertyValues propertyValues = sessionFactoryBeanDefinition . getPropertyValues ( ) ; if ( mappingResources != null ) { PropertyValue propertyValue = propertyValues . getPropertyValue ( _STR ) ; if ( propertyValue == null ) { propertyValue = new PropertyValue ( _STR , new ArrayList ( ) ) ; propertyValues . addPropertyValue ( propertyValue ) ; } List existingMappingResources = ( List ) propertyValue . getValue ( ) ; existingMappingResources . addAll ( mappingResources ) ; } if ( annotatedClasses != null ) { PropertyValue propertyValue = propertyValues . getPropertyValue ( _STR ) ; if ( propertyValue == null ) { propertyValue = new PropertyValue ( _STR , new ArrayList ( ) ) ; propertyValues . addPropertyValue ( propertyValue ) ; } List existingMappingResources = ( List ) propertyValue . getValue ( ) ; existingMappingResources . addAll ( annotatedClasses ) ; } if ( configLocations != null ) { PropertyValue propertyValue = propertyValues . getPropertyValue ( _STR ) ; if ( propertyValue == null ) { propertyValue = new PropertyValue ( _STR , new ArrayList ( ) ) ; propertyValues . addPropertyValue ( propertyValue ) ; } List existingConfigLocations = ( List ) propertyValue . getValue ( ) ; existingConfigLocations . addAll ( configLocations ) ; } if ( hibernateProperties != null ) { PropertyValue propertyValue = propertyValues . getPropertyValue ( _STR ) ; if ( propertyValue == null ) { propertyValue = new PropertyValue ( _STR , new Properties ( ) ) ; propertyValues . addPropertyValue ( propertyValue ) ; } Properties existingHibernateProperties = ( Properties ) propertyValue . getValue ( ) ; existingHibernateProperties . putAll ( hibernateProperties ) ; } } else { throw new NoSuchBeanDefinitionException ( _STR + sessionFactoryBeanName + _STR + _STR ) ; } }
protected int encode ( double value , double lower , double upper , int nbits ) { if ( value < lower ) return _NUM ; int maxval = ( int ) ( Math . pow ( _NUM , nbits ) - _NUM ) ; if ( value >= upper ) return maxval ; return ( int ) ( ( value - lower ) * ( ( maxval - _NUM ) / ( upper - lower ) ) ) ; }
public long skipBytes ( long n ) throws IOException { long count = _NUM ; long gotsofar = _NUM ; if ( inputStream == null ) { reopen ( ) ; if ( inputStream == null ) { reopen ( ) ; throw new IOException ( _STR ) ; } } while ( count < n ) { gotsofar = inputStream . skip ( n - count ) ; if ( gotsofar == _NUM ) { Debug . error ( _STR + n + _STR ) ; break ; } count += gotsofar ; } count ( ( int ) count ) ; return count ; }
private void createLock ( ) throws IOException { synchronized ( LockableFileWriter . class ) { if ( ! lockFile . createNewFile ( ) ) { throw new IOException ( _STR + lockFile . getAbsolutePath ( ) + _STR ) ; } lockFile . deleteOnExit ( ) ; } }
public void handleTblDSAttributeMapListHrefActionRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; setPageSessionAttribute ( PROPERTY_ATTRIBUTE , ( HashMap ) values ) ; WSPPServiceDSAttributeMapListEditViewBean vb = ( WSPPServiceDSAttributeMapListEditViewBean ) getViewBean ( WSPPServiceDSAttributeMapListEditViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; vb . populateValues ( ( String ) getDisplayFieldValue ( _STR ) ) ; vb . forwardTo ( getRequestContext ( ) ) ; } catch ( AMConsoleException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , _STR , e . getMessage ( ) ) ; forwardTo ( ) ; } }
private V doGet ( Object key ) { if ( key == null ) throw new NullPointerException ( ) ; Comparator < ? super K > cmp = comparator ; outer : for ( ; ; ) { for ( Node < K , V > b = findPredecessor ( key , cmp ) , n = b . next ; ; ) { Object v ; int c ; if ( n == null ) break outer ; Node < K , V > f = n . next ; if ( n != b . next ) break ; if ( ( v = n . value ) == null ) { n . helpDelete ( b , f ) ; break ; } if ( b . value == null || v == n ) break ; if ( ( c = cpr ( cmp , key , n . key ) ) == _NUM ) { @ SuppressWarnings ( _STR ) V vv = ( V ) v ; return vv ; } if ( c < _NUM ) break outer ; b = n ; n = f ; } } return null ; }
void handleSwfLoadedEvent ( SwfLoadedEvent e ) { dumpSwfLoadedLine ( e ) ; }
private void quickReply ( ) { quickReplySmsMessage = smsPopupPager . getActiveMessage ( ) ; quickReply ( quickReplySmsMessage . getReplyText ( ) ) ; }
@ Override protected synchronized void write ( long offset , byte [ ] b ) throws IOException { if ( byteBuffer != null ) { byteBuffer . position ( ( int ) offset ) ; byteBuffer . put ( b ) ; } else { throw new IOException ( _STR + getPath ( ) + _STR ) ; } }
public boolean hasChanged ( ) { return System . identityHashCode ( config ) != initialHash ; }
void fixCompatibility ( View root ) { Queue < View > queue = new LinkedList < View > ( ) ; queue . add ( root ) ; View view = null ; while ( ( view = queue . poll ( ) ) != null ) { if ( view instanceof ViewGroup ) { ViewGroup group = ( ViewGroup ) view ; for ( int i = _NUM ; i < group . getChildCount ( ) ; i ++ ) { queue . add ( group . getChildAt ( i ) ) ; } } } }
protected abstract Set < SocketAddress > bindInternal ( List < ? extends SocketAddress > localAddresses ) throws Exception ;
public void substituteHeader ( int state , String header ) throws AuthLoginException { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + state + _STR + header ) ; } if ( state > stateLength ) { throw new AuthLoginException ( bundleName , _STR , new Object [ ] { new Integer ( state ) } ) ; } Callback [ ] ext = getCallback ( state ) ; if ( ext . length <= _NUM ) { throw new AuthLoginException ( bundleName , _STR , null ) ; } if ( ( header != null ) && ( header . length ( ) != _NUM ) ) { PagePropertiesCallback pc = ( PagePropertiesCallback ) ( ( Callback [ ] ) internal . get ( state - _NUM ) ) [ _NUM ] ; pc . setHeader ( header ) ; } }
public static Service createService ( PatternTimetable timetable ) { Calendar calendar = new Calendar ( ) ; calendar . monday = timetable . monday ? _NUM : _NUM ; calendar . tuesday = timetable . tuesday ? _NUM : _NUM ; calendar . wednesday = timetable . wednesday ? _NUM : _NUM ; calendar . thursday = timetable . thursday ? _NUM : _NUM ; calendar . friday = timetable . friday ? _NUM : _NUM ; calendar . saturday = timetable . saturday ? _NUM : _NUM ; calendar . sunday = timetable . sunday ? _NUM : _NUM ; StringBuilder nameBuilder = new StringBuilder ( _STR ) ; nameBuilder . append ( timetable . monday ? _STR : _STR ) ; nameBuilder . append ( timetable . monday ? _STR : _STR ) ; nameBuilder . append ( timetable . monday ? _STR : _STR ) ; nameBuilder . append ( timetable . monday ? _STR : _STR ) ; nameBuilder . append ( timetable . monday ? _STR : _STR ) ; nameBuilder . append ( timetable . monday ? _STR : _STR ) ; nameBuilder . append ( timetable . monday ? _STR : _STR ) ; Service service = new Service ( nameBuilder . toString ( ) ) ; calendar . start_date = _NUM ; calendar . end_date = _NUM ; service . calendar = calendar ; return service ; }
public boolean remove ( ImageInfo object ) { final int location = getLocation ( object ) ; final boolean removed = data . remove ( object ) ; notifyItemRemoved ( location ) ; return removed ; }
public T allowedUsers ( User ... users ) { List < User > usersList = Arrays . asList ( users ) ; this . userPredicate = null ; return instance ( ) ; }
VPlexDistributedDeviceInfo findDistributedDevice ( String deviceName ) throws VPlexApiException { return findDistributedDevice ( deviceName , _BOOL ) ; }
@ SuppressWarnings ( _STR ) public static < T extends Packet > void registerOutListener ( final Class < T > type , Player player , Predicate < T > listener ) { NetworkManagerWrapper wrapper = wrapNetworkManager ( player ) ; wrapper . registerOutgoingListener ( type , listener ) ; }
static CopyState readCopyState ( DataInput in ) throws IOException { byte [ ] infosBytes = new byte [ in . readVInt ( ) ] ; in . readBytes ( infosBytes , _NUM , infosBytes . length ) ; long gen = in . readVLong ( ) ; long version = in . readVLong ( ) ; Map < String , FileMetaData > files = readFilesMetaData ( in ) ; int count = in . readVInt ( ) ; Set < String > completedMergeFiles = new HashSet < > ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { completedMergeFiles . add ( in . readString ( ) ) ; } long primaryGen = in . readVLong ( ) ; return new CopyState ( files , version , gen , infosBytes , completedMergeFiles , primaryGen , null ) ; }
public void notifyTasks ( ) { if ( tracker . shouldInterruptTask ( ) ) { for ( Thread t : threadMap . values ( ) ) { t . interrupt ( ) ; } } }
public RequestParams ( Object ... keysAndValues ) { int len = keysAndValues . length ; if ( len % _NUM != _NUM ) throw new IllegalArgumentException ( _STR ) ; for ( int i = _NUM ; i < len ; i += _NUM ) { String key = String . valueOf ( keysAndValues [ i ] ) ; String val = String . valueOf ( keysAndValues [ i + _NUM ] ) ; put ( key , val ) ; } }
public boolean confirmOverwrite ( final File file ) { String message = _STR + file . getName ( ) + _STR ; Object [ ] options = { _STR , _STR } ; return JOptionPane . YES_OPTION == JOptionPane . showOptionDialog ( null , message , _STR , JOptionPane . DEFAULT_OPTION , JOptionPane . WARNING_MESSAGE , null , options , options [ _NUM ] ) ; }
public TvShowUpdateDatasourceTask ( String datasource ) { super ( BUNDLE . getString ( _STR ) + _STR + datasource + _STR ) ; tvShowList = TvShowList . getInstance ( ) ; dataSources = new ArrayList < > ( _NUM ) ; dataSources . add ( datasource ) ; }
public int findLine ( int offset ) { int line = lineStarts . length - _NUM ; while ( ( lineStarts [ line ] > offset ) && ( line > _NUM ) ) { line -- ; } return line ; }
public void clear ( ) { Set < Sensor > oldSelection = new HashSet < Sensor > ( selection ) ; selection . clear ( ) ; if ( ! oldSelection . isEmpty ( ) ) { fireSelectionChanged ( oldSelection , selection ) ; } }
public Object newNonMovableArray ( Class < ? > componentType , int length ) { return Array . newInstance ( componentType , length ) ; }
private void loadFileRecursively ( String path , Map < String , ThriftFileElement > loadedFiles ) throws IOException { ThriftFileElement element = null ; File dir = null ; File file = findFirstExisting ( path , null ) ; if ( file != null ) { file = file . getCanonicalFile ( ) ; if ( loadedFiles . containsKey ( file . getAbsolutePath ( ) ) ) { return ; } dir = file . getParentFile ( ) ; element = loadSingleFile ( file . getParentFile ( ) , file . getName ( ) ) ; } if ( element == null ) { throw new FileNotFoundException ( _STR + path + _STR + includePaths ) ; } loadedFiles . put ( file . getAbsolutePath ( ) , element ) ; ImmutableList < IncludeElement > includes = element . includes ( ) ; if ( includes . size ( ) > _NUM ) { includePaths . addFirst ( dir ) ; for ( IncludeElement include : includes ) { if ( ! include . isCpp ( ) ) { loadFileRecursively ( include . path ( ) , loadedFiles ) ; } } includePaths . removeFirst ( ) ; } }
public void assureProxyOk ( ) { if ( socket . isClosed ( ) ) { restart ( ) ; } }
@ Override public boolean add ( IMessage message ) { return add ( message , _BOOL ) ; }
public Key ( byte [ ] hash ) { if ( hash . length != SHA1_HASH_LENGTH ) { throw new IllegalArgumentException ( _STR + hash . length ) ; } System . arraycopy ( hash , _NUM , this . hash , _NUM , SHA1_HASH_LENGTH ) ; }
public static int [ ] concatAllInt ( int [ ] ... arrays ) { int totalLength = _NUM ; final int subArrayCount = arrays . length ; for ( int i = _NUM ; i < subArrayCount ; ++ i ) { totalLength += arrays [ i ] . length ; } int [ ] result = Arrays . copyOf ( arrays [ _NUM ] , totalLength ) ; int offset = arrays [ _NUM ] . length ; for ( int i = _NUM ; i < subArrayCount ; ++ i ) { System . arraycopy ( arrays [ i ] , _NUM , result , offset , arrays [ i ] . length ) ; offset += arrays [ i ] . length ; } return result ; }
private static RoadPermission roadFlagComparision ( Way iosmWay , String newTag , String newValue , EnumSet < EdgeStore . EdgeFlag > forwardExpected , EnumSet < EdgeStore . EdgeFlag > backwardExpected ) { Way osmWay = new Way ( ) ; StringJoiner stringJoiner = new StringJoiner ( _STR ) ; for ( OSMEntity . Tag tag : iosmWay . tags ) { osmWay . addTag ( tag . key , tag . value ) ; stringJoiner . add ( tag . key + _STR + tag . value ) ; } if ( newTag != null && newValue != null ) { osmWay . addTag ( newTag , newValue ) ; stringJoiner . add ( newTag + _STR + newValue ) ; } Set < EdgeStore . EdgeFlag > forwardFiltered ; Set < EdgeStore . EdgeFlag > backwardFiltered ; RoadPermission roadPermission = traversalPermissionLabeler . getPermissions ( osmWay ) ; forwardFiltered = filterFlags ( roadPermission . forward ) ; backwardFiltered = filterFlags ( roadPermission . backward ) ; String tags = _STR + stringJoiner . toString ( ) ; assertEquals ( tags , forwardExpected , forwardFiltered ) ; assertEquals ( tags , backwardExpected , backwardFiltered ) ; return roadPermission ; }
public void beginDisplay ( DisplayEvent event ) throws ModelControlException { IdentitySubjectModel subjectModel = getSubjectModel ( ) ; PolicyModel model = ( PolicyModel ) getModel ( ) ; super . beginDisplay ( event ) ; if ( ! canModify ) { Map mapValues = getDefaultValues ( ) ; if ( ( mapValues != null ) && ! mapValues . isEmpty ( ) ) { Set values = ( Set ) mapValues . get ( AMIdentityMembershipCondition . AM_IDENTITY_NAME ) ; Set identityNames = helper . getAMIdentityNames ( model . getUserSSOToken ( ) , values ) ; propertySheetModel . setValue ( VALUES_MULTIPLE_CHOICE_VALUE , AMAdminUtils . getString ( identityNames , _STR , _BOOL ) ) ; } } else { CCDropDownMenu menu = ( CCDropDownMenu ) getChild ( FILTER_TYPE ) ; Map supportedEntityTypes = model . getSupportedEntityTypes ( realmName ) ; OptionList entityTypes = createOptionList ( supportedEntityTypes ) ; entityTypes . add ( _NUM , _STR , _STR ) ; menu . setOptions ( entityTypes ) ; menu . setValue ( _STR ) ; CCAddRemove child = ( CCAddRemove ) getChild ( VALUES_MULTIPLE_CHOICE_VALUE ) ; child . restoreStateData ( ) ; if ( ! submitCycle ) { helper . setSelectedIdentities ( child , model . getUserSSOToken ( ) , model . getUserLocale ( ) , this , getDefaultValues ( ) ) ; } else { OptionList possible = helper . createOptionList ( model . getUserSSOToken ( ) , model . getUserLocale ( ) , this , getPossibleValues ( subjectModel , realmName ) ) ; OptionList selected = addRemoveModel . getSelectedOptionList ( ) ; List selectedIds = AMAdminUtils . toList ( selected ) ; child . resetStateData ( ) ; addRemoveModel . setAvailableOptionList ( possible ) ; addRemoveModel . setSelectedOptionList ( helper . createOptionList ( model . getUserSSOToken ( ) , model . getUserLocale ( ) , this , selectedIds ) ) ; } } }
public byte [ ] readBytes ( ) throws IOException { int len = readInt ( ) ; if ( len == - _NUM ) { return null ; } byte [ ] b = DataUtils . newBytes ( len ) ; in . readFully ( b ) ; return b ; }
protected int chunkSize ( int n ) { int power = ( n == _NUM || n == _NUM ) ? initialChunkPower : Math . min ( initialChunkPower + n - _NUM , AbstractSpinedBuffer . MAX_CHUNK_POWER ) ; return _NUM << power ; }
public String useRelativePathTipText ( ) { return _STR ; }
public Joiner join ( Class < ? extends DataObject > clazz , String alias , URI ... ids ) { return join ( clazz , alias , new ArrayList < URI > ( Arrays . asList ( ids ) ) ) ; }
public void closeFile ( ) { closeFile ( _BOOL ) ; }
public List < Interface > showInterface ( ) throws NetworkDeviceControllerException { List < Interface > interfaces = new ArrayList < Interface > ( ) ; SSHPrompt [ ] prompts = { SSHPrompt . POUND , SSHPrompt . GREATER_THAN } ; StringBuilder buf = new StringBuilder ( ) ; SSHPrompt prompt = sendWaitFor ( MDSDialogProperties . getString ( _STR ) , _NUM , prompts , buf ) ; String [ ] lines = getLines ( buf ) ; String [ ] regex = { MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) } ; String [ ] groups = new String [ _NUM ] ; Interface intf = null ; for ( String line : lines ) { int index = match ( line , regex , groups ) ; switch ( index ) { case _NUM : intf = new Interface ( groups [ _NUM ] ) ; intf . setStatus ( groups [ _NUM ] ) ; interfaces . add ( intf ) ; break ; case _NUM : intf . setDescription ( groups [ _NUM ] ) ; break ; case _NUM : intf . setWwpn ( groups [ _NUM ] ) ; break ; case _NUM : intf . setMode ( groups [ _NUM ] ) ; intf . setFcid ( groups [ _NUM ] ) ; break ; case _NUM : intf . setVsan ( groups [ _NUM ] ) ; break ; case _NUM : intf . setMode ( groups [ _NUM ] ) ; break ; } } return interfaces ; }
protected void clearDataLists ( int obdService ) { switch ( obdService ) { case OBD_SVC_DATA : case OBD_SVC_FREEZEFRAME : pidSupported . clear ( ) ; PidPvs . clear ( ) ; break ; case OBD_SVC_READ_CODES : case OBD_SVC_PENDINGCODES : case OBD_SVC_PERMACODES : tCodes . clear ( ) ; break ; case OBD_SVC_VEH_INFO : pidSupported . clear ( ) ; VidPvs . clear ( ) ; break ; } }
public QuadEdge makeEdge ( Vertex o , Vertex d ) { QuadEdge q = QuadEdge . makeEdge ( o , d ) ; quadEdges . add ( q ) ; return q ; }
public static void sortSeqs ( List < String > seqs ) { Collections . sort ( seqs , null ) ; }
default B with ( String key , long value ) { return with ( key , Long . toString ( value ) ) ; }
private void listDirectory ( File directory , RelativeDirectory subdirectory , Set < JavaFileObject . Kind > fileKinds , boolean recurse , ListBuffer < JavaFileObject > resultList ) { File d = subdirectory . getFile ( directory ) ; if ( ! caseMapCheck ( d , subdirectory ) ) return ; File [ ] files = d . listFiles ( ) ; if ( files == null ) return ; if ( sortFiles != null ) Arrays . sort ( files , sortFiles ) ; for ( File f : files ) { String fname = f . getName ( ) ; if ( f . isDirectory ( ) ) { if ( recurse && SourceVersion . isIdentifier ( fname ) ) { listDirectory ( directory , new RelativeDirectory ( subdirectory , fname ) , fileKinds , recurse , resultList ) ; } } else { if ( isValidFile ( fname , fileKinds ) ) { JavaFileObject fe = new RegularFileObject ( this , fname , new File ( d , fname ) ) ; resultList . append ( fe ) ; } } } }
private Shape decodeEdge ( int width , int height ) { path . reset ( ) ; path . moveTo ( width - _NUM , _NUM ) ; path . lineTo ( width - _NUM , height - _NUM ) ; path . lineTo ( width - _NUM , height - _NUM ) ; path . lineTo ( _NUM , height - _NUM ) ; return path ; }
public void dispose ( ) throws IabAsyncInProgressException { synchronized ( mAsyncInProgressLock ) { if ( mAsyncInProgress ) { throw new IabAsyncInProgressException ( _STR + _STR + mAsyncOperation + _STR ) ; } } logDebug ( _STR ) ; mSetupDone = _BOOL ; if ( mServiceConn != null ) { logDebug ( _STR ) ; if ( mContext != null ) mContext . unbindService ( mServiceConn ) ; } mDisposed = _BOOL ; mContext = null ; mServiceConn = null ; mService = null ; mPurchaseListener = null ; }
private void testScenario ( String aConfiguration , boolean anExpectingAnException , List < Method > aMethodsToCall ) throws Exception { if ( aMethodsToCall . isEmpty ( ) ) { testScenario ( aConfiguration , anExpectingAnException , ( Method ) null ) ; } else { for ( Method myMethod : aMethodsToCall ) { testScenario ( aConfiguration , anExpectingAnException , myMethod ) ; } } }
private static File createReserveDiskCacheDir ( Context context ) { File cacheDir = StorageUtils . getCacheDirectory ( context , _BOOL ) ; File individualDir = new File ( cacheDir , _STR ) ; if ( individualDir . exists ( ) || individualDir . mkdir ( ) ) { cacheDir = individualDir ; } return cacheDir ; }
public boolean hasBeenCalled ( String resourceName ) { return uris . contains ( resourceName ) ; }
@ Override public void readExternal ( ObjectInput in ) throws IOException , ClassNotFoundException { super . readExternal ( in ) ; isLeaf = in . readBoolean ( ) ; numEntries = in . readInt ( ) ; }
public ObjIdMap ( ) { this ( _NUM , _NUM ) ; }
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
public static ConnectionFactory newFailoverConnectionPool ( Set < LDAPURL > servers , String username , char [ ] password , int maxSize , int heartBeatInterval , String heartBeatTimeUnit , Options ldapOptions ) { List < ConnectionFactory > factories = new ArrayList < ConnectionFactory > ( servers . size ( ) ) ; for ( LDAPURL ldapurl : servers ) { ConnectionFactory cf = Connections . newFixedConnectionPool ( newConnectionFactory ( ldapurl , username , password , heartBeatInterval , heartBeatTimeUnit , ldapOptions ) , maxSize ) ; factories . add ( cf ) ; } return loadBalanceFactories ( factories ) ; }
public boolean isCritical ( ) { return _BOOL ; }
public PrintfFormat ( final String fmtArg ) throws IllegalArgumentException { this ( Locale . getDefault ( ) , fmtArg ) ; }
public static void initCause ( Throwable throwable , Throwable cause ) { if ( INIT_CAUSE_METHOD != null ) { try { INIT_CAUSE_METHOD . invoke ( throwable , new Object [ ] { cause } ) ; } catch ( Exception e ) { } } }
public MessagePropertyKey ( String description , Integer ordinal ) { this . description = description ; this . ordinal = ordinal ; }
private Node addWaiter ( Node mode ) { Node node = new Node ( Thread . currentThread ( ) , mode ) ; Node pred = tail ; if ( pred != null ) { node . prev = pred ; if ( compareAndSetTail ( pred , node ) ) { pred . next = node ; return node ; } } enq ( node ) ; return node ; }
private void assertBounded ( SortedSet < String > deserialized , boolean bounded ) { if ( bounded ) { try { deserialized . add ( _STR ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } else { assertTrue ( deserialized . add ( _STR ) ) ; assertTrue ( deserialized . remove ( _STR ) ) ; } }
public void paintBorder ( Component c , Graphics g , int x , int y , int width , int height ) { JComponent comp = ( c instanceof JComponent ) ? ( JComponent ) c : null ; if ( g instanceof Graphics2D ) { Graphics2D g2 = ( Graphics2D ) g ; g2 . translate ( x , y ) ; paint ( g2 , comp , width , height ) ; g2 . translate ( - x , - y ) ; } else { BufferedImage img = new BufferedImage ( IMG_SIZE , IMG_SIZE , BufferedImage . TYPE_INT_ARGB ) ; Graphics2D g2 = ( Graphics2D ) img . getGraphics ( ) ; paint ( g2 , comp , width , height ) ; g2 . dispose ( ) ; ImageScalingHelper . paint ( g , x , y , width , height , img , INSETS , INSETS , ImageScalingHelper . PaintType . PAINT9_STRETCH , ImageScalingHelper . PAINT_ALL ) ; } }
@ SuppressWarnings ( { _STR , _STR } ) public static LineByLineFileInputOperator restoreCheckPoint ( LineByLineFileInputOperator checkPointOper , ByteArrayOutputStream bos ) throws Exception { Kryo kryo = new Kryo ( ) ; Input lInput = new Input ( bos . toByteArray ( ) ) ; LineByLineFileInputOperator oper = kryo . readObject ( lInput , checkPointOper . getClass ( ) ) ; lInput . close ( ) ; return oper ; }
private static byte [ ] readClass ( final InputStream is , boolean close ) throws IOException { if ( is == null ) { throw new IOException ( _STR ) ; } try { byte [ ] b = new byte [ is . available ( ) ] ; int len = _NUM ; while ( _BOOL ) { int n = is . read ( b , len , b . length - len ) ; if ( n == - _NUM ) { if ( len < b . length ) { byte [ ] c = new byte [ len ] ; System . arraycopy ( b , _NUM , c , _NUM , len ) ; b = c ; } return b ; } len += n ; if ( len == b . length ) { int last = is . read ( ) ; if ( last < _NUM ) { return b ; } byte [ ] c = new byte [ b . length + _NUM ] ; System . arraycopy ( b , _NUM , c , _NUM , len ) ; c [ len ++ ] = ( byte ) last ; b = c ; } } } finally { if ( close ) { is . close ( ) ; } } }
private static synchronized boolean isSupportedImpl ( HttpCallerInfo hci ) { if ( supported == null ) { supported = new HashMap < String , Boolean > ( ) ; cache = new HashMap < String , Negotiator > ( ) ; } String hostname = hci . host ; hostname = hostname . toLowerCase ( ) ; if ( supported . containsKey ( hostname ) ) { return supported . get ( hostname ) ; } Negotiator neg = Negotiator . getNegotiator ( hci ) ; if ( neg != null ) { supported . put ( hostname , _BOOL ) ; cache . put ( hostname , neg ) ; return _BOOL ; } else { supported . put ( hostname , _BOOL ) ; return _BOOL ; } }
public CProjectConfiguration ( final INaviProject project , final ListenerProvider < IProjectListener > listeners , final SQLProvider provider , final int projectId , final String name , final String description , final Date creationDate , final Date modificationDate , final List < DebuggerTemplate > assignedDebuggers ) { m_project = project ; m_listeners = listeners ; m_provider = provider ; m_id = projectId ; m_name = name ; m_description = description ; m_creationDate = new Date ( creationDate . getTime ( ) ) ; m_modificationDate = new Date ( modificationDate . getTime ( ) ) ; m_assignedDebuggers = new ArrayList < DebuggerTemplate > ( assignedDebuggers ) ; }
public Shape chartToScreenShape ( Shape s ) { GeneralPath p = new GeneralPath ( ) ; Transform inverse = Transform . makeTranslation ( getAbsoluteX ( ) , getAbsoluteY ( ) ) ; if ( currentTransform != null ) { inverse . concatenate ( currentTransform ) ; } p . append ( s . getPathIterator ( inverse ) , _BOOL ) ; return p ; }
@ Override public void addShutdownWindow ( final Window window ) { if ( m_isShutDown ) { closeWindow ( window ) ; return ; } synchronized ( this ) { if ( m_isShutDown ) { closeWindow ( window ) ; return ; } m_windowsToCloseOnShutdown . add ( window ) ; } }
public PerformanceLogger ( ) { time1 = System . currentTimeMillis ( ) ; }
public AuthRequest authenticate ( List discoveries , String returnToUrl ) throws ConsumerException , MessageException { return authenticate ( discoveries , returnToUrl , returnToUrl ) ; }
public Hash ( String hex ) { if ( hex . length ( ) != _NUM ) { throw new IllegalArgumentException ( _STR ) ; } this . bytes = ByteUtils . reverse ( ByteUtils . fromHex ( hex ) ) ; }
private String [ ] diff_halfMatchI ( String longtext , String shorttext , int i ) { String seed = longtext . substring ( i , i + longtext . length ( ) / _NUM ) ; int j = - _NUM ; String best_common = _STR ; String best_longtext_a = _STR , best_longtext_b = _STR ; String best_shorttext_a = _STR , best_shorttext_b = _STR ; while ( ( j = shorttext . indexOf ( seed , j + _NUM ) ) != - _NUM ) { int prefixLength = diff_commonPrefix ( longtext . substring ( i ) , shorttext . substring ( j ) ) ; int suffixLength = diff_commonSuffix ( longtext . substring ( _NUM , i ) , shorttext . substring ( _NUM , j ) ) ; if ( best_common . length ( ) < suffixLength + prefixLength ) { best_common = shorttext . substring ( j - suffixLength , j ) + shorttext . substring ( j , j + prefixLength ) ; best_longtext_a = longtext . substring ( _NUM , i - suffixLength ) ; best_longtext_b = longtext . substring ( i + prefixLength ) ; best_shorttext_a = shorttext . substring ( _NUM , j - suffixLength ) ; best_shorttext_b = shorttext . substring ( j + prefixLength ) ; } } if ( best_common . length ( ) * _NUM >= longtext . length ( ) ) { return new String [ ] { best_longtext_a , best_longtext_b , best_shorttext_a , best_shorttext_b , best_common } ; } else { return null ; } }
public boolean isNumericalRun ( String pin ) { final int len = pin . length ( ) ; int prevDigit = Character . digit ( pin . charAt ( _NUM ) , _NUM ) ; int prevDiff = Integer . MAX_VALUE ; boolean isRun = _BOOL ; for ( int i = _NUM ; isRun && i < len ; i ++ ) { final int digit = Character . digit ( pin . charAt ( i ) , _NUM ) ; final int diff = digit - prevDigit ; if ( prevDiff != Integer . MAX_VALUE && diff != prevDiff ) { isRun = _BOOL ; } prevDiff = diff ; prevDigit = digit ; } return isRun ; }
@ Override protected void onSizeChanged ( int w , int h , int oldw , int oldh ) { super . onSizeChanged ( w , h , oldw , oldh ) ; setupBounds ( w , h ) ; setupPaints ( ) ; invalidate ( ) ; }
public static int uriType ( String uri ) { if ( uri . indexOf ( _STR ) != - _NUM ) { return ABS_URI ; } else if ( uri . startsWith ( _STR ) ) { return ROOT_REL_URI ; } else { return NOROOT_REL_URI ; } }
public Map < String , Object > convertDataToObjects ( Map < String , String > data ) { Map < String , Object > results = new HashMap < > ( ) ; if ( data != null ) { for ( String key : data . keySet ( ) ) { results . put ( key , data . get ( key ) ) ; } } return results ; }
public static void addGlue ( JComponent b , boolean horiz ) { b . add ( horiz ? Box . createHorizontalGlue ( ) : Box . createVerticalGlue ( ) ) ; }
public static boolean isResourceReference ( String str ) { return str . startsWith ( BIG_QUOTE_LEFT ) && str . endsWith ( BIG_QUOTE_RIGHT ) && str . charAt ( _NUM ) == AT . charAt ( _NUM ) ; }
public boolean leave ( ) throws KeeperException , InterruptedException { zooKeeper . delete ( rootPath + _STR + name , _NUM ) ; while ( _BOOL ) { synchronized ( mutex ) { List < String > list = zooKeeper . getChildren ( rootPath , _BOOL ) ; if ( list . size ( ) > _NUM ) { mutex . wait ( ) ; } else { return _BOOL ; } } } }
public Enumeration < ? extends Principal > members ( ) { Vector < Principal > v = new Vector < Principal > ( _NUM ) ; v . addElement ( this ) ; return v . elements ( ) ; }
public SelectClause addWithAsProvidedName ( String propertyName , String asName ) { selectList . add ( new SelectClauseExpression ( new PropertyValueExpression ( propertyName ) , asName ) ) ; return this ; }
public void addInterface ( String interfaceName ) { short interfaceIndex = itsConstantPool . addClass ( interfaceName ) ; itsInterfaces . add ( Short . valueOf ( interfaceIndex ) ) ; }
public static String cutFromIndexOf ( String string , String substring ) { int i = string . indexOf ( substring ) ; if ( i != - _NUM ) { string = string . substring ( i ) ; } return string ; }
private Response requestHttpGetFromRegistry ( String url ) throws RegistryException { try { Response resp = http . get ( url ) ; if ( resp != null && resp . content != null ) { return resp ; } else { throw new RegistryException ( TYPE . BAD_RESPONSE , _STR ) ; } } catch ( ClassCastException e ) { throw new RegistryException ( TYPE . BAD_RESPONSE , e ) ; } catch ( ConnectException e ) { throw new RegistryException ( TYPE . PROXY , e ) ; } catch ( UnknownHostException e ) { try { http . get ( _STR ) ; } catch ( Exception e1 ) { throw new RegistryException ( TYPE . NO_INTERNET , e1 ) ; } throw new RegistryException ( TYPE . SITE_DOWN , e ) ; } catch ( IOException e ) { throw new RegistryException ( TYPE . IO_ERROR , e ) ; } catch ( URISyntaxException e ) { throw new RegistryException ( TYPE . BAD_REQUEST , _STR + ( ( url != null ) ? url : _STR ) ) ; } }
public void testIterator ( ) throws InterruptedException { LinkedBlockingQueue q = populatedQueue ( SIZE ) ; Iterator it = q . iterator ( ) ; while ( it . hasNext ( ) ) { assertEquals ( it . next ( ) , q . take ( ) ) ; } }
public static Builder newBuilder ( ) { return new Builder ( ) ; }
public void init ( RemoteAuthenticatedUser currentUser ) { this . currentUser = currentUser ; }
public static void invokeFinalize ( Object o ) throws Throwable { o . finalize ( ) ; }
private void removeTvShow ( TvShow tvShow ) { synchronized ( root ) { TvShowTreeNode child = ( TvShowTreeNode ) nodeMap . get ( tvShow ) ; DefaultMutableTreeNode parent = root ; if ( child != null ) { int index = getIndexOfChild ( parent , child ) ; nodeMap . remove ( tvShow ) ; for ( TvShowEpisode episode : new ArrayList < > ( tvShow . getEpisodes ( ) ) ) { nodeMap . remove ( episode ) ; episode . removePropertyChangeListener ( propertyChangeListener ) ; } tvShow . removePropertyChangeListener ( propertyChangeListener ) ; child . removeAllChildren ( ) ; child . removeFromParent ( ) ; if ( index > - _NUM ) { TreeModelEvent event = new TreeModelEvent ( this , parent . getPath ( ) , new int [ ] { index } , new Object [ ] { child } ) ; for ( TreeModelListener listener : listeners ) { try { listener . treeNodesRemoved ( event ) ; } catch ( NullPointerException | ArrayIndexOutOfBoundsException npe ) { } } } } } }
private ComplianceFeature checkEncryptPolicy ( org . wso2 . emm . agent . beans . Operation operation ) { boolean encryptStatus = ( devicePolicyManager . getStorageEncryptionStatus ( ) != devicePolicyManager . ENCRYPTION_STATUS_UNSUPPORTED && devicePolicyManager . getStorageEncryptionStatus ( ) != devicePolicyManager . ENCRYPTION_STATUS_INACTIVE ) ; if ( ( operation . isEnabled ( ) && encryptStatus ) || ( ! operation . isEnabled ( ) && ! encryptStatus ) ) { policy . setCompliance ( _BOOL ) ; } else { policy . setCompliance ( _BOOL ) ; policy . setMessage ( resources . getString ( R . string . error_encrypt_policy ) ) ; } return policy ; }
public static int instanceOf ( Object o , Class < ? > c ) { if ( o == null ) return FALSE ; return c . isAssignableFrom ( o . getClass ( ) ) ? TRUE : FALSE ; }
@ Override public void add ( int location , E object ) { insertElementAt ( object , location ) ; }
private long cacheResponseAge ( ) { long apparentReceivedAge = servedDate != null ? Math . max ( _NUM , receivedResponseMillis - servedDate . getTime ( ) ) : _NUM ; long receivedAge = ageSeconds != - _NUM ? Math . max ( apparentReceivedAge , SECONDS . toMillis ( ageSeconds ) ) : apparentReceivedAge ; long responseDuration = receivedResponseMillis - sentRequestMillis ; long residentDuration = nowMillis - receivedResponseMillis ; return receivedAge + responseDuration + residentDuration ; }
@ Override public Void call ( ) throws Exception { MulticastSocket datagramSocket = null ; ExecutorService service = null ; try { datagramSocket = new MulticastSocket ( port ) ; datagramSocket . joinGroup ( group ) ; service = Executors . newSingleThreadScheduledExecutor ( new DaemonThreadFactory ( _STR ) ) ; final byte [ ] buffer = new byte [ BUFFER_SIZE ] ; final DatagramPacket packet = new DatagramPacket ( buffer , _NUM , buffer . length ) ; listening = _BOOL ; while ( _BOOL ) { try { datagramSocket . receive ( packet ) ; if ( Thread . interrupted ( ) ) { break ; } final IGangliaMessage msg = decodeRecord ( packet . getData ( ) , packet . getOffset ( ) , packet . getLength ( ) ) ; if ( msg != null ) { service . submit ( new DispatchTask ( handler , msg ) ) ; } } catch ( Throwable t ) { log . warn ( t , t ) ; } } return ( Void ) null ; } finally { if ( service != null ) { service . shutdown ( ) ; } if ( datagramSocket != null ) { datagramSocket . close ( ) ; } listening = _BOOL ; } }
private static int arrayIndex ( int i ) { return ( i > > SHIFT_PER_WORD ) ; }
protected static void invalidateSwitchPoints ( ) { if ( LOG_ENABLED ) { LOG . info ( _STR ) ; } synchronized ( IndyInterface . class ) { SwitchPoint old = switchPoint ; switchPoint = new SwitchPoint ( ) ; SwitchPoint . invalidateAll ( new SwitchPoint [ ] { old } ) ; } }
public VdcConfig toConfigParam ( Properties vdcInfo ) { log . info ( _STR , vdcInfo . getProperty ( GeoServiceJob . VDC_SHORT_ID ) ) ; VdcConfig vdcConfig = new VdcConfig ( ) ; vdcConfig . setId ( URIUtil . uri ( vdcInfo . getProperty ( GeoServiceJob . OPERATED_VDC_ID ) ) ) ; vdcConfig . setShortId ( vdcInfo . getProperty ( GeoServiceJob . VDC_SHORT_ID ) ) ; vdcConfig . setSecretKey ( vdcInfo . getProperty ( GeoServiceJob . VDC_SECRETE_KEY ) ) ; String name = vdcInfo . getProperty ( GeoServiceJob . VDC_NAME ) ; if ( ( name != null ) && ( ! name . isEmpty ( ) ) ) { vdcConfig . setName ( name ) ; } String description = vdcInfo . getProperty ( GeoServiceJob . VDC_DESCRIPTION ) ; if ( ( description != null ) && ( ! description . isEmpty ( ) ) ) { vdcConfig . setDescription ( description ) ; } String endPnt = vdcInfo . getProperty ( GeoServiceJob . VDC_API_ENDPOINT ) ; if ( endPnt != null ) { vdcConfig . setApiEndpoint ( endPnt ) ; } vdcConfig . setGeoCommandEndpoint ( vdcInfo . getProperty ( GeoServiceJob . VDC_GEOCOMMAND_ENDPOINT ) ) ; vdcConfig . setGeoDataEndpoint ( vdcInfo . getProperty ( GeoServiceJob . VDC_GEODATA_ENDPOINT ) ) ; return vdcConfig ; }
protected OSXAdapter ( String proxySignature , Object target , Method handler ) { this . proxySignature = proxySignature ; this . targetObject = target ; this . targetMethod = handler ; }
private double prediction ( Instance inst ) { double [ ] normalizedInstance = normalizedInstance ( inst ) ; double normalizedPrediction = prediction ( normalizedInstance ) ; return denormalizedPrediction ( normalizedPrediction ) ; }
protected Object finish ( Map settings ) throws WizardException { return provider . finish ( settings ) ; }
public boolean isValidAttachmentPoint ( DatapathId switchDPID , OFPort switchPort ) { if ( topology . isAttachmentPointPort ( switchDPID , switchPort ) == _BOOL ) return _BOOL ; if ( suppressAPs . contains ( new SwitchPort ( switchDPID , switchPort ) ) ) return _BOOL ; return _BOOL ; }
protected void fireClusterChange ( long timestamp , String type , String message ) { if ( listeners != null && ! listeners . isEmpty ( ) ) { ClusterEvent event = new ClusterEvent ( this , timestamp , type , message ) ; Vector targets ; synchronized ( this ) { targets = ( Vector ) listeners . clone ( ) ; } Enumeration e = targets . elements ( ) ; while ( e . hasMoreElements ( ) ) { ClusterEventListener l = ( ClusterEventListener ) e . nextElement ( ) ; l . changeCluster ( event ) ; } } }
public BatchedImageRequest ( Request < ? > request , ImageContainer container ) { mRequest = request ; mContainers . add ( container ) ; }
public void delete ( ) throws IOException { close ( ) ; deleteContents ( directory ) ; }
public int rgbFor ( int pixel ) { return surfaceType . rgbFor ( pixel , colorModel ) ; }
private boolean checkForCarry ( final char [ ] ca1 , final int icarry ) { boolean carry = _BOOL ; if ( icarry < ca1 . length ) { if ( ca1 [ icarry ] == _STR || ca1 [ icarry ] == _STR || ca1 [ icarry ] == _STR || ca1 [ icarry ] == _STR ) { carry = _BOOL ; } else if ( ca1 [ icarry ] == _STR ) { int ii = icarry + _NUM ; for ( ; ii < ca1 . length ; ii ++ ) { if ( ca1 [ ii ] != _STR ) { break ; } } carry = ii < ca1 . length ; if ( ! carry && icarry > _NUM ) { carry = ( ca1 [ icarry - _NUM ] == _STR || ca1 [ icarry - _NUM ] == _STR || ca1 [ icarry - _NUM ] == _STR || ca1 [ icarry - _NUM ] == _STR || ca1 [ icarry - _NUM ] == _STR ) ; } } } return carry ; }
protected void addBottomComponent ( Component bottomComponent ) { c . weighty = _NUM ; layout . setConstraints ( bottomComponent , c ) ; contentPanel . add ( bottomComponent ) ; }
public static boolean deleteDirectoryFiles ( Set < String > inputFilePathsAndNames ) { if ( ( inputFilePathsAndNames == null ) ) { return _BOOL ; } boolean didSuccessfullyDeleteAllFiles = _BOOL ; try { for ( String filePathAndName : inputFilePathsAndNames ) { File file = new File ( filePathAndName ) ; if ( ! file . isDirectory ( ) ) { boolean deleteSuccess = deleteFile ( filePathAndName ) ; if ( ! deleteSuccess ) { logger . debug ( _STR + filePathAndName + _STR ) ; didSuccessfullyDeleteAllFiles = _BOOL ; } } } } catch ( Exception e ) { logger . debug ( e . toString ( ) + System . lineSeparator ( ) + StackTrace . getStringFromStackTrace ( e ) ) ; return _BOOL ; } return didSuccessfullyDeleteAllFiles ; }
public static File createTempDir ( File dir , boolean cleanup ) throws IOException { if ( ! dir . mkdirs ( ) && ! dir . exists ( ) ) { throw new IOException ( String . format ( _STR , dir . toString ( ) ) ) ; } if ( cleanup ) { addCleanupHook ( dir . toPath ( ) ) ; } return dir ; }
public void emitInit ( ) { out . append ( _STR ) ; out . append ( constName ( ) ) ; out . append ( _STR ) ; out . append ( name ) ; out . append ( _STR ) ; nl ( ) ; nextChunk ( ) ; }
public static String readCookieIgnoreSpecialCharacters ( HttpServletRequest request , String cookieName ) { String cs = request . getHeader ( _STR ) ; if ( cs == null ) return null ; int start = cs . indexOf ( cookieName ) ; if ( start < _NUM ) return null ; cs = cs . substring ( start + _NUM + cookieName . length ( ) ) ; int end = cs . indexOf ( _STR ) ; if ( end > _NUM ) { cs = cs . substring ( _NUM , end ) ; } return cs ; }
protected final void merge ( @ NotNull Set < LocalResourceRepository > visited , @ NotNull ResourceType type , @ NotNull SetMultimap < String , String > seenQualifiers , @ NotNull ListMultimap < String , ResourceItem > result ) { if ( visited . contains ( this ) ) { return ; } visited . add ( this ) ; doMerge ( visited , type , seenQualifiers , result ) ; }
private byte [ ] translateTransferableString ( String str , long format ) throws IOException { Long lFormat = Long . valueOf ( format ) ; String charset = getBestCharsetForTextFormat ( lFormat , null ) ; String eoln = ( String ) nativeEOLNs . get ( lFormat ) ; if ( eoln != null ) { int length = str . length ( ) ; StringBuffer buffer = new StringBuffer ( length * _NUM ) ; for ( int i = _NUM ; i < length ; i ++ ) { if ( str . startsWith ( eoln , i ) ) { buffer . append ( eoln ) ; i += eoln . length ( ) - _NUM ; continue ; } char c = str . charAt ( i ) ; if ( c == _STR ) { buffer . append ( eoln ) ; } else { buffer . append ( c ) ; } } str = buffer . toString ( ) ; } byte [ ] bytes = str . getBytes ( charset ) ; Integer terminators = ( Integer ) nativeTerminators . get ( lFormat ) ; if ( terminators != null ) { int numTerminators = terminators . intValue ( ) ; byte [ ] terminatedBytes = new byte [ bytes . length + numTerminators ] ; System . arraycopy ( bytes , _NUM , terminatedBytes , _NUM , bytes . length ) ; for ( int i = bytes . length ; i < terminatedBytes . length ; i ++ ) { terminatedBytes [ i ] = _NUM ; } bytes = terminatedBytes ; } return bytes ; }
private byte [ ] createPreviewBuffer ( Size previewSize ) { int bitsPerPixel = ImageFormat . getBitsPerPixel ( ImageFormat . NV21 ) ; long sizeInBits = previewSize . getHeight ( ) * previewSize . getWidth ( ) * bitsPerPixel ; int bufferSize = ( int ) Math . ceil ( sizeInBits / _NUM ) + _NUM ; byte [ ] byteArray = new byte [ bufferSize ] ; ByteBuffer buffer = ByteBuffer . wrap ( byteArray ) ; if ( ! buffer . hasArray ( ) || ( buffer . array ( ) != byteArray ) ) { throw new IllegalStateException ( _STR ) ; } mBytesToByteBuffer . put ( byteArray , buffer ) ; return byteArray ; }
public void add ( int pos , Box b ) { children . add ( pos , b ) ; b . parent = this ; b . elderParent = elderParent ; }
public Position createPosition ( int offset ) throws BadLocationException { while ( queue . poll ( ) != null ) { unusedMarks ++ ; } if ( unusedMarks > Math . max ( _NUM , ( marks . size ( ) / _NUM ) ) ) { removeUnusedMarks ( ) ; } int g0 = getGapStart ( ) ; int g1 = getGapEnd ( ) ; int index = ( offset < g0 ) ? offset : offset + ( g1 - g0 ) ; search . index = index ; int sortIndex = findSortIndex ( search ) ; MarkData m ; StickyPosition position ; if ( sortIndex < marks . size ( ) && ( m = marks . elementAt ( sortIndex ) ) . index == index && ( position = m . getPosition ( ) ) != null ) { } else { position = new StickyPosition ( ) ; m = new MarkData ( index , position , queue ) ; position . setMark ( m ) ; marks . insertElementAt ( m , sortIndex ) ; } return position ; }
public static String pad ( String string , int n , String padding , boolean right ) { if ( n < _NUM ) { n = _NUM ; } if ( n < string . length ( ) ) { return string . substring ( _NUM , n ) ; } else if ( n == string . length ( ) ) { return string ; } char paddingChar ; if ( padding == null || padding . length ( ) == _NUM ) { paddingChar = _STR ; } else { paddingChar = padding . charAt ( _NUM ) ; } StringBuilder buff = new StringBuilder ( n ) ; n -= string . length ( ) ; if ( right ) { buff . append ( string ) ; } for ( int i = _NUM ; i < n ; i ++ ) { buff . append ( paddingChar ) ; } if ( ! right ) { buff . append ( string ) ; } return buff . toString ( ) ; }
private final void resetDTX ( AffineTransform at ) { fsref = null ; dtx = at ; invdtx = null ; if ( ! dtx . isIdentity ( ) ) { try { invdtx = dtx . createInverse ( ) ; } catch ( NoninvertibleTransformException e ) { } } if ( gti != null ) { gti . strikesRef = null ; } }
public static void addActivityListener ( ActivityListener listener ) { if ( listener != null ) { startTracking ( ) ; listeners . add ( listener ) ; } }
public void addMutedUsername ( final String username , final Date muteTill ) { if ( isUsernameMuted ( username ) ) { removeMutedUsername ( username ) ; } Timestamp muteTillTs = null ; if ( muteTill != null ) { muteTillTs = new Timestamp ( muteTill . getTime ( ) ) ; } s_logger . fine ( _STR + username ) ; final Connection con = Database . getConnection ( ) ; try { final PreparedStatement ps = con . prepareStatement ( _STR ) ; ps . setString ( _NUM , username ) ; ps . setTimestamp ( _NUM , muteTillTs ) ; ps . execute ( ) ; ps . close ( ) ; con . commit ( ) ; } catch ( final SQLException sqle ) { if ( sqle . getErrorCode ( ) == _NUM ) { s_logger . info ( _STR + username + _STR + sqle . getMessage ( ) ) ; return ; } s_logger . log ( Level . SEVERE , _STR + username , sqle ) ; throw new IllegalStateException ( sqle . getMessage ( ) ) ; } finally { DbUtil . closeConnection ( con ) ; } }
private Response < Bitmap > doParse ( NetworkResponse response ) { byte [ ] data = response . data ; Log . d ( _STR , _STR ) ; BitmapFactory . Options decodeOptions = new BitmapFactory . Options ( ) ; Bitmap bitmap = null ; Log . d ( _STR , _STR ) ; decodeOptions . inJustDecodeBounds = _BOOL ; BitmapFactory . decodeByteArray ( data , _NUM , data . length , decodeOptions ) ; int actualWidth = decodeOptions . outWidth ; int actualHeight = decodeOptions . outHeight ; int desiredWidth = getResizedDimension ( mMaxWidth , mMaxHeight , actualWidth , actualHeight , mScaleType ) ; int desiredHeight = getResizedDimension ( mMaxHeight , mMaxWidth , actualHeight , actualWidth , mScaleType ) ; decodeOptions . inJustDecodeBounds = _BOOL ; decodeOptions . inSampleSize = findBestSampleSize ( actualWidth , actualHeight , desiredWidth , desiredHeight ) ; Bitmap tempBitmap = BitmapFactory . decodeByteArray ( data , _NUM , data . length , decodeOptions ) ; if ( tempBitmap != null && ( tempBitmap . getWidth ( ) > desiredWidth || tempBitmap . getHeight ( ) > desiredHeight ) ) { bitmap = Bitmap . createScaledBitmap ( tempBitmap , desiredWidth , desiredHeight , _BOOL ) ; tempBitmap . recycle ( ) ; } else { bitmap = tempBitmap ; } if ( bitmap == null ) { return Response . error ( new ParseError ( response ) ) ; } else { return Response . success ( bitmap , HttpHeaderParser . parseCacheHeaders ( response ) ) ; } }
public void applyComponentOrientation ( ComponentOrientation o ) { possiblyFixCursor ( o . isLeftToRight ( ) ) ; super . applyComponentOrientation ( o ) ; }
public boolean isEmpty ( ) { return mSelectedWidgets . isEmpty ( ) ; }
public void close ( ) throws IOException { if ( ! closed ) { try { finish ( ) ; } finally { out . close ( ) ; closed = _BOOL ; } } }
protected abstract C newParcelableAdapterInstance ( List < Object > items ) ;
public static void nextBytes ( byte [ ] bytes ) { wasAccessed = _BOOL ; for ( int i = _NUM ; i < bytes . length ; ) for ( int rnd = nextInt ( ) , n = Math . min ( bytes . length - i , _NUM ) ; n -- > _NUM ; rnd >>= _NUM ) bytes [ i ++ ] = ( byte ) rnd ; }
protected void drawLowFarOut ( double aRadius , Graphics2D g2 , double xx , double m ) { double side = aRadius * _NUM ; g2 . draw ( new Line2D . Double ( xx - side , m - side , xx + side , m - side ) ) ; g2 . draw ( new Line2D . Double ( xx - side , m - side , xx , m ) ) ; g2 . draw ( new Line2D . Double ( xx + side , m - side , xx , m ) ) ; }
public boolean isJavaLibraryClass ( ) { if ( name . startsWith ( _STR ) || name . startsWith ( _STR ) || name . startsWith ( _STR ) || name . startsWith ( _STR ) || name . startsWith ( _STR ) || name . startsWith ( _STR ) ) return _BOOL ; return _BOOL ; }
private Set < ObjectName > objectNamesFromFilteredNamedObjects ( Set < NamedObject > list , QueryExp query ) { Set < ObjectName > result = new HashSet < ObjectName > ( ) ; if ( query == null ) { for ( NamedObject no : list ) { result . add ( no . getName ( ) ) ; } } else { final MBeanServer oldServer = QueryEval . getMBeanServer ( ) ; query . setMBeanServer ( server ) ; try { for ( NamedObject no : list ) { boolean res ; try { res = query . apply ( no . getName ( ) ) ; } catch ( Exception e ) { res = _BOOL ; } if ( res ) { result . add ( no . getName ( ) ) ; } } } finally { query . setMBeanServer ( oldServer ) ; } } return result ; }
private boolean checkTouchSlop ( View child , float dx , float dy ) { if ( child == null ) { return _BOOL ; } final boolean checkHorizontal = mCallback . getViewHorizontalDragRange ( child ) > _NUM ; final boolean checkVertical = mCallback . getViewVerticalDragRange ( child ) > _NUM ; if ( checkHorizontal && checkVertical ) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop ; } else if ( checkHorizontal ) { return Math . abs ( dx ) > mTouchSlop ; } else if ( checkVertical ) { return Math . abs ( dy ) > mTouchSlop ; } return _BOOL ; }
private Element createEndPoint ( String name , String attrBinding , String attrLocation , String attrResponseLocation ) throws DOMException { if ( name == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( attrBinding == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( attrLocation == null ) { throw new IllegalArgumentException ( _STR ) ; } Element endPt = doc . createElement ( name ) ; endPt . setAttribute ( SAMLNames . BINDING , attrBinding ) ; endPt . setAttribute ( SAMLNames . LOCATION , attrLocation ) ; if ( attrResponseLocation != null ) { endPt . setAttribute ( SAMLNames . RESPLOC , attrResponseLocation ) ; } return endPt ; }
void putFile ( String relativePath , Codebase codebase ) { try { File dest = new File ( rootDirectory . getAbsolutePath ( ) , relativePath ) ; File src = codebase . getFile ( relativePath ) ; boolean srcExists = filesystem . exists ( src ) ; boolean destExists = filesystem . exists ( dest ) ; boolean srcExecutable = filesystem . isExecutable ( src ) ; boolean destExecutable = filesystem . isExecutable ( dest ) ; if ( ! srcExists && ! destExists ) { throw new MoeProblem ( _STR , relativePath , src , dest ) ; } if ( ! srcExists ) { util . runSvnCommandWithWorkingDirectory ( rootDirectory . getAbsolutePath ( ) , _STR , relativePath ) ; return ; } try { filesystem . makeDirsForFile ( dest ) ; filesystem . copyFile ( src , dest ) ; } catch ( IOException e ) { throw new MoeProblem ( e . getMessage ( ) ) ; } if ( ! destExists ) { util . runSvnCommandWithWorkingDirectory ( rootDirectory . getAbsolutePath ( ) , _STR , _STR , relativePath ) ; } String mimeType = guessMimeType ( relativePath ) ; if ( mimeType != null ) { try { util . runSvnCommandWithWorkingDirectory ( rootDirectory . getAbsolutePath ( ) , _STR , _STR , mimeType , relativePath ) ; } catch ( CommandRunner . CommandException e ) { ui . message ( _STR , relativePath ) ; } } if ( destExecutable != srcExecutable ) { if ( srcExecutable ) { util . runSvnCommandWithWorkingDirectory ( rootDirectory . getAbsolutePath ( ) , _STR , _STR , _STR , relativePath ) ; } else { util . runSvnCommandWithWorkingDirectory ( rootDirectory . getAbsolutePath ( ) , _STR , _STR , relativePath ) ; } } } catch ( CommandRunner . CommandException e ) { throw new MoeProblem ( _STR + e . stderr ) ; } }
public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( toString ( getClass ( ) ) ) ; buffer . append ( _STR ) ; buffer . append ( isUseDefault ( ) ) ; buffer . append ( _STR ) ; buffer . append ( useLocaleFormat ) ; if ( pattern != null ) { buffer . append ( _STR ) ; buffer . append ( pattern ) ; } if ( locale != null ) { buffer . append ( _STR ) ; buffer . append ( locale ) ; } buffer . append ( _STR ) ; return buffer . toString ( ) ; }
public void test_multipleResourceLocking_resources10_locktries10 ( ) throws Exception { final Properties properties = new Properties ( ) ; properties . setProperty ( TestOptions . NTHREADS , _STR ) ; properties . setProperty ( TestOptions . NTASKS , _STR ) ; properties . setProperty ( TestOptions . NRESOURCES , _STR ) ; properties . setProperty ( TestOptions . MIN_LOCKS , _STR ) ; properties . setProperty ( TestOptions . MAX_LOCKS , _STR ) ; properties . setProperty ( TestOptions . MAX_LOCK_TRIES , _STR ) ; properties . setProperty ( TestOptions . PREDECLARE_LOCKS , _STR ) ; properties . setProperty ( TestOptions . SORT_LOCK_REQUESTS , _STR ) ; properties . setProperty ( TestOptions . TIMEOUT , Long . toString ( _NUM * _NUM ) ) ; doComparisonTest ( properties ) ; }
public void startElement ( String namespaceURI , String localName , String qName , Attributes atts ) throws org . xml . sax . SAXException { throw new StopParseException ( ) ; }
public synchronized byte [ ] toByteArray ( ) { byte [ ] newArray = new byte [ count ] ; System . arraycopy ( buf , _NUM , newArray , _NUM , count ) ; return newArray ; }
Calendar toCalendar ( String value , String pattern , Locale locale ) { Calendar calendar = null ; try { DateFormat format = ( locale == null ) ? new SimpleDateFormat ( pattern ) : new SimpleDateFormat ( pattern , locale ) ; format . setLenient ( _BOOL ) ; format . parse ( value ) ; calendar = format . getCalendar ( ) ; } catch ( Exception e ) { fail ( _STR + value + _STR + pattern + _STR + e . toString ( ) ) ; } return calendar ; }
private byte [ ] convertBitmapToBytes ( final Bitmap bitmap ) { int size = bitmap . getRowBytes ( ) * bitmap . getHeight ( ) ; ByteArrayOutputStream out = new ByteArrayOutputStream ( size ) ; try { if ( bitmap . compress ( Bitmap . CompressFormat . PNG , _NUM , out ) ) { return out . toByteArray ( ) ; } if ( sLogger . isActivated ( ) ) { sLogger . debug ( _STR ) ; } return null ; } finally { CloseableUtils . tryToClose ( out ) ; } }
private static void saveTemplate ( File parentDir , FileTemplateBase template , final String lineSeparator ) throws IOException { final File templateFile = new File ( parentDir , encodeFileName ( template . getName ( ) , template . getExtension ( ) ) ) ; FileOutputStream fileOutputStream ; try { fileOutputStream = new FileOutputStream ( templateFile ) ; } catch ( FileNotFoundException e ) { FileUtil . delete ( templateFile ) ; fileOutputStream = new FileOutputStream ( templateFile ) ; } OutputStreamWriter outputStreamWriter = new OutputStreamWriter ( fileOutputStream , CharsetToolkit . UTF8_CHARSET ) ; String content = template . getText ( ) ; if ( ! lineSeparator . equals ( _STR ) ) { content = StringUtil . convertLineSeparators ( content , lineSeparator ) ; } outputStreamWriter . write ( content ) ; outputStreamWriter . close ( ) ; fileOutputStream . close ( ) ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( _NUM ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addAll ( Collections . list ( super . listOptions ( ) ) ) ; return newVector . elements ( ) ; }
public void addComposite ( TransformTreeNode node ) { parts . add ( node ) ; }
protected static void postProcessFlood ( IHex [ ] hexSet , int modifier ) { int n ; IHex field ; ITerrainFactory f = Terrains . getTerrainFactory ( ) ; for ( n = _NUM ; n < hexSet . length ; n ++ ) { field = hexSet [ n ] ; int elev = field . getLevel ( ) - modifier ; if ( ( elev == _NUM ) && ! ( field . containsTerrain ( Terrains . WATER ) ) && ! ( field . containsTerrain ( Terrains . PAVEMENT ) ) ) { field . addTerrain ( f . createTerrain ( Terrains . SWAMP , _NUM ) ) ; } else if ( elev < _NUM ) { if ( elev < - _NUM ) { elev = - _NUM ; } field . removeAllTerrains ( ) ; field . addTerrain ( f . createTerrain ( Terrains . WATER , - elev ) ) ; field . setLevel ( modifier ) ; } } }
public ModuleHandle addModule ( String moduleName , String sessionKey ) { String sanitizedModuleName = generateUniqueNameIfNullOrEmpty ( moduleName , _STR ) ; ModuleHandle moduleHandle = new ModuleHandle ( sanitizedModuleName , sessionKey ) ; synchronized ( privateInstanceLock ) { modules . add ( moduleHandle ) ; } setTerminated ( _BOOL ) ; return moduleHandle ; }
private static void expand2DigitNumber ( String numberString , WordRelation wordRelation , Item tokenItem ) { if ( numberString . charAt ( _NUM ) == _STR ) { if ( numberString . charAt ( _NUM ) == _STR ) { } else { String number = digit2num [ numberString . charAt ( _NUM ) - _STR ] ; wordRelation . addWord ( tokenItem , number ) ; } } else if ( numberString . charAt ( _NUM ) == _STR ) { String number = digit2enty [ numberString . charAt ( _NUM ) - _STR ] ; wordRelation . addWord ( tokenItem , number ) ; } else if ( numberString . charAt ( _NUM ) == _STR ) { String number = digit2teen [ numberString . charAt ( _NUM ) - _STR ] ; wordRelation . addWord ( tokenItem , number ) ; } else { String enty = digit2enty [ numberString . charAt ( _NUM ) - _STR ] ; wordRelation . addWord ( tokenItem , enty ) ; expandDigits ( numberString . substring ( _NUM , numberString . length ( ) ) , wordRelation , tokenItem ) ; } }
protected int indexOf ( String buffer , int start , int end , char ch ) { for ( int i = start ; i < end ; i ++ ) { if ( buffer . charAt ( i ) == ch ) { return i ; } } return - _NUM ; }
public Factory ( JavacMessages messages , String prefix ) { this . prefix = prefix ; this . formatter = new BasicDiagnosticFormatter ( messages ) ; defaultErrorFlags = EnumSet . of ( DiagnosticFlag . MANDATORY ) ; }
@ Override protected boolean isFrontierEmpty ( ) { cleanUpFrontier ( ) ; updateMetrics ( frontier . size ( ) ) ; return frontier . isEmpty ( ) ; }
public void testSetObject_int_Object_int_int ( ) throws SQLException { PreparedStatement ps = null ; try { String query = _STR ; ps = conn . prepareStatement ( query ) ; Statement st = null ; try { ps . setObject ( _NUM , Integer . MAX_VALUE , Types . INTEGER , Integer . MAX_VALUE ) ; ps . execute ( ) ; st = conn . createStatement ( ) ; st . execute ( _STR + Integer . MAX_VALUE ) ; ResultSet rs = st . getResultSet ( ) ; assertEquals ( _NUM , getCount ( rs ) ) ; } finally { try { st . close ( ) ; } catch ( Exception ee ) { } } query = _STR ; ps = conn . prepareStatement ( query ) ; try { ps . setObject ( _NUM , _STR , Types . CHAR , Integer . MIN_VALUE ) ; ps . execute ( ) ; st = conn . createStatement ( ) ; st . execute ( _STR ) ; ResultSet rs = st . getResultSet ( ) ; assertEquals ( _NUM , getCount ( rs ) ) ; } finally { try { st . close ( ) ; } catch ( Exception ee ) { } } query = _STR ; ps = conn . prepareStatement ( query ) ; BigDecimal bd2 = new BigDecimal ( _STR ) ; ps . setObject ( _NUM , bd2 , Types . DECIMAL , _NUM ) ; ps . execute ( ) ; query = _STR ; ps = conn . prepareStatement ( query ) ; Date d = new Date ( _NUM ) ; try { ps . setObject ( _NUM , d , Types . DATE , - _NUM ) ; ps . execute ( ) ; st = conn . createStatement ( ) ; st . execute ( _STR + d . getTime ( ) + _STR ) ; ResultSet rs = st . getResultSet ( ) ; assertEquals ( _NUM , getCount ( rs ) ) ; } finally { try { st . close ( ) ; } catch ( Exception ee ) { } } query = _STR ; ps = conn . prepareStatement ( query ) ; try { ps . setObject ( _NUM , _STR , Types . BLOB , _NUM ) ; ps . execute ( ) ; } finally { try { st . close ( ) ; } catch ( Exception ee ) { } } } finally { try { ps . close ( ) ; } catch ( Exception ee ) { } } try { ps . setObject ( _NUM , _STR , Types . CHAR , Integer . MIN_VALUE ) ; fail ( _STR ) ; } catch ( SQLException e ) { } }
@ Override public boolean isEnabled ( ) { if ( ( attributeSelectionPanel != null ) && ! isValueOnly ( ) ) { return attributeSelectionPanel . isEnabled ( ) ; } else { if ( this . crsComboBox != null ) { return crsComboBox . isEnabled ( ) ; } } return _BOOL ; }
@ Override public synchronized void initialize ( ) { if ( ! mRootDirectory . exists ( ) ) { if ( ! mRootDirectory . mkdirs ( ) ) { VolleyLog . e ( _STR , mRootDirectory . getAbsolutePath ( ) ) ; } return ; } File [ ] files = mRootDirectory . listFiles ( ) ; if ( files == null ) { return ; } for ( File file : files ) { BufferedInputStream fis = null ; try { fis = new BufferedInputStream ( new FileInputStream ( file ) ) ; CacheHeader entry = CacheHeader . readHeader ( fis ) ; entry . size = file . length ( ) ; putEntry ( entry . key , entry ) ; } catch ( IOException e ) { if ( file != null ) { file . delete ( ) ; } } finally { try { if ( fis != null ) { fis . close ( ) ; } } catch ( IOException ignored ) { } } } }
public static double variance ( double [ ] x , double mean ) { double var = _NUM ; int count = x . length ; for ( double aX : x ) { if ( Double . isNaN ( aX ) ) { count -- ; } else { double diff = aX - mean ; var += diff * diff ; } } if ( count < _NUM ) { count = _NUM ; } else { count = count - _NUM ; } return var / ( double ) count ; }
private void stashRequestUser ( RequestAndResponse requestAndResponse ) { if ( requestAndResponse . wasUserAlreadyStashed ) { return ; } requestAndResponse . wasUserAlreadyStashed = _BOOL ; final User user = dbLogic . getUserById ( getEffectiveUserId ( requestAndResponse ) ) ; if ( user != null ) { requestAndResponse . userIsAdmin = user . getIsAdmin ( ) ; requestAndResponse . userIsAccountClosed = user . getIsAccountClosed ( ) ; requestAndResponse . userOptions = user . getOptions ( ) ; } else { requestAndResponse . userOptions = _STR ; } }
@ Override public void sendLocationList ( ) { List < Location > locationList = lm . getLocationsByNameList ( ) ; ArrayList < Attribute > location ; for ( Location loc : locationList ) { location = new ArrayList < Attribute > ( _NUM ) ; location . add ( new Attribute ( LOCATIONS , loc ) ) ; try { sendMessage ( location ) ; } catch ( IOException ioe ) { log . debug ( _STR + loc . getName ( ) ) ; } } }
protected void serializeText ( Text node ) throws SAXException { if ( fNextIsRaw ) { fNextIsRaw = _BOOL ; fSerializer . processingInstruction ( javax . xml . transform . Result . PI_DISABLE_OUTPUT_ESCAPING , _STR ) ; dispatachChars ( node ) ; fSerializer . processingInstruction ( javax . xml . transform . Result . PI_ENABLE_OUTPUT_ESCAPING , _STR ) ; } else { boolean bDispatch = _BOOL ; if ( ( fFeatures & WELLFORMED ) != _NUM ) { isTextWellFormed ( node ) ; } boolean isElementContentWhitespace = _BOOL ; if ( fIsLevel3DOM ) { isElementContentWhitespace = node . isElementContentWhitespace ( ) ; } if ( isElementContentWhitespace ) { if ( ( fFeatures & ELEM_CONTENT_WHITESPACE ) != _NUM ) { bDispatch = _BOOL ; } } else { bDispatch = _BOOL ; } if ( ! applyFilter ( node , NodeFilter . SHOW_TEXT ) ) { return ; } if ( bDispatch ) { dispatachChars ( node ) ; } } }
@ Override public boolean isInsideSoftWrap ( @ NotNull VisualPosition visual ) { return isInsideSoftWrap ( visual , _BOOL ) ; }
static public InputStream findClusterXML ( String _clusterXML ) { String schemaNameToBeUsed = _clusterXML ; InputStream schemaInputStream ; String schemaFilePath = Constants . Container . CONTAINER_CONFIG_DIRECTORY + _STR + schemaNameToBeUsed + ClusterXML . CLUSTER_XML_FILE_SUFFIX ; schemaInputStream = getResourceStream ( schemaFilePath ) ; if ( schemaInputStream != null ) { if ( _logger . isLoggable ( Level . INFO ) ) { _logger . info ( _STR + getResourceURL ( schemaNameToBeUsed ) + _STR ) ; } return schemaInputStream ; } else { String defaultSchemaFileName = Constants . Container . CONTAINER_CONFIG_DIRECTORY + _STR + Constants . Schemas . DEFAULT_SCHEMA + ClusterXML . CLUSTER_XML_FILE_SUFFIX ; schemaInputStream = getResourceStream ( defaultSchemaFileName ) ; if ( schemaInputStream != null ) { if ( _logger . isLoggable ( Level . WARNING ) ) { _logger . warning ( _STR + schemaFilePath + _STR + getResourceURL ( defaultSchemaFileName ) + _STR ) ; } return schemaInputStream ; } else { if ( _logger . isLoggable ( Level . WARNING ) ) { _logger . warning ( _STR + defaultSchemaFileName ) ; } } } return schemaInputStream ; }
public boolean isValid ( World world ) { return _BOOL ; }
public void clear ( ) { Arrays . fill ( ritems , _NUM , rsize , null ) ; Arrays . fill ( pitems , _NUM , psize , null ) ; rsize = _NUM ; psize = _NUM ; }
private ParsePosition next ( final ParsePosition pos ) { pos . setIndex ( pos . getIndex ( ) + _NUM ) ; return pos ; }
public final AC growPrio ( int p ) { return growPrio ( p , curIx ) ; }
private int flush ( int offset ) { try { _os . write ( _buffer , _NUM , offset ) ; _offset = _NUM ; return _NUM ; } catch ( IOException e ) { throw new H3ExceptionOut ( e ) ; } }
protected String generateSectionLabel ( PieDataset dataset , Comparable key ) { String result = null ; if ( dataset != null ) { Object [ ] items = createItemArray ( dataset , key ) ; result = MessageFormat . format ( this . labelFormat , items ) ; } return result ; }
public synchronized void removeGraphListener ( GraphListener cl ) { m_graphListeners . remove ( cl ) ; }
abstract protected void doFadeIn ( ) ;
public void exec ( String description , String [ ] baseCommand ) throws BackupException { exec ( description , baseCommand , null , null , null , _BOOL , _BOOL ) ; }
public int increment ( int offset ) { CharSequence txt = getText ( ) ; int i ; if ( txt != null ) { try { i = Integer . parseInt ( txt . toString ( ) ) ; } catch ( NumberFormatException e ) { i = _NUM ; } } else { i = _NUM ; } i = i + offset ; setText ( String . valueOf ( i ) ) ; return i ; }
public static ServiceConfiguration create ( InputStream inStream ) throws IOException , IllegalArgumentException { try { checkNotNull ( inStream ) ; Properties properties = new Properties ( ) ; properties . load ( inStream ) ; return ( create ( properties ) ) ; } finally { if ( inStream != null ) { inStream . close ( ) ; } } }
private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = mPool . getBuf ( ( count + i ) * _NUM ) ; System . arraycopy ( buf , _NUM , newbuf , _NUM , count ) ; mPool . returnBuf ( buf ) ; buf = newbuf ; }
protected int [ ] splitSentence ( String sentence ) { String [ ] w = sentence . split ( _STR ) ; int [ ] words = new int [ w . length ] ; for ( int i = _NUM ; i < w . length ; i ++ ) words [ i ] = Vocabulary . id ( w [ i ] ) ; return words ; }
public static boolean isFailure ( List < Action > actions ) { return actions . isEmpty ( ) ; }
public void addToDictionary ( String s ) { if ( ! getAutoComplete ( ) ) return ; if ( dict == null ) { setUp ( ) ; this . dict = createDefaultDictionary ( ) ; } dict . addEntry ( s . trim ( ) ) ; }
public static int [ ] [ ] deep_copy ( int M [ ] [ ] ) { int [ ] [ ] C = new int [ M . length ] [ ] ; for ( int i = _NUM ; i < C . length ; i ++ ) { C [ i ] = Arrays . copyOf ( M [ i ] , M [ i ] . length ) ; } return C ; }
public final boolean checkTag ( int identifier ) { return Arrays . binarySearch ( identifiers [ _NUM ] , identifier ) >= _NUM ; }
public void waitForMessageToArrive ( ) { LOG . info ( _STR ) ; long start = System . currentTimeMillis ( ) ; synchronized ( messages ) { try { while ( hasReceivedMessage ( ) ) { messages . wait ( _NUM ) ; } } catch ( InterruptedException e ) { LOG . info ( _STR + e ) ; } } long end = System . currentTimeMillis ( ) - start ; LOG . info ( _STR + end + _STR ) ; }
public Date ( String date ) { String [ ] fields = date . split ( _STR ) ; if ( fields . length != _NUM ) { throw new IllegalArgumentException ( _STR ) ; } month = Integer . parseInt ( fields [ _NUM ] ) ; day = Integer . parseInt ( fields [ _NUM ] ) ; year = Integer . parseInt ( fields [ _NUM ] ) ; if ( ! isValid ( month , day , year ) ) throw new IllegalArgumentException ( _STR ) ; }
public static void copy ( File src , File dst ) throws IOException { if ( src . isDirectory ( ) ) { ensureDirectoryExists ( dst ) ; String [ ] filesList = src . list ( ) ; for ( String file : filesList ) { File srcFile = new File ( src , file ) ; File destFile = new File ( dst , file ) ; copy ( srcFile , destFile ) ; } } else { copyFile ( src , dst ) ; } }
public MapObjects ( PokemonGo api ) { this . api = api ; }
@ Override public byte [ ] read ( int length ) throws IOException { if ( length > available ( ) ) { throw new EndOfBufferException ( ) ; } byte [ ] res = new byte [ length ] ; System . arraycopy ( buffer , read_pos , res , _NUM , length ) ; read_pos = read_pos + length ; return res ; }
public String encode ( String pString ) throws EncoderException { if ( pString == null ) { return null ; } try { return encode ( pString , getDefaultCharset ( ) ) ; } catch ( UnsupportedEncodingException e ) { throw new EncoderException ( e . getMessage ( ) ) ; } }
public void testSortsAccordingNumberOfAttributes ( ) throws Exception { XppDom dom1 = XppFactory . buildDom ( _STR ) ; XppDom dom2 = XppFactory . buildDom ( _STR ) ; assertEquals ( - _NUM , comparator . compare ( dom1 , dom2 ) ) ; assertEquals ( _STR , xpath . get ( ) ) ; assertEquals ( _NUM , comparator . compare ( dom2 , dom1 ) ) ; assertEquals ( _STR , xpath . get ( ) ) ; }
static void incrementKeepAliveCount ( ) { synchronized ( keepAliveLock ) { keepAliveCount ++ ; if ( reaper == null ) { reaper = AccessController . doPrivileged ( new NewThreadAction ( new Reaper ( ) , _STR , _BOOL ) ) ; reaper . start ( ) ; } if ( gcLatencyRequest == null ) { gcLatencyRequest = GC . requestLatency ( gcInterval ) ; } } }
static MethodHandle makeCollectArguments ( MethodHandle target , MethodHandle collector , int collectArgPos , boolean retainOriginalArgs ) { MethodType targetType = target . type ( ) ; MethodType collectorType = collector . type ( ) ; int collectArgCount = collectorType . parameterCount ( ) ; Class < ? > collectValType = collectorType . returnType ( ) ; int collectValCount = ( collectValType == void . class ? _NUM : _NUM ) ; MethodType srcType = targetType . dropParameterTypes ( collectArgPos , collectArgPos + collectValCount ) ; if ( ! retainOriginalArgs ) { srcType = srcType . insertParameterTypes ( collectArgPos , collectorType . parameterList ( ) ) ; } MethodType lambdaType = srcType . invokerType ( ) ; Name [ ] names = arguments ( _NUM , lambdaType ) ; final int collectNamePos = names . length - _NUM ; final int targetNamePos = names . length - _NUM ; Name [ ] collectorArgs = Arrays . copyOfRange ( names , _NUM + collectArgPos , _NUM + collectArgPos + collectArgCount ) ; names [ collectNamePos ] = new Name ( collector , ( Object [ ] ) collectorArgs ) ; Name [ ] targetArgs = new Name [ targetType . parameterCount ( ) ] ; int inputArgPos = _NUM ; int targetArgPos = _NUM ; int chunk = collectArgPos ; System . arraycopy ( names , inputArgPos , targetArgs , targetArgPos , chunk ) ; inputArgPos += chunk ; targetArgPos += chunk ; if ( collectValType != void . class ) { targetArgs [ targetArgPos ++ ] = names [ collectNamePos ] ; } chunk = collectArgCount ; if ( retainOriginalArgs ) { System . arraycopy ( names , inputArgPos , targetArgs , targetArgPos , chunk ) ; targetArgPos += chunk ; } inputArgPos += chunk ; chunk = targetArgs . length - targetArgPos ; System . arraycopy ( names , inputArgPos , targetArgs , targetArgPos , chunk ) ; assert ( inputArgPos + chunk == collectNamePos ) ; names [ targetNamePos ] = new Name ( target , ( Object [ ] ) targetArgs ) ; LambdaForm form = new LambdaForm ( _STR , lambdaType . parameterCount ( ) , names ) ; return SimpleMethodHandle . make ( srcType , form ) ; }
public InSpacePredicate ( Object ... values ) { _inValues = new HashSet < Object > ( ) ; for ( Object value : values ) { _inValues . add ( value ) ; } }
private static void delete ( File f ) { if ( f . isDirectory ( ) ) { for ( File c : f . listFiles ( ) ) { delete ( c ) ; } } if ( ! f . delete ( ) ) { PrintStream err = System . err ; err . println ( _STR + f ) ; } }
protected List < String > prepareSortKeyStatements ( List < SortKey > sortKeys ) { List < String > keys = new ArrayList < String > ( ) ; for ( int i = _NUM ; i < sortKeys . size ( ) ; i ++ ) { SortKey sortKey = sortKeys . get ( i ) ; keys . add ( explicitMapping . getDbColumnName ( sortKey . getField ( ) ) + ( sortKey . isAscendingOrder ( ) ? _STR : _STR ) ) ; } return keys ; }
public static String experimenterToString ( OFInstructionExperimenter inst , Logger log ) { return Long . toString ( inst . getExperimenter ( ) ) ; }
@ SuppressLint ( _STR ) public void elementType ( String name , int model , int memberOf , int flags ) { ElementType e = new ElementType ( name , model , memberOf , flags , this ) ; theElementTypes . put ( name . toLowerCase ( ) , e ) ; if ( memberOf == M_ROOT ) theRoot = e ; }
public static void printMagnitudes ( ) { printMagnitudes ( System . out ) ; }
private Optional < CuratorFramework > createClient ( String zookeeperUrl ) { if ( StringUtils . isNotBlank ( zookeeperUrl ) ) { CuratorFramework client = ConfigurationsUtils . getClient ( zookeeperUrl ) ; client . start ( ) ; return Optional . of ( client ) ; } else { return Optional . empty ( ) ; } }
public static String addCvDescription ( String toolTip , String cvDescription , String mask ) { String descString = cvDescription ; String temp = getMaskDescription ( mask ) ; if ( temp . length ( ) > _NUM ) { descString = descString + _STR + temp ; } if ( PaneProgFrame . getShowCvNumbers ( ) && ( descString != null ) ) { if ( toolTip == null ) { toolTip = descString ; } else { toolTip = addTextHTMLaware ( toolTip , _STR + descString + _STR ) ; } } else if ( toolTip == null ) { toolTip = _STR ; } return toolTip ; }
public final static int readRawUntil ( final StringBuilder out , final String in , final int start , final char end ) { int pos = start ; while ( pos < in . length ( ) ) { final char ch = in . charAt ( pos ) ; if ( ch == end ) { break ; } out . append ( ch ) ; pos ++ ; } return ( pos == in . length ( ) ) ? - _NUM : pos ; }
private static void convertToHTML40 ( AttributeSet from , MutableAttributeSet to ) { Enumeration keys = from . getAttributeNames ( ) ; String value = _STR ; while ( keys . hasMoreElements ( ) ) { Object key = keys . nextElement ( ) ; if ( key instanceof CSS . Attribute ) { value = value + _STR + key + _STR + from . getAttribute ( key ) + _STR ; } else { to . addAttribute ( key , from . getAttribute ( key ) ) ; } } if ( value . length ( ) > _NUM ) { to . addAttribute ( HTML . Attribute . STYLE , value ) ; } }
public synchronized void close ( ) throws IOException { if ( in == null ) return ; in . close ( ) ; in = null ; buf = null ; }
private static SSLSocketFactory trustAllHosts ( HttpsURLConnection connection ) { SSLSocketFactory oldFactory = connection . getSSLSocketFactory ( ) ; try { SSLContext sc = SSLContext . getInstance ( _STR ) ; sc . init ( null , trustAllCerts , new java . security . SecureRandom ( ) ) ; SSLSocketFactory newFactory = sc . getSocketFactory ( ) ; connection . setSSLSocketFactory ( newFactory ) ; } catch ( Exception e ) { LOG . e ( LOG_TAG , e . getMessage ( ) , e ) ; } return oldFactory ; }
public void updateAmount ( ) { setAmt ( getTotalAmount ( ) ) ; }
public void testCreationUnique ( ) { Instances data ; ArrayList < Attribute > atts ; String relName ; relName = _STR ; atts = new ArrayList < Attribute > ( ) ; atts . add ( new Attribute ( _STR ) ) ; atts . add ( new Attribute ( _STR ) ) ; atts . add ( new Attribute ( _STR , _STR ) ) ; atts . add ( new Attribute ( _STR , new ArrayList < String > ( Arrays . asList ( new String [ ] { _STR , _STR , _STR } ) ) ) ) ; atts . add ( new Attribute ( _STR , new ArrayList < String > ( Arrays . asList ( new String [ ] { _STR , _STR } ) ) ) ) ; atts . add ( new Attribute ( _STR , ( ArrayList < String > ) null ) ) ; data = new Instances ( relName , atts , _NUM ) ; assertEquals ( _STR , relName , data . relationName ( ) ) ; assertEquals ( _STR , atts . size ( ) , data . numAttributes ( ) ) ; }
private void updateLegends ( ) { if ( m_span == null ) { m_span = new JPanel ( ) ; } JPanel padder = new JPanel ( ) ; JPanel padd2 = new JPanel ( ) ; m_span . setPreferredSize ( new Dimension ( m_span . getPreferredSize ( ) . width , ( m_plots . size ( ) + _NUM ) * _NUM ) ) ; m_span . setMaximumSize ( new Dimension ( m_span . getPreferredSize ( ) . width , ( m_plots . size ( ) + _NUM ) * _NUM ) ) ; LegendEntry tmp ; GridBagLayout gb = new GridBagLayout ( ) ; GridBagLayout gb2 = new GridBagLayout ( ) ; GridBagConstraints constraints = new GridBagConstraints ( ) ; m_span . removeAll ( ) ; padder . setLayout ( gb ) ; m_span . setLayout ( gb2 ) ; constraints . anchor = GridBagConstraints . CENTER ; constraints . gridx = _NUM ; constraints . gridy = _NUM ; constraints . weightx = _NUM ; constraints . fill = GridBagConstraints . HORIZONTAL ; constraints . gridwidth = _NUM ; constraints . gridheight = _NUM ; constraints . insets = new Insets ( _NUM , _NUM , _NUM , _NUM ) ; padder . add ( m_span , constraints ) ; constraints . gridx = _NUM ; constraints . gridy = _NUM ; constraints . weightx = _NUM ; constraints . fill = GridBagConstraints . BOTH ; constraints . gridwidth = _NUM ; constraints . gridheight = _NUM ; constraints . weighty = _NUM ; constraints . insets = new Insets ( _NUM , _NUM , _NUM , _NUM ) ; padder . add ( padd2 , constraints ) ; constraints . weighty = _NUM ; setViewportView ( padder ) ; constraints . anchor = GridBagConstraints . CENTER ; constraints . gridx = _NUM ; constraints . gridy = _NUM ; constraints . weightx = _NUM ; constraints . fill = GridBagConstraints . HORIZONTAL ; constraints . gridwidth = _NUM ; constraints . gridheight = _NUM ; constraints . weighty = _NUM ; constraints . insets = new Insets ( _NUM , _NUM , _NUM , _NUM ) ; for ( int i = _NUM ; i < m_plots . size ( ) ; i ++ ) { tmp = new LegendEntry ( m_plots . get ( i ) , i ) ; constraints . gridy = i ; m_span . add ( tmp , constraints ) ; } }
public String evaluate ( XPathContext xctxt , int context , org . apache . xml . utils . PrefixResolver nsNode ) throws javax . xml . transform . TransformerException { if ( null != m_simpleString ) { return m_simpleString ; } else if ( null != m_parts ) { final FastStringBuffer buf = getBuffer ( ) ; String out = null ; int n = m_parts . size ( ) ; try { for ( int i = _NUM ; i < n ; i ++ ) { AVTPart part = ( AVTPart ) m_parts . elementAt ( i ) ; part . evaluate ( xctxt , buf , context , nsNode ) ; } out = buf . toString ( ) ; } finally { if ( USE_OBJECT_POOL ) { StringBufferPool . free ( buf ) ; } else { buf . setLength ( _NUM ) ; } } return out ; } else { return _STR ; } }
public static byte [ ] readDex ( File file ) throws IOException { return readDex ( file . toPath ( ) ) ; }
public void addUpdateListener ( AnimatorUpdateListener listener ) { if ( mUpdateListeners == null ) { mUpdateListeners = new ArrayList < AnimatorUpdateListener > ( ) ; } mUpdateListeners . add ( listener ) ; }
public void runCommercial ( String stream , int length ) { if ( stream == null || stream . isEmpty ( ) ) { commercialResult ( stream , _STR , TwitchApi . RequestResult . FAILED ) ; } else { String channel = _STR + stream ; if ( isChannelOpen ( channel ) ) { g . printLine ( channel , _STR + length + _STR ) ; } else { g . printLine ( _STR + length + _STR + stream + _STR ) ; } api . runCommercial ( stream , settings . getString ( _STR ) , length ) ; } }
public void addSubTree ( int index , List < Node > children ) { List < NodeDescriptor > nodeDescriptors = convertTreeNodesHelper ( children ) ; roots . addChildren ( index , nodeDescriptors ) ; List < Node > nodes = new ArrayList < > ( ) ; for ( NodeDescriptor child : nodeDescriptors ) { nodes . add ( child . getNode ( ) ) ; } if ( ! nodes . isEmpty ( ) ) { fireEvent ( new StoreAddEvent ( index , nodes ) ) ; } }
void generateWhile ( Tree . WhileStatement that ) { Tree . WhileClause whileClause = that . getWhileClause ( ) ; List < VarHolder > vars = specialConditionsAndBlock ( whileClause . getConditionList ( ) , whileClause . getBlock ( ) , _STR , _BOOL ) ; for ( VarHolder v : vars ) { v . forget ( ) ; } }
public static double igamma ( double a , double x ) { double coef = ( Math . exp ( - x ) * Math . pow ( x , a ) ) / gamma ( a ) ; double sum = _NUM ; for ( int i = _NUM ; i < _NUM ; i ++ ) { sum += ( gamma ( a ) / gamma ( a + _NUM + ( double ) i ) ) * Math . pow ( x , ( double ) i ) ; } return ( coef * sum ) ; }
public void initializeActiveSlotsList ( String slots ) { if ( activeSlotsList == null ) { activeSlotsList = new ArrayList < String > ( ) ; } for ( String s : slots . split ( _STR ) ) { activeSlotsList . add ( s ) ; } }
private static String convertActionTypeToIntent ( RamlActionType actionType , boolean isTargetCollection ) { switch ( actionType ) { case DELETE : return _STR ; case GET : return _STR ; case POST : if ( isTargetCollection ) { return _STR ; } case PUT : return _STR ; case PATCH : return _STR ; default : return _STR ; } }
public static String hide ( final String key ) { return isHidden ( key ) ? key : HIDDEN_PREFIX . concat ( key ) ; }
private synchronized IMqttToken removeMqttToken ( Bundle data ) { String activityToken = data . getString ( MqttServiceConstants . CALLBACK_ACTIVITY_TOKEN ) ; if ( activityToken != null ) { int tokenNumber = Integer . parseInt ( activityToken ) ; IMqttToken token = tokenMap . get ( tokenNumber ) ; tokenMap . delete ( tokenNumber ) ; return token ; } return null ; }
public static boolean isExplicitAllType ( String [ ] types ) { return types != null && types . length == _NUM && ALL . equals ( types [ _NUM ] ) ; }
public static double incompleteBetaFraction2 ( double a , double b , double x ) { double xk , pk , pkm1 , pkm2 , qk , qkm1 , qkm2 ; double k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 ; double r , t , ans , z , thresh ; int n ; k1 = a ; k2 = b - _NUM ; k3 = a ; k4 = a + _NUM ; k5 = _NUM ; k6 = a + b ; k7 = a + _NUM ; ; k8 = a + _NUM ; pkm2 = _NUM ; qkm2 = _NUM ; pkm1 = _NUM ; qkm1 = _NUM ; z = x / ( _NUM - x ) ; ans = _NUM ; r = _NUM ; n = _NUM ; thresh = _NUM * MACHEP ; do { xk = - ( z * k1 * k2 ) / ( k3 * k4 ) ; pk = pkm1 + pkm2 * xk ; qk = qkm1 + qkm2 * xk ; pkm2 = pkm1 ; pkm1 = pk ; qkm2 = qkm1 ; qkm1 = qk ; xk = ( z * k5 * k6 ) / ( k7 * k8 ) ; pk = pkm1 + pkm2 * xk ; qk = qkm1 + qkm2 * xk ; pkm2 = pkm1 ; pkm1 = pk ; qkm2 = qkm1 ; qkm1 = qk ; if ( qk != _NUM ) { r = pk / qk ; } if ( r != _NUM ) { t = Math . abs ( ( ans - r ) / r ) ; ans = r ; } else { t = _NUM ; } if ( t < thresh ) { return ans ; } k1 += _NUM ; k2 -= _NUM ; k3 += _NUM ; k4 += _NUM ; k5 += _NUM ; k6 += _NUM ; k7 += _NUM ; k8 += _NUM ; if ( ( Math . abs ( qk ) + Math . abs ( pk ) ) > big ) { pkm2 *= biginv ; pkm1 *= biginv ; qkm2 *= biginv ; qkm1 *= biginv ; } if ( ( Math . abs ( qk ) < biginv ) || ( Math . abs ( pk ) < biginv ) ) { pkm2 *= big ; pkm1 *= big ; qkm2 *= big ; qkm1 *= big ; } } while ( ++ n < _NUM ) ; return ans ; }
private String readUntil ( char [ ] delimiter , boolean returnText ) throws IOException , XmlPullParserException { int start = position ; StringBuilder result = null ; if ( returnText && text != null ) { result = new StringBuilder ( ) ; result . append ( text ) ; } search : while ( _BOOL ) { if ( position + delimiter . length > limit ) { if ( start < position && returnText ) { if ( result == null ) { result = new StringBuilder ( ) ; } result . append ( buffer , start , position - start ) ; } if ( ! fillBuffer ( delimiter . length ) ) { checkRelaxed ( UNEXPECTED_EOF ) ; type = COMMENT ; return null ; } start = position ; } for ( int i = _NUM ; i < delimiter . length ; i ++ ) { if ( buffer [ position + i ] != delimiter [ i ] ) { position ++ ; continue search ; } } break ; } int end = position ; position += delimiter . length ; if ( ! returnText ) { return null ; } else if ( result == null ) { return stringPool . get ( buffer , start , end - start ) ; } else { result . append ( buffer , start , end - start ) ; return result . toString ( ) ; } }
public boolean exists ( String key ) { return exists ( key , _BOOL ) ; }
private Config ( ) { throw new AssertionError ( _STR ) ; }
public boolean isLeaf ( ) { return children == null || children . isEmpty ( ) ; }
public static void drawShadow ( final Rectangle2D rect , final Graphics2D g2 ) { Graphics2D g2S = ( Graphics2D ) g2 . create ( ) ; Rectangle2D shadow = new Rectangle2D . Double ( rect . getX ( ) + _NUM , rect . getY ( ) + ProcessDrawer . HEADER_HEIGHT + _NUM , rect . getWidth ( ) , rect . getHeight ( ) - ProcessDrawer . HEADER_HEIGHT ) ; GeneralPath bottom = new GeneralPath ( ) ; bottom . moveTo ( shadow . getX ( ) , rect . getMaxY ( ) ) ; bottom . lineTo ( rect . getMaxX ( ) , rect . getMaxY ( ) ) ; bottom . lineTo ( shadow . getMaxX ( ) , shadow . getMaxY ( ) ) ; bottom . lineTo ( shadow . getMinX ( ) , shadow . getMaxY ( ) ) ; bottom . closePath ( ) ; g2S . setPaint ( new GradientPaint ( ( float ) rect . getX ( ) , ( float ) rect . getMaxY ( ) , Color . gray , ( float ) rect . getX ( ) , ( float ) shadow . getMaxY ( ) , TRANSPARENT_GRAY ) ) ; g2S . fill ( bottom ) ; GeneralPath right = new GeneralPath ( ) ; right . moveTo ( rect . getMaxX ( ) , shadow . getMinY ( ) ) ; right . lineTo ( shadow . getMaxX ( ) , shadow . getMinY ( ) ) ; right . lineTo ( shadow . getMaxX ( ) , shadow . getMaxY ( ) ) ; right . lineTo ( rect . getMaxX ( ) , rect . getMaxY ( ) ) ; right . closePath ( ) ; g2S . setPaint ( new GradientPaint ( ( float ) rect . getMaxX ( ) , ( float ) shadow . getY ( ) , Color . gray , ( float ) shadow . getMaxX ( ) , ( float ) shadow . getY ( ) , TRANSPARENT_GRAY ) ) ; g2S . fill ( right ) ; g2S . dispose ( ) ; }
@ Override public void addFocusables ( ArrayList < View > views , int direction , int focusableMode ) { final int focusableCount = views . size ( ) ; final int descendantFocusability = getDescendantFocusability ( ) ; if ( descendantFocusability != FOCUS_BLOCK_DESCENDANTS ) { for ( int i = _NUM ; i < getChildCount ( ) ; i ++ ) { final View child = getChildAt ( i ) ; if ( child . getVisibility ( ) == VISIBLE ) { ItemInfo ii = infoForChild ( child ) ; if ( ii != null && ii . position == mCurItem ) { child . addFocusables ( views , direction , focusableMode ) ; } } } } if ( descendantFocusability != FOCUS_AFTER_DESCENDANTS || ( focusableCount == views . size ( ) ) ) { if ( ! isFocusable ( ) ) { return ; } if ( ( focusableMode & FOCUSABLES_TOUCH_MODE ) == FOCUSABLES_TOUCH_MODE && isInTouchMode ( ) && ! isFocusableInTouchMode ( ) ) { return ; } if ( views != null ) { views . add ( this ) ; } } }
private boolean isValid ( CharSequence text ) { for ( int i = _NUM ; i < text . length ( ) ; i ++ ) { char c = text . charAt ( i ) ; boolean valid = c == _NUM || c == _NUM || c == _NUM || ( c >= _NUM && c <= _NUM ) || ( c >= _NUM && c <= _NUM ) ; if ( ! valid ) { return _BOOL ; } } return _BOOL ; }
public static void interrupt ( final Thread thread ) { if ( thread != null ) { thread . interrupt ( ) ; } }
private void writeObject ( java . io . ObjectOutputStream s ) throws java . io . IOException { s . defaultWriteObject ( ) ; s . writeInt ( attrs . size ( ) ) ; Enumeration < Attribute > attrEnum = attrs . elements ( ) ; while ( attrEnum . hasMoreElements ( ) ) { s . writeObject ( attrEnum . nextElement ( ) ) ; } }
public static Container east ( Component east ) { return Container . encloseIn ( new BorderLayout ( ) , east , BorderLayout . EAST ) ; }
public static Object [ ] putAll ( ) { Region region = cache . getRegion ( Region . SEPARATOR + REGION_NAME ) ; assertNotNull ( region ) ; try { Map map = new LinkedHashMap ( ) ; map . put ( PUTALL_KEY1 , PUTALL_VALUE1 ) ; map . put ( PUTALL_KEY2 , PUTALL_VALUE2 ) ; map . put ( PUTALL_KEY3 , PUTALL_VALUE3 ) ; map . put ( PUTALL_KEY4 , PUTALL_VALUE4 ) ; map . put ( PUTALL_KEY5 , PUTALL_VALUE5 ) ; region . putAll ( map , _STR ) ; EventID [ ] evids = new EventID [ _NUM ] ; evids [ _NUM ] = putAlleventId1 ; evids [ _NUM ] = putAlleventId2 ; evids [ _NUM ] = putAlleventId3 ; evids [ _NUM ] = putAlleventId4 ; evids [ _NUM ] = putAlleventId5 ; assertNotNull ( evids [ _NUM ] ) ; assertNotNull ( evids [ _NUM ] ) ; assertNotNull ( evids [ _NUM ] ) ; assertNotNull ( evids [ _NUM ] ) ; assertNotNull ( evids [ _NUM ] ) ; return evids ; } catch ( Exception e ) { fail ( _STR + e ) ; } return null ; }
public void loadLayout ( File oFile , boolean newTab ) { loadLayout ( oFile , newTab , _BOOL ) ; }
public void track ( File file , Object marker , FileDeleteStrategy deleteStrategy ) { if ( file == null ) { throw new NullPointerException ( _STR ) ; } addTracker ( file . getPath ( ) , marker , deleteStrategy ) ; }
public static void CF5 ( double [ ] x , double [ ] f , double [ ] c , int nx ) { double sum1 = _NUM ; double sum2 = _NUM ; double yj ; for ( int j = _NUM ; j <= nx ; j ++ ) { if ( j % _NUM == _NUM ) { yj = x [ j - _NUM ] - _NUM * x [ _NUM ] * Math . cos ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; sum1 += _NUM * yj * yj - Math . cos ( _NUM * PI * yj ) + _NUM ; } else { yj = x [ j - _NUM ] - _NUM * x [ _NUM ] * Math . sin ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; if ( j == _NUM ) { sum2 += yj < _NUM - _NUM * Math . sqrt ( _NUM ) ? Math . abs ( yj ) : ( _NUM + ( yj - _NUM ) * ( yj - _NUM ) ) ; } else { sum2 += _NUM * yj * yj - Math . cos ( _NUM * PI * yj ) + _NUM ; } } } f [ _NUM ] = x [ _NUM ] + sum1 ; f [ _NUM ] = _NUM - x [ _NUM ] + sum2 ; c [ _NUM ] = x [ _NUM ] - _NUM * x [ _NUM ] * Math . sin ( _NUM * x [ _NUM ] * PI + _NUM * PI / nx ) - _NUM * x [ _NUM ] + _NUM ; }
public static String separatorsToUnix ( String path ) { if ( path == null || path . indexOf ( WINDOWS_SEPARATOR ) == - _NUM ) { return path ; } return path . replace ( WINDOWS_SEPARATOR , UNIX_SEPARATOR ) ; }
public boolean hasParameter ( String name ) { return _parameters . hasParameter ( name ) ; }
@ Override public long freeMemory ( long windowId ) throws IOException { long size = keyStream . dataSizeUpToWindow ( windowId ) + valueStream . dataSizeUpToWindow ( windowId ) ; windowsForFreeMemory . add ( windowId ) ; return size ; }
public static boolean isSQL99NonReservedKeyword ( String identifier ) { if ( identifier == null ) { throw new NullPointerException ( _STR ) ; } return Arrays . binarySearch ( SQL99_NON_RESERVED , identifier . toUpperCase ( ) ) >= _NUM ; }
@ SuppressWarnings ( _STR ) public static < T > void sort ( List < T > list , Comparator < ? super T > comparator ) { T [ ] array = list . toArray ( ( T [ ] ) new Object [ list . size ( ) ] ) ; Arrays . sort ( array , comparator ) ; int i = _NUM ; ListIterator < T > it = list . listIterator ( ) ; while ( it . hasNext ( ) ) { it . next ( ) ; it . set ( array [ i ++ ] ) ; } }
@ Override public long handleCommit ( final long commitTime ) { if ( error != null ) throw new IndexInconsistentError ( error ) ; final IRootBlockView view = journal . getRootBlockView ( ) ; final ByteBuffer rbv = view . asReadOnlyBuffer ( ) ; final ByteBuffer bb = ByteBuffer . allocate ( rbv . capacity ( ) ) ; for ( int i = _NUM ; i < rbv . capacity ( ) ; i ++ ) { bb . put ( rbv . get ( ) ) ; } bb . flip ( ) ; return journal . write ( bb ) ; }
public boolean isAppendTaskName ( ) { return appendTaskName ; }
public static final String toString ( String str ) { if ( str == null ) return _STR ; ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; toByteArray ( buffer , str ) ; return buffer . toString ( ) ; }
public static Cache . Entry makeRandomCacheEntry ( byte [ ] data , boolean isExpired , boolean needsRefresh ) { Random random = new Random ( ) ; Cache . Entry entry = new Cache . Entry ( ) ; if ( data != null ) { entry . data = data ; } else { entry . data = new byte [ random . nextInt ( _NUM ) ] ; } entry . etag = String . valueOf ( random . nextLong ( ) ) ; entry . lastModified = random . nextLong ( ) ; entry . ttl = isExpired ? _NUM : Long . MAX_VALUE ; entry . softTtl = needsRefresh ? _NUM : Long . MAX_VALUE ; return entry ; }
public static double max ( double [ ] data ) { double max = Double . NaN ; for ( int i = _NUM ; i < data . length ; i ++ ) { if ( Double . isNaN ( data [ i ] ) ) continue ; if ( Double . isNaN ( max ) || data [ i ] > max ) max = data [ i ] ; } return max ; }
private static boolean isStartElement ( String line ) { int first = line . lastIndexOf ( _STR ) ; int last = line . lastIndexOf ( _STR ) ; if ( last < first ) { return _BOOL ; } else { int firstEnd = line . lastIndexOf ( _STR ) ; int lastEnd = line . lastIndexOf ( _STR ) ; if ( ( firstEnd != first ) && ( ( lastEnd + _NUM ) != last ) ) { return _BOOL ; } } return _BOOL ; }
long readLong ( ) throws IOException { return ( ( ( long ) _is . read ( ) << _NUM ) | ( ( long ) _is . read ( ) << _NUM ) | ( ( long ) _is . read ( ) << _NUM ) | ( ( long ) _is . read ( ) << _NUM ) | ( ( long ) _is . read ( ) << _NUM ) | ( ( long ) _is . read ( ) << _NUM ) | ( ( long ) _is . read ( ) << _NUM ) | ( ( long ) _is . read ( ) ) ) ; }
@ Override public Instance remove ( int index ) { return m_Instances . remove ( index ) ; }
protected static String extractAccessKey ( String s3uri ) { return s3uri . substring ( s3uri . indexOf ( _STR ) + _NUM , s3uri . indexOf ( _STR , s3uri . indexOf ( _STR ) + _NUM ) ) ; }
public boolean doTransaction ( DB db , Object threadstate ) throws WorkloadException { boolean ret = _BOOL ; long st = System . nanoTime ( ) ; String op = operationchooser . nextString ( ) ; if ( op . compareTo ( _STR ) == _NUM ) { ret = doTransactionRead ( db ) ; } else if ( op . compareTo ( _STR ) == _NUM ) { ret = doTransactionUpdate ( db ) ; } else if ( op . compareTo ( _STR ) == _NUM ) { ret = doTransactionInsert ( db ) ; } else if ( op . compareTo ( _STR ) == _NUM ) { ret = doTransactionScan ( db ) ; } else { ret = doTransactionReadModifyWrite ( db ) ; } long en = System . nanoTime ( ) ; _measurements . measure ( _operations . get ( op ) , ( int ) ( ( en - st ) / _NUM ) ) ; if ( ret ) _measurements . reportReturnCode ( _operations . get ( op ) , - _NUM ) ; else { _measurements . reportReturnCode ( _operations . get ( op ) , _NUM ) ; } actualopcount . addAndGet ( _NUM ) ; return ret ; }
public ToStringHelper addValue ( boolean value ) { return addHolder ( String . valueOf ( value ) ) ; }
public static void copyExcept ( Object src , Object dst , int oldSize , int removeIndex ) { if ( removeIndex > _NUM && oldSize > _NUM ) { System . arraycopy ( src , _NUM , dst , _NUM , removeIndex ) ; } if ( removeIndex < oldSize ) { System . arraycopy ( src , removeIndex + _NUM , dst , removeIndex , oldSize - removeIndex - _NUM ) ; } }
public SiteMonitor ( String [ ] urlList ) { siteUrlList = urlList ; }
private Set unionIPRange ( byte [ ] ipWithSubmask1 , byte [ ] ipWithSubmask2 ) { Set set = new HashSet ( ) ; if ( Arrays . areEqual ( ipWithSubmask1 , ipWithSubmask2 ) ) { set . add ( ipWithSubmask1 ) ; } else { set . add ( ipWithSubmask1 ) ; set . add ( ipWithSubmask2 ) ; } return set ; }
public Optional < BlazeVertex > vertex ( final String vertexId ) { try ( final CloseableIterator < Vertex > it = vertices ( vertexId ) ) { final Optional < BlazeVertex > v = it . hasNext ( ) ? Optional . of ( ( BlazeVertex ) it . next ( ) ) : Optional . empty ( ) ; if ( it . hasNext ( ) ) { throw new IllegalStateException ( _STR + vertexId ) ; } return v ; } }
public static long addAndGet ( AtomicLong current , long toAdd ) { long u , r ; do { r = current . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } u = addCap ( r , toAdd ) ; } while ( ! current . compareAndSet ( r , u ) ) ; return u ; }
private void start ( HttpServletRequest request , HttpServletResponse response ) throws IOException { String label = request . getParameter ( _STR ) ; String detail = request . getParameter ( _STR ) ; MonKey key = getMonKey ( label , detail , DEFAULT_UNITS ) ; startMon ( key ) ; PrintWriter out = response . getWriter ( ) ; out . println ( OK + _STR + label ) ; }
public double norm ( ) { double sum = _NUM ; for ( int i = _NUM ; i < components . length ; i ++ ) sum += components [ i ] * components [ i ] ; return Math . sqrt ( sum ) ; }
public static double P_Harmonic ( int Y [ ] [ ] , int Ypred [ ] [ ] ) { int allMissings = _NUM ; int N = Y . length ; double loss = _NUM ; for ( int i = _NUM ; i < N ; i ++ ) { if ( allMissing ( Y [ i ] ) ) { allMissings ++ ; continue ; } double curLoss = P_Harmonic ( Y [ i ] , Ypred [ i ] ) ; if ( Double . isNaN ( curLoss ) ) { allMissings ++ ; continue ; } loss += curLoss ; } return loss / ( double ) ( N - allMissings ) ; }
public void writeEntry ( CCacheOutputStream cos ) throws IOException { cos . write16 ( adType ) ; cos . write32 ( adData . length ) ; cos . write ( adData , _NUM , adData . length ) ; }
public CloseableAnimatedBitmap ( List < Bitmap > bitmaps , List < Integer > durations , ResourceReleaser < Bitmap > resourceReleaser ) { Preconditions . checkNotNull ( bitmaps ) ; Preconditions . checkState ( bitmaps . size ( ) >= _NUM , _STR ) ; mBitmaps = new ArrayList < > ( ) ; mBitmapReferences = new ArrayList < > ( ) ; for ( Bitmap bitmap : bitmaps ) { mBitmapReferences . add ( CloseableReference . of ( bitmap , resourceReleaser ) ) ; mBitmaps . add ( bitmap ) ; } mDurations = Preconditions . checkNotNull ( durations ) ; Preconditions . checkState ( mDurations . size ( ) == mBitmaps . size ( ) , _STR ) ; }
public static String readLabelFile ( String entrySeparator , boolean ensureInitialBoundary , String trfname ) throws IOException { BufferedReader lab = new BufferedReader ( new FileReader ( trfname ) ) ; try { XwavesLabelfileReader xlds = new XwavesLabelfileReader ( trfname ) ; String result = StringUtils . join ( entrySeparator , xlds . getLabelSymbols ( ) ) ; if ( ensureInitialBoundary && result . charAt ( _NUM ) != _STR ) { result = _STR + entrySeparator + result ; } return result ; } finally { lab . close ( ) ; } }
ConverterSet add ( Converter converter , Converter [ ] removed ) { Converter [ ] converters = iConverters ; int length = converters . length ; for ( int i = _NUM ; i < length ; i ++ ) { Converter existing = converters [ i ] ; if ( converter . equals ( existing ) ) { if ( removed != null ) { removed [ _NUM ] = null ; } return this ; } if ( converter . getSupportedType ( ) == existing . getSupportedType ( ) ) { Converter [ ] copy = new Converter [ length ] ; for ( int j = _NUM ; j < length ; j ++ ) { if ( j != i ) { copy [ j ] = converters [ j ] ; } else { copy [ j ] = converter ; } } if ( removed != null ) { removed [ _NUM ] = existing ; } return new ConverterSet ( copy ) ; } } Converter [ ] copy = new Converter [ length + _NUM ] ; System . arraycopy ( converters , _NUM , copy , _NUM , length ) ; copy [ length ] = converter ; if ( removed != null ) { removed [ _NUM ] = null ; } return new ConverterSet ( copy ) ; }
private void parse ( ) throws SAXException { XStream xstream = ( XStream ) properties . get ( CONFIGURED_XSTREAM_PROPERTY ) ; if ( xstream == null ) { xstream = new XStream ( ) ; } final List < ? > source = ( List < ? > ) properties . get ( SOURCE_OBJECT_LIST_PROPERTY ) ; if ( source == null || source . isEmpty ( ) ) { throw new SAXException ( _STR + SOURCE_OBJECT_LIST_PROPERTY + _STR ) ; } try { startDocument ( _BOOL ) ; for ( final Object name : source ) { xstream . marshal ( name , this ) ; } endDocument ( _BOOL ) ; } catch ( final StreamException e ) { if ( e . getCause ( ) instanceof SAXException ) { throw ( SAXException ) e . getCause ( ) ; } else { throw new SAXException ( e ) ; } } }
private SortedMap < MessageUid , MaildirMessageName > truncateMap ( Map < MessageUid , MaildirMessageName > map , MessageUid from , MessageUid to ) { TreeMap < MessageUid , MaildirMessageName > sortedMap ; if ( map instanceof TreeMap < ? , ? > ) sortedMap = ( TreeMap < MessageUid , MaildirMessageName > ) map ; else sortedMap = new TreeMap < MessageUid , MaildirMessageName > ( map ) ; if ( to != null ) return sortedMap . subMap ( from , to . next ( ) ) ; return sortedMap . tailMap ( from ) ; }
public void dumpIndex ( boolean showBounds ) throws IOException { byte ixRecord [ ] = new byte [ SPATIAL_INDEX_RECORD_LENGTH ] ; int recNum = _NUM ; if ( shpFileName == null ) { return ; } BinaryBufferedFile ssx = new BinaryBufferedFile ( ssx ( shpFileName ) ) ; ssx . seek ( _NUM ) ; while ( _BOOL ) { int result = ssx . read ( ixRecord , _NUM , SPATIAL_INDEX_RECORD_LENGTH ) ; if ( result <= _NUM ) { logger . info ( _STR + recNum + _STR ) ; break ; } else { recNum ++ ; int offset = readBEInt ( ixRecord , _NUM ) ; int length = readBEInt ( ixRecord , _NUM ) ; logger . info ( _STR + recNum + _STR + offset + _STR + length + ( showBounds ? ( _STR + readLEDouble ( ixRecord , _NUM ) + _STR + readLEDouble ( ixRecord , _NUM ) + _STR + readLEDouble ( ixRecord , _NUM ) + _STR + readLEDouble ( ixRecord , _NUM ) ) : _STR ) ) ; } } ssx . close ( ) ; }
private static boolean compareParam ( String jdiffParam , Type reflectionParamType ) { if ( jdiffParam == null ) { return _BOOL ; } String reflectionParam = typeToString ( reflectionParamType ) ; if ( jdiffParam . equals ( reflectionParam ) ) { return _BOOL ; } int jdiffParamEndOffset = jdiffParam . indexOf ( _STR ) ; int reflectionParamEndOffset = reflectionParam . indexOf ( _STR ) ; if ( jdiffParamEndOffset != - _NUM && reflectionParamEndOffset != - _NUM ) { jdiffParam = jdiffParam . substring ( _NUM , jdiffParamEndOffset ) ; reflectionParam = reflectionParam . substring ( _NUM , reflectionParamEndOffset ) ; return jdiffParam . equals ( reflectionParam ) ; } return _BOOL ; }
public static void randomNumber ( int [ ] num , int n ) { for ( int j = _NUM ; j < n ; j ++ ) { num [ j ] = ( int ) ( Math . random ( ) * _NUM ) ; } }
private static String escapeJSON ( String text ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( _STR ) ; for ( int index = _NUM ; index < text . length ( ) ; index ++ ) { char chr = text . charAt ( index ) ; switch ( chr ) { case _STR : case _STR : builder . append ( _STR ) ; builder . append ( chr ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; default : if ( chr < _STR ) { String t = _STR + Integer . toHexString ( chr ) ; builder . append ( _STR + t . substring ( t . length ( ) - _NUM ) ) ; } else { builder . append ( chr ) ; } break ; } } builder . append ( _STR ) ; return builder . toString ( ) ; }
public void writeTo ( OutputStream out ) throws IOException { ByteString [ ] cachedFlushBuffers ; byte [ ] cachedBuffer ; int cachedBufferPos ; synchronized ( this ) { cachedFlushBuffers = flushedBuffers . toArray ( new ByteString [ flushedBuffers . size ( ) ] ) ; cachedBuffer = buffer ; cachedBufferPos = bufferPos ; } for ( ByteString byteString : cachedFlushBuffers ) { byteString . writeTo ( out ) ; } out . write ( copyArray ( cachedBuffer , cachedBufferPos ) ) ; }
private void checkHeadingsHierarchy ( Elements elements , TestSolutionHandler testSolutionHandler ) { if ( elements . isEmpty ( ) ) { testSolutionHandler . addTestSolution ( TestSolution . NOT_APPLICABLE ) ; return ; } TestSolution checkResult = TestSolution . PASSED ; Iterator < Element > iter = elements . iterator ( ) ; Element element = iter . next ( ) ; int indexOfReference = getHeaderIndex ( element ) ; int currentIndex ; int previousIndex = indexOfReference ; Element elementOfReference = element ; Element previousElement = element ; while ( iter . hasNext ( ) ) { element = iter . next ( ) ; currentIndex = getHeaderIndex ( element ) ; if ( currentIndex != - _NUM ) { if ( currentIndex - previousIndex >= _NUM ) { checkResult = TestSolution . FAILED ; addSourceCodeRemark ( TestSolution . FAILED , element , HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG , getEvidenceElement ( PREVIOUS_H_TAG_INDEX_EE , getEvidenceElementMsg ( previousIndex , previousElement ) ) ) ; } else if ( currentIndex < indexOfReference ) { checkResult = TestSolution . FAILED ; addSourceCodeRemark ( TestSolution . FAILED , element , HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG , getEvidenceElement ( FIRST_H_TAG_INDEX_EE , getEvidenceElementMsg ( indexOfReference , elementOfReference ) ) ) ; } previousIndex = currentIndex ; previousElement = element ; } } testSolutionHandler . addTestSolution ( checkResult ) ; }
public Iterator < JsonElement > iterator ( ) { return elements . iterator ( ) ; }
public void mouseWheelMoved ( MouseWheelEvent e ) { boolean accepted = checkModifiers ( e ) ; if ( accepted == _BOOL ) { VisualizationViewer < ? , ? > vv = ( VisualizationViewer < ? , ? > ) e . getSource ( ) ; Point2D mouse = e . getPoint ( ) ; Point2D center = vv . getCenter ( ) ; int amount = e . getWheelRotation ( ) ; if ( zoomAtMouse ) { if ( amount > _NUM ) { scaler . scale ( vv , in , mouse ) ; } else if ( amount < _NUM ) { scaler . scale ( vv , out , mouse ) ; } } else { if ( amount > _NUM ) { scaler . scale ( vv , in , center ) ; } else if ( amount < _NUM ) { scaler . scale ( vv , out , center ) ; } } e . consume ( ) ; vv . repaint ( ) ; } }
public File createNewFolder ( File containingDir ) throws IOException { if ( containingDir == null ) { throw new IOException ( _STR ) ; } File newFolder = createFileObject ( containingDir , newFolderString ) ; int i = _NUM ; while ( newFolder . exists ( ) && i < _NUM ) { newFolder = createFileObject ( containingDir , MessageFormat . format ( newFolderNextString , new Integer ( i ) ) ) ; i ++ ; } if ( newFolder . exists ( ) ) { throw new IOException ( _STR + newFolder . getAbsolutePath ( ) ) ; } else { newFolder . mkdirs ( ) ; } return newFolder ; }
protected void assertFuncEquals ( final String ... inputs ) throws Exception { SolrQueryRequest req = req ( ) ; try { assertFuncEquals ( req , inputs ) ; } finally { req . close ( ) ; } }
private void handleStartElement ( XMLStreamReader parser , Set < Node > childrenFound , Handler handler , Map < String , Object > values , Stack < Set < String > > stack , boolean recordStarted ) throws IOException , XMLStreamException { Node n = getMatchingNode ( parser , childNodes ) ; Map < String , Object > decends = new HashMap < > ( ) ; if ( n != null ) { childrenFound . add ( n ) ; n . parse ( parser , handler , values , stack , recordStarted ) ; return ; } Node dn = this ; do { if ( dn . wildCardNodes != null ) { n = getMatchingNode ( parser , dn . wildCardNodes ) ; if ( n != null ) { childrenFound . add ( n ) ; n . parse ( parser , handler , values , stack , recordStarted ) ; break ; } for ( Node nn : dn . wildCardNodes ) decends . put ( nn . name , nn ) ; } dn = dn . wildAncestor ; } while ( dn != null ) ; if ( n == null ) { int count = _NUM ; while ( count != _NUM ) { int token = parser . next ( ) ; if ( token == START_ELEMENT ) { Node nn = ( Node ) decends . get ( parser . getLocalName ( ) ) ; if ( nn != null ) { childrenFound . add ( nn ) ; nn . parse ( parser , handler , values , stack , recordStarted ) ; } else count ++ ; } else if ( token == END_ELEMENT ) count -- ; } } }
public boolean equivalent ( IMFMarkerType other ) { if ( other == null ) { return _BOOL ; } boolean result = _BOOL ; result &= offset . equals ( other . getOffset ( ) ) ; result &= label . equivalent ( other . getLabel ( ) ) ; return result ; }
public static Discretization discretize ( double [ ] _data , double [ ] cutoffs , String variableName , List < String > categories ) { if ( cutoffs == null ) { throw new NullPointerException ( ) ; } for ( int i = _NUM ; i < cutoffs . length - _NUM ; i ++ ) { if ( ! ( cutoffs [ i ] <= cutoffs [ i + _NUM ] ) ) { throw new NullPointerException ( _STR ) ; } } if ( variableName == null ) { throw new NullPointerException ( ) ; } int numCategories = cutoffs . length + _NUM ; if ( categories != null && categories . size ( ) != numCategories ) { throw new IllegalArgumentException ( _STR + _STR + _STR ) ; } DiscreteVariable variable ; if ( categories == null ) { variable = new DiscreteVariable ( variableName , numCategories ) ; } else { variable = new DiscreteVariable ( variableName , categories ) ; } int [ ] discreteData = new int [ _data . length ] ; loop : for ( int i = _NUM ; i < _data . length ; i ++ ) { if ( Double . isNaN ( _data [ i ] ) ) { discreteData [ i ] = DiscreteVariable . MISSING_VALUE ; continue ; } for ( int j = _NUM ; j < cutoffs . length ; j ++ ) { if ( _data [ i ] > Double . NEGATIVE_INFINITY && _data [ i ] < Double . POSITIVE_INFINITY && _data [ i ] < cutoffs [ j ] ) { discreteData [ i ] = j ; continue loop ; } } discreteData [ i ] = cutoffs . length ; } return new Discretization ( variable , discreteData ) ; }
public static ArrayList < Long > loadWorkspaceScreensDb ( Context context ) { final ContentResolver contentResolver = context . getContentResolver ( ) ; final Uri screensUri = LauncherSettings . WorkspaceScreens . CONTENT_URI ; final Cursor sc = contentResolver . query ( screensUri , null , null , null , LauncherSettings . WorkspaceScreens . SCREEN_RANK ) ; ArrayList < Long > screenIds = new ArrayList < Long > ( ) ; try { final int idIndex = sc . getColumnIndexOrThrow ( LauncherSettings . WorkspaceScreens . _ID ) ; while ( sc . moveToNext ( ) ) { try { screenIds . add ( sc . getLong ( idIndex ) ) ; } catch ( Exception e ) { Launcher . addDumpLog ( TAG , _STR + _STR + e , _BOOL ) ; } } } finally { if ( sc != null ) { sc . close ( ) ; } } return screenIds ; }
private boolean renderOutput ( Node node , InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException { String arg = _STR ; if ( node == null ) { rsvc . error ( _STR ) ; return _BOOL ; } Object value = node . value ( context ) ; if ( value == null ) { rsvc . error ( _STR ) ; return _BOOL ; } arg = value . toString ( ) ; Resource resource = null ; try { resource = rsvc . getContent ( arg , getInputEncoding ( context ) ) ; } catch ( ResourceNotFoundException rnfe ) { rsvc . error ( _STR + arg + _STR + context . getCurrentTemplateName ( ) + _STR + getLine ( ) + _STR + getColumn ( ) + _STR ) ; throw rnfe ; } catch ( Exception e ) { rsvc . error ( _STR + arg + _STR + context . getCurrentTemplateName ( ) + _STR + getLine ( ) + _STR + getColumn ( ) + _STR + e ) ; } if ( resource == null ) return _BOOL ; writer . write ( ( String ) resource . getData ( ) ) ; return _BOOL ; }
protected String e ( String s ) throws Exception { return fmt . format ( parser . parse ( s , null ) ) ; }
public static boolean equals ( boolean [ ] field1 , boolean [ ] field2 ) { if ( field1 == null || field1 . length == _NUM ) { return field2 == null || field2 . length == _NUM ; } else { return Arrays . equals ( field1 , field2 ) ; } }
public Matrix4 multiplyByScale ( double xScale , double yScale , double zScale ) { double [ ] m = this . m ; m [ _NUM ] *= xScale ; m [ _NUM ] *= xScale ; m [ _NUM ] *= xScale ; m [ _NUM ] *= xScale ; m [ _NUM ] *= yScale ; m [ _NUM ] *= yScale ; m [ _NUM ] *= yScale ; m [ _NUM ] *= yScale ; m [ _NUM ] *= zScale ; m [ _NUM ] *= zScale ; m [ _NUM ] *= zScale ; m [ _NUM ] *= zScale ; return this ; }
public void changeState ( ) { linked = ! linked ; link = linked ? linkedImIc . getImage ( ) : unlinkedImIc . getImage ( ) ; repaint ( ) ; }
public static Geometry bufferBySegments ( Geometry g , double distance ) { Geometry segs = LineHandlingFunctions . extractSegments ( g ) ; double posDist = Math . abs ( distance ) ; Geometry segBuf = bufferByComponents ( segs , posDist ) ; if ( distance < _NUM ) return g . difference ( segBuf ) ; return g . union ( segBuf ) ; }
public void recordEndTime ( ) { int msDiff = ( int ) ( System . currentTimeMillis ( ) - _currentRequestStartTime . get ( ) ) ; _log . info ( _STR , msDiff ) ; updateOrResetReqRspAvgLstHr ( updateOrResetReqRspAvgLstMin ( msDiff , _BOOL ) , _BOOL ) ; updateMinMaxReqRspMs ( msDiff ) ; if ( msDiff >= SUSPISCIOUS_RSP_TIME_MS ) { _alertLog . warn ( MessageFormat . format ( _STR , msDiff ) ) ; } _currentRequestStartTime . remove ( ) ; }
private boolean isAccessibleUserToKibana ( Set < String > filters ) { if ( filters . contains ( _STR ) ) { return _BOOL ; } return _BOOL ; }
public boolean clear ( ) { try { list . clear ( ) ; fireTableDataChanged ( ) ; } catch ( Exception e ) { return _BOOL ; } return _BOOL ; }
public static final int typeIndex ( Class type ) { Class [ ] list = primitiveTypes ; int n = list . length ; for ( int i = _NUM ; i < n ; i ++ ) if ( list [ i ] == type ) return i ; throw new RuntimeException ( _STR + type . getName ( ) ) ; }
public boolean load ( File fi ) throws JmriConfigureXmlException { return load ( fi , _BOOL ) ; }
public String parameterToString ( Object param ) { if ( param == null ) { return _STR ; } else if ( param instanceof Date ) { return formatDate ( ( Date ) param ) ; } else if ( param instanceof Collection ) { StringBuilder b = new StringBuilder ( ) ; for ( Object o : ( Collection ) param ) { if ( b . length ( ) > _NUM ) { b . append ( _STR ) ; } b . append ( String . valueOf ( o ) ) ; } return b . toString ( ) ; } else { return String . valueOf ( param ) ; } }
public void testBug66947 ( ) throws Exception { Connection con = null ; try { Properties props = new Properties ( ) ; props . setProperty ( _STR , _STR ) ; props . setProperty ( _STR , _STR ) ; props . setProperty ( _STR , _STR ) ; con = getConnectionWithProps ( props ) ; PreparedStatement ps1_1 ; PreparedStatement ps1_2 ; String query = _STR ; ps1_1 = con . prepareStatement ( query ) ; ps1_1 . execute ( ) ; ps1_1 . close ( ) ; ps1_2 = con . prepareStatement ( query ) ; assertSame ( _STR , ps1_1 , ps1_2 ) ; ps1_2 . execute ( ) ; ps1_2 . close ( ) ; ps1_2 . close ( ) ; ps1_1 = con . prepareStatement ( query ) ; assertNotSame ( _STR , ps1_2 , ps1_1 ) ; ps1_1 . execute ( ) ; ps1_1 . close ( ) ; ps1_1 . close ( ) ; PreparedStatement ps2_1 ; PreparedStatement ps2_2 ; PreparedStatement ps3_1 ; PreparedStatement ps3_2 ; ps1_1 = con . prepareStatement ( _STR ) ; ps1_1 . execute ( ) ; ps1_1 . close ( ) ; ps2_1 = con . prepareStatement ( _STR ) ; ps2_1 . execute ( ) ; ps2_1 . close ( ) ; ps3_1 = con . prepareStatement ( _STR ) ; ps3_1 . execute ( ) ; ps3_1 . close ( ) ; ps1_2 = con . prepareStatement ( _STR ) ; assertNotSame ( _STR , ps1_1 , ps1_2 ) ; ps2_2 = con . prepareStatement ( _STR ) ; assertSame ( _STR , ps2_1 , ps2_2 ) ; ps3_2 = con . prepareStatement ( _STR ) ; assertSame ( _STR , ps3_1 , ps3_2 ) ; } finally { if ( con != null ) { con . close ( ) ; } } }
private void calculateGridSizes ( float numbersRadius , float xCenter , float yCenter , float textSize , float [ ] textGridHeights , float [ ] textGridWidths ) { float offset1 = numbersRadius ; float offset2 = numbersRadius * ( ( float ) Math . sqrt ( _NUM ) ) / _NUM ; float offset3 = numbersRadius / _NUM ; mPaint . setTextSize ( textSize ) ; yCenter -= ( mPaint . descent ( ) + mPaint . ascent ( ) ) / _NUM ; textGridHeights [ _NUM ] = yCenter - offset1 ; textGridWidths [ _NUM ] = xCenter - offset1 ; textGridHeights [ _NUM ] = yCenter - offset2 ; textGridWidths [ _NUM ] = xCenter - offset2 ; textGridHeights [ _NUM ] = yCenter - offset3 ; textGridWidths [ _NUM ] = xCenter - offset3 ; textGridHeights [ _NUM ] = yCenter ; textGridWidths [ _NUM ] = xCenter ; textGridHeights [ _NUM ] = yCenter + offset3 ; textGridWidths [ _NUM ] = xCenter + offset3 ; textGridHeights [ _NUM ] = yCenter + offset2 ; textGridWidths [ _NUM ] = xCenter + offset2 ; textGridHeights [ _NUM ] = yCenter + offset1 ; textGridWidths [ _NUM ] = xCenter + offset1 ; }
public synchronized void flush ( ) throws IOException { checkNotClosed ( ) ; trimToSize ( ) ; trimToFileCount ( ) ; journalWriter . flush ( ) ; }
private final String [ ] _expandSeenNames ( String [ ] oldShared ) { int len = oldShared . length ; String [ ] newShared ; if ( len == _NUM ) { newShared = _smileBufferRecycler . allocSeenNamesBuffer ( ) ; if ( newShared == null ) { newShared = new String [ SmileBufferRecycler . DEFAULT_NAME_BUFFER_LENGTH ] ; } } else if ( len == SmileConstants . MAX_SHARED_NAMES ) { newShared = oldShared ; _seenNameCount = _NUM ; } else { int newSize = ( len == SmileBufferRecycler . DEFAULT_STRING_VALUE_BUFFER_LENGTH ) ? _NUM : SmileConstants . MAX_SHARED_NAMES ; newShared = new String [ newSize ] ; System . arraycopy ( oldShared , _NUM , newShared , _NUM , oldShared . length ) ; } return newShared ; }
public void addRequestProperty ( String key , String value ) { if ( connected ) throw new IllegalStateException ( _STR ) ; if ( key == null ) throw new NullPointerException ( _STR ) ; if ( requests == null ) requests = new MessageHeader ( ) ; requests . add ( key , value ) ; }
ServerMember update ( Address clientAddress , Instant time ) { if ( clientAddress != null ) { this . clientAddress = clientAddress ; if ( time . isAfter ( updated ) ) { this . updated = Assert . notNull ( time , _STR ) ; } } return this ; }
public static boolean isOrgLevelOnly ( int AD_Client_ID , int AD_Table_ID ) { Boolean share = isShared ( AD_Client_ID , AD_Table_ID ) ; if ( share != null ) return ! share . booleanValue ( ) ; return _BOOL ; }
public Runnable decrementAsRunnable ( ) { return mDecrementRunnable ; }
@ Override public void actionPerformed ( ActionEvent event ) { String command = event . getActionCommand ( ) ; if ( command . equals ( _STR ) ) { attemptModifyBackgroundPaint ( ) ; } }
public byte [ ] serializeToBuffer ( Object o ) throws IOException { ByteArrayOutputStream bufOut = new ByteArrayOutputStream ( ) ; try { serialize ( bufOut , o ) ; bufOut . flush ( ) ; return bufOut . toByteArray ( ) ; } finally { bufOut . close ( ) ; } }
ModulePointer resolve ( String modName ) { return ( ModulePointer ) context . get ( modName ) ; }
protected ConnectionStateTLS ( SSLSessionImpl session ) { try { CipherSuite cipherSuite = session . cipherSuite ; hash_size = cipherSuite . getMACLength ( ) ; boolean is_exportabe = cipherSuite . isExportable ( ) ; int key_size = ( is_exportabe ) ? cipherSuite . keyMaterial : cipherSuite . expandedKeyMaterial ; int iv_size = cipherSuite . ivSize ; block_size = cipherSuite . getBlockSize ( ) ; String algName = cipherSuite . getBulkEncryptionAlgorithm ( ) ; String macName = cipherSuite . getHmacName ( ) ; if ( logger != null ) { logger . println ( _STR ) ; logger . println ( _STR + cipherSuite . getName ( ) ) ; logger . println ( _STR + algName ) ; logger . println ( _STR + macName ) ; logger . println ( _STR + hash_size ) ; logger . println ( _STR + block_size ) ; logger . println ( _STR + iv_size ) ; logger . println ( _STR + key_size ) ; } byte [ ] clientRandom = session . clientRandom ; byte [ ] serverRandom = session . serverRandom ; byte [ ] key_block = new byte [ _NUM * hash_size + _NUM * key_size + _NUM * iv_size ] ; byte [ ] seed = new byte [ clientRandom . length + serverRandom . length ] ; System . arraycopy ( serverRandom , _NUM , seed , _NUM , serverRandom . length ) ; System . arraycopy ( clientRandom , _NUM , seed , serverRandom . length , clientRandom . length ) ; PRF . computePRF ( key_block , session . master_secret , KEY_EXPANSION_LABEL , seed ) ; byte [ ] client_mac_secret = new byte [ hash_size ] ; byte [ ] server_mac_secret = new byte [ hash_size ] ; byte [ ] client_key = new byte [ key_size ] ; byte [ ] server_key = new byte [ key_size ] ; boolean is_client = ! session . isServer ; System . arraycopy ( key_block , _NUM , client_mac_secret , _NUM , hash_size ) ; System . arraycopy ( key_block , hash_size , server_mac_secret , _NUM , hash_size ) ; System . arraycopy ( key_block , _NUM * hash_size , client_key , _NUM , key_size ) ; System . arraycopy ( key_block , _NUM * hash_size + key_size , server_key , _NUM , key_size ) ; IvParameterSpec clientIV = null ; IvParameterSpec serverIV = null ; if ( is_exportabe ) { System . arraycopy ( clientRandom , _NUM , seed , _NUM , clientRandom . length ) ; System . arraycopy ( serverRandom , _NUM , seed , clientRandom . length , serverRandom . length ) ; byte [ ] final_client_key = new byte [ cipherSuite . expandedKeyMaterial ] ; byte [ ] final_server_key = new byte [ cipherSuite . expandedKeyMaterial ] ; PRF . computePRF ( final_client_key , client_key , CLIENT_WRITE_KEY_LABEL , seed ) ; PRF . computePRF ( final_server_key , server_key , SERVER_WRITE_KEY_LABEL , seed ) ; client_key = final_client_key ; server_key = final_server_key ; if ( block_size != _NUM ) { byte [ ] iv_block = new byte [ _NUM * iv_size ] ; PRF . computePRF ( iv_block , null , IV_BLOCK_LABEL , seed ) ; clientIV = new IvParameterSpec ( iv_block , _NUM , iv_size ) ; serverIV = new IvParameterSpec ( iv_block , iv_size , iv_size ) ; } } else if ( block_size != _NUM ) { clientIV = new IvParameterSpec ( key_block , _NUM * ( hash_size + key_size ) , iv_size ) ; serverIV = new IvParameterSpec ( key_block , _NUM * ( hash_size + key_size ) + iv_size , iv_size ) ; } if ( logger != null ) { logger . println ( _STR + is_exportabe ) ; logger . println ( _STR ) ; logger . print ( session . master_secret ) ; logger . println ( _STR ) ; logger . print ( clientRandom ) ; logger . println ( _STR ) ; logger . print ( serverRandom ) ; logger . println ( _STR ) ; logger . print ( client_mac_secret ) ; logger . println ( _STR ) ; logger . print ( server_mac_secret ) ; logger . println ( _STR ) ; logger . print ( client_key ) ; logger . println ( _STR ) ; logger . print ( server_key ) ; if ( clientIV == null ) { logger . println ( _STR ) ; } else { logger . println ( _STR ) ; logger . print ( clientIV . getIV ( ) ) ; logger . println ( _STR ) ; logger . print ( serverIV . getIV ( ) ) ; } } if ( algName == null ) { encCipher = new NullCipher ( ) ; decCipher = new NullCipher ( ) ; } else { encCipher = Cipher . getInstance ( algName ) ; decCipher = Cipher . getInstance ( algName ) ; if ( is_client ) { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( client_key , algName ) , clientIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( server_key , algName ) , serverIV ) ; } else { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( server_key , algName ) , serverIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( client_key , algName ) , clientIV ) ; } } encMac = Mac . getInstance ( macName ) ; decMac = Mac . getInstance ( macName ) ; if ( is_client ) { encMac . init ( new SecretKeySpec ( client_mac_secret , macName ) ) ; decMac . init ( new SecretKeySpec ( server_mac_secret , macName ) ) ; } else { encMac . init ( new SecretKeySpec ( server_mac_secret , macName ) ) ; decMac . init ( new SecretKeySpec ( client_mac_secret , macName ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; throw new AlertException ( AlertProtocol . INTERNAL_ERROR , new SSLProtocolException ( _STR ) ) ; } }
public void startElement ( String namespaceURI , String localName , String name , Attributes atts ) throws org . xml . sax . SAXException { ElemContext elemContext = m_elemContext ; if ( elemContext . m_startTagOpen ) { closeStartTag ( ) ; elemContext . m_startTagOpen = _BOOL ; } else if ( m_cdataTagOpen ) { closeCDATA ( ) ; m_cdataTagOpen = _BOOL ; } else if ( m_needToCallStartDocument ) { startDocumentInternal ( ) ; m_needToCallStartDocument = _BOOL ; } if ( m_needToOutputDocTypeDecl ) { String n = name ; if ( n == null || n . length ( ) == _NUM ) { n = localName ; } outputDocTypeDecl ( n ) ; } if ( null != namespaceURI && namespaceURI . length ( ) > _NUM ) { super . startElement ( namespaceURI , localName , name , atts ) ; return ; } try { ElemDesc elemDesc = getElemDesc2 ( name ) ; int elemFlags = elemDesc . getFlags ( ) ; if ( m_doIndent ) { boolean isBlockElement = ( elemFlags & ElemDesc . BLOCK ) != _NUM ; if ( m_ispreserve ) m_ispreserve = _BOOL ; else if ( ( null != elemContext . m_elementName ) && ( ! m_inBlockElem || isBlockElement ) ) { m_startNewLine = _BOOL ; indent ( ) ; } m_inBlockElem = ! isBlockElement ; } if ( atts != null ) addAttributes ( atts ) ; m_isprevtext = _BOOL ; final java . io . Writer writer = m_writer ; writer . write ( _STR ) ; writer . write ( name ) ; if ( m_tracer != null ) firePseudoAttributes ( ) ; if ( ( elemFlags & ElemDesc . EMPTY ) != _NUM ) { m_elemContext = elemContext . push ( ) ; m_elemContext . m_elementName = name ; m_elemContext . m_elementDesc = elemDesc ; return ; } else { elemContext = elemContext . push ( namespaceURI , localName , name ) ; m_elemContext = elemContext ; elemContext . m_elementDesc = elemDesc ; elemContext . m_isRaw = ( elemFlags & ElemDesc . RAW ) != _NUM ; } if ( ( elemFlags & ElemDesc . HEADELEM ) != _NUM ) { closeStartTag ( ) ; elemContext . m_startTagOpen = _BOOL ; if ( ! m_omitMetaTag ) { if ( m_doIndent ) indent ( ) ; writer . write ( _STR ) ; String encoding = getEncoding ( ) ; String encode = Encodings . getMimeEncoding ( encoding ) ; writer . write ( encode ) ; writer . write ( _STR ) ; } } } catch ( IOException e ) { throw new SAXException ( e ) ; } }
public void addCertStore ( CertStore store ) { if ( store == null ) { return ; } if ( certStores == null ) { certStores = new ArrayList < CertStore > ( ) ; } certStores . add ( store ) ; }
public NarClassLoader ( final File narWorkingDirectory ) throws ClassNotFoundException , IOException { super ( new URL [ _NUM ] ) ; this . narWorkingDirectory = narWorkingDirectory ; updateClasspath ( narWorkingDirectory ) ; }
public Block block ( ) { return block ; }
public static TypeBinding [ ] substitute ( Substitution substitution , TypeBinding [ ] originalTypes ) { if ( originalTypes == null ) return null ; TypeBinding [ ] substitutedTypes = originalTypes ; for ( int i = _NUM , length = originalTypes . length ; i < length ; i ++ ) { TypeBinding originalType = originalTypes [ i ] ; TypeBinding substitutedParameter = substitute ( substitution , originalType ) ; if ( substitutedParameter != originalType ) { if ( substitutedTypes == originalTypes ) { System . arraycopy ( originalTypes , _NUM , substitutedTypes = new TypeBinding [ length ] , _NUM , i ) ; } substitutedTypes [ i ] = substitutedParameter ; } else if ( substitutedTypes != originalTypes ) { substitutedTypes [ i ] = originalType ; } } return substitutedTypes ; }
private boolean checkIfScrolling ( float [ ] lastPoints , MotionEvent ev ) { float [ ] point = new float [ _NUM ] ; point [ _NUM ] = ev . getRawX ( ) ; point [ _NUM ] = ev . getRawY ( ) ; float delta = getDistance ( lastPoints , point ) ; return Math . abs ( delta ) > mSlop ; }
public void testMergeOneFilterIntoDocumentWithSameFilter ( ) throws Exception { String srcXml = _STR + _STR + _STR + _STR + _STR + _STR ; WebXml srcWebXml = WebXmlIo . parseWebXml ( new ByteArrayInputStream ( srcXml . getBytes ( _STR ) ) , null ) ; WebXml mergeWebXml = WebXmlIo . parseWebXml ( new ByteArrayInputStream ( srcXml . getBytes ( _STR ) ) , null ) ; WebXmlMerger merger = new WebXmlMerger ( srcWebXml ) ; merger . mergeFilters ( mergeWebXml ) ; assertTrue ( WebXmlUtils . hasFilter ( srcWebXml , _STR ) ) ; }
public Edge ( S src , Symbol symbol , S dest ) { this . src = src ; this . symbol = symbol ; this . dest = dest ; this . srcItem = src . getFirstItem ( ) ; this . hashCache = calcHashCode ( ) ; }
public void push ( final Type value ) { if ( value == null ) { mv . visitInsn ( Opcodes . ACONST_NULL ) ; } else { switch ( value . getSort ( ) ) { case Type . BOOLEAN : mv . visitFieldInsn ( Opcodes . GETSTATIC , _STR , _STR , CLDESC ) ; break ; case Type . CHAR : mv . visitFieldInsn ( Opcodes . GETSTATIC , _STR , _STR , CLDESC ) ; break ; case Type . BYTE : mv . visitFieldInsn ( Opcodes . GETSTATIC , _STR , _STR , CLDESC ) ; break ; case Type . SHORT : mv . visitFieldInsn ( Opcodes . GETSTATIC , _STR , _STR , CLDESC ) ; break ; case Type . INT : mv . visitFieldInsn ( Opcodes . GETSTATIC , _STR , _STR , CLDESC ) ; break ; case Type . FLOAT : mv . visitFieldInsn ( Opcodes . GETSTATIC , _STR , _STR , CLDESC ) ; break ; case Type . LONG : mv . visitFieldInsn ( Opcodes . GETSTATIC , _STR , _STR , CLDESC ) ; break ; case Type . DOUBLE : mv . visitFieldInsn ( Opcodes . GETSTATIC , _STR , _STR , CLDESC ) ; break ; default : mv . visitLdcInsn ( value ) ; } } }
public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
public ExtendedTextLabel createExtended ( Font font , CoreMetrics lm , Decoration decorator , int start , int limit ) { if ( start >= limit || start < lineStart || limit > lineLimit ) { throw new IllegalArgumentException ( _STR + start + _STR + limit ) ; } int level = lineBidi == null ? _NUM : lineBidi . getLevelAt ( start - lineStart ) ; int linedir = ( lineBidi == null || lineBidi . baseIsLeftToRight ( ) ) ? _NUM : _NUM ; int layoutFlags = flags & ~ _NUM ; if ( ( level & _NUM ) != _NUM ) layoutFlags |= _NUM ; if ( ( linedir & _NUM ) != _NUM ) layoutFlags |= _NUM ; TextSource source = new StandardTextSource ( text , start , limit - start , lineStart , lineLimit - lineStart , level , layoutFlags , font , frc , lm ) ; return new ExtendedTextSourceLabel ( source , decorator ) ; }
public static String rightPad ( String s , int minLength , char filling ) { int ln = s . length ( ) ; if ( minLength <= ln ) { return s ; } StringBuilder res = new StringBuilder ( minLength ) ; res . append ( s ) ; int dif = minLength - ln ; for ( int i = _NUM ; i < dif ; i ++ ) { res . append ( filling ) ; } return res . toString ( ) ; }
public final boolean isSupported ( String feature , String version ) { return implementation . hasFeature ( feature , version ) ; }
public void clear ( ) { fullyLock ( ) ; try { for ( Node < E > p , h = head ; ( p = h . next ) != null ; h = p ) { h . next = h ; p . item = null ; } head = last ; if ( count . getAndSet ( _NUM ) == capacity ) notFull . signal ( ) ; } finally { fullyUnlock ( ) ; } }
private static String readQuotedDescriptor ( final SubstringReader reader , final boolean allowCompatChars ) throws DecodeException { int length = _NUM ; reader . skipWhitespaces ( ) ; try { char c = reader . read ( ) ; if ( c != _STR ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_EXPECTED_QUOTE_AT_POS1 . get ( reader . pos ( ) - _NUM , c ) ) ; } reader . mark ( ) ; while ( ( c = reader . read ( ) ) != _STR ) { if ( length == _NUM && ! isAlpha ( c ) ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1 . get ( c , reader . pos ( ) - _NUM ) ) ; } if ( ! isKeyChar ( c , allowCompatChars ) ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1 . get ( c , reader . pos ( ) - _NUM ) ) ; } length ++ ; } reader . reset ( ) ; final String descr = reader . read ( length ) ; reader . read ( ) ; return descr ; } catch ( final StringIndexOutOfBoundsException e ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_TRUNCATED_VALUE1 . get ( ) ) ; } }
public String toCSV ( ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( _STR ) ; builder . append ( _STR ) ; for ( T predicted : classes ) { builder . append ( String . format ( _STR , predicted ) ) ; } builder . append ( _STR ) ; String firstColumnLabel = _STR ; for ( T actual : classes ) { builder . append ( firstColumnLabel ) ; firstColumnLabel = _STR ; builder . append ( String . format ( _STR , actual ) ) ; for ( T predicted : classes ) { builder . append ( getCount ( actual , predicted ) ) ; builder . append ( _STR ) ; } builder . append ( getActualTotal ( actual ) ) ; builder . append ( _STR ) ; } builder . append ( _STR ) ; for ( T predicted : classes ) { builder . append ( getPredictedTotal ( predicted ) ) ; builder . append ( _STR ) ; } builder . append ( _STR ) ; return builder . toString ( ) ; }
public void testCase9 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . subtract ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _NUM , result . signum ( ) ) ; }
public Object assignIdValue ( Object data , Number val , ObjectCache objectCache ) throws SQLException { Object idVal = dataPersister . convertIdNumber ( val ) ; if ( idVal == null ) { throw new SQLException ( _STR + dataPersister + _STR + this ) ; } else { assignField ( data , idVal , _BOOL , objectCache ) ; return idVal ; } }
public static void writeSwappedInteger ( OutputStream output , int value ) throws IOException { output . write ( ( byte ) ( ( value > > _NUM ) & _NUM ) ) ; output . write ( ( byte ) ( ( value > > _NUM ) & _NUM ) ) ; output . write ( ( byte ) ( ( value > > _NUM ) & _NUM ) ) ; output . write ( ( byte ) ( ( value > > _NUM ) & _NUM ) ) ; }
public final boolean isOpen ( ) { return closed . get ( ) == _BOOL ; }
public static Map < String , Object > performFindList ( DispatchContext dctx , Map < String , Object > context ) { Integer viewSize = ( Integer ) context . get ( _STR ) ; if ( viewSize == null ) viewSize = Integer . valueOf ( _NUM ) ; context . put ( _STR , viewSize ) ; Integer viewIndex = ( Integer ) context . get ( _STR ) ; if ( viewIndex == null ) viewIndex = Integer . valueOf ( _NUM ) ; context . put ( _STR , viewIndex ) ; Map < String , Object > result = performFind ( dctx , context ) ; int start = viewIndex . intValue ( ) * viewSize . intValue ( ) ; List < GenericValue > list = null ; Integer listSize = _NUM ; try { EntityListIterator it = ( EntityListIterator ) result . get ( _STR ) ; list = it . getPartialList ( start + _NUM , viewSize ) ; listSize = it . getResultsSizeAfterPartialList ( ) ; it . close ( ) ; } catch ( Exception e ) { Debug . logInfo ( _STR + e , module ) ; } result . put ( _STR , listSize ) ; result . put ( _STR , list ) ; result . remove ( _STR ) ; return result ; }
public static String soapToString ( SOAPElement element ) { return domToString ( element . getOwnerDocument ( ) ) ; }
@ Override public void close ( ) throws IOException { try { out . close ( ) ; } finally { lockFile . delete ( ) ; } }
public static void init ( Context context ) { if ( cameraManager == null ) { cameraManager = new CameraManager ( context ) ; } }
@ Override public boolean equals ( Object x , Object y ) throws HibernateException { if ( x == null ) { return y == null ; } return x . equals ( y ) ; }
@ Override public final void writeBoolean ( boolean v ) throws IOException { dis . writeBoolean ( v ) ; }
public void train ( Set < String > sFileNames ) { Iterator < String > iFile = sFileNames . iterator ( ) ; while ( iFile . hasNext ( ) ) { String sText = utils . loadFileToString ( iFile . next ( ) ) ; train ( sText ) ; } }
public void testFindSpringOpenLdapWithLimit ( ) { LdapProxy proxy = getLdapOpenLdap ( ) ; List result = null ; int limit = _NUM ; try { result = proxy . find ( getLdapSearchVO ( _STR , limit , _STR , _STR , null , LdapScopeConstants . SCOPE_SUBTREE ) ) ; } catch ( Exception e ) { } assertNotNull ( result ) ; if ( result != null ) { assertEquals ( limit , result . size ( ) ) ; } }
public PrintfFormat ( String fmtArg ) throws IllegalArgumentException { this ( Locale . getDefault ( ) , fmtArg ) ; }
static double svd_pythag ( double a , double b ) { double p , r , s , t , u , temp ; p = svd_dmax ( Math . abs ( a ) , Math . abs ( b ) ) ; if ( p != _NUM ) { temp = svd_dmin ( Math . abs ( a ) , Math . abs ( b ) ) / p ; r = temp * temp ; t = _NUM + r ; while ( t != _NUM ) { s = r / t ; u = _NUM + _NUM * s ; p *= u ; temp = s / u ; r *= temp * temp ; t = _NUM + r ; } } return p ; }
public final void append ( FastStringBuffer value ) { if ( value == null ) return ; int strlen = value . length ( ) ; if ( _NUM == strlen ) return ; int copyfrom = _NUM ; char [ ] chunk = m_array [ m_lastChunk ] ; int available = m_chunkSize - m_firstFree ; while ( strlen > _NUM ) { if ( available > strlen ) available = strlen ; int sourcechunk = ( copyfrom + value . m_chunkSize - _NUM ) > > > value . m_chunkBits ; int sourcecolumn = copyfrom & value . m_chunkMask ; int runlength = value . m_chunkSize - sourcecolumn ; if ( runlength > available ) runlength = available ; System . arraycopy ( value . m_array [ sourcechunk ] , sourcecolumn , m_array [ m_lastChunk ] , m_firstFree , runlength ) ; if ( runlength != available ) System . arraycopy ( value . m_array [ sourcechunk + _NUM ] , _NUM , m_array [ m_lastChunk ] , m_firstFree + runlength , available - runlength ) ; strlen -= available ; copyfrom += available ; if ( strlen > _NUM ) { int i = m_array . length ; if ( m_lastChunk + _NUM == i ) { char [ ] [ ] newarray = new char [ i + _NUM ] [ ] ; System . arraycopy ( m_array , _NUM , newarray , _NUM , i ) ; m_array = newarray ; } chunk = m_array [ ++ m_lastChunk ] ; if ( chunk == null ) { if ( m_lastChunk == _NUM << m_rebundleBits && m_chunkBits < m_maxChunkBits ) { m_innerFSB = new FastStringBuffer ( this ) ; } chunk = m_array [ m_lastChunk ] = new char [ m_chunkSize ] ; } available = m_chunkSize ; m_firstFree = _NUM ; } } m_firstFree += available ; }
public static void writeFixInt32 ( final OutputStream output , final int val ) throws IOException { output . write ( ( val > > > _NUM ) & _NUM ) ; output . write ( ( val > > > _NUM ) & _NUM ) ; output . write ( ( val > > > _NUM ) & _NUM ) ; output . write ( val & _NUM ) ; }
public static void queueCubeLoad ( ICubicWorld world , CubeIO loader , CubeProviderServer cache , int x , int y , int z , Consumer < Cube > runnable ) { QueuedCube key = new QueuedCube ( x , y , z , world ) ; AsyncCubeIOProvider task = cubeTasks . get ( key ) ; if ( task == null ) { task = new AsyncCubeIOProvider ( key , loader ) ; task . addCallback ( runnable ) ; cubeTasks . put ( key , task ) ; pool . execute ( task ) ; } else { task . addCallback ( runnable ) ; } Column loadedColumn ; if ( ( loadedColumn = cache . getLoadedColumn ( x , z ) ) == null ) { cache . asyncGetColumn ( x , z , IProviderExtras . Requirement . LIGHT , null ) ; } else { task . setColumn ( loadedColumn ) ; } }
public static boolean isObjectAvailableNow ( final boolean enabled , final Date availableFrom , final Date availableTo , final Date now ) { if ( ! enabled ) { return _BOOL ; } if ( availableFrom != null && now . before ( availableFrom ) ) { return _BOOL ; } if ( availableTo != null && now . after ( availableTo ) ) { return _BOOL ; } return _BOOL ; }
public void buttonClicked ( ActionEvent e ) ;
private long loadLargestMessageId ( ) { ReleaseMessage releaseMessage = releaseMessageRepository . findTopByOrderByIdDesc ( ) ; return releaseMessage == null ? _NUM : releaseMessage . getId ( ) ; }
public void removeChangeListener ( ChangeListener l ) { if ( listeners == null ) return ; listeners . remove ( l ) ; }
public static RequestLog dump ( ) { RequestLog current = RLOG . get ( ) ; RequestLog copy = new RequestLog ( current ) ; current . clear ( ) ; RLOG . remove ( ) ; return copy ; }
public static String urlDecode ( String str ) { try { return ( URLDecoder . decode ( str , _STR ) ) ; } catch ( Exception e ) { return ( _STR ) ; } }
public void testThenAcceptBoth_exceptionalCompletion ( ) throws Throwable { for ( ExecutionMode m : ExecutionMode . values ( ) ) for ( boolean fFirst : new boolean [ ] { _BOOL , _BOOL } ) for ( boolean failFirst : new boolean [ ] { _BOOL , _BOOL } ) for ( Integer v1 : new Integer [ ] { _NUM , null } ) { final CompletableFuture < Integer > f = new CompletableFuture < > ( ) ; final CompletableFuture < Integer > g = new CompletableFuture < > ( ) ; final CFException ex = new CFException ( ) ; final SubtractAction r1 = new SubtractAction ( m ) ; final SubtractAction r2 = new SubtractAction ( m ) ; final SubtractAction r3 = new SubtractAction ( m ) ; final CompletableFuture < Integer > fst = fFirst ? f : g ; final CompletableFuture < Integer > snd = ! fFirst ? f : g ; final Callable < Boolean > complete1 = failFirst ? null : null ; final Callable < Boolean > complete2 = failFirst ? null : null ; final CompletableFuture < Void > h1 = m . thenAcceptBoth ( f , g , r1 ) ; assertTrue ( complete1 . call ( ) ) ; final CompletableFuture < Void > h2 = m . thenAcceptBoth ( f , g , r2 ) ; checkIncomplete ( h1 ) ; checkIncomplete ( h2 ) ; assertTrue ( complete2 . call ( ) ) ; final CompletableFuture < Void > h3 = m . thenAcceptBoth ( f , g , r3 ) ; checkCompletedWithWrappedException ( h1 , ex ) ; checkCompletedWithWrappedException ( h2 , ex ) ; checkCompletedWithWrappedException ( h3 , ex ) ; r1 . assertNotInvoked ( ) ; r2 . assertNotInvoked ( ) ; r3 . assertNotInvoked ( ) ; checkCompletedNormally ( failFirst ? snd : fst , v1 ) ; checkCompletedExceptionally ( failFirst ? fst : snd , ex ) ; } }
protected DefaultListModel stringToModel ( String s ) { DefaultListModel result ; String tmpStr ; int i ; boolean quote ; String [ ] find ; String [ ] replace ; int index ; result = new DefaultListModel ( ) ; find = new String [ ] { _STR , _STR , _STR , _STR } ; replace = new String [ ] { _STR , _STR , _STR , _STR } ; for ( i = _NUM ; i < find . length ; i ++ ) { tmpStr = _STR ; while ( s . length ( ) > _NUM ) { index = s . indexOf ( find [ i ] ) ; if ( index > - _NUM ) { tmpStr += s . substring ( _NUM , index ) + replace [ i ] ; s = s . substring ( index + _NUM ) ; } else { tmpStr += s ; s = _STR ; } } s = tmpStr ; } quote = _BOOL ; tmpStr = _STR ; for ( i = _NUM ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == _STR ) { quote = ! quote ; tmpStr += _STR + s . charAt ( i ) ; } else if ( s . charAt ( i ) == _STR ) { if ( quote ) { tmpStr += _STR + s . charAt ( i ) ; } else { if ( tmpStr . startsWith ( _STR ) ) { tmpStr = tmpStr . substring ( _NUM , tmpStr . length ( ) - _NUM ) ; } result . addElement ( tmpStr ) ; tmpStr = _STR ; } } else { tmpStr += _STR + s . charAt ( i ) ; } } if ( ! tmpStr . equals ( _STR ) ) { if ( tmpStr . startsWith ( _STR ) ) { tmpStr = tmpStr . substring ( _NUM , tmpStr . length ( ) - _NUM ) ; } result . addElement ( tmpStr ) ; } return result ; }
public void testGetTables ( ) throws Exception { DatabaseMetaData dmd = con . getMetaData ( ) ; ResultSet rs = dmd . getTables ( null , null , null , null ) ; assertNotNull ( rs ) ; rs . close ( ) ; }
public void addAll ( Collection < ? extends T > collection ) { if ( mEventDelegate != null ) mEventDelegate . addData ( collection == null ? _NUM : collection . size ( ) ) ; if ( collection != null && collection . size ( ) != _NUM ) { synchronized ( mLock ) { mObjects . addAll ( collection ) ; } } if ( mNotifyOnChange ) notifyDataSetChanged ( ) ; }
public static void resetCurrentFileList ( String logName ) { currentFileList . remove ( PREFIX + logName ) ; }
void initComposeState ( ) { m_composeState = new ComposeState ( ) ; }
@ Override public abstract List < JToolBar > createToolBars ( Application a , @ Nullable View p ) ;
public static Date parseDate ( String dateValue ) throws DateParseException { return parseDate ( dateValue , null , null ) ; }
public RegexFileFilter ( String pattern , IOCase caseSensitivity ) { if ( pattern == null ) { throw new IllegalArgumentException ( _STR ) ; } int flags = _NUM ; if ( caseSensitivity != null && ! caseSensitivity . isCaseSensitive ( ) ) { flags = Pattern . CASE_INSENSITIVE ; } this . pattern = Pattern . compile ( pattern , flags ) ; }
public static synchronized ResultSet executeQuery ( String sqlStatement ) { logger . trace ( String . format ( _STR , sqlStatement ) ) ; ResultSet R = null ; final Statement S = getStatement ( ) ; if ( S == null ) { logger . error ( _STR ) ; return null ; } try { R = S . executeQuery ( sqlStatement ) ; logger . trace ( _STR + ( null == R ) ) ; return R ; } catch ( Throwable t ) { surfaceThrowable ( String . format ( _STR , sqlStatement ) , t ) ; cleanup ( S , R ) ; } return null ; }
public void write ( byte [ ] buf ) throws IOException { output . write ( buf ) ; bytesWritten += buf . length ; }
public static String urlEncode ( @ Nullable String s ) { if ( s == null ) { return _STR ; } try { return URLEncoder . encode ( s , _STR ) ; } catch ( UnsupportedEncodingException e ) { throw new AssertionError ( _STR ) ; } }
protected static boolean checkRawModulesTables ( final CConnection connection , final String databaseName , final int rawModuleId ) { Preconditions . checkNotNull ( connection , _STR ) ; Preconditions . checkNotNull ( databaseName , _STR ) ; Preconditions . checkArgument ( rawModuleId > _NUM , _STR , rawModuleId ) ; final ImmutableSet < String > rawTableNames = ImmutableSet . of ( String . format ( CTableNames . RAW_ADDRESS_COMMENTS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_ADDRESS_REFERENCES_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_BASE_TYPES , rawModuleId ) , String . format ( CTableNames . RAW_BASIC_BLOCK_INSTRUCTIONS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_BASIC_BLOCKS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_CALLGRAPH_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_CONTROL_FLOW_GRAPHS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_NODES_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_SUBSTITUTIONS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_TREE_NODES_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_TREES_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_TYPES_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_FUNCTIONS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_INSTRUCTIONS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_OPERANDS_TABLE , rawModuleId ) , String . format ( CTableNames . RAW_SECTIONS , rawModuleId ) , String . format ( CTableNames . RAW_EXPRESSION_TYPE_INSTANCES , rawModuleId ) , String . format ( CTableNames . RAW_TYPE_INSTACES , rawModuleId ) , String . format ( CTableNames . RAW_TYPES , rawModuleId ) ) ; final Pair < CConnection , String > cacheKey = new Pair < > ( connection , databaseName ) ; if ( PostgreSQLDatabaseFunctions . queryCache ( cacheKey , rawTableNames ) ) { return _BOOL ; } else { if ( ! PostgreSQLDatabaseFunctions . fillCache ( cacheKey ) ) { return _BOOL ; } return PostgreSQLDatabaseFunctions . queryCache ( cacheKey , rawTableNames ) ; } }
public Currency read ( String symbol ) { return Currency . getInstance ( symbol ) ; }
public static float parseFloat ( String s ) { if ( POSITIVE_INFINITY . equals ( s ) ) { return Float . POSITIVE_INFINITY ; } else if ( NEGATIVE_INFINITY . equals ( s ) ) { return Float . NEGATIVE_INFINITY ; } else if ( NaN . equals ( s ) ) { return Float . NaN ; } else { s = trimPlusSign ( s ) ; return Float . parseFloat ( s ) ; } }
public Object newInstance ( Class javaContentInterface ) throws JAXBException { if ( javaContentInterface == null ) { throw new JAXBException ( Messages . format ( Messages . CI_NOT_NULL ) ) ; } try { Class c = gi . getDefaultImplementation ( javaContentInterface ) ; if ( c == null ) throw new JAXBException ( Messages . format ( Messages . MISSING_INTERFACE , javaContentInterface ) ) ; return c . newInstance ( ) ; } catch ( Exception e ) { throw new JAXBException ( e ) ; } }
public void requestPasswordForShareViaLink ( boolean createShare ) { SharePasswordDialogFragment dialog = SharePasswordDialogFragment . newInstance ( mFile , createShare ) ; dialog . show ( getFragmentManager ( ) , SharePasswordDialogFragment . PASSWORD_FRAGMENT ) ; }
private void forceOutOfMemory ( ) { ArrayList junk = new ArrayList ( ) ; for ( ; ; ) { junk . add ( new long [ _NUM ] ) ; } }
@ Override public synchronized void put ( String key , Entry entry ) { pruneIfNeeded ( entry . data . length ) ; File file = getFileForKey ( key ) ; try { BufferedOutputStream fos = new BufferedOutputStream ( new FileOutputStream ( file ) ) ; CacheHeader e = new CacheHeader ( key , entry ) ; boolean success = e . writeHeader ( fos ) ; if ( ! success ) { fos . close ( ) ; VolleyLog . d ( _STR , file . getAbsolutePath ( ) ) ; throw new IOException ( ) ; } fos . write ( entry . data ) ; fos . close ( ) ; putEntry ( key , e ) ; return ; } catch ( IOException e ) { } boolean deleted = file . delete ( ) ; if ( ! deleted ) { VolleyLog . d ( _STR , file . getAbsolutePath ( ) ) ; } }
public static double enlargementScaled ( SpatialComparable exist , SpatialComparable addit , double scale ) { final int dim = assertSameDimensionality ( exist , addit ) ; double v1 = _NUM ; double v2 = _NUM ; for ( int i = _NUM ; i < dim ; i ++ ) { final double emin = exist . getMin ( i ) ; final double emax = exist . getMax ( i ) ; final double amin = addit . getMin ( i ) ; final double amax = addit . getMax ( i ) ; final double min = Math . min ( emin , amin ) ; final double max = Math . max ( emax , amax ) ; v1 *= ( max - min ) * scale ; v2 *= ( emax - emin ) * scale ; } return v2 - v1 ; }
public void intersection ( Rectangle2D r ) { if ( status == INVALID ) return ; if ( status == EMPTY ) { setClip ( r ) ; status = INUSE ; return ; } clip [ _NUM ] = Math . max ( clip [ _NUM ] , r . getMinX ( ) ) ; clip [ _NUM ] = Math . max ( clip [ _NUM ] , r . getMinY ( ) ) ; clip [ _NUM ] = Math . min ( clip [ _NUM ] , r . getMaxX ( ) ) ; clip [ _NUM ] = Math . min ( clip [ _NUM ] , r . getMaxY ( ) ) ; }
public boolean canGetInt ( ) { return canGet ( int . class ) ; }
private Node addConditionWaiter ( ) { Node t = lastWaiter ; if ( t != null && t . waitStatus != Node . CONDITION ) { unlinkCancelledWaiters ( ) ; t = lastWaiter ; } Node node = new Node ( Thread . currentThread ( ) , Node . CONDITION ) ; if ( t == null ) firstWaiter = node ; else t . nextWaiter = node ; lastWaiter = node ; return node ; }
void clear ( ) ;
@ TCB static String stripBannedCodeunits ( String s ) { int safeLimit = longestPrefixOfGoodCodeunits ( s ) ; if ( safeLimit < _NUM ) { return s ; } StringBuilder sb = new StringBuilder ( s ) ; stripBannedCodeunits ( sb , safeLimit ) ; return sb . toString ( ) ; }
public static void assertLinewiseEquals ( String message , String expected , String actual ) { try ( Scanner expectedScanner = new Scanner ( expected ) ; Scanner actualScanner = new Scanner ( actual ) ) { String expectedLine = null ; String actualLine = null ; int lineCounter = _NUM ; while ( expectedScanner . hasNextLine ( ) ) { expectedLine = expectedScanner . nextLine ( ) ; if ( actualScanner . hasNextLine ( ) ) { actualLine = actualScanner . nextLine ( ) ; } else { fail ( _STR + lineCounter + _STR + expectedLine ) ; } assertEquals ( _STR + lineCounter + _STR + message + _STR + expected + _STR + actual , expectedLine , actualLine ) ; ++ lineCounter ; } } }
private void warning ( String msg , Throwable th ) { warning ( msg ) ; th . printStackTrace ( ) ; }
void addFillComponents ( Container panel , int [ ] cols , int [ ] rows ) { Dimension filler = new Dimension ( _NUM , _NUM ) ; boolean filled_cell_11 = _BOOL ; CellConstraints cc = new CellConstraints ( ) ; if ( cols . length > _NUM && rows . length > _NUM ) { if ( cols [ _NUM ] == _NUM && rows [ _NUM ] == _NUM ) { panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , _NUM ) ) ; filled_cell_11 = _BOOL ; } } for ( int index = _NUM ; index < cols . length ; index ++ ) { if ( cols [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( cols [ index ] , _NUM ) ) ; } for ( int index = _NUM ; index < rows . length ; index ++ ) { if ( rows [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , rows [ index ] ) ) ; } }
public String fullForm ( final String str , final String lowString ) { String ret = lowString ; PrefixEntry found = prefixMap . get ( str ) ; if ( found != null ) { ret = found . prefixSingular + ret ; } else { for ( PrefixEntry entry : prefixEndList ) { if ( str . endsWith ( entry . keyword ) ) { ret = Grammar . addPrefixIfNotAlreadyThere ( ret , entry . prefixSingular , entry . prefixPlural ) ; break ; } } } return ret ; }
public void clearPasswordExpirationWarnedTime ( ) { operations . add ( PasswordPolicyStateOperationType . CLEAR_PASSWORD_EXPIRATION_WARNED_TIME ) ; }
private static Locale strip ( Locale locale ) { String language = locale . getLanguage ( ) ; String country = locale . getCountry ( ) ; String variant = locale . getVariant ( ) ; if ( ! variant . isEmpty ( ) ) { variant = _STR ; } else if ( ! country . isEmpty ( ) ) { country = _STR ; } else if ( ! language . isEmpty ( ) ) { language = _STR ; } else { return null ; } return new Locale ( language , country , variant ) ; }
private void appendTimeZone ( StringBuffer buffer , int count , boolean generalTimeZone ) { if ( generalTimeZone ) { TimeZone tz = calendar . getTimeZone ( ) ; boolean daylight = ( calendar . get ( Calendar . DST_OFFSET ) != _NUM ) ; int style = count < _NUM ? TimeZone . SHORT : TimeZone . LONG ; if ( ! formatData . customZoneStrings ) { buffer . append ( tz . getDisplayName ( daylight , style , formatData . locale ) ) ; return ; } String custom = TimeZoneNames . getDisplayName ( formatData . zoneStrings , tz . getID ( ) , daylight , style ) ; if ( custom != null ) { buffer . append ( custom ) ; return ; } } appendNumericTimeZone ( buffer , count , generalTimeZone ) ; }
public void removeListeners ( ) { if ( globalListener != null ) { try { InvokerHelper . invokeMethod ( currentObject , _STR , globalListener ) ; } catch ( Exception e ) { } globalListener = null ; } if ( localListener != null ) { try { InvokerHelper . invokeMethod ( currentObject , _STR , new Object [ ] { propertyName , localListener } ) ; } catch ( Exception e ) { } localListener = null ; } if ( syntheticFullBinding != null ) { syntheticFullBinding . unbind ( ) ; } }
public static String padLeft ( String str , int totalChars ) { if ( str == null ) str = _STR ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = _NUM ; i < totalChars - str . length ( ) ; i ++ ) { sb . append ( _STR ) ; } sb . append ( str ) ; return sb . toString ( ) ; }
public void showScores ( boolean flag ) { mShowScores = flag ; SwingUtilities . invokeLater ( null ) ; }
public static void write ( File file , CharSequence data , boolean append ) throws IOException { write ( file , data , Charset . defaultCharset ( ) , append ) ; }
protected double kernelHelper ( int n , char [ ] s , int endIndexS , char [ ] t , int endIndexT ) { if ( n <= _NUM ) { return getReturnValue ( n ) ; } if ( Math . min ( endIndexS + _NUM , endIndexT + _NUM ) < n ) { return getReturnValue ( n ) ; } int adr = _NUM ; if ( m_useRecursionCache ) { adr = m_multX * n + m_multY * endIndexS + m_multZ * endIndexT ; if ( cachekhK [ adr % maxCache ] == adr + _NUM ) { return cachekh [ adr % maxCache ] ; } } double result = _NUM ; result = m_lambda * kernelHelper ( n , s , endIndexS - _NUM , t , endIndexT ) + kernelHelper2 ( n , s , endIndexS , t , endIndexT ) ; if ( m_useRecursionCache ) { cachekhK [ adr % maxCache ] = adr + _NUM ; cachekh [ adr % maxCache ] = result ; } return result ; }
protected Connection openH2Connection ( boolean autocommit ) throws SQLException { System . setProperty ( _STR , _STR ) ; String dbName = _STR ; Connection conn = DriverManager . getConnection ( _STR + dbName + _STR ) ; conn . setAutoCommit ( autocommit ) ; return conn ; }
private void emitClear ( String fieldName , StringBuilder builder ) { builder . append ( _STR ) ; builder . append ( getClearName ( fieldName ) ) ; builder . append ( _STR ) ; builder . append ( getEnsureName ( fieldName ) ) ; builder . append ( _STR ) ; builder . append ( fieldName ) ; builder . append ( _STR ) ; builder . append ( _STR ) ; }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
protected void startRecoarding ( ) { coordinates . clear ( ) ; enabled = _BOOL ; }
public void addInputMethodListener ( InputMethodListener l ) { m_textPane . addInputMethodListener ( l ) ; }
public void addFooterView ( View v , Object data , boolean isSelectable ) { FixedViewInfo info = new FixedViewInfo ( ) ; info . view = v ; info . data = data ; info . isSelectable = isSelectable ; mFooterViewInfos . add ( info ) ; if ( mAdapter != null && mObserver != null ) { mObserver . onChanged ( ) ; } }
public static void load ( String url ) { String driver = getDriver ( url ) ; if ( driver != null ) { loadUserClass ( driver ) ; } }
public void addDocument ( Document d ) { if ( ! m_readMode ) { try { writer . addDocument ( d ) ; m_hitCountCache . clear ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } else { throw new IllegalStateException ( _STR + _STR ) ; } }
protected void putCommand ( final Class commandClass , final String [ ] names ) { Check . isTrue ( names . length > _NUM , _STR ) ; _commandsToCanonicalNames . put ( commandClass , names [ _NUM ] ) ; for ( int i = _NUM ; i < names . length ; i ++ ) { _aliasesToCommands . put ( names [ i ] , commandClass ) ; } }
protected void writeColumnAutoIncrementStmt ( Table table , Column column , StringBuilder ddl ) { ddl . append ( _STR ) ; }
private void SaveGCMData ( ) { try { SharedPreferences preferences = getSharedPreferences ( ) ; SharedPreferences . Editor editor = preferences . edit ( ) ; editor . putString ( PREFS_PUSHER_APP_ID_KEY , mPusherAppId ) ; editor . putString ( PREFS_PUSHER_URL_KEY , mPusherUrl ) ; editor . putString ( PREFS_PUSHER_FILE_TAG_KEY , mPusherBaseFileTag ) ; editor . commit ( ) ; } catch ( Exception e ) { Log . e ( LOG_TAG , _STR + e . getLocalizedMessage ( ) ) ; } }
final void runWorker ( Worker w ) { Thread wt = Thread . currentThread ( ) ; Runnable task = w . firstTask ; w . firstTask = null ; w . unlock ( ) ; boolean completedAbruptly = _BOOL ; try { while ( task != null || ( task = getTask ( ) ) != null ) { w . lock ( ) ; if ( ( runStateAtLeast ( ctl . get ( ) , STOP ) || ( Thread . interrupted ( ) && runStateAtLeast ( ctl . get ( ) , STOP ) ) ) && ! wt . isInterrupted ( ) ) wt . interrupt ( ) ; try { beforeExecute ( wt , task ) ; Throwable thrown = null ; try { task . run ( ) ; } catch ( RuntimeException x ) { thrown = x ; throw x ; } catch ( Error x ) { thrown = x ; throw x ; } catch ( Throwable x ) { thrown = x ; throw new Error ( x ) ; } finally { afterExecute ( task , thrown ) ; } } finally { task = null ; w . completedTasks ++ ; w . unlock ( ) ; } } completedAbruptly = _BOOL ; } finally { processWorkerExit ( w , completedAbruptly ) ; } }
public void writeBlockLight ( ByteBuf output ) { output . writeBytes ( blockLight . getHandle ( ) ) ; }
private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { return unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; }
public String search ( ) throws Exception { executeQuery ( ) ; return SUCCESS ; }
public String next ( Pattern pattern ) { checkOpen ( ) ; checkNotNull ( pattern ) ; matchSuccessful = _BOOL ; saveCurrentStatus ( ) ; if ( ! setTokenRegion ( ) ) { recoverPreviousStatus ( ) ; throw new NoSuchElementException ( ) ; } matcher . usePattern ( pattern ) ; if ( ! matcher . matches ( ) ) { recoverPreviousStatus ( ) ; throw new InputMismatchException ( ) ; } matchSuccessful = _BOOL ; return matcher . group ( ) ; }
public void addNewDuration ( long duration ) { callsNumber . incrementAndGet ( ) ; total . addAndGet ( duration ) ; synchronized ( lock ) { if ( duration < minimum . longValue ( ) ) { minimum . set ( duration ) ; } if ( duration > maximum . longValue ( ) ) { maximum . set ( duration ) ; } } }
private void paintBackgroundSolid ( Graphics2D g , JComponent c , int x , int y , int width , int height ) { Color color = c . getBackground ( ) ; if ( type == CommonControlState . DISABLED ) { color = new Color ( color . getRed ( ) , color . getGreen ( ) , color . getBlue ( ) , _NUM ) ; } Shape s = shapeGenerator . createRoundRectangle ( x - _NUM , y - _NUM , width + _NUM , height + _NUM , CornerSize . BORDER ) ; g . setPaint ( color ) ; g . fill ( s ) ; if ( isPaintLineSeperators ( c ) ) { paintLineSeparator ( g , c , width , height ) ; } }
public static void addAttributeDefaultValues ( String serviceName , String subSchemaName , String schemaType , String attributeName , Set defaultValues ) throws UpgradeException { String classMethod = _STR ; if ( debug . messageEnabled ( ) ) { debug . message ( classMethod + _STR ) ; debug . message ( _STR + serviceName + _STR + attributeName ) ; } ServiceSchema ss = getServiceSchema ( serviceName , subSchemaName , schemaType ) ; try { Map attributeDefaults = ss . getAttributeDefaults ( ) ; Set oldAttrValues = ( Set ) attributeDefaults . get ( attributeName ) ; Set newAttrValues = ( ( oldAttrValues == null ) || oldAttrValues . isEmpty ( ) ) ? new HashSet ( ) : new HashSet ( oldAttrValues ) ; newAttrValues . addAll ( defaultValues ) ; ss . setAttributeDefaults ( attributeName , newAttrValues ) ; } catch ( SSOException ssoe ) { throw new UpgradeException ( _STR ) ; } catch ( SMSException sme ) { throw new UpgradeException ( _STR + _STR ) ; } }
private String encodeProduct ( ) { StringBuffer tokens = new StringBuffer ( ) ; ListIterator it = productTokens . listIterator ( ) ; while ( it . hasNext ( ) ) { tokens . append ( ( String ) it . next ( ) ) ; } return tokens . toString ( ) ; }
public boolean isMetadataModifiedSinceLastPublication ( ) { return metadataModifiedSinceLastPublication ; }
public Options resourceDirs ( List < File > value ) { resourceDirs . clear ( ) ; resourceDirs . addAll ( value ) ; return this ; }
private final String _decodeShortUnicodeName ( int len ) throws IOException , JsonParseException { int outPtr = _NUM ; char [ ] outBuf = _textBuffer . emptyAndGetCurrentSegment ( ) ; int inPtr = _inputPtr ; _inputPtr += len ; final int [ ] codes = SmileConstants . sUtf8UnitLengths ; final byte [ ] inBuf = _inputBuffer ; for ( int end = inPtr + len ; inPtr < end ; ) { int i = inBuf [ inPtr ++ ] & _NUM ; int code = codes [ i ] ; if ( code != _NUM ) { switch ( code ) { case _NUM : i = ( ( i & _NUM ) << _NUM ) | ( inBuf [ inPtr ++ ] & _NUM ) ; break ; case _NUM : i = ( ( i & _NUM ) << _NUM ) | ( ( inBuf [ inPtr ++ ] & _NUM ) << _NUM ) | ( inBuf [ inPtr ++ ] & _NUM ) ; break ; case _NUM : i = ( ( i & _NUM ) << _NUM ) | ( ( inBuf [ inPtr ++ ] & _NUM ) << _NUM ) | ( ( inBuf [ inPtr ++ ] & _NUM ) << _NUM ) | ( inBuf [ inPtr ++ ] & _NUM ) ; i -= _NUM ; outBuf [ outPtr ++ ] = ( char ) ( _NUM | ( i > > _NUM ) ) ; i = _NUM | ( i & _NUM ) ; break ; default : _reportError ( _STR + Integer . toHexString ( i ) + _STR ) ; } } outBuf [ outPtr ++ ] = ( char ) i ; } _textBuffer . setCurrentLength ( outPtr ) ; return _textBuffer . contentsAsString ( ) ; }
private static ClassNode makeType ( ClassNode cn , boolean usingClass ) { if ( usingClass ) { ClassNode clazzType = CLASS_Type . getPlainNodeReference ( ) ; clazzType . setGenericsTypes ( new GenericsType [ ] { new GenericsType ( cn ) } ) ; return clazzType ; } else { return cn ; } }
void pushImportURL ( String hrefUrl ) { m_importStack . push ( hrefUrl ) ; }
protected String toMessage ( Map < String , String > results ) { StringBuilder builder = new StringBuilder ( ) ; if ( results != null ) { for ( Map . Entry < String , String > entry : results . entrySet ( ) ) { builder . append ( entry . getKey ( ) + _STR + entry . getValue ( ) + _STR ) ; } } return builder . toString ( ) ; }
public TestTree sort ( ) { Collections . sort ( suites ) ; suites . forEach ( null ) ; return this ; }
public static EventBean [ ] addToArray ( EventBean [ ] array , Collection < EventBean > eventsToAdd ) { EventBean [ ] newArray = new EventBean [ array . length + eventsToAdd . size ( ) ] ; System . arraycopy ( array , _NUM , newArray , _NUM , array . length ) ; int counter = array . length ; for ( EventBean eventToAdd : eventsToAdd ) { newArray [ counter ++ ] = eventToAdd ; } return newArray ; }
public synchronized void add ( String name , long threadId ) { if ( mFinished ) { throw new IllegalStateException ( _STR ) ; } mMarkers . add ( new Marker ( name , threadId , SystemClock . elapsedRealtime ( ) ) ) ; }
public static String replace ( String a , String b , String c ) { StringBuilder result = new StringBuilder ( c . length ( ) ) ; int i = _NUM ; int j = c . indexOf ( a ) ; while ( j >= i ) { result . append ( c . substring ( i , j ) ) ; result . append ( b ) ; i = j + a . length ( ) ; j = c . indexOf ( a , i ) ; } result . append ( c . substring ( i , c . length ( ) ) ) ; return result . toString ( ) ; }
protected void onPageScrolled ( int position , float offset , int offsetPixels ) { if ( mDecorChildCount > _NUM ) { final int scrollY = getScrollY ( ) ; int paddingTop = getPaddingTop ( ) ; int paddingBottom = getPaddingBottom ( ) ; final int height = getHeight ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( ! lp . isDecor ) continue ; final int vgrav = lp . gravity & Gravity . VERTICAL_GRAVITY_MASK ; int childTop = _NUM ; switch ( vgrav ) { default : childTop = paddingTop ; break ; case Gravity . TOP : childTop = paddingTop ; paddingTop += child . getHeight ( ) ; break ; case Gravity . CENTER_VERTICAL : childTop = Math . max ( ( height - child . getMeasuredHeight ( ) ) / _NUM , paddingTop ) ; break ; case Gravity . BOTTOM : childTop = height - paddingBottom - child . getMeasuredHeight ( ) ; paddingBottom += child . getMeasuredHeight ( ) ; break ; } childTop += scrollY ; final int childOffset = childTop - child . getTop ( ) ; if ( childOffset != _NUM ) { child . offsetTopAndBottom ( childOffset ) ; } } } dispatchOnPageScrolled ( position , offset , offsetPixels ) ; if ( mPageTransformer != null ) { final int scrollY = getScrollY ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( lp . isDecor ) continue ; final float transformPos = ( float ) ( child . getTop ( ) - scrollY ) / getClientHeight ( ) ; mPageTransformer . transformPage ( child , transformPos ) ; } } mCalledSuper = _BOOL ; }
private void reflectMemberVariablesInFinalButton ( ) { final boolean lastPageReached = ( viewPager . getCurrentItem ( ) + _NUM ) == pages . size ( ) ; final boolean buttonShouldBeInvisible = ! lastPageReached || finalButtonDisabled ; final boolean buttonIsCurrentlyInvisible = finalButton . getVisibility ( ) == View . INVISIBLE ; final boolean shouldUpdateButton = buttonShouldBeInvisible != buttonIsCurrentlyInvisible ; if ( shouldUpdateButton ) { final Animator buttonAnimator = buttonShouldBeInvisible ? buttonAnimatorFactory . newFinalButtonDisappearAnimator ( finalButton ) : buttonAnimatorFactory . newFinalButtonAppearAnimator ( finalButton ) ; if ( buttonShouldBeInvisible ) { disableButton ( buttonAnimator , finalButton ) ; } else { enableButton ( buttonAnimator , finalButton ) ; } } }
public void testDecoder6 ( ) { boolean res ; String originalAppIdName = mAppIdName ; int originalContentTypeValue = mContentTypeValue ; Random rd = new Random ( ) ; for ( int i = _NUM ; i < OMA_APPLICATION_ID_NAMES . length ; i ++ ) { mAppIdName = OMA_APPLICATION_ID_NAMES [ i ] ; mContentTypeValue = rd . nextInt ( _NUM ) ; byte [ ] pdu = createPDU ( _NUM ) ; WspTypeDecoder pduDecoder = new WspTypeDecoder ( pdu ) ; res = pduDecoder . seekXWapApplicationId ( mWspHeaderStart , mWspHeaderStart + mWspHeaderLen - _NUM ) ; assertTrue ( res ) ; int index = ( int ) pduDecoder . getValue32 ( ) ; res = pduDecoder . decodeXWapApplicationId ( index ) ; assertTrue ( res ) ; Log . d ( LOG_TAG , _STR + mAppIdName + _STR + pduDecoder . getValueString ( ) + _STR ) ; assertTrue ( mAppIdName . equals ( pduDecoder . getValueString ( ) ) ) ; } mAppIdName = originalAppIdName ; mContentTypeValue = originalContentTypeValue ; }
public final void removeAll ( ) { actionList . clear ( ) ; constraintsList . clear ( ) ; needSorting = _BOOL ; }
private static boolean isWritable ( @ NonNull final File file ) { boolean isExisting = file . exists ( ) ; try { FileOutputStream output = new FileOutputStream ( file , _BOOL ) ; try { output . close ( ) ; } catch ( IOException e ) { } } catch ( java . io . FileNotFoundException e ) { return _BOOL ; } boolean result = file . canWrite ( ) ; if ( ! isExisting ) { file . delete ( ) ; } return result ; }
public GmPublishingPriority ( ) { }
private RelyingParty validateRelyingParty ( HttpServletRequest request , String tenantName ) { Validate . notNull ( request , _STR ) ; Validate . notEmpty ( tenantName , _STR ) ; DefaultIdmAccessorFactory idmFactory = new DefaultIdmAccessorFactory ( ) ; Validate . notNull ( idmFactory , _STR ) ; IdmAccessor idmAccessor = idmFactory . getIdmAccessor ( ) ; idmAccessor . setTenant ( tenantName ) ; String encodedEntityId = request . getParameter ( Shared . RELYINGPARTY_ENTITYID ) ; if ( encodedEntityId == null || encodedEntityId . isEmpty ( ) ) { logger . error ( _STR ) ; return null ; } String rpEntityId = new String ( Base64 . decode ( encodedEntityId ) ) ; RelyingParty rp = idmAccessor . getRelyingPartyByUrl ( rpEntityId ) ; if ( rp != null ) { return rp ; } else { logger . error ( _STR + rpEntityId ) ; return null ; } }
public void rotateZ ( double theta ) { Matrix3D tmp = new Matrix3D ( ) ; double c = Math . cos ( theta ) ; double s = Math . sin ( theta ) ; tmp . set ( _NUM , _NUM , c ) ; tmp . set ( _NUM , _NUM , - s ) ; tmp . set ( _NUM , _NUM , s ) ; tmp . set ( _NUM , _NUM , c ) ; preMultiply ( tmp ) ; }
public ServiceHost startFactory ( Service instanceService ) { final Class < ? extends Service > serviceClass = instanceService . getClass ( ) ; return startFactory ( serviceClass , null ) ; }
void wakeOut ( ) { OnAvailable outFlow = _outFlow ; if ( outFlow == null ) { return ; } if ( _creditsIn <= _queue . head ( ) ) { return ; } StateOutPipe stateOld ; StateOutPipe stateNew ; do { stateOld = _stateOutRef . get ( ) ; if ( ! stateOld . isFull ( ) ) { return ; } stateNew = stateOld . toWake ( ) ; } while ( ! _stateOutRef . compareAndSet ( stateOld , stateNew ) ) ; try ( OutboxAmp outbox = OutboxAmp . currentOrCreate ( _outRef . services ( ) ) ) { Objects . requireNonNull ( outbox ) ; PipeWakeOutMessage < T > msg = new PipeWakeOutMessage < > ( outbox , _outRef , this , outFlow ) ; outbox . offer ( msg ) ; } }
public ConstraintMap createAssignmentConstraints ( final AnnotatedTypeMirror assignedTo , final AnnotatedTypeMirror boxedReturnType , final AnnotatedExecutableType methodType , final Set < AFConstraint > afArgumentConstraints , final Map < TypeVariable , AnnotatedTypeMirror > inferredArgs , final Set < TypeVariable > targets , final AnnotatedTypeFactory typeFactory ) { final LinkedList < AFConstraint > assignmentAfs = new LinkedList < > ( ) ; for ( AnnotatedTypeVariable typeParam : methodType . getTypeVariables ( ) ) { final TypeVariable target = typeParam . getUnderlyingType ( ) ; final AnnotatedTypeMirror inferredType = inferredArgs . get ( target ) ; if ( inferredType != null ) { assignmentAfs . add ( new A2F ( inferredType , typeParam . getUpperBound ( ) ) ) ; assignmentAfs . add ( new F2A ( typeParam . getLowerBound ( ) , inferredType ) ) ; } else { assignmentAfs . add ( new F2A ( typeParam , typeParam . getUpperBound ( ) ) ) ; assignmentAfs . add ( new A2F ( typeParam . getLowerBound ( ) , typeParam ) ) ; } } for ( AFConstraint argConstraint : afArgumentConstraints ) { if ( argConstraint instanceof F2A ) { assignmentAfs . add ( argConstraint ) ; } } LinkedList < AFConstraint > substitutedAssignmentConstraints = new LinkedList < > ( ) ; for ( AFConstraint afConstraint : assignmentAfs ) { substitutedAssignmentConstraints . add ( afConstraint . substitute ( inferredArgs ) ) ; } final AnnotatedTypeMirror substitutedReturnType = TypeArgInferenceUtil . substitute ( inferredArgs , boxedReturnType ) ; substitutedAssignmentConstraints . add ( new F2A ( substitutedReturnType , assignedTo ) ) ; final Set < AFConstraint > reducedConstraints = new LinkedHashSet < > ( ) ; reduceAfConstraints ( typeFactory , reducedConstraints , substitutedAssignmentConstraints , targets ) ; final Set < TUConstraint > tuAssignmentConstraints = afToTuConstraints ( reducedConstraints , targets ) ; addConstraintsBetweenTargets ( tuAssignmentConstraints , targets , _BOOL , typeFactory ) ; return constraintMapBuilder . build ( targets , tuAssignmentConstraints , typeFactory ) ; }
public static int columnsNumber ( char c , int x , int prevX , int plainSpaceSize ) { if ( c != _STR ) { return _NUM ; } int result = ( x - prevX ) / plainSpaceSize ; if ( ( x - prevX ) % plainSpaceSize > _NUM ) { result ++ ; } return result ; }
private Optional ( T value ) { this . value = Objects . requireNonNull ( value ) ; }
public KafkaMessageListenerContainer ( ConsumerFactory < K , V > consumerFactory , ContainerProperties containerProperties , TopicPartitionInitialOffset ... topicPartitions ) { super ( containerProperties ) ; Assert . notNull ( consumerFactory , _STR ) ; this . consumerFactory = consumerFactory ; if ( topicPartitions != null ) { this . topicPartitions = Arrays . copyOf ( topicPartitions , topicPartitions . length ) ; } else { this . topicPartitions = containerProperties . getTopicPartitions ( ) ; } }
public void engineDeleteEntry ( String alias ) throws KeyStoreException { Key k = ( Key ) keys . remove ( alias ) ; Certificate c = ( Certificate ) certs . remove ( alias ) ; if ( c != null ) { chainCerts . remove ( new CertId ( c . getPublicKey ( ) ) ) ; } if ( k != null ) { String id = ( String ) localIds . remove ( alias ) ; if ( id != null ) { c = ( Certificate ) keyCerts . remove ( id ) ; } if ( c != null ) { chainCerts . remove ( new CertId ( c . getPublicKey ( ) ) ) ; } } }
private String toString ( Matcher m , int group ) { return ( group == _NUM ) ? _STR : m . group ( group ) ; }
public PlaLineInt translate_by ( PlaVectorInt p_vector ) { if ( p_vector . equals ( PlaVectorInt . ZERO ) ) return this ; PlaPointInt new_a = point_a . translate_by ( p_vector ) ; PlaPointInt new_b = point_b . translate_by ( p_vector ) ; return new PlaLineInt ( new_a , new_b ) ; }
@ SuppressWarnings ( _STR ) final void reject ( Runnable command ) { handler . rejectedExecution ( command , this ) ; }
private int calculateMenuMargin ( ) { WindowManager wm = ( WindowManager ) getSystemService ( Context . WINDOW_SERVICE ) ; Display display = wm . getDefaultDisplay ( ) ; Point size = new Point ( ) ; display . getSize ( size ) ; int height = size . y ; return ( int ) Math . round ( height * MENU_MARGIN_RELATIVE_MODIFIER ) ; }
public void addRam ( AttackAction ea ) { pendingRams . addElement ( ea ) ; processGameEvent ( new GameNewActionEvent ( this , ea ) ) ; }
public static List < Integer > createColors ( Resources r , int [ ] colors ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i : colors ) { result . add ( r . getColor ( i ) ) ; } return result ; }
public void testConfigFileProperty ( ) throws Exception { File configHome = new File ( configuration . getHome ( ) ) ; assertTrue ( _STR , configHome . exists ( ) && configHome . isDirectory ( ) ) ; File existingFile = createFile ( configHome , _STR , _STR ) ; assertEquals ( _STR , readFile ( existingFile ) ) ; String fileName = _STR ; String fileContents = _STR ; File file = createFile ( configFileDirectory , fileName , fileContents ) ; FileConfig configFile = new FileConfig ( ) ; configFile . setFile ( getAbsolutePath ( file ) ) ; configFile . setToFile ( _STR ) ; configFile . setOverwrite ( _BOOL ) ; configFile . setConfigfile ( _BOOL ) ; configuration . setProperty ( _STR , _STR ) ; configuration . setConfigFileProperty ( configFile ) ; configuration . doConfigure ( null ) ; File copiedFile = new File ( configuration . getHome ( ) + _STR ) ; assertTrue ( _STR , copiedFile . exists ( ) ) ; assertEquals ( _STR , readFile ( copiedFile ) ) ; }
protected byte [ ] generateSalt ( ) { return HEADER . getBytes ( Constants . UTF8 ) ; }
public void addListener ( final ProjectorListener projectorListener ) { if ( listeners == null ) { listeners = new ArrayList < ProjectorListener > ( ) ; } listeners . add ( projectorListener ) ; }
protected TupleExpr selectNextTupleExpr ( List < TupleExpr > expressions , Map < TupleExpr , Double > cardinalityMap , Map < TupleExpr , List < Var > > varsMap , Map < Var , Integer > varFreqMap , Set < String > boundVars ) { TupleExpr result = null ; if ( expressions . size ( ) > _NUM ) { double lowestCardinality = Double . POSITIVE_INFINITY ; for ( TupleExpr tupleExpr : expressions ) { double cardinality = getTupleExprCardinality ( tupleExpr , cardinalityMap , varsMap , varFreqMap , boundVars ) ; if ( cardinality < lowestCardinality || result == null ) { lowestCardinality = cardinality ; result = tupleExpr ; } } } else { result = expressions . get ( _NUM ) ; } return result ; }
public static void writeBcdNumber ( OutputStream os , String number ) throws IOException { int bcd = _NUM ; int n = _NUM ; for ( int i = _NUM ; i < number . length ( ) ; i ++ ) { switch ( number . charAt ( i ) ) { case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; case _STR : bcd |= _NUM ; break ; } n ++ ; if ( n == _NUM ) { os . write ( bcd ) ; n = _NUM ; bcd = _NUM ; } else { bcd >>= _NUM ; } } if ( n == _NUM ) { bcd |= _NUM ; os . write ( bcd ) ; } }
public void addMessage ( String message ) { messages . addLast ( message ) ; if ( messages . size ( ) > MAX_HISTORY ) { messages . removeFirst ( ) ; } pointer = messages . size ( ) ; }
@ VisibleForTesting protected void startExecutor ( final int container ) { LOG . info ( _STR + container ) ; final Process containerExecutor = startExecutorProcess ( container ) ; processToContainer . put ( containerExecutor , container ) ; LOG . info ( _STR + container ) ; startExecutorMonitor ( container , containerExecutor ) ; }
public static Date stringToDate ( String s , DateFormat formatter ) { try { return formatter . parse ( s ) ; } catch ( ParseException e ) { return null ; } }
public void accept ( AbstractReporter r ) { r . testStart ( this ) ; r . browserInfoEntry ( browserInfoEntry ) ; Iterator < LogEntry > entryIterator = logEntries . iterator ( ) ; while ( entryIterator . hasNext ( ) ) { LogEntry entry = entryIterator . next ( ) ; if ( ! entryIterator . hasNext ( ) ) { entry . setLast ( _BOOL ) ; } visit ( entry , r ) ; } r . testEnd ( this ) ; }
private void loadLatestExtensionVersions ( ) { try { List < Extension > all = registryManager . getExtensions ( ) ; if ( ! all . isEmpty ( ) ) { setLatestExtensionVersions ( getLatestVersions ( all ) ) ; } } catch ( RegistryException e ) { String msg = RegistryException . logRegistryException ( e . getType ( ) , this ) ; warnings . addStartupError ( msg ) ; LOG . error ( msg ) ; msg = getText ( _STR , new String [ ] { cfg . getRegistryUrl ( ) } ) ; warnings . addStartupError ( msg ) ; LOG . error ( msg ) ; } finally { if ( getLatestExtensionVersions ( ) == null ) { setLatestExtensionVersions ( new ArrayList < Extension > ( ) ) ; } } }
protected void startNode ( Node node ) throws org . xml . sax . SAXException { if ( node instanceof Locator ) { Locator loc = ( Locator ) node ; fLocator . setColumnNumber ( loc . getColumnNumber ( ) ) ; fLocator . setLineNumber ( loc . getLineNumber ( ) ) ; fLocator . setPublicId ( loc . getPublicId ( ) ) ; fLocator . setSystemId ( loc . getSystemId ( ) ) ; } else { fLocator . setColumnNumber ( _NUM ) ; fLocator . setLineNumber ( _NUM ) ; } switch ( node . getNodeType ( ) ) { case Node . DOCUMENT_TYPE_NODE : serializeDocType ( ( DocumentType ) node , _BOOL ) ; break ; case Node . COMMENT_NODE : serializeComment ( ( Comment ) node ) ; break ; case Node . DOCUMENT_FRAGMENT_NODE : break ; case Node . DOCUMENT_NODE : break ; case Node . ELEMENT_NODE : serializeElement ( ( Element ) node , _BOOL ) ; break ; case Node . PROCESSING_INSTRUCTION_NODE : serializePI ( ( ProcessingInstruction ) node ) ; break ; case Node . CDATA_SECTION_NODE : serializeCDATASection ( ( CDATASection ) node ) ; break ; case Node . TEXT_NODE : serializeText ( ( Text ) node ) ; break ; case Node . ENTITY_REFERENCE_NODE : serializeEntityReference ( ( EntityReference ) node , _BOOL ) ; break ; default : } }
@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( _NUM ) ; format ( ( getYear ( ) + _NUM ) , _NUM , sb ) ; sb . append ( _STR ) ; format ( ( getMonth ( ) + _NUM ) , _NUM , sb ) ; sb . append ( _STR ) ; format ( getDate ( ) , _NUM , sb ) ; return sb . toString ( ) ; }
public void testClearBitNegativeInside2 ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int number = _NUM ; byte rBytes [ ] = { - _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , - _NUM , _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . clearBit ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , result . signum ( ) ) ; }
public void testCompareGreaterScale2 ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; int result = - _NUM ; assertEquals ( _STR , result , aNumber . compareTo ( bNumber ) ) ; }
public int read ( ) throws IOException { int val ; if ( ( val = is . read ( ) ) < _NUM ) { return - _NUM ; } if ( bo == _STR ) { val = ( char ) ( ( val << _NUM ) | ( is . read ( ) & _NUM ) ) ; } else { val = ( char ) ( ( is . read ( ) << _NUM ) | ( val & _NUM ) ) ; } return val ; }
public void cancelAutoCompletion ( ) { if ( inCompletion ) { textField . setText ( textBefore ) ; textField . setCaretPosition ( caretPosBefore ) ; prevCompletion = null ; prevCompletionIndex = _NUM ; inCompletion = _BOOL ; } }
private void translateMatrixAfterRotate ( int axis , float trans , float prevImageSize , float imageSize , int prevViewSize , int viewSize , int drawableSize ) { if ( imageSize < viewSize ) { m [ axis ] = ( viewSize - ( drawableSize * m [ Matrix . MSCALE_X ] ) ) * _NUM ; } else if ( trans > _NUM ) { m [ axis ] = - ( ( imageSize - viewSize ) * _NUM ) ; } else { float percentage = ( Math . abs ( trans ) + ( _NUM * prevViewSize ) ) / prevImageSize ; m [ axis ] = - ( ( percentage * imageSize ) - ( viewSize * _NUM ) ) ; } }
public Enumeration < Option > listOptions ( ) { Vector < Option > result = new Vector < Option > ( ) ; result . add ( new Option ( _STR , _STR , _NUM , _STR ) ) ; result . addAll ( Collections . list ( super . listOptions ( ) ) ) ; return result . elements ( ) ; }
public ClientPropertiesBuilder withProxyHostName ( String proxyHostName ) { properties . setProperty ( CLIENT_SERVICE_PROXY_HOST_NAME , proxyHostName ) ; return this ; }
public static void verifySetterMethods ( Class < ? > clazz , MappedField ... fields ) { String methodName = null ; String fieldName = null ; Class < ? > fieldType = null ; try { for ( MappedField field : fields ) { fieldName = field . getName ( ) ; fieldType = field . getType ( ) ; String customSet = field . setMethod ( ) ; if ( ! isNull ( customSet ) && ! customSet . equals ( Constants . DEFAULT_ACCESSOR_VALUE ) ) try { clazz . getMethod ( customSet , fieldType ) ; field . setMethod ( customSet ) ; continue ; } catch ( Exception e ) { Error . customMethod ( _STR , customSet , clazz ) ; } methodName = mSet ( fieldName ) ; clazz . getMethod ( methodName , fieldType ) ; field . setMethod ( methodName ) ; } } catch ( Exception e ) { Error . method ( methodName , fieldName , clazz ) ; } }
private E dequeue ( ) { final Object [ ] items = this . items ; @ SuppressWarnings ( _STR ) E x = ( E ) items [ takeIndex ] ; items [ takeIndex ] = null ; takeIndex = inc ( takeIndex ) ; count -- ; if ( itrs != null ) itrs . elementDequeued ( ) ; notFull . signal ( ) ; return x ; }
static public String randomPositiveFloat ( int whole , int decimal ) { StringBuilder output = new StringBuilder ( ) ; output . append ( rnd . nextInt ( _NUM ) + _NUM ) ; for ( int i = _NUM ; i < whole - _NUM ; i ++ ) { output . append ( rnd . nextInt ( _NUM ) ) ; } output . append ( _STR ) ; for ( int i = _NUM ; i < decimal ; i ++ ) { output . append ( rnd . nextInt ( _NUM ) ) ; } return output . toString ( ) ; }
public static Variation attemptToGetAsVariant ( String part ) { try { StoneTypes var = StoneTypes . valueOf ( part . toUpperCase ( ) ) ; if ( var != null ) { Variation bv = new Variation ( ) ; bv . setValue ( var . value ( ) ) ; return bv ; } } catch ( Exception e ) { } try { WoodTypes var = WoodTypes . valueOf ( part . toUpperCase ( ) ) ; if ( var != null ) { Variation bv = new Variation ( ) ; bv . setValue ( var . value ( ) ) ; return bv ; } } catch ( Exception e ) { } try { FlowerTypes var = FlowerTypes . fromValue ( part ) ; if ( var != null ) { Variation bv = new Variation ( ) ; bv . setValue ( var . value ( ) ) ; return bv ; } } catch ( Exception e ) { } try { EntityTypes var = EntityTypes . fromValue ( part ) ; if ( var != null ) { Variation bv = new Variation ( ) ; bv . setValue ( var . value ( ) ) ; return bv ; } } catch ( Exception e ) { } try { MonsterEggTypes var = MonsterEggTypes . fromValue ( part ) ; if ( var != null ) { Variation bv = new Variation ( ) ; bv . setValue ( var . value ( ) ) ; return bv ; } } catch ( Exception e ) { } try { ShapeTypes var = ShapeTypes . fromValue ( part ) ; if ( var != null ) { Variation bv = new Variation ( ) ; bv . setValue ( var . value ( ) ) ; return bv ; } } catch ( Exception e ) { } try { HalfTypes var = HalfTypes . fromValue ( part ) ; if ( var != null ) { Variation bv = new Variation ( ) ; bv . setValue ( var . value ( ) ) ; return bv ; } } catch ( Exception e ) { } return null ; }
public void resetTextBoxIndexesExcept ( Set < Integer > excludedList ) { Set < Integer > unusedTextBoxIndexes = new HashSet < Integer > ( points . getTextBoxIndexes ( ) ) ; unusedTextBoxIndexes . removeAll ( excludedList ) ; for ( Integer index : unusedTextBoxIndexes ) { points . removeTextBox ( index ) ; } }
public IDevice learnEntity ( long macAddress , Short vlan , Integer ipv4Address , Long switchDPID , Integer switchPort , boolean processUpdates ) { List < IDeviceListener > listeners = deviceListeners . getOrderedListeners ( ) ; if ( ! processUpdates ) { deviceListeners . clearListeners ( ) ; } if ( vlan != null && vlan . shortValue ( ) <= _NUM ) vlan = null ; if ( ipv4Address != null && ipv4Address == _NUM ) ipv4Address = null ; IDevice res = learnDeviceByEntity ( new Entity ( macAddress , vlan , ipv4Address , switchDPID , switchPort , new Date ( ) ) ) ; if ( listeners != null ) { for ( IDeviceListener listener : listeners ) { deviceListeners . addListener ( _STR , listener ) ; } } return res ; }
public double [ ] levelZeroData ( ) { List < Buffer > levelZeroBuffers = bufferMap . get ( _NUM ) ; int length = _NUM ; for ( Buffer buffer : levelZeroBuffers ) { if ( ! buffer . hasCapacity ( ) ) { length += buffer . size ; } else { length += buffer . next ; } } int pos = _NUM ; int currLen ; final double [ ] out = new double [ length ] ; for ( Buffer buffer : levelZeroBuffers ) { if ( ! buffer . hasCapacity ( ) ) { currLen = buffer . size ; } else { currLen = buffer . next ; } System . arraycopy ( buffer . data , _NUM , out , pos , currLen ) ; pos += currLen ; } return out ; }
private void addReference ( final int sourcePosition , final int referencePosition ) { if ( srcAndRefPositions == null ) { srcAndRefPositions = new int [ _NUM ] ; } if ( referenceCount >= srcAndRefPositions . length ) { int [ ] a = new int [ srcAndRefPositions . length + _NUM ] ; System . arraycopy ( srcAndRefPositions , _NUM , a , _NUM , srcAndRefPositions . length ) ; srcAndRefPositions = a ; } srcAndRefPositions [ referenceCount ++ ] = sourcePosition ; srcAndRefPositions [ referenceCount ++ ] = referencePosition ; }
public String [ ] showVersion ( ) throws NetworkDeviceControllerException { String [ ] returnVal = new String [ _NUM ] ; SSHPrompt [ ] prompts = { SSHPrompt . MDS_POUND , SSHPrompt . MDS_GREATER_THAN } ; StringBuilder buf = new StringBuilder ( ) ; SSHPrompt prompt = sendWaitFor ( MDSDialogProperties . getString ( _STR ) , _NUM , prompts , buf ) ; String [ ] lines = getLines ( buf ) ; String [ ] regex = { MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) } ; String [ ] groups = new String [ _NUM ] ; for ( String line : lines ) { int index = match ( line , regex , groups ) ; switch ( index ) { case _NUM : returnVal [ _NUM ] = groups [ _NUM ] ; break ; case _NUM : returnVal [ _NUM ] = groups [ _NUM ] ; break ; case _NUM : returnVal [ _NUM ] = groups [ _NUM ] ; break ; } } return returnVal ; }
public static int countMatches ( String string , char c ) { int n = _NUM ; for ( char tc : string . toCharArray ( ) ) { if ( c == tc ) n ++ ; } return n ; }
private ImageIcon addColor ( ImageIcon icon , Color color ) { if ( icon == null || color == null ) { return icon ; } BufferedImage newImage = new BufferedImage ( icon . getIconWidth ( ) , icon . getIconWidth ( ) , BufferedImage . TYPE_INT_ARGB ) ; Graphics g = newImage . getGraphics ( ) ; g . setColor ( color ) ; g . drawImage ( icon . getImage ( ) , _NUM , _NUM , color , null ) ; g . dispose ( ) ; return new ImageIcon ( newImage ) ; }
public static byte [ ] readAllLimited ( InputStream inStr , int limit ) throws IOException { ByteArrayOutputStream buf = new ByteArrayOutputStream ( ) ; pipeAllLimited ( inStr , limit , buf ) ; return buf . toByteArray ( ) ; }
protected String searchFor ( final String target , String start ) { return searchFor ( target , null , start ) ; }
private int validatePreloadOrder ( CacheConfiguration [ ] cfgs ) throws IgniteCheckedException { int maxOrder = _NUM ; for ( CacheConfiguration cfg : cfgs ) { int rebalanceOrder = cfg . getRebalanceOrder ( ) ; if ( rebalanceOrder > _NUM ) { if ( cfg . getCacheMode ( ) == LOCAL ) throw new IgniteCheckedException ( _STR + _STR + U . maskName ( cfg . getName ( ) ) ) ; if ( cfg . getRebalanceMode ( ) == CacheRebalanceMode . NONE ) throw new IgniteCheckedException ( _STR + _STR + U . maskName ( cfg . getName ( ) ) + _STR + cfg . getRebalanceMode ( ) + _STR + cfg . getRebalanceOrder ( ) + _STR ) ; maxOrder = Math . max ( maxOrder , rebalanceOrder ) ; } else if ( rebalanceOrder < _NUM ) throw new IgniteCheckedException ( _STR + _STR + U . maskName ( cfg . getName ( ) ) + _STR + rebalanceOrder + _STR ) ; } return maxOrder ; }
public void execute ( ) { mPlayer . setLoopMode ( mDoLoop ) ; mThread = new Thread ( this , _STR ) ; mThread . start ( ) ; }
@ Override public void removeEnvVar ( EnvVar envVar ) { if ( envVar != null ) { envVarList . remove ( envVar ) ; } }
static private String calcThreshold ( double scoreThreshold , double lambda ) { final double logProbThreshold = Math . log ( _NUM - scoreThreshold / _NUM ) ; int maxNum = _NUM ; if ( calcLogProb ( maxNum , lambda ) > logProbThreshold ) { return _STR ; } int minNum = _NUM ; while ( minNum < maxNum ) { final int midNum = ( maxNum + minNum ) / _NUM ; final boolean passThreshold = calcLogProb ( midNum , lambda ) <= logProbThreshold ; if ( passThreshold ) { maxNum = midNum ; } else { if ( midNum == minNum ) { break ; } minNum = midNum ; } } return Integer . toString ( maxNum ) ; }
private Scope peek ( ) throws JSONException { if ( stack . isEmpty ( ) ) { throw new JSONException ( _STR ) ; } return stack . get ( stack . size ( ) - _NUM ) ; }
public void testIsSigned ( ) { try { assertFalse ( rsmd . isSigned ( _NUM ) ) ; } catch ( SQLException e1 ) { fail ( _STR + e1 . getMessage ( ) ) ; e1 . printStackTrace ( ) ; } try { rsmd . isSigned ( _NUM ) ; fail ( _STR ) ; } catch ( SQLException e ) { } }
public static int indexOfLastSeparator ( String filename ) { if ( filename == null ) return - _NUM ; int lastUnixPos = filename . lastIndexOf ( UNIX_SEPARATOR ) ; int lastWindowsPos = filename . lastIndexOf ( WINDOWS_SEPARATOR ) ; return Math . max ( lastUnixPos , lastWindowsPos ) ; }
public static boolean pointInView ( View v , float localX , float localY , float slop ) { return localX >= - slop && localY >= - slop && localX < ( v . getWidth ( ) + slop ) && localY < ( v . getHeight ( ) + slop ) ; }
@ Category ( FlakyTest . class ) @ Test public void test_FPAmetadataFetch ( ) { final Host host = Host . getHost ( _NUM ) ; VM server1 = host . getVM ( _NUM ) ; VM server2 = host . getVM ( _NUM ) ; VM server3 = host . getVM ( _NUM ) ; VM server4 = host . getVM ( _NUM ) ; Boolean simpleFPR = _BOOL ; final int portLocator = AvailablePort . getRandomAvailablePort ( AvailablePort . SOCKET ) ; final String hostLocator = NetworkUtils . getServerHostName ( server1 . getHost ( ) ) ; final String locator = hostLocator + _STR + portLocator + _STR ; server3 . invoke ( null ) ; try { List < FixedPartitionAttributes > fpaList = new ArrayList < FixedPartitionAttributes > ( ) ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( _STR , _BOOL , _NUM ) ) ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( _STR , _BOOL , _NUM ) ) ; Integer port1 = ( Integer ) server1 . invoke ( null ) ; fpaList . clear ( ) ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( _STR , _BOOL , _NUM ) ) ; Integer port2 = ( Integer ) server2 . invoke ( null ) ; fpaList . clear ( ) ; createClientWithLocator ( hostLocator , portLocator ) ; putIntoPartitionedRegionsThreeQs ( ) ; getFromPartitionedRegionsFor3Qs ( ) ; Wait . pause ( _NUM ) ; server1 . invoke ( null ) ; server2 . invoke ( null ) ; int totalBucketOnServer = _NUM ; totalBucketOnServer += ( Integer ) server1 . invoke ( null ) ; totalBucketOnServer += ( Integer ) server2 . invoke ( null ) ; int currentRedundancy = _NUM ; verifyMetadata ( totalBucketOnServer , currentRedundancy ) ; updateIntoSinglePRFor3Qs ( ) ; fpaList . clear ( ) ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( _STR , _BOOL , _NUM ) ) ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( _STR , _BOOL , _NUM ) ) ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( _STR , _BOOL , _NUM ) ) ; fpaList . add ( FixedPartitionAttributes . createFixedPartition ( _STR , _BOOL , _NUM ) ) ; Integer port4 = ( Integer ) server4 . invoke ( null ) ; Wait . pause ( _NUM ) ; putIntoPartitionedRegions ( ) ; getFromPartitionedRegions ( ) ; Wait . pause ( _NUM ) ; server1 . invoke ( null ) ; server2 . invoke ( null ) ; server4 . invoke ( null ) ; totalBucketOnServer = _NUM ; totalBucketOnServer += ( Integer ) server1 . invoke ( null ) ; totalBucketOnServer += ( Integer ) server2 . invoke ( null ) ; totalBucketOnServer += ( Integer ) server4 . invoke ( null ) ; updateIntoSinglePR ( ) ; } finally { server3 . invoke ( null ) ; } }
private static Type [ ] unrollBounds ( final Map < TypeVariable < ? > , Type > typeArguments , final Type [ ] bounds ) { Type [ ] result = bounds ; int i = _NUM ; for ( ; i < result . length ; i ++ ) { final Type unrolled = unrollVariables ( typeArguments , result [ i ] ) ; if ( unrolled == null ) { result = ArrayUtils . remove ( result , i -- ) ; } else { result [ i ] = unrolled ; } } return result ; }
public void deleteQuota ( String id ) throws IsilonException { delete ( _baseUrl . resolve ( URI_QUOTAS ) , id , _STR ) ; }
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
public static Map < String , String > createBasicAuthHeader ( String username , String password , Map < String , String > headerMap ) { if ( headerMap == null ) headerMap = new HashMap < > ( ) ; String credentials = username + _STR + password ; String base64EncodedCredentials = Base64 . encodeToString ( credentials . getBytes ( ) , Base64 . NO_WRAP ) ; headerMap . put ( _STR , _STR + base64EncodedCredentials ) ; return headerMap ; }
private void addExtentEntry ( ) { extentModel . addNewEntry ( ) ; removeExtentButton . setEnabled ( _BOOL ) ; }
private TransportNetwork checkCached ( String networkId ) { try { String filename = networkId + _STR + R5Version . version + _STR ; File cacheLocation = new File ( cacheDir , networkId + _STR + R5Version . version + _STR ) ; if ( cacheLocation . exists ( ) ) LOG . info ( _STR , cacheLocation ) ; else { LOG . info ( _STR , cacheLocation ) ; if ( sourceBucket != null ) { LOG . info ( _STR ) ; S3Object tn ; try { tn = s3 . getObject ( sourceBucket , filename ) ; } catch ( AmazonServiceException ex ) { LOG . info ( _STR ) ; return null ; } cacheDir . mkdirs ( ) ; LOG . info ( _STR , cacheLocation ) ; FileOutputStream fos = new FileOutputStream ( cacheLocation ) ; InputStream is = tn . getObjectContent ( ) ; try { ByteStreams . copy ( is , fos ) ; } finally { is . close ( ) ; fos . close ( ) ; } } else { LOG . info ( _STR ) ; return null ; } } LOG . info ( _STR , cacheLocation ) ; FileInputStream fis = new FileInputStream ( cacheLocation ) ; try { return TransportNetwork . read ( fis ) ; } finally { fis . close ( ) ; } } catch ( Exception e ) { LOG . error ( _STR , e ) ; return null ; } }
public int countTokens ( ) { int count = _NUM ; boolean inToken = _BOOL ; for ( int i = position , length = string . length ( ) ; i < length ; i ++ ) { if ( delimiters . indexOf ( string . charAt ( i ) , _NUM ) >= _NUM ) { if ( returnDelimiters ) count ++ ; if ( inToken ) { count ++ ; inToken = _BOOL ; } } else { inToken = _BOOL ; } } if ( inToken ) count ++ ; return count ; }
void readFile ( File file ) throws org . jdom2 . JDOMException , java . io . IOException { XmlFile xf = new XmlFile ( ) { } ; xf . rootFromFile ( file ) ; }
public boolean isAllGranted ( ) { int count = _NUM ; for ( int i = _NUM ; i < mPerms . size ( ) ; i ++ ) { if ( mPerms . get ( mUserPermission . get ( i ) ) == PackageManager . PERMISSION_GRANTED ) count ++ ; } return count == mPerms . size ( ) ; }
protected void execute ( Runnable evt ) { executor . execute ( evt ) ; }
private void sendNextMessageOverNetwork ( ) throws Exception { RawData raw = outgoing . take ( ) ; if ( raw == null ) throw new NullPointerException ( ) ; sendNext ( raw ) ; }
@ Override protected void onSizeChanged ( int w , int h , int oldw , int oldh ) { super . onSizeChanged ( w , h , oldw , oldh ) ; setupBounds ( w , h ) ; setupPaints ( ) ; invalidate ( ) ; }
public void addAttributeFor ( final Field field ) { fieldToUseAsAttribute . add ( field ) ; }
public boolean isSessionToken ( String token ) { synchronized ( sessionTokens ) { return sessionTokens . contains ( token ) ; } }
public static double rootMeansSquaredError ( double [ ] real , double [ ] predicted ) { double ret = _NUM ; for ( int i = _NUM ; i < real . length ; i ++ ) { ret += Math . pow ( ( real [ i ] - predicted [ i ] ) , _NUM ) ; } return Math . sqrt ( ret / real . length ) ; }
public void export ( ByteBuffer buf ) { buf . putInt ( seqId ) ; if ( info . isRowBlockEnabled ( ) ) buf . putInt ( nRows ) ; export ( primaryKey , buf ) ; for ( ByteArray cb : cellBlocks ) { export ( cb , buf ) ; } }
private HashMap < String , Object > createAccDetailmap ( String glcode , BigDecimal debitAmount , BigDecimal creditAmount ) { HashMap < String , Object > accountdetailmap = new HashMap < String , Object > ( ) ; accountdetailmap . put ( VoucherConstant . GLCODE , glcode ) ; accountdetailmap . put ( VoucherConstant . DEBITAMOUNT , debitAmount ) ; accountdetailmap . put ( VoucherConstant . CREDITAMOUNT , creditAmount ) ; accountdetailmap . put ( VoucherConstant . FUNCTIONCODE , getFunctionaryCode ( ) ) ; return accountdetailmap ; }
private void rotateRight ( Node < K , V > root ) { Node < K , V > pivot = root . left ; Node < K , V > right = root . right ; Node < K , V > pivotLeft = pivot . left ; Node < K , V > pivotRight = pivot . right ; root . left = pivotRight ; if ( pivotRight != null ) { pivotRight . parent = root ; } replaceInParent ( root , pivot ) ; pivot . right = root ; root . parent = pivot ; root . height = Math . max ( right != null ? right . height : _NUM , pivotRight != null ? pivotRight . height : _NUM ) + _NUM ; pivot . height = Math . max ( root . height , pivotLeft != null ? pivotLeft . height : _NUM ) + _NUM ; }
private static int byteCompaction ( int mode , int [ ] codewords , Charset encoding , int codeIndex , StringBuilder result ) { ByteArrayOutputStream decodedBytes = new ByteArrayOutputStream ( ) ; if ( mode == BYTE_COMPACTION_MODE_LATCH ) { int count = _NUM ; long value = _NUM ; int [ ] byteCompactedCodewords = new int [ _NUM ] ; boolean end = _BOOL ; int nextCode = codewords [ codeIndex ++ ] ; while ( ( codeIndex < codewords [ _NUM ] ) && ! end ) { byteCompactedCodewords [ count ++ ] = nextCode ; value = _NUM * value + nextCode ; nextCode = codewords [ codeIndex ++ ] ; if ( nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } else { if ( ( count % _NUM == _NUM ) && ( count > _NUM ) ) { for ( int j = _NUM ; j < _NUM ; ++ j ) { decodedBytes . write ( ( byte ) ( value > > ( _NUM * ( _NUM - j ) ) ) ) ; } value = _NUM ; count = _NUM ; } } } if ( codeIndex == codewords [ _NUM ] && nextCode < TEXT_COMPACTION_MODE_LATCH ) { byteCompactedCodewords [ count ++ ] = nextCode ; } for ( int i = _NUM ; i < count ; i ++ ) { decodedBytes . write ( ( byte ) byteCompactedCodewords [ i ] ) ; } } else if ( mode == BYTE_COMPACTION_MODE_LATCH_6 ) { int count = _NUM ; long value = _NUM ; boolean end = _BOOL ; while ( codeIndex < codewords [ _NUM ] && ! end ) { int code = codewords [ codeIndex ++ ] ; if ( code < TEXT_COMPACTION_MODE_LATCH ) { count ++ ; value = _NUM * value + code ; } else { if ( code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } } if ( ( count % _NUM == _NUM ) && ( count > _NUM ) ) { for ( int j = _NUM ; j < _NUM ; ++ j ) { decodedBytes . write ( ( byte ) ( value > > ( _NUM * ( _NUM - j ) ) ) ) ; } value = _NUM ; count = _NUM ; } } } result . append ( new String ( decodedBytes . toByteArray ( ) , encoding ) ) ; return codeIndex ; }
private void updateRadioLinks ( ) { m_advanceDataSetFirst . setEnabled ( m_GeneratorPropertyPanel . getEditorActive ( ) ) ; m_advanceIteratorFirst . setEnabled ( m_GeneratorPropertyPanel . getEditorActive ( ) ) ; if ( m_Exp != null ) { if ( ! m_GeneratorPropertyPanel . getEditorActive ( ) ) { m_Exp . setAdvanceDataSetFirst ( _BOOL ) ; } else { m_Exp . setAdvanceDataSetFirst ( m_advanceDataSetFirst . isSelected ( ) ) ; } } }
public void update ( long value ) { count . incrementAndGet ( ) ; sample . update ( value ) ; setMax ( value ) ; setMin ( value ) ; sum . getAndAdd ( value ) ; updateVariance ( value ) ; }
@ Override public void drawSeries ( Canvas canvas , Paint paint , List < Float > points , XYSeriesRenderer renderer , float yAxisValue , int seriesIndex , int startIndex ) { paint . setColor ( renderer . getColor ( ) ) ; paint . setStyle ( Style . FILL ) ; int length = points . size ( ) ; XYValueSeries series = ( XYValueSeries ) mDataset . getSeriesAt ( seriesIndex ) ; double max = series . getMaxValue ( ) ; double coef = MAX_BUBBLE_SIZE / max ; for ( int i = _NUM ; i < length ; i += _NUM ) { double size = series . getValue ( startIndex + i / _NUM ) * coef + MIN_BUBBLE_SIZE ; drawCircle ( canvas , paint , points . get ( i ) , points . get ( i + _NUM ) , ( float ) size ) ; } }
public static void checkClassSignature ( final String signature ) { int pos = _NUM ; if ( getChar ( signature , _NUM ) == _STR ) { pos = checkFormalTypeParameters ( signature , pos ) ; } pos = checkClassTypeSignature ( signature , pos ) ; while ( getChar ( signature , pos ) == _STR ) { pos = checkClassTypeSignature ( signature , pos ) ; } if ( pos != signature . length ( ) ) { throw new IllegalArgumentException ( signature + _STR + pos ) ; } }
public static byte [ ] select ( String appId , String suffix ) { String cardletAid = FIDESMO_AID_PREFIX + appId + suffix ; return select ( cardletAid ) ; }
public List < Properties > findAvailableProperties ( String uri ) throws IOException { _resourcesNotLoaded . clear ( ) ; String fulluri = _path + uri ; List < Properties > properties = new ArrayList < > ( ) ; Enumeration < URL > resources = getResources ( fulluri ) ; while ( resources . hasMoreElements ( ) ) { URL url = resources . nextElement ( ) ; try { Properties props = loadProperties ( url ) ; properties . add ( props ) ; } catch ( Exception notAvailable ) { _resourcesNotLoaded . add ( url . toExternalForm ( ) ) ; } } return properties ; }
void internalAddRootEntry ( ProjectComparisonEntry entry ) { entries . add ( entry ) ; }
public static Source fromURL ( URL url , Charset cs ) throws IOException { URI uri ; try { uri = url . toURI ( ) ; } catch ( URISyntaxException e ) { throw new IOException ( _STR , e ) ; } try ( InputStream is = url . openStream ( ) ) { return fromStream ( is , uri , cs ) ; } }
public synchronized void addZoomListener ( ZoomListener listener ) { mZoomListeners . add ( listener ) ; }
public void testMergeOneServletIntoDocumentWithAnotherServlet ( ) throws Exception { String srcXml = _STR + _STR + _STR + _STR + _STR + _STR ; WebXml srcWebXml = WebXmlIo . parseWebXml ( new ByteArrayInputStream ( srcXml . getBytes ( _STR ) ) , null ) ; String mergeXml = _STR + _STR + _STR + _STR + _STR + _STR ; WebXml mergeWebXml = WebXmlIo . parseWebXml ( new ByteArrayInputStream ( mergeXml . getBytes ( _STR ) ) , null ) ; WebXmlMerger merger = new WebXmlMerger ( srcWebXml ) ; merger . merge ( mergeWebXml ) ; assertTrue ( WebXmlUtils . hasServlet ( srcWebXml , _STR ) ) ; assertTrue ( WebXmlUtils . hasServlet ( srcWebXml , _STR ) ) ; }
public RE extractRE ( ) throws InterruptedException { arden ( ) ; if ( ! coeffs . isEmpty ( ) ) { throw new RuntimeException ( _STR ) ; } return unionREs ( terms ) ; }
@ Deprecated public static void runFinalizersOnExit ( boolean run ) { finalizeOnExit = run ; }
public void addResult ( AMIdentity id , Map attrs ) { searchResults . add ( id ) ; resultsMap . put ( id , attrs ) ; }
public < T extends IntentionAction & LocalQuickFix > void registerBatchFix ( @ NotNull T fix , @ Nullable TextRange range , @ Nullable final HighlightDisplayKey key ) { if ( range == null ) { range = new TextRange ( myStartOffset , myEndOffset ) ; } if ( myBatchFixes == null ) { myBatchFixes = new ArrayList < QuickFixInfo > ( ) ; } myBatchFixes . add ( new QuickFixInfo ( fix , range , key ) ) ; }
protected void createFile ( ZipEntry entry ) { IPath pathname = new Path ( entry . getName ( ) ) ; ZipEntry parent ; if ( pathname . segmentCount ( ) == _NUM ) { parent = root ; } else { parent = ( ZipEntry ) directoryEntryCache . get ( pathname . removeLastSegments ( _NUM ) ) ; } addToChildren ( parent , entry ) ; }
public void testHasAttributes1 ( ) throws Throwable { Document doc ; NodeList addrList ; Node addrNode ; boolean state ; doc = ( Document ) load ( _STR , builder ) ; addrList = doc . getElementsByTagName ( _STR ) ; addrNode = addrList . item ( _NUM ) ; state = addrNode . hasAttributes ( ) ; assertFalse ( _STR , state ) ; }
public void startDocument ( XMLLocator locator , String encoding , NamespaceContext namespaceContext , Augmentations augs ) throws XNIException { fNamespaceContext = namespaceContext ; try { if ( fDocumentHandler != null ) { if ( locator != null ) { fDocumentHandler . setDocumentLocator ( new LocatorProxy ( locator ) ) ; } fDocumentHandler . startDocument ( ) ; } if ( fContentHandler != null ) { if ( locator != null ) { fContentHandler . setDocumentLocator ( new LocatorProxy ( locator ) ) ; } fContentHandler . startDocument ( ) ; } } catch ( SAXException e ) { throw new XNIException ( e ) ; } }
@ Override public String dumpWindowHierarchy ( boolean compressed ) { device . setCompressedLayoutHeirarchy ( compressed ) ; try { ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ; device . dumpWindowHierarchy ( os ) ; os . close ( ) ; return os . toString ( _STR ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } finally { device . setCompressedLayoutHeirarchy ( _BOOL ) ; } return null ; }
public void registerObserver ( RuleChangesObserver observer ) { observers . add ( observer ) ; }
private void sendUpdateHeartbeats ( ) { HeartbeatServiceLocal heartbeat = _bartender . getHeartbeatLocal ( ) ; if ( heartbeat != null ) { heartbeat . updateHeartbeats ( ) ; } }
public void serialize ( String name , byte [ ] message , OutputStream out ) throws IOException { byte [ ] header = new byte [ _NUM + COMMAND_LEN + _NUM + _NUM ] ; uint32ToByteArrayBE ( params . getPacketMagic ( ) , header , _NUM ) ; for ( int i = _NUM ; i < name . length ( ) && i < COMMAND_LEN ; i ++ ) { header [ _NUM + i ] = ( byte ) ( name . codePointAt ( i ) & _NUM ) ; } Utils . uint32ToByteArrayLE ( message . length , header , _NUM + COMMAND_LEN ) ; byte [ ] hash = doubleDigest ( message ) ; System . arraycopy ( hash , _NUM , header , _NUM + COMMAND_LEN + _NUM , _NUM ) ; out . write ( header ) ; out . write ( message ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR , name , bytesToHexString ( header ) + bytesToHexString ( message ) ) ; }
public SSLEngine initSslEngine ( boolean client ) throws Exception { KeyStore keyStore = loadKeystore ( properties . sslKeyStorePath ( ) , properties . sslKeyStorePassword ( ) ) ; KeyManagerFactory keyManagerFactory = KeyManagerFactory . getInstance ( KeyManagerFactory . getDefaultAlgorithm ( ) ) ; keyManagerFactory . init ( keyStore , keyStoreKeyPass ( properties ) ) ; KeyStore trustStore ; if ( properties . sslTrustStorePath ( ) != null ) { LOGGER . debug ( _STR ) ; trustStore = loadKeystore ( properties . sslTrustStorePath ( ) , properties . sslTrustStorePassword ( ) ) ; } else { trustStore = keyStore ; LOGGER . debug ( _STR ) ; } TrustManagerFactory trustManagerFactory = TrustManagerFactory . getInstance ( TrustManagerFactory . getDefaultAlgorithm ( ) ) ; trustManagerFactory . init ( trustStore ) ; KeyManager [ ] keyManagers = keyManagerFactory . getKeyManagers ( ) ; TrustManager [ ] trustManagers = trustManagerFactory . getTrustManagers ( ) ; SSLContext sslContext = SSLContext . getInstance ( _STR ) ; sslContext . init ( keyManagers , trustManagers , null ) ; SSLEngine sslEngine = sslContext . createSSLEngine ( ) ; sslEngine . setUseClientMode ( client ) ; sslEngine . setWantClientAuth ( _BOOL ) ; sslEngine . setEnabledProtocols ( sslEngine . getSupportedProtocols ( ) ) ; sslEngine . setEnabledCipherSuites ( sslEngine . getSupportedCipherSuites ( ) ) ; sslEngine . setEnableSessionCreation ( _BOOL ) ; return sslEngine ; }
public GetBufferedRandomAccessSource ( IRandomAccessSource source ) { this . source = source ; this . getBuffer = new byte [ ( int ) Math . min ( Math . max ( source . length ( ) / _NUM , _NUM ) , _NUM ) ] ; this . getBufferStart = - _NUM ; this . getBufferEnd = - _NUM ; }
public ArgParser ( String pName ) { programName = pName ; args = new Vector ( ) ; args . add ( new HelpArg ( ) ) ; }
public void testSetBitZero ( ) { byte aBytes [ ] = { _NUM } ; int aSign = _NUM ; int number = _NUM ; byte rBytes [ ] = { _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . setBit ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public static String convertBooleanArrToString ( Boolean [ ] noDictionaryDimsMapping ) { StringBuilder builder = new StringBuilder ( ) ; int index = _NUM ; for ( ; index < noDictionaryDimsMapping . length ; index ++ ) { builder . append ( noDictionaryDimsMapping [ index ] ) ; builder . append ( CarbonCommonConstants . COMA_SPC_CHARACTER ) ; } int lastIndex = builder . lastIndexOf ( CarbonCommonConstants . COMA_SPC_CHARACTER ) ; String str = - _NUM != lastIndex ? builder . substring ( _NUM , lastIndex ) : builder . toString ( ) ; return str ; }
@ Override protected void drawAxisLine ( Graphics2D g2 , double cursor , Rectangle2D dataArea , RectangleEdge edge ) { Line2D axisLine = null ; double c = cursor ; if ( edge == RectangleEdge . TOP ) { axisLine = new Line2D . Double ( dataArea . getX ( ) , c , dataArea . getMaxX ( ) , c ) ; } else if ( edge == RectangleEdge . BOTTOM ) { axisLine = new Line2D . Double ( dataArea . getX ( ) , c , dataArea . getMaxX ( ) , c ) ; } else if ( edge == RectangleEdge . LEFT ) { axisLine = new Line2D . Double ( c , dataArea . getY ( ) , c , dataArea . getMaxY ( ) ) ; } else if ( edge == RectangleEdge . RIGHT ) { axisLine = new Line2D . Double ( c , dataArea . getY ( ) , c , dataArea . getMaxY ( ) ) ; } g2 . setPaint ( getAxisLinePaint ( ) ) ; g2 . setStroke ( getAxisLineStroke ( ) ) ; Object saved = g2 . getRenderingHint ( RenderingHints . KEY_STROKE_CONTROL ) ; g2 . setRenderingHint ( RenderingHints . KEY_STROKE_CONTROL , RenderingHints . VALUE_STROKE_NORMALIZE ) ; g2 . draw ( axisLine ) ; g2 . setRenderingHint ( RenderingHints . KEY_STROKE_CONTROL , saved ) ; boolean drawUpOrRight = _BOOL ; boolean drawDownOrLeft = _BOOL ; if ( this . positiveArrowVisible ) { if ( this . inverted ) { drawDownOrLeft = _BOOL ; } else { drawUpOrRight = _BOOL ; } } if ( this . negativeArrowVisible ) { if ( this . inverted ) { drawUpOrRight = _BOOL ; } else { drawDownOrLeft = _BOOL ; } } if ( drawUpOrRight ) { double x = _NUM ; double y = _NUM ; Shape arrow = null ; if ( edge == RectangleEdge . TOP || edge == RectangleEdge . BOTTOM ) { x = dataArea . getMaxX ( ) ; y = cursor ; arrow = this . rightArrow ; } else if ( edge == RectangleEdge . LEFT || edge == RectangleEdge . RIGHT ) { x = cursor ; y = dataArea . getMinY ( ) ; arrow = this . upArrow ; } AffineTransform transformer = new AffineTransform ( ) ; transformer . setToTranslation ( x , y ) ; Shape shape = transformer . createTransformedShape ( arrow ) ; g2 . fill ( shape ) ; g2 . draw ( shape ) ; } if ( drawDownOrLeft ) { double x = _NUM ; double y = _NUM ; Shape arrow = null ; if ( edge == RectangleEdge . TOP || edge == RectangleEdge . BOTTOM ) { x = dataArea . getMinX ( ) ; y = cursor ; arrow = this . leftArrow ; } else if ( edge == RectangleEdge . LEFT || edge == RectangleEdge . RIGHT ) { x = cursor ; y = dataArea . getMaxY ( ) ; arrow = this . downArrow ; } AffineTransform transformer = new AffineTransform ( ) ; transformer . setToTranslation ( x , y ) ; Shape shape = transformer . createTransformedShape ( arrow ) ; g2 . fill ( shape ) ; g2 . draw ( shape ) ; } }
public static void saveXStream ( File saveTo , Object model , Instances header ) throws Exception { Vector < Object > v = new Vector < Object > ( ) ; v . add ( model ) ; if ( header != null ) { v . add ( header ) ; } v . trimToSize ( ) ; XStream . write ( saveTo . getAbsolutePath ( ) , v ) ; }
private void sortAndCollapse ( ) { Collections . sort ( mSpans ) ; mAddsSinceSort = _NUM ; Iterator iter = mSpans . iterator ( ) ; Span span = null ; if ( iter . hasNext ( ) ) { span = ( Span ) iter . next ( ) ; } while ( iter . hasNext ( ) ) { Span nextSpan = ( Span ) iter . next ( ) ; if ( span . subsume ( nextSpan ) ) { iter . remove ( ) ; } else { span = nextSpan ; } } }
public int splitRandomly ( ArrayModifiableDBIDs ind , int begin , int end , DoubleDataStore tpro , Random rand ) { final int nele = end - begin ; DBIDArrayIter it = ind . iter ( ) ; double rs = tpro . doubleValue ( it . seek ( begin + rand . nextInt ( nele ) ) ) ; int minInd = begin , maxInd = end - _NUM ; while ( minInd < maxInd ) { double currEle = tpro . doubleValue ( it . seek ( minInd ) ) ; if ( currEle > rs ) { while ( minInd < maxInd && tpro . doubleValue ( it . seek ( maxInd ) ) > rs ) { maxInd -- ; } if ( minInd == maxInd ) { break ; } ind . swap ( minInd , maxInd ) ; maxInd -- ; } minInd ++ ; } if ( minInd == end - _NUM ) { minInd = ( begin + end ) > > > _NUM ; } return minInd ; }
public static String noPrefix ( String path , String prefix ) { Objects . requireNonNull ( path , _STR ) ; Objects . requireNonNull ( prefix , _STR ) ; return path . startsWith ( prefix ) ? path . substring ( prefix . length ( ) ) : path ; }
protected void publish ( ) throws MqttException , IOException { sampleClientPub = new SampleAsyncCallback ( url , clientIdPub , cleanSession , quietMode , userName , password ) ; if ( sampleClientPub != null ) { String topic = _STR ; int qos = _NUM ; String message = _STR ; try { sampleClientPub . publish ( topic , qos , message . getBytes ( ) ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; } } }
public void remove ( IAdaptable a ) { children . remove ( a ) ; }
public static IntStream concat ( IntStream a , IntStream b ) { Objects . requireNonNull ( a ) ; Objects . requireNonNull ( b ) ; Spliterator . OfInt split = new Streams . ConcatSpliterator . OfInt ( a . spliterator ( ) , b . spliterator ( ) ) ; IntStream stream = StreamSupport . intStream ( split , a . isParallel ( ) || b . isParallel ( ) ) ; return stream . onClose ( Streams . composedClose ( a , b ) ) ; }
public boolean equals ( String expected , String actual ) { return framework . equals ( expected , actual ) ; }
public LoginConfiguration forceAuth ( String forceAuthReqParam ) { forceAuth = Boolean . parseBoolean ( forceAuthReqParam ) ; return this ; }
public UserConfig fetch ( UserConfig config ) { config . addCredentials ( this ) ; String xml = POST ( this . url + _STR , config . toXML ( ) ) ; Element root = parse ( xml ) ; if ( root == null ) { return null ; } try { UserConfig user = new UserConfig ( ) ; user . parseXML ( root ) ; return user ; } catch ( Exception exception ) { this . exception = SDKException . parseFailure ( exception ) ; throw this . exception ; } }
@ MethodDesc ( description = _STR , usage = _STR ) public void stop ( ) throws Exception { try { handleEventSynchronous ( new StopEvent ( ) ) ; if ( doneLatch != null ) { doneLatch . countDown ( ) ; } } catch ( Exception e ) { logger . error ( _STR , e ) ; throw new Exception ( e . toString ( ) ) ; } }
public void dispose ( ) throws IabAsyncInProgressException { synchronized ( mAsyncInProgressLock ) { if ( mAsyncInProgress ) { throw new IabAsyncInProgressException ( _STR + _STR + mAsyncOperation + _STR ) ; } } logDebug ( _STR ) ; mSetupDone = _BOOL ; if ( mServiceConn != null ) { logDebug ( _STR ) ; if ( mContext != null ) mContext . unbindService ( mServiceConn ) ; } mDisposed = _BOOL ; mContext = null ; mServiceConn = null ; mService = null ; mPurchaseListener = null ; }
@ Override public void pushMessageAsync ( Message msg ) throws org . apache . thrift . TException { pushMessageSync ( msg ) ; return ; }
public boolean writeCharacteristic ( String address , String serviceUUID , String characteristicUUID , byte [ ] value ) { BluetoothGatt bluetoothGatt = mBluetoothGattMap . get ( address ) ; if ( bluetoothGatt != null ) { BluetoothGattService service = bluetoothGatt . getService ( UUID . fromString ( serviceUUID ) ) ; BluetoothGattCharacteristic characteristic = service . getCharacteristic ( UUID . fromString ( characteristicUUID ) ) ; characteristic . setValue ( value ) ; return bluetoothGatt . writeCharacteristic ( characteristic ) ; } return _BOOL ; }
public String linkForMessage ( ProtoElement element ) { if ( isExternalFile ( element . getFile ( ) ) ) { String fullName = element . getFullName ( ) ; return String . format ( _STR , fullName , fullName ) ; } else { String simpleName = element . getSimpleName ( ) ; return String . format ( _STR , simpleName , simpleName ) ; } }
public static < T > ArrayList < T > read ( InputStream fileStream , String charsetName , ITransformer < String , T > transformer ) throws FileNotFoundException { Scanner scanner = new Scanner ( fileStream , charsetName ) ; ArrayList < T > list = new ArrayList < > ( ) ; while ( scanner . hasNextLine ( ) ) { String line = scanner . nextLine ( ) ; list . add ( transformer . transform ( line ) ) ; } scanner . close ( ) ; return list ; }
public boolean remove ( JsonElement element ) { return elements . remove ( element ) ; }
public TSink < byte [ ] > sendBytes ( TStream < byte [ ] > stream ) { Objects . requireNonNull ( stream , _STR ) ; return sendBinary ( stream , null ) ; }
private void sortBrokerItems ( BrokerItem [ ] brokerItems , int sortType ) { Arrays . sort ( brokerItems , BrokerItem . getComparatoryByType ( sortType ) ) ; }
protected boolean needToEscapeXMLSpecialCharacters ( String hostEntityID , String remoteEntityID , String realm ) { return _BOOL ; }
private void updatePathConstraints ( TestChromosome test ) { List < BranchCondition > pathCondition = ConcolicExecution . getSymbolicPath ( test ) ; pathConditions . put ( test , pathCondition ) ; }
public void test_journal_oneIndexNoData ( ) throws IOException , InterruptedException , ExecutionException { final File out = File . createTempFile ( getName ( ) , Options . JNL ) ; try { final Journal src = getStore ( getProperties ( ) ) ; try { final String NAME = _STR ; src . registerIndex ( new IndexMetadata ( NAME , UUID . randomUUID ( ) ) ) ; src . commit ( ) ; final Future < Journal > f = src . compact ( out ) ; final Journal newJournal = f . get ( ) ; try { assertNotNull ( newJournal . getIndex ( NAME ) ) ; AbstractBTreeTestCase . assertSameBTree ( src . getIndex ( NAME ) , newJournal . getIndex ( NAME ) ) ; } finally { newJournal . destroy ( ) ; } } finally { src . destroy ( ) ; } } finally { out . delete ( ) ; } }
public static boolean p2pLoader ( ClassLoader ldr ) { return ldr instanceof GridDeploymentInfo ; }
private static String removeSubTrailers ( String decodedSubject ) { int subStringStart = _NUM ; int subStringEnd = decodedSubject . length ( ) ; int originalSize = decodedSubject . length ( ) ; int curPos = originalSize - _NUM ; while ( _BOOL ) { char c = decodedSubject . charAt ( curPos -- ) ; if ( c == WS ) { subStringEnd -- ; } else { if ( subStringEnd > FWD_PARENS . length ( ) && decodedSubject . endsWith ( FWD_PARENS ) ) { subStringEnd -= FWD_PARENS . length ( ) ; } break ; } } decodedSubject = decodedSubject . substring ( subStringStart , subStringEnd ) ; return decodedSubject ; }
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
boolean nextSource ( ) throws IOException { if ( mSourceIt . hasNext ( ) ) { final InputStream is = mSourceIt . next ( ) ; if ( is == null ) { mSource = null ; return _BOOL ; } else { mSource = new BufferedInputStream ( is , FileUtils . BUFFERED_STREAM_SIZE ) ; } mSourceClosed = _BOOL ; mInputBufferPosition = _NUM ; mInputBufferLength = _NUM ; mBufferLength = _NUM ; mBufferPosition = _NUM ; return _BOOL ; } if ( mSource != null ) { mSource . close ( ) ; } mSource = null ; return _BOOL ; }
public static byte [ ] bitmapToBytes ( Bitmap bm ) { byte [ ] bytes = null ; if ( bm != null ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; bm . compress ( Bitmap . CompressFormat . PNG , _NUM , baos ) ; bytes = baos . toByteArray ( ) ; } return bytes ; }
public static String inflate ( String name ) { return inflate ( name , gPrefix ) ; }
public void addPriorityHandler ( WarningHandler handler ) { _priorityHandlers . add ( handler ) ; }
private synchronized void readObject ( java . io . ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; init ( getMask ( actions ) ) ; }
public void printLenString ( String v ) throws IOException { if ( v == null ) { os . write ( _NUM ) ; os . write ( _NUM ) ; } else { int len = v . length ( ) ; os . write ( len > > _NUM ) ; os . write ( len ) ; printString ( v , _NUM , len ) ; } }
private float clampMag ( float value , float absMin , float absMax ) { final float absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
private void writeAttr ( String name , String val ) throws IOException { writeAttr ( name , val , _BOOL ) ; }
final private String syntaxDef2SyntaxDesc ( Attributes attrs ) throws NamingException { StringBuffer syntaxDesc = new StringBuffer ( _STR ) ; Attribute attr = null ; int count = _NUM ; attr = attrs . get ( NUMERICOID_ID ) ; if ( attr != null ) { syntaxDesc . append ( writeNumericOID ( attr ) ) ; count ++ ; } else { throw new ConfigurationException ( _STR + _STR ) ; } attr = attrs . get ( DESC_ID ) ; if ( attr != null ) { syntaxDesc . append ( writeQDString ( attr ) ) ; count ++ ; } if ( count < attrs . size ( ) ) { String attrId = null ; for ( NamingEnumeration < ? extends Attribute > ae = attrs . getAll ( ) ; ae . hasMoreElements ( ) ; ) { attr = ae . next ( ) ; attrId = attr . getID ( ) ; if ( attrId . equals ( NUMERICOID_ID ) || attrId . equals ( DESC_ID ) ) { continue ; } else { syntaxDesc . append ( writeQDStrings ( attr ) ) ; } } } syntaxDesc . append ( _STR ) ; return syntaxDesc . toString ( ) ; }
@ Override public void write ( Buffer buffer , boolean isEnd ) throws IOException { if ( _s == null ) { buffer . free ( ) ; return ; } try { _needsFlush = _BOOL ; if ( buffer . isDirect ( ) ) { _totalWriteBytes += buffer . length ( ) ; _s . write ( buffer . direct ( ) ) ; return ; } _totalWriteBytes += buffer . length ( ) ; while ( buffer . length ( ) > _NUM ) { _writeBuffer . clear ( ) ; buffer . read ( _writeBuffer ) ; _writeBuffer . flip ( ) ; _s . write ( _writeBuffer ) ; } } catch ( IOException e ) { IOException exn = ClientDisconnectException . create ( this + _STR + e , e ) ; try { close ( ) ; } catch ( IOException e1 ) { } throw exn ; } finally { buffer . free ( ) ; } }
private static void skipMemberValue ( int tag , ByteBuffer buf ) { switch ( tag ) { case _STR : buf . getInt ( ) ; break ; case _STR : skipAnnotation ( buf , _BOOL ) ; break ; case _STR : skipArray ( buf ) ; break ; default : buf . getShort ( ) ; } }
protected void recursiveNestedJoin ( EventBean lookupEvent , int nestingOrderIndex , EventBean [ ] currentPath , Collection < EventBean [ ] > result , ExprEvaluatorContext exprEvaluatorContext ) { List < EventBean [ ] > nestedResult = new LinkedList < EventBean [ ] > ( ) ; ExecNode nestedExecNode = childNodes . get ( nestingOrderIndex ) ; nestedExecNode . process ( lookupEvent , currentPath , nestedResult , exprEvaluatorContext ) ; boolean isLastStream = ( nestingOrderIndex == nestingOrderLength - _NUM ) ; if ( ! isLastStream ) { for ( EventBean [ ] row : nestedResult ) { EventBean lookup = row [ nestedStreams [ nestingOrderIndex ] ] ; recursiveNestedJoin ( lookup , nestingOrderIndex + _NUM , row , result , exprEvaluatorContext ) ; } return ; } for ( EventBean [ ] row : nestedResult ) { result . add ( row ) ; } }
public String generateMinimalMATSimConfig ( ) { Config config = new Config ( ) ; ConfigGroup ippcm = config . createModule ( MatrixBasedPtRouterConfigGroup . GROUP_NAME ) ; ippcm . addParam ( MatrixBasedPtRouterConfigGroup . PT_STOPS , this . ptStops ) ; ippcm . addParam ( MatrixBasedPtRouterConfigGroup . USING_PT_STOPS , _STR ) ; ippcm . addParam ( MatrixBasedPtRouterConfigGroup . PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH , this . useTravelTimesAndDistances ) ; ChangeModeConfigGroup changeModeConfig = ConfigUtils . addOrGetModule ( config , ChangeModeConfigGroup . CONFIG_MODULE , ChangeModeConfigGroup . class ) ; String [ ] str = { _STR , _STR } ; changeModeConfig . setModes ( str ) ; return writeConfigFile ( config ) ; }
public RecordedRequest takeRequest ( ) throws InterruptedException { return requestQueue . take ( ) ; }
private int convertLocationToColumn ( int x , int y ) { if ( cellWidth > _NUM ) { if ( layoutOrientation == JList . VERTICAL ) { return _NUM ; } Insets insets = list . getInsets ( ) ; int col ; if ( isLeftToRight ) { col = ( x - insets . left ) / cellWidth ; } else { col = ( list . getWidth ( ) - x - insets . right - _NUM ) / cellWidth ; } if ( col < _NUM ) { return _NUM ; } else if ( col >= columnCount ) { return columnCount - _NUM ; } return col ; } return _NUM ; }
public static List < File > findFilesInDir ( File directory , FilenameFilter filter ) { Vector < File > files = new Vector < File > ( ) ; File [ ] entries = directory . listFiles ( ) ; for ( File entry : entries ) { if ( filter == null || filter . accept ( directory , entry . getName ( ) ) ) { files . add ( entry ) ; } if ( entry . isDirectory ( ) ) { files . addAll ( findFilesInDir ( entry , filter ) ) ; } } return files ; }
public String generateDrop ( String table ) { StringBuffer result = new StringBuffer ( ) ; result . append ( _STR ) ; result . append ( table ) ; result . append ( _STR ) ; return result . toString ( ) ; }
private void registerChildListeners ( ) { Iterator < PropertyChangeListener > iter = fChildListeners . iterator ( ) ; while ( iter . hasNext ( ) ) { PropertyChangeListener listener = iter . next ( ) ; listener . register ( ) ; } }
boolean isScrollOutOfBounds ( ) { return Float . compare ( getScrollAmountOutOfBounds ( mStackScrollP ) , _NUM ) != _NUM ; }
private void refreshIndexForDimensionFields ( String rowId , DimensionRow dimensionRow , DimensionRow dimensionRowOld ) { try { for ( DimensionField field : dimension . getDimensionFields ( ) ) { if ( field == dimension . getKey ( ) ) { continue ; } if ( dimensionRowOld != null ) { String oldRowValue = dimensionRowOld . get ( field ) ; String oldRowValueKey = DimensionStoreKeyUtils . getRowKey ( field . getName ( ) , oldRowValue ) ; String oldRowValuesKeysJson = keyValueStore . get ( oldRowValueKey ) ; String [ ] oldRowValueSKeys = objectMapper . readValue ( oldRowValuesKeysJson , String [ ] . class ) ; Set < String > oldRowValuesKeySet = new LinkedHashSet < > ( Arrays . asList ( oldRowValueSKeys ) ) ; oldRowValuesKeySet . remove ( rowId ) ; if ( oldRowValuesKeySet . isEmpty ( ) ) { keyValueStore . remove ( oldRowValueKey ) ; } else { String updatedOldRowValueSKeys = objectMapper . writeValueAsString ( oldRowValuesKeySet ) ; keyValueStore . put ( oldRowValueKey , updatedOldRowValueSKeys ) ; } } String rowValue = dimensionRow . get ( field ) ; String rowValueKey = DimensionStoreKeyUtils . getRowKey ( field . getName ( ) , rowValue ) ; String rowValueSKeys = keyValueStore . get ( rowValueKey ) ; Set < String > rowValueSKeySet = new LinkedHashSet < > ( ) ; if ( rowValueSKeys != null ) { rowValueSKeySet . addAll ( Arrays . asList ( objectMapper . readValue ( rowValueSKeys , String [ ] . class ) ) ) ; } rowValueSKeySet . add ( rowId ) ; String updatedRowValueSKeys = objectMapper . writeValueAsString ( rowValueSKeySet ) ; keyValueStore . put ( rowValueKey , updatedRowValueSKeys ) ; } } catch ( IOException e ) { LOG . error ( _STR , e ) ; throw new RuntimeException ( e ) ; } }
public List < Instruction > reduceInstructions ( final List < Instruction > instructions ) { lock . lock ( ) ; try { this . instructions = instructions ; stackSizeSimulator . buildStackSizes ( instructions ) ; return reduceInstructionsInternal ( instructions ) ; } finally { lock . unlock ( ) ; } }
protected boolean isLockedLocally ( UUID newOwnerID ) { return thisNode . equals ( getOwnerNode ( ) ) || thisNode . equals ( newOwnerID ) ; }
private boolean tryToMove ( float deltaY ) { if ( ( deltaY > _NUM && mCurrentPos == _NUM ) ) { if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR ) ) ; } return _BOOL ; } if ( ( deltaY < _NUM && mCurrentPos == - mHeaderHeight ) ) { if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR ) ) ; } return _BOOL ; } int to = mCurrentPos + ( int ) deltaY ; if ( to < - mHeaderHeight ) { if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR ) ) ; } to = - mHeaderHeight ; } if ( to > _NUM ) { if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR ) ) ; } to = _NUM ; } return moveTo ( to ) ; }
public void testCompareNegNeg2 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; assertEquals ( _NUM , aNumber . compareTo ( bNumber ) ) ; }
public void deletePoint ( int position ) { int renderType = poly . getRenderType ( ) ; Projection proj = getProjection ( ) ; boolean needToHookUp = _BOOL ; if ( position <= _NUM && isEnclosed ( ) ) { enclose ( _BOOL ) ; needToHookUp = _BOOL ; } if ( renderType == OMGraphic . RENDERTYPE_LATLON ) { Debug . message ( _STR , _STR ) ; if ( proj != null ) { double [ ] ll = poly . getLatLonArray ( ) ; double [ ] newll = new double [ ll . length - _NUM ] ; int actualPosition = ( position == Integer . MAX_VALUE ? ll . length : position * _NUM ) ; if ( actualPosition >= ll . length ) { System . arraycopy ( ll , _NUM , newll , _NUM , ll . length - _NUM ) ; position = ( ll . length - _NUM ) / _NUM ; } else if ( actualPosition <= _NUM ) { System . arraycopy ( ll , _NUM , newll , _NUM , ll . length - _NUM ) ; position = _NUM ; } else { System . arraycopy ( ll , _NUM , newll , _NUM , actualPosition ) ; System . arraycopy ( ll , actualPosition + _NUM , newll , actualPosition , ll . length - actualPosition - _NUM ) ; } poly . setLocation ( newll , poly . getUnits ( ) ) ; } } else { Debug . message ( _STR , _STR ) ; int currentLength = poly . xs . length ; int [ ] newxs = new int [ currentLength - _NUM ] ; int [ ] newys = new int [ currentLength - _NUM ] ; if ( position >= currentLength ) { System . arraycopy ( poly . xs , _NUM , newxs , _NUM , currentLength - _NUM ) ; System . arraycopy ( poly . ys , _NUM , newys , _NUM , currentLength - _NUM ) ; position = currentLength - _NUM ; } else if ( position <= _NUM ) { System . arraycopy ( poly . xs , _NUM , newxs , _NUM , currentLength - _NUM ) ; System . arraycopy ( poly . ys , _NUM , newys , _NUM , currentLength - _NUM ) ; position = _NUM ; } else { System . arraycopy ( poly . xs , _NUM , newxs , _NUM , position ) ; System . arraycopy ( poly . xs , position + _NUM , newxs , position , currentLength - position - _NUM ) ; System . arraycopy ( poly . ys , _NUM , newys , _NUM , position ) ; System . arraycopy ( poly . ys , position + _NUM , newys , position , currentLength - position - _NUM ) ; } if ( poly . getRenderType ( ) == OMGraphic . RENDERTYPE_OFFSET ) { poly . setLocation ( poly . lat , poly . lon , poly . getUnits ( ) , newxs , newys ) ; } else { poly . setLocation ( newxs , newys ) ; } } if ( proj != null ) { poly . regenerate ( proj ) ; } GrabPoint gp = ( GrabPoint ) polyGrabPoints . remove ( position ) ; if ( gpo != null && gp != null ) { gpo . removeGrabPoint ( gp ) ; } if ( needToHookUp ) { enclose ( _BOOL ) ; } }
@ Override public boolean deleteLeftWord ( ) { mInputConnection . beginBatchEdit ( ) ; if ( mInputConnection . getSelectedText ( _NUM ) != null ) { mInputConnection . commitText ( _STR , _NUM ) ; } else { CharSequence beforeCursor = mInputConnection . getTextBeforeCursor ( MAX_DELETABLE_CONTEXT , _NUM ) ; if ( beforeCursor != null ) { int beforeCursorLength = beforeCursor . length ( ) ; Matcher m = WHITESPACE_AND_TOKEN . matcher ( beforeCursor ) ; int lastIndex = _NUM ; while ( m . find ( ) ) { lastIndex = beforeCursorLength == m . end ( ) ? m . start ( ) : m . end ( ) ; } if ( lastIndex > _NUM ) { mInputConnection . deleteSurroundingText ( beforeCursorLength - lastIndex , _NUM ) ; } else if ( beforeCursorLength < MAX_DELETABLE_CONTEXT ) { mInputConnection . deleteSurroundingText ( beforeCursorLength , _NUM ) ; } } } mInputConnection . endBatchEdit ( ) ; return _BOOL ; }
public static double cdf ( double val , double rate ) { if ( val < _NUM ) { return _NUM ; } return _NUM - Math . exp ( - rate * val ) ; }
public static DataSet readContinuous ( File file , char delimiter ) throws IOException { return readInContinuousData ( file , delimiter , Collections . singleton ( _STR ) ) ; }
public static String generateNativeGuidForStoragePortFromIndication ( String sourceInstanceSystemName , String portNetworkId ) { String [ ] splitedString = sourceInstanceSystemName . split ( Constants . PATH_DELIMITER_REGEX ) ; return String . format ( _STR , splitedString [ _NUM ] , splitedString [ _NUM ] , portNetworkId ) ; }
protected boolean arePathsContiguous ( TreePath [ ] paths ) { if ( rowMapper == null || paths . length < _NUM ) return _BOOL ; else { BitSet bitSet = new BitSet ( _NUM ) ; int anIndex , counter , min ; int pathCount = paths . length ; int validCount = _NUM ; TreePath [ ] tempPath = new TreePath [ _NUM ] ; tempPath [ _NUM ] = paths [ _NUM ] ; min = rowMapper . getRowsForPaths ( tempPath ) [ _NUM ] ; for ( counter = _NUM ; counter < pathCount ; counter ++ ) { if ( paths [ counter ] != null ) { tempPath [ _NUM ] = paths [ counter ] ; int [ ] rows = rowMapper . getRowsForPaths ( tempPath ) ; if ( rows == null ) { return _BOOL ; } anIndex = rows [ _NUM ] ; if ( anIndex == - _NUM || anIndex < ( min - pathCount ) || anIndex > ( min + pathCount ) ) return _BOOL ; if ( anIndex < min ) min = anIndex ; if ( ! bitSet . get ( anIndex ) ) { bitSet . set ( anIndex ) ; validCount ++ ; } } } int maxCounter = validCount + min ; for ( counter = min ; counter < maxCounter ; counter ++ ) if ( ! bitSet . get ( counter ) ) return _BOOL ; } return _BOOL ; }
public FastStringReader ( String s ) { this . str = s ; this . length = s . length ( ) ; }
private static int arrayIndex ( int i ) { return ( i > > SHIFT_PER_WORD ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
static void updateStyle ( JTextComponent c , SeaGlassContext context , String prefix ) { SeaGlassStyle style = ( SeaGlassStyle ) context . getStyle ( ) ; Color color = c . getCaretColor ( ) ; if ( color == null || color instanceof UIResource ) { c . setCaretColor ( ( Color ) style . get ( context , prefix + _STR ) ) ; } Color fg = c . getForeground ( ) ; if ( fg == null || fg instanceof UIResource ) { fg = style . getColorForState ( context , ColorType . TEXT_FOREGROUND ) ; if ( fg != null ) { c . setForeground ( fg ) ; } } Object ar = style . get ( context , prefix + _STR ) ; if ( ar instanceof Number ) { c . putClientProperty ( _STR , ar ) ; } context . setComponentState ( SELECTED | FOCUSED ) ; Color s = c . getSelectionColor ( ) ; if ( s == null || s instanceof UIResource ) { c . setSelectionColor ( style . getColor ( context , ColorType . TEXT_BACKGROUND ) ) ; } Color sfg = c . getSelectedTextColor ( ) ; if ( sfg == null || sfg instanceof UIResource ) { c . setSelectedTextColor ( style . getColor ( context , ColorType . TEXT_FOREGROUND ) ) ; } context . setComponentState ( DISABLED ) ; Color dfg = c . getDisabledTextColor ( ) ; if ( dfg == null || dfg instanceof UIResource ) { c . setDisabledTextColor ( style . getColor ( context , ColorType . TEXT_FOREGROUND ) ) ; } Insets margin = c . getMargin ( ) ; if ( margin == null || margin instanceof UIResource ) { margin = ( Insets ) style . get ( context , prefix + _STR ) ; if ( margin == null ) { margin = SeaGlassLookAndFeel . EMPTY_UIRESOURCE_INSETS ; } c . setMargin ( margin ) ; } Caret caret = c . getCaret ( ) ; if ( caret instanceof UIResource ) { Object o = style . get ( context , prefix + _STR ) ; if ( o != null && o instanceof Integer ) { Integer rate = ( Integer ) o ; caret . setBlinkRate ( rate . intValue ( ) ) ; } } }
@ SuppressLint ( _STR ) @ Override protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { int widthMode = MeasureSpec . getMode ( widthMeasureSpec ) ; int heightMode = MeasureSpec . getMode ( heightMeasureSpec ) ; int maxWidth = MeasureSpec . getSize ( widthMeasureSpec ) ; int maxHeight = MeasureSpec . getSize ( heightMeasureSpec ) ; if ( widthMode == MeasureSpec . UNSPECIFIED ) maxWidth = Integer . MAX_VALUE ; if ( heightMode == MeasureSpec . UNSPECIFIED ) maxHeight = Integer . MAX_VALUE ; int paddingLeft = getPaddingLeft ( ) ; int paddingTop = getPaddingTop ( ) ; int paddingRight = getPaddingRight ( ) ; int paddingBottom = getPaddingBottom ( ) ; int maxRightBound = maxWidth - paddingRight ; int maxBottomBound = maxHeight - paddingBottom ; int left ; int top ; int right ; int bottom ; int rightBound = paddingLeft ; int maxRightNoPadding = rightBound ; int bottomBound ; int lastMaxBottom = paddingTop ; int maxBottom = lastMaxBottom ; int childWidth ; int childHeight ; int lineStartIndex = _NUM ; int lineEndIndex = _NUM ; rectList . clear ( ) ; int childCount = getChildCount ( ) ; for ( int index = _NUM ; index < childCount ; index ++ ) { final View child = getChildAt ( index ) ; child . measure ( MeasureSpec . UNSPECIFIED , MeasureSpec . UNSPECIFIED ) ; if ( child . getVisibility ( ) == View . GONE ) continue ; final AutoWrapLayout . LayoutParams lp = ( AutoWrapLayout . LayoutParams ) child . getLayoutParams ( ) ; childWidth = child . getMeasuredWidth ( ) ; childHeight = child . getMeasuredHeight ( ) ; left = rightBound + lp . leftMargin ; right = left + childWidth ; rightBound = right + lp . rightMargin ; if ( rightBound > maxRightBound ) { lineEndIndex = index ; adjustBaseLine ( maxBottom - lastMaxBottom , lineStartIndex , lineEndIndex ) ; if ( maxBottom >= maxBottomBound ) break ; if ( lineEndIndex == lineStartIndex ) { child . measure ( MeasureSpec . makeMeasureSpec ( maxWidth - paddingLeft - paddingRight - lp . leftMargin - lp . rightMargin , MeasureSpec . AT_MOST ) , MeasureSpec . UNSPECIFIED ) ; childWidth = child . getMeasuredWidth ( ) ; childHeight = child . getMeasuredHeight ( ) ; } left = paddingLeft + lp . leftMargin ; right = left + childWidth ; rightBound = right + lp . rightMargin ; lastMaxBottom = maxBottom ; top = lastMaxBottom + lp . topMargin ; bottom = top + childHeight ; bottomBound = bottom + lp . bottomMargin ; lineStartIndex = index ; } else { top = lastMaxBottom + lp . topMargin ; bottom = top + childHeight ; bottomBound = bottom + lp . bottomMargin ; } if ( rightBound > maxRightNoPadding ) maxRightNoPadding = rightBound ; if ( bottomBound > maxBottom ) maxBottom = bottomBound ; Rect rect = new Rect ( ) ; rect . left = left ; rect . top = top ; rect . right = right ; rect . bottom = bottom ; rectList . add ( rect ) ; } adjustBaseLine ( maxBottom - lastMaxBottom , lineStartIndex , rectList . size ( ) ) ; int measuredWidth ; int measuredHeight ; if ( widthMode == MeasureSpec . EXACTLY ) measuredWidth = maxWidth ; else measuredWidth = maxRightNoPadding + paddingRight ; if ( heightMode == MeasureSpec . EXACTLY ) measuredHeight = maxHeight ; else { measuredHeight = maxBottom + paddingBottom ; if ( heightMode == MeasureSpec . AT_MOST ) measuredHeight = measuredHeight > maxHeight ? maxHeight : measuredHeight ; } setMeasuredDimension ( measuredWidth , measuredHeight ) ; }
public final void wait ( ) throws java . lang . InterruptedException { wait ( _NUM ) ; }
public QueryStringQueryBuilder field ( String field , float boost ) { if ( fields == null ) { fields = new ArrayList < > ( ) ; } fields . add ( field ) ; if ( fieldsBoosts == null ) { fieldsBoosts = new ObjectFloatHashMap < > ( ) ; } fieldsBoosts . put ( field , boost ) ; return this ; }
public static String nowDateString ( String format ) { SimpleDateFormat df = new SimpleDateFormat ( format ) ; return df . format ( new Date ( ) ) ; }
protected void initStreamBufferSize ( ) { String streamBufferSizeParam = getInitParameter ( _STR ) ; setStreamBufferSize ( ( streamBufferSizeParam == null ) ? DEFAULT_STREAM_BUFFER_SIZE : Integer . parseInt ( streamBufferSizeParam ) ) ; if ( isDebug ( ) ) { log ( _STR + getStreamBufferSize ( ) ) ; } }
public void registerSensor ( Sensor s , int i ) { if ( ( i < _NUM ) || ( i > ( ( numInputCards ( ) * bitsPerCard ) - _NUM ) ) || ( i > MAXSENSORS ) ) { log . error ( _STR + Integer . toString ( i + _NUM ) ) ; return ; } hasActiveSensors = _BOOL ; if ( sensorArray [ i ] == null ) { sensorArray [ i ] = s ; if ( lastUsedSensor < i ) { lastUsedSensor = i ; } } else { log . warn ( _STR + Integer . toString ( ( getNodeAddress ( ) * SerialSensorManager . SENSORSPERUA ) + i + _NUM ) ) ; } }
public static Number asNumber ( String value , Supplier < Number > defaultValueProvider ) { if ( value != null ) { try { return Short . valueOf ( value ) ; } catch ( NumberFormatException e1 ) { try { return Integer . valueOf ( value ) ; } catch ( NumberFormatException e2 ) { try { return Long . valueOf ( value ) ; } catch ( NumberFormatException e3 ) { try { return Float . valueOf ( value ) ; } catch ( NumberFormatException e4 ) { try { return Double . valueOf ( value ) ; } catch ( NumberFormatException e5 ) { try { return new BigInteger ( value ) ; } catch ( NumberFormatException e6 ) { try { return new BigDecimal ( value ) ; } catch ( NumberFormatException e7 ) { } } } } } } } } return defaultValueProvider != null ? defaultValueProvider . get ( ) : null ; }
public final void sample ( ) { long sum = _sum . getAndSet ( _NUM ) ; int count = _count . getAndSet ( _NUM ) ; if ( count != _NUM ) _value = sum / ( double ) count ; else _value = _NUM ; }
private String applyReplacement ( final BidiMap replacement , String contents ) { for ( Object key : replacement . keySet ( ) ) { String attributeName = ( String ) key ; String attributeInitials = ( String ) replacement . get ( key ) ; contents = contents . replaceAll ( JSONSerialisation . jsonAttributeName ( attributeName ) , JSONSerialisation . jsonAttributeName ( attributeInitials ) ) ; } return contents ; }
public KeyImpl ( KerberosPrincipal principal , char [ ] password , String algorithm ) { try { PrincipalName princ = new PrincipalName ( principal . getName ( ) ) ; EncryptionKey key = new EncryptionKey ( password , princ . getSalt ( ) , algorithm ) ; this . keyBytes = key . getBytes ( ) ; this . keyType = key . getEType ( ) ; } catch ( KrbException e ) { throw new IllegalArgumentException ( e . getMessage ( ) ) ; } }
public static AnnotationBinding [ ] addStandardAnnotations ( AnnotationBinding [ ] recordedAnnotations , long annotationTagBits , LookupEnvironment env ) { int count = _NUM ; if ( ( annotationTagBits & TagBits . AnnotationTargetMASK ) != _NUM ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationRetentionMASK ) != _NUM ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationDeprecated ) != _NUM ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationDocumented ) != _NUM ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationInherited ) != _NUM ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationOverride ) != _NUM ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationSuppressWarnings ) != _NUM ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationPolymorphicSignature ) != _NUM ) count ++ ; if ( ( annotationTagBits & TagBits . AnnotationSafeVarargs ) != _NUM ) count ++ ; if ( count == _NUM ) return recordedAnnotations ; int index = recordedAnnotations . length ; AnnotationBinding [ ] result = new AnnotationBinding [ index + count ] ; System . arraycopy ( recordedAnnotations , _NUM , result , _NUM , index ) ; if ( ( annotationTagBits & TagBits . AnnotationTargetMASK ) != _NUM ) result [ index ++ ] = buildTargetAnnotation ( annotationTagBits , env ) ; if ( ( annotationTagBits & TagBits . AnnotationRetentionMASK ) != _NUM ) result [ index ++ ] = buildRetentionAnnotation ( annotationTagBits , env ) ; if ( ( annotationTagBits & TagBits . AnnotationDeprecated ) != _NUM ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_DEPRECATED , env ) ; if ( ( annotationTagBits & TagBits . AnnotationDocumented ) != _NUM ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_ANNOTATION_DOCUMENTED , env ) ; if ( ( annotationTagBits & TagBits . AnnotationInherited ) != _NUM ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_ANNOTATION_INHERITED , env ) ; if ( ( annotationTagBits & TagBits . AnnotationOverride ) != _NUM ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_OVERRIDE , env ) ; if ( ( annotationTagBits & TagBits . AnnotationSuppressWarnings ) != _NUM ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_SUPPRESSWARNINGS , env ) ; if ( ( annotationTagBits & TagBits . AnnotationPolymorphicSignature ) != _NUM ) result [ index ++ ] = buildMarkerAnnotationForMemberType ( TypeConstants . JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE , env ) ; if ( ( annotationTagBits & TagBits . AnnotationSafeVarargs ) != _NUM ) result [ index ++ ] = buildMarkerAnnotation ( TypeConstants . JAVA_LANG_SAFEVARARGS , env ) ; return result ; }
@ Override public String toString ( ) { String result = _STR ; result += getCompatibilityState ( ) ; if ( m_Instances == null ) { result += _STR ; } else { result += _STR + Utils . backQuoteChars ( m_Instances . relationName ( ) ) ; } return result ; }
public static void process ( List < Packages > pkgList ) throws Exception { init ( ) ; String [ ] temps = templates . split ( _STR ) ; String [ ] vmFiles = new String [ temps . length ] ; for ( int i = _NUM ; i < temps . length ; i ++ ) { vmFiles [ i ] = temps [ i ] + _STR ; } for ( Packages pkg : pkgList ) { for ( String vmFile : vmFiles ) { generator ( vmFile , pkg ) ; } } }
public boolean check ( final Direction dir , final boolean facing ) { if ( this . dir != dir ) { return _BOOL ; } if ( this . facing != facing ) { return _BOOL ; } final long now = System . currentTimeMillis ( ) ; if ( now >= expiration ) { return _BOOL ; } expiration = now + DELAY ; return _BOOL ; }
private void parse ( String path ) throws Exception { if ( path != null ) { count = path . length ( ) ; data = new char [ count ] ; path . getChars ( _NUM , count , data , _NUM ) ; } path ( ) ; }
public void recordVariable ( String typeDesc , String varName , int varNo , SymbolTable tbl ) throws CompileError { char c ; int dim = _NUM ; while ( ( c = typeDesc . charAt ( dim ) ) == _STR ) ++ dim ; int type = MemberResolver . descToType ( c ) ; String cname = null ; if ( type == CLASS ) { if ( dim == _NUM ) cname = typeDesc . substring ( _NUM , typeDesc . length ( ) - _NUM ) ; else cname = typeDesc . substring ( dim + _NUM , typeDesc . length ( ) - _NUM ) ; } Declarator decl = new Declarator ( type , cname , dim , varNo , new Symbol ( varName ) ) ; tbl . append ( varName , decl ) ; }
protected synchronized void readDontVerify ( ) throws IOException , FileEncryptionException { if ( backingRandomAccessFile . length ( ) < headerSize ( ) ) { throw new FileEncryptionException ( _STR ) ; } long oldpos = backingRandomAccessFile . getFilePointer ( ) ; backingRandomAccessFile . seek ( _NUM ) ; byte [ ] header_data = new byte [ headerSize ( ) - FileHeader . AUTH_TAG_SIZE ] ; backingRandomAccessFile . read ( header_data ) ; backingRandomAccessFile . seek ( oldpos ) ; DataInputStream istream = new DataInputStream ( new ByteArrayInputStream ( header_data ) ) ; byte [ ] tmpmagic = new byte [ PANBOX_FILE_MAGIC . length ] ; istream . read ( tmpmagic ) ; if ( ! Arrays . equals ( tmpmagic , PANBOX_FILE_MAGIC ) ) { throw new FileEncryptionException ( _STR ) ; } byte [ ] tmpversion = new byte [ PANBOX_FILE_VERSION . length ] ; istream . read ( tmpversion ) ; if ( ! Arrays . equals ( tmpversion , PANBOX_FILE_VERSION ) ) { throw new FileEncryptionException ( _STR + PANBOX_FILE_VERSION . toString ( ) ) ; } this . shareKeyVersion = istream . readInt ( ) ; istream . close ( ) ; }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
private boolean isMediaTypeSupported ( String media ) { for ( int i = _NUM ; i < SUPPORTED_MEDIA_TYPES . length ; i ++ ) { if ( media . equalsIgnoreCase ( SUPPORTED_MEDIA_TYPES [ i ] ) ) { return _BOOL ; } } return _BOOL ; }
private void export_dependencies ( JCas jcas ) { dependencies = new LinkedHashMap < Token , List < Dependency > > ( ) ; List < Token > nonGoverned = new ArrayList < Token > ( nodes . keySet ( ) ) ; for ( Dependency dependency : select ( jcas , Dependency . class ) ) { Token governor = dependency . getGovernor ( ) ; Token dependent = dependency . getDependent ( ) ; List < Dependency > l = dependencies . get ( governor ) ; if ( l == null ) { dependencies . put ( governor , new ArrayList < Dependency > ( ) ) ; l = dependencies . get ( governor ) ; } l . add ( dependency ) ; nonGoverned . remove ( dependent ) ; } for ( Token t : nonGoverned ) { traverseDependents ( t , _STR , - _NUM ) ; writeToFile ( _STR , componentId , _STR , _STR , _STR ) ; componentId ++ ; } }
public static char [ ] fix83600 ( char [ ] signature ) { if ( signature == null || signature . length < _NUM ) return signature ; return Signature . removeCapture ( signature ) ; }
public static boolean isNetworkAvailable ( Context context ) { ConnectivityManager connectivityManager = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo info = connectivityManager . getActiveNetworkInfo ( ) ; return info != null && info . isConnected ( ) ; }
public static String randomRegexpishString ( Random r ) { return randomRegexpishString ( r , _NUM ) ; }
public List < ExpectedPartitionValueEntity > createExpectedPartitionValueEntities ( String partitionKeyGroupName , List < String > expectedPartitionValues ) { PartitionKeyGroupEntity partitionKeyGroupEntity = partitionKeyGroupDao . getPartitionKeyGroupByName ( partitionKeyGroupName ) ; if ( partitionKeyGroupEntity == null ) { partitionKeyGroupEntity = partitionKeyGroupDaoTestHelper . createPartitionKeyGroupEntity ( partitionKeyGroupName ) ; } List < ExpectedPartitionValueEntity > expectedPartitionValueEntities = new ArrayList < > ( ) ; for ( String expectedPartitionValue : expectedPartitionValues ) { ExpectedPartitionValueEntity expectedPartitionValueEntity = new ExpectedPartitionValueEntity ( ) ; expectedPartitionValueEntity . setPartitionKeyGroup ( partitionKeyGroupEntity ) ; expectedPartitionValueEntity . setPartitionValue ( expectedPartitionValue ) ; expectedPartitionValueEntities . add ( expectedPartitionValueDao . saveAndRefresh ( expectedPartitionValueEntity ) ) ; } return expectedPartitionValueEntities ; }
public String toString ( ) { return text ( ) ; }
public static LowMemoryWatcher register ( @ NotNull Runnable runnable ) { return new LowMemoryWatcher ( runnable ) ; }
public void writeData ( DataOutput dout ) throws IOException { dout . write ( getMessage ( ) ) ; }
public Object extractHardRef ( Object o ) { SoftReference w = ( SoftReference ) o ; if ( w != null ) { return w . get ( ) ; } return null ; }
public static String formatLong ( long number ) { return intFormat . format ( number ) ; }
public static void uncontribute ( ComponentAddon component ) { contributedComponents . remove ( component ) ; if ( currentAddon != null ) { component . uninitialize ( currentAddon ) ; } }
public synchronized int copyDirect ( int pageId , OutputStream out ) throws IOException { byte [ ] buffer = new byte [ pageSize ] ; if ( pageId >= pageCount ) { return - _NUM ; } file . seek ( ( long ) pageId << pageSizeShift ) ; file . readFullyDirect ( buffer , _NUM , pageSize ) ; readCount ++ ; out . write ( buffer , _NUM , pageSize ) ; return pageId + _NUM ; }
public void writeRawBytes ( final byte [ ] value , int offset , int length ) throws IOException { if ( limit - position >= length ) { System . arraycopy ( value , offset , buffer , position , length ) ; position += length ; } else { throw new OutOfSpaceException ( position , limit ) ; } }
private void assertBackupStatus ( final BackupStatus backupStatus ) { Map < DistributedMember , Set < PersistentID > > backupMap = backupStatus . getBackedUpDiskStores ( ) ; assertFalse ( backupMap . isEmpty ( ) ) ; for ( DistributedMember member : backupMap . keySet ( ) ) { for ( PersistentID id : backupMap . get ( member ) ) { assertNotNull ( id . getHost ( ) ) ; assertNotNull ( id . getUUID ( ) ) ; assertNotNull ( id . getDirectory ( ) ) ; } } }
@ RequestMapping ( value = _STR ) public void metadataError ( Locale locale , @ PathVariable ( value = _STR ) String tenant , HttpServletResponse response ) throws IOException { logger . info ( _STR , locale . toString ( ) , tenant ) ; metadataDefaultTenantBindingError ( locale , response ) ; }
public synchronized void checkState ( State ... requiredStates ) throws IllegalStateException { for ( State requiredState : requiredStates ) { if ( requiredState . equals ( currentState ) ) { return ; } } throw new IllegalStateException ( String . format ( Locale . US , _STR , Lists . newArrayList ( requiredStates ) , currentState ) ) ; }
public void sortMovies ( ) { synchronized ( movies ) { Utils . sortList ( movies , MOVIE_SET_COMPARATOR ) ; movieIds . clear ( ) ; for ( Movie movie : movies ) { movieIds . add ( movie . getDbId ( ) ) ; } } firePropertyChange ( _STR , null , movies ) ; }
public KeyValueListParser ( String pairDelimiterRegex , String keyValDelimiterRegex ) { pairDelimiter = Pattern . compile ( pairDelimiterRegex ) ; keyValDelimiter = Pattern . compile ( keyValDelimiterRegex ) ; }
private synchronized boolean pollStatsBroker ( Destination queue ) { statsMessageListener . setDestination ( queue ) ; Timestamp timestamp = new Timestamp ( System . currentTimeMillis ( ) ) ; LOGGER . debug ( _STR + getQueueName ( queue ) + _STR + timestamp ) ; jmsTemplate . execute ( STATS_BROKER_DESTINATION + getQueueName ( queue ) , new ProducerCallbackImpl ( statsQueue ) ) ; try { Thread . sleep ( _NUM * _NUM ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } return statsMessageListener . getStats ( ) != null ; }
public File makeAcceptable ( File pathname ) { if ( accept ( pathname ) ) { return pathname ; } else { return new File ( pathname . getPath ( ) + _STR + defaultExtension ) ; } }
private static int handleDpadVertical ( int iconIndex , int cntX , int cntY , int [ ] [ ] matrix , int increment ) { int newIconIndex = NOOP ; if ( matrix == null ) { throw new IllegalStateException ( _STR ) ; } int xPos = - _NUM ; int yPos = - _NUM ; for ( int i = _NUM ; i < cntX ; i ++ ) { for ( int j = _NUM ; j < cntY ; j ++ ) { if ( matrix [ i ] [ j ] == iconIndex ) { xPos = i ; yPos = j ; } } } if ( DEBUG ) { Log . v ( TAG , String . format ( _STR , xPos , yPos , iconIndex ) ) ; } for ( int y = yPos + increment ; _NUM <= y && y < cntY && _NUM <= y ; y += increment ) { if ( ( newIconIndex = inspectMatrix ( xPos , y , cntX , cntY , matrix ) ) != NOOP && newIconIndex != ALL_APPS_COLUMN ) { return newIconIndex ; } } int nextXPos1 ; int nextXPos2 ; boolean haveCrossedAllAppsColumn1 = _BOOL ; boolean haveCrossedAllAppsColumn2 = _BOOL ; int y = - _NUM ; for ( int coeff = _NUM ; coeff < cntX ; coeff ++ ) { nextXPos1 = xPos + coeff * increment ; nextXPos2 = xPos - coeff * increment ; y = yPos + increment * coeff ; if ( inspectMatrix ( nextXPos1 , y , cntX , cntY , matrix ) == ALL_APPS_COLUMN ) { haveCrossedAllAppsColumn1 = _BOOL ; } if ( inspectMatrix ( nextXPos2 , y , cntX , cntY , matrix ) == ALL_APPS_COLUMN ) { haveCrossedAllAppsColumn2 = _BOOL ; } for ( ; _NUM <= y && y < cntY ; y = y + increment ) { int offset1 = haveCrossedAllAppsColumn1 && y < cntY - _NUM ? increment : _NUM ; newIconIndex = inspectMatrix ( nextXPos1 + offset1 , y , cntX , cntY , matrix ) ; if ( newIconIndex != NOOP ) { return newIconIndex ; } int offset2 = haveCrossedAllAppsColumn2 && y < cntY - _NUM ? - increment : _NUM ; newIconIndex = inspectMatrix ( nextXPos2 + offset2 , y , cntX , cntY , matrix ) ; if ( newIconIndex != NOOP ) { return newIconIndex ; } } } return newIconIndex ; }
private static boolean edgeIntersectsCellBoundary ( S2Point a , S2Point b , S2Cell cell ) { S2Point [ ] vertices = new S2Point [ _NUM ] ; for ( int i = _NUM ; i < _NUM ; ++ i ) { vertices [ i ] = cell . getVertex ( i ) ; } for ( int i = _NUM ; i < _NUM ; ++ i ) { S2Point fromPoint = vertices [ i ] ; S2Point toPoint = vertices [ ( i + _NUM ) % _NUM ] ; if ( lenientCrossing ( a , b , fromPoint , toPoint ) ) { return _BOOL ; } } return _BOOL ; }
private void generateLegalTimesTree ( ) { int k0 = KeyEvent . KEYCODE_0 ; int k1 = KeyEvent . KEYCODE_1 ; int k2 = KeyEvent . KEYCODE_2 ; int k3 = KeyEvent . KEYCODE_3 ; int k4 = KeyEvent . KEYCODE_4 ; int k5 = KeyEvent . KEYCODE_5 ; int k6 = KeyEvent . KEYCODE_6 ; int k7 = KeyEvent . KEYCODE_7 ; int k8 = KeyEvent . KEYCODE_8 ; int k9 = KeyEvent . KEYCODE_9 ; mLegalTimesTree = new Node ( ) ; if ( mIs24HourMode ) { Node minuteFirstDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; Node minuteSecondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; minuteFirstDigit . addChild ( minuteSecondDigit ) ; Node firstDigit = new Node ( k0 , k1 ) ; mLegalTimesTree . addChild ( firstDigit ) ; Node secondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; Node thirdDigit = new Node ( k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; secondDigit = new Node ( k6 , k7 , k8 , k9 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; firstDigit = new Node ( k2 ) ; mLegalTimesTree . addChild ( firstDigit ) ; secondDigit = new Node ( k0 , k1 , k2 , k3 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; secondDigit = new Node ( k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteSecondDigit ) ; firstDigit = new Node ( k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( minuteFirstDigit ) ; } else { Node ampm = new Node ( getAmOrPmKeyCode ( AM ) , getAmOrPmKeyCode ( PM ) ) ; Node firstDigit = new Node ( k1 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( ampm ) ; Node secondDigit = new Node ( k0 , k1 , k2 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( ampm ) ; Node thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; Node fourthDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; thirdDigit . addChild ( fourthDigit ) ; fourthDigit . addChild ( ampm ) ; thirdDigit = new Node ( k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; secondDigit = new Node ( k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; firstDigit = new Node ( k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( ampm ) ; secondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; } }
protected void updateOverlayContents ( LookAt lookAt , Camera camera ) { latView . setText ( formatLatitude ( lookAt . latitude ) ) ; lonView . setText ( formatLongitude ( lookAt . longitude ) ) ; altView . setText ( formatAltitude ( camera . altitude ) ) ; }
public String jsTypeName ( TypeRef typeRef ) { switch ( typeRef . getKind ( ) ) { case TYPE_MESSAGE : return _STR ; case TYPE_ENUM : return _STR ; default : { String name = PRIMITIVE_TYPE_NAMES . get ( typeRef . getKind ( ) ) ; if ( ! Strings . isNullOrEmpty ( name ) ) { return name ; } throw new IllegalArgumentException ( _STR + typeRef . getKind ( ) ) ; } } }
@ Override public synchronized void put ( String key , Entry entry ) { pruneIfNeeded ( entry . data . length ) ; File file = getFileForKey ( key ) ; try { BufferedOutputStream fos = new BufferedOutputStream ( new FileOutputStream ( file ) ) ; CacheHeader e = new CacheHeader ( key , entry ) ; boolean success = e . writeHeader ( fos ) ; if ( ! success ) { fos . close ( ) ; VolleyLog . d ( _STR , file . getAbsolutePath ( ) ) ; throw new IOException ( ) ; } fos . write ( entry . data ) ; fos . close ( ) ; putEntry ( key , e ) ; return ; } catch ( IOException e ) { } boolean deleted = file . delete ( ) ; if ( ! deleted ) { VolleyLog . d ( _STR , file . getAbsolutePath ( ) ) ; } }
public StateMachine createStateMachine ( StateMachineDefinition stateMachineDefinition ) { final Map < EventDefinition , EventData > eventDataMap = stateMachineDefinition . getEventDataMap ( ) ; Set < Event > allEvents = createAllEvents ( eventDataMap ) ; Set < StateDefinition > stateDefinitions = stateMachineDefinition . getStates ( ) ; Set < State > states = new HashSet < > ( ) ; for ( StateDefinition stateDefinition : stateDefinitions ) { State state = convertStateDefinitionToState ( stateDefinition ) ; states . add ( state ) ; } StateMachine stateMachine = new StateMachine ( stateMachineDefinition . getVersion ( ) , stateMachineDefinition . getName ( ) , stateMachineDefinition . getDescription ( ) , states , stateMachineDefinition . getCorrelationId ( ) ) ; stateMachinesDAO . create ( stateMachine ) ; for ( Event event : allEvents ) { event . setStateMachineInstanceId ( stateMachine . getId ( ) ) ; eventPersistenceService . persistEvent ( event ) ; } for ( State state : stateMachine . getStates ( ) ) { auditDAO . create ( new AuditRecord ( stateMachine . getId ( ) , state . getId ( ) , _NUM , Status . initialized , null , null ) ) ; } return stateMachine ; }
protected void sqrtLayout ( VisualTable labels ) { Rectangle2D b = getLayoutBounds ( ) ; double breadth = getBreadth ( b ) ; double span = m_hi - m_lo ; double splo = MathLib . safeSqrt ( m_prevlo ) ; double spspan = MathLib . safeSqrt ( m_prevhi ) - splo ; double vlo = Math . pow ( _NUM , Math . floor ( MathLib . safeLog10 ( m_lo ) ) ) ; double slo = MathLib . safeSqrt ( m_lo ) ; double sspan = MathLib . safeSqrt ( m_hi ) - slo ; Iterator iter = labels . tuples ( ) ; while ( iter . hasNext ( ) ) { VisualItem item = ( VisualItem ) iter . next ( ) ; reset ( item ) ; double v = item . getDouble ( VALUE ) ; double x = span == _NUM ? _NUM : ( ( MathLib . safeSqrt ( v ) - slo ) / sspan ) * breadth ; set ( item , x , b ) ; } Index index = labels . index ( VALUE ) ; double step = getLinearStep ( span , breadth / span ) ; if ( step == _NUM ) step = _NUM ; int r ; for ( double x , v = vlo ; v <= m_hi ; v += step ) { x = ( ( MathLib . safeSqrt ( v ) - slo ) / sspan ) * breadth ; if ( x < - _NUM ) { continue ; } else if ( ( r = index . get ( v ) ) >= _NUM ) { VisualItem item = labels . getItem ( r ) ; item . setVisible ( _BOOL ) ; item . setEndVisible ( _BOOL ) ; } else { VisualItem item = labels . addItem ( ) ; item . set ( LABEL , m_nf . format ( v ) ) ; item . setDouble ( VALUE , v ) ; double f = spspan == _NUM ? _NUM : ( ( MathLib . safeSqrt ( v ) - splo ) / spspan ) ; if ( f <= _NUM || f >= _NUM ) { item . setStartVisible ( _BOOL ) ; } set ( item , f * breadth , b ) ; set ( item , x , b ) ; } } }
public void dispose ( ) { clearListeners ( ) ; if ( attributes != null ) { attributes . clear ( ) ; } removed ( null ) ; }
private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject ( ) ; registrarID = new ServiceID ( in ) ; if ( server == null ) { throw new InvalidObjectException ( _STR ) ; } }
public Shape triangle_right ( float x , float y , float height ) { m_path . reset ( ) ; m_path . moveTo ( x , y + height ) ; m_path . lineTo ( x + height , y + height / _NUM ) ; m_path . lineTo ( x , y ) ; m_path . closePath ( ) ; return m_path ; }
public static terminal find ( String with_name ) { if ( with_name == null ) return null ; else return ( terminal ) _all . get ( with_name ) ; }
public LayoutBlock createNewLayoutBlock ( String systemName , String userName ) { LayoutBlock block = null ; if ( userName == null || userName . equals ( _STR ) ) { log . error ( _STR ) ; return null ; } block = getByUserName ( userName ) ; if ( block != null ) { return null ; } String sName = _STR ; if ( systemName == null ) { boolean found = _BOOL ; while ( found ) { sName = _STR + blkNum ; blkNum ++ ; block = getBySystemName ( sName ) ; if ( block == null ) { found = _BOOL ; } } } else { block = getBySystemName ( ( systemName . toUpperCase ( ) ) ) ; if ( block != null ) { return null ; } sName = systemName . toUpperCase ( ) ; } block = new LayoutBlock ( sName , userName ) ; register ( block ) ; return block ; }
@ Override public void modifyNonstaticJPedalParameters ( final Map values ) throws PdfException { options . set ( values ) ; if ( values . containsKey ( JPedalSettings . DISPLAY_BACKGROUND ) ) { } }
public static String escapeRegex ( final String regex ) { Matcher match = REGEX_CHARS . matcher ( regex ) ; return match . replaceAll ( _STR ) ; }
public CharBuffer ( String string ) { int length = string . length ( ) ; int capacity = length + MIN_CAPACITY ; init ( new char [ capacity ] , _NUM , length ) ; string . getChars ( _NUM , length , buffer ( ) , _NUM ) ; }
private void updatePromoVisibility ( float percentage ) { if ( isPromoAvailable ( ) ) { mPromoVisible = _BOOL ; mPromoHeightPx = Math . round ( MathUtils . clamp ( percentage * mPromoContentHeightPx , _NUM , mPromoContentHeightPx ) ) ; mPromoOpacity = percentage ; } else { mPromoVisible = _BOOL ; mPromoHeightPx = _NUM ; mPromoOpacity = _NUM ; } }
private ValueGeometry ( byte [ ] bytes , Geometry geometry ) { this . bytes = bytes ; this . geometry = geometry ; this . hashCode = Arrays . hashCode ( bytes ) ; }
@ Override public void do_after_propagation ( ) { for ( HeapInsIntervalManager im : new_pts . values ( ) ) { im . flush ( ) ; } new_pts = new HashMap < AllocNode , HeapInsIntervalManager > ( ) ; }
static boolean isExist ( String libName , int version ) { String file = _targetSoFile ( libName , version ) ; File a = new File ( file ) ; return a . exists ( ) ; }
private void finishCommon ( ) { if ( ! unknownSubjects . isEmpty ( ) ) { if ( statements . isEmpty ( ) && restoredStatements . isEmpty ( ) ) { throw new BadSubjectException ( unknownSubjects . keySet ( ) , uris ) ; } else { log . info ( _STR , unknownSubjects . keySet ( ) , uris . entityData ( ) , uris . entity ( ) ) ; } } if ( revisionId == null ) { throw new ContainedException ( _STR + statements ) ; } if ( lastModified == null ) { throw new ContainedException ( _STR + statements ) ; } for ( Pair < URI , Literal > dataStatement : dataStatements ) { statements . add ( new StatementImpl ( entityUriImpl , dataStatement . getLeft ( ) , dataStatement . getRight ( ) ) ) ; } statements . addAll ( restoredStatements ) ; }
public static final void showGUIMessage ( final String user_message , final BufferedImage image , final String title ) { if ( image == null ) { return ; } final ImagePanel display = new ImagePanel ( image ) ; display . setLayout ( new BorderLayout ( ) ) ; if ( user_message != null ) { display . add ( new JLabel ( user_message ) , BorderLayout . SOUTH ) ; } final int width = image . getWidth ( ) ; final int height = image . getHeight ( ) ; display . setSize ( new Dimension ( width + _NUM , height + _NUM ) ) ; JOptionPane . showConfirmDialog ( contentPane , display , title , JOptionPane . DEFAULT_OPTION , JOptionPane . PLAIN_MESSAGE ) ; }
private void dynInit ( ) { }
@ Override public Path call ( ) throws Exception { final Set < FileVisitOption > options ; if ( followLinks ) { options = EnumSet . of ( FileVisitOption . FOLLOW_LINKS ) ; } else { options = EnumSet . noneOf ( FileVisitOption . class ) ; } logger . info ( String . format ( _STR , path ) ) ; try { Files . walkFileTree ( path , options , maxDepth , this ) ; } catch ( IOException e ) { logger . log ( Level . SEVERE , String . format ( _STR , path ) , e ) ; throw e ; } logger . info ( String . format ( _STR , path ) ) ; return path ; }
private void baselineLayout ( int origin , int size ) { int ascent ; int descent ; if ( baselineAnchoredToTop ) { ascent = prefAscent ; descent = size - ascent ; } else { ascent = size - prefDescent ; descent = prefDescent ; } for ( Spring spring : springs ) { Alignment alignment = spring . getAlignment ( ) ; if ( alignment == null || alignment == Alignment . BASELINE ) { int baseline = spring . getBaseline ( ) ; if ( baseline >= _NUM ) { int springMax = spring . getMaximumSize ( VERTICAL ) ; int springPref = spring . getPreferredSize ( VERTICAL ) ; int height = springPref ; int y ; switch ( spring . getBaselineResizeBehavior ( ) ) { case CONSTANT_ASCENT : y = origin + ascent - baseline ; height = Math . min ( descent , springMax - baseline ) + baseline ; break ; case CONSTANT_DESCENT : height = Math . min ( ascent , springMax - springPref + baseline ) + ( springPref - baseline ) ; y = origin + ascent + ( springPref - baseline ) - height ; break ; default : y = origin + ascent - baseline ; break ; } spring . setSize ( VERTICAL , y , height ) ; } else { setChildSize ( spring , VERTICAL , origin , size ) ; } } else { setChildSize ( spring , VERTICAL , origin , size ) ; } } }
public static int readInt ( final JSONArray jsonArray , final int index , final boolean required , final boolean notNull ) throws JSONException { if ( required ) { return jsonArray . getInt ( index ) ; } if ( notNull && jsonArray . isNull ( index ) ) { throw new JSONException ( String . format ( Locale . US , NULL_VALUE_FORMAT_ARRAY , index ) ) ; } int value = _NUM ; if ( ! jsonArray . isNull ( index ) ) { value = jsonArray . getInt ( index ) ; } return value ; }
public void addPropertyChangeListener ( PropertyChangeListener pcl ) { m_pcSupport . addPropertyChangeListener ( pcl ) ; }
private void unregisterDependent ( Preference dependent ) { if ( mDependents != null ) { mDependents . remove ( dependent ) ; } }
private void validateStoragePolicySelection ( StoragePolicySelection storagePolicySelection ) { Assert . notNull ( storagePolicySelection , _STR ) ; businessObjectDataHelper . validateBusinessObjectDataKey ( storagePolicySelection . getBusinessObjectDataKey ( ) , _BOOL , _BOOL ) ; storagePolicyHelper . validateStoragePolicyKey ( storagePolicySelection . getStoragePolicyKey ( ) ) ; Assert . notNull ( storagePolicySelection . getStoragePolicyVersion ( ) , _STR ) ; }
@ Override public String toString ( ) { StringBuffer text = new StringBuffer ( ) ; if ( m_cobwebTree == null ) { return _STR ; } else { m_cobwebTree . dumpTree ( _NUM , text ) ; return _STR + m_numberMerges + _STR + m_numberSplits + _STR + numberOfClusters ( ) + _STR + text . toString ( ) + _STR ; } }
public static Object toArray ( Collection < ? > collection , Class < ? > componentType ) { if ( componentType . isPrimitive ( ) ) { Object array = Array . newInstance ( componentType , collection . size ( ) ) ; int index = _NUM ; for ( Object value : collection ) { Array . set ( array , index ++ , value ) ; } return array ; } return collection . toArray ( ( Object [ ] ) Array . newInstance ( componentType , collection . size ( ) ) ) ; }
GradleException formatViolationsFor ( Formatter formatter , List < File > problemFiles ) throws IOException { return new GradleException ( DiffMessageFormatter . messageFor ( this , formatter , problemFiles ) ) ; }
public void labelDistances ( Hypergraph < V , E > graph , V root ) { labelDistances ( graph , Collections . singleton ( root ) ) ; }
public static java . lang . String toString ( float d ) { float m = Math . abs ( d ) ; if ( d == POSITIVE_INFINITY ) { return _STR ; } else if ( d == NEGATIVE_INFINITY ) { return _STR ; } else if ( d == _NUM ) { return _STR ; } else if ( m >= _NUM && m < _NUM ) { String str = toStringImpl ( d , _BOOL ) ; char [ ] chars = str . toCharArray ( ) ; int i = chars . length - _NUM ; char c ; while ( i >= _NUM && ( c = chars [ i ] ) == _STR ) { i -- ; } if ( i < _NUM || str . indexOf ( _STR ) == - _NUM ) { return str ; } else if ( chars [ i ] == _STR || chars [ i ] == _STR ) { i ++ ; } return str . substring ( _NUM , i + _NUM ) ; } else { return toStringImpl ( d , _BOOL ) ; } }
public int position ( ) { return lineBuffer == null ? _NUM : lineBuffer . length ( ) ; }
public BatchedImageRequest ( Request < ? > request , ImageContainer container ) { mRequest = request ; mContainers . add ( container ) ; }
public void addFrequency ( Frequency frequency ) { frequencies . add ( frequency ) ; }
public final static HeaderElement parseHeaderElement ( final String value , HeaderValueParser parser ) throws ParseException { if ( value == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( parser == null ) parser = SaveHeaderValueParser . DEFAULT ; CharArrayBuffer buffer = new CharArrayBuffer ( value . length ( ) ) ; buffer . append ( value ) ; SaveParserCursor cursor = new SaveParserCursor ( _NUM , value . length ( ) ) ; return parser . parseHeaderElement ( buffer , cursor ) ; }
public static List < Interval > sliceIntervals ( Interval interval , TimeGrain timeGrain ) { DateTime intervalEnd = interval . getEnd ( ) ; DateTime sliceStart = interval . getStart ( ) ; DateTime periodStart = timeGrain . roundFloor ( sliceStart ) ; if ( ! sliceStart . equals ( periodStart ) ) { LOG . info ( _STR , interval , timeGrain , periodStart ) ; throw new IllegalArgumentException ( _STR + periodStart ) ; } List < Interval > intervalSlices = new ArrayList < > ( ) ; while ( sliceStart . isBefore ( intervalEnd ) ) { DateTime sliceEnd = DateTimeUtils . addTimeGrain ( sliceStart , timeGrain ) ; Interval slicedInterval = new Interval ( sliceStart , sliceEnd ) ; if ( ! interval . contains ( slicedInterval ) ) { LOG . info ( _STR , interval , timeGrain ) ; throw new IllegalArgumentException ( _STR ) ; } intervalSlices . add ( slicedInterval ) ; sliceStart = sliceEnd ; } LOG . debug ( _STR , interval , intervalSlices . size ( ) , timeGrain ) ; return intervalSlices ; }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
public void testHasAttributes1 ( ) throws Throwable { Document doc ; NodeList addrList ; Node addrNode ; boolean state ; doc = ( Document ) load ( _STR , builder ) ; addrList = doc . getElementsByTagName ( _STR ) ; addrNode = addrList . item ( _NUM ) ; state = addrNode . hasAttributes ( ) ; assertFalse ( _STR , state ) ; }
public boolean isGerund ( ) { return typeString . startsWith ( VERB_GERUND ) ; }
protected void error ( String msg , Exception e ) throws org . xml . sax . SAXException { SAXSourceLocator locator = getLocator ( ) ; ErrorListener handler = m_stylesheetProcessor . getErrorListener ( ) ; TransformerException pe ; if ( ! ( e instanceof TransformerException ) ) { pe = ( null == e ) ? new TransformerException ( msg , locator ) : new TransformerException ( msg , locator , e ) ; } else pe = ( TransformerException ) e ; if ( null != handler ) { try { handler . error ( pe ) ; } catch ( TransformerException te ) { throw new org . xml . sax . SAXException ( te ) ; } } else throw new org . xml . sax . SAXException ( pe ) ; }
private JsonObject createRequest ( Map < String , Object > headers , String uri , HttpMethod method , JsonObject payload ) { JsonObject request = new JsonObject ( ) ; JsonArray jsonHeaders = new JsonArray ( ) ; headers . forEach ( null ) ; request . put ( _STR , jsonHeaders ) ; request . put ( _STR , uri ) ; request . put ( _STR , method . toString ( ) ) ; request . put ( _STR , payload ) ; return request ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; { boolean success = _BOOL ; try { child . replaceData ( - _NUM , _NUM , _STR ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . INDEX_SIZE_ERR ) ; } assertTrue ( _STR , success ) ; } }
private long downloadTlogFiles ( File tmpTlogDir , long latestGeneration ) throws Exception { LOG . info ( _STR + tlogFilesToDownload ) ; tlogFilesDownloaded = Collections . synchronizedList ( new ArrayList < > ( ) ) ; long bytesDownloaded = _NUM ; boolean status = tmpTlogDir . mkdirs ( ) ; if ( ! status ) { throw new SolrException ( SolrException . ErrorCode . SERVER_ERROR , _STR + tmpTlogDir . getName ( ) ) ; } for ( Map < String , Object > file : tlogFilesToDownload ) { String saveAs = ( String ) ( file . get ( ALIAS ) == null ? file . get ( NAME ) : file . get ( ALIAS ) ) ; localFileFetcher = new LocalFsFileFetcher ( tmpTlogDir , file , saveAs , TLOG_FILE , latestGeneration ) ; currentFile = file ; localFileFetcher . fetchFile ( ) ; bytesDownloaded += localFileFetcher . getBytesDownloaded ( ) ; tlogFilesDownloaded . add ( new HashMap < > ( file ) ) ; } return bytesDownloaded ; }
static WindowsFileAttributes readAttributes ( long handle ) throws WindowsException { NativeBuffer buffer = NativeBuffers . getNativeBuffer ( SIZEOF_FILE_INFORMATION ) ; try { long address = buffer . address ( ) ; GetFileInformationByHandle ( handle , address ) ; int reparseTag = _NUM ; int fileAttrs = unsafe . getInt ( address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES ) ; if ( isReparsePoint ( fileAttrs ) ) { int size = MAXIMUM_REPARSE_DATA_BUFFER_SIZE ; NativeBuffer reparseBuffer = NativeBuffers . getNativeBuffer ( size ) ; try { DeviceIoControlGetReparsePoint ( handle , reparseBuffer . address ( ) , size ) ; reparseTag = ( int ) unsafe . getLong ( reparseBuffer . address ( ) ) ; } finally { reparseBuffer . release ( ) ; } } return fromFileInformation ( address , reparseTag ) ; } finally { buffer . release ( ) ; } }
protected void addAllForReplay ( Collection < Participant > participants ) { Iterator < Participant > it = participants . iterator ( ) ; while ( it . hasNext ( ) ) { Participant p = it . next ( ) ; replayCompletion ( p ) ; } }
public static JPanel createCheckbox ( String boxlabel , String [ ] buttons , boolean [ ] checked , ActionListener al ) { JPanel jp = createPaletteJPanel ( boxlabel ) ; for ( int j = _NUM ; j < buttons . length ; j ++ ) { JCheckBox jcb = new JCheckBox ( buttons [ j ] ) ; jcb . setActionCommand ( Integer . toString ( j ) ) ; if ( al != null ) jcb . addActionListener ( al ) ; jcb . setSelected ( checked [ j ] ) ; jp . add ( jcb ) ; } return jp ; }
public static void copy ( DimensionsEvent aeDest , DimensionsEvent aeSrc ) { GPOMutable destAggs = aeDest . getAggregates ( ) ; GPOMutable srcAggs = aeSrc . getAggregates ( ) ; if ( srcAggs . getFieldsBoolean ( ) != null ) { System . arraycopy ( srcAggs . getFieldsBoolean ( ) , _NUM , destAggs . getFieldsBoolean ( ) , _NUM , srcAggs . getFieldsBoolean ( ) . length ) ; } if ( srcAggs . getFieldsCharacter ( ) != null ) { System . arraycopy ( srcAggs . getFieldsCharacter ( ) , _NUM , destAggs . getFieldsCharacter ( ) , _NUM , srcAggs . getFieldsCharacter ( ) . length ) ; } if ( srcAggs . getFieldsString ( ) != null ) { System . arraycopy ( srcAggs . getFieldsString ( ) , _NUM , destAggs . getFieldsString ( ) , _NUM , srcAggs . getFieldsString ( ) . length ) ; } if ( srcAggs . getFieldsShort ( ) != null ) { System . arraycopy ( srcAggs . getFieldsShort ( ) , _NUM , destAggs . getFieldsShort ( ) , _NUM , srcAggs . getFieldsShort ( ) . length ) ; } if ( srcAggs . getFieldsInteger ( ) != null ) { System . arraycopy ( srcAggs . getFieldsInteger ( ) , _NUM , destAggs . getFieldsInteger ( ) , _NUM , srcAggs . getFieldsInteger ( ) . length ) ; } if ( srcAggs . getFieldsLong ( ) != null ) { System . arraycopy ( srcAggs . getFieldsLong ( ) , _NUM , destAggs . getFieldsLong ( ) , _NUM , srcAggs . getFieldsLong ( ) . length ) ; } if ( srcAggs . getFieldsFloat ( ) != null ) { System . arraycopy ( srcAggs . getFieldsFloat ( ) , _NUM , destAggs . getFieldsFloat ( ) , _NUM , srcAggs . getFieldsFloat ( ) . length ) ; } if ( srcAggs . getFieldsDouble ( ) != null ) { System . arraycopy ( srcAggs . getFieldsDouble ( ) , _NUM , destAggs . getFieldsDouble ( ) , _NUM , srcAggs . getFieldsDouble ( ) . length ) ; } }
public static double assignProbabilitiesToInstances ( Relation < ? extends NumberVector > relation , List < ? extends EMClusterModel < ? > > models , WritableDataStore < double [ ] > probClusterIGivenX ) { final int k = models . size ( ) ; double emSum = _NUM ; for ( DBIDIter iditer = relation . iterDBIDs ( ) ; iditer . valid ( ) ; iditer . advance ( ) ) { NumberVector vec = relation . get ( iditer ) ; double [ ] probabilities = new double [ k ] ; { int i = _NUM ; for ( EMClusterModel < ? > m : models ) { probabilities [ i ] = m . estimateDensity ( vec ) ; ++ i ; } } double priorProbability = _NUM ; for ( int i = _NUM ; i < k ; i ++ ) { priorProbability += probabilities [ i ] ; } double logP = Math . max ( Math . log ( priorProbability ) , MIN_LOGLIKELIHOOD ) ; emSum += ( logP == logP ) ? logP : _NUM ; double [ ] clusterProbabilities = new double [ k ] ; if ( priorProbability > _NUM ) { for ( int i = _NUM ; i < k ; i ++ ) { clusterProbabilities [ i ] = probabilities [ i ] / priorProbability ; } } probClusterIGivenX . put ( iditer , clusterProbabilities ) ; } return emSum / relation . size ( ) ; }
public static String separatorsToUnix ( String path ) { if ( path == null || path . indexOf ( WINDOWS_SEPARATOR ) == - _NUM ) { return path ; } return path . replace ( WINDOWS_SEPARATOR , UNIX_SEPARATOR ) ; }
public static String asString ( URI value ) { return value != null ? value . toString ( ) : null ; }
public Kernel ( int offset , double [ ] values ) { this . values = Arrays . copyOf ( values , values . length ) ; this . offset = offset ; }
private void initializeWorkList ( ) { for ( GVCongruenceClass c : B ) { if ( c . size ( ) == _NUM ) { continue ; } Iterator < ValueGraphVertex > i = c . iterator ( ) ; ValueGraphVertex first = i . next ( ) ; while ( i . hasNext ( ) ) { ValueGraphVertex v = i . next ( ) ; if ( ! checkCongruence ( first , v ) ) { workList . push ( c ) ; break ; } } } }
@ Override protected void beforeModelLinked ( EObject model , IDiagnosticConsumer diagnosticsConsumer ) { ImportedNamesAdapter adapter = ImportedNamesAdapter . find ( model . eResource ( ) ) ; if ( adapter != null ) adapter . clear ( ) ; UnionMemberScope . clearCachedComposedMembers ( model ) ; }
protected abstract void addFile ( String relativeFilename ) throws CommandException ;
public void treeExpanded ( TreeExpansionEvent event ) { inspectorWindow . updateView ( Director . ALL ) ; }
public void convertInfixToPostfix ( String infixExp ) throws Exception { m_originalInfix = infixExp ; infixExp = Utils . removeSubstring ( infixExp , _STR ) ; infixExp = Utils . replaceSubstring ( infixExp , _STR , _STR ) ; infixExp = Utils . replaceSubstring ( infixExp , _STR , _STR ) ; infixExp = Utils . replaceSubstring ( infixExp , _STR , _STR ) ; infixExp = Utils . replaceSubstring ( infixExp , _STR , _STR ) ; infixExp = Utils . replaceSubstring ( infixExp , _STR , _STR ) ; infixExp = Utils . replaceSubstring ( infixExp , _STR , _STR ) ; infixExp = Utils . replaceSubstring ( infixExp , _STR , _STR ) ; infixExp = Utils . replaceSubstring ( infixExp , _STR , _STR ) ; infixExp = Utils . replaceSubstring ( infixExp , _STR , _STR ) ; infixExp = Utils . replaceSubstring ( infixExp , _STR , _STR ) ; StringTokenizer tokenizer = new StringTokenizer ( infixExp , OPERATORS , _BOOL ) ; m_postFixExpVector = new Vector < ExpressionComponent > ( ) ; while ( tokenizer . hasMoreTokens ( ) ) { String tok = tokenizer . nextToken ( ) ; if ( tok . length ( ) > _NUM ) { handleOperand ( tok ) ; } else { if ( isOperator ( tok . charAt ( _NUM ) ) ) { handleOperator ( tok ) ; } else { handleOperand ( tok ) ; } } m_previousTok = tok ; } while ( ! m_operatorStack . empty ( ) ) { String popop = ( String ) ( m_operatorStack . pop ( ) ) ; if ( popop . charAt ( _NUM ) == _STR || popop . charAt ( _NUM ) == _STR ) { throw new Exception ( _STR ) ; } m_postFixExpVector . addElement ( new Operator ( popop . charAt ( _NUM ) ) ) ; } }
public boolean hasItem ( T object ) { synchronized ( mLock ) { return source . contains ( object ) ; } }
private static boolean versionMatches ( Integer v1 , int v2 ) { if ( v1 == null || v1 == _NUM || v2 == _NUM ) { return _BOOL ; } return v1 . equals ( v2 ) ; }
protected void onFailedClosingUrlConnection ( URLConnection urlConnection , IOException cause ) { }
private void onSchemaComplexType ( Element schemaComplexType , DatatypeElementFactory elementFactory ) { Iterator < Element > iter = schemaComplexType . elementIterator ( XSD_ATTRIBUTE ) ; while ( iter . hasNext ( ) ) { Element xsdAttribute = iter . next ( ) ; String name = xsdAttribute . attributeValue ( _STR ) ; QName qname = getQName ( name ) ; XSDatatype dataType = dataTypeForXsdAttribute ( xsdAttribute ) ; if ( dataType != null ) { elementFactory . setAttributeXSDatatype ( qname , dataType ) ; } } Element schemaSequence = schemaComplexType . element ( XSD_SEQUENCE ) ; if ( schemaSequence != null ) { onChildElements ( schemaSequence , elementFactory ) ; } Element schemaChoice = schemaComplexType . element ( XSD_CHOICE ) ; if ( schemaChoice != null ) { onChildElements ( schemaChoice , elementFactory ) ; } Element schemaAll = schemaComplexType . element ( XSD_ALL ) ; if ( schemaAll != null ) { onChildElements ( schemaAll , elementFactory ) ; } }
private void pushAnnotatorsRef ( String values ) { annotatorsRef . push ( annotatorsRef . peek ( ) ) ; setAnnotatorsRef ( values ) ; }
public String versionCompact ( ) { return properties . getProperty ( _STR ) ; }
private void sequenceQuery ( QueryEntry entry , ServerSessionContext session , CompletableFuture < QueryResponse > future ) { if ( entry . getSequence ( ) > session . getCommandSequence ( ) ) { session . registerSequenceQuery ( entry . getSequence ( ) , null ) ; } else { indexQuery ( entry , future ) ; } }
private boolean expungeStaleEntries ( ) { if ( size == _NUM ) return _BOOL ; Object r ; boolean result = _BOOL ; while ( ( r = queue . poll ( ) ) != null ) { result = _BOOL ; Entry e = ( Entry ) r ; int h = e . hash ; int i = indexFor ( h , table . length ) ; Entry prev = table [ i ] ; Entry p = prev ; while ( p != null ) { Entry next = p . next ; if ( p == e ) { if ( prev == e ) table [ i ] = next ; else prev . next = next ; e . next = null ; size -- ; break ; } prev = p ; p = next ; } } return result ; }
public static < T > List < T > rest ( List < T > l ) { return l . subList ( _NUM , l . size ( ) ) ; }
public static List < Integer > createRanges ( int ... startEnds ) { assert startEnds . length % _NUM == _NUM ; ArrayList < Integer > ret = new ArrayList < Integer > ( ) ; for ( int si = _NUM ; si < startEnds . length ; si ++ ) { final int start = startEnds [ si ++ ] ; final int end = startEnds [ si ] ; assert end >= start ; ret . ensureCapacity ( ret . size ( ) + ( ( end - start ) + _NUM ) ) ; for ( int i = start ; i <= end ; i ++ ) { ret . add ( new Integer ( i ) ) ; } } return ret ; }
@ After public void tearDown ( ) { webClient . closeAllWindows ( ) ; }
public void findAndUndo ( Object someObj ) { if ( someObj instanceof com . bbn . openmap . MapBean ) { logger . fine ( _STR ) ; MapBean map = getMapBean ( ) ; if ( map != null && map == ( MapBean ) someObj ) { setMapBean ( null ) ; } } }
public Timestamp recalculateEstimatedCompletionDate ( Long priority , Timestamp startDate ) { if ( exist ( ) ) { getProductionRunRoutingTasks ( ) ; if ( quantity == null ) getQuantity ( ) ; Timestamp endDate = null ; for ( Iterator < GenericValue > iter = productionRunRoutingTasks . iterator ( ) ; iter . hasNext ( ) ; ) { GenericValue routingTask = iter . next ( ) ; if ( priority . compareTo ( routingTask . getLong ( _STR ) ) <= _NUM ) { long totalTime = ProductionRun . getEstimatedTaskTime ( routingTask , quantity , dispatcher ) ; endDate = TechDataServices . addForward ( TechDataServices . getTechDataCalendar ( routingTask ) , startDate , totalTime ) ; routingTask . set ( _STR , startDate ) ; routingTask . set ( _STR , endDate ) ; startDate = endDate ; } } return endDate ; } else { return null ; } }
public void addDocumentType ( DocumentType documentType ) { mDocumentTypes . add ( documentType ) ; }
public boolean tableExists ( DatabaseMetaData dbMetaData , String tableName ) throws SQLException { return ( tableExistsCaseSensitive ( dbMetaData , tableName ) || tableExistsCaseSensitive ( dbMetaData , tableName . toUpperCase ( Locale . US ) ) || tableExistsCaseSensitive ( dbMetaData , tableName . toLowerCase ( Locale . US ) ) ) ; }
public void testHasAttributes1 ( ) throws Throwable { Document doc ; Element element ; NodeList elementList ; boolean hasAttributes ; doc = ( Document ) load ( _STR , builder ) ; elementList = doc . getElementsByTagName ( _STR ) ; element = ( Element ) elementList . item ( _NUM ) ; hasAttributes = element . hasAttributes ( ) ; assertFalse ( _STR , hasAttributes ) ; elementList = doc . getElementsByTagName ( _STR ) ; element = ( Element ) elementList . item ( _NUM ) ; hasAttributes = element . hasAttributes ( ) ; assertTrue ( _STR , hasAttributes ) ; }
private static Position nextTokenPos ( Position pos , Token [ ] [ ] spec ) { if ( pos == null ) { return null ; } int nextItem = pos . item + _NUM ; if ( ( nextItem < spec [ pos . line ] . length ) && ( ( pos . line < pcalEnd . line ) || ( nextItem < pcalEnd . item ) ) ) { return new Position ( pos . line , nextItem ) ; } int nextLine = pos . line + _NUM ; while ( ( nextLine < spec . length ) && ( spec [ nextLine ] . length == _NUM ) ) { nextLine ++ ; } if ( ( nextLine < spec . length ) && ( ( nextLine < pcalEnd . line ) || ( ( nextLine == pcalEnd . line ) && ( _NUM < pcalEnd . item ) ) ) ) { return new Position ( nextLine , _NUM ) ; } return null ; }
public void update ( GL10 gl ) { if ( taskQueue . size ( ) > _NUM ) { GLResorceTask res ; while ( ( res = taskQueue . poll ( ) ) != null ) { res . perform ( gl ) ; } } }
public static double [ ] HPDInterval ( double proportion , double [ ] x , int [ ] indices ) { double minRange = Double . MAX_VALUE ; int hpdIndex = _NUM ; final int diff = ( int ) Math . round ( proportion * ( double ) x . length ) ; for ( int i = _NUM ; i <= ( x . length - diff ) ; i ++ ) { final double minValue = x [ indices [ i ] ] ; final double maxValue = x [ indices [ i + diff - _NUM ] ] ; final double range = Math . abs ( maxValue - minValue ) ; if ( range < minRange ) { minRange = range ; hpdIndex = i ; } } return new double [ ] { x [ indices [ hpdIndex ] ] , x [ indices [ hpdIndex + diff - _NUM ] ] } ; }
private void checkIfDirectoriesExist ( File [ ] disk_dirs ) { DiskStoreFactoryImpl . checkIfDirectoriesExist ( disk_dirs ) ; }
private static byte [ ] readClass ( final InputStream is , boolean close ) throws IOException { if ( is == null ) { throw new IOException ( _STR ) ; } try { byte [ ] b = new byte [ is . available ( ) ] ; int len = _NUM ; while ( _BOOL ) { int n = is . read ( b , len , b . length - len ) ; if ( n == - _NUM ) { if ( len < b . length ) { byte [ ] c = new byte [ len ] ; System . arraycopy ( b , _NUM , c , _NUM , len ) ; b = c ; } return b ; } len += n ; if ( len == b . length ) { int last = is . read ( ) ; if ( last < _NUM ) { return b ; } byte [ ] c = new byte [ b . length + _NUM ] ; System . arraycopy ( b , _NUM , c , _NUM , len ) ; c [ len ++ ] = ( byte ) last ; b = c ; } } } finally { if ( close ) { is . close ( ) ; } } }
public void addPortToAlreadyAllocatedContext ( StoragePort port , StorageHADomain haDomain , StorageSystem . Type arrayType , String switchName ) { String engine = getEngine ( port , haDomain , arrayType ) ; if ( engine != null ) { _alreadyAllocatedEngines . add ( engine ) ; } String directorType = getDirectorType ( arrayType , haDomain ) ; if ( directorType != null ) { _alreadyAllocatedDirectorTypes . add ( directorType ) ; } String director = getDirector ( port , haDomain ) ; if ( director != null ) { _alreadyAllocatedDirectors . add ( director ) ; } String cpu = getCpu ( port , haDomain , arrayType ) ; if ( cpu != null ) { _alreadyAllocatedCpus . add ( cpu ) ; } if ( switchName != null ) { _alreadyAllocatedSwitches . add ( switchName ) ; } }
@ Override public void drawSeries ( Canvas canvas , Paint paint , List < Float > points , XYSeriesRenderer renderer , float yAxisValue , int seriesIndex , int startIndex ) { paint . setColor ( renderer . getColor ( ) ) ; paint . setStyle ( Style . FILL ) ; int length = points . size ( ) ; XYValueSeries series = ( XYValueSeries ) mDataset . getSeriesAt ( seriesIndex ) ; double max = series . getMaxValue ( ) ; double coef = MAX_BUBBLE_SIZE / max ; for ( int i = _NUM ; i < length ; i += _NUM ) { double size = series . getValue ( startIndex + i / _NUM ) * coef + MIN_BUBBLE_SIZE ; drawCircle ( canvas , paint , points . get ( i ) , points . get ( i + _NUM ) , ( float ) size ) ; } }
public String convert ( ) { if ( s == null ) { try { ByteArrayInputStream bs = new ByteArrayInputStream ( bytes ) ; DataInputStream d = new DataInputStream ( bs ) ; String buf = d . readUTF ( ) ; sHashCode = buf . hashCode ( ) ; return buf ; } catch ( IOException e ) { return _STR ; } } return s ; }
public static void writeListOfLongs ( List list , boolean hasLongIDs , DataOutput out ) throws IOException { if ( list == null ) { out . writeInt ( - _NUM ) ; } else { out . writeInt ( list . size ( ) ) ; out . writeBoolean ( hasLongIDs ) ; for ( Iterator it = list . iterator ( ) ; it . hasNext ( ) ; ) { Long l = ( Long ) it . next ( ) ; if ( hasLongIDs ) { out . writeLong ( l . longValue ( ) ) ; } else { out . writeInt ( ( int ) l . longValue ( ) ) ; } } } }
public boolean isDefined ( Object attrName ) { return table . containsKey ( attrName ) ; }
private void showPreloadingStage ( ) { Stage preloadingStage = new Stage ( StageStyle . UNDECORATED ) ; preloadingStage . initOwner ( primaryStage ) ; preloadingStage . setScene ( new PreloadingScene ( ) ) ; preloadingStage . show ( ) ; primaryStage . setOnShowing ( null ) ; }
@ Override public void clear ( ) { if ( elementCount > _NUM ) { elementCount = _NUM ; Arrays . fill ( elementData , null ) ; modCount ++ ; while ( referenceQueue . poll ( ) != null ) { } } }
public V remove ( Object key ) { int hash = hash ( key . hashCode ( ) ) ; Segment < K , V > s = segmentForHash ( hash ) ; return s == null ? null : s . remove ( key , hash , null ) ; }
public void test_copyStream_fullBlock ( ) throws IOException { final String id = _STR ; final int version = _NUM ; Random r = new Random ( ) ; final byte [ ] expected = new byte [ BLOCK_SIZE ] ; r . nextBytes ( expected ) ; assertEquals ( _STR , expected . length , repo . copyStream ( id , version , new ByteArrayInputStream ( expected ) ) ) ; assertEquals ( _STR , _NUM , repo . getBlockCount ( id , version ) ) ; assertSameIterator ( _STR , new Long [ ] { _NUM } , repo . blocks ( id , version ) ) ; assertEquals ( _STR , expected , read ( repo . inputStream ( id , version ) ) ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String badString ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; { boolean success = _BOOL ; try { badString = child . substringData ( - _NUM , _NUM ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . INDEX_SIZE_ERR ) ; } assertTrue ( _STR , success ) ; } }
private static int ipToBytes ( String ip , byte [ ] bytes , boolean mustHave4 ) throws IPMatcherException { String [ ] parts = ip . split ( _STR ) ; if ( parts . length > _NUM || mustHave4 && parts . length != _NUM ) { throw new IPMatcherException ( _STR + ip ) ; } try { for ( int i = _NUM ; i < parts . length ; i ++ ) { int p = Integer . parseInt ( parts [ i ] ) ; if ( p < _NUM || p > _NUM ) { throw new IPMatcherException ( _STR + ip ) ; } bytes [ i ] = ( byte ) ( p < _NUM ? p : p - _NUM ) ; } } catch ( NumberFormatException nfe ) { throw new IPMatcherException ( _STR + ip , nfe ) ; } return parts . length ; }
public static void CF2 ( double [ ] x , double [ ] f , double [ ] c , int nx ) { int count1 = _NUM ; int count2 = _NUM ; double sum1 = _NUM ; double sum2 = _NUM ; double yj ; double N = _NUM ; double a = _NUM ; double t ; for ( int j = _NUM ; j <= nx ; j ++ ) { yj = x [ j - _NUM ] - Math . sin ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; if ( j % _NUM == _NUM ) { yj = x [ j - _NUM ] - Math . sin ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; sum1 += yj * yj ; count1 ++ ; } else { yj = x [ j - _NUM ] - Math . cos ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; sum2 += yj * yj ; count2 ++ ; } } f [ _NUM ] = x [ _NUM ] + _NUM * sum1 / ( double ) count1 ; f [ _NUM ] = _NUM - Math . sqrt ( x [ _NUM ] ) + _NUM * sum2 / ( double ) count2 ; t = f [ _NUM ] + Math . sqrt ( f [ _NUM ] ) - a * Math . sin ( N * PI * ( Math . sqrt ( f [ _NUM ] ) - f [ _NUM ] + _NUM ) ) - _NUM ; c [ _NUM ] = MYSIGN ( t ) * Math . abs ( t ) / ( _NUM + Math . exp ( _NUM * Math . abs ( t ) ) ) ; }
protected void reply ( RequestContext context , String key , String message ) { try { HttpServletRequest request = context . getRequest ( ) ; String filename = request . getRemoteAddr ( ) ; end ( filename , key , message ) ; } catch ( Exception e ) { } }
protected void addHeaders ( HttpURLConnection connection , String tenantId ) { if ( tenantId == null ) { tenantId = PropertyUtil . getProperty ( PropertyUtil . HAWKULAR_TENANT ) ; } if ( tenantId != null ) { connection . setRequestProperty ( HAWKULAR_TENANT , tenantId ) ; } if ( authorization == null && username != null ) { String authString = username + _STR + password ; String encoded = encoder . encodeToString ( authString . getBytes ( ) ) ; authorization = _STR + encoded ; } if ( authorization != null ) { connection . setRequestProperty ( _STR , authorization ) ; } }
public void addLongSelectionListener ( SelectionListener listener ) { if ( listener == null ) throw new IllegalArgumentException ( ) ; if ( hexEditControl == null ) { if ( listOfLongListeners == null ) listOfLongListeners = new ArrayList < > ( ) ; listOfLongListeners . add ( listener ) ; } else { hexEditControl . addLongSelectionListener ( listener ) ; } }
public void println ( ) throws IOException { out . write ( strategy . getPrinterNewline ( ) ) ; newLine = _BOOL ; }
@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( _STR ) ; boolean firstTime = _BOOL ; for ( Entry < Integer , String > entry : mCapabilities . entrySet ( ) ) { if ( firstTime ) { firstTime = _BOOL ; } else { sb . append ( _STR ) ; } sb . append ( entry . getKey ( ) ) ; sb . append ( _STR ) ; sb . append ( entry . getValue ( ) ) ; sb . append ( _STR ) ; return mCapabilities . toString ( ) ; } return sb . toString ( ) ; }
protected final void refreshLoadingViewsSize ( ) { final int maximumPullScroll = ( int ) ( getMaximumPullScroll ( ) * _NUM ) ; int pLeft = getPaddingLeft ( ) ; int pTop = getPaddingTop ( ) ; int pRight = getPaddingRight ( ) ; int pBottom = getPaddingBottom ( ) ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setWidth ( maximumPullScroll ) ; pLeft = - maximumPullScroll ; } else { pLeft = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setWidth ( maximumPullScroll ) ; pRight = - maximumPullScroll ; } else { pRight = _NUM ; } break ; case VERTICAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setHeight ( maximumPullScroll ) ; pTop = - maximumPullScroll ; } else { pTop = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setHeight ( maximumPullScroll ) ; pBottom = - maximumPullScroll ; } else { pBottom = _NUM ; } break ; } if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR , pLeft , pTop , pRight , pBottom ) ) ; } setPadding ( pLeft , pTop , pRight , pBottom ) ; }
public Debug ( String clientID , ClientComms comms ) { this . clientID = clientID ; this . comms = comms ; log . setResourceName ( clientID ) ; }
protected String alterCase ( String value ) { switch ( getCase ( ) ) { case UPPERCASE : return value . toUpperCase ( ) ; case LOWERCASE : return value . toLowerCase ( ) ; default : return value ; } }
private boolean isAckRequired ( ) { return this . ackRequired ; }
@ Override public synchronized String toString ( ) { if ( elementCount == _NUM ) { return _STR ; } int length = elementCount - _NUM ; StringBuffer buffer = new StringBuffer ( elementCount * _NUM ) ; buffer . append ( _STR ) ; for ( int i = _NUM ; i < length ; i ++ ) { if ( elementData [ i ] == this ) { buffer . append ( _STR ) ; } else { buffer . append ( elementData [ i ] ) ; } buffer . append ( _STR ) ; } if ( elementData [ length ] == this ) { buffer . append ( _STR ) ; } else { buffer . append ( elementData [ length ] ) ; } buffer . append ( _STR ) ; return buffer . toString ( ) ; }
void addReporter ( String textReporter , int xx , int yy ) { ReporterIcon l = new ReporterIcon ( this ) ; l . setReporter ( textReporter ) ; l . setLocation ( xx , yy ) ; l . setSize ( l . getPreferredSize ( ) . width , l . getPreferredSize ( ) . height ) ; l . setDisplayLevel ( LABELS ) ; setDirty ( _BOOL ) ; putItem ( l ) ; }
private void drawSelectionRectangle ( Graphics2D g2 ) { if ( this . selectionRectangle != null ) { if ( this . fillSelectionRectangle ) { g2 . setPaint ( this . selectionFillPaint ) ; g2 . fill ( selectionRectangle ) ; } else { g2 . setPaint ( this . selectionOutlinePaint ) ; g2 . draw ( selectionRectangle ) ; } } }
private int measureShort ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) ( _NUM * mRadius + getPaddingTop ( ) + getPaddingBottom ( ) + _NUM ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
public ConversionException ( final Throwable cause ) { super ( cause . getMessage ( ) ) ; this . cause = cause ; }
private boolean hasConnectivityToAllSystems ( Initiator initiator , Collection < URI > storageSystems , ExportGroup exportGroup ) { return hasConnectivityToAllSystems ( initiator , storageSystems , null , exportGroup ) ; }
@ Override public boolean onTouchEvent ( MotionEvent event ) { if ( ! isEnabled ( ) ) return _BOOL ; int pointerIndex ; final int action = event . getAction ( ) ; switch ( action & MotionEvent . ACTION_MASK ) { case MotionEvent . ACTION_DOWN : mActivePointerId = event . getPointerId ( event . getPointerCount ( ) - _NUM ) ; pointerIndex = event . findPointerIndex ( mActivePointerId ) ; mDownMotionX = event . getX ( pointerIndex ) ; pressedThumb = evalPressedThumb ( mDownMotionX ) ; if ( pressedThumb == null ) return super . onTouchEvent ( event ) ; setPressed ( _BOOL ) ; invalidate ( ) ; onStartTrackingTouch ( ) ; trackTouchEvent ( event ) ; attemptClaimDrag ( ) ; break ; case MotionEvent . ACTION_MOVE : if ( pressedThumb != null ) { if ( mIsDragging ) { trackTouchEvent ( event ) ; } else { pointerIndex = event . findPointerIndex ( mActivePointerId ) ; final float x = event . getX ( pointerIndex ) ; if ( Math . abs ( x - mDownMotionX ) > mScaledTouchSlop ) { setPressed ( _BOOL ) ; invalidate ( ) ; onStartTrackingTouch ( ) ; trackTouchEvent ( event ) ; attemptClaimDrag ( ) ; } } if ( notifyWhileDragging && listener != null ) { listener . onRangeSeekBarValuesChanged ( this , getSelectedMinValue ( ) , getSelectedMaxValue ( ) ) ; } } break ; case MotionEvent . ACTION_UP : if ( mIsDragging ) { trackTouchEvent ( event ) ; onStopTrackingTouch ( ) ; setPressed ( _BOOL ) ; } else { onStartTrackingTouch ( ) ; trackTouchEvent ( event ) ; onStopTrackingTouch ( ) ; } pressedThumb = null ; invalidate ( ) ; if ( listener != null ) { listener . onRangeSeekBarValuesChanged ( this , getSelectedMinValue ( ) , getSelectedMaxValue ( ) ) ; } break ; case MotionEvent . ACTION_POINTER_DOWN : { final int index = event . getPointerCount ( ) - _NUM ; mDownMotionX = event . getX ( index ) ; mActivePointerId = event . getPointerId ( index ) ; invalidate ( ) ; break ; } case MotionEvent . ACTION_POINTER_UP : onSecondaryPointerUp ( event ) ; invalidate ( ) ; break ; case MotionEvent . ACTION_CANCEL : if ( mIsDragging ) { onStopTrackingTouch ( ) ; setPressed ( _BOOL ) ; } invalidate ( ) ; break ; } return _BOOL ; }
private Derivation < TK , FV > constructDerivation ( Derivation < TK , FV > markedNode , int sourceInputId , FeatureExtractor < TK , FV > featurizer , Scorer < FV > scorer , SearchHeuristic < TK , FV > heuristic , OutputSpace < TK , FV > outputSpace ) { final List < Derivation < TK , FV > > nodes = new LinkedList < > ( ) ; Derivation < TK , FV > p = markedNode ; while ( p != null ) { nodes . add ( _NUM , p ) ; p = p . parent ; } p = markedNode . bestChild ; while ( p != null ) { nodes . add ( p ) ; p = p . bestChild ; } Derivation < TK , FV > goalHyp = null ; for ( Derivation < TK , FV > node : nodes ) { goalHyp = goalHyp == null ? node : new Derivation < > ( sourceInputId , node . rule , goalHyp . length , goalHyp , featurizer , scorer , heuristic , outputSpace ) ; } return goalHyp ; }
public void testPlusMathContextPositive ( ) { String a = _STR ; int aScale = _NUM ; int precision = _NUM ; RoundingMode rm = RoundingMode . FLOOR ; MathContext mc = new MathContext ( precision , rm ) ; String c = _STR ; int cScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal res = aNumber . plus ( mc ) ; assertEquals ( _STR , c , res . toString ( ) ) ; assertEquals ( _STR , cScale , res . scale ( ) ) ; }
public void testRadix24Neg ( ) { String value = _STR ; int radix = _NUM ; BigInteger aNumber = new BigInteger ( value , radix ) ; String result = aNumber . toString ( radix ) ; assertTrue ( result . equals ( value ) ) ; }
private static IAbstractNode convertOr ( final CommonTree ast ) throws RecognitionException { final List < IAbstractNode > children = new ArrayList < IAbstractNode > ( ) ; for ( final Object childObject : ast . getChildren ( ) ) { children . add ( convert ( ( CommonTree ) childObject ) ) ; } return new CAbstractOrExpression ( children ) ; }
public JDialog displayPanelInWindow ( final JPanel panel , String title ) { JDialog frame = new GenericJDialog ( ) ; frame . setContentPane ( panel ) ; frame . pack ( ) ; frame . setTitle ( title ) ; frame . setVisible ( _BOOL ) ; return frame ; }
public JSONTokener ( Reader reader ) { this . reader = reader . markSupported ( ) ? reader : new BufferedReader ( reader ) ; this . eof = _BOOL ; this . usePrevious = _BOOL ; this . previous = _NUM ; this . index = _NUM ; this . character = _NUM ; this . line = _NUM ; }
public static void compress ( ) { String s = BinaryStdIn . readString ( ) ; char [ ] input = s . toCharArray ( ) ; int [ ] freq = new int [ R ] ; for ( int i = _NUM ; i < input . length ; i ++ ) freq [ input [ i ] ] ++ ; Node root = buildTrie ( freq ) ; String [ ] st = new String [ R ] ; buildCode ( st , root , _STR ) ; writeTrie ( root ) ; BinaryStdOut . write ( input . length ) ; for ( int i = _NUM ; i < input . length ; i ++ ) { String code = st [ input [ i ] ] ; for ( int j = _NUM ; j < code . length ( ) ; j ++ ) { if ( code . charAt ( j ) == _STR ) { BinaryStdOut . write ( _BOOL ) ; } else if ( code . charAt ( j ) == _STR ) { BinaryStdOut . write ( _BOOL ) ; } else throw new IllegalStateException ( _STR ) ; } } BinaryStdOut . close ( ) ; }
public Builder withTokenizer ( Class < ? extends TokenizerFactory > factory , Map < String , String > params ) throws IOException { Objects . requireNonNull ( factory , _STR ) ; tokenizer . set ( applyResourceLoader ( newFactoryClassInstance ( factory , applyDefaultParams ( params ) ) ) ) ; componentsAdded = _BOOL ; return this ; }
protected double computeAzimuthLabelOffset ( double radius , double maxRadius ) { return Math . asin ( AZIMUTH_LABEL_OFFSET * maxRadius / radius ) ; }
protected void addResource ( List defaults , String bundleName ) { ResourceBundle bundle = ResourceBundle . getBundle ( bundleName ) ; for ( Enumeration keys = bundle . getKeys ( ) ; keys . hasMoreElements ( ) ; ) { String key = ( String ) keys . nextElement ( ) ; defaults . add ( key ) ; defaults . add ( bundle . getObject ( key ) ) ; } }
public void displayChanged ( ) { executeDisplayChangedOnEDT ( getGraphicsConfiguration ( ) ) ; }
@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; Calendar dateTime = new GregorianCalendar ( GMT ) ; long localTime = value ; if ( tzShift != null ) { localTime += tzShift . longValue ( ) * _NUM ; } dateTime . setTimeInMillis ( localTime ) ; try { appendInt ( sb , dateTime . get ( Calendar . YEAR ) , _NUM ) ; sb . append ( _STR ) ; appendInt ( sb , dateTime . get ( Calendar . MONTH ) + _NUM , _NUM ) ; sb . append ( _STR ) ; appendInt ( sb , dateTime . get ( Calendar . DAY_OF_MONTH ) , _NUM ) ; if ( ! dateOnly ) { sb . append ( _STR ) ; appendInt ( sb , dateTime . get ( Calendar . HOUR_OF_DAY ) , _NUM ) ; sb . append ( _STR ) ; appendInt ( sb , dateTime . get ( Calendar . MINUTE ) , _NUM ) ; sb . append ( _STR ) ; appendInt ( sb , dateTime . get ( Calendar . SECOND ) , _NUM ) ; if ( dateTime . isSet ( Calendar . MILLISECOND ) ) { sb . append ( _STR ) ; appendInt ( sb , dateTime . get ( Calendar . MILLISECOND ) , _NUM ) ; } } if ( tzShift != null ) { if ( tzShift . intValue ( ) == _NUM ) { sb . append ( _STR ) ; } else { int absTzShift = tzShift . intValue ( ) ; if ( tzShift > _NUM ) { sb . append ( _STR ) ; } else { sb . append ( _STR ) ; absTzShift = - absTzShift ; } int tzHours = absTzShift / _NUM ; int tzMinutes = absTzShift % _NUM ; appendInt ( sb , tzHours , _NUM ) ; sb . append ( _STR ) ; appendInt ( sb , tzMinutes , _NUM ) ; } } } catch ( ArrayIndexOutOfBoundsException e ) { throw new RuntimeException ( e ) ; } return sb . toString ( ) ; }
private static Stream < Method > extractMethods ( Class clazz ) { try { Method [ ] methods = clazz . getMethods ( ) ; if ( methods . length > _NUM ) { return Stream . of ( methods ) ; } } catch ( Exception | Error e ) { LOG . warn ( _STR , clazz , e ) ; } return Stream . empty ( ) ; }
@ Override public void updateServerAddress ( Application application , String dockerManagerIP , String serverPort , String serverManagerPort ) { String suffixCloudUnit = application . getSuffixCloudUnitIO ( ) ; JedisPool pool = null ; Jedis jedis = null ; try { pool = new JedisPool ( new JedisPoolConfig ( ) , redisIp , Integer . parseInt ( redisPort ) , _NUM ) ; jedis = pool . getResource ( ) ; String subNameSpace = concatSubNameSpace ( application ) ; String key = subNameSpace + suffixCloudUnit ; String frontend = _STR + key . toLowerCase ( ) ; jedis . lset ( frontend , _NUM , _STR + dockerManagerIP + _STR + serverPort ) ; String frontendServerManager = _STR + key . toLowerCase ( ) ; jedis . lset ( frontendServerManager , _NUM , _STR + dockerManagerIP + _STR + serverManagerPort ) ; } catch ( JedisConnectionException | UnsupportedEncodingException e ) { logger . error ( _STR , e ) ; } finally { if ( jedis != null ) { pool . destroy ( ) ; } } }
protected void remove ( int itemPosition ) { if ( itemPosition >= _NUM && itemPosition < getItemCount ( ) ) { list . remove ( itemPosition ) ; } }
protected String chooseRandomEnemys ( ) { final List < String > enemyList = new LinkedList < String > ( enemyForces . keySet ( ) ) ; final int enemySize = enemyList . size ( ) ; final int position = Rand . rand ( enemySize ) ; return enemyList . get ( position ) ; }
public boolean isRouteToDestValid ( Block protecting , Block destination ) { if ( protecting == destination ) { log . debug ( _STR ) ; if ( getAdjacency ( protecting ) != null ) { return _BOOL ; } } else if ( getValidRoute ( protecting , destination ) != null ) { return _BOOL ; } return _BOOL ; }
public void sortPools ( List < StoragePool > storagePools ) { _portMetricsProcessor . computeStoragePoolsAvgPortMetrics ( storagePools ) ; Collections . sort ( storagePools , _storagePoolComparator ) ; }
public RhythmGroup addOverlays ( Collection < RhythmOverlay > overlays ) { mOverlays . addAll ( overlays ) ; if ( mCurrentOverlayIndex == NO_OVERLAY ) { selectOverlay ( _NUM ) ; } return this ; }
public static Resource forPath ( final String path ) throws UnknownResourceException { Resource resource ; if ( path . startsWith ( ClasspathResource . PREFIX + _STR ) ) { resource = new ClasspathResource ( path ) ; } else if ( path . startsWith ( FileResource . PREFIX + _STR ) ) { resource = new FileResource ( path ) ; } else { resource = forPath ( FileResource . PREFIX + _STR + path ) ; } return resource ; }
private static boolean isOlderThanLeopard ( ) { String version = System . getProperty ( _STR ) ; StringTokenizer tk = new StringTokenizer ( version , _STR ) ; int major = Integer . parseInt ( tk . nextToken ( ) ) ; int minor = Integer . parseInt ( tk . nextToken ( ) ) ; return major == _NUM && minor < _NUM ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addAll ( Collections . list ( super . listOptions ( ) ) ) ; return newVector . elements ( ) ; }
public static String xmlContentEscape ( String s ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = _NUM ; i < s . length ( ) ; i ++ ) { char c = s . charAt ( i ) ; switch ( c ) { case _STR : sb . append ( _STR ) ; break ; case _STR : sb . append ( _STR ) ; break ; case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : break ; default : sb . append ( c ) ; } } return sb . toString ( ) ; }
private void feedForward ( Vec input , List < Vec > activations , List < Vec > derivatives ) { Vec x = input ; for ( int i = _NUM ; i < Ws . size ( ) ; i ++ ) { Matrix W_i = Ws . get ( i ) ; Vec b_i = bs . get ( i ) ; Vec a_i = activations . get ( i ) ; a_i . zeroOut ( ) ; W_i . multiply ( x , _NUM , a_i ) ; a_i . mutableAdd ( b_i ) ; a_i . applyFunction ( f ) ; Vec d_i = derivatives . get ( i ) ; a_i . copyTo ( d_i ) ; d_i . applyFunction ( f . getD ( ) ) ; x = a_i ; } }
private File findFile ( File directory , String name ) throws FileNotFoundException { File file = new File ( directory , name ) ; if ( file . exists ( ) ) { return file ; } for ( String child : directory . list ( ) ) { if ( child . equalsIgnoreCase ( name ) ) { return new File ( directory , child ) ; } } throw new FileNotFoundException ( _STR + file ) ; }
public static boolean compareResults ( SolrClient controlClient , SolrClient cloudClient ) throws SolrServerException , IOException { return compareResults ( controlClient , cloudClient , null , null ) ; }
public ArrayList < String > GetElementList ( String xPathExpression ) { try { ArrayList < String > values = new ArrayList < String > ( ) ; List < ? > nodeList = XPath . selectNodes ( this . xmlDocument , xPathExpression ) ; Iterator < ? > iter = nodeList . iterator ( ) ; while ( iter . hasNext ( ) ) { org . jdom . Element element = ( org . jdom . Element ) iter . next ( ) ; values . add ( element . getText ( ) ) ; } return values ; } catch ( Exception ex ) { LOG . error ( _STR + ex . getMessage ( ) , ex ) ; return null ; } }
public static CLContext createContextFromCurrentGL ( ) { RuntimeException first = null ; for ( CLPlatform platform : listPlatforms ( ) ) { try { CLContext ctx = platform . createContextFromCurrentGL ( ) ; if ( ctx != null ) return ctx ; } catch ( RuntimeException ex ) { if ( first == null ) first = ex ; } } throw new RuntimeException ( _STR , first ) ; }
public void collapseTree ( ) { for ( int i = _NUM ; i < tree . getRowCount ( ) ; ++ i ) { tree . collapseRow ( i ) ; } }
static void queuePlayerCapeReplacement ( AbstractClientPlayer player ) { final String displayName = player . getDisplayNameString ( ) ; Logger . info ( _STR , displayName ) ; THREAD_POOL . submit ( null ) ; }
public void removeVetoableChangeListener ( VetoableChangeListener listener ) { if ( listener != null ) { synchronized ( this ) { if ( vetoableSupport != null ) { vetoableSupport . removeVetoableChangeListener ( listener ) ; } } } }
public StreamThroughput ( String statusMessagePrefix ) { m_instanceCount = _NUM ; m_sampleCount = _NUM ; m_numSamples = _NUM ; m_cumulativeTime = _NUM ; m_startTime = System . currentTimeMillis ( ) ; m_statusMessagePrefix = statusMessagePrefix ; }
protected void parseCommand ( final String ... args ) { for ( String arg : args ) { final Command command = Command . valueOfName ( arg ) ; if ( command != null ) { setCommand ( command ) ; break ; } } }
@ RequestMapping ( value = _STR , method = RequestMethod . PUT ) public ResponseEntity < Bookmark > editBookmark ( @ PathVariable ( value = _STR ) String username , @ PathVariable ( value = _STR ) int bookmarkId , @ RequestBody String json ) throws IOException , BookmarkNotFoundException , IllegalAccessException , InvocationTargetException { Optional < Bookmark > optional = bookmarksRepository . findByIdAndUserUsername ( bookmarkId , username ) ; if ( optional . isPresent ( ) ) { ObjectMapper mapper = new ObjectMapper ( ) ; Map < String , String > changeMap = mapper . readValue ( json , HashMap . class ) ; Bookmark bookmark = optional . get ( ) ; BeanUtils . populate ( bookmark , changeMap ) ; bookmark = bookmarksRepository . save ( bookmark ) ; return new ResponseEntity < > ( bookmark , HttpStatus . OK ) ; } else { throw new BookmarkNotFoundException ( _STR + bookmarkId ) ; } }
private Rect calcBounds ( int index , Paint paint ) { Rect bounds = new Rect ( ) ; CharSequence title = getTitle ( index ) ; bounds . right = ( int ) paint . measureText ( title , _NUM , title . length ( ) ) ; bounds . bottom = ( int ) ( paint . descent ( ) - paint . ascent ( ) ) ; return bounds ; }
public static String convertFromUtf32 ( int [ ] text , int startPos , int endPos ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = startPos ; i < endPos ; i ++ ) { sb . append ( convertFromUtf32ToCharArray ( text [ i ] ) ) ; } return sb . toString ( ) ; }
public void createBounds ( ) { if ( isEmpty ( ) || hasSingleElement ( ) ) { mBounds = null ; return ; } int l = Integer . MAX_VALUE ; int t = Integer . MAX_VALUE ; int r = _NUM ; int b = _NUM ; for ( Selection . Element selection : getElements ( ) ) { ConstraintWidget w = selection . widget ; l = Math . min ( w . getDrawX ( ) , l ) ; t = Math . min ( w . getDrawY ( ) , t ) ; r = Math . max ( w . getDrawRight ( ) , r ) ; b = Math . max ( w . getDrawBottom ( ) , b ) ; } ConstraintWidget bounds = new ConstraintWidget ( l , t , r - l , b - t ) ; bounds . setCompanionWidget ( WidgetCompanion . create ( bounds ) ) ; mBounds = new Element ( bounds ) ; updateOriginFromBounds ( ) ; }
protected static void recordPattern ( BitArray row , int start , int [ ] counters ) throws NotFoundException { int numCounters = counters . length ; Arrays . fill ( counters , _NUM , numCounters , _NUM ) ; int end = row . getSize ( ) ; if ( start >= end ) { throw NotFoundException . getNotFoundInstance ( ) ; } boolean isWhite = ! row . get ( start ) ; int counterPosition = _NUM ; int i = start ; while ( i < end ) { if ( row . get ( i ) ^ isWhite ) { counters [ counterPosition ] ++ ; } else { counterPosition ++ ; if ( counterPosition == numCounters ) { break ; } else { counters [ counterPosition ] = _NUM ; isWhite = ! isWhite ; } } i ++ ; } if ( ! ( counterPosition == numCounters || ( counterPosition == numCounters - _NUM && i == end ) ) ) { throw NotFoundException . getNotFoundInstance ( ) ; } }
public static Object [ ] findMethodWithListParameters ( Object service , String methodName , List < ? > args ) { Object [ ] arguments = new Object [ args . size ( ) ] ; for ( int i = _NUM ; i < args . size ( ) ; i ++ ) { arguments [ i ] = args . get ( i ) ; } return findMethodWithListParameters ( service , methodName , arguments ) ; }
static int firstIllegalCharacter ( String source ) { for ( int i = _NUM ; i < source . length ( ) ; i ++ ) { if ( isLegal ( source . charAt ( i ) ) == _BOOL ) { return i ; } } return - _NUM ; }
private CoderResult decodeByteBufferToCharacterBuffer ( boolean endOfInput ) throws DecodingException { buffer . flip ( ) ; return decodeMoreBytesToCharacterBuffer ( endOfInput ) ; }
protected void newFastClockMinute ( ) { for ( int i = delayedTrains . size ( ) - _NUM ; i >= _NUM ; i -- ) { ActiveTrain at = delayedTrains . get ( i ) ; if ( ( ! at . getStarted ( ) ) && at . getDelayedStart ( ) != ActiveTrain . NODELAY ) { if ( at . getDelayedStart ( ) == ActiveTrain . TIMEDDELAY ) { if ( isFastClockTimeGE ( at . getDepartureTimeHr ( ) , at . getDepartureTimeMin ( ) ) ) { at . setStarted ( ) ; delayedTrains . remove ( i ) ; if ( _AutoAllocate ) { autoAllocate . scanAllocationRequestList ( allocationRequests ) ; } } } } else if ( at . getStarted ( ) && at . getStatus ( ) == ActiveTrain . READY && at . reachedRestartPoint ( ) ) { if ( isFastClockTimeGE ( at . getRestartDepartHr ( ) , at . getRestartDepartMin ( ) ) ) { at . restart ( ) ; delayedTrains . remove ( i ) ; if ( _AutoAllocate ) { autoAllocate . scanAllocationRequestList ( allocationRequests ) ; } } } } }
public void add ( final CreatureRespawnPoint point ) { respawnPoints . add ( point ) ; }
private void loadOrgAccessRole ( ArrayList < OrgAccess > list ) { PreparedStatement pstmt = null ; ResultSet rs = null ; String sql = _STR + _STR ; try { pstmt = DB . prepareStatement ( sql , get_TrxName ( ) ) ; pstmt . setInt ( _NUM , getAD_Role_ID ( ) ) ; rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { MRoleOrgAccess oa = new MRoleOrgAccess ( getCtx ( ) , rs , get_TrxName ( ) ) ; loadOrgAccessAdd ( list , new OrgAccess ( oa . getAD_Client_ID ( ) , oa . getAD_Org_ID ( ) , oa . isReadOnly ( ) ) ) ; } } catch ( Exception e ) { log . log ( Level . SEVERE , sql , e ) ; } finally { DB . close ( rs , pstmt ) ; } }
public void testBytesAsSource ( ) throws Exception { String JSON = _STR ; byte [ ] b = JSON . getBytes ( _STR ) ; int offset = _NUM ; int len = b . length ; byte [ ] src = new byte [ offset + len + offset ] ; System . arraycopy ( b , _NUM , src , offset , len ) ; JsonFactory jf = new JsonFactory ( ) ; JsonParser jp = jf . createJsonParser ( src , offset , len ) ; assertToken ( JsonToken . START_ARRAY , jp . nextToken ( ) ) ; assertToken ( JsonToken . VALUE_NUMBER_INT , jp . nextToken ( ) ) ; assertEquals ( _NUM , jp . getIntValue ( ) ) ; assertToken ( JsonToken . VALUE_NUMBER_INT , jp . nextToken ( ) ) ; assertEquals ( _NUM , jp . getIntValue ( ) ) ; assertToken ( JsonToken . VALUE_NUMBER_INT , jp . nextToken ( ) ) ; assertEquals ( _NUM , jp . getIntValue ( ) ) ; assertToken ( JsonToken . VALUE_NUMBER_INT , jp . nextToken ( ) ) ; assertEquals ( _NUM , jp . getIntValue ( ) ) ; assertToken ( JsonToken . END_ARRAY , jp . nextToken ( ) ) ; assertNull ( jp . nextToken ( ) ) ; jp . close ( ) ; }
public java . security . cert . Certificate engineGenerateCertificate ( InputStream in ) throws CertificateException { if ( currentStream == null ) { currentStream = in ; sData = null ; sDataObjectCount = _NUM ; } else if ( currentStream != in ) { currentStream = in ; sData = null ; sDataObjectCount = _NUM ; } try { if ( sData != null ) { if ( sDataObjectCount != sData . size ( ) ) { return getCertificate ( ) ; } else { sData = null ; sDataObjectCount = _NUM ; return null ; } } PushbackInputStream pis = new PushbackInputStream ( in ) ; int tag = pis . read ( ) ; if ( tag == - _NUM ) { return null ; } pis . unread ( tag ) ; if ( tag != _NUM ) { return readPEMCertificate ( pis ) ; } else { return readDERCertificate ( new ASN1InputStream ( pis ) ) ; } } catch ( Exception e ) { throw new ExCertificateException ( e ) ; } }
public String toString ( Object value ) { return toPrettyString ( value ) ; }
@ Override public List < Period > generateRollingPeriods ( DateTimeUnit dateTimeUnit ) { Calendar cal = getCalendar ( ) ; dateTimeUnit . setDay ( _NUM ) ; dateTimeUnit = cal . minusMonths ( dateTimeUnit , _NUM ) ; List < Period > periods = Lists . newArrayList ( ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { periods . add ( createPeriod ( dateTimeUnit , cal ) ) ; dateTimeUnit = cal . plusMonths ( dateTimeUnit , _NUM ) ; } return periods ; }
@ SuppressWarnings ( _STR ) public synchronized T findCounter ( Enum < ? > counterKey ) throws IllegalAccessException , InstantiationException { T counter = cache . get ( counterKey ) ; if ( counter == null ) { counter = counterType . newInstance ( ) ; cache . put ( counterKey , counter ) ; } return counter ; }
public static Uri addMessageToUri ( ContentResolver resolver , Uri uri , String address , String body , String subject , Long date , boolean read , boolean deliveryReport , long threadId ) { ContentValues values = new ContentValues ( _NUM ) ; values . put ( Sms . ADDRESS , address ) ; if ( date != null ) { values . put ( Sms . DATE , date ) ; } values . put ( Sms . READ , read ? Integer . valueOf ( _NUM ) : Integer . valueOf ( _NUM ) ) ; values . put ( Sms . SUBJECT , subject ) ; values . put ( Sms . BODY , body ) ; if ( deliveryReport ) { values . put ( Sms . STATUS , Sms . STATUS_PENDING ) ; } if ( threadId != - _NUM ) { values . put ( Sms . THREAD_ID , threadId ) ; } return resolver . insert ( uri , values ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; childData = child . getData ( ) ; assertEquals ( _STR , _STR , childData ) ; }
protected void engineSetMode ( String mode ) { if ( ! mode . equalsIgnoreCase ( _STR ) ) { throw new IllegalArgumentException ( _STR + mode ) ; } }
private void computeDoublesForAllZoomLevels ( ) { int numFrames = mSoundFile . getNumFrames ( ) ; int [ ] frameGains = mSoundFile . getFrameGains ( ) ; double [ ] smoothedGains = new double [ numFrames ] ; if ( numFrames == _NUM ) { smoothedGains [ _NUM ] = frameGains [ _NUM ] ; } else if ( numFrames == _NUM ) { smoothedGains [ _NUM ] = frameGains [ _NUM ] ; smoothedGains [ _NUM ] = frameGains [ _NUM ] ; } else if ( numFrames > _NUM ) { smoothedGains [ _NUM ] = ( double ) ( ( frameGains [ _NUM ] / _NUM ) + ( frameGains [ _NUM ] / _NUM ) ) ; for ( int i = _NUM ; i < numFrames - _NUM ; i ++ ) { smoothedGains [ i ] = ( double ) ( ( frameGains [ i - _NUM ] / _NUM ) + ( frameGains [ i ] / _NUM ) + ( frameGains [ i + _NUM ] / _NUM ) ) ; } smoothedGains [ numFrames - _NUM ] = ( double ) ( ( frameGains [ numFrames - _NUM ] / _NUM ) + ( frameGains [ numFrames - _NUM ] / _NUM ) ) ; } double maxGain = _NUM ; for ( int i = _NUM ; i < numFrames ; i ++ ) { if ( smoothedGains [ i ] > maxGain ) { maxGain = smoothedGains [ i ] ; } } double scaleFactor = _NUM ; if ( maxGain > _NUM ) { scaleFactor = _NUM / maxGain ; } maxGain = _NUM ; int gainHist [ ] = new int [ _NUM ] ; for ( int i = _NUM ; i < numFrames ; i ++ ) { int smoothedGain = ( int ) ( smoothedGains [ i ] * scaleFactor ) ; if ( smoothedGain < _NUM ) smoothedGain = _NUM ; if ( smoothedGain > _NUM ) smoothedGain = _NUM ; if ( smoothedGain > maxGain ) maxGain = smoothedGain ; gainHist [ smoothedGain ] ++ ; } double minGain = _NUM ; int sum = _NUM ; while ( minGain < _NUM && sum < numFrames / _NUM ) { sum += gainHist [ ( int ) minGain ] ; minGain ++ ; } sum = _NUM ; while ( maxGain > _NUM && sum < numFrames / _NUM ) { sum += gainHist [ ( int ) maxGain ] ; maxGain -- ; } double [ ] heights = new double [ numFrames ] ; double range = maxGain - minGain ; for ( int i = _NUM ; i < numFrames ; i ++ ) { double value = ( smoothedGains [ i ] * scaleFactor - minGain ) / range ; if ( value < _NUM ) value = _NUM ; if ( value > _NUM ) value = _NUM ; heights [ i ] = value * value ; } algo ( mSoundFile . getNumFrames ( ) ) ; totalZooms = algoValues . size ( ) + _NUM ; mNumZoomLevels = totalZooms ; mLenByZoomLevel = new int [ totalZooms ] ; mZoomFactorByZoomLevel = new double [ totalZooms ] ; mValuesByZoomLevel = new double [ totalZooms ] [ ] ; mLenByZoomLevel [ _NUM ] = numFrames * _NUM ; mZoomFactorByZoomLevel [ _NUM ] = _NUM ; mValuesByZoomLevel [ _NUM ] = new double [ mLenByZoomLevel [ _NUM ] ] ; if ( numFrames > _NUM ) { mValuesByZoomLevel [ _NUM ] [ _NUM ] = _NUM * heights [ _NUM ] ; mValuesByZoomLevel [ _NUM ] [ _NUM ] = heights [ _NUM ] ; } for ( int i = _NUM ; i < numFrames ; i ++ ) { mValuesByZoomLevel [ _NUM ] [ _NUM * i ] = _NUM * ( heights [ i - _NUM ] + heights [ i ] ) ; mValuesByZoomLevel [ _NUM ] [ _NUM * i + _NUM ] = heights [ i ] ; } mLenByZoomLevel [ _NUM ] = numFrames ; mValuesByZoomLevel [ _NUM ] = new double [ mLenByZoomLevel [ _NUM ] ] ; mZoomFactorByZoomLevel [ _NUM ] = _NUM ; for ( int i = _NUM ; i < mLenByZoomLevel [ _NUM ] ; i ++ ) { mValuesByZoomLevel [ _NUM ] [ i ] = heights [ i ] ; } int location = _NUM ; for ( int j = _NUM ; j < totalZooms ; j ++ ) { mLenByZoomLevel [ j ] = algoValues . get ( location ) ; mValuesByZoomLevel [ j ] = new double [ mLenByZoomLevel [ j ] ] ; mZoomFactorByZoomLevel [ j ] = mZoomFactorByZoomLevel [ j - _NUM ] / _NUM ; for ( int i = _NUM ; i < mLenByZoomLevel [ j ] ; i ++ ) { mValuesByZoomLevel [ j ] [ i ] = _NUM * ( mValuesByZoomLevel [ j - _NUM ] [ ( int ) ( divisorValues . get ( location ) * i ) ] + mValuesByZoomLevel [ j - _NUM ] [ ( int ) ( divisorValues . get ( location ) * i ) + _NUM ] ) ; } location ++ ; } Log . i ( _STR , _STR ) ; mInitialized = _BOOL ; }
@ SuppressWarnings ( _STR ) private void expungeStaleEntries ( ) { synchronized ( sync ) { ListWeakReference r ; while ( ( r = ( ListWeakReference ) queue . poll ( ) ) != null ) { ListEntry le = r . getListEntry ( ) ; int i = list . indexOf ( le ) ; if ( i != - _NUM ) { list . remove ( i ) ; } } } }
protected void work ( final IResource resource , final List < WorkItem > resources , IProgressMonitor monitor ) { IPreferenceStore store = FindbugsPlugin . getPluginPreferences ( getProject ( ) ) ; boolean runAsJob = store . getBoolean ( FindBugsConstants . KEY_RUN_ANALYSIS_AS_EXTRA_JOB ) ; FindBugsJob fbJob = new StartedFromBuilderJob ( _STR + resource . getName ( ) + _STR , resource , resources ) ; if ( runAsJob ) { if ( DEBUG ) { FindbugsPlugin . log ( _STR ) ; } FindBugsJob . cancelSimilarJobs ( fbJob ) ; if ( DEBUG ) { FindbugsPlugin . log ( _STR ) ; } fbJob . scheduleAsSystem ( ) ; if ( DEBUG ) { FindbugsPlugin . log ( _STR ) ; } } else { if ( DEBUG ) { FindbugsPlugin . log ( _STR ) ; } fbJob . run ( monitor ) ; if ( DEBUG ) { FindbugsPlugin . log ( _STR ) ; } } }
public void fireVetoableChange ( String name , Object oldValue , Object newValue ) throws PropertyVetoException { super . fireVetoableChange ( name , oldValue , newValue ) ; beanContextChildSupport . fireVetoableChange ( name , oldValue , newValue ) ; }
@ Override public void onFullBackup ( FullBackupDataOutput output ) throws IOException { if ( mVolumes != null ) { if ( DEBUG ) Slog . i ( TAG , _STR + mVolumes . length + _STR ) ; HashSet < String > externalFilesDirFilter = new HashSet < String > ( ) ; final File externalAndroidRoot = new File ( Environment . getExternalStorageDirectory ( ) , Environment . DIRECTORY_ANDROID ) ; externalFilesDirFilter . add ( externalAndroidRoot . getCanonicalPath ( ) ) ; for ( int i = _NUM ; i < mVolumes . length ; i ++ ) { StorageVolume v = mVolumes [ i ] ; String domain = FullBackup . SHARED_PREFIX + i ; fullBackupFileTree ( null , domain , v . getPath ( ) , externalFilesDirFilter , output ) ; } } }
public static void removeConnectionList ( Integer tab ) { TABBED_CONNECTIONS . remove ( tab . intValue ( ) ) ; }
protected void paintRangeRings ( Point2D originPnt , Point2D dest , Graphics graphics , MapBean theMap ) { Geo originGeo = new Geo ( originPnt . getY ( ) , originPnt . getX ( ) , _BOOL ) ; Geo destGeo = new Geo ( dest . getY ( ) , dest . getX ( ) , _BOOL ) ; double distance = originGeo . distance ( destGeo ) ; for ( int i = _NUM ; i <= Math . max ( _NUM , numRings ) ; i ++ ) { double ringDist = distance * ( double ) i ; paintCircle ( originGeo , ringDist , graphics , theMap ) ; paintLabel ( originGeo , ringDist , graphics , theMap ) ; } }
public static String separatorsToWindows ( String path ) { if ( path == null || path . indexOf ( UNIX_SEPARATOR ) == - _NUM ) { return path ; } return path . replace ( UNIX_SEPARATOR , WINDOWS_SEPARATOR ) ; }
public void translateAndAppendPending ( int backoff ) throws UnsupportedEncodingException { int bufferEnd = current - backoff ; int len = bufferEnd - complete ; output . append ( new String ( input , offset + complete , len , charset ) ) ; complete = bufferEnd ; }
@ Override public Trie optimize ( Trie orig ) { List < CharSequence > cmds = orig . cmds ; List < Row > rows = new ArrayList < > ( ) ; List < Row > orows = orig . rows ; int remap [ ] = new int [ orows . size ( ) ] ; for ( int j = orows . size ( ) - _NUM ; j >= _NUM ; j -- ) { liftUp ( orows . get ( j ) , orows ) ; } Arrays . fill ( remap , - _NUM ) ; rows = removeGaps ( orig . root , orows , new ArrayList < Row > ( ) , remap ) ; return new Trie ( orig . forward , remap [ orig . root ] , cmds , rows ) ; }
private Handler < Void > installAfterHandler ( final HttpServerRequest request , final Buffer buffer , final List < Listener > afterListener ) { Handler < Void > afterHandler = null ; return afterHandler ; }
private void tryShutdown ( ) { if ( isClosing ( ) && isOkToClose ( ) ) shutdown ( closeFuture . get ( ) ) ; }
public StorageEntity createStorageEntity ( String storageName , StoragePlatformEntity storagePlatformEntity , List < Attribute > attributes ) { StorageEntity storageEntity = new StorageEntity ( ) ; storageEntity . setName ( storageName ) ; storageEntity . setStoragePlatform ( storagePlatformEntity ) ; if ( ! CollectionUtils . isEmpty ( attributes ) ) { List < StorageAttributeEntity > attributeEntities = new ArrayList < > ( ) ; storageEntity . setAttributes ( attributeEntities ) ; for ( Attribute attribute : attributes ) { StorageAttributeEntity attributeEntity = new StorageAttributeEntity ( ) ; attributeEntities . add ( attributeEntity ) ; attributeEntity . setStorage ( storageEntity ) ; attributeEntity . setName ( attribute . getName ( ) ) ; attributeEntity . setValue ( attribute . getValue ( ) ) ; } } return storageDao . saveAndRefresh ( storageEntity ) ; }
public void displayInfoLine ( String infoLine , int labelDesignator ) { if ( infoLineHolder != null ) { setLabel ( ( infoLine != null && infoLine . length ( ) > _NUM ) ? infoLine : fudgeString , labelDesignator ) ; } }
public Console format ( String format , Object ... args ) { Formatter f = new Formatter ( writer ) ; f . format ( format , args ) ; f . flush ( ) ; return this ; }
@ After public void tearDown ( ) { webClient . closeAllWindows ( ) ; }
public void testSignerStringIdentityScope ( ) throws Exception { Signer s = new SignerStub ( _STR , IdentityScope . getSystemScope ( ) ) ; assertNotNull ( s ) ; assertEquals ( _STR , s . getName ( ) ) ; assertSame ( IdentityScope . getSystemScope ( ) , s . getScope ( ) ) ; assertNull ( s . getPrivateKey ( ) ) ; try { Signer s2 = new SignerStub ( _STR , IdentityScope . getSystemScope ( ) ) ; fail ( _STR ) ; } catch ( KeyManagementException e ) { } Signer s2 = new SignerStub ( null ) ; assertNull ( s2 . getName ( ) ) ; }
private static void decodeAnsiX12Segment ( BitSource bits , StringBuilder result ) throws FormatException { int [ ] cValues = new int [ _NUM ] ; do { if ( bits . available ( ) == _NUM ) { return ; } int firstByte = bits . readBits ( _NUM ) ; if ( firstByte == _NUM ) { return ; } parseTwoBytes ( firstByte , bits . readBits ( _NUM ) , cValues ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { int cValue = cValues [ i ] ; if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else { throw FormatException . getFormatInstance ( ) ; } } } while ( bits . available ( ) > _NUM ) ; }
public TSink < byte [ ] > sendBytes ( TStream < byte [ ] > stream ) { Objects . requireNonNull ( stream , _STR ) ; return sendBinary ( stream , null ) ; }
public static Object invokeStaticMethod ( BshClassManager bcm , Class clas , String methodName , Object [ ] args ) throws ReflectError , UtilEvalError , InvocationTargetException { Interpreter . debug ( _STR ) ; Method method = resolveExpectedJavaMethod ( bcm , clas , null , methodName , args , _BOOL ) ; return invokeMethod ( method , null , args ) ; }
private void fitImageToView ( ) { Drawable drawable = getDrawable ( ) ; if ( drawable == null || drawable . getIntrinsicWidth ( ) == _NUM || drawable . getIntrinsicHeight ( ) == _NUM ) { return ; } if ( matrix == null || prevMatrix == null ) { return ; } int drawableWidth = drawable . getIntrinsicWidth ( ) ; int drawableHeight = drawable . getIntrinsicHeight ( ) ; float scaleX = ( float ) viewWidth / drawableWidth ; float scaleY = ( float ) viewHeight / drawableHeight ; switch ( mScaleType ) { case CENTER : scaleX = scaleY = _NUM ; break ; case CENTER_CROP : scaleX = scaleY = Math . max ( scaleX , scaleY ) ; break ; case CENTER_INSIDE : scaleX = scaleY = Math . min ( _NUM , Math . min ( scaleX , scaleY ) ) ; case FIT_CENTER : scaleX = scaleY = Math . min ( scaleX , scaleY ) ; break ; case FIT_XY : break ; default : throw new UnsupportedOperationException ( _STR ) ; } float redundantXSpace = viewWidth - ( scaleX * drawableWidth ) ; float redundantYSpace = viewHeight - ( scaleY * drawableHeight ) ; matchViewWidth = viewWidth - redundantXSpace ; matchViewHeight = viewHeight - redundantYSpace ; if ( ! isZoomed ( ) && ! imageRenderedAtLeastOnce ) { matrix . setScale ( scaleX , scaleY ) ; matrix . postTranslate ( redundantXSpace / _NUM , redundantYSpace / _NUM ) ; normalizedScale = _NUM ; } else { if ( prevMatchViewWidth == _NUM || prevMatchViewHeight == _NUM ) { savePreviousImageValues ( ) ; } prevMatrix . getValues ( m ) ; m [ Matrix . MSCALE_X ] = matchViewWidth / drawableWidth * normalizedScale ; m [ Matrix . MSCALE_Y ] = matchViewHeight / drawableHeight * normalizedScale ; float transX = m [ Matrix . MTRANS_X ] ; float transY = m [ Matrix . MTRANS_Y ] ; float prevActualWidth = prevMatchViewWidth * normalizedScale ; float actualWidth = getImageWidth ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_X , transX , prevActualWidth , actualWidth , prevViewWidth , viewWidth , drawableWidth ) ; float prevActualHeight = prevMatchViewHeight * normalizedScale ; float actualHeight = getImageHeight ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_Y , transY , prevActualHeight , actualHeight , prevViewHeight , viewHeight , drawableHeight ) ; matrix . setValues ( m ) ; } fixTrans ( ) ; setImageMatrix ( matrix ) ; }
protected AbstractRegexNPAnnotator ( String pattern , boolean caseSensitive , double confidence ) { this ( Pattern . compile ( pattern , caseSensitive ? _NUM : Pattern . CASE_INSENSITIVE ) , _NUM , confidence ) ; }
private static void removeLoopSafepoint ( StructuredGraph graph ) { LoopBeginNode loopBegin = findFirstLoop ( graph ) ; loopBegin . disableSafepoint ( ) ; }
protected abstract void bindItem ( DataBoundViewHolder < T > holder , int position , List < Object > payloads ) ;
public void testCase7 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . add ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public synchronized void add ( double minValue , double maxValue ) { super . add ( minValue ) ; mMaxValues . add ( maxValue ) ; }
public static Date daysBefore ( Date dateInst , int numDays ) { if ( ( numDays <= _NUM ) || ( dateInst == null ) ) { throw new IllegalArgumentException ( ) ; } final Calendar cal = new GregorianCalendar ( ) ; cal . setTime ( dateInst ) ; cal . add ( Calendar . DAY_OF_YEAR , - numDays ) ; return cal . getTime ( ) ; }
public final int remainingCapacity ( ) { return Math . max ( _NUM , capacity - cache . size ( ) ) ; }
public static byte [ ] decode ( String encoded ) { if ( encoded == null ) { return null ; } char [ ] base64Data = encoded . toCharArray ( ) ; int len = removeWhiteSpace ( base64Data ) ; if ( len % FOURBYTE != _NUM ) { return null ; } int numberQuadruple = ( len / FOURBYTE ) ; if ( numberQuadruple == _NUM ) { return new byte [ _NUM ] ; } byte decodedData [ ] = null ; byte b1 = _NUM , b2 = _NUM , b3 = _NUM , b4 = _NUM ; char d1 = _NUM , d2 = _NUM , d3 = _NUM , d4 = _NUM ; int i = _NUM ; int encodedIndex = _NUM ; int dataIndex = _NUM ; decodedData = new byte [ ( numberQuadruple ) * _NUM ] ; for ( ; i < numberQuadruple - _NUM ; i ++ ) { if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d3 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d4 = base64Data [ dataIndex ++ ] ) ) ) { return null ; } b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; decodedData [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( b3 << _NUM | b4 ) ; } if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) ) { return null ; } b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; d3 = base64Data [ dataIndex ++ ] ; d4 = base64Data [ dataIndex ++ ] ; if ( ! isData ( ( d3 ) ) || ! isData ( ( d4 ) ) ) { if ( isPad ( d3 ) && isPad ( d4 ) ) { if ( ( b2 & _NUM ) != _NUM ) { return null ; } byte [ ] tmp = new byte [ i * _NUM + _NUM ] ; System . arraycopy ( decodedData , _NUM , tmp , _NUM , i * _NUM ) ; tmp [ encodedIndex ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; return tmp ; } else if ( ! isPad ( d3 ) && isPad ( d4 ) ) { b3 = base64Alphabet [ d3 ] ; if ( ( b3 & _NUM ) != _NUM ) { return null ; } byte [ ] tmp = new byte [ i * _NUM + _NUM ] ; System . arraycopy ( decodedData , _NUM , tmp , _NUM , i * _NUM ) ; tmp [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; tmp [ encodedIndex ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; return tmp ; } else { return null ; } } else { b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; decodedData [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( b3 << _NUM | b4 ) ; } return decodedData ; }
@ Override public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeObject ( conservativeApproximation ) ; }
int putData ( Object data ) throws FitsException { long lsize = ArrayFuncs . computeLSize ( data ) ; if ( lsize > Integer . MAX_VALUE ) { throw new FitsException ( _STR ) ; } int size = ( int ) lsize ; expandHeap ( size ) ; ByteArrayOutputStream bo = new ByteArrayOutputStream ( size ) ; try { BufferedDataOutputStream o = new BufferedDataOutputStream ( bo ) ; o . writeArray ( data ) ; o . flush ( ) ; o . close ( ) ; } catch ( IOException e ) { throw new FitsException ( _STR , e ) ; } System . arraycopy ( bo . toByteArray ( ) , _NUM , this . heap , this . heapSize , size ) ; int oldOffset = this . heapSize ; this . heapSize += size ; return oldOffset ; }
public void paint ( Graphics g ) { try { super . paint ( g ) ; } catch ( Exception e ) { } int focusedRow = getFocusedRow ( _BOOL ) ; if ( focusedRow != - _NUM && focusedRow < getRowCount ( ) ) { Border rowBorder = UIManager . getBorder ( _STR ) ; if ( rowBorder != null ) { Rectangle rect = getCellRect ( focusedRow , _NUM , _BOOL ) ; rect . width = getWidth ( ) ; rowBorder . paintBorder ( this , g , rect . x , rect . y , rect . width , rect . height ) ; } } }
private void add ( final JLabel label , final JTextField field ) { panel . add ( label ) ; panel . add ( field ) ; if ( previous == null ) { layout . putConstraint ( SpringLayout . NORTH , panel , - SPACING , SpringLayout . NORTH , label ) ; } else { layout . putConstraint ( SpringLayout . NORTH , label , SPACING , SpringLayout . SOUTH , previous ) ; } layout . putConstraint ( SpringLayout . WEST , panel , - SPACING , SpringLayout . WEST , label ) ; layout . putConstraint ( SpringLayout . SOUTH , panel , SPACING , SpringLayout . SOUTH , label ) ; layout . putConstraint ( SpringLayout . EAST , field , - SPACING , SpringLayout . EAST , panel ) ; layout . putConstraint ( SpringLayout . WEST , field , - ( TEXT_FIELD_WIDTH + SPACING ) , SpringLayout . EAST , panel ) ; layout . putConstraint ( SpringLayout . SOUTH , field , SPACING , SpringLayout . SOUTH , label ) ; previous = label ; }
private void onTrackPointStart ( Attributes attributes ) { latitude = attributes . getValue ( ATTRIBUTE_LAT ) ; longitude = attributes . getValue ( ATTRIBUTE_LON ) ; altitude = null ; time = null ; }
public static byte [ ] combine ( final List < byte [ ] > dataChunks ) { int totalSize = _NUM ; for ( final byte [ ] dataPart : dataChunks ) { totalSize += dataPart . length ; } final byte [ ] data = new byte [ totalSize ] ; int index = _NUM ; for ( final byte [ ] dataPart : dataChunks ) { System . arraycopy ( dataPart , _NUM , data , index , dataPart . length ) ; index += dataPart . length ; } return data ; }
public void commit ( IResource [ ] resources , String comment , boolean keepLocks , IProgressMonitor monitor ) throws TeamException { if ( monitor == null ) { monitor = new NullProgressMonitor ( ) ; } Map table = getProviderMapping ( resources ) ; Set keySet = table . keySet ( ) ; monitor . beginTask ( _STR , keySet . size ( ) * _NUM ) ; monitor . setTaskName ( Policy . bind ( _STR ) ) ; Iterator iterator = keySet . iterator ( ) ; while ( iterator . hasNext ( ) ) { IProgressMonitor subMonitor = new SubProgressMonitor ( monitor , _NUM ) ; SVNTeamProvider provider = ( SVNTeamProvider ) iterator . next ( ) ; List list = ( List ) table . get ( provider ) ; IResource [ ] providerResources = ( IResource [ ] ) list . toArray ( new IResource [ list . size ( ) ] ) ; provider . checkin ( providerResources , comment , keepLocks , IResource . DEPTH_INFINITE , subMonitor ) ; } }
public boolean canSpawnWorkers ( ) { boolean canSpawnWorker = _BOOL ; if ( verboseLogLevel > _NUM ) { Utilities . verboseLog ( _STR + gridName + _STR + tier + _STR + maxTierDepth + _STR + lifeRemaining ( ) + _STR + maximumLifeMillis ) ; } if ( ! gridName . equals ( _STR ) ) { return _BOOL ; } if ( clusterState != null ) { Long timeSinceClusterLastUpdatedClusterState = System . currentTimeMillis ( ) - clusterState . getLastUpdated ( ) ; Utilities . verboseLog ( _STR + timeSinceClusterLastUpdatedClusterState ) ; if ( timeSinceClusterLastUpdatedClusterState > _NUM * gridCheckInterval * _NUM ) { Utilities . verboseLog ( _STR + clusterState . toString ( ) ) ; return _BOOL ; } } else { return _BOOL ; } if ( tier == maxTierDepth ) { return _BOOL ; } if ( lifeRemaining ( ) < ( maximumLifeMillis * _NUM ) ) { return _BOOL ; } switch ( tier ) { case _NUM : canSpawnWorker = _BOOL ; break ; case _NUM : canSpawnWorker = _BOOL ; break ; case _NUM : canSpawnWorker = _BOOL ; break ; case _NUM : canSpawnWorker = _BOOL ; break ; default : if ( gridThrottle ) { canSpawnWorker = _BOOL ; } else { canSpawnWorker = _BOOL ; } } return canSpawnWorker ; }
public boolean equals ( Object object ) { if ( object == null || ! ( object instanceof SessionID ) ) { return _BOOL ; } SessionID another = ( SessionID ) object ; return encryptedString . equals ( another . encryptedString ) ; }
public static boolean areIdentical ( String playerIdent , OfflinePlayer compareTo ) { return playerIdent . equals ( getIdentificationForAsString ( compareTo ) ) ; }
Builder addLenient ( String name , String value ) { namesAndValues . add ( name ) ; namesAndValues . add ( value . trim ( ) ) ; return this ; }
protected String stringWithoutHeader ( ) { StringBuffer text = new StringBuffer ( ) ; for ( int i = _NUM ; i < numInstances ( ) ; i ++ ) { text . append ( instance ( i ) ) ; if ( i < numInstances ( ) - _NUM ) { text . append ( _STR ) ; } } return text . toString ( ) ; }
protected boolean isAlwaysNonNull ( Value v ) { return _BOOL ; }
public final < T > void removeInternal ( List < T > list , int position ) { if ( hasHeaderView ( ) && position == _NUM ) return ; if ( enableLoadMore ( ) && position == getItemCount ( ) - _NUM ) return ; if ( list . size ( ) > _NUM ) { synchronized ( mLock ) { list . remove ( hasHeaderView ( ) ? position - _NUM : position ) ; } removeNotifyExternal ( position ) ; notifyItemRemoved ( position ) ; } }
public AMPrimaryMastHeadViewBean ( String name ) { super ( name ) ; }
public boolean consumedGesture ( ) { return reacted ; }
private void initializeLayer ( List < Neuron > layer , NeuronUpdateRule nodeType , int nodes ) { for ( int i = _NUM ; i < nodes ; i ++ ) { Neuron node = new Neuron ( getParentNetwork ( ) , nodeType ) ; layer . add ( node ) ; } }
public static double angle ( Coordinate p ) { return Math . atan2 ( p . y , p . x ) ; }
public void fireNeuronMoved ( final Neuron moved ) { for ( NeuronListener listener : neuronListeners ) { listener . neuronMoved ( new NetworkEvent < Neuron > ( this , moved ) ) ; } }
public IOUtils ( ) { super ( ) ; }
public static X509Certificate createCertificateFromBytes ( byte [ ] certBytes ) { X509Certificate cert = null ; CertificateFactory certFactory ; try { certFactory = CertificateFactory . getInstance ( _STR ) ; InputStream in = new ByteArrayInputStream ( certBytes ) ; cert = ( X509Certificate ) certFactory . generateCertificate ( in ) ; } catch ( CertificateException e ) { logger . warn ( _STR + _STR , e ) ; } return cert ; }
void handleSelectionChanged ( String selection ) { if ( mDidExpandSelection ) { mDidExpandSelection = _BOOL ; return ; } if ( selection == null || selection . isEmpty ( ) ) { scheduleInvalidTapNotification ( ) ; if ( mSelectionType == SelectionType . TAP ) { resetSelectionStates ( ) ; return ; } } if ( selection != null && ! selection . isEmpty ( ) ) { unscheduleInvalidTapNotification ( ) ; } mSelectedText = selection ; if ( mWasTapGestureDetected ) { mSelectionType = SelectionType . TAP ; handleSelection ( selection , mSelectionType ) ; mWasTapGestureDetected = _BOOL ; } else { mHandler . handleSelectionModification ( selection , mX , mY ) ; } }
public TermsAckParser parse ( ) throws ParserConfigurationException , SAXException , ParseFailureException { try { SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; SAXParser parser = factory . newSAXParser ( ) ; parser . parse ( mInputSource , this ) ; return this ; } catch ( IOException e ) { throw new ParseFailureException ( _STR , e ) ; } }
public static String format ( final String value , String ... params ) { validate ( value , NULL_STRING_PREDICATE , NULL_STRING_MSG_SUPPLIER ) ; Pattern p = Pattern . compile ( _STR ) ; Matcher m = p . matcher ( value ) ; String result = value ; while ( m . find ( ) ) { int paramNumber = Integer . parseInt ( m . group ( _NUM ) ) ; if ( params == null || paramNumber >= params . length ) { throw new IllegalArgumentException ( _STR + m . group ( ) ) ; } result = result . replace ( m . group ( ) , params [ paramNumber ] ) ; } return result ; }
public Builder server ( String server ) { if ( server . endsWith ( _STR ) == _BOOL ) { server = server + _STR ; } this . server = server ; return this ; }
private ResponsePacket executeCount ( QueryTemplatePacket template , IJSpace space , Transaction txn ) throws SQLException { try { template . setRouting ( getRouting ( ) ) ; template . setExplainPlan ( getExplainPlan ( ) ) ; int count = space . count ( template , txn , getReadModifier ( ) ) ; ResponsePacket response = new ResponsePacket ( ) ; Object [ ] [ ] values = new Object [ _NUM ] [ _NUM ] ; values [ _NUM ] [ _NUM ] = count ; ResultEntry result = new ResultEntry ( new String [ ] { getCountColumnName ( ) } , new String [ ] { getCountColumnLabel ( ) } , new String [ ] { _STR } , values ) ; response . setResultEntry ( result ) ; return response ; } catch ( Exception e ) { if ( _logger . isLoggable ( Level . SEVERE ) ) { _logger . log ( Level . SEVERE , e . getMessage ( ) , e ) ; } throw new SQLException ( _STR + e , _STR , - _NUM ) ; } }
void deriveConfidenceValue ( double baseCount ) { if ( Utils . isMissingValue ( m_confidence ) && ! Utils . isMissingValue ( baseCount ) && baseCount > _NUM ) { m_confidence = m_recordCount / baseCount ; } }
public ModifiableSolrParams add ( String name , String ... val ) { String [ ] old = vals . put ( name , val ) ; if ( old != null ) { if ( val == null || val . length < _NUM ) { String [ ] both = new String [ old . length + _NUM ] ; System . arraycopy ( old , _NUM , both , _NUM , old . length ) ; both [ old . length ] = null ; vals . put ( name , both ) ; } else { String [ ] both = new String [ old . length + val . length ] ; System . arraycopy ( old , _NUM , both , _NUM , old . length ) ; System . arraycopy ( val , _NUM , both , old . length , val . length ) ; vals . put ( name , both ) ; } } return this ; }
private AStarNode jump ( int nextX , int nextY , int nextZ , int px , int pz ) { int y = nextY ; int dist = currentNode . getG ( ) + ( Math . abs ( nextX - currentNode . x ) + Math . abs ( y - currentNode . y ) + Math . abs ( nextZ - currentNode . z ) ) ; int dx = nextX - px ; int dz = nextZ - pz ; int py = y ; y = getGroundNodeHeight ( nextX , py , nextZ ) ; if ( y == _NUM ) { return null ; } else if ( targetNode . x == nextX && targetNode . z == nextZ && targetNode . y == y || dist >= MAX_SKIP_DISTANCE ) { return new AStarNode ( nextX , y , nextZ , dist , currentNode , targetNode ) ; } int nxY = ( dx != _NUM ) ? getGroundNodeHeight ( nextX + dx , y , nextZ ) : _NUM ; int nzY = ( dz != _NUM ) ? getGroundNodeHeight ( nextX , y , nextZ + dz ) : _NUM ; if ( dx != _NUM && dz != _NUM ) { if ( ( getGroundNodeHeight ( nextX - dx , y , nextZ + dz ) != _NUM && getGroundNodeHeight ( nextX - dx , py , nextZ ) == _NUM ) || ( getGroundNodeHeight ( nextX + dx , y , nextZ - dz ) != _NUM && getGroundNodeHeight ( nextX , py , nextZ - dz ) == _NUM ) ) { return new AStarNode ( nextX , y , nextZ , dist , currentNode , targetNode ) ; } } else { if ( dx != _NUM ) { if ( nxY != y || ( getGroundNodeHeight ( nextX , y , nextZ + _NUM ) == _NUM && getGroundNodeHeight ( nextX + dx , nxY , nextZ + _NUM ) != _NUM ) || ( getGroundNodeHeight ( nextX , y , nextZ - _NUM ) == _NUM && getGroundNodeHeight ( nextX + dx , nxY , nextZ - _NUM ) != _NUM ) ) { return new AStarNode ( nextX , y , nextZ , dist , currentNode , targetNode ) ; } } else { if ( nzY != y || ( getGroundNodeHeight ( nextX + _NUM , y , nextZ ) == _NUM && getGroundNodeHeight ( nextX + _NUM , nzY , nextZ + dz ) != _NUM ) || ( getGroundNodeHeight ( nextX - _NUM , y , nextZ ) == _NUM && getGroundNodeHeight ( nextX - _NUM , nzY , nextZ + dz ) != _NUM ) ) { return new AStarNode ( nextX , y , nextZ , dist , currentNode , targetNode ) ; } } } if ( dx != _NUM && dz != _NUM ) { AStarNode jx = jump ( nextX + dx , y , nextZ , nextX , nextZ ) ; AStarNode jy = jump ( nextX , y , nextZ + dz , nextX , nextZ ) ; if ( jx != null || jy != null ) { return new AStarNode ( nextX , y , nextZ , dist , currentNode , targetNode ) ; } } if ( nxY != _NUM || nzY != _NUM ) { return jump ( nextX + dx , y , nextZ + dz , nextX , nextZ ) ; } else { return null ; } }
public ByteArrayDataSource ( InputStream is , String type ) { try { ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ; int ch ; while ( ( ch = is . read ( ) ) != - _NUM ) { os . write ( ch ) ; } m_data = os . toByteArray ( ) ; } catch ( IOException ioex ) { log . log ( Level . WARNING , _STR , ioex ) ; } if ( type != null && type . length ( ) > _NUM ) m_type = type ; }
Object toType ( String value , String pattern , Locale locale ) { Calendar calendar = toCalendar ( value , pattern , locale ) ; return toType ( calendar ) ; }
public void addLimitLine ( LimitLine l ) { mLimitLines . add ( l ) ; if ( mLimitLines . size ( ) > _NUM ) { Log . e ( _STR , _STR ) ; } }
public void readData ( DataInput din ) throws IOException { function = din . readUnsignedShort ( ) ; data = ( short ) ( din . readShort ( ) & _NUM ) ; }
int readResults ( final byte [ ] b , final int bPos , final int bAvail , final Context context ) { if ( context . buffer != null ) { final int len = Math . min ( available ( context ) , bAvail ) ; System . arraycopy ( context . buffer , context . readPos , b , bPos , len ) ; context . readPos += len ; if ( context . readPos >= context . pos ) { context . buffer = null ; } return len ; } return context . eof ? EOF : _NUM ; }
public static int inflate ( byte [ ] previous , int previousLength , byte [ ] current , int currentLength , byte [ ] result ) { if ( previous == null ) { System . arraycopy ( current , _NUM , result , _NUM , currentLength ) ; return currentLength ; } int length = _NUM ; int start1 = _NUM ; int start2 = _NUM ; while ( start1 < previousLength && start2 < currentLength ) { int end1 = start1 ; while ( end1 < previousLength && previous [ end1 ] != _STR ) { end1 ++ ; } int end2 = start2 ; while ( end2 < currentLength && current [ end2 ] != _STR ) { end2 ++ ; } if ( current [ start2 ] == _STR && end2 == start2 + _NUM ) { for ( int i = start1 ; i < end1 ; i ++ ) result [ length ++ ] = previous [ i ] ; } else { for ( int i = start2 ; i < end2 ; i ++ ) result [ length ++ ] = current [ i ] ; } if ( end2 < currentLength ) result [ length ++ ] = _STR ; start1 = end1 + _NUM ; start2 = end2 + _NUM ; } return length ; }
public Object [ ] toArray ( ) { final Object [ ] items = this . items ; final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { final int count = this . count ; Object [ ] a = new Object [ count ] ; int n = items . length - takeIndex ; if ( count <= n ) { System . arraycopy ( items , takeIndex , a , _NUM , count ) ; } else { System . arraycopy ( items , takeIndex , a , _NUM , n ) ; System . arraycopy ( items , _NUM , a , n , count - n ) ; } return a ; } finally { lock . unlock ( ) ; } }
public void addContainer ( ImageContainer container ) { mContainers . add ( container ) ; }
public IOUtils ( ) { super ( ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . replaceData ( _NUM , _NUM , _STR ) ; childData = child . getData ( ) ; assertEquals ( _STR , _STR , childData ) ; }
private void Legends ( List < String > legends_list , List < Integer > color_code_list ) { textPaint . setColor ( Color . BLACK ) ; textPaint . setTextSize ( _NUM ) ; int left = ( int ) ( graphwidth * _NUM ) ; for ( int i = _NUM ; i < legends_list . size ( ) ; i ++ ) { String label = legends_list . get ( i ) ; float text_width = textPaint . measureText ( label , _NUM , label . length ( ) ) ; int color = color_code_list . get ( i ) ; if ( ! ( ( graphwidth - legendLeft ) > ( text_width + _NUM ) ) ) { legendTop -= _NUM ; legendLeft = left ; } addLegends ( canvas , color , legendTop , legendLeft , legendRight , legendBottom , label ) ; legendLeft += ( ( int ) text_width + _NUM ) ; } }
private void fetchMetadata ( TableMapLogEvent tableEvent ) throws SQLException , ReplicatorException { if ( metadataCache == null ) metadataCache = new TableMetadataCache ( _NUM ) ; Table table = metadataCache . retrieve ( tableEvent . getDatabaseName ( ) , tableEvent . getTableName ( ) ) ; if ( table == null || table . getTableId ( ) != tableEvent . getTableId ( ) ) { prepareMetadataConnection ( ) ; table = metadataConnection . findTable ( tableEvent . getDatabaseName ( ) , tableEvent . getTableName ( ) , _BOOL ) ; if ( table != null ) { table . setTableId ( tableEvent . getTableId ( ) ) ; metadataCache . store ( table ) ; } } else if ( logger . isDebugEnabled ( ) ) logger . debug ( _STR + tableEvent . getDatabaseName ( ) + _STR + tableEvent . getTableName ( ) + _STR ) ; if ( table == null ) { logger . warn ( _STR + tableEvent . getDatabaseName ( ) + _STR + tableEvent . getTableName ( ) ) ; } else { tableEvent . setTable ( table ) ; } }
public String encode ( ) { StringBuffer sb = new StringBuffer ( ) ; encode ( sb ) ; return sb . toString ( ) ; }
@ Override public int read ( byte [ ] buf , int offset , int len ) throws IOException { int available = _available ; if ( available > _NUM ) { len = Math . min ( len , available ) ; len = _next . read ( buf , offset , len ) ; if ( len > _NUM ) { _available -= len ; } } else if ( available == _NUM ) { _available = readChunkLength ( ) ; if ( _available > _NUM ) { len = Math . min ( len , _available ) ; len = _next . read ( buf , offset , len ) ; if ( len > _NUM ) _available -= len ; } else { _available = - _NUM ; len = - _NUM ; } } else { len = - _NUM ; } return len ; }
@ Override public void flush ( ) { FlushTask task ; synchronized ( logRecords ) { task = new FlushTask ( new ArrayList < String > ( logRecords ) ) ; logRecords . clear ( ) ; } task . run ( ) ; }
public static ArrayList < Page > pageCreatorButtons ( ArrayList < Page > pages , Item manualType ) { ArrayList < Page > newPages = new ArrayList < > ( ) ; int pageAmount = pages . size ( ) ; int times = _NUM ; while ( pageAmount > _NUM ) { ArrayList < Page > pagesTemp = new ArrayList < > ( ) ; pagesTemp . addAll ( pages . subList ( _NUM * times , ( pageAmount > _NUM ? _NUM + _NUM * times : _NUM * times + pageAmount ) ) ) ; int height = _NUM ; ArrayList < ManualWidgetBase > widgets = new ArrayList < > ( ) ; for ( Page page : pagesTemp ) { widgets . add ( new ButtonWidget ( _NUM , _NUM + height , page ) ) ; height += _NUM ; } newPages . add ( new Page ( _STR + times , ( ArrayList < ManualWidgetBase > ) widgets . clone ( ) , _BOOL , manualType ) ) ; widgets . clear ( ) ; pagesTemp . clear ( ) ; pageAmount -= _NUM ; times ++ ; } return newPages ; }
public void testPosPosFirstLonger ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; byte bBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . and ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
protected List < String > createNewExportMaskWorkflowForInitiators ( List < URI > initiatorURIs , ExportGroup exportGroup , Workflow workflow , Map < URI , Integer > volumeMap , StorageSystem storage , String token , String previousStep ) throws Exception { List < String > newSteps = new ArrayList < > ( ) ; if ( ! initiatorURIs . isEmpty ( ) ) { Map < String , List < URI > > computeResourceToInitiators = mapInitiatorsToComputeResource ( exportGroup , initiatorURIs ) ; for ( Map . Entry < String , List < URI > > resourceEntry : computeResourceToInitiators . entrySet ( ) ) { String computeKey = resourceEntry . getKey ( ) ; List < URI > computeInitiatorURIs = resourceEntry . getValue ( ) ; _log . info ( String . format ( _STR , computeKey ) ) ; GenExportMaskCreateWorkflowResult result = generateDeviceSpecificExportMaskCreateWorkFlow ( workflow , previousStep , storage , exportGroup , computeInitiatorURIs , volumeMap , token ) ; previousStep = result . getStepId ( ) ; newSteps . add ( previousStep ) ; } } if ( newSteps . isEmpty ( ) && previousStep != null ) { newSteps . add ( previousStep ) ; } return newSteps ; }
public boolean isLessThen ( Percent Percent ) { assertDefined ( ) ; BigDecimal thisValue = notNull ( this ) ; BigDecimal parameter = notNull ( Percent ) ; return ( thisValue . compareTo ( parameter ) < _NUM ) ; }
@ Override public URI toEdgeURI ( final Object key ) { return toURI ( key . toString ( ) ) ; }
short readShort ( ) throws IOException { mDexFile . readFully ( tmpBuf , _NUM , _NUM ) ; if ( isBigEndian ) { return ( short ) ( ( tmpBuf [ _NUM ] & _NUM ) | ( ( tmpBuf [ _NUM ] & _NUM ) << _NUM ) ) ; } else { return ( short ) ( ( tmpBuf [ _NUM ] & _NUM ) | ( ( tmpBuf [ _NUM ] & _NUM ) << _NUM ) ) ; } }
public static List < INaviProject > loadProjects ( final AbstractSQLProvider provider , final DebuggerTemplateManager debuggerManager ) throws CouldntLoadDataException { PostgreSQLDatabaseFunctions . checkArguments ( provider , debuggerManager ) ; final CConnection connection = provider . getConnection ( ) ; final List < INaviProject > projects = new ArrayList < > ( ) ; if ( ! PostgreSQLHelpers . hasTable ( connection , CTableNames . PROJECTS_TABLE ) ) { return projects ; } String query = _STR + _STR + CTableNames . ADDRESS_SPACES_TABLE + _STR + CTableNames . PROJECTS_TABLE + _STR + _STR + CTableNames . PROJECTS_TABLE ; try ( ResultSet resultSet = connection . executeQuery ( query , _BOOL ) ) { while ( resultSet . next ( ) ) { final int projectId = resultSet . getInt ( _STR ) ; final String name = PostgreSQLHelpers . readString ( resultSet , _STR ) ; final String description = PostgreSQLHelpers . readString ( resultSet , _STR ) ; final int addressSpaceCount = resultSet . getInt ( _STR ) ; final Timestamp creationDate = resultSet . getTimestamp ( _STR ) ; final Timestamp modificationDate = resultSet . getTimestamp ( _STR ) ; final List < DebuggerTemplate > debuggers = PostgreSQLDatabaseFunctions . getAssignedDebuggers ( connection , projectId , debuggerManager ) ; projects . add ( new CProject ( projectId , name , description == null ? _STR : description , creationDate , modificationDate , addressSpaceCount , debuggers , provider ) ) ; } } catch ( final SQLException e ) { throw new CouldntLoadDataException ( e ) ; } return new ArrayList < INaviProject > ( projects ) ; }
public String syllabify ( String phoneString ) { LinkedList < String > phoneList = splitIntoAllophones ( phoneString ) ; syllabify ( phoneList ) ; StringBuilder sb = new StringBuilder ( ) ; for ( String p : phoneList ) { if ( sb . length ( ) > _NUM ) sb . append ( _STR ) ; sb . append ( p ) ; } return sb . toString ( ) ; }
@ Override protected Node removeFromFrontier ( ) { cleanUpFrontier ( ) ; Node result = frontier . remove ( ) ; updateMetrics ( frontier . size ( ) ) ; setExplored ( result ) ; return result ; }
public static boolean isFile ( String path ) { File f = new File ( path ) ; return f . isFile ( ) ; }
public boolean equals ( Object object ) { if ( ! ( object instanceof ObjectInstance ) ) { return _BOOL ; } ObjectInstance val = ( ObjectInstance ) object ; if ( ! name . equals ( val . getObjectName ( ) ) ) return _BOOL ; if ( className == null ) return ( val . getClassName ( ) == null ) ; return className . equals ( val . getClassName ( ) ) ; }
public ZookeeperEmbedded ( int port ) { this . port = port ; this . logDir = new File ( System . getProperty ( _STR ) , _STR + port ) ; }
public BasicCondition ( String variable , Value value , Relation relation ) { this . variable = Template . create ( variable ) ; this . templateValue = Template . create ( value . toString ( ) ) ; this . groundValue = value ; this . relation = relation ; }
public static Set < String > readStopwordsPath ( Path path , boolean lowercase ) throws IOException { return readStopwordsInputStream ( Files . newInputStream ( path ) , lowercase ) ; }
@ Override public String toString ( ) { StringBuilder sRep = new StringBuilder ( ) ; sRep . append ( _STR ) ; sRep . append ( articleID ) ; sRep . append ( _STR ) ; sRep . append ( revisionCounter ) ; sRep . append ( _STR ) ; sRep . append ( timeStamp ) ; sRep . append ( _STR ) ; sRep . append ( revisionId ) ; if ( revisionText != null ) { sRep . append ( _STR ) ; sRep . append ( revisionText . length ( ) ) ; } sRep . append ( _STR ) ; return sRep . toString ( ) ; }
private void breakBarrier ( ) { generation . broken = _BOOL ; count = parties ; trip . signalAll ( ) ; }
public List < Entry > filter ( List < Entry > points , double tolerance ) { if ( tolerance <= _NUM ) return points ; keep = new boolean [ points . size ( ) ] ; switch ( mType ) { case DOUGLAS_PEUCKER : return reduceWithDouglasPeuker ( points , tolerance ) ; case NONE : return points ; default : return points ; } }
protected void sendLogEvent ( String component , String message , Callback < Object > callback ) { String syslogMessage = String . format ( Locale . US , _STR , getSysLogFormattedDate ( ) , utils . getApplicationName ( context ) , component , message ) ; sendDataOverUDP ( syslogMessage , callback ) ; }
public static < T extends Throwable > T writeStackTraces ( T throwable , StreamOutput out ) throws IOException { StackTraceElement [ ] stackTrace = throwable . getStackTrace ( ) ; out . writeVInt ( stackTrace . length ) ; for ( StackTraceElement element : stackTrace ) { out . writeString ( element . getClassName ( ) ) ; out . writeOptionalString ( element . getFileName ( ) ) ; out . writeString ( element . getMethodName ( ) ) ; out . writeVInt ( element . getLineNumber ( ) ) ; } Throwable [ ] suppressed = throwable . getSuppressed ( ) ; out . writeVInt ( suppressed . length ) ; for ( Throwable t : suppressed ) { out . writeThrowable ( t ) ; } return throwable ; }
public DistributedLogMultiStreamWriter build ( ) { Preconditions . checkArgument ( ( null != _streams && ! _streams . isEmpty ( ) ) , _STR ) ; Preconditions . checkNotNull ( _client , _STR ) ; Preconditions . checkNotNull ( _codec , _STR ) ; Preconditions . checkArgument ( _firstSpeculativeTimeoutMs > _NUM && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > _NUM && _maxSpeculativeTimeoutMs < _requestTimeoutMs , _STR ) ; return new DistributedLogMultiStreamWriter ( _streams , _client , Math . min ( _bufferSize , MAX_LOGRECORDSET_SIZE ) , _flushIntervalMicros , _requestTimeoutMs , _firstSpeculativeTimeoutMs , _maxSpeculativeTimeoutMs , _speculativeBackoffMultiplier , _codec , _ticker , _executorService ) ; }
public static String numberToString ( Number number ) throws JSONException { if ( number == null ) { throw new JSONException ( _STR ) ; } testValidity ( number ) ; String string = number . toString ( ) ; if ( string . indexOf ( _STR ) > _NUM && string . indexOf ( _STR ) < _NUM && string . indexOf ( _STR ) < _NUM ) { while ( string . endsWith ( _STR ) ) { string = string . substring ( _NUM , string . length ( ) - _NUM ) ; } if ( string . endsWith ( _STR ) ) { string = string . substring ( _NUM , string . length ( ) - _NUM ) ; } } return string ; }
private ImageElement ( int AD_PrintFormatItem_ID ) { loadAttachment ( AD_PrintFormatItem_ID ) ; }
public ThreadRegisterValues ( final ThreadRegisters values ) { m_tid = values . getTid ( ) ; for ( final RegisterValue value : values . getRegisters ( ) ) { m_values . add ( new Register ( value ) ) ; } }
public LauncherDiscoveryRequestBuilder configurationParameters ( Map < String , String > configurationParameters ) { Preconditions . notNull ( configurationParameters , _STR ) ; configurationParameters . forEach ( null ) ; return this ; }
public boolean isTriggered ( ) { return checkbox . isSelected ( ) ; }
public void addAll ( int index , int [ ] data ) { int dataLen = data . length ; if ( dataLen == _NUM ) { return ; } int newcap = size + ( int ) ( dataLen * _NUM ) + _NUM ; ensureCapacity ( newcap ) ; System . arraycopy ( array , index , array , index + dataLen , size - index ) ; System . arraycopy ( data , _NUM , array , index , dataLen ) ; size += dataLen ; }
public int read ( byte [ ] b ) throws java . io . IOException { return read ( b , _NUM , b . length ) ; }
public static void e ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_ERROR ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . e ( tag , msg ) ; }
private static float calculateScore ( final int [ ] playCounts ) { if ( playCounts == null ) { return _NUM ; } float score = _NUM ; for ( int i = _NUM ; i < Math . min ( playCounts . length , NUM_WEEKS ) ; i ++ ) { score += playCounts [ i ] * getScoreMultiplierForWeek ( i ) ; } return score ; }
public void removeScanningCallback ( OneSheeldScanningCallback scanningCallback ) { if ( scanningCallback != null && scanningCallbacks . contains ( scanningCallback ) ) scanningCallbacks . remove ( scanningCallback ) ; }
public void paintRect ( Graphics g , JComponent c , int x , int y , int w , int h ) { Rectangle bounds = c . getBounds ( ) ; check ( bounds ) ; g . drawImage ( m_backImage , x , y , x + w , h + y , x , y , x + w , y + h , c ) ; }
@ Override public final void sample ( ) { _value = _acquireCount . get ( ) - _releaseCount . get ( ) ; }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( _STR ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
private boolean isPageBreak ( int row ) { for ( int i = _NUM ; i < m_pageBreak . size ( ) ; i ++ ) { Integer rr = ( Integer ) m_pageBreak . get ( i ) ; if ( rr . intValue ( ) + _NUM == row ) return _BOOL ; else if ( rr . intValue ( ) > row ) return _BOOL ; } return _BOOL ; }
public ExecutorService shutdown ( ) { pool . shutdown ( ) ; return pool ; }
public static boolean isPropositionSymbolIdentifierPart ( char ch ) { return Character . isJavaIdentifierPart ( ch ) ; }
public static void o ( Zdiagmat D ) { o ( D , Parameters . OutputFieldWidth , Parameters . OutputFracPlaces ) ; }
public int search ( String txt ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int skip ; for ( int i = _NUM ; i <= N - M ; i += skip ) { skip = _NUM ; for ( int j = M - _NUM ; j >= _NUM ; j -- ) { if ( pat . charAt ( j ) != txt . charAt ( i + j ) ) { skip = Math . max ( _NUM , j - right [ txt . charAt ( i + j ) ] ) ; break ; } } if ( skip == _NUM ) return i ; } return N ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( _NUM ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; return newVector . elements ( ) ; }
public String toChars ( int [ ] indices ) { StringBuilder s = new StringBuilder ( indices . length ) ; for ( int i = _NUM ; i < indices . length ; i ++ ) s . append ( toChar ( indices [ i ] ) ) ; return s . toString ( ) ; }
public static final String trunc ( final String str , final int length ) { if ( str == null ) { return str ; } if ( str . length ( ) <= length ) { return str ; } return str . substring ( _NUM , length ) ; }
public void clearTransactions ( int fromHeight ) { lock . lock ( ) ; try { if ( fromHeight == _NUM ) { unspent . clear ( ) ; spent . clear ( ) ; pending . clear ( ) ; dead . clear ( ) ; transactions . clear ( ) ; } else { throw new UnsupportedOperationException ( ) ; } } finally { lock . unlock ( ) ; } }
@ Override public boolean load ( final Player player , final List < String > args ) { groovyBinding . setVariable ( _STR , player ) ; if ( args != null ) { groovyBinding . setVariable ( _STR , args . toArray ( new String [ args . size ( ) ] ) ) ; } else { groovyBinding . setVariable ( _STR , new String [ _NUM ] ) ; } final GroovyShell interp = new GroovyShell ( groovyBinding ) ; boolean ret = _BOOL ; preExecute ( player , args ) ; try { final File f = new File ( groovyScript ) ; interp . evaluate ( f ) ; } catch ( final Exception e ) { logger . error ( _STR + groovyScript , e ) ; setMessage ( e . getMessage ( ) ) ; ret = _BOOL ; } catch ( final Error e ) { logger . error ( _STR + groovyScript , e ) ; setMessage ( e . getMessage ( ) ) ; ret = _BOOL ; } postExecute ( player , args , ret ) ; return ( ret ) ; }
private void startAnimation ( ) { ValueAnimator animator = ValueAnimator . ofFloat ( _NUM ) ; ArrayList < NameValuesHolder > nameValueList = ( ArrayList < NameValuesHolder > ) mPendingAnimations . clone ( ) ; mPendingAnimations . clear ( ) ; int propertyMask = _NUM ; int propertyCount = nameValueList . size ( ) ; for ( int i = _NUM ; i < propertyCount ; ++ i ) { NameValuesHolder nameValuesHolder = nameValueList . get ( i ) ; propertyMask |= nameValuesHolder . mNameConstant ; } mAnimatorMap . put ( animator , new PropertyBundle ( propertyMask , nameValueList ) ) ; animator . addUpdateListener ( mAnimatorEventListener ) ; animator . addListener ( mAnimatorEventListener ) ; if ( mStartDelaySet ) { animator . setStartDelay ( mStartDelay ) ; } if ( mDurationSet ) { animator . setDuration ( mDuration ) ; } if ( mInterpolatorSet ) { animator . setInterpolator ( mInterpolator ) ; } animator . start ( ) ; }
private void cleanDirtyRegion ( float eventX , float eventY ) { dirtyRect . left = Math . min ( lastTouchX , eventX ) ; dirtyRect . right = Math . max ( lastTouchX , eventX ) ; dirtyRect . top = Math . min ( lastTouchY , eventY ) ; dirtyRect . bottom = Math . max ( lastTouchY , eventY ) ; }
public Sort ( String [ ] fields ) { this ( fields , new boolean [ fields . length ] ) ; Arrays . fill ( m_ascend , _BOOL ) ; }
@ Override public boolean wasSuccessful ( ) { return isFinished ( ) && getCurrentPoints ( ) >= successThreashold ; }
void startLocatingPhone ( ) { Intent intent = new Intent ( sContext , LocationService . class ) ; intent . setAction ( LocationService . START_SERVICE ) ; intent . putExtra ( _STR , this . mAnswerTo ) ; sContext . startService ( intent ) ; }
public void deleteResourceConfig ( String clusterName , ResourceType resourceType , String dsName ) throws ConfigurationException { if ( getClusterHome ( ) == null ) { throw new ConfigurationException ( _STR ) ; } File resources = getDir ( getResourceConfigDirName ( getClusterHome ( ) , clusterName , resourceType ) ) ; String delFileName = resources . getAbsolutePath ( ) + File . separator + dsName + _STR ; delFile ( delFileName ) ; }
public BusMovement ( BusMovement proto ) { super ( proto ) ; this . controlSystem = proto . controlSystem ; this . id = nextID ++ ; controlSystem . registerBus ( this ) ; startMode = _BOOL ; }
private int removeNext ( ) { if ( lastUsageDates . isEmpty ( ) ) { return INVALID_SIZE ; } Long oldestUsage = null ; File mostLongUsedFile = null ; Set < Entry < File , Long > > entries = lastUsageDates . entrySet ( ) ; synchronized ( lastUsageDates ) { for ( Entry < File , Long > entry : entries ) { if ( mostLongUsedFile == null ) { mostLongUsedFile = entry . getKey ( ) ; oldestUsage = entry . getValue ( ) ; } else { Long lastValueUsage = entry . getValue ( ) ; if ( lastValueUsage < oldestUsage ) { oldestUsage = lastValueUsage ; mostLongUsedFile = entry . getKey ( ) ; } } } } int fileSize = _NUM ; if ( mostLongUsedFile != null ) { if ( mostLongUsedFile . exists ( ) ) { fileSize = getSize ( mostLongUsedFile ) ; if ( mostLongUsedFile . delete ( ) ) { lastUsageDates . remove ( mostLongUsedFile ) ; } } else { lastUsageDates . remove ( mostLongUsedFile ) ; } } return fileSize ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
private void createGui ( ) { for ( final IResultsPanel panel : m_factory ) { m_tabbedPane . addTab ( panel . getTitle ( ) , panel . getComponent ( ) ) ; } add ( m_tabbedPane , BorderLayout . CENTER ) ; m_tabbedPane . setVisible ( _BOOL ) ; }
public static float generateRandomFloatBetween ( float lowerLimit , float upperLimit ) { return lowerLimit + ( ( upperLimit - lowerLimit ) * _r . nextFloat ( ) ) ; }
public SGenItemProviderAdapterFactory ( ) { supportedTypes . add ( IEditingDomainItemProvider . class ) ; supportedTypes . add ( IStructuredItemContentProvider . class ) ; supportedTypes . add ( ITreeItemContentProvider . class ) ; supportedTypes . add ( IItemLabelProvider . class ) ; supportedTypes . add ( IItemPropertySource . class ) ; }
private void kdRangeSearch ( int left , int right , int axis , O query , ModifiableDoubleDBIDList res , DBIDArrayIter iter , double radius ) { if ( right - left <= leafsize ) { for ( iter . seek ( left ) ; iter . getOffset ( ) < right ; iter . advance ( ) ) { double dist = norm . distance ( query , relation . get ( iter ) ) ; countObjectAccess ( ) ; countDistanceComputation ( ) ; if ( dist <= radius ) { res . add ( dist , iter ) ; } } return ; } final int middle = ( left + right ) > > > _NUM ; O split = relation . get ( iter . seek ( middle ) ) ; countObjectAccess ( ) ; final double delta = split . doubleValue ( axis ) - query . doubleValue ( axis ) ; final boolean onleft = ( delta >= _NUM ) ; final boolean onright = ( delta <= _NUM ) ; final boolean close = ( Math . abs ( delta ) <= radius ) ; final int next = ( axis + _NUM ) % dims ; if ( close ) { double dist = norm . distance ( query , split ) ; countDistanceComputation ( ) ; if ( dist <= radius ) { assert ( iter . getOffset ( ) == middle ) ; res . add ( dist , iter ) ; } } if ( left < middle && ( onleft || close ) ) { kdRangeSearch ( left , middle , next , query , res , iter , radius ) ; } if ( middle + _NUM < right && ( onright || close ) ) { kdRangeSearch ( middle + _NUM , right , next , query , res , iter , radius ) ; } }
private void handleStartElement ( XMLStreamReader parser , Set < Node > childrenFound , Handler handler , Map < String , Object > values , Stack < Set < String > > stack , boolean recordStarted ) throws IOException , XMLStreamException { Node n = getMatchingNode ( parser , childNodes ) ; Map < String , Object > decends = new HashMap < > ( ) ; if ( n != null ) { childrenFound . add ( n ) ; n . parse ( parser , handler , values , stack , recordStarted ) ; return ; } Node dn = this ; do { if ( dn . wildCardNodes != null ) { n = getMatchingNode ( parser , dn . wildCardNodes ) ; if ( n != null ) { childrenFound . add ( n ) ; n . parse ( parser , handler , values , stack , recordStarted ) ; break ; } for ( Node nn : dn . wildCardNodes ) decends . put ( nn . name , nn ) ; } dn = dn . wildAncestor ; } while ( dn != null ) ; if ( n == null ) { int count = _NUM ; while ( count != _NUM ) { int token = parser . next ( ) ; if ( token == START_ELEMENT ) { Node nn = ( Node ) decends . get ( parser . getLocalName ( ) ) ; if ( nn != null ) { childrenFound . add ( nn ) ; nn . parse ( parser , handler , values , stack , recordStarted ) ; } else count ++ ; } else if ( token == END_ELEMENT ) count -- ; } } }
private void connect ( ) { if ( ! connected ) { updateInfo ( ) ; String connectString = _STR + connectAddress + _STR + connectPort ; if ( clientId == null || clientId . length ( ) < _NUM ) { out ( getDate ( ) + Messages . MqttClientView_15 + connectString + Messages . MqttClientView_16 ) ; return ; } try { if ( firstConnect ) { mqttClient = new MqttClient ( connectString , clientId ) ; mqttClient . setCallback ( this ) ; firstConnect = _BOOL ; } } catch ( MqttException e ) { out ( getDate ( ) + Messages . MqttClientView_17 + e . getMessage ( ) ) ; e . printStackTrace ( ) ; } connOpts = new MqttConnectOptions ( ) ; connOpts . setCleanSession ( cleanStart ) ; connOpts . setConnectionTimeout ( _NUM ) ; connOpts . setKeepAliveInterval ( keepAlive ) ; if ( username . length ( ) > _NUM && password . length ( ) > _NUM ) { connOpts . setPassword ( password . toCharArray ( ) ) ; connOpts . setUserName ( username ) ; } if ( useWill ) { if ( willTopic == null || willTopic . equals ( _STR ) ) { out ( Messages . MqttClientView_19 ) ; return ; } connOpts . setWill ( mqttClient . getTopic ( willTopic ) , willMessage . getBytes ( ) , willQos , willRetain ) ; } try { out ( getDate ( ) + Messages . MqttClientView_20 + connectString ) ; mqttClient . connect ( connOpts ) ; connected = _BOOL ; out ( getDate ( ) + Messages . MqttClientView_21 + clientId ) ; } catch ( MqttException e ) { out ( getDate ( ) + Messages . MqttClientView_22 + e . getMessage ( ) ) ; e . printStackTrace ( ) ; } } else { out ( Messages . MqttClientView_23 ) ; } }
static void checkTypeRefAndPath ( int typeRef , TypePath typePath ) { int mask = _NUM ; switch ( typeRef > > > _NUM ) { case TypeReference . CLASS_TYPE_PARAMETER : case TypeReference . METHOD_TYPE_PARAMETER : case TypeReference . METHOD_FORMAL_PARAMETER : mask = _NUM ; break ; case TypeReference . FIELD : case TypeReference . METHOD_RETURN : case TypeReference . METHOD_RECEIVER : case TypeReference . LOCAL_VARIABLE : case TypeReference . RESOURCE_VARIABLE : case TypeReference . INSTANCEOF : case TypeReference . NEW : case TypeReference . CONSTRUCTOR_REFERENCE : case TypeReference . METHOD_REFERENCE : mask = _NUM ; break ; case TypeReference . CLASS_EXTENDS : case TypeReference . CLASS_TYPE_PARAMETER_BOUND : case TypeReference . METHOD_TYPE_PARAMETER_BOUND : case TypeReference . THROWS : case TypeReference . EXCEPTION_PARAMETER : mask = _NUM ; break ; case TypeReference . CAST : case TypeReference . CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT : case TypeReference . METHOD_INVOCATION_TYPE_ARGUMENT : case TypeReference . CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT : case TypeReference . METHOD_REFERENCE_TYPE_ARGUMENT : mask = _NUM ; break ; default : throw new IllegalArgumentException ( _STR + Integer . toHexString ( typeRef > > > _NUM ) ) ; } if ( ( typeRef & ~ mask ) != _NUM ) { throw new IllegalArgumentException ( _STR + Integer . toHexString ( typeRef ) ) ; } if ( typePath != null ) { for ( int i = _NUM ; i < typePath . getLength ( ) ; ++ i ) { int step = typePath . getStep ( i ) ; if ( step != TypePath . ARRAY_ELEMENT && step != TypePath . INNER_TYPE && step != TypePath . TYPE_ARGUMENT && step != TypePath . WILDCARD_BOUND ) { throw new IllegalArgumentException ( _STR + i + _STR + typePath ) ; } if ( step != TypePath . TYPE_ARGUMENT && typePath . getStepArgument ( i ) != _NUM ) { throw new IllegalArgumentException ( _STR + i + _STR + typePath ) ; } } } }
synchronized void addTracer ( Tracer tracer ) { if ( curTracers . add ( tracer ) ) { LOG . trace ( toString ( ) + _STR + tracer . toString ( ) ) ; } }
private void grow ( ) { int newCap = ( entries . length << _NUM ) + _NUM ; Object [ ] newEntries = new Object [ newCap ] ; System . arraycopy ( entries , _NUM , newEntries , _NUM , size ) ; entries = newEntries ; }
public void damage ( double value ) { setValue ( Math . max ( _NUM , getValue ( ) - value ) ) ; }
@ Ignore ( _STR ) @ Test public void testConcurrentEventsOnEmptyRegion ( ) { versionTestConcurrentEventsOnEmptyRegion ( ) ; }
public Graph ( ) { roots = new ArrayList < Node > ( ) ; nodes = new ArrayList < Node > ( ) ; string = _STR ; }
private static String trimVersion ( String apiVersion ) { if ( apiVersion == null ) { return null ; } else { String [ ] versionParts = apiVersion . split ( _STR ) ; return versionParts [ versionParts . length - _NUM ] ; } }
private Inventory queryInventory ( boolean querySkuDetails , List < String > moreItemSkus ) throws IabException { checkNotDisposed ( ) ; checkSetupDone ( _STR ) ; try { Inventory inv = new Inventory ( ) ; int r = queryPurchases ( inv , ITEM_TYPE_INAPP ) ; if ( r != BILLING_RESPONSE_RESULT_OK ) { throw new IabException ( r , _STR ) ; } if ( querySkuDetails ) { r = querySkuDetails ( ITEM_TYPE_INAPP , inv , moreItemSkus ) ; if ( r != BILLING_RESPONSE_RESULT_OK ) { throw new IabException ( r , _STR ) ; } } if ( mSubscriptionsSupported ) { r = queryPurchases ( inv , ITEM_TYPE_SUBS ) ; if ( r != BILLING_RESPONSE_RESULT_OK ) { throw new IabException ( r , _STR ) ; } if ( querySkuDetails ) { r = querySkuDetails ( ITEM_TYPE_SUBS , inv , moreItemSkus ) ; if ( r != BILLING_RESPONSE_RESULT_OK ) { throw new IabException ( r , _STR ) ; } } } return inv ; } catch ( RemoteException e ) { throw new IabException ( IABHELPER_REMOTE_EXCEPTION , _STR , e ) ; } catch ( JSONException e ) { throw new IabException ( IABHELPER_BAD_RESPONSE , _STR , e ) ; } }
@ Override public void incomingObject ( IAnalyzedInterval analyzedInterval ) throws AdeException { if ( ! m_percentilesWithEmptyIntervals && analyzedInterval . getNumUniqueMessageIds ( ) == _NUM ) { return ; } final double rawScore = calcRawScore ( analyzedInterval ) ; if ( ! SeenHugeLogProb ( analyzedInterval ) ) { m_rawScores . add ( rawScore ) ; ++ m_intervalCount ; } }
public static String readFileAsString ( File file , String encoding ) throws IOException { ByteBuffer buffer = readFile ( file ) ; if ( null == encoding ) { encoding = _STR ; } String converted = new String ( buffer . array ( ) , encoding ) ; return converted ; }
public EmBayesEstimatorEditor ( EmBayesEstimatorWrapper emBayesEstWrapper ) { this ( emBayesEstWrapper . getEstimateBayesIm ( ) , emBayesEstWrapper . getDataSet ( ) ) ; }
private boolean saveDataToDisk ( boolean exit , boolean complete , String updatedSaveName ) { return saveDataToDisk ( exit , complete , updatedSaveName , _BOOL ) ; }
public static final void writeMapXml ( Map val , String name , XmlSerializer out , WriteMapCallback callback ) throws XmlPullParserException , java . io . IOException { if ( val == null ) { out . startTag ( null , _STR ) ; out . endTag ( null , _STR ) ; return ; } out . startTag ( null , _STR ) ; if ( name != null ) { out . attribute ( null , _STR , name ) ; } writeMapXml ( val , out , callback ) ; out . endTag ( null , _STR ) ; }
public boolean needPreloadKey ( int idx ) { return preloadKeys != null && preloadKeys . get ( idx ) ; }
public int generateChallengeToken ( InetSocketAddress address ) { int token = random . nextInt ( ) ; challengeTokens . put ( address , token ) ; return token ; }
@ Override public void perform ( IR ir ) { for ( Enumeration < BasicBlock > e = ir . getBasicBlocks ( ) ; e . hasMoreElements ( ) ; ) { BasicBlock bb = e . nextElement ( ) ; if ( bb . isEmpty ( ) ) continue ; container . counter2 ++ ; if ( bb . getInfrequent ( ) ) { container . counter1 ++ ; if ( ir . options . FREQ_FOCUS_EFFORT ) continue ; } for ( Enumeration < Instruction > ie = bb . forwardInstrEnumerator ( ) ; ie . hasMoreElements ( ) ; ) { Instruction s = ie . nextElement ( ) ; if ( TypeCheck . conforms ( s ) && ( invertNullAndTypeChecks ( s ) || pushTypeCheckBelowIf ( s , ir ) ) ) { ie = bb . forwardInstrEnumerator ( ) ; } } } }
void addFillComponents ( Container panel , int [ ] cols , int [ ] rows ) { Dimension filler = new Dimension ( _NUM , _NUM ) ; boolean filled_cell_11 = _BOOL ; CellConstraints cc = new CellConstraints ( ) ; if ( cols . length > _NUM && rows . length > _NUM ) { if ( cols [ _NUM ] == _NUM && rows [ _NUM ] == _NUM ) { panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , _NUM ) ) ; filled_cell_11 = _BOOL ; } } for ( int index = _NUM ; index < cols . length ; index ++ ) { if ( cols [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( cols [ index ] , _NUM ) ) ; } for ( int index = _NUM ; index < rows . length ; index ++ ) { if ( rows [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , rows [ index ] ) ) ; } }
public void runWithRetries ( RetryableTask task ) throws Exception { boolean maxSleepIntervalHit = _BOOL ; for ( int i = _NUM ; i < numAttempts ; i ++ ) { try { task . run ( ) ; return ; } catch ( Exception e ) { if ( i == numAttempts - _NUM ) { throw e ; } int sleepTime ; if ( maxSleepIntervalHit ) { sleepTime = maxSleepInterval ; } else { sleepTime = baseSleepInterval * ( int ) Math . pow ( _NUM , i ) ; } LOG . error ( _STR + sleepTime + _STR , e ) ; try { Thread . sleep ( sleepTime * _NUM ) ; } catch ( InterruptedException ie ) { LOG . error ( _STR , ie ) ; throw ie ; } } } }
public Object pack ( ) { if ( collection ) { List l = ( List ) value ; if ( Types . isArray ( type ) ) { Object [ ] o = ( Object [ ] ) Array . newInstance ( itemType , l . size ( ) ) ; l . toArray ( o ) ; return o ; } } return value ; }
public void removeRequest ( InterruptRequest interruptRequest ) { synchronized ( interruptRequestQueue ) { interruptRequestQueue . remove ( interruptRequest ) ; } }
@ Override public final void onHeatmapFailed ( ) { updatePending = _BOOL ; }
@ SuppressLint ( _STR ) @ Nullable public static Drawable inflate ( boolean forceSystemHandlingWhenPossible , @ NonNull Resources resources , @ DrawableRes int id ) { boolean systemHandling = isSystemHandling ( forceSystemHandlingWhenPossible ) ; Log . d ( LOG_TAG , String . format ( _STR , Integer . toHexString ( id ) , systemHandling ) ) ; if ( systemHandling ) { return resources . getDrawable ( id , null ) ; } try { return VectorDrawable . create ( resources , id ) ; } catch ( Resources . NotFoundException e ) { return null ; } }
public static long objectFieldOffset ( Field field ) { return UNSAFE . objectFieldOffset ( field ) ; }
public void addAnnotation ( String annotation , double x , double y ) { mAnnotations . add ( annotation ) ; mStringXY . put ( x , y ) ; }
protected synchronized void write ( long offset , byte [ ] b ) throws IOException { if ( byteBuffer != null ) { byteBuffer . position ( ( int ) offset ) ; byteBuffer . put ( b ) ; } else { throw new IOException ( _STR + getPath ( ) + _STR ) ; } }
public static byte [ ] ivCipherConcat ( byte [ ] iv , byte [ ] cipherText ) { byte [ ] combined = new byte [ iv . length + cipherText . length ] ; System . arraycopy ( iv , _NUM , combined , _NUM , iv . length ) ; System . arraycopy ( cipherText , _NUM , combined , iv . length , cipherText . length ) ; return combined ; }
long timestamp ( long timestamp ) { this . timestamp = Math . max ( this . timestamp , timestamp ) ; return this . timestamp ; }
public MaterialPackage ( MaterialPackageBO materialPackageBO , List < GenericTrack > genericTracks ) { super ( materialPackageBO ) ; this . materialPackageBO = materialPackageBO ; this . genericTracks = Collections . unmodifiableList ( genericTracks ) ; }
public Edge findEdgeInSameDirection ( Coordinate p0 , Coordinate p1 ) { for ( int i = _NUM ; i < edges . size ( ) ; i ++ ) { Edge e = ( Edge ) edges . get ( i ) ; Coordinate [ ] eCoord = e . getCoordinates ( ) ; if ( matchInSameDirection ( p0 , p1 , eCoord [ _NUM ] , eCoord [ _NUM ] ) ) return e ; if ( matchInSameDirection ( p0 , p1 , eCoord [ eCoord . length - _NUM ] , eCoord [ eCoord . length - _NUM ] ) ) return e ; } return null ; }
public void acquireProbabilities ( final String string ) { if ( string . length ( ) < _NUM ) { return ; } for ( int i = _NUM ; i < string . length ( ) ; ++ i ) { final char previousChar = string . charAt ( i - _NUM ) ; final char currentChar = string . charAt ( i - _NUM ) ; final char nextChar = string . charAt ( i ) ; final String key = previousChar + _STR + currentChar ; if ( ! sequences . contains ( key ) ) { sequences . add ( key ) ; } HashMap < Character , Integer > probabilities = sequenceProbabilities . get ( key ) ; if ( probabilities == null ) { probabilities = new HashMap < > ( ) ; sequenceProbabilities . put ( key , probabilities ) ; } int existingValue = probabilities . getOrDefault ( nextChar , _NUM ) ; ++ existingValue ; probabilities . put ( nextChar , existingValue ) ; } }
protected final void resolveIssue ( HealthIssue healthIssue ) { EventBus eventBus ; boolean wasIssueActive ; synchronized ( mLock ) { if ( mHealthEventBus == null ) { LOG . w ( _STR + _STR , healthIssue . toString ( ) ) ; return ; } eventBus = mHealthEventBus ; wasIssueActive = mActiveIssues . remove ( healthIssue ) ; } if ( wasIssueActive ) { eventBus . post ( healthIssue . resolved ) ; } }
public static byte [ ] decode ( String s ) { return decode ( s , NO_OPTIONS ) ; }
private static boolean test ( ODatabaseDocumentPool pool , String dbURL , String user , String password , boolean finalTry ) { ODatabaseDocumentTx db = null ; try { logger . info ( _STR ) ; db = pool . acquire ( dbURL , user , password ) ; Iterator < ODocument > iter = db . browseClass ( _STR ) ; if ( iter . hasNext ( ) ) { iter . next ( ) ; } } catch ( OException ex ) { if ( finalTry ) { logger . info ( _STR , ex ) ; } else { logger . debug ( _STR , ex ) ; } return _BOOL ; } finally { if ( db != null ) { db . close ( ) ; } } return _BOOL ; }
@ Override public void agg ( Object newVal ) { if ( newVal instanceof byte [ ] ) { byte [ ] values = ( byte [ ] ) newVal ; ByteBuffer buffer = ByteBuffer . wrap ( values ) ; buffer . rewind ( ) ; while ( buffer . hasRemaining ( ) ) { valueSet . add ( buffer . getInt ( ) ) ; } return ; } else { double value = new Double ( newVal . toString ( ) ) ; agg ( value ) ; } }
private void displayEasterEgg ( CommandSender sender ) { sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; sender . sendMessage ( StringEscapeUtils . unescapeJava ( _STR ) ) ; }
public boolean isUnparsedEntity ( String entityName ) { Entity entity = ( Entity ) fEntities . get ( entityName ) ; if ( entity == null ) { return _BOOL ; } return entity . isUnparsed ( ) ; }
public void flush ( ) throws IOException { out . flush ( ) ; }
private static String urlEncode ( final String text ) throws UnsupportedEncodingException { return URLEncoder . encode ( text , _STR ) ; }
protected void processFocusEvent ( FocusEvent evt ) { super . processFocusEvent ( evt ) ; if ( evt . getID ( ) == FocusEvent . FOCUS_LOST ) { if ( popup != null ) hidePopup ( ) ; } }
@ Override public synchronized void addRequestProperty ( String key , String value ) { if ( connected || connecting ) throw new IllegalStateException ( _STR ) ; if ( key == null ) throw new NullPointerException ( _STR ) ; if ( isExternalMessageHeaderAllowed ( key , value ) ) { requests . add ( key , value ) ; if ( ! key . equalsIgnoreCase ( _STR ) ) { userHeaders . add ( key , value ) ; } } }
public void execute ( AbortableTask task ) { AbortingRunnable ar = new AbortingRunnable ( task ) ; tasks . add ( ar ) ; try { exec . execute ( ar ) ; } catch ( RejectedExecutionException e ) { tasks . remove ( ar ) ; throw e ; } }
default ByteBuffer serialize ( T value ) { ByteBuffer buffer = ByteBuffer . allocate ( size ( value ) ) ; serialize ( value , buffer ) ; return buffer ; }
private void loadSubmissions ( ) { submissions . clear ( ) ; String [ ] users = JPlagCentral . usersList ( ) ; for ( int i = _NUM ; i < users . length ; i ++ ) { AccessStructure [ ] subm = JPlagCentral . listAccessStructures ( users [ i ] ) ; if ( subm != null && subm . length != _NUM ) { for ( int j = _NUM ; j < subm . length ; j ++ ) { submissions . add ( subm [ j ] ) ; } } } }
private void subFormat ( int patternCharIndex , int count , FieldDelegate delegate , StringBuffer buffer , boolean useDateFormatSymbols ) { int maxIntCount = Integer . MAX_VALUE ; String current = null ; int beginOffset = buffer . length ( ) ; int field = PATTERN_INDEX_TO_CALENDAR_FIELD [ patternCharIndex ] ; int value ; if ( field == CalendarBuilder . WEEK_YEAR ) { if ( calendar . isWeekDateSupported ( ) ) { value = calendar . getWeekYear ( ) ; } else { patternCharIndex = PATTERN_YEAR ; field = PATTERN_INDEX_TO_CALENDAR_FIELD [ patternCharIndex ] ; value = calendar . get ( field ) ; } } else if ( field == CalendarBuilder . ISO_DAY_OF_WEEK ) { value = CalendarBuilder . toISODayOfWeek ( calendar . get ( Calendar . DAY_OF_WEEK ) ) ; } else { value = calendar . get ( field ) ; } int style = ( count >= _NUM ) ? Calendar . LONG : Calendar . SHORT ; if ( ! useDateFormatSymbols && field < Calendar . ZONE_OFFSET && patternCharIndex != PATTERN_MONTH_STANDALONE ) { current = calendar . getDisplayName ( field , style , locale ) ; } switch ( patternCharIndex ) { case PATTERN_ERA : if ( useDateFormatSymbols ) { String [ ] eras = formatData . getEras ( ) ; if ( value < eras . length ) { current = eras [ value ] ; } } if ( current == null ) { current = _STR ; } break ; case PATTERN_WEEK_YEAR : case PATTERN_YEAR : if ( calendar instanceof GregorianCalendar ) { if ( count != _NUM ) { zeroPaddingNumber ( value , count , maxIntCount , buffer ) ; } else { zeroPaddingNumber ( value , _NUM , _NUM , buffer ) ; } } else { if ( current == null ) { zeroPaddingNumber ( value , style == Calendar . LONG ? _NUM : count , maxIntCount , buffer ) ; } } break ; case PATTERN_MONTH : if ( useDateFormatSymbols ) { String [ ] months ; if ( count >= _NUM ) { months = formatData . getMonths ( ) ; current = months [ value ] ; } else if ( count == _NUM ) { months = formatData . getShortMonths ( ) ; current = months [ value ] ; } } else { if ( count < _NUM ) { current = null ; } else if ( forceStandaloneForm ) { current = calendar . getDisplayName ( field , style | _NUM , locale ) ; if ( current == null ) { current = calendar . getDisplayName ( field , style , locale ) ; } } } if ( current == null ) { zeroPaddingNumber ( value + _NUM , count , maxIntCount , buffer ) ; } break ; case PATTERN_MONTH_STANDALONE : assert current == null ; if ( locale == null ) { String [ ] months ; if ( count >= _NUM ) { months = formatData . getMonths ( ) ; current = months [ value ] ; } else if ( count == _NUM ) { months = formatData . getShortMonths ( ) ; current = months [ value ] ; } } else { if ( count >= _NUM ) { current = calendar . getDisplayName ( field , style | _NUM , locale ) ; } } if ( current == null ) { zeroPaddingNumber ( value + _NUM , count , maxIntCount , buffer ) ; } break ; case PATTERN_HOUR_OF_DAY1 : if ( current == null ) { if ( value == _NUM ) { zeroPaddingNumber ( calendar . getMaximum ( Calendar . HOUR_OF_DAY ) + _NUM , count , maxIntCount , buffer ) ; } else { zeroPaddingNumber ( value , count , maxIntCount , buffer ) ; } } break ; case PATTERN_DAY_OF_WEEK : if ( useDateFormatSymbols ) { String [ ] weekdays ; if ( count >= _NUM ) { weekdays = formatData . getWeekdays ( ) ; current = weekdays [ value ] ; } else { weekdays = formatData . getShortWeekdays ( ) ; current = weekdays [ value ] ; } } break ; case PATTERN_AM_PM : if ( useDateFormatSymbols ) { String [ ] ampm = formatData . getAmPmStrings ( ) ; current = ampm [ value ] ; } break ; case PATTERN_HOUR1 : if ( current == null ) { if ( value == _NUM ) { zeroPaddingNumber ( calendar . getLeastMaximum ( Calendar . HOUR ) + _NUM , count , maxIntCount , buffer ) ; } else { zeroPaddingNumber ( value , count , maxIntCount , buffer ) ; } } break ; case PATTERN_ZONE_NAME : if ( current == null ) { if ( formatData . locale == null || formatData . isZoneStringsSet ) { int zoneIndex = formatData . getZoneIndex ( calendar . getTimeZone ( ) . getID ( ) ) ; if ( zoneIndex == - _NUM ) { value = calendar . get ( Calendar . ZONE_OFFSET ) + calendar . get ( Calendar . DST_OFFSET ) ; buffer . append ( ZoneInfoFile . toCustomID ( value ) ) ; } else { int index = ( calendar . get ( Calendar . DST_OFFSET ) == _NUM ) ? _NUM : _NUM ; if ( count < _NUM ) { index ++ ; } String [ ] [ ] zoneStrings = formatData . getZoneStringsWrapper ( ) ; buffer . append ( zoneStrings [ zoneIndex ] [ index ] ) ; } } else { TimeZone tz = calendar . getTimeZone ( ) ; boolean daylight = ( calendar . get ( Calendar . DST_OFFSET ) != _NUM ) ; int tzstyle = ( count < _NUM ? TimeZone . SHORT : TimeZone . LONG ) ; buffer . append ( tz . getDisplayName ( daylight , tzstyle , formatData . locale ) ) ; } } break ; case PATTERN_ZONE_VALUE : value = ( calendar . get ( Calendar . ZONE_OFFSET ) + calendar . get ( Calendar . DST_OFFSET ) ) / _NUM ; int width = _NUM ; if ( value >= _NUM ) { buffer . append ( _STR ) ; } else { width ++ ; } int num = ( value / _NUM ) * _NUM + ( value % _NUM ) ; CalendarUtils . sprintf0d ( buffer , num , width ) ; break ; case PATTERN_ISO_ZONE : value = calendar . get ( Calendar . ZONE_OFFSET ) + calendar . get ( Calendar . DST_OFFSET ) ; if ( value == _NUM ) { buffer . append ( _STR ) ; break ; } value /= _NUM ; if ( value >= _NUM ) { buffer . append ( _STR ) ; } else { buffer . append ( _STR ) ; value = - value ; } CalendarUtils . sprintf0d ( buffer , value / _NUM , _NUM ) ; if ( count == _NUM ) { break ; } if ( count == _NUM ) { buffer . append ( _STR ) ; } CalendarUtils . sprintf0d ( buffer , value % _NUM , _NUM ) ; break ; default : if ( current == null ) { zeroPaddingNumber ( value , count , maxIntCount , buffer ) ; } break ; } if ( current != null ) { buffer . append ( current ) ; } int fieldID = PATTERN_INDEX_TO_DATE_FORMAT_FIELD [ patternCharIndex ] ; Field f = PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID [ patternCharIndex ] ; delegate . formatted ( fieldID , f , f , beginOffset , buffer . length ( ) , buffer ) ; }
@ SuppressWarnings ( _STR ) public boolean onTouchEvent ( MotionEvent event ) { try { int pointerCount = multiTouchSupported ? ( Integer ) m_getPointerCount . invoke ( event ) : _NUM ; if ( DEBUG ) Log . i ( _STR , _STR + multiTouchSupported + _STR + mMode + _STR + handleSingleTouchEvents + _STR + pointerCount ) ; if ( mMode == MODE_NOTHING && ! handleSingleTouchEvents && pointerCount == _NUM ) return _BOOL ; if ( DEBUG ) Log . i ( _STR , _STR ) ; int action = event . getAction ( ) ; int histLen = event . getHistorySize ( ) / pointerCount ; for ( int histIdx = _NUM ; histIdx <= histLen ; histIdx ++ ) { boolean processingHist = histIdx < histLen ; if ( ! multiTouchSupported || pointerCount == _NUM ) { if ( DEBUG ) Log . i ( _STR , _STR ) ; xVals [ _NUM ] = processingHist ? event . getHistoricalX ( histIdx ) : event . getX ( ) ; yVals [ _NUM ] = processingHist ? event . getHistoricalY ( histIdx ) : event . getY ( ) ; pressureVals [ _NUM ] = processingHist ? event . getHistoricalPressure ( histIdx ) : event . getPressure ( ) ; } else { if ( DEBUG ) Log . i ( _STR , _STR ) ; int numPointers = Math . min ( pointerCount , MAX_TOUCH_POINTS ) ; if ( DEBUG && pointerCount > MAX_TOUCH_POINTS ) Log . i ( _STR , _STR ) ; for ( int ptrIdx = _NUM ; ptrIdx < numPointers ; ptrIdx ++ ) { int ptrId = ( Integer ) m_getPointerId . invoke ( event , ptrIdx ) ; pointerIds [ ptrIdx ] = ptrId ; xVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalX . invoke ( event , ptrIdx , histIdx ) : m_getX . invoke ( event , ptrIdx ) ) ; yVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalY . invoke ( event , ptrIdx , histIdx ) : m_getY . invoke ( event , ptrIdx ) ) ; pressureVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalPressure . invoke ( event , ptrIdx , histIdx ) : m_getPressure . invoke ( event , ptrIdx ) ) ; } } decodeTouchEvent ( pointerCount , xVals , yVals , pressureVals , pointerIds , processingHist ? MotionEvent . ACTION_MOVE : action , processingHist ? _BOOL : action != MotionEvent . ACTION_UP && ( action & ( ( _NUM << ACTION_POINTER_INDEX_SHIFT ) - _NUM ) ) != ACTION_POINTER_UP && action != MotionEvent . ACTION_CANCEL , processingHist ? event . getHistoricalEventTime ( histIdx ) : event . getEventTime ( ) ) ; } return _BOOL ; } catch ( Exception e ) { Log . e ( _STR , _STR , e ) ; return _BOOL ; } }
public static Bit valueOf ( String bit ) throws NumberFormatException { final int i = Integer . parseInt ( bit ) ; if ( i != _NUM && i != _NUM ) { throw new NumberFormatException ( _STR + bit + _STR ) ; } return ( i > _NUM ) ? TRUE : FALSE ; }
public boolean next ( ) throws EOFException { if ( limit >= fileSize ) { throw new EOFException ( _STR ) ; } if ( mem . getLongVolatile ( Structure . Limit ) <= limit ) { return _BOOL ; } byte commit = mem . getByteVolatile ( limit ) ; byte rollback = mem . getByteVolatile ( limit + Length . Commit ) ; if ( rollback == Rollback . Set ) { limit += Length . RecordHeader + recordSize ; timeoutCounter = _NUM ; timerStart = _NUM ; return _BOOL ; } if ( commit == Commit . Set ) { timeoutCounter = _NUM ; timerStart = _NUM ; return _BOOL ; } timeoutCounter ++ ; if ( timeoutCounter >= MAX_TIMEOUT_COUNT ) { if ( timerStart == _NUM ) { timerStart = System . currentTimeMillis ( ) ; } else { if ( System . currentTimeMillis ( ) - timerStart >= maxTimeout ) { mem . putByteVolatile ( limit + Length . Commit , Rollback . Set ) ; limit += Length . RecordHeader + recordSize ; timeoutCounter = _NUM ; timerStart = _NUM ; return _BOOL ; } } } return _BOOL ; }
private int composeComponent ( int a , int b ) { return Math . min ( b + b * a / DIMMING_FACTOR , _NUM ) ; }
public synchronized void writeTo ( OutputStream out ) throws IOException { int remaining = count ; for ( byte [ ] buf : buffers ) { int c = Math . min ( buf . length , remaining ) ; out . write ( buf , _NUM , c ) ; remaining -= c ; if ( remaining == _NUM ) { break ; } } }
public void removeTreeModelListener ( TreeModelListener l ) { treeModelListeners . removeElement ( l ) ; }
public URIName ( String name ) throws IOException { try { uri = new URI ( name ) ; } catch ( URISyntaxException use ) { throw new IOException ( _STR + name , use ) ; } if ( uri . getScheme ( ) == null ) { throw new IOException ( _STR + name ) ; } host = uri . getHost ( ) ; if ( host != null ) { if ( host . charAt ( _NUM ) == _STR ) { String ipV6Host = host . substring ( _NUM , host . length ( ) - _NUM ) ; try { hostIP = new IPAddressName ( ipV6Host ) ; } catch ( IOException ioe ) { throw new IOException ( _STR + _STR + name ) ; } } else { try { hostDNS = new DNSName ( host ) ; } catch ( IOException ioe ) { try { hostIP = new IPAddressName ( host ) ; } catch ( Exception ioe2 ) { throw new IOException ( _STR + _STR + _STR + name ) ; } } } } }
public ProjectedStream addView ( String namespace , String name , List < Expression > parameters ) { views . add ( View . create ( namespace , name , parameters ) ) ; return this ; }
protected int read ( SpeechRecord recorder , byte [ ] buffer ) { int len = buffer . length ; int numOfBytes = recorder . read ( buffer , _NUM , len ) ; int status = getStatus ( numOfBytes , len ) ; if ( status == _NUM ) { System . arraycopy ( buffer , _NUM , mRecording , mRecordedLength , numOfBytes ) ; mRecordedLength += len ; } return status ; }
public void touch ( ) { candiesStore = null ; }
public ZoneRules toRules ( String zoneId ) { Objects . requireNonNull ( zoneId , _STR ) ; if ( windowList . isEmpty ( ) ) { throw new IllegalStateException ( _STR ) ; } final List < ZoneOffsetTransition > standardTransitionList = new ArrayList < > ( _NUM ) ; final List < ZoneOffsetTransition > transitionList = new ArrayList < > ( _NUM ) ; final List < ZoneOffsetTransitionRule > lastTransitionRuleList = new ArrayList < > ( _NUM ) ; final TZWindow firstWindow = windowList . get ( _NUM ) ; ZoneOffset loopStandardOffset = firstWindow . standardOffset ; int loopSavings = _NUM ; if ( firstWindow . fixedSavingAmountSecs != null ) { loopSavings = firstWindow . fixedSavingAmountSecs ; } final ZoneOffset firstWallOffset = ZoneOffset . ofTotalSeconds ( loopStandardOffset . getTotalSeconds ( ) + loopSavings ) ; LocalDateTime loopWindowStart = LocalDateTime . of ( YEAR_MIN_VALUE , _NUM , _NUM , _NUM , _NUM ) ; ZoneOffset loopWindowOffset = firstWallOffset ; for ( TZWindow window : windowList ) { window . tidy ( loopWindowStart . getYear ( ) ) ; Integer effectiveSavings = window . fixedSavingAmountSecs ; if ( effectiveSavings == null ) { effectiveSavings = _NUM ; for ( TZRule rule : window . ruleList ) { if ( rule . toEpochSecond ( loopStandardOffset , loopSavings ) > loopWindowStart . toEpochSecond ( loopWindowOffset ) ) { break ; } effectiveSavings = rule . savingAmountSecs ; } } if ( loopStandardOffset . equals ( window . standardOffset ) == _BOOL ) { standardTransitionList . add ( new ZoneOffsetTransition ( LocalDateTime . ofEpochSecond ( loopWindowStart . toEpochSecond ( loopWindowOffset ) , _NUM , loopStandardOffset ) , loopStandardOffset , window . standardOffset ) ) ; loopStandardOffset = window . standardOffset ; } ZoneOffset effectiveWallOffset = ZoneOffset . ofTotalSeconds ( loopStandardOffset . getTotalSeconds ( ) + effectiveSavings ) ; if ( loopWindowOffset . equals ( effectiveWallOffset ) == _BOOL ) { transitionList . add ( new ZoneOffsetTransition ( loopWindowStart , loopWindowOffset , effectiveWallOffset ) ) ; } loopSavings = effectiveSavings ; for ( TZRule rule : window . ruleList ) { if ( rule . isTransition ( loopSavings ) ) { ZoneOffsetTransition trans = rule . toTransition ( loopStandardOffset , loopSavings ) ; if ( trans . toEpochSecond ( ) < loopWindowStart . toEpochSecond ( loopWindowOffset ) == _BOOL && trans . toEpochSecond ( ) < window . createDateTimeEpochSecond ( loopSavings ) ) { transitionList . add ( trans ) ; loopSavings = rule . savingAmountSecs ; } } } for ( TZRule lastRule : window . lastRuleList ) { lastTransitionRuleList . add ( lastRule . toTransitionRule ( loopStandardOffset , loopSavings ) ) ; loopSavings = lastRule . savingAmountSecs ; } loopWindowOffset = window . createWallOffset ( loopSavings ) ; loopWindowStart = LocalDateTime . ofEpochSecond ( window . createDateTimeEpochSecond ( loopSavings ) , _NUM , loopWindowOffset ) ; } return new ZoneRules ( firstWindow . standardOffset , firstWallOffset , standardTransitionList , transitionList , lastTransitionRuleList ) ; }
public static int hash ( Object o ) { int h = o == null ? _NUM : o instanceof byte [ ] ? Arrays . hashCode ( ( byte [ ] ) o ) : o . hashCode ( ) ; h += ( h << _NUM ) ^ _NUM ; h ^= ( h > > > _NUM ) ; h += ( h << _NUM ) ; h ^= ( h > > > _NUM ) ; h += ( h << _NUM ) + ( h << _NUM ) ; return h ^ ( h > > > _NUM ) ; }
public void addParseTemplate ( String parseTemplate ) { parseTemplates . add ( parseTemplate ) ; }
private void attachImageFromCamera ( ) { try { if ( null != mShootedPicturePath ) { Uri uri = Uri . fromFile ( new File ( mShootedPicturePath ) ) ; try { Bitmap previewBitmap = VectorApp . getSavedPickerImagePreview ( ) ; String thumbnailPath = getThumbnailPath ( mShootedPicturePath ) ; int rotationAngle = ImageUtils . getRotationAngleForBitmap ( VectorMediasPickerActivity . this , uri ) ; if ( _NUM != rotationAngle ) { android . graphics . Matrix bitmapMatrix = new android . graphics . Matrix ( ) ; bitmapMatrix . postRotate ( _NUM - rotationAngle ) ; previewBitmap = Bitmap . createBitmap ( previewBitmap , _NUM , _NUM , previewBitmap . getWidth ( ) , previewBitmap . getHeight ( ) , bitmapMatrix , _BOOL ) ; } File file = new File ( thumbnailPath ) ; FileOutputStream outStream = new FileOutputStream ( file ) ; previewBitmap . compress ( Bitmap . CompressFormat . JPEG , _NUM , outStream ) ; outStream . flush ( ) ; outStream . close ( ) ; } catch ( Exception e ) { Log . e ( LOG_TAG , _STR ) ; } Bundle conData = new Bundle ( ) ; Intent intent = new Intent ( ) ; intent . setData ( uri ) ; intent . putExtras ( conData ) ; setResult ( RESULT_OK , intent ) ; } } catch ( Exception e ) { setResult ( RESULT_CANCELED , null ) ; } finally { VectorApp . setSavedCameraImagePreview ( null ) ; finish ( ) ; } }
private double minIgnoreNaN ( double a , double b ) { if ( Double . isNaN ( a ) ) { return b ; } if ( Double . isNaN ( b ) ) { return a ; } return Math . min ( a , b ) ; }
public ObjectName preRegister ( MBeanServer server , ObjectName name ) throws Exception { setMBeanServer ( server ) ; if ( name == null ) { name = new ObjectName ( server . getDefaultDomain ( ) + _STR + ServiceName . MLET ) ; } this . mletObjectName = name ; return this . mletObjectName ; }
static String matchStringOrThrow ( Pattern p , ToDateParser params , Enum < ? > aEnum ) { String s = params . getInputStr ( ) ; Matcher matcher = p . matcher ( s ) ; if ( ! matcher . find ( ) ) { throwException ( params , format ( _STR , aEnum . name ( ) ) ) ; } return matcher . group ( _NUM ) ; }
String sourceFormForInitializer ( AnnotationValue annotationValue , ProcessingEnvironment processingEnv , String memberName , Element context ) { SourceFormVisitor visitor = new InitializerSourceFormVisitor ( processingEnv , memberName , context ) ; StringBuilder sb = new StringBuilder ( ) ; visitor . visit ( annotationValue , sb ) ; return sb . toString ( ) ; }
static ByteBuffer newByteBuffer ( int capacity ) { ByteBuffer newbb = ByteBuffer . allocate ( capacity ) ; newbb . order ( ByteOrder . LITTLE_ENDIAN ) ; return newbb ; }
public synchronized void add ( double x , double y , double value ) { super . add ( x , y ) ; mValue . add ( value ) ; updateRange ( value ) ; }
private void validateCollectionAttribute ( CollectionAttribute collection , Set < String > allCollections ) { if ( collection == null || allCollections == null ) { return ; } for ( RestMethod restMethod : collection . getMethods ( ) ) { if ( allCollections . contains ( restMethod . getRestFullMethodName ( ) ) ) { aspect . warning ( SimpleLocation . TOPLEVEL , _STR + _STR + _STR + _STR , collection . getFullName ( ) , restMethod . getRestMethodName ( ) ) ; } } }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
public void putStringNoNull ( String s ) { ensureCapacity ( s . length ( ) * _NUM ) ; System . arraycopy ( s . getBytes ( ) , _NUM , this . byteBuffer , this . position , s . length ( ) ) ; this . position += s . length ( ) ; }
public void externalEntityDecl ( String name , XMLResourceIdentifier identifier , Augmentations augs ) throws XNIException { try { if ( fDeclHandler != null ) { String publicId = identifier . getPublicId ( ) ; String systemId = fResolveDTDURIs ? identifier . getExpandedSystemId ( ) : identifier . getLiteralSystemId ( ) ; fDeclHandler . externalEntityDecl ( name , publicId , systemId ) ; } } catch ( SAXException e ) { throw new XNIException ( e ) ; } }
public HoltWintersModelBuilder alpha ( double alpha ) { this . alpha = alpha ; return this ; }
public static @ CheckForNull ClassDescriptor createClassDescriptorFromFieldSignature ( String signature ) { int start = signature . indexOf ( _STR ) ; if ( start < _NUM ) { return null ; } int end = signature . indexOf ( _STR , start ) ; if ( end < _NUM ) { return null ; } return createClassDescriptor ( signature . substring ( start + _NUM , end ) ) ; }
private static ServiceTicketResponse checkGetNfcServiceTicketResponse ( ServiceTicketResponse serviceTicketResponse ) throws RpcException { logger . info ( _STR , serviceTicketResponse ) ; switch ( serviceTicketResponse . getResult ( ) ) { case OK : break ; case SYSTEM_ERROR : throw new SystemErrorException ( serviceTicketResponse . getError ( ) ) ; case NOT_FOUND : throw new DatastoreNotFoundException ( serviceTicketResponse . getError ( ) ) ; default : throw new RpcException ( String . format ( _STR , serviceTicketResponse . getError ( ) ) ) ; } return serviceTicketResponse ; }
public void schedule ( TimerTask task , long delay ) { if ( delay < _NUM ) throw new IllegalArgumentException ( _STR ) ; sched ( task , System . currentTimeMillis ( ) + delay , _NUM ) ; }
public void filledEllipse ( double x , double y , double semiMajorAxis , double semiMinorAxis ) { if ( semiMajorAxis < _NUM ) throw new IllegalArgumentException ( _STR ) ; if ( semiMinorAxis < _NUM ) throw new IllegalArgumentException ( _STR ) ; double xs = scaleX ( x ) ; double ys = scaleY ( y ) ; double ws = factorX ( _NUM * semiMajorAxis ) ; double hs = factorY ( _NUM * semiMinorAxis ) ; if ( ws <= _NUM && hs <= _NUM ) pixel ( x , y ) ; else offscreen . fill ( new Ellipse2D . Double ( xs - ws / _NUM , ys - hs / _NUM , ws , hs ) ) ; draw ( ) ; }
static byte [ ] discardWhitespace ( byte [ ] data ) { byte groomedData [ ] = new byte [ data . length ] ; int bytesCopied = _NUM ; for ( int i = _NUM ; i < data . length ; i ++ ) { switch ( data [ i ] ) { case ( byte ) _STR : case ( byte ) _STR : case ( byte ) _STR : case ( byte ) _STR : break ; default : groomedData [ bytesCopied ++ ] = data [ i ] ; } } byte packedData [ ] = new byte [ bytesCopied ] ; System . arraycopy ( groomedData , _NUM , packedData , _NUM , bytesCopied ) ; return packedData ; }
@ Override public Cursor swapCursor ( Cursor newCursor ) { mAlphabetIndexer . setCursor ( newCursor ) ; return super . swapCursor ( newCursor ) ; }
public void lockFlushing ( ) { flushLock . lock ( ) ; }
public static boolean canBeRandomized ( Class clazz ) { return ClassUtils . isPrimitiveOrWrapper ( clazz ) || clazz . equals ( String . class ) || clazz . equals ( IDiscordClient . class ) ; }
public static String generateNativeGuid ( String deviceType , String serialNumber ) { return String . format ( _STR , _deviceTypeMap . get ( deviceType ) , serialNumber ) ; }
public static SecretKeys keys ( String keysStr ) throws InvalidKeyException { String [ ] keysArr = keysStr . split ( _STR ) ; if ( keysArr . length != _NUM ) { throw new IllegalArgumentException ( _STR ) ; } else { byte [ ] confidentialityKey = Base64 . decode ( keysArr [ _NUM ] , BASE64_FLAGS ) ; if ( confidentialityKey . length != AES_KEY_LENGTH_BITS / _NUM ) { throw new InvalidKeyException ( _STR + AES_KEY_LENGTH_BITS + _STR ) ; } byte [ ] integrityKey = Base64 . decode ( keysArr [ _NUM ] , BASE64_FLAGS ) ; if ( integrityKey . length != HMAC_KEY_LENGTH_BITS / _NUM ) { throw new InvalidKeyException ( _STR + HMAC_KEY_LENGTH_BITS + _STR ) ; } return new SecretKeys ( new SecretKeySpec ( confidentialityKey , _NUM , confidentialityKey . length , CIPHER ) , new SecretKeySpec ( integrityKey , HMAC_ALGORITHM ) ) ; } }
public WritableRaster createWritableChild ( int x , int y , int width , int height , int x0 , int y0 , int bandList [ ] ) { if ( x < this . minX ) { throw new RasterFormatException ( _STR ) ; } if ( y < this . minY ) { throw new RasterFormatException ( _STR ) ; } if ( ( x + width < x ) || ( x + width > this . minX + this . width ) ) { throw new RasterFormatException ( _STR ) ; } if ( ( y + height < y ) || ( y + height > this . minY + this . height ) ) { throw new RasterFormatException ( _STR ) ; } SampleModel sm ; if ( bandList != null ) sm = sampleModel . createSubsetSampleModel ( bandList ) ; else sm = sampleModel ; int deltaX = x0 - x ; int deltaY = y0 - y ; return new ShortBandedRaster ( sm , dataBuffer , new Rectangle ( x0 , y0 , width , height ) , new Point ( sampleModelTranslateX + deltaX , sampleModelTranslateY + deltaY ) , this ) ; }
private void sortChildren ( final JCriteriumTreeNode parentNode ) { final List < JCriteriumTreeNode > operators = new ArrayList < JCriteriumTreeNode > ( ) ; final List < JCriteriumTreeNode > conditions = new ArrayList < JCriteriumTreeNode > ( ) ; final List < JCriteriumTreeNode > minus = new ArrayList < JCriteriumTreeNode > ( ) ; final Enumeration < ? > children = parentNode . children ( ) ; while ( children . hasMoreElements ( ) ) { final JCriteriumTreeNode child = ( JCriteriumTreeNode ) children . nextElement ( ) ; final ICriterium type = child . getCriterium ( ) ; if ( type instanceof CConditionCriterium ) { conditions . add ( child ) ; } else { operators . add ( child ) ; } } parentNode . removeAllChildren ( ) ; for ( final JCriteriumTreeNode child : operators ) { parentNode . add ( child ) ; child . setParent ( parentNode ) ; } for ( final JCriteriumTreeNode child : conditions ) { parentNode . add ( child ) ; child . setParent ( parentNode ) ; } for ( final JCriteriumTreeNode child : minus ) { parentNode . add ( child ) ; child . setParent ( parentNode ) ; } }
public static int poisson ( double lambda ) { int k = _NUM ; double p = _NUM ; double L = Math . exp ( - lambda ) ; do { k ++ ; p *= uniform ( ) ; } while ( p >= L ) ; return k - _NUM ; }
public String build ( String input ) { inputString = input ; inputIndex = _NUM ; inputLength = input . length ( ) ; outputString = new StringBuffer ( ) ; char nextChar ; while ( ( nextChar = get ( ) ) != _NUM && outputString . length ( ) < maxOutputLength ) { if ( nextChar == _STR ) { if ( inputStartsWith ( _STR ) ) { String nextChars = peek ( _NUM ) ; boolean haveBangComment = _BOOL ; if ( nextChars != null && nextChars . length ( ) == _NUM ) { haveBangComment = _BOOL ; for ( int i = _NUM ; i < nextChars . length ( ) ; i ++ ) { if ( ! Character . isDigit ( nextChars . charAt ( i ) ) ) { haveBangComment = _BOOL ; break ; } } } if ( haveBangComment ) { skip ( _NUM ) ; String contents = getToDelimiter ( _STR ) ; if ( contents != null ) { put ( contents ) ; skip ( _NUM ) ; } } else { put ( nextChar ) ; } } else if ( inputStartsWith ( _STR ) ) { if ( getToDelimiter ( _STR ) != null ) skip ( _NUM ) ; } else { put ( nextChar ) ; } } else if ( nextChar == _STR ) { if ( inputStartsWith ( _STR ) ) { String tail = peek ( _NUM ) ; if ( tail == null ) { break ; } else { if ( Character . isWhitespace ( tail . charAt ( _NUM ) ) ) { String buf = getToEndOfLine ( ) ; skip ( buf . length ( ) ) ; put ( _STR ) ; } else put ( nextChar ) ; } } else { put ( nextChar ) ; } } else if ( nextChar == _STR ) { put ( _STR ) ; } else { put ( nextChar ) ; } } return outputString . toString ( ) ; }
public boolean isBuiltinSoundAvailable ( String soundIdentifier ) { return builtinSounds . containsKey ( soundIdentifier ) ; }
public Iterator < String > iterateSerializers ( ) { return serializers . iterator ( ) ; }
private static void checkKey ( String key ) throws MalformedObjectNameException { if ( key == null ) throw new NullPointerException ( _STR ) ; final int len = key . length ( ) ; if ( len == _NUM ) throw new MalformedObjectNameException ( _STR ) ; final char [ ] k = key . toCharArray ( ) ; final int endKey = parseKey ( k , _NUM ) ; if ( endKey < len ) throw new MalformedObjectNameException ( _STR + k [ endKey ] + _STR ) ; }
public abstract boolean isShutdown ( ) ;
protected abstract void init ( ) ;
private void drawArc ( Canvas canvas ) { if ( mCurrentDashMode . equals ( DASH_MODE . DOWNLOAD ) ) { mnIndeterminateStartPosition += ( _NUM - mnProgress ) * mnStartSpeed ; if ( ( mnIndeterminateStartPosition > CIRCULAR_FACTOR ) || ( mnIndeterminateStartPosition < _NUM ) ) { mnIndeterminateStartPosition = _NUM ; } Rect currRect = new Rect ( ) ; getLocalVisibleRect ( currRect ) ; float nRingBoundaryInner = mnRingRadius - ( mnRingWidth / _NUM ) - ( mnArcWidth / _NUM ) ; mArcRect . set ( mnViewCenter - nRingBoundaryInner , mnViewCenter - nRingBoundaryInner , mnViewCenter + nRingBoundaryInner , mnViewCenter + nRingBoundaryInner ) ; mPaint . setColor ( mArcColor ) ; mPaint . setStyle ( Paint . Style . STROKE ) ; mPaint . setStrokeWidth ( mnArcWidth ) ; mPaint . setStrokeCap ( Paint . Cap . ROUND ) ; canvas . drawArc ( mArcRect , mnIndeterminateStartPosition , mnArcLength , _BOOL , mPaint ) ; } }
public static String formatDateTime ( java . util . Date date , String format , String locale , String timeZone ) { SimpleDateFormat dateFormat = getDateFormat ( format , locale , timeZone ) ; synchronized ( dateFormat ) { return dateFormat . format ( date ) ; } }
public static byte [ ] decode ( byte [ ] input , int offset , int len , int flags ) { Decoder decoder = new Decoder ( flags , new byte [ len * _NUM / _NUM ] ) ; if ( ! decoder . process ( input , offset , len , _BOOL ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( decoder . op == decoder . output . length ) { return decoder . output ; } byte [ ] temp = new byte [ decoder . op ] ; System . arraycopy ( decoder . output , _NUM , temp , _NUM , decoder . op ) ; return temp ; }
public static AnimGameItem process ( MD5Model md5Model , MD5AnimModel animModel , Vector3f defaultColour ) throws Exception { List < Matrix4f > invJointMatrices = calcInJointMatrices ( md5Model ) ; List < AnimatedFrame > animatedFrames = processAnimationFrames ( md5Model , animModel , invJointMatrices ) ; List < Mesh > list = new ArrayList < > ( ) ; for ( MD5Mesh md5Mesh : md5Model . getMeshes ( ) ) { Mesh mesh = generateMesh ( md5Model , md5Mesh ) ; handleTexture ( mesh , md5Mesh , defaultColour ) ; list . add ( mesh ) ; } Mesh [ ] meshes = new Mesh [ list . size ( ) ] ; meshes = list . toArray ( meshes ) ; AnimGameItem result = new AnimGameItem ( meshes , animatedFrames , invJointMatrices ) ; return result ; }
protected MessageDigest ( String algorithm ) { this . algorithm = algorithm ; }
private void createGui ( ) { final JPanel topPanel = new JPanel ( new BorderLayout ( ) ) ; final JPanel innerTopPanel = new JPanel ( new BorderLayout ( ) ) ; innerTopPanel . add ( m_stdEditPanel ) ; topPanel . add ( innerTopPanel ) ; final JPanel debuggerChooserPanel = new JPanel ( new BorderLayout ( ) ) ; debuggerChooserPanel . setBorder ( new TitledBorder ( _STR ) ) ; m_checkedList = new JCheckedListbox < > ( new Vector < DebuggerTemplate > ( ) , _BOOL ) ; updateCheckedListPanel ( ) ; final JScrollPane debuggerScrollPane = new JScrollPane ( m_checkedList ) ; m_checkedListPanel . add ( debuggerScrollPane ) ; debuggerChooserPanel . add ( m_checkedListPanel , BorderLayout . CENTER ) ; debuggerChooserPanel . setMinimumSize ( new Dimension ( _NUM , _NUM ) ) ; debuggerChooserPanel . setPreferredSize ( new Dimension ( _NUM , _NUM ) ) ; innerTopPanel . add ( debuggerChooserPanel , BorderLayout . SOUTH ) ; final JPanel buttonPanel = new JPanel ( new GridLayout ( _NUM , _NUM ) ) ; buttonPanel . setBorder ( new EmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; buttonPanel . add ( new JPanel ( ) ) ; buttonPanel . add ( m_saveButton ) ; topPanel . add ( buttonPanel , BorderLayout . SOUTH ) ; final JPanel bottomPanel = new CAddressSpacesTablePanel ( m_table ) ; final JScrollPane scrollPane = new JScrollPane ( m_table ) ; bottomPanel . setBorder ( m_titledBorder ) ; setBorder ( new EmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; bottomPanel . add ( scrollPane ) ; final JSplitPane splitPane = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , _BOOL , topPanel , bottomPanel ) ; splitPane . setOneTouchExpandable ( _BOOL ) ; splitPane . setDividerLocation ( splitPane . getMinimumDividerLocation ( ) ) ; splitPane . setResizeWeight ( _NUM ) ; add ( splitPane ) ; }
public static int [ ] mergeSort ( int [ ] a ) { if ( a . length == _NUM ) return a ; int [ ] x = mergeSort ( Arrays . copyOfRange ( a , _NUM , a . length / _NUM ) ) ; int [ ] y = mergeSort ( Arrays . copyOfRange ( a , a . length / _NUM , a . length ) ) ; return merge ( x , y ) ; }
private void copyACls ( final List < AccessControlLevel > accessControlLevels2 ) { for ( AccessControlLevel acl : this . accessControlLevels ) { accessControlLevels2 . add ( new AccessControlLevel ( acl ) ) ; } }
public void put ( ByteBuffer byteBuffer , int contentLength ) { if ( contentLength > ( bytes . length - this . contentLength ) ) { throw new IllegalArgumentException ( _STR ) ; } byteBuffer . get ( bytes , this . contentLength , contentLength ) ; this . contentLength += contentLength ; }
private void handleResponse ( AvsResponse response ) { boolean checkAfter = ( avsQueue . size ( ) == _NUM ) ; if ( response != null ) { for ( int i = response . size ( ) - _NUM ; i >= _NUM ; i -- ) { if ( response . get ( i ) instanceof AvsReplaceAllItem || response . get ( i ) instanceof AvsReplaceEnqueuedItem ) { avsQueue . clear ( ) ; response . remove ( i ) ; } } Log . i ( TAG , _STR + response . size ( ) + _STR ) ; avsQueue . addAll ( response ) ; } if ( checkAfter ) { checkQueue ( ) ; } }
protected synchronized void request ( String stream ) { if ( stream == null || stream . isEmpty ( ) ) { return ; } stream = stream . toLowerCase ( Locale . ENGLISH ) ; FollowerInfo cachedInfo = cached . get ( stream ) ; if ( cachedInfo == null || checkTimePassed ( cachedInfo ) ) { if ( type == Follower . Type . FOLLOWER ) { api . requestFollowers ( stream ) ; } else if ( type == Follower . Type . SUBSCRIBER ) { api . requestSubscribers ( stream ) ; } } else { if ( type == Follower . Type . FOLLOWER ) { listener . receivedFollowers ( cachedInfo ) ; } else if ( type == Follower . Type . SUBSCRIBER ) { listener . receivedSubscribers ( cachedInfo ) ; } } }
boolean removeViewIfHidden ( View view ) { final int index = mCallback . indexOfChild ( view ) ; if ( index == - _NUM ) { if ( mHiddenViews . remove ( view ) && DEBUG ) { throw new IllegalStateException ( _STR ) ; } return _BOOL ; } if ( mBucket . get ( index ) ) { mBucket . remove ( index ) ; mCallback . removeViewAt ( index ) ; if ( ! mHiddenViews . remove ( view ) && DEBUG ) { throw new IllegalStateException ( _STR ) ; } return _BOOL ; } return _BOOL ; }
public String consumeCssIdentifier ( ) { int start = pos ; while ( ! isEmpty ( ) && ( matchesWord ( ) || matchesAny ( _STR , _STR ) ) ) pos ++ ; return queue . substring ( start , pos ) ; }
@ Ignore ( _STR ) @ Test public void testPopulate1kbwrites ( ) { final byte [ ] value = new byte [ ENTRY_SIZE ] ; Arrays . fill ( value , ( byte ) _NUM ) ; for ( int i = _NUM ; i < OP_COUNT ; i ++ ) { region . put ( new Integer ( i ) , value ) ; } closeDown ( ) ; }
public void serialize ( KXmlSerializer serializer ) throws IOException { serializer . startTag ( ns , TAG ) ; serializeAttribute ( serializer , NAME_ATTR , mName ) ; serializeAttribute ( serializer , APP_PACKAGE_NAME_ATTR , mAppPackageName ) ; serializeAttribute ( serializer , DIGEST_ATTR , getDigest ( ) ) ; if ( SIGNATURE_TEST_PKG . equals ( mName ) ) { serializer . attribute ( ns , _STR , _STR ) ; } mSuiteRoot . serialize ( serializer ) ; serializer . endTag ( ns , TAG ) ; }
public ActivityResolveInfo ( ResolveInfo resolveInfo ) { this . resolveInfo = resolveInfo ; }
public void rollback ( Throwable t ) { log . debug ( _STR + tempFile + _STR + t ) ; try { fileContentStore . delete ( tempFile , node ) ; } catch ( Exception e ) { t . addSuppressed ( e ) ; } }
protected void parseGeometryString ( ) { int i = _NUM ; byte [ ] bytes = geometryString . getBytes ( ) ; xgrav = new String ( bytes , _NUM , _NUM ) ; for ( i = _NUM ; i < bytes . length ; i ++ ) { if ( ( bytes [ i ] == _STR ) || ( bytes [ i ] == _STR ) ) break ; } if ( i == bytes . length ) return ; ygrav = ( bytes [ i ] == _STR ) ? _STR : _STR ; xpos = Integer . parseInt ( new String ( bytes , _NUM , i - _NUM ) ) ; ++ i ; ypos = Integer . parseInt ( new String ( bytes , i , bytes . length - i ) ) ; }
@ Override protected final synchronized boolean writeData ( ByteBuffer data ) { AionServerPacket packet = sendMsgQueue . pollFirst ( ) ; if ( packet == null ) { return _BOOL ; } packet . setBuf ( data ) ; packet . write ( this ) ; return _BOOL ; }
protected boolean position ( Projection proj ) { if ( proj == null ) { logger . fine ( _STR ) ; return _BOOL ; } projWidth = proj . getWidth ( ) ; projHeight = proj . getHeight ( ) ; switch ( renderType ) { case RENDERTYPE_LATLON : if ( ! proj . isPlotable ( lat , lon ) ) { if ( DEBUG ) { logger . fine ( _STR ) ; } setNeedToReposition ( _BOOL ) ; return _BOOL ; } point1 = ( Point ) proj . forward ( lat , lon , new Point ( ) ) ; break ; case RENDERTYPE_XY : point1 = new Point ( x , y ) ; break ; case RENDERTYPE_OFFSET : if ( ! proj . isPlotable ( lat , lon ) ) { if ( DEBUG ) { logger . fine ( _STR ) ; } setNeedToReposition ( _BOOL ) ; return _BOOL ; } point1 = ( Point ) proj . forward ( lat , lon , new Point ( ) ) ; point1 . x += x ; point1 . y += y ; break ; case RENDERTYPE_UNKNOWN : if ( DEBUG ) { logger . fine ( _STR ) ; } if ( lat == _NUM && lon == _NUM ) { if ( x == _NUM && y == _NUM ) { if ( DEBUG ) { logger . fine ( _STR ) ; } point1 = new Point ( - width , - height ) ; point2 = new Point ( _NUM , _NUM ) ; return _BOOL ; } else { point1 = new Point ( x , y ) ; } } else { if ( ! proj . isPlotable ( lat , lon ) ) { logger . fine ( _STR ) ; return _BOOL ; } point1 = ( Point ) proj . forward ( lat , lon , new Point ( ) ) ; } break ; } point2 = new Point ( _NUM , _NUM ) ; point2 . x = point1 . x + width ; point2 . y = point1 . y + height ; setNeedToReposition ( _BOOL ) ; return _BOOL ; }
public synchronized int lastIndexOf ( Object object , int location ) { if ( location < elementCount ) { if ( object != null ) { for ( int i = location ; i >= _NUM ; i -- ) { if ( object . equals ( elementData [ i ] ) ) { return i ; } } } else { for ( int i = location ; i >= _NUM ; i -- ) { if ( elementData [ i ] == null ) { return i ; } } } return - _NUM ; } throw arrayIndexOutOfBoundsException ( location , elementCount ) ; }
@ Override public boolean canUndo ( ) { return ! m_UndoList . isEmpty ( ) ; }
public java . lang . StringBuffer insert ( int offset , char c ) { internal . insert ( offset , c ) ; return this ; }
public static boolean isAbsolutePath ( String systemId ) { if ( systemId == null ) return _BOOL ; final File file = new File ( systemId ) ; return file . isAbsolute ( ) ; }
protected void calculateDestination ( IFile uxf , ICompilationUnit referencingCompilationUnit , Destination dest ) throws CoreException { IFile uxfDest = calculateImgDestination ( uxf , referencingCompilationUnit ) ; if ( uxfDest != null ) { dest . imgFileDestination = uxfDest ; } }
@ Override public void onEvent ( ProjectEvent event ) { if ( event . getType ( ) == ProjectEvent . EventType . UPDATED || event . getType ( ) == ProjectEvent . EventType . CREATED ) { update ( event ) ; } }
protected abstract boolean onMouseClick ( Point point ) ;
private void remeasure ( int width , int height ) { MAX_UNEXPANDED_ALLDAY_HEIGHT = ( int ) ( MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * _NUM ) ; MAX_UNEXPANDED_ALLDAY_HEIGHT = Math . min ( MAX_UNEXPANDED_ALLDAY_HEIGHT , height / _NUM ) ; MAX_UNEXPANDED_ALLDAY_HEIGHT = Math . max ( MAX_UNEXPANDED_ALLDAY_HEIGHT , ( int ) MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * _NUM ) ; mMaxUnexpandedAlldayEventCount = ( int ) ( MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT ) ; for ( int day = _NUM ; day < mNumDays ; day ++ ) { mEarliestStartHour [ day ] = _NUM ; mHasAllDayEvent [ day ] = _BOOL ; } int maxAllDayEvents = mMaxAlldayEvents ; mMinCellHeight = Math . max ( ( height - DAY_HEADER_HEIGHT ) / _NUM , ( int ) MIN_EVENT_HEIGHT ) ; if ( mCellHeight < mMinCellHeight ) { mCellHeight = mMinCellHeight ; } mFirstCell = DAY_HEADER_HEIGHT ; int allDayHeight = _NUM ; if ( maxAllDayEvents > _NUM ) { int maxAllAllDayHeight = height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT ; if ( maxAllDayEvents == _NUM ) { allDayHeight = SINGLE_ALLDAY_HEIGHT ; } else if ( maxAllDayEvents <= mMaxUnexpandedAlldayEventCount ) { allDayHeight = maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT ; if ( allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT ) { allDayHeight = MAX_UNEXPANDED_ALLDAY_HEIGHT ; } } else { if ( mAnimateDayHeight != _NUM ) { allDayHeight = Math . max ( mAnimateDayHeight , MAX_UNEXPANDED_ALLDAY_HEIGHT ) ; } else { allDayHeight = ( int ) ( maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT ) ; if ( ! mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT ) { allDayHeight = ( int ) ( mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT ) ; } else if ( allDayHeight > maxAllAllDayHeight ) { allDayHeight = maxAllAllDayHeight ; } } } mFirstCell = DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN ; } else { mSelectionAllday = _BOOL ; } mAlldayHeight = allDayHeight ; mGridAreaHeight = height - mFirstCell ; int allDayIconWidth = mExpandAlldayDrawable . getIntrinsicWidth ( ) ; mExpandAllDayRect . left = Math . max ( ( mHoursWidth - allDayIconWidth ) / _NUM , EVENT_ALL_DAY_TEXT_LEFT_MARGIN ) ; mExpandAllDayRect . right = Math . min ( mExpandAllDayRect . left + allDayIconWidth , mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN ) ; mExpandAllDayRect . bottom = mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN ; mExpandAllDayRect . top = mExpandAllDayRect . bottom - mExpandAlldayDrawable . getIntrinsicHeight ( ) ; mNumHours = mGridAreaHeight / ( mCellHeight + HOUR_GAP ) ; mEventGeometry . setHourHeight ( mCellHeight ) ; final long minimumDurationMillis = ( long ) ( MIN_EVENT_HEIGHT * DateUtils . MINUTE_IN_MILLIS / ( mCellHeight / _NUM ) ) ; Event . computePositions ( mEvents , minimumDurationMillis ) ; mMaxViewStartY = HOUR_GAP + _NUM * ( mCellHeight + HOUR_GAP ) - mGridAreaHeight ; if ( DEBUG ) { Log . e ( TAG , _STR + mViewStartY ) ; Log . e ( TAG , _STR + mMaxViewStartY ) ; } if ( mViewStartY > mMaxViewStartY ) { mViewStartY = mMaxViewStartY ; computeFirstHour ( ) ; } if ( mFirstHour == - _NUM ) { initFirstHour ( ) ; mFirstHourOffset = _NUM ; } if ( mFirstHourOffset >= mCellHeight + HOUR_GAP ) { mFirstHourOffset = mCellHeight + HOUR_GAP - _NUM ; } mViewStartY = mFirstHour * ( mCellHeight + HOUR_GAP ) - mFirstHourOffset ; final int eventAreaWidth = mNumDays * ( mCellWidth + DAY_GAP ) ; if ( mSelectedEvent != null && mLastPopupEventID != mSelectedEvent . id ) { mPopup . dismiss ( ) ; } mPopup . setWidth ( eventAreaWidth - _NUM ) ; mPopup . setHeight ( WindowManager . LayoutParams . WRAP_CONTENT ) ; }
public void updateVisibleIds ( List < Integer > priority ) { if ( mNativeTabContentManager != _NUM ) { int idsSize = Math . min ( mFullResThumbnailsMaxSize , priority . size ( ) ) ; if ( idsSize != mPriorityTabIds . length ) { mPriorityTabIds = new int [ idsSize ] ; } for ( int i = _NUM ; i < idsSize ; i ++ ) { mPriorityTabIds [ i ] = priority . get ( i ) ; } nativeUpdateVisibleIds ( mNativeTabContentManager , mPriorityTabIds ) ; } }
public final void walkGraph ( Hashtable semNodesTable ) { Integer uid = new Integer ( myUID ) ; if ( semNodesTable . get ( uid ) != null ) return ; semNodesTable . put ( new Integer ( myUID ) , this ) ; }
private void requestFragmenting ( IgfsEntryInfo fileInfo ) { IgfsFileMap map = fileInfo . fileMap ( ) ; assert map != null && ! map . ranges ( ) . isEmpty ( ) ; Map < UUID , Collection < IgfsFileAffinityRange > > grpMap = U . newHashMap ( map . ranges ( ) . size ( ) ) ; for ( IgfsFileAffinityRange range : map . ranges ( ) ) { UUID nodeId = igfsCtx . data ( ) . affinityNode ( range . affinityKey ( ) ) . id ( ) ; Collection < IgfsFileAffinityRange > nodeRanges = grpMap . get ( nodeId ) ; if ( nodeRanges == null ) { nodeRanges = new LinkedList < > ( ) ; grpMap . put ( nodeId , nodeRanges ) ; } nodeRanges . addAll ( range . split ( igfsCtx . data ( ) . groupBlockSize ( ) ) ) ; } Collection < UUID > nodeIds = new IdentityHashSet ( grpMap . keySet ( ) ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + fileInfo + _STR + nodeIds + _STR ) ; Object old = fragmentingFiles . putIfAbsent ( fileInfo . id ( ) , nodeIds ) ; assert old == null ; for ( Map . Entry < UUID , Collection < IgfsFileAffinityRange > > entry : grpMap . entrySet ( ) ) { UUID nodeId = entry . getKey ( ) ; IgfsFragmentizerRequest msg = new IgfsFragmentizerRequest ( fileInfo . id ( ) , entry . getValue ( ) ) ; try { if ( log . isDebugEnabled ( ) ) log . debug ( _STR + nodeId + _STR + fileInfo . id ( ) + _STR + msg + _STR ) ; sendWithRetries ( nodeId , msg ) ; } catch ( IgniteCheckedException e ) { if ( e . hasCause ( ClusterTopologyCheckedException . class ) ) { if ( log . isDebugEnabled ( ) ) log . debug ( _STR + nodeId ) ; } else U . error ( log , _STR + nodeId + _STR + msg + _STR , e ) ; nodeIds . remove ( nodeId ) ; } } if ( nodeIds . isEmpty ( ) ) { if ( log . isDebugEnabled ( ) ) log . debug ( _STR + fileInfo ) ; fragmentingFiles . remove ( fileInfo . id ( ) , nodeIds ) ; } }
public boolean showPreviousNotification ( ) { int i = getSelectedIndex ( ) ; if ( i != - _NUM && i > _NUM ) { model . setSelectedItem ( model . getElementAt ( i - _NUM ) ) ; return _BOOL ; } return _BOOL ; }
@ Override public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeBoolean ( isLeaf ) ; out . writeInt ( numEntries ) ; }
protected void addInputNode_internal ( BNode inputNode ) { if ( inputNodes . containsKey ( inputNode . getId ( ) ) ) { log . warning ( _STR + inputNode . getId ( ) + _STR + nodeId ) ; } inputNodes . put ( inputNode . getId ( ) , inputNode ) ; }
public static void initialize ( final CDatabaseConfiguration configuration ) throws CouldntLoadDriverException , CouldntConnectException , SQLException { checkDriver ( configuration ) ; final String url = POSTGRES_DRIVER + _STR + configuration . getHost ( ) + _STR + POSTGRES_DEFAULT_DB ; Connection connection = null ; try { connection = DriverManager . getConnection ( url , configuration . getUser ( ) , configuration . getPassword ( ) ) ; } catch ( final SQLException exception ) { CUtilityFunctions . logException ( exception ) ; throw new CouldntConnectException ( exception , exception . getErrorCode ( ) , exception . getSQLState ( ) ) ; } final String statement = _STR + configuration . getName ( ) + _STR ; final PreparedStatement preparedStatement = connection . prepareStatement ( statement ) ; try { preparedStatement . execute ( ) ; } finally { preparedStatement . close ( ) ; connection . close ( ) ; } }
public List < FCEndpoint > showFcnsDatabase ( Integer vsanId ) throws NetworkDeviceControllerException { Map < Integer , String > vsanToWwns = getVsanWwns ( vsanId ) ; List < FCEndpoint > connections = new ArrayList < FCEndpoint > ( ) ; SSHPrompt [ ] prompts = { SSHPrompt . MDS_POUND , SSHPrompt . MDS_GREATER_THAN } ; StringBuilder buf = new StringBuilder ( ) ; String cmd = MDSDialogProperties . getString ( _STR ) ; if ( vsanId != null ) { cmd = cmd + MDSDialogProperties . getString ( _STR ) + vsanId . toString ( ) + _STR ; } else { cmd = cmd + _STR ; } SSHPrompt prompt = sendWaitFor ( cmd , defaultTimeout , prompts , buf ) ; String [ ] lines = getLines ( buf ) ; String [ ] regex = { MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) , MDSDialogProperties . getString ( _STR ) } ; String [ ] groups = new String [ _NUM ] ; FCEndpoint conn = null ; for ( String line : lines ) { int index = match ( line , regex , groups , Pattern . CASE_INSENSITIVE ) ; switch ( index ) { case _NUM : conn = new FCEndpoint ( ) ; conn . setFabricId ( groups [ _NUM ] ) ; conn . setFcid ( groups [ _NUM ] ) ; String fabricWwn = vsanToWwns . get ( new Integer ( groups [ _NUM ] ) ) ; if ( fabricWwn != null ) { conn . setFabricWwn ( fabricWwn ) ; } connections . add ( conn ) ; break ; case _NUM : conn . setRemotePortName ( groups [ _NUM ] ) ; break ; case _NUM : conn . setRemoteNodeName ( groups [ _NUM ] ) ; break ; case _NUM : conn . setSwitchPortName ( groups [ _NUM ] ) ; break ; case _NUM : conn . setSwitchInterface ( groups [ _NUM ] ) ; break ; case _NUM : conn . setSwitchName ( groups [ _NUM ] ) ; break ; case _NUM : conn . setRemotePortAlias ( groups [ _NUM ] ) ; } } return connections ; }
private void registerObjectRead ( Object obj , int handle , boolean unshared ) throws IOException { if ( unshared ) { obj = UNSHARED_OBJ ; } int index = handle - ObjectStreamConstants . baseWireHandle ; int size = objectsRead . size ( ) ; while ( index > size ) { objectsRead . add ( null ) ; ++ size ; } if ( index == size ) { objectsRead . add ( obj ) ; } else { objectsRead . set ( index , obj ) ; } }
public static void addExtensionHeader ( String headerName , String className ) { nameMap . put ( headerName . toLowerCase ( ) , className ) ; }
public boolean merge ( final Frame < ? extends V > frame , final Interpreter < V > interpreter ) throws AnalyzerException { if ( top != frame . top ) { throw new AnalyzerException ( null , _STR ) ; } boolean changes = _BOOL ; for ( int i = _NUM ; i < locals + top ; ++ i ) { V v = interpreter . merge ( values [ i ] , frame . values [ i ] ) ; if ( ! v . equals ( values [ i ] ) ) { values [ i ] = v ; changes = _BOOL ; } } return changes ; }
public static void keytool ( String cmd ) { log . info ( _STR + cmd ) ; ArrayList < String > list = new ArrayList < String > ( ) ; StringTokenizer st = new StringTokenizer ( cmd , _STR ) ; String quoteBuffer = null ; while ( st . hasMoreTokens ( ) ) { String token = st . nextToken ( ) ; if ( quoteBuffer == null ) { if ( token . startsWith ( _STR ) ) quoteBuffer = token . substring ( _NUM ) ; else list . add ( token ) ; } else quoteBuffer += _STR + token ; if ( token . endsWith ( _STR ) ) { String str = quoteBuffer . substring ( _NUM , quoteBuffer . length ( ) - _NUM ) ; list . add ( str ) ; quoteBuffer = null ; } } String [ ] args = new String [ list . size ( ) ] ; list . toArray ( args ) ; try { KeyTool . main ( args ) ; } catch ( Exception e ) { } }
private void smoothSnapToPosition ( int scrollY , int availableScrollHeight , AlphabeticalAppsList . FastScrollSectionInfo info ) { mRv . removeCallbacks ( mSmoothSnapNextFrameRunnable ) ; mRv . removeCallbacks ( mFastScrollToTargetSectionRunnable ) ; trackAllChildViews ( ) ; if ( mHasFastScrollTouchSettled ) { mCurrentFastScrollSection = info . sectionName ; mTargetFastScrollSection = null ; updateTrackedViewsFastScrollFocusState ( ) ; } else { mCurrentFastScrollSection = null ; mTargetFastScrollSection = info . sectionName ; mHasFastScrollTouchSettled = _BOOL ; updateTrackedViewsFastScrollFocusState ( ) ; mRv . postDelayed ( mFastScrollToTargetSectionRunnable , mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION ) ; } int newScrollY = Math . min ( availableScrollHeight , mRv . getPaddingTop ( ) + mRv . getTop ( info . fastScrollToItem . rowIndex ) ) ; int numFrames = mFastScrollFrames . length ; for ( int i = _NUM ; i < numFrames ; i ++ ) { mFastScrollFrames [ i ] = ( newScrollY - scrollY ) / numFrames ; } mFastScrollFrameIndex = _NUM ; mRv . postOnAnimation ( mSmoothSnapNextFrameRunnable ) ; }
private void updatePropertyToValue2 ( ) throws Exception { properties . put ( TEST_KEY , TEST_VALUE_2 ) ; updatePropertiesFile ( ) ; }
public void unassignServices ( String universalId , Set serviceNames ) throws AMConsoleException { if ( ( serviceNames != null ) && ! serviceNames . isEmpty ( ) ) { String [ ] params = new String [ _NUM ] ; params [ _NUM ] = universalId ; String currentSvc = _STR ; try { AMIdentity amid = IdUtils . getIdentity ( getUserSSOToken ( ) , universalId ) ; for ( Iterator iter = serviceNames . iterator ( ) ; iter . hasNext ( ) ; ) { currentSvc = ( String ) iter . next ( ) ; params [ _NUM ] = currentSvc ; logEvent ( _STR , params ) ; amid . unassignService ( currentSvc ) ; logEvent ( _STR , params ) ; } } catch ( SSOException e ) { String [ ] paramsEx = { universalId , currentSvc , getErrorString ( e ) } ; logEvent ( _STR , paramsEx ) ; debug . warning ( _STR , e ) ; throw new AMConsoleException ( getErrorString ( e ) ) ; } catch ( IdRepoException e ) { String [ ] paramsEx = { universalId , currentSvc , getErrorString ( e ) } ; logEvent ( _STR , paramsEx ) ; debug . warning ( _STR , e ) ; throw new AMConsoleException ( getErrorString ( e ) ) ; } } }
private Cluster < T > expandCluster ( final Cluster < T > cluster , final T point , final List < T > neighbors , final Collection < T > points , final Map < Clusterable , PointStatus > visited ) { cluster . addPoint ( point ) ; visited . put ( point , PointStatus . PART_OF_CLUSTER ) ; List < T > seeds = new ArrayList < T > ( neighbors ) ; int index = _NUM ; while ( index < seeds . size ( ) ) { final T current = seeds . get ( index ) ; PointStatus pStatus = visited . get ( current ) ; if ( pStatus == null ) { final List < T > currentNeighbors = getNeighbors ( current , points ) ; if ( currentNeighbors . size ( ) >= minPts ) { seeds = merge ( seeds , currentNeighbors ) ; } } if ( pStatus != PointStatus . PART_OF_CLUSTER ) { visited . put ( current , PointStatus . PART_OF_CLUSTER ) ; cluster . addPoint ( current ) ; } index ++ ; } return cluster ; }
private static Address GetFloatArrayElements ( JNIEnvironment env , int arrayJREF , Address isCopyAddress ) { if ( traceJNI ) VM . sysWrite ( _STR ) ; RuntimeEntrypoints . checkJNICountDownToGC ( ) ; try { float [ ] sourceArray = ( float [ ] ) env . getJNIRef ( arrayJREF ) ; int size = sourceArray . length ; if ( MemoryManager . willNeverMove ( sourceArray ) ) { JNIGenericHelpers . setBoolStar ( isCopyAddress , _BOOL ) ; return Magic . objectAsAddress ( sourceArray ) ; } else { Address copyBuffer = sysCall . sysMalloc ( size << LOG_BYTES_IN_FLOAT ) ; if ( copyBuffer . isZero ( ) ) { env . recordException ( new OutOfMemoryError ( ) ) ; return Address . zero ( ) ; } Memory . memcopy ( copyBuffer , Magic . objectAsAddress ( sourceArray ) , size << LOG_BYTES_IN_FLOAT ) ; JNIGenericHelpers . setBoolStar ( isCopyAddress , _BOOL ) ; return copyBuffer ; } } catch ( Throwable unexpected ) { if ( traceJNI ) unexpected . printStackTrace ( System . err ) ; env . recordException ( unexpected ) ; return Address . zero ( ) ; } }
@ Override public int parse ( DateTimeParseContext context , CharSequence text , int position ) { int length = text . length ( ) ; if ( position > length ) { throw new IndexOutOfBoundsException ( ) ; } if ( position == length ) { return ~ position ; } char nextChar = text . charAt ( position ) ; if ( nextChar == _STR || nextChar == _STR ) { return parseOffsetBased ( context , text , position , position , OffsetIdPrinterParser . INSTANCE_ID_Z ) ; } else if ( length >= position + _NUM ) { char nextNextChar = text . charAt ( position + _NUM ) ; if ( context . charEquals ( nextChar , _STR ) && context . charEquals ( nextNextChar , _STR ) ) { if ( length >= position + _NUM && context . charEquals ( text . charAt ( position + _NUM ) , _STR ) ) { return parseOffsetBased ( context , text , position , position + _NUM , OffsetIdPrinterParser . INSTANCE_ID_ZERO ) ; } return parseOffsetBased ( context , text , position , position + _NUM , OffsetIdPrinterParser . INSTANCE_ID_ZERO ) ; } else if ( context . charEquals ( nextChar , _STR ) && length >= position + _NUM && context . charEquals ( nextNextChar , _STR ) && context . charEquals ( text . charAt ( position + _NUM ) , _STR ) ) { return parseOffsetBased ( context , text , position , position + _NUM , OffsetIdPrinterParser . INSTANCE_ID_ZERO ) ; } } PrefixTree tree = getTree ( context ) ; ParsePosition ppos = new ParsePosition ( position ) ; String parsedZoneId = tree . match ( text , ppos ) ; if ( parsedZoneId == null ) { if ( context . charEquals ( nextChar , _STR ) ) { context . setParsed ( ZoneOffset . UTC ) ; return position + _NUM ; } return ~ position ; } context . setParsed ( ZoneId . of ( parsedZoneId ) ) ; return ppos . getIndex ( ) ; }
private void prepareTransfers ( ) throws LibUsbException { if ( mAvailableTransfers == null ) { mAvailableTransfers = new LinkedTransferQueue < > ( ) ; for ( int x = _NUM ; x < TRANSFER_BUFFER_POOL_SIZE ; x ++ ) { Transfer transfer = LibUsb . allocTransfer ( ) ; if ( transfer == null ) { throw new LibUsbException ( _STR , LibUsb . ERROR_NO_MEM ) ; } final ByteBuffer buffer = ByteBuffer . allocateDirect ( mBufferSize ) ; LibUsb . fillBulkTransfer ( transfer , mDeviceHandle , USB_ENDPOINT , buffer , BufferProcessor . this , _STR , USB_TIMEOUT_US ) ; mAvailableTransfers . add ( transfer ) ; } } }
private void outputFullLines ( ) throws IOException { for ( ; ; ) { int leftLen = leftBuf . indexOf ( _STR ) ; if ( leftLen < _NUM ) { return ; } int rightLen = rightBuf . indexOf ( _STR ) ; if ( rightLen < _NUM ) { return ; } if ( leftLen != _NUM ) { out . write ( leftBuf . substring ( _NUM , leftLen ) ) ; } if ( rightLen != _NUM ) { writeSpaces ( out , leftWidth - leftLen ) ; out . write ( rightBuf . substring ( _NUM , rightLen ) ) ; } out . write ( _STR ) ; leftBuf . delete ( _NUM , leftLen + _NUM ) ; rightBuf . delete ( _NUM , rightLen + _NUM ) ; } }
@ Secured public void addPay_Simple ( long userId , BigDecimal amount , Date created , PaymentType payType , String details , boolean updateCache ) throws ConcurrentUpdateSqlException , Exception { checkAccessFor_ADMIN ( ) ; amount = amount . abs ( ) ; long id = universal . nextSeqFor ( payments ) ; PaymentExt payment = PaymentExt . createSystemPayment ( id , userId , amount , created , payType , details ) ; BigDecimal newVal = doPayment ( userId , payment , updateCache ) ; log . info ( _STR + userId + ( newVal != null ? _STR + newVal : _STR ) + _STR + getReqInfoStr ( ) ) ; }
public void registerUnregisteredNamespaces ( ) { for ( int i = _NUM ; i < m_unregisteredExtensions . size ( ) ; i ++ ) { String ns = ( String ) m_unregisteredExtensions . get ( i ) ; ExtensionNamespaceSupport extNsSpt = defineJavaNamespace ( ns ) ; if ( extNsSpt != null ) m_extensions . add ( extNsSpt ) ; } }
private void removeAllObjects ( ) { logger . debug ( _STR ) ; texts . clear ( ) ; }
public Builder deleteDisplayName ( ) { deleteFields . add ( _STR ) ; return this ; }
public static Type newType ( AST ast , VariableDeclaration declaration ) { return newType ( ast , declaration , null , null ) ; }
public void delete ( ) throws IOException { close ( ) ; Util . deleteContents ( directory ) ; }
private void waitForIteratorsCleared ( IgniteCache < String , Integer > cache , int secs ) throws InterruptedException { for ( int i = _NUM ; i < secs ; i ++ ) { try { cache . size ( ) ; checkIteratorsCleared ( ) ; } catch ( AssertionFailedError e ) { if ( i == _NUM ) { for ( int j = _NUM ; j < gridCount ( ) ; j ++ ) executeOnLocalOrRemoteJvm ( j , new PrintIteratorStateTask ( ) ) ; throw e ; } log . info ( _STR ) ; Thread . sleep ( _NUM ) ; } } }
public void addLifecycleListener ( LifecycleListener lifecycleListener ) { if ( ! lifecycleListeners . contains ( lifecycleListener ) ) { lifecycleListeners . add ( lifecycleListener ) ; } }
private int indexOf ( String fullPath ) { for ( int i = _NUM , length = this . relativePaths . length ; i < length ; i ++ ) { String currentRelativePath = this . relativePaths [ i ] ; if ( currentRelativePath == null ) continue ; String currentContainerPath = this . containerPaths [ i ] ; String currentFullPath = currentRelativePath . length ( ) == _NUM ? currentContainerPath : ( currentContainerPath + _STR + currentRelativePath ) ; if ( encloses ( currentFullPath , fullPath , i ) ) return i ; } return - _NUM ; }
boolean destroyVolume ( boolean force ) { NaElement elem = new NaElement ( _STR ) ; elem . addNewChild ( _STR , Boolean . toString ( force ) ) ; elem . addNewChild ( _STR , name ) ; try { server . invokeElem ( elem ) ; return _BOOL ; } catch ( Exception e ) { String msg = _STR + name ; log . error ( msg , e ) ; throw new NetAppException ( msg , e ) ; } }
public static GeneralPath stackSpline ( GeneralPath p , float [ ] pts , float epsilon , float slack , boolean closed , float tx , float ty ) { int npoints = _NUM ; for ( ; npoints < pts . length ; ++ npoints ) if ( Float . isNaN ( pts [ npoints ] ) ) break ; return stackSpline ( p , pts , _NUM , npoints / _NUM , epsilon , slack , closed , tx , ty ) ; }
private boolean validateCooldownSetting ( String appId , AutoScalerPolicyTrigger policyTrigger , String triggerId ) { AutoScalingDataStore stateStore = AutoScalingDataStoreFactory . getAutoScalingDataStore ( ) ; AppAutoScaleState appState = null ; appState = stateStore . getScalingState ( appId ) ; if ( appState == null ) { return _BOOL ; } else if ( ( appState . getInstanceCountState ( ) != ScalingStateManager . SCALING_STATE_COMPLETED ) && ( appState . getInstanceCountState ( ) != ScalingStateManager . SCALING_STATE_FAILED ) ) { long lastStartTime = appState . getLastActionStartTime ( ) ; long currentTime = System . currentTimeMillis ( ) ; boolean timeExpired = ( currentTime - lastStartTime ) > this . eventTimeout ; if ( timeExpired ) { logger . debug ( _STR + appId + _STR ) ; return _BOOL ; } logger . debug ( _STR + appId + _STR ) ; return _BOOL ; } else { long cooldownEndtime = appState . getLastActionEndTime ( ) + _NUM * getCooldownSecs ( policyTrigger , triggerId ) ; if ( System . currentTimeMillis ( ) < cooldownEndtime ) { logger . debug ( _STR + appId + _STR ) ; return _BOOL ; } } return _BOOL ; }
private long convertToBytes ( int megaBytes ) { long bytes = megaBytes ; bytes = bytes * _NUM * _NUM ; return bytes ; }
public static int calcTextHeight ( Paint paint , String demoText ) { Rect r = new Rect ( ) ; paint . getTextBounds ( demoText , _NUM , demoText . length ( ) , r ) ; return r . height ( ) ; }
private String generateZonesetCloneName ( String zonesetToClone ) { try { Thread . sleep ( _NUM ) ; } catch ( InterruptedException ex ) { _log . warn ( ex . getLocalizedMessage ( ) ) ; } Calendar cal = Calendar . getInstance ( ) ; DateFormat dateFormat = new SimpleDateFormat ( _STR ) ; String dateString = dateFormat . format ( cal . getTime ( ) ) ; String longName = MDSDialogProperties . getString ( _STR ) ; if ( ! longName . contains ( _STR ) ) { return longName ; } return _STR + zonesetToClone + _STR + dateString ; }
protected abstract void writeSignatureBlock ( byte [ ] signature , OutputStream out ) throws IOException ;
private static Object invokeOrDie ( final Method method , final Object object , final Object ... params ) { try { return method . invoke ( object , params ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( _STR + _STR , e ) ; } catch ( InvocationTargetException e ) { final Throwable cause = e . getCause ( ) ; if ( cause instanceof RuntimeException ) { throw ( RuntimeException ) cause ; } else if ( cause instanceof Error ) { throw ( Error ) cause ; } else { throw new RuntimeException ( _STR , cause ) ; } } }
private StringBuffer buildSelectQuery ( String schemaName , String tableName , ArrayList < OneRowChange . ColumnSpec > keys , ArrayList < OneRowChange . ColumnVal > keyValues ) { StringBuffer stmt = new StringBuffer ( ) ; stmt . append ( _STR ) ; stmt . append ( conn . getDatabaseObjectName ( schemaName ) + _STR + conn . getDatabaseObjectName ( tableName ) ) ; stmt . append ( _STR ) ; printColumnSpec ( stmt , keys , keyValues , PrintMode . ASSIGNMENT , _STR ) ; return stmt ; }
public void show ( Animation anim ) { mAnim = anim ; show ( ) ; }
public static boolean isUriKey ( String key ) { return key . endsWith ( _STR ) || key . endsWith ( _STR ) ; }
public int receive ( byte [ ] buffer , int offset , int count , int timeout ) { checkArrayBounds ( buffer , offset , count ) ; if ( count == _NUM ) { return _NUM ; } byte [ ] data = buffer ; if ( offset > _NUM ) { data = new byte [ count ] ; } IntOut bytesReceivedOut = new IntOut ( ) ; try { IDevice . checkResult ( LibIMobileDevice . idevice_connection_receive_timeout ( getRef ( ) , data , count , bytesReceivedOut , timeout ) ) ; int bytesRead = bytesReceivedOut . getValue ( ) ; if ( bytesRead > _NUM && data != buffer ) { System . arraycopy ( data , _NUM , buffer , offset , bytesRead ) ; } return bytesRead ; } finally { bytesReceivedOut . delete ( ) ; } }
public synchronized void addOFChannelHandlerAndSendRole ( OFChannelHandler h ) { connectedChannelHandlers . add ( h ) ; h . sendRoleRequest ( this . role ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . deleteData ( _NUM , _NUM ) ; childData = child . getData ( ) ; assertEquals ( _STR , _STR , childData ) ; }
public boolean send ( byte [ ] bytes ) { if ( ! connected ) return _BOOL ; try { outputStream . write ( bytes ) ; outputStream . flush ( ) ; return _BOOL ; } catch ( IOException e ) { connected = _BOOL ; Log . e ( TAG , _STR ) ; return _BOOL ; } finally { if ( ! connected ) { closeConnection ( ) ; } } }
public synchronized void returnBuf ( byte [ ] buf ) { if ( buf == null || buf . length > mSizeLimit ) { return ; } mBuffersByLastUse . add ( buf ) ; int pos = Collections . binarySearch ( mBuffersBySize , buf , BUF_COMPARATOR ) ; if ( pos < _NUM ) { pos = - pos - _NUM ; } mBuffersBySize . add ( pos , buf ) ; mCurrentSize += buf . length ; trim ( ) ; }
public CopyOnWriteArrayList ( Collection c ) { Object [ ] elements = new Object [ c . size ( ) ] ; int size = _NUM ; for ( Iterator itr = c . iterator ( ) ; itr . hasNext ( ) ; ) { Object e = itr . next ( ) ; elements [ size ++ ] = e ; } setArray ( elements ) ; }
private byte [ ] entityToBytes ( HttpEntity entity ) throws IOException , ServerError { PoolingByteArrayOutputStream bytes = new PoolingByteArrayOutputStream ( mPool , ( int ) entity . getContentLength ( ) ) ; byte [ ] buffer = null ; try { InputStream in = entity . getContent ( ) ; if ( in == null ) { throw new ServerError ( ) ; } buffer = mPool . getBuf ( _NUM ) ; int count ; while ( ( count = in . read ( buffer ) ) != - _NUM ) { bytes . write ( buffer , _NUM , count ) ; } return bytes . toByteArray ( ) ; } finally { try { entity . consumeContent ( ) ; } catch ( IOException e ) { VolleyLog . v ( _STR ) ; } mPool . returnBuf ( buffer ) ; bytes . close ( ) ; } }
public void addTailArg ( String arg ) { _tailArgs . add ( arg ) ; }
private String translateBytesToString ( byte [ ] bytes , long format , Transferable localeTransferable ) throws IOException { Long lFormat = Long . valueOf ( format ) ; String charset = getBestCharsetForTextFormat ( lFormat , localeTransferable ) ; String eoln = ( String ) nativeEOLNs . get ( lFormat ) ; Integer terminators = ( Integer ) nativeTerminators . get ( lFormat ) ; int count ; if ( terminators != null ) { int numTerminators = terminators . intValue ( ) ; search : for ( count = _NUM ; count < ( bytes . length - numTerminators + _NUM ) ; count += numTerminators ) { for ( int i = count ; i < count + numTerminators ; i ++ ) { if ( bytes [ i ] != _NUM ) { continue search ; } } break search ; } } else { count = bytes . length ; } String converted = new String ( bytes , _NUM , count , charset ) ; if ( eoln != null ) { char [ ] buf = converted . toCharArray ( ) ; char [ ] eoln_arr = eoln . toCharArray ( ) ; converted = null ; int j = _NUM ; boolean match ; for ( int i = _NUM ; i < buf . length ; ) { if ( i + eoln_arr . length > buf . length ) { buf [ j ++ ] = buf [ i ++ ] ; continue ; } match = _BOOL ; for ( int k = _NUM , l = i ; k < eoln_arr . length ; k ++ , l ++ ) { if ( eoln_arr [ k ] != buf [ l ] ) { match = _BOOL ; break ; } } if ( match ) { buf [ j ++ ] = _STR ; i += eoln_arr . length ; } else { buf [ j ++ ] = buf [ i ++ ] ; } } converted = new String ( buf , _NUM , j ) ; } return converted ; }
public InlineURIHandler ( final String namespace ) { this . namespace = namespace ; this . len = namespace . length ( ) ; }
private double [ ] CalcVariableCoef ( Variogram variogram , KrigingPoint p , List < KrigingPoint > NNPoints ) { int n = NNPoints . size ( ) ; double [ ] mat = new double [ n + _NUM ] ; double dist = _NUM ; for ( int i = _NUM ; i < n ; i ++ ) { dist = Math . sqrt ( Math . abs ( Math . pow ( NNPoints . get ( i ) . x - p . x , _NUM ) ) + Math . abs ( Math . pow ( NNPoints . get ( i ) . y - p . y , _NUM ) ) ) ; mat [ i ] = getTheoreticalSVValue ( dist , variogram ) ; } mat [ n ] = _NUM ; return mat ; }
public static Object deserialization ( String filePath ) { ObjectInputStream in = null ; try { in = new ObjectInputStream ( new FileInputStream ( filePath ) ) ; Object o = in . readObject ( ) ; in . close ( ) ; return o ; } catch ( FileNotFoundException e ) { throw new RuntimeException ( _STR , e ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( _STR , e ) ; } catch ( IOException e ) { throw new RuntimeException ( _STR , e ) ; } finally { IOUtils . close ( in ) ; } }
private static boolean isMergedSegment ( String segName ) { if ( segName . contains ( _STR ) ) { return _BOOL ; } return _BOOL ; }
public static CipherParameters makePBEMacParameters ( PBEKeySpec keySpec , int type , int hash , int keySize ) { PBEParametersGenerator generator = makePBEGenerator ( type , hash ) ; byte [ ] key ; CipherParameters param ; key = convertPassword ( type , keySpec ) ; generator . init ( key , keySpec . getSalt ( ) , keySpec . getIterationCount ( ) ) ; param = generator . generateDerivedMacParameters ( keySize ) ; for ( int i = _NUM ; i != key . length ; i ++ ) { key [ i ] = _NUM ; } return param ; }
public void addEmojiconGroup ( List < EaseEmojiconGroupEntity > groupEntitieList ) { for ( int i = _NUM ; i < groupEntitieList . size ( ) ; i ++ ) { EaseEmojiconGroupEntity groupEntity = groupEntitieList . get ( i ) ; emojiconGroupList . add ( groupEntity ) ; pagerView . addEmojiconGroup ( groupEntity , i == groupEntitieList . size ( ) - _NUM ? _BOOL : _BOOL ) ; tabBar . addTab ( groupEntity . getIcon ( ) ) ; } }
public void updateEnd ( Logger log ) { m_instanceCount ++ ; m_sampleCount ++ ; double end = System . currentTimeMillis ( ) ; double temp = end - m_updateStart ; m_cumulativeTime += temp ; boolean toFastToMeasure = _BOOL ; if ( ( end - m_startTime ) >= m_sampleTime ) { computeUpdate ( end ) ; if ( log != null ) { log . statusMessage ( m_statusMessagePrefix + _STR + m_instanceCount + _STR + m_avInstsPerSec / m_numSamples + _STR + ( toFastToMeasure ? _STR : _STR ) ) ; } m_sampleCount = _NUM ; m_cumulativeTime = _NUM ; m_startTime = System . currentTimeMillis ( ) ; } }
public boolean shouldInclude ( final Path path ) { return includeMatchers . size ( ) == _NUM || matches ( path , includeMatchers ) ; }
private List < View > addView ( View view , List < View > cache ) { if ( cache == null ) { cache = new LinkedList < View > ( ) ; } cache . add ( view ) ; return cache ; }
public ArrayList < MechSummary > generateUnits ( int num , UnitFilter filter ) { ArrayList < MechSummary > retVal = new ArrayList < > ( ) ; for ( int i = _NUM ; i < num ; i ++ ) { MechSummary ms = generateUnit ( filter ) ; if ( ms != null ) { retVal . add ( ms ) ; } } return retVal ; }
static public Automaton concatenate ( Automaton a1 , Automaton a2 ) { return concatenate ( Arrays . asList ( a1 , a2 ) ) ; }
public void contentsChanged ( ListDataEvent e ) { Object oldSelection = selectedItemReminder ; Object newSelection = dataModel . getSelectedItem ( ) ; if ( oldSelection == null || ! oldSelection . equals ( newSelection ) ) { selectedItemChanged ( ) ; if ( ! selectingItem ) { fireActionEvent ( ) ; } } }
protected void adjustCanopies ( double [ ] densities ) { if ( m_numClustersRequested < _NUM ) { assignCanopiesToCanopyCenters ( ) ; m_trainingData = new Instances ( m_canopies , _NUM ) ; return ; } if ( m_canopies . numInstances ( ) > m_numClustersRequested ) { int [ ] sortedIndexes = Utils . stableSort ( densities ) ; Instances finalCanopies = new Instances ( m_canopies , _NUM ) ; int count = _NUM ; for ( int i = sortedIndexes . length - _NUM ; count < m_numClustersRequested ; i -- ) { finalCanopies . add ( m_canopies . instance ( sortedIndexes [ i ] ) ) ; count ++ ; } m_canopies = finalCanopies ; List < double [ ] [ ] > tempCanopyCenters = new ArrayList < double [ ] [ ] > ( ) ; List < double [ ] > tempT2Dists = new ArrayList < double [ ] > ( ) ; List < double [ ] > tempMissings = new ArrayList < double [ ] > ( ) ; count = _NUM ; for ( int i = sortedIndexes . length - _NUM ; count < finalCanopies . numInstances ( ) ; i -- ) { tempCanopyCenters . add ( m_canopyCenters . get ( sortedIndexes [ i ] ) ) ; tempT2Dists . add ( m_canopyT2Density . get ( sortedIndexes [ i ] ) ) ; tempMissings . add ( m_canopyNumMissingForNumerics . get ( sortedIndexes [ i ] ) ) ; count ++ ; } m_canopyCenters = tempCanopyCenters ; m_canopyT2Density = tempT2Dists ; m_canopyNumMissingForNumerics = tempMissings ; } else if ( m_canopies . numInstances ( ) < m_numClustersRequested && m_trainingData != null && m_trainingData . numInstances ( ) > _NUM ) { Random r = new Random ( getSeed ( ) ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { r . nextInt ( ) ; } HashMap < DecisionTableHashKey , Integer > initC = new HashMap < DecisionTableHashKey , Integer > ( ) ; DecisionTableHashKey hk = null ; for ( int i = _NUM ; i < m_canopies . numInstances ( ) ; i ++ ) { try { hk = new DecisionTableHashKey ( m_canopies . instance ( i ) , m_canopies . numAttributes ( ) , _BOOL ) ; initC . put ( hk , null ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } for ( int j = m_trainingData . numInstances ( ) - _NUM ; j >= _NUM ; j -- ) { int instIndex = r . nextInt ( j + _NUM ) ; try { hk = new DecisionTableHashKey ( m_trainingData . instance ( instIndex ) , m_trainingData . numAttributes ( ) , _BOOL ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } if ( ! initC . containsKey ( hk ) ) { Instance newInstance = m_trainingData . instance ( instIndex ) ; m_canopies . add ( newInstance ) ; double [ ] density = new double [ _NUM ] ; density [ _NUM ] = _NUM ; m_canopyT2Density . add ( density ) ; double [ ] [ ] center = new double [ newInstance . numAttributes ( ) ] [ _NUM ] ; double [ ] numMissingNumerics = new double [ newInstance . numAttributes ( ) ] ; updateCanopyCenter ( newInstance , center , numMissingNumerics ) ; m_canopyCenters . add ( center ) ; m_canopyNumMissingForNumerics . add ( numMissingNumerics ) ; initC . put ( hk , null ) ; } m_trainingData . swap ( j , instIndex ) ; if ( m_canopies . numInstances ( ) == m_numClustersRequested ) { break ; } } } assignCanopiesToCanopyCenters ( ) ; m_trainingData = new Instances ( m_canopies , _NUM ) ; }
protected void createFromHValues ( int [ ] hValues , int partitions ) { Arrays . sort ( hValues ) ; this . splits = new int [ partitions ] ; int maxH = _NUM ; for ( int i = _NUM ; i < splits . length ; i ++ ) { int quantile = ( int ) ( ( long ) ( i + _NUM ) * hValues . length / partitions ) ; this . splits [ i ] = quantile == hValues . length ? maxH : hValues [ quantile ] ; } }
private void readObject ( ObjectInputStream oos ) throws IOException , ClassNotFoundException { iInstant = ( LocalDateTime ) oos . readObject ( ) ; DateTimeFieldType type = ( DateTimeFieldType ) oos . readObject ( ) ; iField = type . getField ( iInstant . getChronology ( ) ) ; }
public void testConstructor_InetAddressIInetAddressI ( ) throws Exception { int sport = startServer ( _STR ) ; SSLSocket ssl = getSSLSocket ( InetAddress . getLocalHost ( ) , sport , InetAddress . getLocalHost ( ) , _NUM ) ; assertNotNull ( ssl ) ; assertEquals ( sport , ssl . getPort ( ) ) ; ssl . close ( ) ; try { getSSLSocket ( InetAddress . getLocalHost ( ) , _NUM , InetAddress . getLocalHost ( ) , _NUM ) ; fail ( ) ; } catch ( IOException expected ) { } try { getSSLSocket ( InetAddress . getLocalHost ( ) , - _NUM , InetAddress . getLocalHost ( ) , sport + _NUM ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { getSSLSocket ( InetAddress . getLocalHost ( ) , sport , InetAddress . getLocalHost ( ) , - _NUM ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { getSSLSocket ( InetAddress . getLocalHost ( ) , Integer . MIN_VALUE , InetAddress . getLocalHost ( ) , sport + _NUM ) ; fail ( ) ; } catch ( IOException expectedOnRI ) { assertTrue ( StandardNames . IS_RI ) ; } catch ( IllegalArgumentException expectedOnAndroid ) { assertFalse ( StandardNames . IS_RI ) ; } try { getSSLSocket ( InetAddress . getLocalHost ( ) , sport , InetAddress . getLocalHost ( ) , Integer . MAX_VALUE ) ; fail ( ) ; } catch ( IllegalArgumentException expectedOnAndroid ) { assertFalse ( StandardNames . IS_RI ) ; } }
private String convertUserInputIntoAFullyQualifiedPath ( final String userInput ) { if ( FileUtils . denotesAbsolutePath ( userInput ) ) { return userInput ; } if ( userInput . startsWith ( HOME_DIRECTORY_SYMBOL ) ) { Assert . notNull ( home , _STR ) ; if ( userInput . length ( ) > _NUM ) { return home + userInput . substring ( _NUM ) ; } } String fullPath = getWorkingDirectoryAsString ( ) + userInput ; return fullPath ; }
static final int resizeStamp ( int n ) { return Integer . numberOfLeadingZeros ( n ) | ( _NUM << ( RESIZE_STAMP_BITS - _NUM ) ) ; }
public byte readByte ( ) throws IOException { return dis . readByte ( ) ; }
protected static byte [ ] hkdfExpand ( byte [ ] ikm , byte [ ] salt , byte [ ] info , int length ) throws InvalidKeyException , NoSuchAlgorithmException { HKDFBytesGenerator hkdf = new HKDFBytesGenerator ( new SHA256Digest ( ) ) ; hkdf . init ( new HKDFParameters ( ikm , salt , info ) ) ; byte [ ] okm = new byte [ length ] ; hkdf . generateBytes ( okm , _NUM , length ) ; return okm ; }
public boolean isEmoteIgnored ( Emoticon emote ) { return ignoredEmotes . contains ( emote . code ) ; }
public boolean isPropertyAllowed ( Name name ) { return propertiesAllowed . contains ( name ) ; }
@ SuppressWarnings ( _STR ) public void readFile ( String fileName ) throws JDOMException , IOException { if ( checkFile ( fileName ) ) { Element root = rootFromName ( fileName ) ; Element roster ; if ( root == null ) { log . warn ( _STR ) ; return ; } roster = root . getChild ( _STR ) ; if ( roster == null ) { log . debug ( _STR ) ; return ; } Iterator < Element > consistIterator = root . getDescendants ( new ElementFilter ( _STR ) ) ; try { Element consist ; do { consist = consistIterator . next ( ) ; consistFromXml ( consist ) ; } while ( consistIterator . hasNext ( ) ) ; } catch ( NoSuchElementException nde ) { log . debug ( _STR ) ; } } else { log . info ( _STR ) ; } }
public void testConstructorSignBytesZeroNull2 ( ) { byte aBytes [ ] = { } ; int aSign = _NUM ; byte rBytes [ ] = { _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , aNumber . signum ( ) ) ; }
private int accept ( FileDescriptor ssfd , FileDescriptor newfd , InetSocketAddress [ ] isaa ) throws IOException { return accept0 ( ssfd , newfd , isaa ) ; }
protected void transcode ( File file , Transcoder transcoder ) throws IOException , TranscoderException { transcoder . addTranscodingHint ( XMLAbstractTranscoder . KEY_XML_PARSER_VALIDATING , Boolean . FALSE ) ; SVGDocument doc = cloneDocument ( ) ; TranscoderInput input = new TranscoderInput ( doc ) ; OutputStream out = new BufferedOutputStream ( new FileOutputStream ( file ) ) ; TranscoderOutput output = new TranscoderOutput ( out ) ; transcoder . transcode ( input , output ) ; out . flush ( ) ; out . close ( ) ; }
public static void f ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_FATAL ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . wtf ( tag , msg ) ; }
private void reportProgress ( State state , InnerState innerState ) { long now = System . currentTimeMillis ( ) ; if ( innerState . mBytesSoFar - innerState . mBytesNotified > Constants . MIN_PROGRESS_STEP && now - innerState . mTimeLastNotification > Constants . MIN_PROGRESS_TIME ) { mInfo . mCurrentBytes = innerState . mBytesSoFar ; mDB . updateDownloadCurrentBytes ( mInfo ) ; innerState . mBytesNotified = innerState . mBytesSoFar ; innerState . mTimeLastNotification = now ; long totalBytesSoFar = innerState . mBytesThisSession + mService . mBytesSoFar ; if ( Constants . LOGVV ) { Log . v ( Constants . TAG , _STR + mInfo . mCurrentBytes + _STR + mInfo . mTotalBytes ) ; Log . v ( Constants . TAG , _STR + totalBytesSoFar + _STR + mService . mTotalLength ) ; } mService . notifyUpdateBytes ( totalBytesSoFar ) ; } }
@ Override public Document newDocument ( ) { return new mf . org . apache . xerces . dom . DocumentImpl ( ) ; }
@ HLEFunction ( nid = _NUM , version = _NUM , checkInsideInterrupt = _BOOL ) public int __sceSasSetGrain ( int sasCore , int grain ) { checkSasHandleGood ( sasCore ) ; grainSamples = grain ; return _NUM ; }
public void handleTblRequestHandlerListButtonAddRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; setPageSessionAttribute ( PROPERTY_ATTRIBUTE , ( HashMap ) values ) ; SCSAML2SOAPBindingRequestHandlerListAddViewBean vb = ( SCSAML2SOAPBindingRequestHandlerListAddViewBean ) getViewBean ( SCSAML2SOAPBindingRequestHandlerListAddViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; vb . forwardTo ( getRequestContext ( ) ) ; } catch ( AMConsoleException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , _STR , e . getMessage ( ) ) ; } }
protected static void drawDataPoint ( double x , double y , double xprev , double yprev , int size , int shape , Graphics gx ) { drawDataPoint ( x , y , size , shape , gx ) ; gx . drawLine ( ( int ) x , ( int ) y , ( int ) xprev , ( int ) yprev ) ; }
public void tableSwitch ( final int [ ] keys , final TableSwitchGenerator generator , final boolean useTable ) { for ( int i = _NUM ; i < keys . length ; ++ i ) { if ( keys [ i ] < keys [ i - _NUM ] ) { throw new IllegalArgumentException ( _STR ) ; } } Label def = newLabel ( ) ; Label end = newLabel ( ) ; if ( keys . length > _NUM ) { int len = keys . length ; int min = keys [ _NUM ] ; int max = keys [ len - _NUM ] ; int range = max - min + _NUM ; if ( useTable ) { Label [ ] labels = new Label [ range ] ; Arrays . fill ( labels , def ) ; for ( int i = _NUM ; i < len ; ++ i ) { labels [ keys [ i ] - min ] = newLabel ( ) ; } mv . visitTableSwitchInsn ( min , max , def , labels ) ; for ( int i = _NUM ; i < range ; ++ i ) { Label label = labels [ i ] ; if ( label != def ) { mark ( label ) ; generator . generateCase ( i + min , end ) ; } } } else { Label [ ] labels = new Label [ len ] ; for ( int i = _NUM ; i < len ; ++ i ) { labels [ i ] = newLabel ( ) ; } mv . visitLookupSwitchInsn ( def , keys , labels ) ; for ( int i = _NUM ; i < len ; ++ i ) { mark ( labels [ i ] ) ; generator . generateCase ( keys [ i ] , end ) ; } } } mark ( def ) ; generator . generateDefault ( ) ; mark ( end ) ; }
static boolean chunkSet ( InternalDistributedMember recipient , Set set , int CHUNK_SIZE_IN_BYTES , boolean includeValues , ObjectIntProcedure proc ) throws IOException { Iterator it = set . iterator ( ) ; boolean keepGoing = _BOOL ; boolean sentLastChunk = _BOOL ; final HeapDataOutputStream mos = new HeapDataOutputStream ( InitialImageOperation . CHUNK_SIZE_IN_BYTES + _NUM , recipient . getVersionObject ( ) ) ; do { mos . reset ( ) ; int avgItemSize = _NUM ; int itemCount = _NUM ; while ( ( mos . size ( ) + avgItemSize ) < InitialImageOperation . CHUNK_SIZE_IN_BYTES && it . hasNext ( ) ) { Object key = it . next ( ) ; DataSerializer . writeObject ( key , mos ) ; itemCount ++ ; avgItemSize = mos . size ( ) / itemCount ; } DataSerializer . writeObject ( ( Object ) null , mos ) ; int lastMsg = it . hasNext ( ) ? _NUM : _NUM ; keepGoing = proc . executeWith ( mos , lastMsg ) ; sentLastChunk = lastMsg == _NUM && keepGoing ; } while ( keepGoing && it . hasNext ( ) ) ; return sentLastChunk ; }
private int [ ] parseMetaDataInformation ( ) throws UserError { int [ ] selectedColumns = new int [ metaData . size ( ) ] ; Set < String > usedColumnNames = new HashSet < > ( ) ; int columnIndex = _NUM ; int usedColumnIndex = _NUM ; for ( ColumnMetaData column : metaData ) { if ( ! column . isRemoved ( ) ) { selectedColumns [ usedColumnIndex ] = columnIndex ; usedColumnIndex ++ ; String columnName = column . getName ( ) ; if ( ! usedColumnNames . contains ( columnName ) ) { usedColumnNames . add ( columnName ) ; } else { throw new UserError ( null , _STR , columnName ) ; } } columnIndex ++ ; } int [ ] attributeColumns = Arrays . copyOf ( selectedColumns , usedColumnIndex ) ; return attributeColumns ; }
static Field findField ( Object instance , String name ) throws NoSuchFieldException { for ( Class < ? > clazz = instance . getClass ( ) ; clazz != null ; clazz = clazz . getSuperclass ( ) ) { try { Field field = clazz . getDeclaredField ( name ) ; if ( ! field . isAccessible ( ) ) { field . setAccessible ( _BOOL ) ; } return field ; } catch ( NoSuchFieldException e ) { } } throw new NoSuchFieldException ( _STR + name + _STR + instance . getClass ( ) ) ; }
SSLSession toSession ( byte [ ] data , String host , int port ) { ByteArrayInputStream bais = new ByteArrayInputStream ( data ) ; DataInputStream dais = new DataInputStream ( bais ) ; try { int type = dais . readInt ( ) ; if ( type != OPEN_SSL ) { log ( new AssertionError ( _STR + type ) ) ; return null ; } int length = dais . readInt ( ) ; byte [ ] sessionData = new byte [ length ] ; dais . readFully ( sessionData ) ; int count = dais . readInt ( ) ; X509Certificate [ ] certs = new X509Certificate [ count ] ; for ( int i = _NUM ; i < count ; i ++ ) { length = dais . readInt ( ) ; byte [ ] certData = new byte [ length ] ; dais . readFully ( certData ) ; certs [ i ] = OpenSSLX509Certificate . fromX509Der ( certData ) ; } return new OpenSSLSessionImpl ( sessionData , host , port , certs , this ) ; } catch ( IOException e ) { log ( e ) ; return null ; } }
private void addDumpFile ( ) { addDumpFile ( dumpFile ) ; }
private static boolean dateByOrdinal ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO ) { boolean reducedPrec = _BOOL ; if ( fields . remove ( DateTimeFieldType . year ( ) ) ) { bld . append ( yearElement ( ) ) ; if ( fields . remove ( DateTimeFieldType . dayOfYear ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendDayOfYear ( _NUM ) ; } else { reducedPrec = _BOOL ; } } else if ( fields . remove ( DateTimeFieldType . dayOfYear ( ) ) ) { bld . appendLiteral ( _STR ) ; bld . appendDayOfYear ( _NUM ) ; } return reducedPrec ; }
private void writeAttr ( String name , String val ) throws IOException { writeAttr ( name , val , _BOOL ) ; }
public boolean isPageInRange ( int pageNumber ) { for ( int ind = _NUM ; ind < sequenceStarts . size ( ) ; ind ++ ) { if ( sequenceStarts . get ( ind ) <= pageNumber && pageNumber <= sequenceEnds . get ( ind ) ) return _BOOL ; } return _BOOL ; }
public void dispose ( ) { logDebug ( _STR ) ; mSetupDone = _BOOL ; if ( mServiceConn != null ) { logDebug ( _STR ) ; if ( mContext != null ) mContext . unbindService ( mServiceConn ) ; } mDisposed = _BOOL ; mContext = null ; mServiceConn = null ; mService = null ; mPurchaseListener = null ; }
@ SuppressWarnings ( _STR ) public static < T extends DimensionalItemObject > List < T > asTypedList ( Collection < DimensionalItemObject > collection ) { List < T > list = new ArrayList < > ( ) ; if ( collection != null ) { for ( DimensionalItemObject object : collection ) { list . add ( ( T ) object ) ; } } return list ; }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
private float clampMag ( float value , float absMin , float absMax ) { final float absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
public PutIndexTemplateRequest aliases ( XContentBuilder source ) { return aliases ( source . bytes ( ) ) ; }
void addNewTable ( String name , int tdefPageNumber , Short type , String linkedDbName , String linkedTableName ) throws IOException { addTable ( name , Integer . valueOf ( tdefPageNumber ) , type , linkedDbName , linkedTableName ) ; addToSystemCatalog ( name , tdefPageNumber , type , linkedDbName , linkedTableName , _tableParentId ) ; addToAccessControlEntries ( tdefPageNumber , _tableParentId , _newTableSIDs ) ; }
public static String hashpw ( byte [ ] password0 , final String salt ) { BCrypt B ; String real_salt ; byte passwordb [ ] = null , saltb [ ] , hashed [ ] ; char minor = ( char ) _NUM ; int rounds , off = _NUM ; final StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( _NUM ) != _STR || salt . charAt ( _NUM ) != _STR ) { throw new IllegalArgumentException ( _STR ) ; } if ( salt . charAt ( _NUM ) == _STR ) { off = _NUM ; } else { minor = salt . charAt ( _NUM ) ; if ( minor != _STR || salt . charAt ( _NUM ) != _STR ) { throw new IllegalArgumentException ( _STR ) ; } off = _NUM ; } if ( salt . charAt ( off + _NUM ) > _STR ) { throw new IllegalArgumentException ( _STR ) ; } rounds = Integer . parseInt ( salt . substring ( off , off + _NUM ) ) ; real_salt = salt . substring ( off + _NUM , off + _NUM ) ; try { if ( minor >= ( byte ) _STR ) { passwordb = Arrays . copyOf ( password0 , password0 . length + _NUM ) ; passwordb [ passwordb . length - _NUM ] = ( byte ) _NUM ; } else { passwordb = Arrays . copyOf ( password0 , password0 . length ) ; } saltb = decode_base64 ( real_salt , BCRYPT_SALT_LEN ) ; B = new BCrypt ( ) ; hashed = B . crypt_raw ( passwordb , saltb , rounds , bf_crypt_ciphertext . clone ( ) ) ; } finally { if ( password0 != null ) { Arrays . fill ( password0 , ( byte ) _STR ) ; password0 = null ; } if ( passwordb != null ) { Arrays . fill ( passwordb , ( byte ) _STR ) ; passwordb = null ; } } rs . append ( _STR ) ; if ( minor >= _STR ) { rs . append ( minor ) ; } rs . append ( _STR ) ; if ( rounds < _NUM ) { rs . append ( _STR ) ; } if ( rounds > _NUM ) { throw new IllegalArgumentException ( _STR ) ; } rs . append ( Integer . toString ( rounds ) ) ; rs . append ( _STR ) ; rs . append ( encode_base64 ( saltb , saltb . length ) ) ; rs . append ( encode_base64 ( hashed , bf_crypt_ciphertext . length * _NUM - _NUM ) ) ; return rs . toString ( ) ; }
public void removeListener ( @ NotNull ConfigurationListener listener ) { if ( myListeners != null ) { myListeners . remove ( listener ) ; if ( myListeners . isEmpty ( ) ) { myListeners = null ; } } }
void reclaimScrapViews ( List < View > views ) { if ( mViewTypeCount == _NUM ) { views . addAll ( mCurrentScrap ) ; } else { final int viewTypeCount = mViewTypeCount ; final ArrayList < View > [ ] scrapViews = mScrapViews ; for ( int i = _NUM ; i < viewTypeCount ; ++ i ) { final ArrayList < View > scrapPile = scrapViews [ i ] ; views . addAll ( scrapPile ) ; } } }
public void doWindowOpen ( ) { doConnect ( ) ; }
public boolean schedule ( Runnable task , ClassLoader loader ) { boolean isPriority = _BOOL ; boolean isQueue = _BOOL ; boolean isWake = _BOOL ; return scheduleImpl ( task , loader , MAX_EXPIRE , isPriority , isQueue , isWake ) ; }
public static int hash2 ( int hash , Object x , Object y ) { return _NUM | ( hash + _NUM * System . identityHashCode ( x ) + _NUM * System . identityHashCode ( y ) ) ; }
public static double [ ] parseVectorString ( String vectorString ) { String [ ] parsedString = vectorString . split ( _STR ) ; double [ ] vector = new double [ parsedString . length ] ; for ( int j = _NUM ; j < parsedString . length ; j ++ ) { double val = Utils . doubleParsable ( parsedString [ j ] ) ; vector [ j ] = Double . isNaN ( val ) ? _NUM : val ; } return vector ; }
public String globalInfo ( ) { return _STR + _STR + _STR + _STR + _STR + _STR ; }
public static < T > Stream < T > concat ( Stream < ? extends T > a , Stream < ? extends T > b ) { Objects . requireNonNull ( a ) ; Objects . requireNonNull ( b ) ; @ SuppressWarnings ( _STR ) Spliterator < T > split = new Streams . ConcatSpliterator . OfRef < > ( ( Spliterator < T > ) a . spliterator ( ) , ( Spliterator < T > ) b . spliterator ( ) ) ; Stream < T > stream = StreamSupport . stream ( split , a . isParallel ( ) || b . isParallel ( ) ) ; return stream . onClose ( Streams . composedClose ( a , b ) ) ; }
@ Ignore @ Test public void test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver ( ) throws Exception { Integer lnPort = ( Integer ) vm0 . invoke ( null ) ; Integer nyPort = ( Integer ) vm1 . invoke ( null ) ; createCacheInVMs ( nyPort , vm2 , vm3 ) ; createReceiverInVMs ( vm2 , vm3 ) ; createCacheInVMs ( lnPort , vm4 , vm5 , vm6 , vm7 ) ; vm4 . invoke ( null ) ; vm5 . invoke ( null ) ; vm6 . invoke ( null ) ; vm7 . invoke ( null ) ; vm4 . invoke ( null ) ; vm5 . invoke ( null ) ; vm6 . invoke ( null ) ; vm7 . invoke ( null ) ; startSenderInVMs ( _STR , vm4 , vm5 , vm6 , vm7 ) ; vm2 . invoke ( null ) ; vm3 . invoke ( null ) ; vm4 . invoke ( null ) ; vm5 . invoke ( null ) ; vm6 . invoke ( null ) ; vm7 . invoke ( null ) ; Thread . sleep ( _NUM ) ; { AsyncInvocation inv1 = vm7 . invokeAsync ( null ) ; Thread . sleep ( _NUM ) ; AsyncInvocation inv2 = vm4 . invokeAsync ( null ) ; Thread . sleep ( _NUM ) ; AsyncInvocation inv3 = vm6 . invokeAsync ( null ) ; Thread . sleep ( _NUM ) ; AsyncInvocation inv4 = vm5 . invokeAsync ( null ) ; try { inv1 . join ( ) ; inv2 . join ( ) ; inv3 . join ( ) ; inv4 . join ( ) ; } catch ( Exception e ) { Assert . fail ( _STR , e ) ; } } vm6 . invoke ( null ) ; vm7 . invoke ( null ) ; vm2 . invoke ( null ) ; }
public void findAndInit ( Iterator it ) { while ( it . hasNext ( ) ) { findAndInit ( it . next ( ) ) ; } }
public static DataSourcePropertiesInterface decodeXML ( Document document , String elementName ) { if ( ( document == null ) || ( elementName == null ) ) { return null ; } Map < String , String > map = new LinkedHashMap < String , String > ( ) ; NodeList nodeList = document . getElementsByTagName ( elementName ) ; if ( nodeList . getLength ( ) > _NUM ) { Node node = nodeList . item ( _NUM ) ; Node child = node . getFirstChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { map . put ( child . getNodeName ( ) , child . getTextContent ( ) ) ; } child = child . getNextSibling ( ) ; } return DataSourceConnectorFactory . getDataSourceProperties ( map ) ; } else { return DataSourceConnectorFactory . getNoDataSource ( ) ; } }
@ Override public char next ( ) { ++ docPos ; if ( docPos < segmentEnd || segmentEnd >= doc . getLength ( ) ) { return text . next ( ) ; } try { doc . getText ( segmentEnd , doc . getLength ( ) - segmentEnd , text ) ; } catch ( BadLocationException e ) { throw new RuntimeException ( e ) ; } segmentEnd += text . count ; return text . current ( ) ; }
private void adjustRowHeights ( JTable table ) { for ( int row = _NUM ; row < table . getRowCount ( ) ; row ++ ) { int rowHeight = table . getRowHeight ( ) ; for ( int column = _NUM ; column < table . getColumnCount ( ) ; column ++ ) { Component comp = table . prepareRenderer ( table . getCellRenderer ( row , column ) , row , column ) ; rowHeight = Math . max ( rowHeight , comp . getPreferredSize ( ) . height ) ; } table . setRowHeight ( row , rowHeight ) ; } }
public List < URI > volumeURIs ( List < URI > uris , boolean delete , boolean remediate , ValCk ... checks ) { List < URI > remediatedURIs = new ArrayList < URI > ( ) ; List < Volume > volumes = dbClient . queryObject ( Volume . class , uris ) ; List < Volume > remediatedVolumes = volumes ( volumes , delete , remediate , checks ) ; for ( Volume volume : remediatedVolumes ) { remediatedURIs . add ( volume . getId ( ) ) ; } return remediatedURIs ; }
private FormatString [ ] parse ( String s ) { ArrayList < FormatString > al = new ArrayList < > ( ) ; Matcher m = fsPattern . matcher ( s ) ; for ( int i = _NUM , len = s . length ( ) ; i < len ; ) { if ( m . find ( i ) ) { if ( m . start ( ) != i ) { checkText ( s , i , m . start ( ) ) ; al . add ( new FixedString ( s . substring ( i , m . start ( ) ) ) ) ; } al . add ( new FormatSpecifier ( m ) ) ; i = m . end ( ) ; } else { checkText ( s , i , len ) ; al . add ( new FixedString ( s . substring ( i ) ) ) ; break ; } } return al . toArray ( new FormatString [ al . size ( ) ] ) ; }
public int size ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { return count ; } finally { lock . unlock ( ) ; } }
private void updateIndexColumnButtons ( ) { indexRemoveButton . setEnabled ( _BOOL ) ; indexUpButton . setEnabled ( _BOOL ) ; indexDownButton . setEnabled ( _BOOL ) ; int index = selectedColumns . getSelectionIndex ( ) ; if ( index >= _NUM ) { indexRemoveButton . setEnabled ( _BOOL ) ; if ( index > _NUM ) { indexUpButton . setEnabled ( _BOOL ) ; } else if ( index < selectedColumns . getItemCount ( ) - _NUM ) { indexDownButton . setEnabled ( _BOOL ) ; } } }
public String urlForPOISearch ( String tag , BoundingBox bb , int limit , int timeout ) { StringBuilder s = new StringBuilder ( ) ; s . append ( mService + _STR ) ; String sBB = _STR + bb . getLatSouth ( ) + _STR + bb . getLonWest ( ) + _STR + bb . getLatNorth ( ) + _STR + bb . getLonEast ( ) + _STR ; String data = _STR + timeout + _STR + _STR + tag + _STR + sBB + _STR + _STR + tag + _STR + sBB + _STR + _STR + tag + _STR + sBB + _STR + _STR + limit + _STR ; Log . d ( BonusPackHelper . LOG_TAG , _STR + data ) ; s . append ( URLEncoder . encode ( data ) ) ; return s . toString ( ) ; }
public void waitForDecodingToFinish ( ) { while ( isDecoding ) { try { Thread . sleep ( _NUM ) ; } catch ( final InterruptedException e ) { LogWriter . writeLog ( _STR + e . getMessage ( ) ) ; isDecoding = _BOOL ; } } }
private static String wikiToPlainText ( String content ) { content = content . replaceAll ( _STR , _STR ) ; content = content . replaceAll ( _STR , _STR ) ; content = content . replaceAll ( _STR , _STR ) ; content = content . replaceAll ( _STR , _STR ) ; content = content . replaceAll ( _STR , _STR ) ; content = content . replaceAll ( _STR , _STR ) ; content = content . replaceAll ( _STR , _STR ) ; content = content . replaceAll ( _STR , _STR ) ; content = content . replaceAll ( _STR , _STR ) ; content = content . replaceAll ( _STR , _STR ) ; content = content . trim ( ) ; final int size = content . length ( ) ; int endOfFirstParagraph = content . indexOf ( _STR , _NUM ) ; if ( endOfFirstParagraph < _NUM ) { endOfFirstParagraph = size ; } content = content . substring ( _NUM , Math . min ( endOfFirstParagraph , _NUM ) ) ; return content ; }
public final byte [ ] update ( byte [ ] input ) { if ( mode != ENCRYPT_MODE && mode != DECRYPT_MODE ) { throw new IllegalStateException ( ) ; } if ( input == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( input . length == _NUM ) { return null ; } return spiImpl . engineUpdate ( input , _NUM , input . length ) ; }
public static void e ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_ERROR ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . e ( tag , msg ) ; }
private static int createPackedParams ( SunGraphics2D sg2d , GlyphList gl ) { return ( ( ( gl . usePositions ( ) ? _NUM : _NUM ) << OFFSET_POSITIONS ) | ( ( gl . isSubPixPos ( ) ? _NUM : _NUM ) << OFFSET_SUBPIXPOS ) | ( ( gl . isRGBOrder ( ) ? _NUM : _NUM ) << OFFSET_RGBORDER ) | ( ( sg2d . lcdTextContrast & _NUM ) << OFFSET_CONTRAST ) ) ; }
public static int update ( String sql , Object [ ] args ) { Connection c = null ; PreparedStatement p = null ; try { c = getConnection ( ) ; if ( c == null ) return - _NUM ; p = c . prepareStatement ( sql ) ; int order = _NUM ; if ( args != null ) { for ( int i = _NUM ; i < args . length ; i ++ ) { Object o = args [ i ] ; setParameter ( p , order ++ , o ) ; } } return p . executeUpdate ( ) ; } catch ( Exception e ) { if ( log . isErrorEnabled ( ) ) log . error ( sql + toString ( args ) , e ) ; } finally { close ( p , c ) ; } return _NUM ; }
public boolean isLockSubject ( ) { return _BOOL ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; { boolean success = _BOOL ; try { child . deleteData ( _NUM , _NUM ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . INDEX_SIZE_ERR ) ; } assertTrue ( _STR , success ) ; } }
@ Override public int hashCode ( ) { int code = _NUM ; if ( fPublicId != null ) { code += fPublicId . hashCode ( ) ; } if ( fLiteralSystemId != null ) { code += fLiteralSystemId . hashCode ( ) ; } if ( fBaseSystemId != null ) { code += fBaseSystemId . hashCode ( ) ; } if ( fExpandedSystemId != null ) { code += fExpandedSystemId . hashCode ( ) ; } if ( fNamespace != null ) { code += fNamespace . hashCode ( ) ; } return code ; }
public QuickActionView addAction ( Action action ) { checkShown ( ) ; mActions . add ( action ) ; return this ; }
public static < V > boolean addDistinctEntry ( List < V > sourceList , V entry ) { return ( sourceList != null && ! sourceList . contains ( entry ) ) ? sourceList . add ( entry ) : _BOOL ; }
protected boolean display ( File helpFile ) throws HelpException { if ( helpFile . exists ( ) ) { loadAndWrite ( helpFile ) ; return _BOOL ; } else { File notFound = new File ( helpDir , NOT_FOUND ) ; if ( notFound . exists ( ) ) loadAndWrite ( notFound ) ; else throw new HelpException ( _STR ) ; return _BOOL ; } }
public static void storeLocation ( Context context , LatLng location ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( context ) ; SharedPreferences . Editor editor = prefs . edit ( ) ; editor . putLong ( PREFERENCES_LAT , Double . doubleToRawLongBits ( location . latitude ) ) ; editor . putLong ( PREFERENCES_LNG , Double . doubleToRawLongBits ( location . longitude ) ) ; editor . apply ( ) ; }
public Point2D either ( ) { return best1 ; }
@ Override public boolean equals ( Object object ) { if ( this == object ) { return _BOOL ; } if ( object instanceof List ) { List < ? > list = ( List < ? > ) object ; if ( list . size ( ) != size ( ) ) { return _BOOL ; } Iterator < ? > it1 = iterator ( ) , it2 = list . iterator ( ) ; while ( it1 . hasNext ( ) ) { Object e1 = it1 . next ( ) , e2 = it2 . next ( ) ; if ( ! ( e1 == null ? e2 == null : e1 . equals ( e2 ) ) ) { return _BOOL ; } } return _BOOL ; } return _BOOL ; }
public static String rowToString ( JSONArray ja ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = _NUM ; i < ja . length ( ) ; i += _NUM ) { if ( i > _NUM ) { sb . append ( _STR ) ; } Object object = ja . opt ( i ) ; if ( object != null ) { String string = object . toString ( ) ; if ( string . length ( ) > _NUM && ( string . indexOf ( _STR ) >= _NUM || string . indexOf ( _STR ) >= _NUM || string . indexOf ( _STR ) >= _NUM || string . indexOf ( _NUM ) >= _NUM || string . charAt ( _NUM ) == _STR ) ) { sb . append ( _STR ) ; int length = string . length ( ) ; for ( int j = _NUM ; j < length ; j += _NUM ) { char c = string . charAt ( j ) ; if ( c >= _STR && c != _STR ) { sb . append ( c ) ; } } sb . append ( _STR ) ; } else { sb . append ( string ) ; } } } sb . append ( _STR ) ; return sb . toString ( ) ; }
private static void removeTable ( Connection conn , String name ) throws SQLException { name = name . replace ( _STR , _STR ) ; Statement stat = conn . createStatement ( ) ; stat . execute ( _STR + name ) ; DBUtil . commitEL ( conn ) ; }
public boolean containsCategory ( String category ) { return ! hiddenBugCategorySet . contains ( category ) ; }
public static boolean isVolumeFullCopySource ( Volume volume , DbClient dbClient ) { boolean isFullCopySource = _BOOL ; StringSet fullCopyIds = volume . getFullCopies ( ) ; if ( ( fullCopyIds != null ) && ( ! fullCopyIds . isEmpty ( ) ) ) { Iterator < String > fullCopyIdsIter = fullCopyIds . iterator ( ) ; while ( fullCopyIdsIter . hasNext ( ) ) { URI fullCopyURI = URI . create ( fullCopyIdsIter . next ( ) ) ; Volume fullCopyVolume = dbClient . queryObject ( Volume . class , fullCopyURI ) ; if ( ( fullCopyVolume != null ) && ( ! fullCopyVolume . getInactive ( ) ) ) { isFullCopySource = _BOOL ; } } } return isFullCopySource ; }
@ Override public void assertEquals ( String message , Object expectedObj , Object actualObj ) { LinearRegressionModel expected = ( LinearRegressionModel ) expectedObj ; LinearRegressionModel actual = ( LinearRegressionModel ) actualObj ; message = message + _STR + actual . getSource ( ) + _STR ; Assert . assertArrayEquals ( message + _STR , expected . getCoefficients ( ) , actual . getCoefficients ( ) , _NUM ) ; Assert . assertArrayEquals ( message + _STR , expected . getProbabilities ( ) , actual . getProbabilities ( ) , _NUM ) ; Assert . assertArrayEquals ( message + _STR , expected . getSelectedAttributeNames ( ) , actual . getSelectedAttributeNames ( ) ) ; Assert . assertArrayEquals ( message + _STR , expected . getSelectedAttributes ( ) , actual . getSelectedAttributes ( ) ) ; Assert . assertArrayEquals ( message + _STR , expected . getStandardErrors ( ) , actual . getStandardErrors ( ) , _NUM ) ; Assert . assertArrayEquals ( message + _STR , expected . getStandardizedCoefficients ( ) , actual . getStandardizedCoefficients ( ) , _NUM ) ; Assert . assertArrayEquals ( message + _STR , expected . getTolerances ( ) , actual . getTolerances ( ) , _NUM ) ; Assert . assertArrayEquals ( message + _STR , expected . getTStats ( ) , actual . getTStats ( ) , _NUM ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . replaceData ( _NUM , _NUM , _STR ) ; childData = child . getData ( ) ; assertEquals ( _STR , _STR , childData ) ; }
public static Map < String , Object > entityMaintPermCheck ( DispatchContext dctx , Map < String , ? extends Object > context ) { GenericValue userLogin = ( GenericValue ) context . get ( _STR ) ; Locale locale = ( Locale ) context . get ( _STR ) ; Security security = dctx . getSecurity ( ) ; Map < String , Object > resultMap = null ; if ( security . hasPermission ( _STR , userLogin ) ) { resultMap = ServiceUtil . returnSuccess ( ) ; resultMap . put ( _STR , _BOOL ) ; } else { resultMap = ServiceUtil . returnFailure ( UtilProperties . getMessage ( resource , _STR , locale ) ) ; resultMap . put ( _STR , _BOOL ) ; } return resultMap ; }
public void testQuorumSucceed ( ) { quorum . succeed ( ) ; quorum . fail ( ) ; assertEquals ( callbackResult . get ( ) , _NUM ) ; quorum . fail ( ) ; quorum . succeed ( ) ; assertEquals ( callbackResult . get ( ) , _NUM ) ; }
public void requestAfterExplanation ( @ NonNull String [ ] permissions ) { ArrayList < String > permissionsToRequest = new ArrayList < > ( ) ; for ( String permissionName : permissions ) { if ( isPermissionDeclined ( permissionName ) ) { permissionsToRequest . add ( permissionName ) ; } else { permissionCallback . onPermissionPreGranted ( permissionName ) ; } } if ( permissionsToRequest . isEmpty ( ) ) return ; permissions = permissionsToRequest . toArray ( new String [ permissionsToRequest . size ( ) ] ) ; context . requestPermissions ( permissions , REQUEST_PERMISSIONS ) ; }
static void pauseThread ( long duration ) { try { Thread . sleep ( duration ) ; } catch ( Exception e ) { s_logger . warn ( _STR , e ) ; } }
final public void println ( String v ) { try { _out . println ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
public int read ( char cbuf [ ] , int offset , int length ) throws IOException { return sd . read ( cbuf , offset , length ) ; }
public int read ( ) throws IOException { int val ; if ( ( val = is . read ( ) ) < _NUM ) { return - _NUM ; } switch ( val & _NUM ) { case _NUM : case _NUM : val = ( ( val & _NUM ) << _NUM ) | ( is . read ( ) & _NUM ) ; break ; case _NUM : val = ( ( val & _NUM ) << _NUM ) | ( ( is . read ( ) & _NUM ) << _NUM ) | ( is . read ( ) & _NUM ) ; break ; case _NUM : throw new UnsupportedEncodingException ( ) ; default : break ; } return val ; }
private static boolean CallNonvirtualBooleanMethodV ( JNIEnvironment env , int objJREF , int classJREF , int methodID , Address argAddress ) throws Exception { if ( traceJNI ) VM . sysWrite ( _STR ) ; RuntimeEntrypoints . checkJNICountDownToGC ( ) ; try { Object obj = env . getJNIRef ( objJREF ) ; Object returnObj = JNIHelpers . invokeWithVarArg ( obj , methodID , argAddress , TypeReference . Boolean , _BOOL ) ; return Reflection . unwrapBoolean ( returnObj ) ; } catch ( Throwable unexpected ) { if ( traceJNI ) unexpected . printStackTrace ( System . err ) ; env . recordException ( unexpected ) ; return _BOOL ; } }
private boolean rContainsRMInstruction ( ProgramBlock pb , String varName ) { if ( pb instanceof WhileProgramBlock ) { WhileProgramBlock tmp = ( WhileProgramBlock ) pb ; for ( ProgramBlock c : tmp . getChildBlocks ( ) ) if ( rContainsRMInstruction ( c , varName ) ) return _BOOL ; } else if ( pb instanceof IfProgramBlock ) { IfProgramBlock tmp = ( IfProgramBlock ) pb ; for ( ProgramBlock c : tmp . getChildBlocksIfBody ( ) ) if ( rContainsRMInstruction ( c , varName ) ) return _BOOL ; for ( ProgramBlock c : tmp . getChildBlocksElseBody ( ) ) if ( rContainsRMInstruction ( c , varName ) ) return _BOOL ; } else if ( pb instanceof ForProgramBlock ) { ForProgramBlock tmp = ( ForProgramBlock ) pb ; for ( ProgramBlock c : tmp . getChildBlocks ( ) ) if ( rContainsRMInstruction ( c , varName ) ) return _BOOL ; } else if ( pb instanceof FunctionProgramBlock ) { } else { for ( Instruction inst : pb . getInstructions ( ) ) { String instStr = inst . toString ( ) ; if ( instStr . contains ( _STR + Lop . OPERAND_DELIMITOR + varName ) || instStr . contains ( _STR + Lop . OPERAND_DELIMITOR + varName ) ) { return _BOOL ; } } } return _BOOL ; }
public ProjectImporter ( final File rootFolder ) { assertNotNull ( _STR , rootFolder ) ; assertTrue ( _STR + rootFolder , rootFolder . exists ( ) ) ; assertTrue ( _STR + rootFolder , rootFolder . isDirectory ( ) ) ; assertTrue ( _STR + rootFolder , rootFolder . canRead ( ) ) ; assertTrue ( _STR + rootFolder , null != rootFolder . listFiles ( ) ) ; this . rootFolder = rootFolder ; }
public void testDoubles ( ) throws Exception { double [ ] values = new double [ ] { Double . NEGATIVE_INFINITY , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , + _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , Double . POSITIVE_INFINITY , Double . NaN } ; long [ ] encoded = new long [ values . length ] ; for ( int i = _NUM ; i < values . length ; i ++ ) { encoded [ i ] = NumericUtils . doubleToSortableLong ( values [ i ] ) ; assertTrue ( _STR , Double . compare ( values [ i ] , NumericUtils . sortableLongToDouble ( encoded [ i ] ) ) == _NUM ) ; } for ( int i = _NUM ; i < encoded . length ; i ++ ) { assertTrue ( _STR , encoded [ i - _NUM ] < encoded [ i ] ) ; } }
public static boolean isRegistered ( Class < ? > clazz ) { return regModules . containsKey ( clazz . getName ( ) ) ; }
private static Pair < String , String > offsetASR ( final long offset , final ITranslationEnvironment environment , final List < ReilInstruction > instructions , final String registerNodeValue1 , final String registerNodeValue2 , final String immediateNodeValue ) { final String address = environment . getNextVariableString ( ) ; final String index = environment . getNextVariableString ( ) ; final String tmpVar = environment . getNextVariableString ( ) ; long baseOffset = offset ; if ( immediateNodeValue . equals ( _STR ) ) { final String isZeroCondition = environment . getNextVariableString ( ) ; final String tmpVar1 = environment . getNextVariableString ( ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , wd , String . valueOf ( - _NUM ) , dw , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createBisz ( baseOffset ++ , dw , tmpVar1 , bt , isZeroCondition ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dw , String . valueOf ( _NUM ) , bt , isZeroCondition , dw , index ) ) ; } else { final String tmpVar1 = environment . getNextVariableString ( ) ; final String tmpVar2 = environment . getNextVariableString ( ) ; final String tmpVar3 = environment . getNextVariableString ( ) ; final String tmpVar4 = environment . getNextVariableString ( ) ; instructions . add ( ReilHelpers . createAdd ( baseOffset ++ , dw , registerNodeValue2 , dw , String . valueOf ( _NUM ) , dw , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , tmpVar1 , dw , _STR + immediateNodeValue , dw , tmpVar2 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , String . valueOf ( _NUM ) , dw , _STR + immediateNodeValue , dw , tmpVar3 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dw , tmpVar2 , dw , tmpVar3 , qw , tmpVar4 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , qw , tmpVar4 , dw , dWordBitMask , dw , index ) ) ; } instructions . add ( ReilHelpers . createAdd ( baseOffset ++ , dw , registerNodeValue1 , dw , index , dw , tmpVar ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dw , tmpVar , dw , dWordBitMask , dw , address ) ) ; return new Pair < String , String > ( address , registerNodeValue1 ) ; }
public Class < ? > loadClass ( String name ) throws ClassNotFoundException { return Class . forName ( name ) ; }
public void waitForOperations ( ) { operator . waitForOperations ( ) ; }
private static int byteCompaction ( int mode , int [ ] codewords , int codeIndex , StringBuilder result ) { if ( mode == BYTE_COMPACTION_MODE_LATCH ) { int count = _NUM ; long value = _NUM ; char [ ] decodedData = new char [ _NUM ] ; int [ ] byteCompactedCodewords = new int [ _NUM ] ; boolean end = _BOOL ; int nextCode = codewords [ codeIndex ++ ] ; while ( ( codeIndex < codewords [ _NUM ] ) && ! end ) { byteCompactedCodewords [ count ++ ] = nextCode ; value = _NUM * value + nextCode ; nextCode = codewords [ codeIndex ++ ] ; if ( nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } else { if ( ( count % _NUM == _NUM ) && ( count > _NUM ) ) { for ( int j = _NUM ; j < _NUM ; ++ j ) { decodedData [ _NUM - j ] = ( char ) ( value % _NUM ) ; value >>= _NUM ; } result . append ( decodedData ) ; count = _NUM ; } } } if ( codeIndex == codewords [ _NUM ] && nextCode < TEXT_COMPACTION_MODE_LATCH ) { byteCompactedCodewords [ count ++ ] = nextCode ; } for ( int i = _NUM ; i < count ; i ++ ) { result . append ( ( char ) byteCompactedCodewords [ i ] ) ; } } else if ( mode == BYTE_COMPACTION_MODE_LATCH_6 ) { int count = _NUM ; long value = _NUM ; boolean end = _BOOL ; while ( codeIndex < codewords [ _NUM ] && ! end ) { int code = codewords [ codeIndex ++ ] ; if ( code < TEXT_COMPACTION_MODE_LATCH ) { count ++ ; value = _NUM * value + code ; } else { if ( code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } } if ( ( count % _NUM == _NUM ) && ( count > _NUM ) ) { char [ ] decodedData = new char [ _NUM ] ; for ( int j = _NUM ; j < _NUM ; ++ j ) { decodedData [ _NUM - j ] = ( char ) ( value & _NUM ) ; value >>= _NUM ; } result . append ( decodedData ) ; count = _NUM ; } } } return codeIndex ; }
protected boolean isAllTestComponentsInTarget ( Geometry testGeom ) { List coords = ComponentCoordinateExtracter . getCoordinates ( testGeom ) ; for ( Iterator i = coords . iterator ( ) ; i . hasNext ( ) ; ) { Coordinate p = ( Coordinate ) i . next ( ) ; int loc = targetPointLocator . locate ( p ) ; if ( loc == Location . EXTERIOR ) return _BOOL ; } return _BOOL ; }
private Object createInner ( SimpleObject post , RequestContext context ) throws ResponseException { try { String xml = completeXform ( convertUuidsToIds ( post ) ) ; File file = File . createTempFile ( _STR , null ) ; processor . processXForm ( xml , file . getAbsolutePath ( ) , _BOOL , context . getRequest ( ) ) ; } catch ( IOException e ) { throw new GenericRestException ( _STR , e ) ; } catch ( ResponseException e ) { throw e ; } catch ( Exception e ) { throw new ConversionException ( _STR , e ) ; } Encounter encounter = guessEncounterFromXformSubmission ( post ) ; if ( encounter == null ) { return post ; } SimpleObject returnJson = new SimpleObject ( ) ; EncounterResource . populateJsonProperties ( encounter , returnJson ) ; return returnJson ; }
public Endpoint ( URI endpointUrl , SecurityMode ... modes ) { if ( modes == null || endpointUrl == null ) throw new IllegalArgumentException ( _STR ) ; for ( SecurityMode m : modes ) { if ( m == null ) throw new IllegalArgumentException ( _STR ) ; hash = _NUM * hash + m . hashCode ( ) ; } this . endpointUrl = endpointUrl . toString ( ) ; this . modes = modes ; this . endpointConfiguration = EndpointConfiguration . defaults ( ) ; hash = _NUM * hash + endpointUrl . hashCode ( ) ; }
protected Value parseValue ( ) throws IOException , RDFParseException , RDFHandlerException { int c = peekCodePoint ( ) ; if ( c == _STR ) { return parseURI ( ) ; } else if ( c == _STR || TurtleUtil . isPrefixStartChar ( c ) ) { return parseQNameOrBoolean ( ) ; } else if ( c == _STR ) { return parseNodeID ( ) ; } else if ( c == _STR || c == _STR ) { return parseQuotedLiteral ( ) ; } else if ( ASCIIUtil . isNumber ( c ) || c == _STR || c == _STR || c == _STR ) { return parseNumber ( ) ; } else if ( c == - _NUM ) { throwEOFException ( ) ; return null ; } else { reportFatalError ( _STR + new String ( Character . toChars ( c ) ) + _STR ) ; return null ; } }
public TimeSeriesCollection ( ) { this ( null , TimeZone . getDefault ( ) ) ; }
private static boolean isOptimizableForDescendantIterator ( Compiler compiler , int stepOpCodePos , int stepIndex ) throws javax . xml . transform . TransformerException { int stepType ; int stepCount = _NUM ; boolean foundDorDS = _BOOL ; boolean foundSelf = _BOOL ; boolean foundDS = _BOOL ; int nodeTestType = OpCodes . NODETYPE_NODE ; while ( OpCodes . ENDOP != ( stepType = compiler . getOp ( stepOpCodePos ) ) ) { if ( nodeTestType != OpCodes . NODETYPE_NODE && nodeTestType != OpCodes . NODETYPE_ROOT ) return _BOOL ; stepCount ++ ; if ( stepCount > _NUM ) return _BOOL ; boolean mightBeProximate = mightBeProximate ( compiler , stepOpCodePos , stepType ) ; if ( mightBeProximate ) return _BOOL ; switch ( stepType ) { case OpCodes . FROM_FOLLOWING : case OpCodes . FROM_FOLLOWING_SIBLINGS : case OpCodes . FROM_PRECEDING : case OpCodes . FROM_PRECEDING_SIBLINGS : case OpCodes . FROM_PARENT : case OpCodes . OP_VARIABLE : case OpCodes . OP_EXTFUNCTION : case OpCodes . OP_FUNCTION : case OpCodes . OP_GROUP : case OpCodes . FROM_NAMESPACE : case OpCodes . FROM_ANCESTORS : case OpCodes . FROM_ANCESTORS_OR_SELF : case OpCodes . FROM_ATTRIBUTES : case OpCodes . MATCH_ATTRIBUTE : case OpCodes . MATCH_ANY_ANCESTOR : case OpCodes . MATCH_IMMEDIATE_ANCESTOR : return _BOOL ; case OpCodes . FROM_ROOT : if ( _NUM != stepCount ) return _BOOL ; break ; case OpCodes . FROM_CHILDREN : if ( ! foundDS && ! ( foundDorDS && foundSelf ) ) return _BOOL ; break ; case OpCodes . FROM_DESCENDANTS_OR_SELF : foundDS = _BOOL ; case OpCodes . FROM_DESCENDANTS : if ( _NUM == stepCount ) return _BOOL ; foundDorDS = _BOOL ; break ; case OpCodes . FROM_SELF : if ( _NUM != stepCount ) return _BOOL ; foundSelf = _BOOL ; break ; default : throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NULL_ERROR_HANDLER , new Object [ ] { Integer . toString ( stepType ) } ) ) ; } nodeTestType = compiler . getStepTestType ( stepOpCodePos ) ; int nextStepOpCodePos = compiler . getNextStepPos ( stepOpCodePos ) ; if ( nextStepOpCodePos < _NUM ) break ; if ( OpCodes . ENDOP != compiler . getOp ( nextStepOpCodePos ) ) { if ( compiler . countPredicates ( stepOpCodePos ) > _NUM ) { return _BOOL ; } } stepOpCodePos = nextStepOpCodePos ; } return _BOOL ; }
public static < E > List < E > of ( E e1 , E e2 , E e3 ) { List < E > list = new ArrayList < > ( ) ; list . add ( e1 ) ; list . add ( e2 ) ; list . add ( e3 ) ; return list ; }
public int alloc ( int size ) { int index = n ; int len = array . length ; if ( n + size >= len ) { byte [ ] aux = new byte [ len + blockSize ] ; System . arraycopy ( array , _NUM , aux , _NUM , len ) ; array = aux ; } n += size ; return index ; }
@ Override public void addAttribute ( String name , float value ) { String str = Float . toString ( value ) ; if ( str . endsWith ( _STR ) ) str = str . substring ( _NUM , str . length ( ) - _NUM ) ; current . setAttribute ( name , str ) ; }
@ RequestMapping ( value = _STR , method = RequestMethod . POST ) @ ResponseBody public JsonResponse createDirectory ( @ PathVariable final String containerId , @ PathVariable final String applicationName , @ RequestParam ( _STR ) String path ) throws ServiceException , CheckException , IOException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( _STR + containerId ) ; logger . debug ( _STR + applicationName ) ; logger . debug ( _STR + path ) ; } fileService . createDirectory ( applicationName , containerId , path ) ; return new HttpOk ( ) ; }
public void fill_ellipse_arr ( PlaEllipse [ ] p_ellipse_arr , Graphics p_g , Color p_color , double p_translucency_factor ) { if ( p_color == null ) return ; if ( p_ellipse_arr . length <= _NUM ) return ; GeneralPath draw_path = new GeneralPath ( GeneralPath . WIND_EVEN_ODD ) ; for ( PlaEllipse curr_ellipse : p_ellipse_arr ) { Point2D center = coordinate_transform . board_to_screen ( curr_ellipse . center ) ; double bigger_radius = coordinate_transform . board_to_screen ( curr_ellipse . bigger_radius ) ; if ( ! point_near_rectangle ( center . getX ( ) , center . getY ( ) , ( Rectangle ) p_g . getClip ( ) , bigger_radius ) ) { continue ; } double smaller_radius = coordinate_transform . board_to_screen ( curr_ellipse . smaller_radius ) ; Ellipse2D draw_ellipse = new Ellipse2D . Double ( center . getX ( ) - bigger_radius , center . getY ( ) - smaller_radius , _NUM * bigger_radius , _NUM * smaller_radius ) ; double rotation = coordinate_transform . board_to_screen_angle ( curr_ellipse . rotation ) ; AffineTransform affine_transform = new AffineTransform ( ) ; affine_transform . rotate ( rotation , center . getX ( ) , center . getY ( ) ) ; Shape rotated_ellipse = affine_transform . createTransformedShape ( draw_ellipse ) ; draw_path . append ( rotated_ellipse , _BOOL ) ; } Graphics2D g2 = ( Graphics2D ) p_g ; g2 . setColor ( p_color ) ; set_translucency ( g2 , p_translucency_factor ) ; g2 . setRenderingHint ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; g2 . fill ( draw_path ) ; }
@ Override public void zoomDomainAxes ( double factor , PlotRenderingInfo state , Point2D source ) { }
private void refreshChallengeCounts ( ) { mDueChallengeCounts = mDueChallengeLogic . getDueChallengeCounts ( mCategories ) ; }
public Identity ( final int dim ) { this ( dim , EnumSet . noneOf ( Address . Flags . class ) ) ; }
private ImageData awtToSwt ( final BufferedImage bufferedImage , final int width , final int height ) { final int [ ] awtPixels = new int [ width * height ] ; final ImageData swtImageData = new ImageData ( width , height , _NUM , PALETTE_DATA ) ; swtImageData . transparentPixel = TRANSPARENT_COLOR ; final int step = swtImageData . depth / _NUM ; final byte [ ] data = swtImageData . data ; bufferedImage . getRGB ( _NUM , _NUM , width , height , awtPixels , _NUM , width ) ; for ( int i = _NUM ; i < height ; i ++ ) { int idx = ( _NUM + i ) * swtImageData . bytesPerLine + _NUM * step ; for ( int j = _NUM ; j < width ; j ++ ) { final int rgb = awtPixels [ j + i * width ] ; for ( int k = swtImageData . depth - _NUM ; k >= _NUM ; k -= _NUM ) { data [ idx ++ ] = ( byte ) ( rgb > > k & _NUM ) ; } } } return swtImageData ; }
public static boolean isUnlimitedStrengthPolicyAvailable ( ) { try { return Cipher . getMaxAllowedKeyLength ( _STR ) >= _NUM ; } catch ( final NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return _BOOL ; }
public long rsslim ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
public void addTotals ( Info_Column [ ] layout ) { addTotals ( ( ColumnInfo [ ] ) layout ) ; }
private void fillStackTrace ( StringBuffer buffer , StackTraceElement [ ] elements ) { for ( int index = _NUM ; index < elements . length ; index ++ ) { buffer . append ( elements [ index ] ) ; buffer . append ( _STR ) ; } }
public static boolean isFileTypeSupported ( int fileType ) { List providers = getMidiFileWriters ( ) ; for ( int i = _NUM ; i < providers . size ( ) ; i ++ ) { MidiFileWriter writer = ( MidiFileWriter ) providers . get ( i ) ; if ( writer . isFileTypeSupported ( fileType ) ) { return _BOOL ; } } return _BOOL ; }
public void makeImmutable ( ) { if ( isMutable ) { isMutable = _BOOL ; } }
public static double uniform ( ) { return random . nextDouble ( ) ; }
public void modify ( SSOToken token , String objName , ModificationItem [ ] mods ) throws SMSException , SSOException { if ( ( objName == null ) || ( objName . length ( ) == _NUM ) || ( mods == null ) || ( mods . length == _NUM ) ) { throw new IllegalArgumentException ( _STR + _STR ) ; } String objKey = objName . toLowerCase ( ) ; String filepath = null ; mRWLock . readRequest ( ) ; try { filepath = mNameMap . getProperty ( objKey ) ; if ( filepath == null ) { String errmsg = _STR + objName + _STR ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } } finally { mRWLock . readDone ( ) ; } mRWLock . writeRequest ( ) ; try { filepath = mNameMap . getProperty ( objKey ) ; if ( filepath == null ) { String errmsg = _STR + objName + _STR ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } File filehandle = new File ( filepath ) ; if ( ! filehandle . isFile ( ) ) { String errmsg = _STR + objName + _STR ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } Properties props = loadProperties ( filehandle , objName ) ; boolean hasSunXmlKeyValue = ( props . getProperty ( SMSEntry . ATTR_XML_KEYVAL ) == null ) ? _BOOL : _BOOL ; for ( int i = _NUM ; i < mods . length ; i ++ ) { modifyValues ( objName , mods [ i ] , props ) ; } saveProperties ( props , filehandle , objName ) ; if ( ! hasSunXmlKeyValue ) { hasSunXmlKeyValue = ( props . getProperty ( SMSEntry . ATTR_XML_KEYVAL ) == null ) ? _BOOL : _BOOL ; } if ( hasSunXmlKeyValue ) { deleteSunXmlKeyValFiles ( filehandle . getParentFile ( ) ) ; Set xmlKeyVals = toValSet ( SMSEntry . ATTR_XML_KEYVAL , props . getProperty ( SMSEntry . ATTR_XML_KEYVAL ) ) ; createSunXmlKeyValFiles ( filehandle . getParentFile ( ) , xmlKeyVals ) ; } } finally { mRWLock . writeDone ( ) ; } }
private AMSetupDSConfig ( ) { Map map = ServicesDefaultValues . getDefaultValues ( ) ; dsManager = ( String ) map . get ( SetupConstants . CONFIG_VAR_DS_MGR_DN ) ; suffix = ( String ) map . get ( SetupConstants . CONFIG_VAR_ROOT_SUFFIX ) ; dsHostName = ( String ) map . get ( SetupConstants . CONFIG_VAR_DIRECTORY_SERVER_HOST ) ; dsPort = ( String ) map . get ( SetupConstants . CONFIG_VAR_DIRECTORY_SERVER_PORT ) ; dsAdminPwd = ( String ) map . get ( SetupConstants . CONFIG_VAR_DS_MGR_PWD ) ; basedir = ( String ) map . get ( SetupConstants . CONFIG_VAR_BASE_DIR ) ; deployuri = ( String ) map . get ( SetupConstants . CONFIG_VAR_SERVER_URI ) ; }
private boolean compareAndIncrementWorkerCount ( int expect ) { return ctl . compareAndSet ( expect , expect + _NUM ) ; }
private void makeItems ( int fingerPosition , List < View > viewList ) { if ( fingerPosition >= viewList . size ( ) ) { return ; } for ( int i = _NUM ; i < viewList . size ( ) ; i ++ ) { int translationY = Math . min ( Math . max ( Math . abs ( fingerPosition - i ) * intervalHeight , _NUM ) , maxTranslationHeight ) ; updateItemHeightAnimator ( viewList . get ( i ) , translationY ) ; } }
private boolean pathIsWindows ( String path ) { if ( path != null && path . length ( ) > _NUM ) { return ( Character . isLetter ( path . charAt ( _NUM ) ) && path . charAt ( _NUM ) == _STR ) || ( path . startsWith ( _STR ) || path . startsWith ( _STR ) ) ; } return _BOOL ; }
Object processCHAR ( StylesheetHandler handler , String uri , String name , String rawName , String value , ElemTemplateElement owner ) throws org . xml . sax . SAXException { if ( getSupportsAVT ( ) ) { try { AVT avt = new AVT ( handler , uri , name , rawName , value , owner ) ; if ( ( avt . isSimple ( ) ) && ( value . length ( ) != _NUM ) ) { handleError ( handler , XSLTErrorResources . INVALID_TCHAR , new Object [ ] { name , value } , null ) ; return null ; } return avt ; } catch ( TransformerException te ) { throw new org . xml . sax . SAXException ( te ) ; } } else { if ( value . length ( ) != _NUM ) { handleError ( handler , XSLTErrorResources . INVALID_TCHAR , new Object [ ] { name , value } , null ) ; return null ; } return new Character ( value . charAt ( _NUM ) ) ; } }
public static Element addChildElementValue ( Element element , String childElementName , String childElementValue , Document document ) { Element newElement = addChildElement ( element , childElementName , document ) ; newElement . appendChild ( document . createTextNode ( childElementValue ) ) ; return newElement ; }
public boolean isSegmentBalanced ( ) { if ( m_lines . size ( ) == _NUM || m_doc . isMultiCurrency ( ) ) return _BOOL ; MAcctSchemaElement [ ] elements = m_acctSchema . getAcctSchemaElements ( ) ; for ( int i = _NUM ; i < elements . length ; i ++ ) { MAcctSchemaElement ase = elements [ i ] ; if ( ase . isBalanced ( ) && ! isSegmentBalanced ( ase . getElementType ( ) ) ) return _BOOL ; } return _BOOL ; }
Attributes parseAttributes ( ) throws JasperException { AttributesImpl attrs = new AttributesImpl ( ) ; reader . skipSpaces ( ) ; while ( parseAttribute ( attrs ) ) reader . skipSpaces ( ) ; return attrs ; }
public static byte [ ] readBinaryFile ( File sourceFile ) { byte [ ] result = null ; try { BufferedInputStream input ; input = new BufferedInputStream ( new FileInputStream ( sourceFile ) ) ; int num = input . available ( ) ; result = new byte [ num ] ; input . read ( result , _NUM , num ) ; input . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; result = null ; } return result ; }
@ SuppressWarnings ( _STR ) public void test_streamAPI ( ) { final List < IBindingSet > expectedSolutions = new ArrayList < IBindingSet > ( ) ; { final IBindingSet expected = new ListBindingSet ( ) ; expected . set ( Var . var ( _STR ) , new Constant < IV > ( termId ) ) ; expectedSolutions . add ( expected ) ; } { final IBindingSet expected = new ListBindingSet ( ) ; expected . set ( Var . var ( _STR ) , new Constant < IV > ( termId ) ) ; expected . set ( Var . var ( _STR ) , new Constant < IV > ( blobIV ) ) ; expectedSolutions . add ( expected ) ; } doEncodeDecodeTest ( expectedSolutions ) ; }
public void addTerm ( SplitCondition condition ) { terms . add ( condition ) ; }
@ Override protected void thresholdReached ( ) throws IOException { if ( prefix != null ) { outputFile = File . createTempFile ( prefix , suffix , directory ) ; } FileOutputStream fos = new FileOutputStream ( outputFile ) ; memoryOutputStream . writeTo ( fos ) ; currentOutputStream = fos ; memoryOutputStream = null ; }
public void removeIndexInterval ( int index0 , int index1 ) { int rmMinIndex = Math . min ( index0 , index1 ) ; int rmMaxIndex = Math . max ( index0 , index1 ) ; int gapLength = ( rmMaxIndex - rmMinIndex ) + _NUM ; for ( int i = rmMinIndex ; i <= maxIndex ; i ++ ) { setState ( i , value . get ( i + gapLength ) ) ; } int leadIndex = this . leadIndex ; if ( leadIndex == _NUM && rmMinIndex == _NUM ) { } else if ( leadIndex > rmMaxIndex ) { leadIndex = this . leadIndex - gapLength ; } else if ( leadIndex >= rmMinIndex ) { leadIndex = rmMinIndex - _NUM ; } int anchorIndex = this . anchorIndex ; if ( anchorIndex == _NUM && rmMinIndex == _NUM ) { } else if ( anchorIndex > rmMaxIndex ) { anchorIndex = this . anchorIndex - gapLength ; } else if ( anchorIndex >= rmMinIndex ) { anchorIndex = rmMinIndex - _NUM ; } if ( leadIndex != this . leadIndex || anchorIndex != this . anchorIndex ) { updateLeadAnchorIndices ( anchorIndex , leadIndex ) ; } fireValueChanged ( ) ; }
public void rebuildEventList ( boolean resetSelected ) { if ( logger . isLoggable ( Level . FINE ) ) { logger . fine ( _STR ) ; } allEvents = null ; activeEvents = null ; hideDetails ( ) ; initInterface ( getActiveEvents ( ) , resetSelected ) ; highlightCurrentEvent ( currentTime ) ; firePropertyChange ( ActiveEventsProperty , null , getActiveEvents ( ) ) ; }
public DiskStoreFactory createDiskStoreFactory ( ) { return new DiskStoreFactoryImpl ( this ) ; }
public static boolean deleteDirectorySubdirectories ( String rootDirectory ) { if ( ( rootDirectory == null ) ) { return _BOOL ; } boolean didSuccessfullyDeleteAllDirectories = _BOOL ; try { List < File > files = getListOfFilesInADirectory ( rootDirectory ) ; for ( File file : files ) { if ( file . isDirectory ( ) ) { boolean deleteSuccess = deleteDirectoryAndContents ( file ) ; if ( ! deleteSuccess ) { logger . debug ( _STR + file . getAbsolutePath ( ) ) ; didSuccessfullyDeleteAllDirectories = _BOOL ; } } } } catch ( Exception e ) { logger . debug ( e . toString ( ) + System . lineSeparator ( ) + StackTrace . getStringFromStackTrace ( e ) ) ; return _BOOL ; } return didSuccessfullyDeleteAllDirectories ; }
public void put ( byte [ ] buffer , int offset , int count ) { if ( count > ( bytes . length - this . contentLength ) ) { throw new IllegalArgumentException ( _STR ) ; } System . arraycopy ( buffer , offset , bytes , this . contentLength , count ) ; this . contentLength += count ; }
private void markReserved ( int ropReg , int category ) { reservedRopRegs . set ( ropReg , ropReg + category , _BOOL ) ; }
public static void registerDefaultResolvers ( ) { synchronized ( resolverList ) { resolverList . add ( new ResourceResolver ( new ResolverFragment ( ) ) ) ; resolverList . add ( new ResourceResolver ( new ResolverLocalFilesystem ( ) ) ) ; resolverList . add ( new ResourceResolver ( new ResolverXPointer ( ) ) ) ; resolverList . add ( new ResourceResolver ( new ResolverDirectHTTP ( ) ) ) ; } }
private boolean processAuthenticationResponse ( final HttpMethod method ) { LOG . trace ( _STR + _STR ) ; try { switch ( method . getStatusCode ( ) ) { case HttpStatus . SC_UNAUTHORIZED : return processWWWAuthChallenge ( method ) ; case HttpStatus . SC_PROXY_AUTHENTICATION_REQUIRED : return processProxyAuthChallenge ( method ) ; default : return _BOOL ; } } catch ( Exception e ) { if ( LOG . isErrorEnabled ( ) ) { LOG . error ( e . getMessage ( ) , e ) ; } return _BOOL ; } }
private void release ( ByteArray byteArray ) { synchronized ( syncRoot ) { if ( availableByteArrays . size ( ) >= maxAvailableArraysCount ) { return ; } if ( ! availableByteArrays . contains ( byteArray ) ) { availableByteArrays . add ( byteArray ) ; } } }
public Pipeline ( ) { }
@ Override public boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
@ Override public void drawRangeMarker ( Graphics2D g2 , CategoryPlot plot , ValueAxis axis , Marker marker , Rectangle2D dataArea ) { if ( marker instanceof ValueMarker ) { ValueMarker vm = ( ValueMarker ) marker ; double value = vm . getValue ( ) ; Range range = axis . getRange ( ) ; if ( ! range . contains ( value ) ) { return ; } final Composite savedComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , marker . getAlpha ( ) ) ) ; PlotOrientation orientation = plot . getOrientation ( ) ; double v = axis . valueToJava2D ( value , dataArea , plot . getRangeAxisEdge ( ) ) ; Line2D line = null ; if ( orientation == PlotOrientation . HORIZONTAL ) { line = new Line2D . Double ( v , dataArea . getMinY ( ) , v , dataArea . getMaxY ( ) ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { line = new Line2D . Double ( dataArea . getMinX ( ) , v , dataArea . getMaxX ( ) , v ) ; } else { throw new IllegalStateException ( ) ; } g2 . setPaint ( marker . getPaint ( ) ) ; g2 . setStroke ( marker . getStroke ( ) ) ; g2 . draw ( line ) ; String label = marker . getLabel ( ) ; RectangleAnchor anchor = marker . getLabelAnchor ( ) ; if ( label != null ) { Font labelFont = marker . getLabelFont ( ) ; g2 . setFont ( labelFont ) ; Point2D coordinates = calculateRangeMarkerTextAnchorPoint ( g2 , orientation , dataArea , line . getBounds2D ( ) , marker . getLabelOffset ( ) , LengthAdjustmentType . EXPAND , anchor ) ; Rectangle2D rect = TextUtils . calcAlignedStringBounds ( label , g2 , ( float ) coordinates . getX ( ) , ( float ) coordinates . getY ( ) , marker . getLabelTextAnchor ( ) ) ; g2 . setPaint ( marker . getLabelBackgroundColor ( ) ) ; g2 . fill ( rect ) ; g2 . setPaint ( marker . getLabelPaint ( ) ) ; TextUtils . drawAlignedString ( label , g2 , ( float ) coordinates . getX ( ) , ( float ) coordinates . getY ( ) , marker . getLabelTextAnchor ( ) ) ; } g2 . setComposite ( savedComposite ) ; } else if ( marker instanceof IntervalMarker ) { IntervalMarker im = ( IntervalMarker ) marker ; double start = im . getStartValue ( ) ; double end = im . getEndValue ( ) ; Range range = axis . getRange ( ) ; if ( ! ( range . intersects ( start , end ) ) ) { return ; } final Composite savedComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , marker . getAlpha ( ) ) ) ; double start2d = axis . valueToJava2D ( start , dataArea , plot . getRangeAxisEdge ( ) ) ; double end2d = axis . valueToJava2D ( end , dataArea , plot . getRangeAxisEdge ( ) ) ; double low = Math . min ( start2d , end2d ) ; double high = Math . max ( start2d , end2d ) ; PlotOrientation orientation = plot . getOrientation ( ) ; Rectangle2D rect = null ; if ( orientation == PlotOrientation . HORIZONTAL ) { low = Math . max ( low , dataArea . getMinX ( ) ) ; high = Math . min ( high , dataArea . getMaxX ( ) ) ; rect = new Rectangle2D . Double ( low , dataArea . getMinY ( ) , high - low , dataArea . getHeight ( ) ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { low = Math . max ( low , dataArea . getMinY ( ) ) ; high = Math . min ( high , dataArea . getMaxY ( ) ) ; rect = new Rectangle2D . Double ( dataArea . getMinX ( ) , low , dataArea . getWidth ( ) , high - low ) ; } Paint p = marker . getPaint ( ) ; if ( p instanceof GradientPaint ) { GradientPaint gp = ( GradientPaint ) p ; GradientPaintTransformer t = im . getGradientPaintTransformer ( ) ; if ( t != null ) { gp = t . transform ( gp , rect ) ; } g2 . setPaint ( gp ) ; } else { g2 . setPaint ( p ) ; } g2 . fill ( rect ) ; if ( im . getOutlinePaint ( ) != null && im . getOutlineStroke ( ) != null ) { if ( orientation == PlotOrientation . VERTICAL ) { Line2D line = new Line2D . Double ( ) ; double x0 = dataArea . getMinX ( ) ; double x1 = dataArea . getMaxX ( ) ; g2 . setPaint ( im . getOutlinePaint ( ) ) ; g2 . setStroke ( im . getOutlineStroke ( ) ) ; if ( range . contains ( start ) ) { line . setLine ( x0 , start2d , x1 , start2d ) ; g2 . draw ( line ) ; } if ( range . contains ( end ) ) { line . setLine ( x0 , end2d , x1 , end2d ) ; g2 . draw ( line ) ; } } else { Line2D line = new Line2D . Double ( ) ; double y0 = dataArea . getMinY ( ) ; double y1 = dataArea . getMaxY ( ) ; g2 . setPaint ( im . getOutlinePaint ( ) ) ; g2 . setStroke ( im . getOutlineStroke ( ) ) ; if ( range . contains ( start ) ) { line . setLine ( start2d , y0 , start2d , y1 ) ; g2 . draw ( line ) ; } if ( range . contains ( end ) ) { line . setLine ( end2d , y0 , end2d , y1 ) ; g2 . draw ( line ) ; } } } String label = marker . getLabel ( ) ; RectangleAnchor anchor = marker . getLabelAnchor ( ) ; if ( label != null ) { Font labelFont = marker . getLabelFont ( ) ; g2 . setFont ( labelFont ) ; Point2D coords = calculateRangeMarkerTextAnchorPoint ( g2 , orientation , dataArea , rect , marker . getLabelOffset ( ) , marker . getLabelOffsetType ( ) , anchor ) ; Rectangle2D r = TextUtils . calcAlignedStringBounds ( label , g2 , ( float ) coords . getX ( ) , ( float ) coords . getY ( ) , marker . getLabelTextAnchor ( ) ) ; g2 . setPaint ( marker . getLabelBackgroundColor ( ) ) ; g2 . fill ( r ) ; g2 . setPaint ( marker . getLabelPaint ( ) ) ; TextUtilities . drawAlignedString ( label , g2 , ( float ) coords . getX ( ) , ( float ) coords . getY ( ) , marker . getLabelTextAnchor ( ) ) ; } g2 . setComposite ( savedComposite ) ; } }
private void init ( ) { acceptableMethods = new ArrayList < > ( ) ; acceptableMethods . add ( new NoAuthenticationRequiredMethod ( ) ) ; acceptableMethods . add ( new GssApiMethod ( ) ) ; acceptableMethods . add ( new UsernamePasswordMethod ( ) ) ; }
private boolean lockOrder ( Order order ) { lock . lock ( ) ; try { return activeOrders . add ( order . getId ( ) ) ; } finally { lock . unlock ( ) ; } }
public void put ( Buffer buffer ) { if ( buffer . getLength ( ) <= _NUM ) { return ; } byte [ ] currentRtpPacketData = ( ( byte [ ] ) buffer . getData ( ) ) ; H264RtpHeaders h264RtpHeaders = new H264RtpHeaders ( currentRtpPacketData ) ; if ( h264RtpHeaders . getFUI_F ( ) ) { return ; } if ( reassembledData == null ) { timestamp = buffer . getTimestamp ( ) ; format = buffer . getFormat ( ) ; seqNumber = buffer . getSequenceNumber ( ) ; reassembledDataNALHeader = h264RtpHeaders . getNALHeader ( ) ; reassembledData = new byte [ JavaPacketizer . H264_MAX_RTP_PKTS ] [ H264_FRAME_PACKET_SIZE ] ; reassembledDataSize = new int [ JavaPacketizer . H264_MAX_RTP_PKTS ] ; reassembledDataHasStart = _BOOL ; reassembledDataHasEnd = _BOOL ; } int posSeq = ( int ) ( buffer . getSequenceNumber ( ) & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK ) ; int payloadStartPosition = h264RtpHeaders . getHeaderSize ( ) ; int payloadLength = buffer . getLength ( ) - h264RtpHeaders . getHeaderSize ( ) ; if ( h264RtpHeaders . getFUI_TYPE ( ) == H264RtpHeaders . AVC_NALTYPE_FUA ) { reassembledDataHasStart |= ( h264RtpHeaders . getFUH_S ( ) ) ; reassembledDataHasEnd |= ( h264RtpHeaders . getFUH_E ( ) ) ; reassembledDataPosSeqStart = ( ( h264RtpHeaders . getFUH_S ( ) ) ? posSeq : reassembledDataPosSeqStart ) ; reassembledDataPosSeqEnd = ( ( h264RtpHeaders . getFUH_E ( ) ) ? posSeq : reassembledDataPosSeqEnd ) ; } reassembledDataSize [ posSeq ] = payloadLength ; reassembledDataFullSize += payloadLength ; System . arraycopy ( currentRtpPacketData , payloadStartPosition , reassembledData [ posSeq ] , _NUM , payloadLength ) ; videoOrientation = buffer . getVideoOrientation ( ) ; }
public static final void writeStringArrayXml ( String [ ] val , String name , XmlSerializer out ) throws XmlPullParserException , java . io . IOException { if ( val == null ) { out . startTag ( null , _STR ) ; out . endTag ( null , _STR ) ; return ; } out . startTag ( null , _STR ) ; if ( name != null ) { out . attribute ( null , _STR , name ) ; } final int N = val . length ; out . attribute ( null , _STR , Integer . toString ( N ) ) ; for ( int i = _NUM ; i < N ; i ++ ) { out . startTag ( null , _STR ) ; out . attribute ( null , _STR , val [ i ] ) ; out . endTag ( null , _STR ) ; } out . endTag ( null , _STR ) ; }
private static boolean hasSpecializedHandlerIntents ( Context context , Intent intent ) { try { PackageManager pm = context . getPackageManager ( ) ; List < ResolveInfo > handlers = pm . queryIntentActivities ( intent , PackageManager . GET_RESOLVED_FILTER ) ; if ( handlers == null || handlers . size ( ) == _NUM ) { return _BOOL ; } for ( ResolveInfo resolveInfo : handlers ) { IntentFilter filter = resolveInfo . filter ; if ( filter == null ) continue ; if ( filter . countDataAuthorities ( ) == _NUM || filter . countDataPaths ( ) == _NUM ) continue ; if ( resolveInfo . activityInfo == null ) continue ; return _BOOL ; } } catch ( RuntimeException e ) { Log . e ( TAG , _STR ) ; } return _BOOL ; }
private void unifyUsernameByName ( Map < String , List < LogCommitInfo > > devNameMap ) { for ( Entry < String , List < LogCommitInfo > > entry : devNameMap . entrySet ( ) ) { List < String > userNames = getUserNamesList ( entry . getValue ( ) ) ; if ( userNames . size ( ) > _NUM ) { String newUserName = getNewUserName ( userNames ) ; for ( LogCommitInfo commit : entry . getValue ( ) ) { commit . setUserName ( newUserName ) ; } } } }
@ SuppressWarnings ( _STR ) public JdbcData ( Connection connection , String table , boolean buffered ) { this . connection = connection ; this . table = table ; setBuffered ( buffered ) ; try { setColumnTypes ( getJdbcColumnTypes ( ) ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
public void storeStackForException ( Throwable t , int currentStackFrame ) { if ( ! exceptionStack . containsKey ( t ) ) { int [ ] s = new int [ stackPointer + _NUM ] ; System . arraycopy ( stack , _NUM , s , _NUM , stackPointer ) ; s [ stackPointer ] = currentStackFrame ; exceptionStack . put ( t , s ) ; } }
public SecureELFFormatter ( ) { String timestampGeneratorClass = lmanager . getProperty ( LogConstants . SECURE_TIMESTAMP_GENERATOR ) ; try { Class clz = Class . forName ( timestampGeneratorClass ) ; secureTimestampGenerator = ( ITimestampGenerator ) clz . newInstance ( ) ; } catch ( ClassNotFoundException cnfe ) { Debug . error ( _STR + _STR , cnfe ) ; } catch ( InstantiationException ie ) { Debug . error ( _STR + _STR , ie ) ; } catch ( IllegalAccessException iae ) { Debug . error ( _STR + _STR , iae ) ; } }
public static byte [ ] readData ( final URL url ) throws IOException { try ( InputStream input = url . openStream ( ) ) { return readData ( input ) ; } }
public boolean isValidCurrent ( long checkTime ) { if ( checkTime == _NUM || ( rDateList == null && rRulesList == null ) ) { return _BOOL ; } boolean found = _BOOL ; Iterator < RecurrenceRule > rulesIterator = getRecurrenceRuleIterator ( ) ; while ( rulesIterator . hasNext ( ) ) { RecurrenceRule rule = rulesIterator . next ( ) ; long currentTime = rule . validCurrent ( getStartTime ( ) , checkTime , getCurrentCount ( ) ) ; currentTime = checkDateList ( rDateList , currentTime , checkTime ) ; if ( ( currentTime > _NUM ) && isValid ( checkTime ) ) { found = _BOOL ; } else { return _BOOL ; } } return found ; }
public static EnergyNetwork initNetwork ( ) { Random random = new Random ( System . currentTimeMillis ( ) ) ; int id = random . nextInt ( ) ; while ( usedIds . contains ( id ) ) { id = random . nextInt ( ) ; } ; EnergyNetwork net = new EnergyNetwork ( ) ; usedIds . add ( id ) ; net . networkID = id ; return net ; }
public static String toKilobytes ( long bytes ) { if ( bytes < _NUM ) return _STR + GENERAL_UNIT_KILOBYTES ; long kbytes = bytes / _NUM ; if ( ( bytes & _NUM ) != _NUM || ( bytes > _NUM && bytes < _NUM ) ) kbytes ++ ; return NUMBER_FORMAT0 . format ( kbytes ) + GENERAL_UNIT_KILOBYTES ; }
private PendingIntent createRequestPendingIntent ( @ NonNull String pendingIntentClassName ) { PendingIntent pendingIntent = null ; try { Class classOfPendingIntent = Class . forName ( pendingIntentClassName ) ; if ( classOfPendingIntent != null ) { Intent intent = new Intent ( mContext , classOfPendingIntent ) ; pendingIntent = PendingIntent . getService ( mContext , _NUM , intent , PendingIntent . FLAG_UPDATE_CURRENT ) ; } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } return pendingIntent ; }
public boolean isStatic ( ) { return Modifier . isStatic ( _method . getModifiers ( ) ) ; }
void testString ( ) { String a = randomString ( ) ; if ( returnNew ) { String b = StringUtils . fromCacheOrNew ( a ) ; try { assertEquals ( a , b ) ; } catch ( Exception e ) { TestBase . logError ( _STR , e ) ; } if ( a != null && a == b && a . length ( ) > _NUM ) { throw new AssertionError ( _STR + System . identityHashCode ( a ) + _STR + System . identityHashCode ( b ) ) ; } } else { String b ; if ( useIntern ) { b = a == null ? null : a . intern ( ) ; } else { b = StringUtils . cache ( a ) ; } try { assertEquals ( a , b ) ; } catch ( Exception e ) { TestBase . logError ( _STR , e ) ; } } }
public static void write ( File file , CharSequence data , Charset encoding , boolean append ) throws IOException { String str = data == null ? null : data . toString ( ) ; writeStringToFile ( file , str , encoding , append ) ; }
public static String unifyLineSeparators ( String s ) { return unifyLineSeparators ( s , System . getProperty ( _STR ) ) ; }
public static byte [ ] decryptKey ( byte [ ] password , byte [ ] encryptedKey ) { try { Cipher c = Cipher . getInstance ( ENCRYPT_KEY_ALGORITHM ) ; c . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( password , SECRET_KEY_ALGORITHM ) , CBC_SALT_KEY ) ; return c . doFinal ( encryptedKey ) ; } catch ( Exception e ) { throw new IllegalStateException ( ENCRYPT_KEY_ALGORITHM + _STR , e ) ; } }
public void configs ( SwtPlatform ... platforms ) { configs ( Arrays . asList ( platforms ) ) ; }
protected int checkIPRange ( ) { int retVal = _NUM ; String ipVersion ; String ipType ; Map < String , String > holdDetails ; for ( String nextIP : IPRangeRange ) { try { holdDetails = checkIPVersion ( nextIP ) ; } catch ( IllegalArgumentException e ) { if ( debug . warningEnabled ( ) ) { debug . warning ( _STR , ADAPTIVE , nextIP , e ) ; } continue ; } ipVersion = holdDetails . get ( IP_Version ) ; ipType = holdDetails . get ( IP_TYPE ) ; if ( ipVersion . equalsIgnoreCase ( IP_V6 ) && ValidateIPaddress . isIPv6 ( clientIP ) ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR , ADAPTIVE , clientIP , nextIP ) ; debug . message ( _STR , IP_V6 ) ; debug . message ( _STR , IPv6Address . fromString ( clientIP ) ) ; } if ( ipType . equalsIgnoreCase ( _STR ) ) { String first = holdDetails . get ( IP_START ) ; String last = holdDetails . get ( IP_END ) ; IPv6AddressRange iPv6AddressRange = IPv6AddressRange . fromFirstAndLast ( IPv6Address . fromString ( first ) , IPv6Address . fromString ( last ) ) ; if ( iPv6AddressRange . contains ( IPv6Address . fromString ( clientIP ) ) ) { retVal = IPRangeScore ; break ; } } else if ( ipType . equalsIgnoreCase ( _STR ) ) { IPv6Network iPv6Network = IPv6Network . fromString ( nextIP ) ; if ( iPv6Network . contains ( IPv6Address . fromString ( clientIP ) ) ) { retVal = IPRangeScore ; break ; } } else { IPv6Address iPv6AddressNextIP = IPv6Address . fromString ( nextIP ) ; if ( iPv6AddressNextIP . compareTo ( IPv6Address . fromString ( clientIP ) ) == _NUM ) { retVal = IPRangeScore ; break ; } } } else if ( ipVersion . equalsIgnoreCase ( IP_V4 ) && ValidateIPaddress . isIPv4 ( clientIP ) ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR , ADAPTIVE , clientIP , nextIP ) ; debug . message ( _STR , IP_V4 ) ; debug . message ( _STR , clientIP ) ; } IPRange theRange = new IPRange ( nextIP ) ; if ( theRange . inRange ( clientIP ) ) { retVal = IPRangeScore ; break ; } } } if ( ! IPRangeInvert ) { retVal = IPRangeScore - retVal ; } return retVal ; }
private View fillFromSelection ( int selectedLeft , int childrenLeft , int childrenRight ) { if ( DEBUG ) Log . i ( TAG , _STR + selectedLeft + _STR + childrenLeft + CHILDREN_RIGHT + childrenRight + M_FIRST_POSITION + mFirstPosition ) ; final int fadingEdgeLength = getHorizontalFadingEdgeLength ( ) ; final int selectedPosition = mSelectedPosition ; final int numRows = mNumRows ; final int horizontalSpacing = mHorizontalSpacing ; int columnStart ; int columnEnd = - _NUM ; if ( ! mStackFromBottom ) { columnStart = selectedPosition - ( selectedPosition % numRows ) ; } else { int invertedSelection = mItemCount - _NUM - selectedPosition ; columnEnd = mItemCount - _NUM - ( invertedSelection - ( invertedSelection % numRows ) ) ; columnStart = Math . max ( _NUM , columnEnd - numRows + _NUM ) ; } View sel ; View referenceView ; int leftSelectionPixel = getLeftSelectionPixel ( childrenLeft , fadingEdgeLength , columnStart ) ; int rightSelectionPixel = getRightSelectionPixel ( childrenRight , fadingEdgeLength , numRows , columnStart ) ; sel = makeColumn ( mStackFromBottom ? columnEnd : columnStart , selectedLeft , _BOOL ) ; mFirstPosition = columnStart ; referenceView = mReferenceView ; adjustForLeftFadingEdge ( referenceView , leftSelectionPixel , rightSelectionPixel ) ; adjustForRightFadingEdge ( referenceView , leftSelectionPixel , rightSelectionPixel ) ; if ( ! mStackFromBottom ) { fillLeft ( columnStart - numRows , referenceView . getLeft ( ) - horizontalSpacing ) ; adjustViewsLeftOrRight ( ) ; fillRight ( columnStart + numRows , referenceView . getRight ( ) + horizontalSpacing ) ; } else { fillRight ( columnEnd + numRows , referenceView . getRight ( ) + horizontalSpacing ) ; adjustViewsLeftOrRight ( ) ; fillLeft ( columnStart - _NUM , referenceView . getLeft ( ) - horizontalSpacing ) ; } return sel ; }
private static Field findField ( Object instance , String name ) throws NoSuchFieldException { for ( Class < ? > clazz = instance . getClass ( ) ; clazz != null ; clazz = clazz . getSuperclass ( ) ) { try { Field field = clazz . getDeclaredField ( name ) ; if ( ! field . isAccessible ( ) ) { field . setAccessible ( _BOOL ) ; } return field ; } catch ( NoSuchFieldException e ) { } } throw new NoSuchFieldException ( _STR + name + _STR + instance . getClass ( ) ) ; }
protected int calculateBreakPosition ( int p0 , Token tokenList , float x0 ) { int p = p0 ; RSyntaxTextArea textArea = ( RSyntaxTextArea ) getContainer ( ) ; float currentWidth = getWidth ( ) ; if ( currentWidth == Integer . MAX_VALUE ) currentWidth = getPreferredSpan ( X_AXIS ) ; currentWidth = Math . max ( currentWidth , MIN_WIDTH ) ; Token t = tokenList ; while ( t != null && t . isPaintable ( ) ) { float tokenWidth = t . getWidth ( textArea , this , x0 ) ; if ( tokenWidth > currentWidth ) { if ( p == p0 ) { return t . getOffsetBeforeX ( textArea , this , _NUM , currentWidth ) ; } return t . isWhitespace ( ) ? p + t . textCount : p ; } currentWidth -= tokenWidth ; x0 += tokenWidth ; p += t . textCount ; t = t . getNextToken ( ) ; } return p + _NUM ; }
@ Override public ShapeTileSimplex to_Simplex ( ) { if ( is_empty ( ) ) return ShapeTileSimplex . EMPTY ; ArrayList < PlaLineInt > line_arr = new ArrayList < PlaLineInt > ( _NUM ) ; line_arr . add ( new PlaLineInt ( box_ll , PlaDirection . RIGHT ) ) ; line_arr . add ( new PlaLineInt ( box_ur , PlaDirection . UP ) ) ; line_arr . add ( new PlaLineInt ( box_ur , PlaDirection . LEFT ) ) ; line_arr . add ( new PlaLineInt ( box_ll , PlaDirection . DOWN ) ) ; return new ShapeTileSimplex ( line_arr ) ; }
private void injectContent ( Inject injectContent ) throws IOException , MojoExecutionException { Map < Pattern , File > contents = getContentsMap ( injectContent . getContents ( ) ) ; File tmpFile = ioFactory . createTemporaryFile ( injectContent . getDestinationFile ( ) ) ; BufferedReader reader = null ; BufferedWriter writer = null ; try { reader = ioFactory . newReader ( injectContent . getDestinationFile ( ) ) ; writer = ioFactory . newWriter ( tmpFile ) ; String line ; while ( ( line = reader . readLine ( ) ) != null ) { File content = doesLineMatchId ( contents , line ) ; if ( content != null ) { ioFactory . writeContent ( writer , content , getContentConverter ( injectContent ) ) ; } else { ioFactory . writeLine ( writer , line ) ; } } } finally { if ( reader != null ) { reader . close ( ) ; } if ( writer != null ) { writer . flush ( ) ; writer . close ( ) ; } } ioFactory . moveTo ( tmpFile , injectContent . getDestinationFile ( ) ) ; }
public static < E > boolean isEmpty ( CharSequence c ) { return ( c == null ) || c . length ( ) == _NUM ; }
private static boolean createBooleanSetting ( final Map < String , String > rawSettings , final String settingName , final boolean defaultValue ) { final String settingString = rawSettings . get ( settingName ) ; if ( settingString == null ) { return defaultValue ; } else { try { return Boolean . parseBoolean ( settingString ) ; } catch ( final NumberFormatException exception ) { CUtilityFunctions . logException ( exception ) ; return defaultValue ; } } }
@ Override public void disconnectionNotification ( String eventName , Object source ) { m_listenees . remove ( source ) ; }
public Criteria createCriteria ( ) { Criteria criteria = createCriteriaInternal ( ) ; if ( oredCriteria . size ( ) == _NUM ) { oredCriteria . add ( criteria ) ; } return criteria ; }
private MarshalledWrapper lookupDo ( Template tmpl ) { if ( isEmpty ( tmpl . serviceTypes ) || tmpl . serviceID != null ) { ItemIter iter = matchingItems ( tmpl ) ; if ( iter . hasNext ( ) ) return iter . next ( ) . service ; return null ; } List services = matchingServices ( tmpl . serviceTypes ) ; long now = System . currentTimeMillis ( ) ; int slen = services . size ( ) ; if ( slen == _NUM ) return null ; int srand = Math . abs ( random . nextInt ( ) % slen ) ; for ( int i = _NUM ; i < slen ; i ++ ) { SvcReg reg = ( SvcReg ) services . get ( ( i + srand ) % slen ) ; if ( reg . leaseExpiration > now && matchAttributes ( tmpl , reg . item ) ) return reg . item . service ; } return null ; }
@ Override public boolean runAfter ( List tasks , int size ) { for ( int i = _NUM ; i < size ; i ++ ) { CacheTask t = ( CacheTask ) tasks . get ( i ) ; if ( t instanceof RegisterListenerTask || t instanceof LookupTask ) { ProxyReg otherReg = t . getProxyReg ( ) ; if ( reg . equals ( otherReg ) ) { if ( thisTaskSeqN > t . getSeqN ( ) ) return _BOOL ; } } } return super . runAfter ( tasks , size ) ; }
String generateKey ( ) throws OracleException { byte [ ] data = null ; try { data = HashFuncs . getRandom ( ) ; } catch ( Exception e ) { if ( OracleLog . isLoggingEnabled ( ) ) log . warning ( e . toString ( ) ) ; } if ( data == null ) { data = fetchGuid ( ) ; } if ( data == null ) { throw SODAUtils . makeException ( SODAMessage . EX_UNABLE_TO_CREATE_UUID ) ; } return ( ByteArray . rawToHex ( data ) ) ; }
public double [ ] arrayCopy ( ) { double [ ] array = new double [ length ( ) ] ; for ( IndexValue iv : this ) array [ iv . getIndex ( ) ] = iv . getValue ( ) ; return array ; }
public static void delete ( Path path ) { if ( path != null ) { path = path . toAbsolutePath ( ) ; if ( inTargetDir ( path ) ) { try { IoUtil . delete ( path ) ; } catch ( IOException e ) { printError ( _STR + path . toAbsolutePath ( ) + _STR , e ) ; } } else { printError ( _STR + path ) ; } } }
private static boolean parse ( Class < ? > service , URL u ) throws ServiceConfigurationError { InputStream in = null ; BufferedReader r = null ; try { in = u . openStream ( ) ; r = new BufferedReader ( new InputStreamReader ( in , _STR ) ) ; int lc = _NUM ; String ln ; while ( ( ln = r . readLine ( ) ) != null ) { int ci = ln . indexOf ( _STR ) ; if ( ci >= _NUM ) ln = ln . substring ( _NUM , ci ) ; ln = ln . trim ( ) ; int n = ln . length ( ) ; if ( n != _NUM ) { if ( ( ln . indexOf ( _STR ) >= _NUM ) || ( ln . indexOf ( _STR ) >= _NUM ) ) fail ( service , u , lc , _STR ) ; int cp = ln . codePointAt ( _NUM ) ; if ( ! Character . isJavaIdentifierStart ( cp ) ) fail ( service , u , lc , _STR + ln ) ; for ( int i = Character . charCount ( cp ) ; i < n ; i += Character . charCount ( cp ) ) { cp = ln . codePointAt ( i ) ; if ( ! Character . isJavaIdentifierPart ( cp ) && ( cp != _STR ) ) fail ( service , u , lc , _STR + ln ) ; } return _BOOL ; } } } catch ( FileNotFoundException x ) { return _BOOL ; } catch ( IOException x ) { fail ( service , _STR + x ) ; } finally { try { if ( r != null ) r . close ( ) ; } catch ( IOException y ) { fail ( service , _STR + y ) ; } try { if ( in != null ) in . close ( ) ; } catch ( IOException y ) { fail ( service , _STR + y ) ; } } return _BOOL ; }
private void initPattern ( ) { StringBuffer patternTemplateRegex = new StringBuffer ( ) ; logger . debug ( _STR ) ; Matcher placeholderMatcher = getPlaceholderMatcher ( ) ; logger . debug ( _STR ) ; while ( placeholderMatcher . find ( ) ) { String group = placeholderMatcher . group ( _NUM ) ; if ( ! groups . contains ( group ) ) { logger . trace ( _STR ) ; groups . add ( group ) ; String groupRegex = getGroupRegex ( group ) ; placeholderMatcher . appendReplacement ( patternTemplateRegex , Matcher . quoteReplacement ( _STR + group + _STR + groupRegex + _STR ) ) ; } else { logger . trace ( _STR ) ; placeholderMatcher . appendReplacement ( patternTemplateRegex , Matcher . quoteReplacement ( _STR + group + _STR ) ) ; } } placeholderMatcher . appendTail ( patternTemplateRegex ) ; String patternRegex = patternTemplateRegex . toString ( ) ; logger . debug ( _STR + patternRegex ) ; pattern = Pattern . compile ( patternRegex ) ; }
protected void newLine ( PrintWriter file , String string , boolean isManifest ) { String [ ] lines = string . split ( NEW_LINE ) ; for ( String line : lines ) { String [ ] words = line . split ( SPACE ) ; StringBuffer sb = new StringBuffer ( ) ; for ( String word : words ) { if ( checkStringLength ( sb . toString ( ) + word , isManifest ) ) { sb . append ( word + SPACE ) ; } else { sb . setLength ( sb . length ( ) - _NUM ) ; addLine ( file , sb . toString ( ) ) ; sb = new StringBuffer ( word + SPACE ) ; } } if ( sb . length ( ) > _NUM ) { sb . setLength ( sb . length ( ) - _NUM ) ; } addLine ( file , sb . toString ( ) ) ; } }
protected boolean updateAttachmentPoint ( ) { boolean moved = _BOOL ; this . oldAPs = attachmentPoints ; if ( attachmentPoints == null || attachmentPoints . isEmpty ( ) ) return _BOOL ; List < AttachmentPoint > apList = new ArrayList < AttachmentPoint > ( ) ; if ( attachmentPoints != null ) apList . addAll ( attachmentPoints ) ; Map < Long , AttachmentPoint > newMap = getAPMap ( apList ) ; if ( newMap == null || newMap . size ( ) != apList . size ( ) ) { moved = _BOOL ; } if ( moved ) { log . info ( _STR , attachmentPoints , newMap ) ; List < AttachmentPoint > newAPList = new ArrayList < AttachmentPoint > ( ) ; if ( newMap != null ) newAPList . addAll ( newMap . values ( ) ) ; this . attachmentPoints = newAPList ; } return moved ; }
public List < SoftWrapImpl > removeStartingFrom ( int offset ) { int startIndex = getSoftWrapIndex ( offset ) ; if ( startIndex < _NUM ) { startIndex = - startIndex - _NUM ; } if ( startIndex >= myWraps . size ( ) ) { return Collections . emptyList ( ) ; } List < SoftWrapImpl > tail = myWraps . subList ( startIndex , myWraps . size ( ) ) ; List < SoftWrapImpl > result = new ArrayList < SoftWrapImpl > ( tail ) ; tail . clear ( ) ; return result ; }
public static String formatDps ( final double dps ) { return _STR + String . format ( _STR , dps ) + _STR ; }
public static String truncate ( String string , int length ) { if ( string . length ( ) > length ) { string = string . substring ( _NUM , length ) ; } return string ; }
private static String escapeJSON ( String text ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( _STR ) ; for ( int index = _NUM ; index < text . length ( ) ; index ++ ) { char chr = text . charAt ( index ) ; switch ( chr ) { case _STR : case _STR : builder . append ( _STR ) ; builder . append ( chr ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; default : if ( chr < _STR ) { String t = _STR + Integer . toHexString ( chr ) ; builder . append ( _STR + t . substring ( t . length ( ) - _NUM ) ) ; } else { builder . append ( chr ) ; } break ; } } builder . append ( _STR ) ; return builder . toString ( ) ; }
@ SuppressWarnings ( _STR ) public SortedSet < E > subSet ( E start , E end ) { return subSet ( start , _BOOL , end , _BOOL ) ; }
private boolean checkDisband ( Legion legion ) { if ( legion . isDisbanding ( ) ) { if ( ( System . currentTimeMillis ( ) / _NUM ) > legion . getDisbandTime ( ) ) { disbandLegion ( legion ) ; return _BOOL ; } } return _BOOL ; }
public void index ( Tuple t , String field ) { String s ; if ( ( s = t . getString ( field ) ) == null ) return ; StringTokenizer st = new StringTokenizer ( s , m_delim ) ; while ( st . hasMoreTokens ( ) ) { String tok = st . nextToken ( ) ; addString ( tok , t ) ; } }
public static void downto ( float self , Number to , @ ClosureParams ( FirstParam . class ) Closure closure ) { float to1 = to . floatValue ( ) ; if ( self >= to1 ) { for ( float i = self ; i >= to1 ; i -- ) { closure . call ( i ) ; } } else throw new GroovyRuntimeException ( _STR + to + _STR + self + _STR ) ; }
protected void parseDOMAttributes ( Element element ) throws SAML2Exception { requestId = element . getAttribute ( SAML2Constants . ID ) ; validateID ( requestId ) ; version = element . getAttribute ( SAML2Constants . VERSION ) ; validateVersion ( version ) ; String issueInstantStr = element . getAttribute ( SAML2Constants . ISSUE_INSTANT ) ; validateIssueInstant ( issueInstantStr ) ; destinationURI = element . getAttribute ( SAML2Constants . DESTINATION ) ; consent = element . getAttribute ( SAML2Constants . CONSENT ) ; }
protected int readFully ( InputStream in , byte buffer [ ] ) throws java . io . IOException { for ( int i = _NUM ; i < buffer . length ; i ++ ) { int q = in . read ( ) ; if ( q == - _NUM ) return i ; buffer [ i ] = ( byte ) q ; } return buffer . length ; }
@ CalledByNative private static void insertFullscreenInfoIntoList ( ArrayList < FullscreenInfo > list , String origin , String embedder ) { list . add ( new FullscreenInfo ( origin , embedder , _BOOL ) ) ; }
public static InputStream streamFromString ( String location ) throws IOException { InputStream is = null ; URL url = urlFromString ( location , null , _BOOL ) ; if ( url != null ) { is = url . openStream ( ) ; } else { File f = new File ( location ) ; if ( f . exists ( ) ) is = new FileInputStream ( f ) ; } if ( is == null ) { return null ; } else if ( isGZipFile ( location ) ) { return new GZIPInputStream ( is ) ; } else { return is ; } }
public void add ( T item ) { synchronized ( lock ) { items . add ( identifiedItemFactory . create ( item ) ) ; } notifyDataSetChanged ( ) ; }
private void copyACLs ( List < UnManagedCifsShareACL > origACLList , List < CifsShareACL > shareACLList , FileShare fileshare ) { CifsShareACL shareACL = null ; for ( UnManagedCifsShareACL origACL : origACLList ) { shareACL = new CifsShareACL ( ) ; shareACL . setId ( URIUtil . createId ( CifsShareACL . class ) ) ; shareACL . setUser ( origACL . getUser ( ) ) ; shareACL . setPermission ( origACL . getPermission ( ) ) ; shareACL . setShareName ( origACL . getShareName ( ) ) ; shareACL . setFileSystemId ( fileshare . getId ( ) ) ; shareACLList . add ( shareACL ) ; _logger . info ( _STR , shareACL . toString ( ) ) ; } }
public ResourceListParser parse ( ) throws ParserConfigurationException , SAXException , ParseFailureException { try { SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; SAXParser parser = factory . newSAXParser ( ) ; parser . parse ( mInputSource , this ) ; return this ; } catch ( IOException e ) { throw new ParseFailureException ( _STR , e ) ; } }
public Builder deleteEntitlements ( ) { deleteFields . add ( _STR ) ; return this ; }
protected void incorporateSignedProperties ( ) throws DSSException { signedPropertiesDom = DSSXMLUtils . addElement ( documentDom , qualifyingPropertiesDom , XAdES , XADES_SIGNED_PROPERTIES ) ; signedPropertiesDom . setAttribute ( ID , _STR + deterministicId ) ; incorporateSignedSignatureProperties ( ) ; }
private ChannelSelection createChannelSelection ( StyleFactoryImpl styleFactory , ContrastMethod contrastMethod ) { ContrastEnhancement contrastEnhancement = ( ContrastEnhancement ) styleFactory . contrastEnhancement ( null , contrastMethod . name ( ) ) ; FilterFactory ff = CommonFactoryFinder . getFilterFactory ( ) ; Map < String , Expression > options = contrastEnhancement . getOptions ( ) ; options . put ( _STR , ff . literal ( _STR ) ) ; options . put ( _STR , ff . literal ( _STR ) ) ; options . put ( _STR , ff . literal ( _STR ) ) ; SelectedChannelType channelType = styleFactory . createSelectedChannelType ( _STR , contrastEnhancement ) ; SelectedChannelType [ ] channels = new SelectedChannelType [ _NUM ] ; channels [ _NUM ] = channelType ; channels [ _NUM ] = channelType ; channels [ _NUM ] = channelType ; ChannelSelection channelSelection = styleFactory . createChannelSelection ( channels ) ; return channelSelection ; }
public static float mean ( float [ ] data , int [ ] inds ) { float mean = _NUM ; for ( int i = _NUM ; i < inds . length ; i ++ ) { if ( Float . isNaN ( data [ inds [ i ] ] ) ) throw new IllegalArgumentException ( _STR ) ; mean += data [ inds [ i ] ] ; } mean /= inds . length ; return mean ; }
public int depth ( ) { return pointer ; }
public Result doComparisonTest ( Properties properties ) throws Exception { final long timeout = Long . parseLong ( properties . getProperty ( TestOptions . TIMEOUT ) ) ; final int ntrials = Integer . parseInt ( properties . getProperty ( TestOptions . NTRIALS ) ) ; final int nclients = Integer . parseInt ( properties . getProperty ( TestOptions . NCLIENTS ) ) ; final double percentReaders = Double . parseDouble ( properties . getProperty ( TestOptions . PERCENT_READERS ) ) ; final double percentWritersWillFlush = Double . parseDouble ( properties . getProperty ( TestOptions . PERCENT_WRITER_WILL_FLUSH ) ) ; final int reclen = Integer . parseInt ( properties . getProperty ( TestOptions . RECLEN ) ) ; final int nwritesPerTask = Integer . parseInt ( properties . getProperty ( TestOptions . NWRITES ) ) ; final int nreadsPerTask = Integer . parseInt ( properties . getProperty ( TestOptions . NREADS ) ) ; final AtomicInteger nerr = new AtomicInteger ( ) ; final Result result = doMRMWTest ( store , timeout , ntrials , nclients , percentReaders , percentWritersWillFlush , reclen , nwritesPerTask , nreadsPerTask , nerr ) ; return result ; }
private void cmd_import ( ) { JFileChooser jc = new JFileChooser ( ) ; jc . setDialogTitle ( Msg . getMsg ( Env . getCtx ( ) , _STR ) ) ; jc . setDialogType ( JFileChooser . OPEN_DIALOG ) ; jc . setFileSelectionMode ( JFileChooser . FILES_ONLY ) ; if ( jc . showOpenDialog ( this ) != JFileChooser . APPROVE_OPTION ) return ; StringBuffer sb = new StringBuffer ( ) ; try { InputStreamReader in = new InputStreamReader ( new FileInputStream ( jc . getSelectedFile ( ) ) ) ; char [ ] cbuf = new char [ _NUM ] ; int count ; while ( ( count = in . read ( cbuf ) ) > _NUM ) sb . append ( cbuf , _NUM , count ) ; in . close ( ) ; } catch ( Exception e ) { log . log ( Level . SEVERE , _STR + e . getMessage ( ) ) ; return ; } setHtmlText ( sb . toString ( ) ) ; }
private List < String > fetchFileCosIdList ( ) throws SOSFailure { final String methodName = _STR ; log . trace ( methodName + _STR ) ; final String FILE_COS_URI = _STR ; List < String > fileCosIdList = new ArrayList < String > ( ) ; try { CoSList cosElemList = _client . queryObject ( FILE_COS_URI , CoSList . class ) ; if ( cosElemList != null && cosElemList . getCosElements ( ) != null ) { for ( CoSElement elem : cosElemList . getCosElements ( ) ) { if ( elem != null ) { fileCosIdList . add ( elem . getId ( ) ) ; } } } log . trace ( methodName + _STR + fileCosIdList ) ; if ( cosElemList != null && fileCosIdList != null ) { log . trace ( methodName + _STR + fileCosIdList . size ( ) + _STR ) ; return fileCosIdList ; } log . trace ( methodName + _STR ) ; return new ArrayList < String > ( ) ; } catch ( NoSuchAlgorithmException e ) { log . error ( methodName + _STR , e ) ; throw new SOSFailure ( e ) ; } catch ( UniformInterfaceException e ) { log . error ( methodName + _STR , e ) ; throw new SOSFailure ( e ) ; } }
public void monitor ( ScalingStateMonitorTask task ) { taskQueue . add ( task ) ; startMonitor ( ) ; }
public void insertNodeInto ( MutableTreeNode newChild , MutableTreeNode parent , int index ) { parent . insert ( newChild , index ) ; int [ ] newIndexs = new int [ _NUM ] ; newIndexs [ _NUM ] = index ; nodesWereInserted ( parent , newIndexs ) ; }
public final double sampleMax ( ) { long max = _max . getAndSet ( _NUM ) ; return _scale * max ; }
private static void writeFile ( File file , List < String > lines ) throws IOException { if ( ! file . exists ( ) ) file . createNewFile ( ) ; FileWriter fw = new FileWriter ( file ) ; BufferedWriter Bw = new BufferedWriter ( fw ) ; PrintWriter pw = new PrintWriter ( Bw ) ; for ( String line : lines ) pw . println ( line ) ; Bw . close ( ) ; fw . close ( ) ; pw . close ( ) ; }
public synchronized boolean verifyChunkAuthTag ( int chunkIdx , byte [ ] chunkAuthTag ) throws FileEncryptionException { if ( ( chunkIdx < _NUM ) || ( chunkAuthTag == null ) || ( chunkAuthTag . length != backEncRandomAccessFile . CHUNK_TLEN ) ) { throw new FileEncryptionException ( _STR ) ; } else { byte [ ] storedAuthTag = atagList . get ( chunkIdx ) ; if ( storedAuthTag == null || ! Arrays . equals ( chunkAuthTag , storedAuthTag ) ) { return _BOOL ; } else { return _BOOL ; } } }
public static String guessMimeTypeFromExtension ( String extension ) { if ( extension == null || extension . isEmpty ( ) ) { return null ; } return extensionToMimeTypeMap . get ( extension ) ; }
public < AnnotationType extends Annotation > void register ( MethodBinder < AnnotationType > methodBinder ) { Set < AnnotatedMethod < AnnotationType > > annotatedMethods = AnnotatedMethods . get ( methodBinder . getAnnotationClass ( ) , annotatedType ) ; if ( ! annotatedMethods . isEmpty ( ) ) { objectBinders . add ( new AnnotatedMethodBinder < > ( methodBinder , annotatedMethods ) ) ; } }
public static String removeNewLineChars ( String s ) { String retString = null ; if ( ( s != null ) && ( s . length ( ) > _NUM ) && ( s . indexOf ( _STR ) != - _NUM ) ) { char [ ] chars = s . toCharArray ( ) ; int len = chars . length ; StringBuffer sb = new StringBuffer ( len ) ; for ( int i = _NUM ; i < len ; i ++ ) { char c = chars [ i ] ; if ( c != _STR ) { sb . append ( c ) ; } } retString = sb . toString ( ) ; } else { retString = s ; } return retString ; }
private Document parseRouteFile ( ) throws Exception { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; factory . setNamespaceAware ( _BOOL ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; return builder . parse ( routeFile ) ; }
public void removeDTEDDirectoryHandler ( DTEDDirectoryHandler handler ) { directories . remove ( handler ) ; }
public default void addFile ( final ContentProvider contentProvider , final String fileName , final EntryInformation entryInformation ) throws IOException { addFile ( contentProvider , fileName , entryInformation , Optional . empty ( ) ) ; }
public synchronized void writeTo ( OutputStream out ) throws IOException { int remaining = count ; for ( byte [ ] buf : buffers ) { int c = Math . min ( buf . length , remaining ) ; out . write ( buf , _NUM , c ) ; remaining -= c ; if ( remaining == _NUM ) { break ; } } }
protected void read_lookahead ( ) throws java . lang . Exception { lookahead = new Symbol [ error_sync_size ( ) ] ; for ( int i = _NUM ; i < error_sync_size ( ) ; i ++ ) { lookahead [ i ] = cur_token ; cur_token = scan ( ) ; } lookahead_pos = _NUM ; }
private Vector < SnmpVarBind > splitFrom ( Vector < SnmpVarBind > original , int limit ) { int max = original . size ( ) ; Vector < SnmpVarBind > result = new Vector < > ( max - limit ) ; int i = limit ; for ( Enumeration < SnmpVarBind > e = original . elements ( ) ; e . hasMoreElements ( ) ; -- i ) { SnmpVarBind var = e . nextElement ( ) ; if ( i > _NUM ) continue ; result . addElement ( new SnmpVarBind ( var . oid , var . value ) ) ; } return result ; }
public static void initUrbanSimZoneWriter ( Config config ) { UrbanSimParameterConfigModuleV3 module = ( UrbanSimParameterConfigModuleV3 ) config . getModule ( UrbanSimParameterConfigModuleV3 . GROUP_NAME ) ; try { log . info ( _STR ) ; parcelWriter = IOUtils . getBufferedWriter ( module . getMATSim4OpusTemp ( ) + FILE_NAME ) ; log . info ( _STR + module . getMATSim4OpusTemp ( ) + FILE_NAME + _STR ) ; parcelWriter . write ( InternalConstants . PARCEL_ID + _STR + ACCESSIBILITY_BY_FREESPEED + _STR + ACCESSIBILITY_BY_CAR + _STR + ACCESSIBILITY_BY_BIKE + _STR + ACCESSIBILITY_BY_WALK + _STR + ACCESSIBILITY_BY_PT ) ; parcelWriter . newLine ( ) ; log . info ( _STR ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
@ Override public void onReset ( ) { closeDialog ( ) ; }
public final void delayTask ( @ NotNull TransactionRunnable task ) { myDelayedTasks . add ( task ) ; }
public TextEditor replaceAll ( String regex , String replacement ) { if ( text . length ( ) > _NUM ) { final String r = replacement ; Pattern p = Pattern . compile ( regex , Pattern . MULTILINE ) ; Matcher m = p . matcher ( text ) ; StringBuffer sb = new StringBuffer ( ) ; while ( m . find ( ) ) { m . appendReplacement ( sb , r ) ; } m . appendTail ( sb ) ; text = new StringBuilder ( sb . toString ( ) ) ; } return this ; }
private static < T > int migrateAll ( Migration < T > migration ) throws Exception { int migrated = _NUM ; for ( T entity : migration . getAllEntities ( ) ) { try { if ( migration . isMigrated ( entity ) ) continue ; } catch ( Exception x ) { LOG . error ( _STR , entity ) ; throw x ; } try { migration . migrate ( entity ) ; } catch ( Exception x ) { LOG . error ( _STR , entity ) ; throw x ; } migrated ++ ; } return migrated ; }
private void captureDifferentString ( String oldString , String newString , Map < String , String > map , String appName ) { Reject . ifNull ( appName ) ; Reject . ifNull ( map ) ; if ( oldString == null ? newString != null : ! oldString . equals ( newString ) ) { map . put ( appName , newString ) ; } }
public void onChildThreadResumeBegin ( ) { _threadCount . incrementAndGet ( ) ; }
@ Override protected void drawXLabels ( List < Double > xLabels , Double [ ] xTextLabelLocations , Canvas canvas , Paint paint , int left , int top , int bottom , double xPixelsPerUnit , double minX , double maxX ) { int length = xLabels . size ( ) ; if ( length > _NUM ) { boolean showLabels = mRenderer . isShowLabels ( ) ; boolean showGridY = mRenderer . isShowGridY ( ) ; DateFormat format = getDateFormat ( xLabels . get ( _NUM ) , xLabels . get ( length - _NUM ) ) ; for ( int i = _NUM ; i < length ; i ++ ) { long label = Math . round ( xLabels . get ( i ) ) ; float xLabel = ( float ) ( left + xPixelsPerUnit * ( label - minX ) ) ; if ( showLabels ) { paint . setColor ( mRenderer . getXLabelsColor ( ) ) ; canvas . drawLine ( xLabel , bottom , xLabel , bottom + mRenderer . getLabelsTextSize ( ) / _NUM , paint ) ; drawText ( canvas , format . format ( new Date ( label ) ) , xLabel , bottom + mRenderer . getLabelsTextSize ( ) * _NUM / _NUM , paint , mRenderer . getXLabelsAngle ( ) ) ; } if ( showGridY ) { paint . setColor ( mRenderer . getGridColor ( ) ) ; canvas . drawLine ( xLabel , bottom , xLabel , top , paint ) ; } } } drawXTextLabels ( xTextLabelLocations , canvas , paint , _BOOL , left , top , bottom , xPixelsPerUnit , minX , maxX ) ; }
public static String encodeToString ( byte [ ] src ) { if ( src == null ) { return null ; } if ( src . length == _NUM ) { return _STR ; } String result ; try { result = new String ( delegate . encode ( src ) , DEFAULT_CHARSET . displayName ( ) ) ; } catch ( UnsupportedEncodingException e ) { throw new IllegalStateException ( e ) ; } return result ; }
public static byte [ ] decode ( String str , int flags ) { return decode ( str . getBytes ( ) , flags ) ; }
public boolean equals ( Object obj ) { if ( this == obj ) { return _BOOL ; } if ( obj instanceof ECFieldF2m ) { ECFieldF2m o = ( ECFieldF2m ) obj ; if ( this . m == o . m ) { if ( this . rp == null ) { if ( o . rp == null ) { return _BOOL ; } } else { return Arrays . equals ( this . ks , o . ks ) ; } } } return _BOOL ; }
public static void chunkTaskSync ( RegionWrapper region , final RunnableVal < int [ ] > task ) { final int p1x = region . minX ; final int p1z = region . minZ ; final int p2x = region . maxX ; final int p2z = region . maxZ ; final int bcx = p1x > > _NUM ; final int bcz = p1z > > _NUM ; final int tcx = p2x > > _NUM ; final int tcz = p2z > > _NUM ; task . value = new int [ _NUM ] ; for ( int x = bcx ; x <= tcx ; x ++ ) { for ( int z = bcz ; z <= tcz ; z ++ ) { task . value [ _NUM ] = x ; task . value [ _NUM ] = z ; task . value [ _NUM ] = task . value [ _NUM ] << _NUM ; task . value [ _NUM ] = task . value [ _NUM ] << _NUM ; task . value [ _NUM ] = task . value [ _NUM ] + _NUM ; task . value [ _NUM ] = task . value [ _NUM ] + _NUM ; task . value [ _NUM ] = _NUM ; if ( task . value [ _NUM ] == bcx ) { task . value [ _NUM ] = p1x ; task . value [ _NUM ] = _NUM ; } if ( task . value [ _NUM ] == tcx ) { task . value [ _NUM ] = p2x ; task . value [ _NUM ] = _NUM ; } if ( task . value [ _NUM ] == bcz ) { task . value [ _NUM ] = p1z ; task . value [ _NUM ] = _NUM ; } if ( task . value [ _NUM ] == tcz ) { task . value [ _NUM ] = p2z ; task . value [ _NUM ] = _NUM ; } task . run ( ) ; } } }
public ElsaSerializerPojo make ( ) { return new ElsaSerializerPojo ( objectStack , singletons , registeredSers , registeredSerHeaders , registeredDeser , unknownClassNotification , new ElsaClassInfoResolver . ArrayBased ( classes . toArray ( new Class [ _NUM ] ) ) ) ; }
private void loadBinary ( InputStream is ) throws IOException { if ( is instanceof FileInputStream ) { FileInputStream fis = ( FileInputStream ) is ; FileChannel fc = fis . getChannel ( ) ; MappedByteBuffer bb = fc . map ( FileChannel . MapMode . READ_ONLY , _NUM , ( int ) fc . size ( ) ) ; bb . load ( ) ; loadBinary ( bb ) ; is . close ( ) ; } else { loadBinary ( new DataInputStream ( is ) ) ; } }
private static boolean isTwoSlotType ( ClassNode type ) { return type == ClassHelper . long_TYPE || type == ClassHelper . double_TYPE ; }
public SpecificationRunnerBuilder sections ( String [ ] paramSections ) { Collections . addAll ( this . sections , paramSections ) ; return this ; }
private void consumeCRLF ( ) throws DecodingException { char next = nextChar ( ) ; if ( next != _STR ) { consumeChar ( _STR ) ; } consumeChar ( _STR ) ; }
private String processLogoutRequest ( LogoutState t , LogoutRequest logoutRequest , SessionManager sessionManager ) throws SamlServiceException { String sessionId = null ; List < SessionIndex > sessionList = logoutRequest . getSessionIndexes ( ) ; Validate . notNull ( sessionList , _STR ) ; Validate . isTrue ( sessionList . size ( ) > _NUM ) ; for ( SessionIndex sessionIndex : sessionList ) { Validate . notNull ( sessionIndex ) ; String participantSession = sessionIndex . getSessionIndex ( ) ; Validate . notNull ( participantSession , _STR ) ; Session session = sessionManager . getByParticipant ( participantSession ) ; if ( session == null ) { throw new SamlServiceException ( _STR ) ; } if ( ! session . containsSessionParticipantUrl ( t . getIssuerValue ( ) ) ) { throw new SamlServiceException ( _STR ) ; } if ( sessionId == null ) { sessionId = session . getId ( ) ; } else { if ( ! sessionId . equals ( session . getId ( ) ) ) { throw new SamlServiceException ( _STR ) ; } } } return sessionId ; }
public boolean equals ( Object o ) { if ( o instanceof CoverageIntVdt ) { CoverageIntVdt civ = ( CoverageIntVdt ) o ; return ( ( attribute == civ . attribute ) && ( value == civ . value ) ) ; } else { return _BOOL ; } }
public void accept ( final Path file ) throws InterruptedException { logger . info ( String . format ( _STR , file ) ) ; permits . acquire ( ) ; executor . execute ( new ConsumerTask ( file ) ) ; }
private void addOptionList ( final List < String > args , final String optName , final List < String > values ) { for ( final String value : values ) { if ( value != null && ! value . isEmpty ( ) ) { args . add ( optName ) ; args . add ( value ) ; } } }
public void testNegPosFirstShorter ( ) { byte aBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; int aSign = - _NUM ; int bSign = _NUM ; byte rBytes [ ] = { - _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . or ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , result . signum ( ) ) ; }
private Activity checkActivity ( ) { Activity activity = mActivity . get ( ) ; if ( activity == null ) { throw new IllegalStateException ( _STR ) ; } return activity ; }
@ Override public synchronized void start ( ) { LOGGER . info ( _STR ) ; timer = new Timer ( _STR ) ; timer . schedule ( this , INITIAL_SCAN_DELAY , SCAN_INTERVAL ) ; running = _BOOL ; }
public boolean isLandingPage ( URL url ) { if ( url . getQuery ( ) != null ) { return _BOOL ; } else { return landingPageSuffix ( url ) != _STR ; } }
protected static void writeRowCountDefinitions ( TableCreator creator , ByteBuffer buffer ) { writeRowCountDefinitions ( creator , buffer , creator . getIndexCount ( ) ) ; }
public void send ( String theString ) { send ( theString . getBytes ( ) ) ; }
public void init ( ) { _tokenMgmtExecutor . scheduleWithFixedDelay ( new ExpiredTokenCleaner ( ) , _NUM , _maxLifeValuesHolder . getMaxTokenIdleTimeInMins ( ) , TimeUnit . MINUTES ) ; _tokenMgmtExecutor . scheduleWithFixedDelay ( new TokenKeysUpdater ( ) , _NUM , FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS , TimeUnit . MINUTES ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return PATH ; case _NUM : return OFFSET_LBA ; default : return null ; } }
public String toString ( ) { return _STR + String . valueOf ( bean ) + _STR ; }
private static String doGetPath ( String filename , int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < _NUM ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < _NUM || prefix >= endIndex ) { return _STR ; } return filename . substring ( prefix , endIndex ) ; }
public Spanned [ ] history ( ) { int i = _NUM ; Spanned [ ] array = new Spanned [ history . size ( ) ] ; for ( String s : history ) { if ( s != null ) { array [ i ] = Html . fromHtml ( s ) ; i ++ ; } } return array ; }
private void sign ( final byte [ ] contentBytes , final ByteArrayOutputStream mimeContent ) throws Exception { String algId = conf . getSignatureAlgorithmId ( ) ; String keyId = conf . getActiveSigningKey ( ) ; log . debug ( _STR + _STR , keyId , algId ) ; String signature = signHelper ( keyId , algId , contentBytes ) ; mimeContent . write ( envelopeHeader . getBytes ( ) ) ; try ( MultipartEncoder encoder = new MultipartEncoder ( mimeContent , envelopeBoundary ) ) { encoder . startPart ( mpMixedContentType ( dataBoundary ) ) ; encoder . write ( contentBytes ) ; String algURI = CryptoUtils . getSignatureAlgorithmURI ( algId ) ; String hashURI = hashCalculator . getAlgoURI ( ) ; Path verificatioCertPath = conf . getCertPath ( keyId ) ; encoder . startPart ( MimeTypes . BINARY , new String [ ] { HEADER_CONTENT_TRANSFER_ENCODING + _STR , HEADER_SIG_ALGO_ID + _STR + algURI , HEADER_VERIFICATION_CERT_HASH + _STR + getVerificationCertHash ( verificatioCertPath ) + _STR + HEADER_HASH_ALGORITHM_ID + _STR + hashURI } ) ; encoder . write ( signature . getBytes ( ) ) ; } log . debug ( _STR , mimeContent . toString ( ) ) ; Files . write ( tempConfPath , mimeContent . toByteArray ( ) ) ; log . debug ( _STR , tempConfPath ) ; }
private boolean nextItemIs ( String match ) throws IOException { int c ; while ( isWhiteSpace ( c = buf . get ( ) ) ) { } for ( int i = _NUM ; i < match . length ( ) ; i ++ ) { if ( i > _NUM ) { c = buf . get ( ) ; } if ( c != match . charAt ( i ) ) { return _BOOL ; } } return _BOOL ; }
public static Object deserializeObject ( final byte [ ] objBytes , final ClassLoader loader ) throws IOException , ClassNotFoundException { ObjectInputStream objIn = null ; try { objIn = new ClassLoaderObjectInputStream ( new ByteArrayInputStream ( objBytes ) , loader ) ; return objIn . readObject ( ) ; } finally { close ( objIn ) ; } }
public IntervalImpl ( int serialNum , long startIntervalDateTime , double coverageFactor , FramingFlowType intervalDataType , ISource source , IIntervalClassification intervalClassification , Version adeVersion ) throws AdeInternalException { a_adeVersion = adeVersion ; if ( startIntervalDateTime < _NUM ) { throw new IllegalArgumentException ( String . format ( _STR + _STR + _STR + _STR , serialNum , startIntervalDateTime , coverageFactor , intervalDataType , source , intervalClassification , adeVersion ) ) ; } m_startIntervalTime = startIntervalDateTime ; m_framingFlowType = intervalDataType ; m_serialNum = serialNum ; m_intervalClassification = intervalClassification ; if ( m_intervalClassification == null ) { m_intervalClassification = IntervalClassificationEnum . REGULAR ; } m_messageSummaryMap = new TreeMap < Integer , IMessageSummary > ( ) ; m_endIntervalTime = m_startIntervalTime + m_framingFlowType . getDuration ( ) ; m_source = source ; if ( coverageFactor <= _NUM || coverageFactor > _NUM ) { throw new AdeInternalException ( _STR + coverageFactor ) ; } m_coverageFactor = coverageFactor ; }
public static boolean isTrue ( Map < String , Object > dict , String key ) { return isTrue ( dict , key , _BOOL ) ; }
protected ShoppingCartItem ( ) { }
public OutputStream bindStream ( OutputStream output ) { OutputStream stream = m_streams . get ( ) ; m_streams . set ( output ) ; return stream ; }
private void initMapLayer ( ) { float zoom = getInitZoom ( mapView . getWidth ( ) , mapView . getHeight ( ) , image . getWidth ( ) , image . getHeight ( ) ) ; Log . i ( TAG , Float . toString ( zoom ) ) ; mapView . setCurrentZoom ( zoom , _NUM , _NUM ) ; float width = mapView . getWidth ( ) - zoom * image . getWidth ( ) ; float height = mapView . getHeight ( ) - zoom * image . getHeight ( ) ; mapView . translate ( width / _NUM , height / _NUM ) ; }
public static double sampleSkew ( int size , double moment3 , double sampleVariance ) { int n = size ; double s = Math . sqrt ( sampleVariance ) ; double m3 = moment3 * n ; return n * m3 / ( ( n - _NUM ) * ( n - _NUM ) * s * s * s ) ; }
public static void evolve ( Permutation p1 , Permutation p2 ) { int n = p1 . size ( ) ; if ( n != p2 . size ( ) ) { throw new FrameworkException ( _STR ) ; } int cuttingPoint1 = PRNG . nextInt ( n ) ; int cuttingPoint2 = PRNG . nextInt ( n - _NUM ) ; if ( cuttingPoint1 == cuttingPoint2 ) { cuttingPoint2 = n - _NUM ; } else if ( cuttingPoint1 > cuttingPoint2 ) { int swap = cuttingPoint1 ; cuttingPoint1 = cuttingPoint2 ; cuttingPoint2 = swap ; } int [ ] parent1 = p1 . toArray ( ) ; int [ ] parent2 = p2 . toArray ( ) ; int [ ] offspring1 = new int [ n ] ; int [ ] offspring2 = new int [ n ] ; int [ ] replacement1 = new int [ n ] ; int [ ] replacement2 = new int [ n ] ; Arrays . fill ( replacement1 , - _NUM ) ; Arrays . fill ( replacement2 , - _NUM ) ; for ( int i = cuttingPoint1 ; i <= cuttingPoint2 ; i ++ ) { offspring1 [ i ] = parent2 [ i ] ; offspring2 [ i ] = parent1 [ i ] ; replacement1 [ parent2 [ i ] ] = parent1 [ i ] ; replacement2 [ parent1 [ i ] ] = parent2 [ i ] ; } for ( int i = _NUM ; i < n ; i ++ ) { if ( ( i < cuttingPoint1 ) || ( i > cuttingPoint2 ) ) { int n1 = parent1 [ i ] ; int m1 = replacement1 [ n1 ] ; int n2 = parent2 [ i ] ; int m2 = replacement2 [ n2 ] ; while ( m1 != - _NUM ) { n1 = m1 ; m1 = replacement1 [ m1 ] ; } while ( m2 != - _NUM ) { n2 = m2 ; m2 = replacement2 [ m2 ] ; } offspring1 [ i ] = n1 ; offspring2 [ i ] = n2 ; } } p1 . fromArray ( offspring1 ) ; p2 . fromArray ( offspring2 ) ; }
private String extractSpan ( String spans , int start , int end ) throws IndexOutOfBoundsException { int offset = getFirstSpanOffset ( spans ) ; assert ( start >= offset ) ; assert ( end >= offset ) ; spans += HTML_OPEN_SPAN ; int substart = getSpanPos ( spans , start - offset ) ; int subend = getSpanPos ( spans , end - offset + _NUM ) ; return spans . substring ( substart , subend ) ; }
public void finished ( long chainLength ) { currentState = chainLength ; if ( loggers != null ) { for ( Logger logger : loggers ) { logger . log ( currentState ) ; logger . stopLogging ( ) ; } } if ( showOperatorAnalysis ) { showOperatorAnalysis ( System . out ) ; } if ( operatorAnalysisFile != null ) { try { PrintStream out = new PrintStream ( new FileOutputStream ( operatorAnalysisFile ) ) ; showOperatorAnalysis ( out ) ; out . flush ( ) ; out . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } }
public boolean hasDelay ( ) { return delay != - _NUM ; }
void pushSpaceHandling ( Attributes attrs ) throws org . xml . sax . SAXParseException { String value = attrs . getValue ( _STR ) ; if ( null == value ) { m_spacePreserveStack . push ( m_spacePreserveStack . peekOrFalse ( ) ) ; } else if ( value . equals ( _STR ) ) { m_spacePreserveStack . push ( _BOOL ) ; } else if ( value . equals ( _STR ) ) { m_spacePreserveStack . push ( _BOOL ) ; } else { SAXSourceLocator locator = getLocator ( ) ; ErrorListener handler = m_stylesheetProcessor . getErrorListener ( ) ; try { handler . error ( new TransformerException ( XSLMessages . createMessage ( XSLTErrorResources . ER_ILLEGAL_XMLSPACE_VALUE , null ) , locator ) ) ; } catch ( TransformerException te ) { throw new org . xml . sax . SAXParseException ( te . getMessage ( ) , locator , te ) ; } m_spacePreserveStack . push ( m_spacePreserveStack . peek ( ) ) ; } }
@ SuppressWarnings ( _STR ) public void registerDefaultDeviceTypes ( ) { final HashMap < String , String > devicesList = DefaultPlatform . getDeviceServiceMap ( ) ; for ( HashMap . Entry < String , String > entry : devicesList . entrySet ( ) ) { String key = entry . getKey ( ) ; String value = entry . getValue ( ) ; try { registerDeviceService ( ( Class < DeviceService > ) Class . forName ( key ) , ( Class < DiscoveryProvider > ) Class . forName ( value ) ) ; } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } } }
protected void positiveClose ( ) { freeContent ( ) ; }
public InputStreamReader ( java . io . InputStream is , java . lang . String enc ) throws java . io . UnsupportedEncodingException { internal = is ; this . enc = enc . intern ( ) ; }
public int serverDelivery ( Object message , Object consumer , int deliveryCount ) throws Exception { ProtonServerSenderContext protonSender = serverSenders . get ( consumer ) ; if ( protonSender != null ) { return protonSender . deliverMessage ( message , deliveryCount ) ; } return _NUM ; }
public static String decode ( AbstractMessage msg , Boolean ext , int header ) { if ( ext == _BOOL ) { return decode ( msg ) ; } return _STR + header ; }
private Instance votedReclassifyExample ( Instance example ) throws Exception { int classVotes [ ] = new int [ getNumClasses ( ) ] ; for ( int i = _NUM ; i < classVotes . length ; i ++ ) { classVotes [ i ] = _NUM ; } for ( Enumeration < RuleList > e = new WekaEnumeration < RuleList > ( m_DecisionList ) ; e . hasMoreElements ( ) ; ) { RuleList rl = e . nextElement ( ) ; int classValue = ( int ) rl . classifyInstance ( example ) ; if ( classValue >= _NUM ) { classVotes [ classValue ] ++ ; } } int maxVote = _NUM ; int vote = - _NUM ; for ( int i = _NUM ; i < classVotes . length ; i ++ ) { if ( classVotes [ i ] > maxVote ) { maxVote = classVotes [ i ] ; vote = i ; } } if ( vote >= _NUM ) { example . setClassValue ( vote ) ; } else { throw new Exception ( _STR ) ; } return example ; }
private boolean journalRebuildRequired ( ) { final int redundantOpCompactThreshold = _NUM ; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries . size ( ) ; }
public final int hashCode ( ) { return System . identityHashCode ( this ) ; }
public DTMAxisIterator cloneIterator ( ) { _isRestartable = _BOOL ; try { final PrecedingIterator clone = ( PrecedingIterator ) super . clone ( ) ; final int [ ] stackCopy = new int [ _stack . length ] ; System . arraycopy ( _stack , _NUM , stackCopy , _NUM , _stack . length ) ; clone . _stack = stackCopy ; return clone ; } catch ( CloneNotSupportedException e ) { throw new DTMException ( XMLMessages . createXMLMessage ( XMLErrorResources . ER_ITERATOR_CLONE_NOT_SUPPORTED , null ) ) ; } }
private BigQueryIO ( ) { }
private boolean keyChainContainsPrivateKey ( Collection < ECKey > keyChain , ECKey keyToAdd ) { if ( keyChain == null || keyToAdd == null ) { return _BOOL ; } else { for ( ECKey loopKey : keyChain ) { if ( Arrays . equals ( keyToAdd . getPrivKeyBytes ( ) , loopKey . getPrivKeyBytes ( ) ) ) { return _BOOL ; } } return _BOOL ; } }
public ScriptBuilder data ( byte [ ] data ) { if ( data . length == _NUM ) return smallNum ( _NUM ) ; else return data ( chunks . size ( ) , data ) ; }
public RotationMatrixBuilder withThetas ( double theta ) { for ( Plane plane : planes ) { plane . setTheta ( theta ) ; } return this ; }
private void writeUserRegistry ( LocalContainer container , File configDir , Map < String , String > users , Map < String , List < String > > groups ) throws IOException { File usersXML = new File ( configDir , _STR ) ; PrintStream writer = ServerConfigUtils . open ( usersXML ) ; writer . println ( _STR ) ; for ( Map . Entry < String , String > user : users . entrySet ( ) ) { writer . print ( _STR ) ; writer . print ( user . getKey ( ) ) ; writer . print ( _STR ) ; writer . print ( user . getValue ( ) ) ; writer . println ( _STR ) ; } for ( Map . Entry < String , List < String > > group : groups . entrySet ( ) ) { writer . print ( _STR ) ; writer . print ( group . getKey ( ) ) ; writer . println ( _STR ) ; for ( String member : group . getValue ( ) ) { writer . print ( _STR ) ; writer . print ( member ) ; writer . println ( _STR ) ; } writer . println ( _STR ) ; } writer . println ( _STR ) ; ServerConfigUtils . close ( writer ) ; }
public static String valueOf ( double value ) { return Double . toString ( value ) ; }
private static void decodeHanziSegment ( BitSource bits , StringBuilder result , int count ) throws FormatException { if ( count * _NUM > bits . available ( ) ) { throw FormatException . getFormatInstance ( ) ; } byte [ ] buffer = new byte [ _NUM * count ] ; int offset = _NUM ; while ( count > _NUM ) { int twoBytes = bits . readBits ( _NUM ) ; int assembledTwoBytes = ( ( twoBytes / _NUM ) << _NUM ) | ( twoBytes % _NUM ) ; if ( assembledTwoBytes < _NUM ) { assembledTwoBytes += _NUM ; } else { assembledTwoBytes += _NUM ; } buffer [ offset ] = ( byte ) ( ( assembledTwoBytes > > _NUM ) & _NUM ) ; buffer [ offset + _NUM ] = ( byte ) ( assembledTwoBytes & _NUM ) ; offset += _NUM ; count -- ; } try { result . append ( new String ( buffer , StringUtils . GB2312 ) ) ; } catch ( UnsupportedEncodingException ignored ) { throw FormatException . getFormatInstance ( ) ; } }
@ GenIgnore static Record createRecord ( String name , String address , Class itf , JsonObject metadata ) { return createRecord ( name , address , itf . getName ( ) , metadata ) ; }
public StopwatchCPU ( ) { threadTimer = ManagementFactory . getThreadMXBean ( ) ; start = threadTimer . getCurrentThreadCpuTime ( ) ; }
public synchronized byte [ ] lookupAudio ( String inputtype , String locale , String voice , String outputparams , String style , String effects , String inputtext ) throws SQLException { if ( inputtype == null || locale == null || voice == null || inputtext == null ) { throw new NullPointerException ( _STR ) ; } byte [ ] audio = null ; String query = _STR + inputtype + _STR + locale + _STR + voice + _STR + outputparams + _STR + style + _STR + effects + _STR ; PreparedStatement st = connection . prepareStatement ( query ) ; st . setString ( _NUM , inputtext ) ; ResultSet results = st . executeQuery ( ) ; if ( results . next ( ) ) { audio = results . getBytes ( _NUM ) ; } return audio ; }
public void addCondition ( final Condition condition ) { conditions . add ( condition ) ; condition . setId ( conditionIdCounter ++ ) ; }
public static byte [ ] readBytesFromByteBuffer ( ByteBuffer byteBuffer ) { byte [ ] buffer = new byte [ byteBuffer . remaining ( ) ] ; byteBuffer . get ( buffer ) ; return buffer ; }
public void findPackageAndClass ( ) throws IOException { packageName = null ; className = null ; LineNumberReader reader = new LineNumberReader ( new FileReader ( inputFile ) ) ; try { while ( className == null || packageName == null ) { String line = reader . readLine ( ) ; if ( line == null ) break ; if ( packageName == null ) { Matcher matcher = PACKAGE_PATTERN . matcher ( line ) ; if ( matcher . find ( ) ) { packageName = matcher . group ( _NUM ) ; } } if ( className == null ) { Matcher matcher = CLASS_PATTERN . matcher ( line ) ; if ( matcher . find ( ) ) { className = matcher . group ( _NUM ) ; } } } if ( className == null ) { className = _STR ; } } finally { reader . close ( ) ; } }
public static void log ( final String msg , final Throwable t ) { if ( DEBUG ) { log ( msg ) ; t . printStackTrace ( System . out ) ; } }
public static Set < URI > fetchRPTargetVirtualPools ( DbClient dbClient ) { Set < URI > rpProtectedTargetVPools = new HashSet < URI > ( ) ; try { List < URI > vpoolProtectionSettingsURIs = dbClient . queryByType ( VpoolProtectionVarraySettings . class , _BOOL ) ; Iterator < VpoolProtectionVarraySettings > vPoolProtectionSettingsItr = dbClient . queryIterativeObjects ( VpoolProtectionVarraySettings . class , vpoolProtectionSettingsURIs , _BOOL ) ; while ( vPoolProtectionSettingsItr . hasNext ( ) ) { VpoolProtectionVarraySettings rSetting = vPoolProtectionSettingsItr . next ( ) ; if ( null != rSetting && ! NullColumnValueGetter . isNullURI ( rSetting . getVirtualPool ( ) ) ) { rpProtectedTargetVPools . add ( rSetting . getVirtualPool ( ) ) ; } } } catch ( Exception ex ) { _log . error ( _STR , ex ) ; } return rpProtectedTargetVPools ; }
public NSData ( File file ) throws IOException { bytes = new byte [ ( int ) file . length ( ) ] ; RandomAccessFile raf = new RandomAccessFile ( file , _STR ) ; raf . read ( bytes ) ; raf . close ( ) ; }
public int cardinality ( ) { int sum = _NUM ; for ( long l : this . data ) sum += Long . bitCount ( l ) ; return sum ; }
private String deEscapeLiteral ( String lit ) { return lit . replaceAll ( _STR , _STR ) ; }
private static URI cookieUri ( URI uri , HttpCookie cookie ) { URI cookieUri = uri ; if ( cookie . getDomain ( ) != null ) { String domain = cookie . getDomain ( ) ; if ( domain . charAt ( _NUM ) == _STR ) { domain = domain . substring ( _NUM ) ; } try { cookieUri = new URI ( uri . getScheme ( ) == null ? _STR : uri . getScheme ( ) , domain , cookie . getPath ( ) == null ? _STR : cookie . getPath ( ) , null ) ; } catch ( URISyntaxException e ) { Log . w ( TAG , e ) ; } } return cookieUri ; }
public static void i ( String msg , Object ... args ) { if ( ! allowI ) return ; StackTraceElement caller = getCallerStackTraceElement ( ) ; String tag = generateTag ( caller ) ; if ( sLevel > LEVEL_INFO ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . i ( tag , msg ) ; }
public static < V > boolean addListNotNullValue ( List < V > sourceList , V value ) { return ( sourceList != null && value != null ) ? sourceList . add ( value ) : _BOOL ; }
public DNewKeyStoreType ( JFrame parent ) { super ( parent , Dialog . ModalityType . DOCUMENT_MODAL ) ; setTitle ( res . getString ( _STR ) ) ; initComponents ( ) ; }
protected void sprint ( long longField ) { sprint ( String . valueOf ( longField ) ) ; }
private String substituteSubString ( String input , String find , String replace ) { int find_length = find . length ( ) ; int replace_length = replace . length ( ) ; StringBuilder output = new StringBuilder ( input ) ; int index = input . indexOf ( find ) ; int outputOffset = _NUM ; while ( index > - _NUM ) { output . replace ( index + outputOffset , index + outputOffset + find_length , replace ) ; outputOffset = outputOffset + ( replace_length - find_length ) ; index = input . indexOf ( find , index + find_length ) ; } return output . toString ( ) ; }
private int insertTestDataLocalDTTypes ( PreparedStatement pstmt ) throws Exception { pstmt . setInt ( _NUM , _NUM ) ; pstmt . setDate ( _NUM , testSqlDate ) ; pstmt . setTime ( _NUM , testSqlTime ) ; pstmt . setTimestamp ( _NUM , testSqlTimeStamp ) ; pstmt . setTimestamp ( _NUM , testSqlTimeStamp ) ; assertEquals ( _NUM , pstmt . executeUpdate ( ) ) ; pstmt . setInt ( _NUM , _NUM ) ; pstmt . setObject ( _NUM , testLocalDate ) ; pstmt . setObject ( _NUM , testLocalTime ) ; pstmt . setObject ( _NUM , testLocalDateTime ) ; pstmt . setObject ( _NUM , testLocalDateTime ) ; assertEquals ( _NUM , pstmt . executeUpdate ( ) ) ; pstmt . setInt ( _NUM , _NUM ) ; pstmt . setObject ( _NUM , testLocalDate , JDBCType . DATE ) ; pstmt . setObject ( _NUM , testLocalTime , JDBCType . TIME ) ; pstmt . setObject ( _NUM , testLocalDateTime , JDBCType . TIMESTAMP ) ; pstmt . setObject ( _NUM , testLocalDateTime , JDBCType . TIMESTAMP ) ; assertEquals ( _NUM , pstmt . executeUpdate ( ) ) ; pstmt . setInt ( _NUM , _NUM ) ; pstmt . setObject ( _NUM , testLocalDate , JDBCType . DATE , _NUM ) ; pstmt . setObject ( _NUM , testLocalTime , JDBCType . TIME , _NUM ) ; pstmt . setObject ( _NUM , testLocalDateTime , JDBCType . TIMESTAMP , _NUM ) ; pstmt . setObject ( _NUM , testLocalDateTime , JDBCType . TIMESTAMP , _NUM ) ; assertEquals ( _NUM , pstmt . executeUpdate ( ) ) ; pstmt . setInt ( _NUM , _NUM ) ; pstmt . setObject ( _NUM , testLocalDate , JDBCType . VARCHAR ) ; pstmt . setObject ( _NUM , testLocalTime , JDBCType . VARCHAR ) ; pstmt . setObject ( _NUM , testLocalDateTime , JDBCType . VARCHAR ) ; pstmt . setObject ( _NUM , testLocalDateTime , JDBCType . VARCHAR ) ; assertEquals ( _NUM , pstmt . executeUpdate ( ) ) ; pstmt . setInt ( _NUM , _NUM ) ; pstmt . setObject ( _NUM , testLocalDate , JDBCType . VARCHAR , _NUM ) ; pstmt . setObject ( _NUM , testLocalTime , JDBCType . VARCHAR , _NUM ) ; pstmt . setObject ( _NUM , testLocalDateTime , JDBCType . VARCHAR , _NUM ) ; pstmt . setObject ( _NUM , testLocalDateTime , JDBCType . VARCHAR , _NUM ) ; assertEquals ( _NUM , pstmt . executeUpdate ( ) ) ; if ( pstmt instanceof CallableStatement ) { CallableStatement cstmt = ( CallableStatement ) pstmt ; cstmt . setInt ( _STR , _NUM ) ; cstmt . setDate ( _STR , testSqlDate ) ; cstmt . setTime ( _STR , testSqlTime ) ; cstmt . setTimestamp ( _STR , testSqlTimeStamp ) ; cstmt . setTimestamp ( _STR , testSqlTimeStamp ) ; assertEquals ( _NUM , cstmt . executeUpdate ( ) ) ; cstmt . setInt ( _STR , _NUM ) ; cstmt . setObject ( _STR , testLocalDate ) ; cstmt . setObject ( _STR , testLocalTime ) ; cstmt . setObject ( _STR , testLocalDateTime ) ; cstmt . setObject ( _STR , testLocalDateTime ) ; assertEquals ( _NUM , cstmt . executeUpdate ( ) ) ; cstmt . setInt ( _STR , _NUM ) ; cstmt . setObject ( _STR , testLocalDate , JDBCType . DATE ) ; cstmt . setObject ( _STR , testLocalTime , JDBCType . TIME ) ; cstmt . setObject ( _STR , testLocalDateTime , JDBCType . TIMESTAMP ) ; cstmt . setObject ( _STR , testLocalDateTime , JDBCType . TIMESTAMP ) ; assertEquals ( _NUM , cstmt . executeUpdate ( ) ) ; cstmt . setInt ( _STR , _NUM ) ; cstmt . setObject ( _STR , testLocalDate , JDBCType . DATE , _NUM ) ; cstmt . setObject ( _STR , testLocalTime , JDBCType . TIME , _NUM ) ; cstmt . setObject ( _STR , testLocalDateTime , JDBCType . TIMESTAMP , _NUM ) ; cstmt . setObject ( _STR , testLocalDateTime , JDBCType . TIMESTAMP , _NUM ) ; assertEquals ( _NUM , cstmt . executeUpdate ( ) ) ; cstmt . setInt ( _STR , _NUM ) ; cstmt . setObject ( _STR , testLocalDate , JDBCType . VARCHAR ) ; cstmt . setObject ( _STR , testLocalTime , JDBCType . VARCHAR ) ; cstmt . setObject ( _STR , testLocalDateTime , JDBCType . VARCHAR ) ; cstmt . setObject ( _STR , testLocalDateTime , JDBCType . VARCHAR ) ; assertEquals ( _NUM , cstmt . executeUpdate ( ) ) ; cstmt . setInt ( _STR , _NUM ) ; cstmt . setObject ( _STR , testLocalDate , JDBCType . VARCHAR , _NUM ) ; cstmt . setObject ( _STR , testLocalTime , JDBCType . VARCHAR , _NUM ) ; cstmt . setObject ( _STR , testLocalDateTime , JDBCType . VARCHAR , _NUM ) ; cstmt . setObject ( _STR , testLocalDateTime , JDBCType . VARCHAR , _NUM ) ; assertEquals ( _NUM , cstmt . executeUpdate ( ) ) ; return _NUM ; } return _NUM ; }
public void removeListener ( final L listener ) { Validate . notNull ( listener , _STR ) ; listeners . remove ( listener ) ; }
public void run ( ) { start ( ) ; try { while ( _BOOL ) { Thread . sleep ( interval ) ; processConfigMessages ( ) ; } } catch ( InterruptedException e ) { e . printStackTrace ( ) ; log . warn ( _STR ) ; } finally { log . info ( _STR ) ; stop ( ) ; } }
private int clampMag ( int value , int absMin , int absMax ) { final int absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
private static DecoderResult createDecoderResultFromAmbiguousValues ( int ecLevel , int [ ] codewords , int [ ] erasureArray , int [ ] ambiguousIndexes , int [ ] [ ] ambiguousIndexValues ) throws FormatException , ChecksumException { int [ ] ambiguousIndexCount = new int [ ambiguousIndexes . length ] ; int tries = _NUM ; while ( tries -- > _NUM ) { for ( int i = _NUM ; i < ambiguousIndexCount . length ; i ++ ) { codewords [ ambiguousIndexes [ i ] ] = ambiguousIndexValues [ i ] [ ambiguousIndexCount [ i ] ] ; } try { return decodeCodewords ( codewords , ecLevel , erasureArray ) ; } catch ( ChecksumException ignored ) { } if ( ambiguousIndexCount . length == _NUM ) { throw ChecksumException . getChecksumInstance ( ) ; } for ( int i = _NUM ; i < ambiguousIndexCount . length ; i ++ ) { if ( ambiguousIndexCount [ i ] < ambiguousIndexValues [ i ] . length - _NUM ) { ambiguousIndexCount [ i ] ++ ; break ; } else { ambiguousIndexCount [ i ] = _NUM ; if ( i == ambiguousIndexCount . length - _NUM ) { throw ChecksumException . getChecksumInstance ( ) ; } } } } throw ChecksumException . getChecksumInstance ( ) ; }
private void readObject ( java . io . ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; init ( getName ( ) , getMask ( actions ) ) ; }
public int predBlockIndexForSourcesIndex ( int sourcesIndex ) { return operands . get ( sourcesIndex ) . blockIndex ; }
public LockableFileWriter ( File file , Charset encoding , boolean append , String lockDir ) throws IOException { super ( ) ; file = file . getAbsoluteFile ( ) ; if ( file . getParentFile ( ) != null ) { FileUtils . forceMkdir ( file . getParentFile ( ) ) ; } if ( file . isDirectory ( ) ) { throw new IOException ( _STR ) ; } if ( lockDir == null ) { lockDir = System . getProperty ( _STR ) ; } File lockDirFile = new File ( lockDir ) ; FileUtils . forceMkdir ( lockDirFile ) ; testLockDir ( lockDirFile ) ; lockFile = new File ( lockDirFile , file . getName ( ) + LCK ) ; createLock ( ) ; out = initWriter ( file , encoding , append ) ; }
void appendProgramDescription ( final WrappingStringBuilder wb ) { if ( ! mProgramDescription . equals ( _STR ) ) { wb . append ( LS ) ; wb . setWrapIndent ( _NUM ) ; wb . wrapTextWithNewLines ( mProgramDescription ) ; } }
public static byte [ ] decode ( String s ) throws java . io . IOException { return decode ( s , NO_OPTIONS ) ; }
@ SuppressWarnings ( _STR ) private static final URL toURL ( String location , boolean file ) { if ( file ) { File f = new File ( location ) ; if ( f . exists ( ) ) { try { return f . toURL ( ) ; } catch ( MalformedURLException murl ) { return null ; } } else { return null ; } } else { return getURL ( location ) ; } }
protected Object parseValue ( String string ) { int openParen = string . indexOf ( _STR ) ; String type = string . substring ( _NUM , openParen ) ; String value = string . substring ( openParen + _NUM , string . length ( ) - _NUM ) ; if ( type . equals ( _STR ) ) { return value ; } else if ( type . equals ( _STR ) ) { return new Float ( Float . parseFloat ( value ) ) ; } else if ( type . equals ( _STR ) ) { return new Integer ( Integer . parseInt ( value ) ) ; } else if ( type . equals ( _STR ) ) { StringTokenizer tok = new StringTokenizer ( value , _STR ) ; int size = tok . countTokens ( ) ; int [ ] values = new int [ size ] ; for ( int i = _NUM ; i < size ; i ++ ) { float fval = Float . parseFloat ( tok . nextToken ( ) ) ; values [ i ] = Math . round ( fval ) ; } return values ; } else { throw new Error ( _STR + type ) ; } }
public static String toUpperCase ( String string ) { boolean changed = _BOOL ; char [ ] chars = string . toCharArray ( ) ; for ( int i = _NUM ; i != chars . length ; i ++ ) { char ch = chars [ i ] ; if ( _STR <= ch && _STR >= ch ) { changed = _BOOL ; chars [ i ] = ( char ) ( ch - _STR + _STR ) ; } } if ( changed ) { return new String ( chars ) ; } return string ; }
public void writeData ( DataOutput dout ) throws IOException { dout . write ( getMessage ( ) ) ; }
@ Override public void update ( List < EnvVar > dataList ) { envVarList . clear ( ) ; if ( dataList == null ) { for ( EnvVar envVar : builtInEnvVarMap . values ( ) ) { envVarList . add ( envVar ) ; } } else { for ( EnvVar envVar : dataList ) { if ( builtInEnvVarMap . containsKey ( envVar . getName ( ) ) ) { envVarList . add ( new EnvVar ( envVar , _BOOL ) ) ; } else { envVarList . add ( new EnvVar ( envVar , _BOOL ) ) ; } } } setEnvironmentVariableValues ( ) ; }
public void makeClass ( String str , boolean caseless ) { for ( int i = _NUM ; i < str . length ( ) ; i ++ ) makeClass ( str . charAt ( i ) , caseless ) ; }
protected void notifyTimestampsToGateways ( EntryEventImpl event ) { VersionTagHolder updateTimeStampEvent = new VersionTagHolder ( event . getVersionTag ( ) ) ; updateTimeStampEvent . setOperation ( Operation . UPDATE_VERSION_STAMP ) ; updateTimeStampEvent . setKeyInfo ( event . getKeyInfo ( ) ) ; updateTimeStampEvent . setGenerateCallbacks ( _BOOL ) ; updateTimeStampEvent . distributedMember = event . getDistributedMember ( ) ; updateTimeStampEvent . setNewEventId ( getSystem ( ) ) ; if ( event . getRegion ( ) instanceof BucketRegion ) { BucketRegion br = ( BucketRegion ) event . getRegion ( ) ; PartitionedRegion pr = br . getPartitionedRegion ( ) ; updateTimeStampEvent . setRegion ( pr ) ; if ( pr . isParallelWanEnabled ( ) ) { br . handleWANEvent ( updateTimeStampEvent ) ; } if ( pr . isInitialized ( ) ) { pr . notifyGatewaySender ( EnumListenerEvent . TIMESTAMP_UPDATE , updateTimeStampEvent ) ; } } else { updateTimeStampEvent . setRegion ( event . getRegion ( ) ) ; notifyGatewaySender ( EnumListenerEvent . TIMESTAMP_UPDATE , updateTimeStampEvent ) ; } }
public Token nextRegex ( Pattern pattern ) { if ( ! hasNextRegex ( pattern ) ) throw new IllegalStateException ( _STR ) ; Matcher matcher = anyMentionPattern . matcher ( remaining ) ; if ( ! matcher . find ( ) ) throw new IllegalStateException ( _STR ) ; final int start = currentPosition + matcher . start ( ) ; final int end = currentPosition + matcher . end ( ) ; stepTo ( end ) ; return new Token ( this , start , end ) ; }
public boolean removeNode ( ServiceNode node ) { try { return nodes . remove ( node ) ; } catch ( Exception e ) { return _BOOL ; } }
public String asString ( ) throws IOException { long len = getContentLength ( ) ; ByteArrayOutputStream buf ; if ( _NUM < len ) { buf = new ByteArrayOutputStream ( ( int ) len ) ; } else { buf = new ByteArrayOutputStream ( ) ; } writeTo ( buf ) ; return decode ( buf . toByteArray ( ) , getCharacterEncoding ( ) ) ; }
public static void init ( Context context ) { if ( cameraManager == null ) { cameraManager = new CameraManager ( context ) ; } }
public void addContentItem ( ContentItem contentItem ) { if ( contentItems == null ) { contentItems = new ArrayList < ContentItem > ( ) ; } contentItems . add ( contentItem ) ; }
public void execute ( ) throws IOException { String key = _STR + ( System . currentTimeMillis ( ) / _NUM ) ; String b64Key = Base64 . encode ( key ) ; sendHandshakeRequest ( b64Key ) ; receiveHandshakeResponse ( b64Key ) ; }
public void calculateMin ( double min ) { if ( this . min == - _NUM ) { this . min = min ; } else { this . min = Math . min ( this . min , min ) ; } }
private void emitUntil ( @ Nonnegative int taskCountAllowed ) throws IOException { try { while ( emitQueue . size ( ) > taskCountAllowed ) { Future < byte [ ] > future = emitQueue . remove ( ) ; byte [ ] toWrite = future . get ( ) ; blockSizes . add ( toWrite . length ) ; out . write ( toWrite ) ; } tryEmit ( ) ; } catch ( ExecutionException e ) { throw new IOException ( e ) ; } catch ( InterruptedException e ) { throw new InterruptedIOException ( ) ; } }
void xrot ( double theta ) { theta *= ( pi / _NUM ) ; double ct = Math . cos ( theta ) ; double st = Math . sin ( theta ) ; float Nyx = ( float ) ( yx * ct + zx * st ) ; float Nyy = ( float ) ( yy * ct + zy * st ) ; float Nyz = ( float ) ( yz * ct + zz * st ) ; float Nyo = ( float ) ( yo * ct + zo * st ) ; float Nzx = ( float ) ( zx * ct - yx * st ) ; float Nzy = ( float ) ( zy * ct - yy * st ) ; float Nzz = ( float ) ( zz * ct - yz * st ) ; float Nzo = ( float ) ( zo * ct - yo * st ) ; yo = Nyo ; yx = Nyx ; yy = Nyy ; yz = Nyz ; zo = Nzo ; zx = Nzx ; zy = Nzy ; zz = Nzz ; }
public void testAuditCompleted ( ) { }
public static void scaleRectAboutCenter ( Rect r , float scale ) { if ( scale != _NUM ) { int cx = r . centerX ( ) ; int cy = r . centerY ( ) ; r . offset ( - cx , - cy ) ; r . left = ( int ) ( r . left * scale + _NUM ) ; r . top = ( int ) ( r . top * scale + _NUM ) ; r . right = ( int ) ( r . right * scale + _NUM ) ; r . bottom = ( int ) ( r . bottom * scale + _NUM ) ; r . offset ( cx , cy ) ; } }
private static CharHandler parseUnprintableExtCodes ( String [ ] codeStrings ) { if ( codeStrings . length != _NUM ) { throw new IllegalStateException ( _STR + Arrays . asList ( codeStrings ) ) ; } byte [ ] bytes = codesToBytes ( codeStrings [ _NUM ] , _BOOL ) ; if ( bytes . length != _NUM ) { throw new IllegalStateException ( _STR + Arrays . asList ( codeStrings ) ) ; } return new UnprintableExtCharHandler ( bytes [ _NUM ] ) ; }
private int measureHeight ( int measureSpec ) { float result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = mPaintSelected . getStrokeWidth ( ) + getPaddingTop ( ) + getPaddingBottom ( ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return ( int ) Math . ceil ( result ) ; }
public static boolean isNull ( URI id ) { return ( id == null ) || NULL_URI . equals ( id ) ; }
public void updatePendingList ( ) { while ( mPendingList . size ( ) > _NUM && activeListHasRoom ( ) ) { DownloadInfoRunnable pending = mPendingList . get ( _NUM ) ; pending . changeStatusState ( new ActiveState ( pending ) ) ; } }
@ SuppressWarnings ( _STR ) public static float valueRangeLimit ( float value , float startValue , float endValue ) { if ( value < Math . min ( startValue , endValue ) ) return Math . min ( startValue , endValue ) ; if ( value > Math . max ( startValue , endValue ) ) return Math . max ( startValue , endValue ) ; return value ; }
protected void createTitle ( String title ) { String newTitle ; newTitle = _STR + new Version ( ) ; if ( title . length ( ) != _NUM ) { newTitle += _STR + title ; } setTitle ( newTitle ) ; }
public static boolean isConnected ( NetType netType , NetworkInfo networkInfo ) { if ( netType == NetType . Any && networkInfo != null && isConnected ( networkInfo ) ) return _BOOL ; else if ( netType == NetType . Wifi && networkInfo != null && networkInfo . getType ( ) == ConnectivityManager . TYPE_WIFI && isConnected ( networkInfo ) ) return _BOOL ; else if ( netType == NetType . Mobile && networkInfo != null && networkInfo . getType ( ) == ConnectivityManager . TYPE_MOBILE && isConnected ( networkInfo ) ) return _BOOL ; return _BOOL ; }
public void deleteItem ( int position ) { if ( ! isDataListEmpty ( ) && position >= _NUM && position < mDataList . size ( ) ) { mDataList . remove ( position ) ; notifyItemRemoved ( position ) ; } }
private int calculateGraidentChannel ( int sourceChannel , int destChannel , int distance , int offset ) { if ( sourceChannel == destChannel ) { return sourceChannel ; } float ratio = ( ( float ) offset ) / ( ( float ) distance ) ; int pos = ( int ) ( Math . abs ( sourceChannel - destChannel ) * ratio ) ; if ( sourceChannel > destChannel ) { return sourceChannel - pos ; } else { return sourceChannel + pos ; } }
private void applyImageMatrix ( float width , float height , boolean center , boolean animate ) { if ( mBitmap != null && width > _NUM && height > _NUM ) { mImageMatrix . reset ( ) ; mImageMatrix . postTranslate ( ( width - mBitmap . getWidth ( ) ) / _NUM , ( height - mBitmap . getHeight ( ) ) / _NUM ) ; mapImagePointsByImageMatrix ( ) ; if ( mDegreesRotated > _NUM ) { mImageMatrix . postRotate ( mDegreesRotated , BitmapUtils . getRectCenterX ( mImagePoints ) , BitmapUtils . getRectCenterY ( mImagePoints ) ) ; mapImagePointsByImageMatrix ( ) ; } float scale = Math . min ( width / BitmapUtils . getRectWidth ( mImagePoints ) , height / BitmapUtils . getRectHeight ( mImagePoints ) ) ; if ( mScaleType == ScaleType . FIT_CENTER || ( mScaleType == ScaleType . CENTER_INSIDE && scale < _NUM ) || ( scale > _NUM && mAutoZoomEnabled ) ) { mImageMatrix . postScale ( scale , scale , BitmapUtils . getRectCenterX ( mImagePoints ) , BitmapUtils . getRectCenterY ( mImagePoints ) ) ; mapImagePointsByImageMatrix ( ) ; } mImageMatrix . postScale ( mZoom , mZoom , BitmapUtils . getRectCenterX ( mImagePoints ) , BitmapUtils . getRectCenterY ( mImagePoints ) ) ; mapImagePointsByImageMatrix ( ) ; RectF cropRect = mCropOverlayView . getCropWindowRect ( ) ; cropRect . offset ( - mZoomOffsetX * mZoom , - mZoomOffsetY * mZoom ) ; if ( center ) { mZoomOffsetX = width > BitmapUtils . getRectWidth ( mImagePoints ) ? _NUM : Math . max ( Math . min ( width / _NUM - cropRect . centerX ( ) , - BitmapUtils . getRectLeft ( mImagePoints ) ) , getWidth ( ) - BitmapUtils . getRectRight ( mImagePoints ) ) / mZoom ; mZoomOffsetY = height > BitmapUtils . getRectHeight ( mImagePoints ) ? _NUM : Math . max ( Math . min ( height / _NUM - cropRect . centerY ( ) , - BitmapUtils . getRectTop ( mImagePoints ) ) , getHeight ( ) - BitmapUtils . getRectBottom ( mImagePoints ) ) / mZoom ; } else { mZoomOffsetX = Math . min ( Math . max ( mZoomOffsetX * mZoom , - cropRect . left ) , - cropRect . right + width ) / mZoom ; mZoomOffsetY = Math . min ( Math . max ( mZoomOffsetY * mZoom , - cropRect . top ) , - cropRect . bottom + height ) / mZoom ; } mImageMatrix . postTranslate ( mZoomOffsetX * mZoom , mZoomOffsetY * mZoom ) ; cropRect . offset ( mZoomOffsetX * mZoom , mZoomOffsetY * mZoom ) ; mCropOverlayView . setCropWindowRect ( cropRect ) ; mapImagePointsByImageMatrix ( ) ; if ( animate ) { mAnimation . setEndState ( mImagePoints , mImageMatrix ) ; mImageView . startAnimation ( mAnimation ) ; } else { mImageView . setImageMatrix ( mImageMatrix ) ; } updateImageBounds ( _BOOL ) ; } }
public static void addStartupListener ( StartUpListener s ) { m_StartupListeners . add ( s ) ; }
public static void closeQuiet ( @ Nullable SelectionKey rsrc ) { if ( rsrc != null ) closeQuiet ( rsrc . channel ( ) ) ; }
public CompletableFuture < NewFile > run ( ) { LOG . log ( Level . FINE , _STR , files . size ( ) ) ; CompletableFuture < NewFile > fileCreation = new CompletableFuture < > ( ) ; final List < TSData > fjpFiles = this . files ; TASK_POOL . execute ( null ) ; synchronized ( OUTSTANDING ) { OUTSTANDING . add ( fileCreation ) ; } this . files = new LinkedList < > ( ) ; return fileCreation ; }
private static Key createDESKey ( byte [ ] bytes , int offset ) { byte [ ] keyBytes = new byte [ _NUM ] ; System . arraycopy ( bytes , offset , keyBytes , _NUM , _NUM ) ; byte [ ] material = new byte [ _NUM ] ; material [ _NUM ] = keyBytes [ _NUM ] ; material [ _NUM ] = ( byte ) ( keyBytes [ _NUM ] << _NUM | ( keyBytes [ _NUM ] & _NUM ) > > > _NUM ) ; material [ _NUM ] = ( byte ) ( keyBytes [ _NUM ] << _NUM | ( keyBytes [ _NUM ] & _NUM ) > > > _NUM ) ; material [ _NUM ] = ( byte ) ( keyBytes [ _NUM ] << _NUM | ( keyBytes [ _NUM ] & _NUM ) > > > _NUM ) ; material [ _NUM ] = ( byte ) ( keyBytes [ _NUM ] << _NUM | ( keyBytes [ _NUM ] & _NUM ) > > > _NUM ) ; material [ _NUM ] = ( byte ) ( keyBytes [ _NUM ] << _NUM | ( keyBytes [ _NUM ] & _NUM ) > > > _NUM ) ; material [ _NUM ] = ( byte ) ( keyBytes [ _NUM ] << _NUM | ( keyBytes [ _NUM ] & _NUM ) > > > _NUM ) ; material [ _NUM ] = ( byte ) ( keyBytes [ _NUM ] << _NUM ) ; oddParity ( material ) ; return new SecretKeySpec ( material , _STR ) ; }
private static void decodeBase256Segment ( BitSource bits , StringBuilder result , Collection < byte [ ] > byteSegments ) throws FormatException { int codewordPosition = _NUM + bits . getByteOffset ( ) ; int d1 = unrandomize255State ( bits . readBits ( _NUM ) , codewordPosition ++ ) ; int count ; if ( d1 == _NUM ) { count = bits . available ( ) / _NUM ; } else if ( d1 < _NUM ) { count = d1 ; } else { count = _NUM * ( d1 - _NUM ) + unrandomize255State ( bits . readBits ( _NUM ) , codewordPosition ++ ) ; } if ( count < _NUM ) { throw FormatException . getFormatInstance ( ) ; } byte [ ] bytes = new byte [ count ] ; for ( int i = _NUM ; i < count ; i ++ ) { if ( bits . available ( ) < _NUM ) { throw FormatException . getFormatInstance ( ) ; } bytes [ i ] = ( byte ) unrandomize255State ( bits . readBits ( _NUM ) , codewordPosition ++ ) ; } byteSegments . add ( bytes ) ; try { result . append ( new String ( bytes , _STR ) ) ; } catch ( UnsupportedEncodingException uee ) { throw new IllegalStateException ( _STR + uee ) ; } }
static void checkDesc ( final String desc , final boolean canBeVoid ) { int end = checkDesc ( desc , _NUM , canBeVoid ) ; if ( end != desc . length ( ) ) { throw new IllegalArgumentException ( _STR + desc ) ; } }
protected JsOutput newJsOutput ( Module m ) throws IOException { return new JsOutput ( m , isCompilingLanguageModule ( ) ) ; }
public String text ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( Node node : nodes ) { sb . append ( node . getTextContent ( ) ) ; } return sb . toString ( ) ; }
private boolean scanExpr ( SymbolTable symbolTable , Tokens tokens , String data , int currentOffset , int endOffset ) throws XNIException { int ch ; int openParen = _NUM ; int closeParen = _NUM ; int nameOffset , dataOffset ; boolean isQName = _BOOL ; String name = null ; String prefix = null ; String schemeData = null ; StringBuffer schemeDataBuff = new StringBuffer ( ) ; while ( _BOOL ) { if ( currentOffset == endOffset ) { break ; } ch = data . charAt ( currentOffset ) ; while ( ch == _STR || ch == _NUM || ch == _NUM || ch == _NUM ) { if ( ++ currentOffset == endOffset ) { break ; } ch = data . charAt ( currentOffset ) ; } if ( currentOffset == endOffset ) { break ; } byte chartype = ( ch >= _NUM ) ? CHARTYPE_NONASCII : fASCIICharMap [ ch ] ; switch ( chartype ) { case CHARTYPE_OPEN_PAREN : addToken ( tokens , Tokens . XPTRTOKEN_OPEN_PAREN ) ; openParen ++ ; ++ currentOffset ; break ; case CHARTYPE_CLOSE_PAREN : addToken ( tokens , Tokens . XPTRTOKEN_CLOSE_PAREN ) ; closeParen ++ ; ++ currentOffset ; break ; case CHARTYPE_CARRET : case CHARTYPE_COLON : case CHARTYPE_DIGIT : case CHARTYPE_EQUAL : case CHARTYPE_LETTER : case CHARTYPE_MINUS : case CHARTYPE_NONASCII : case CHARTYPE_OTHER : case CHARTYPE_PERIOD : case CHARTYPE_SLASH : case CHARTYPE_UNDERSCORE : case CHARTYPE_WHITESPACE : if ( openParen == _NUM ) { nameOffset = currentOffset ; currentOffset = scanNCName ( data , endOffset , currentOffset ) ; if ( currentOffset == nameOffset ) { reportError ( _STR , new Object [ ] { data } ) ; return _BOOL ; } if ( currentOffset < endOffset ) { ch = data . charAt ( currentOffset ) ; } else { ch = - _NUM ; } name = symbolTable . addSymbol ( data . substring ( nameOffset , currentOffset ) ) ; prefix = XMLSymbols . EMPTY_STRING ; if ( ch == _STR ) { if ( ++ currentOffset == endOffset ) { return _BOOL ; } ch = data . charAt ( currentOffset ) ; prefix = name ; nameOffset = currentOffset ; currentOffset = scanNCName ( data , endOffset , currentOffset ) ; if ( currentOffset == nameOffset ) { return _BOOL ; } if ( currentOffset < endOffset ) { ch = data . charAt ( currentOffset ) ; } else { ch = - _NUM ; } isQName = _BOOL ; name = symbolTable . addSymbol ( data . substring ( nameOffset , currentOffset ) ) ; } if ( currentOffset != endOffset ) { addToken ( tokens , Tokens . XPTRTOKEN_SCHEMENAME ) ; tokens . addToken ( prefix ) ; tokens . addToken ( name ) ; isQName = _BOOL ; } else if ( currentOffset == endOffset ) { addToken ( tokens , Tokens . XPTRTOKEN_SHORTHAND ) ; tokens . addToken ( name ) ; isQName = _BOOL ; } closeParen = _NUM ; break ; } else if ( openParen > _NUM && closeParen == _NUM && name != null ) { dataOffset = currentOffset ; currentOffset = scanData ( data , schemeDataBuff , endOffset , currentOffset ) ; if ( currentOffset == dataOffset ) { reportError ( _STR , new Object [ ] { data } ) ; return _BOOL ; } if ( currentOffset < endOffset ) { ch = data . charAt ( currentOffset ) ; } else { ch = - _NUM ; } schemeData = symbolTable . addSymbol ( schemeDataBuff . toString ( ) ) ; addToken ( tokens , Tokens . XPTRTOKEN_SCHEMEDATA ) ; tokens . addToken ( schemeData ) ; openParen = _NUM ; schemeDataBuff . delete ( _NUM , schemeDataBuff . length ( ) ) ; } else { return _BOOL ; } } } return _BOOL ; }
public void addLine ( int startLine , String sourceFile , int repeatCount , int outputLine , int outputIncrement ) { _lines . add ( new Line ( startLine , sourceFile , repeatCount , outputLine , outputIncrement ) ) ; }
public String ( StringBuffer stringbuffer ) { offset = _NUM ; synchronized ( stringbuffer ) { value = stringbuffer . shareValue ( ) ; count = stringbuffer . length ( ) ; } }
public int size ( ) { return all . size ( ) ; }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
public Process executeAsync ( final CommandLine command , final Map < String , String > environment , final ExecuteResultHandler handler ) throws IOException { if ( workingDirectory != null && ! workingDirectory . exists ( ) ) { throw new IOException ( workingDirectory + _STR ) ; } return executeInternal ( command , environment , workingDirectory , streamHandler , handler ) ; }
public static Range iterateToFindDomainBounds ( XYDataset dataset , List visibleSeriesKeys , boolean includeInterval ) { ParamChecks . nullNotPermitted ( dataset , _STR ) ; ParamChecks . nullNotPermitted ( visibleSeriesKeys , _STR ) ; double minimum = Double . POSITIVE_INFINITY ; double maximum = Double . NEGATIVE_INFINITY ; if ( includeInterval && dataset instanceof IntervalXYDataset ) { IntervalXYDataset ixyd = ( IntervalXYDataset ) dataset ; Iterator iterator = visibleSeriesKeys . iterator ( ) ; while ( iterator . hasNext ( ) ) { Comparable seriesKey = ( Comparable ) iterator . next ( ) ; int series = dataset . indexOf ( seriesKey ) ; int itemCount = dataset . getItemCount ( series ) ; for ( int item = _NUM ; item < itemCount ; item ++ ) { double xvalue = ixyd . getXValue ( series , item ) ; double lvalue = ixyd . getStartXValue ( series , item ) ; double uvalue = ixyd . getEndXValue ( series , item ) ; if ( ! Double . isNaN ( xvalue ) ) { minimum = Math . min ( minimum , xvalue ) ; maximum = Math . max ( maximum , xvalue ) ; } if ( ! Double . isNaN ( lvalue ) ) { minimum = Math . min ( minimum , lvalue ) ; } if ( ! Double . isNaN ( uvalue ) ) { maximum = Math . max ( maximum , uvalue ) ; } } } } else { Iterator iterator = visibleSeriesKeys . iterator ( ) ; while ( iterator . hasNext ( ) ) { Comparable seriesKey = ( Comparable ) iterator . next ( ) ; int series = dataset . indexOf ( seriesKey ) ; int itemCount = dataset . getItemCount ( series ) ; for ( int item = _NUM ; item < itemCount ; item ++ ) { double x = dataset . getXValue ( series , item ) ; if ( ! Double . isNaN ( x ) ) { minimum = Math . min ( minimum , x ) ; maximum = Math . max ( maximum , x ) ; } } } } if ( minimum == Double . POSITIVE_INFINITY ) { return null ; } else { return new Range ( minimum , maximum ) ; } }
public LibertyManagerClient ( ) { }
private void checkComplianceAttributes ( AttrSet attrSet , boolean ignoreCompliance ) throws AMException { if ( ! ignoreCompliance && ComplianceServicesImpl . isComplianceUserDeletionEnabled ( ) ) { complianceImpl . verifyAttributes ( attrSet ) ; } }
private void updateZoningMap ( UnManagedExportMask mask , List < Initiator > initiators , List < StoragePort > storagePorts ) { ZoneInfoMap zoningMap = networkDeviceController . getInitiatorsZoneInfoMap ( initiators , storagePorts ) ; for ( ZoneInfo zoneInfo : zoningMap . values ( ) ) { log . info ( _STR , new Object [ ] { zoneInfo . getZoneName ( ) , zoneInfo . getInitiatorWwn ( ) , zoneInfo . getPortWwn ( ) } ) ; } mask . setZoningMap ( zoningMap ) ; }
public InvitationStatus waitInvitationAnswer ( ) { return waitInvitationAnswer ( mRingingPeriod ) ; }
private boolean moveWithinSelectedRange ( JTable table , int dx , int dy , ListSelectionModel rsm , ListSelectionModel csm ) { int totalCount ; int minX , maxX , minY , maxY ; boolean rs = table . getRowSelectionAllowed ( ) ; boolean cs = table . getColumnSelectionAllowed ( ) ; if ( rs && cs ) { totalCount = table . getSelectedRowCount ( ) * table . getSelectedColumnCount ( ) ; minX = csm . getMinSelectionIndex ( ) ; maxX = csm . getMaxSelectionIndex ( ) ; minY = rsm . getMinSelectionIndex ( ) ; maxY = rsm . getMaxSelectionIndex ( ) ; } else if ( rs ) { totalCount = table . getSelectedRowCount ( ) ; minX = _NUM ; maxX = table . getColumnCount ( ) - _NUM ; minY = rsm . getMinSelectionIndex ( ) ; maxY = rsm . getMaxSelectionIndex ( ) ; } else if ( cs ) { totalCount = table . getSelectedColumnCount ( ) ; minX = csm . getMinSelectionIndex ( ) ; maxX = csm . getMaxSelectionIndex ( ) ; minY = _NUM ; maxY = table . getRowCount ( ) - _NUM ; } else { totalCount = _NUM ; minX = maxX = minY = maxY = _NUM ; } boolean stayInSelection ; if ( totalCount == _NUM || ( totalCount == _NUM && table . isCellSelected ( leadRow , leadColumn ) ) ) { stayInSelection = _BOOL ; maxX = table . getColumnCount ( ) - _NUM ; maxY = table . getRowCount ( ) - _NUM ; minX = Math . min ( _NUM , maxX ) ; minY = Math . min ( _NUM , maxY ) ; } else { stayInSelection = _BOOL ; } if ( dy == _NUM && leadColumn == - _NUM ) { leadColumn = minX ; leadRow = - _NUM ; } else if ( dx == _NUM && leadRow == - _NUM ) { leadRow = minY ; leadColumn = - _NUM ; } else if ( dy == - _NUM && leadColumn == - _NUM ) { leadColumn = maxX ; leadRow = maxY + _NUM ; } else if ( dx == - _NUM && leadRow == - _NUM ) { leadRow = maxY ; leadColumn = maxX + _NUM ; } leadRow = Math . min ( Math . max ( leadRow , minY - _NUM ) , maxY + _NUM ) ; leadColumn = Math . min ( Math . max ( leadColumn , minX - _NUM ) , maxX + _NUM ) ; do { calcNextPos ( dx , minX , maxX , dy , minY , maxY ) ; } while ( stayInSelection && ! table . isCellSelected ( leadRow , leadColumn ) ) ; return stayInSelection ; }
private double [ ] [ ] xPrime ( int t ) { double [ ] [ ] x = new double [ _NUM ] [ getNumLags ( ) * numVars ] ; for ( int i = _NUM ; i < getNumLags ( ) ; i ++ ) { double [ ] [ ] yPrime = yPrime ( t - i - _NUM ) ; System . arraycopy ( yPrime [ _NUM ] , _NUM , x [ _NUM ] , i * numVars , numVars ) ; } return x ; }
private void readBinary ( final LittleEndianDataInputStream dis ) throws IOException { RajLog . i ( _STR ) ; dis . skip ( _NUM ) ; int facetCount = dis . readInt ( ) ; float [ ] verticesArr = new float [ facetCount * _NUM ] ; float [ ] normalsArr = new float [ facetCount * _NUM ] ; int [ ] indicesArr = new int [ facetCount * _NUM ] ; float [ ] tempNorms = new float [ _NUM ] ; int vertPos = _NUM , normPos = _NUM ; for ( int i = _NUM ; i < indicesArr . length ; i ++ ) indicesArr [ i ] = i ; while ( dis . available ( ) > _NUM ) { for ( int j = _NUM ; j < _NUM ; j ++ ) { tempNorms [ j ] = dis . readFloat ( ) ; if ( Float . isNaN ( tempNorms [ j ] ) || Float . isInfinite ( tempNorms [ j ] ) ) { RajLog . w ( _STR ) ; tempNorms [ _NUM ] = _NUM ; tempNorms [ _NUM ] = _NUM ; tempNorms [ _NUM ] = _NUM ; break ; } } for ( int j = _NUM ; j < _NUM ; j ++ ) { normalsArr [ normPos ++ ] = tempNorms [ _NUM ] ; normalsArr [ normPos ++ ] = tempNorms [ _NUM ] ; normalsArr [ normPos ++ ] = tempNorms [ _NUM ] ; } for ( int j = _NUM ; j < _NUM ; j ++ ) verticesArr [ vertPos ++ ] = dis . readFloat ( ) ; dis . skip ( _NUM ) ; } mRootObject . setData ( verticesArr , normalsArr , null , null , indicesArr , _BOOL ) ; }
public int size ( ) { return components . size ( ) ; }
public void testRoundMathContextPrecision0 ( ) { String a = _STR ; int aScale = _NUM ; int precision = _NUM ; RoundingMode rm = RoundingMode . HALF_UP ; MathContext mc = new MathContext ( precision , rm ) ; String res = _STR ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal result = aNumber . round ( mc ) ; assertEquals ( _STR , res , result . toString ( ) ) ; assertEquals ( _STR , aScale , result . scale ( ) ) ; }
public void omitLessFreq ( ) { if ( name == null ) return ; int threshold = n_words [ _NUM ] / LESS_FREQ_RATIO ; if ( threshold < MINIMUM_FREQ ) threshold = MINIMUM_FREQ ; Set < String > keys = freq . keySet ( ) ; int roman = _NUM ; for ( Iterator < String > i = keys . iterator ( ) ; i . hasNext ( ) ; ) { String key = i . next ( ) ; int count = freq . get ( key ) ; if ( count <= threshold ) { n_words [ key . length ( ) - _NUM ] -= count ; i . remove ( ) ; } else { if ( key . matches ( _STR ) ) { roman += count ; } } } if ( roman < n_words [ _NUM ] / _NUM ) { Set < String > keys2 = freq . keySet ( ) ; for ( Iterator < String > i = keys2 . iterator ( ) ; i . hasNext ( ) ; ) { String key = i . next ( ) ; if ( key . matches ( _STR ) ) { n_words [ key . length ( ) - _NUM ] -= freq . get ( key ) ; i . remove ( ) ; } } } }
@ Override public synchronized String toString ( ) { if ( elementCount == _NUM ) { return _STR ; } int length = elementCount - _NUM ; StringBuffer buffer = new StringBuffer ( elementCount * _NUM ) ; buffer . append ( _STR ) ; for ( int i = _NUM ; i < length ; i ++ ) { if ( elementData [ i ] == this ) { buffer . append ( _STR ) ; } else { buffer . append ( elementData [ i ] ) ; } buffer . append ( _STR ) ; } if ( elementData [ length ] == this ) { buffer . append ( _STR ) ; } else { buffer . append ( elementData [ length ] ) ; } buffer . append ( _STR ) ; return buffer . toString ( ) ; }
public static PublicKeySelector fromString ( String type ) { if ( type != null ) { for ( PublicKeySelector keySelector : PublicKeySelector . values ( ) ) { if ( type . equalsIgnoreCase ( keySelector . type ) ) { return keySelector ; } } } return null ; }
public static SortedMap < Integer , Integer > generateSortedTagMap ( String [ ] partitions , Map < String , String > tags ) { final SortedMap < Integer , Integer > tagHashMap = new TreeMap < Integer , Integer > ( ) ; for ( Map . Entry < String , String > entry : tags . entrySet ( ) ) { final String tagName = entry . getKey ( ) ; final String tagValue = entry . getValue ( ) ; if ( tagValue == null || isPartitionTag ( partitions , tagName ) ) continue ; tagHashMap . put ( tagName . hashCode ( ) , tagValue . hashCode ( ) ) ; } return tagHashMap ; }
public static void describeShapeDetail ( Shape shape , double flattening ) { PathIterator pi2 = shape . getPathIterator ( null ) ; FlatteningPathIterator pi = new FlatteningPathIterator ( pi2 , flattening ) ; double [ ] coords = new double [ _NUM ] ; int pointCount = _NUM ; Debug . output ( _STR + flattening + _STR ) ; while ( ! pi . isDone ( ) ) { int type = pi . currentSegment ( coords ) ; Debug . output ( _STR + type + _STR + ( pointCount ++ ) + _STR + coords [ _NUM ] + _STR + coords [ _NUM ] ) ; pi . next ( ) ; } Debug . output ( _STR + pointCount + _STR ) ; }
protected static String shortenClassname ( String nam , char c ) { final int lastdot = nam . lastIndexOf ( c ) ; if ( lastdot >= _NUM ) { nam = nam . substring ( lastdot + _NUM ) ; } return nam ; }
public void add ( T graphic ) { synchronized ( mLock ) { mGraphics . add ( graphic ) ; } postInvalidate ( ) ; }
public String toString ( ) { StringBuffer sbuf = new StringBuffer ( ) ; TypeParameter . toString ( sbuf , typeParams ) ; sbuf . append ( _STR ) ; Type . toString ( sbuf , params ) ; sbuf . append ( _STR ) ; sbuf . append ( retType ) ; if ( exceptions . length > _NUM ) { sbuf . append ( _STR ) ; Type . toString ( sbuf , exceptions ) ; } return sbuf . toString ( ) ; }
@ Override public void flip ( X11ComponentPeer peer , Component target , VolatileImage xBackBuffer , int x1 , int y1 , int x2 , int y2 , BufferCapabilities . FlipContents flipAction ) { if ( flipAction == BufferCapabilities . FlipContents . COPIED ) { SurfaceManager vsm = SurfaceManager . getManager ( xBackBuffer ) ; SurfaceData sd = vsm . getPrimarySurfaceData ( ) ; if ( sd instanceof GLXVSyncOffScreenSurfaceData ) { GLXVSyncOffScreenSurfaceData vsd = ( GLXVSyncOffScreenSurfaceData ) sd ; SurfaceData bbsd = vsd . getFlipSurface ( ) ; Graphics2D bbg = new SunGraphics2D ( bbsd , Color . black , Color . white , null ) ; try { bbg . drawImage ( xBackBuffer , _NUM , _NUM , null ) ; } finally { bbg . dispose ( ) ; } } else { Graphics g = peer . getGraphics ( ) ; try { g . drawImage ( xBackBuffer , x1 , y1 , x2 , y2 , x1 , y1 , x2 , y2 , null ) ; } finally { g . dispose ( ) ; } return ; } } else if ( flipAction == BufferCapabilities . FlipContents . PRIOR ) { return ; } OGLSurfaceData . swapBuffers ( peer . getContentWindow ( ) ) ; if ( flipAction == BufferCapabilities . FlipContents . BACKGROUND ) { Graphics g = xBackBuffer . getGraphics ( ) ; try { g . setColor ( target . getBackground ( ) ) ; g . fillRect ( _NUM , _NUM , xBackBuffer . getWidth ( ) , xBackBuffer . getHeight ( ) ) ; } finally { g . dispose ( ) ; } } }
public boolean addProperty ( OwlProperty property ) { property . addRestriction ( this ) ; return properties . add ( property ) ; }
public static GoogleAnalytics initialiseGoogleAnalytics ( Context context , String trackerId , final ExceptionParser callback ) { mAnalytics = GoogleAnalytics . getInstance ( context ) ; mAnalytics . setLocalDispatchPeriod ( _NUM ) ; mTracker = mAnalytics . newTracker ( trackerId ) ; mTracker . enableExceptionReporting ( _BOOL ) ; mTracker . enableAutoActivityTracking ( _BOOL ) ; Thread . UncaughtExceptionHandler handler = Thread . getDefaultUncaughtExceptionHandler ( ) ; if ( handler != null && handler instanceof ExceptionReporter ) { ExceptionReporter exceptionReporter = ( ExceptionReporter ) handler ; exceptionReporter . setExceptionParser ( callback ) ; Thread . setDefaultUncaughtExceptionHandler ( exceptionReporter ) ; Log . d ( LOG_TAG , _STR ) ; } else { Log . e ( LOG_TAG , _STR ) ; } return mAnalytics ; }
void onMoved ( ) { double diff = System . currentTimeMillis ( ) - timeStamp ; timeStamp = _NUM ; if ( diff > DISCARD_THRESHOLD ) { return ; } double recentJitter = _NUM ; double sum = _NUM ; for ( int i = _NUM ; i < VECTOR_LENGTH ; i ++ ) { double old = times [ i ] ; double avg = ( diff + old ) / _NUM ; recentJitter += Math . abs ( old - diff ) ; times [ i ] = avg ; diff = old ; sum += avg ; } recentJitter /= _NUM ; jitter = ( jitter + _NUM * Math . max ( jitter , recentJitter ) + recentJitter ) / _NUM ; prediction = TURN_LENGTH / ( sum / VECTOR_LENGTH + jitter ) ; WtWindowManager wm = WtWindowManager . getInstance ( ) ; wm . setProperty ( SPEED_PROPERTY , Double . toString ( prediction ) ) ; wm . setProperty ( JITTER_PROPERTY , Double . toString ( jitter ) ) ; }
public ServiceID ( DataInput in ) throws IOException { this . mostSig = in . readLong ( ) ; this . leastSig = in . readLong ( ) ; }
public void onEnterElementConsumed ( String uri , String localName , String qname , Attributes atts ) throws SAXException { attStack . push ( currentAtts = new AttributesImpl ( atts ) ) ; nsEffectiveStack . push ( new Integer ( nsEffectivePtr ) ) ; nsEffectivePtr = namespaces . size ( ) ; }
private void addFinally ( ArrayList returnList , Stmnt finallyBlock ) throws CompileError { Bytecode bc = bytecode ; int n = returnList . size ( ) ; for ( int i = _NUM ; i < n ; ++ i ) { final int [ ] ret = ( int [ ] ) returnList . get ( i ) ; int pc = ret [ _NUM ] ; bc . write16bit ( pc , bc . currentPc ( ) - pc + _NUM ) ; ReturnHook hook = new JsrHook2 ( this , ret ) ; finallyBlock . accept ( this ) ; hook . remove ( this ) ; if ( ! hasReturned ) { bc . addOpcode ( Opcode . GOTO ) ; bc . addIndex ( pc + _NUM - bc . currentPc ( ) ) ; } } }
public Object nextMeta ( ) throws JSONException { char c ; char q ; do { c = next ( ) ; } while ( Character . isWhitespace ( c ) ) ; switch ( c ) { case _NUM : throw syntaxError ( _STR ) ; case _STR : return XML . LT ; case _STR : return XML . GT ; case _STR : return XML . SLASH ; case _STR : return XML . EQ ; case _STR : return XML . BANG ; case _STR : return XML . QUEST ; case _STR : case _STR : q = c ; for ( ; ; ) { c = next ( ) ; if ( c == _NUM ) { throw syntaxError ( _STR ) ; } if ( c == q ) { return Boolean . TRUE ; } } default : for ( ; ; ) { c = next ( ) ; if ( Character . isWhitespace ( c ) ) { return Boolean . TRUE ; } switch ( c ) { case _NUM : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : back ( ) ; return Boolean . TRUE ; } } } }
private boolean checkTouchSlop ( View child , float dx , float dy ) { if ( child == null ) { return _BOOL ; } final boolean checkHorizontal = mCallback . getViewHorizontalDragRange ( child ) > _NUM ; final boolean checkVertical = mCallback . getViewVerticalDragRange ( child ) > _NUM ; if ( checkHorizontal && checkVertical ) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop ; } else if ( checkHorizontal ) { return Math . abs ( dx ) > mTouchSlop ; } else if ( checkVertical ) { return Math . abs ( dy ) > mTouchSlop ; } return _BOOL ; }
public static void writeJSONString ( Collection collection , Writer out ) throws IOException { if ( collection == null ) { out . write ( _STR ) ; return ; } boolean first = _BOOL ; Iterator iter = collection . iterator ( ) ; out . write ( _STR ) ; while ( iter . hasNext ( ) ) { if ( first ) first = _BOOL ; else out . write ( _STR ) ; Object value = iter . next ( ) ; if ( value == null ) { out . write ( _STR ) ; continue ; } JSONValue . writeJSONString ( value , out ) ; } out . write ( _STR ) ; }
protected int [ ] readColorTable ( final int ncolors ) { final int nbytes = _NUM * ncolors ; int [ ] tab = null ; final byte [ ] c = new byte [ nbytes ] ; try { rawData . get ( c ) ; tab = new int [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < ncolors ) { final int r = ( c [ j ++ ] ) & _NUM ; final int g = ( c [ j ++ ] ) & _NUM ; final int b = ( c [ j ++ ] ) & _NUM ; tab [ i ++ ] = _NUM | ( r << _NUM ) | ( g << _NUM ) | b ; } } catch ( final BufferUnderflowException e ) { Log . w ( TAG , _STR , e ) ; status = STATUS_FORMAT_ERROR ; } return tab ; }
void touch ( boolean openReadOnly ) throws IOException { if ( isReadOnly || openReadOnly ) { throw new IOException ( _STR ) ; } lastModified = System . currentTimeMillis ( ) ; }
void pushImportURL ( String hrefUrl ) { m_importStack . push ( hrefUrl ) ; }
@ SneakyThrows public void addKeyToKeystore ( KeyStore keyStore , X509Certificate cert , RSAPrivateKey privateKey , String alias , String password ) { KeyStore . PasswordProtection pass = new KeyStore . PasswordProtection ( password . toCharArray ( ) ) ; Certificate [ ] certificateChain = { cert } ; keyStore . setEntry ( alias , new KeyStore . PrivateKeyEntry ( privateKey , certificateChain ) , pass ) ; }
public boolean needsReload ( File file ) { return fFilesToReoad . contains ( file ) ; }
protected int drawLegend ( Canvas canvas , DefaultRenderer renderer , String [ ] titles , int left , int right , int y , int width , int height , int legendSize , Paint paint , boolean calculate ) { float size = _NUM ; if ( renderer . isShowLegend ( ) ) { float currentX = left ; float currentY = y + height - legendSize + size ; paint . setTextAlign ( Component . LEFT ) ; paint . setTextSize ( renderer . getLegendTextSize ( ) ) ; int sLength = Math . min ( titles . length , renderer . getSeriesRendererCount ( ) ) ; for ( int i = _NUM ; i < sLength ; i ++ ) { SimpleSeriesRenderer r = renderer . getSeriesRendererAt ( i ) ; final float lineSize = getLegendShapeWidth ( i ) ; if ( r . isShowLegendItem ( ) ) { String text = titles [ i ] ; if ( titles . length == renderer . getSeriesRendererCount ( ) ) { paint . setColor ( r . getColor ( ) ) ; } else { paint . setColor ( ColorUtil . LTGRAY ) ; } float [ ] widths = new float [ text . length ( ) ] ; paint . getTextWidths ( text , widths ) ; float sum = _NUM ; for ( float value : widths ) { sum += value ; } float extraSize = lineSize + _NUM + sum ; float currentWidth = currentX + extraSize ; if ( i > _NUM && getExceed ( currentWidth , renderer , right , width ) ) { currentX = left ; currentY += renderer . getLegendTextSize ( ) ; size += renderer . getLegendTextSize ( ) ; currentWidth = currentX + extraSize ; } if ( getExceed ( currentWidth , renderer , right , width ) ) { float maxWidth = right - currentX - lineSize - _NUM ; if ( isVertical ( renderer ) ) { maxWidth = width - currentX - lineSize - _NUM ; } int nr = paint . breakText ( text , _BOOL , maxWidth , widths ) ; text = text . substring ( _NUM , nr ) + _STR ; } if ( ! calculate ) { drawLegendShape ( canvas , r , currentX , currentY , i , paint ) ; drawString ( canvas , text , currentX + lineSize + _NUM , currentY + _NUM , paint ) ; } currentX += extraSize ; } } } return Math . round ( size + renderer . getLegendTextSize ( ) ) ; }
public PutRepositoryRequest source ( byte [ ] repositoryDefinition ) { return source ( repositoryDefinition , _NUM , repositoryDefinition . length ) ; }
private void disableButtons ( ) { setFireEnabled ( _BOOL ) ; setSkipEnabled ( _BOOL ) ; setTwistEnabled ( _BOOL ) ; setNextEnabled ( _BOOL ) ; butDone . setEnabled ( _BOOL ) ; setFlipArmsEnabled ( _BOOL ) ; setFireModeEnabled ( _BOOL ) ; setNextTargetEnabled ( _BOOL ) ; }
public boolean isAdditiveNumber ( String num ) { int n = num . length ( ) ; for ( int i = _NUM ; i <= n / _NUM ; i ++ ) { if ( num . charAt ( _NUM ) == _STR && i > _NUM ) { return _BOOL ; } BigInteger num1 = new BigInteger ( num . substring ( _NUM , i ) ) ; for ( int j = _NUM ; Math . max ( i , j ) <= n - i - j ; j ++ ) { if ( num . charAt ( i ) == _STR && j > _NUM ) { break ; } BigInteger num2 = new BigInteger ( num . substring ( i , i + j ) ) ; if ( isAdditiveNumber ( num1 , num2 , i + j , num ) ) { return _BOOL ; } } } return _BOOL ; }
@ Override public void write ( String str ) { int start = _NUM ; while ( start < str . length ( ) ) { int end = Math . min ( start + MAX_MESSAGE_LENGTH , str . length ( ) ) ; Log . i ( TAG , str . substring ( start , end ) ) ; start = end ; } }
protected void addToQuarantineQueue ( NodePortTuple npt ) { if ( quarantineQueue . contains ( npt ) == _BOOL ) { quarantineQueue . add ( npt ) ; } }
private CarbonDictionarySortInfo createColumnSortInfo ( CarbonDictionarySortModel [ ] dictionarySortModels ) { int [ ] sortIndex ; int [ ] sortIndexInverted ; Arrays . sort ( dictionarySortModels ) ; sortIndex = new int [ dictionarySortModels . length ] ; sortIndexInverted = new int [ dictionarySortModels . length ] ; for ( int i = _NUM ; i < dictionarySortModels . length ; i ++ ) { CarbonDictionarySortModel dictionarySortModel = dictionarySortModels [ i ] ; sortIndex [ i ] = dictionarySortModel . getKey ( ) ; sortIndexInverted [ dictionarySortModel . getKey ( ) - _NUM ] = i + _NUM ; } dictionarySortModels = null ; List < Integer > sortIndexList = convertToList ( sortIndex ) ; List < Integer > sortIndexInvertedList = convertToList ( sortIndexInverted ) ; return new CarbonDictionarySortInfo ( sortIndexList , sortIndexInvertedList ) ; }
private void addFeature ( JsonNode feature , int index ) { PointFeature feat = null ; try { feat = PointFeature . fromJsonNode ( feature ) ; } catch ( EmptyPolygonException e ) { LOG . warn ( _STR ) ; return ; } catch ( UnsupportedGeometryException e ) { LOG . warn ( e . message ) ; return ; } if ( feat == null ) { return ; } addFeature ( feat , index ) ; }
public BitString ( final String value ) { this ( value . length ( ) ) ; for ( int i = _NUM ; i < value . length ( ) ; i ++ ) { if ( value . charAt ( i ) == _STR ) { setBit ( value . length ( ) - ( i + _NUM ) , _BOOL ) ; } else if ( value . charAt ( i ) != _STR ) { throw new IllegalArgumentException ( _STR + i ) ; } } }
public void sort ( Comparator < Individual > comparator ) { Collections . sort ( individuals , comparator ) ; }
public void write ( Writer writer ) throws Exception { writer . write ( toString ( ) ) ; writer . flush ( ) ; }
public SafeAsyncTask ( ) { this . executor = DEFAULT_EXECUTOR ; }
public static boolean isCglibRenamedMethod ( Method renamedMethod ) { String name = renamedMethod . getName ( ) ; if ( name . startsWith ( CGLIB_RENAMED_METHOD_PREFIX ) ) { int i = name . length ( ) - _NUM ; while ( i >= _NUM && Character . isDigit ( name . charAt ( i ) ) ) { i -- ; } return ( ( i > CGLIB_RENAMED_METHOD_PREFIX . length ( ) ) && ( i < name . length ( ) - _NUM ) && ( name . charAt ( i ) == _STR ) ) ; } return _BOOL ; }
public PWResetException ( String bundleName , String errCode , Object [ ] args ) { super ( bundleName , errCode , args ) ; errList = new ArrayList ( _NUM ) ; errList . add ( getMessage ( ) ) ; }
public static String [ ] unionArrays ( String [ ] array1 , String [ ] array2 ) { if ( array1 == null ) { return array2 ; } if ( array2 == null ) { return array1 ; } Set < String > set = new LinkedHashSet < > ( ) ; set . addAll ( Arrays . asList ( array1 ) ) ; set . addAll ( Arrays . asList ( array2 ) ) ; return set . toArray ( new String [ set . size ( ) ] ) ; }
boolean isStateChange ( XDecoratedPeer window , XPropertyEvent e ) { if ( ! window . isShowing ( ) ) { stateLog . finer ( _STR ) ; return _BOOL ; } int wm_state = window . getWMState ( ) ; if ( wm_state == XUtilConstants . WithdrawnState ) { stateLog . finer ( _STR ) ; return _BOOL ; } else { if ( stateLog . isLoggable ( PlatformLogger . Level . FINER ) ) { stateLog . finer ( _STR + wm_state ) ; } } boolean is_state_change = _BOOL ; if ( e . get_atom ( ) == XA_WM_STATE . getAtom ( ) ) { is_state_change = _BOOL ; } for ( XStateProtocol proto : getProtocols ( XStateProtocol . class ) ) { is_state_change |= proto . isStateChange ( e ) ; if ( stateLog . isLoggable ( PlatformLogger . Level . FINEST ) ) { stateLog . finest ( proto + _STR + is_state_change ) ; } } return is_state_change ; }
@ Override public XObject execute ( XPathContext xctxt ) throws javax . xml . transform . TransformerException { Node xpathOwnerNode = ( Node ) xctxt . getOwnerObject ( ) ; if ( xpathOwnerNode == null ) { return null ; } int xpathOwnerNodeDTM = xctxt . getDTMHandleFromNode ( xpathOwnerNode ) ; int currentNode = xctxt . getCurrentNode ( ) ; DTM dtm = xctxt . getDTM ( currentNode ) ; int docContext = dtm . getDocument ( ) ; if ( DTM . NULL == docContext ) { error ( xctxt , XPATHErrorResources . ER_CONTEXT_HAS_NO_OWNERDOC , null ) ; } { Document currentDoc = XMLUtils . getOwnerDocument ( dtm . getNode ( currentNode ) ) ; Document xpathOwnerDoc = XMLUtils . getOwnerDocument ( xpathOwnerNode ) ; if ( currentDoc != xpathOwnerDoc ) { throw new TransformerException ( I18n . translate ( _STR ) ) ; } } XNodeSet nodes = new XNodeSet ( xctxt . getDTMManager ( ) ) ; NodeSetDTM nodeSet = nodes . mutableNodeset ( ) ; { int hereNode = DTM . NULL ; switch ( dtm . getNodeType ( xpathOwnerNodeDTM ) ) { case Node . ATTRIBUTE_NODE : case Node . PROCESSING_INSTRUCTION_NODE : { hereNode = xpathOwnerNodeDTM ; nodeSet . addNode ( hereNode ) ; break ; } case Node . TEXT_NODE : { hereNode = dtm . getParent ( xpathOwnerNodeDTM ) ; nodeSet . addNode ( hereNode ) ; break ; } default : break ; } } nodeSet . detach ( ) ; return nodes ; }
public List < LocalTime > top ( int n ) { List < LocalTime > top = new ArrayList < > ( ) ; int [ ] values = data . toIntArray ( ) ; IntArrays . parallelQuickSort ( values , ReverseIntComparator . instance ( ) ) ; for ( int i = _NUM ; i < n && i < values . length ; i ++ ) { top . add ( PackedLocalTime . asLocalTime ( values [ i ] ) ) ; } return top ; }
public static String grabClass ( String signature ) { Matcher matcher = sigRE . matcher ( signature ) ; boolean b = matcher . matches ( ) ; if ( ! b && matcher . groupCount ( ) != _NUM ) logger . error ( _STR , signature ) ; return matcher . group ( _NUM ) ; }
public TimeSeriesMetricDeltaSet ( Stream < Entry < Tags , MetricValue > > td ) { values_ = Any2 . right ( td . collect ( Collectors . toMap ( null , null , null , null ) ) ) ; }
public int size ( ) { return nodes . size ( ) ; }
@ Override public final E nextElement ( ) { E result = m_Vector . get ( m_Counter ) ; m_Counter ++ ; if ( m_Counter == m_SpecialElement ) { m_Counter ++ ; } return result ; }
private ByteString escapeBytes ( final ByteString value ) { if ( ! needEscaping ( value ) ) { return value ; } final ByteStringBuilder builder = new ByteStringBuilder ( ) ; for ( int i = _NUM ; i < value . length ( ) ; i ++ ) { final byte b = value . byteAt ( i ) ; if ( isByteToEscape ( b ) ) { builder . appendByte ( DN . NORMALIZED_ESC_BYTE ) ; } builder . appendByte ( b ) ; } return builder . toByteString ( ) ; }
public InputBuilder < T > repeatAll ( int times ) { List < T > toAppend = new ArrayList < > ( ) ; for ( int i = _NUM ; i < times ; i ++ ) { toAppend . addAll ( input ) ; } input . addAll ( toAppend ) ; return this ; }
public final void renameClass ( Map classnames ) { String jvmNewThisName = ( String ) classnames . get ( Descriptor . toJvmName ( thisclassname ) ) ; if ( jvmNewThisName != null ) thisclassname = Descriptor . toJavaName ( jvmNewThisName ) ; constPool . renameClass ( classnames ) ; AttributeInfo . renameClass ( attributes , classnames ) ; ArrayList list = methods ; int n = list . size ( ) ; for ( int i = _NUM ; i < n ; ++ i ) { MethodInfo minfo = ( MethodInfo ) list . get ( i ) ; String desc = minfo . getDescriptor ( ) ; minfo . setDescriptor ( Descriptor . rename ( desc , classnames ) ) ; AttributeInfo . renameClass ( minfo . getAttributes ( ) , classnames ) ; } list = fields ; n = list . size ( ) ; for ( int i = _NUM ; i < n ; ++ i ) { FieldInfo finfo = ( FieldInfo ) list . get ( i ) ; String desc = finfo . getDescriptor ( ) ; finfo . setDescriptor ( Descriptor . rename ( desc , classnames ) ) ; AttributeInfo . renameClass ( finfo . getAttributes ( ) , classnames ) ; } }
@ SuppressWarnings ( _STR ) public void handleButton3Request ( RequestInvocationEvent event ) { backTrail ( ) ; try { String name = ( String ) getPageSessionAttribute ( SAVE_VB_NAME ) ; ViewBean vb = getViewBean ( Class . forName ( name ) ) ; passPgSessionMap ( vb ) ; vb . forwardTo ( getRequestContext ( ) ) ; } catch ( ClassNotFoundException e ) { debug . warning ( _STR , e ) ; } }
public IonException ( Throwable cause ) { super ( cause . getMessage ( ) , cause ) ; }
public final double distance ( ) { return Math . sqrt ( distance_square ( ) ) ; }
@ Override public void done ( ) { super . done ( ) ; if ( mNumTestsExpected > mNumTestsRun ) { handleTestRunFailed ( String . format ( _STR , mNumTestsExpected , mNumTestsRun ) ) ; } else if ( mTestRunInProgress ) { handleTestRunFailed ( _STR ) ; } }
public List < Challenge > challenges ( ) { String responseField ; if ( code == HTTP_UNAUTHORIZED ) { responseField = _STR ; } else if ( code == HTTP_PROXY_AUTH ) { responseField = _STR ; } else { return Collections . emptyList ( ) ; } return OkHeaders . parseChallenges ( headers ( ) , responseField ) ; }
byte [ ] toBytes ( SSLSession session ) { if ( ! ( session instanceof OpenSSLSessionImpl ) ) { return null ; } OpenSSLSessionImpl sslSession = ( OpenSSLSessionImpl ) session ; try { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream daos = new DataOutputStream ( baos ) ; daos . writeInt ( OPEN_SSL ) ; byte [ ] data = sslSession . getEncoded ( ) ; daos . writeInt ( data . length ) ; daos . write ( data ) ; Certificate [ ] certs = session . getPeerCertificates ( ) ; daos . writeInt ( certs . length ) ; for ( Certificate cert : certs ) { data = cert . getEncoded ( ) ; daos . writeInt ( data . length ) ; daos . write ( data ) ; } return baos . toByteArray ( ) ; } catch ( IOException e ) { log ( e ) ; return null ; } catch ( CertificateEncodingException e ) { log ( e ) ; return null ; } }
public MersenneTwister ( ) { mt = new int [ N ] ; setSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ; }
private void verifyTimestamp ( X509Certificate cert ) throws CertPathValidatorException { String msg = _STR ; if ( debug != null ) debug . println ( _STR + msg + _STR + date . toString ( ) + _STR ) ; try { cert . checkValidity ( date ) ; } catch ( CertificateExpiredException e ) { throw new CertPathValidatorException ( msg + _STR , e , null , - _NUM , BasicReason . EXPIRED ) ; } catch ( CertificateNotYetValidException e ) { throw new CertPathValidatorException ( msg + _STR , e , null , - _NUM , BasicReason . NOT_YET_VALID ) ; } if ( debug != null ) debug . println ( msg + _STR ) ; }
public static byte [ ] encryptPassword ( final String password , final byte [ ] seed ) throws NoSuchAlgorithmException { if ( password == null || password . equals ( _STR ) ) { return new byte [ _NUM ] ; } final MessageDigest messageDigest = MessageDigest . getInstance ( _STR ) ; final byte [ ] stage1 = messageDigest . digest ( password . getBytes ( ) ) ; messageDigest . reset ( ) ; final byte [ ] stage2 = messageDigest . digest ( stage1 ) ; messageDigest . reset ( ) ; messageDigest . update ( seed ) ; messageDigest . update ( stage2 ) ; final byte [ ] digest = messageDigest . digest ( ) ; final byte [ ] returnBytes = new byte [ digest . length ] ; for ( int i = _NUM ; i < digest . length ; i ++ ) { returnBytes [ i ] = ( byte ) ( stage1 [ i ] ^ digest [ i ] ) ; } return returnBytes ; }
public int rows ( ) { return rows ; }
private static byte [ ] streamToBytes ( InputStream in , int length ) throws IOException { byte [ ] bytes = new byte [ length ] ; int count ; int pos = _NUM ; while ( pos < length && ( ( count = in . read ( bytes , pos , length - pos ) ) != - _NUM ) ) { pos += count ; } if ( pos != length ) { throw new IOException ( _STR + length + _STR + pos + _STR ) ; } return bytes ; }
public static String array2hex ( final byte [ ] array ) { return byteArray2String ( array , _STR , _STR , _BOOL , _NUM ) ; }
private byte [ ] writeCheckedBytes ( MessageNano proto ) { BackupProtos . CheckedMessage wrapper = new BackupProtos . CheckedMessage ( ) ; wrapper . payload = MessageNano . toByteArray ( proto ) ; CRC32 checksum = new CRC32 ( ) ; checksum . update ( wrapper . payload ) ; wrapper . checksum = checksum . getValue ( ) ; return MessageNano . toByteArray ( wrapper ) ; }
public double reduceTo ( int width , int height , double limit ) { int w = getIconWidth ( ) ; int h = getIconHeight ( ) ; double scale = _NUM ; if ( w > width ) { scale = ( ( double ) width ) / w ; } if ( h > height ) { scale = Math . min ( scale , ( ( double ) height ) / h ) ; } if ( scale < _NUM ) { if ( limit > _NUM ) { scale = Math . max ( scale , limit ) ; } AffineTransform t = AffineTransform . getScaleInstance ( scale , scale ) ; transformImage ( ( int ) Math . ceil ( scale * w ) , ( int ) Math . ceil ( scale * h ) , t , null ) ; } return scale ; }
public void installBuiltinSound ( String soundIdentifier , InputStream data ) throws IOException { builtinSounds . put ( soundIdentifier , convertBuiltinSound ( data ) ) ; }
private Integer countFragmentFilteredPages ( List < String > templateFragments , boolean whitelist ) throws WikiApiException { try { int count = _NUM ; PreparedStatement statement = null ; ResultSet result = null ; try { StringBuffer sqlString = new StringBuffer ( ) ; StringBuffer subconditions = new StringBuffer ( ) ; sqlString . append ( _STR + GeneratorConstants . TABLE_TPLID_TPLNAME + _STR + GeneratorConstants . TABLE_TPLID_PAGEID + _STR + ( whitelist ? _STR : _STR ) + _STR ) ; for ( @ SuppressWarnings ( _STR ) String fragment : templateFragments ) { if ( subconditions . length ( ) != _NUM ) { subconditions . append ( _STR ) ; } subconditions . append ( _STR ) ; } sqlString . append ( subconditions ) ; sqlString . append ( _STR ) ; statement = connection . prepareStatement ( sqlString . toString ( ) ) ; int curIdx = _NUM ; for ( String fragment : templateFragments ) { fragment = fragment . toLowerCase ( ) ; fragment = fragment . trim ( ) ; fragment = fragment . replaceAll ( _STR , _STR ) ; statement . setString ( curIdx ++ , fragment + _STR ) ; } result = execute ( statement ) ; if ( result == null ) { return _NUM ; } if ( result . next ( ) ) { count = result . getInt ( _NUM ) ; } } finally { if ( statement != null ) { statement . close ( ) ; } if ( result != null ) { result . close ( ) ; } } return count ; } catch ( Exception e ) { throw new WikiApiException ( e ) ; } }
public static int findName ( String name , int [ ] table ) { for ( int i = _NUM ; i < table . length ; i ++ ) { if ( name . equals ( getName ( table [ i ] ) ) ) { return i ; } } return - _NUM ; }
private static Bitmap transform ( Matrix scaler , Bitmap source , int targetWidth , int targetHeight , int options ) { Log . i ( TAG , _STR ) ; boolean scaleUp = ( options & _NUM ) != _NUM ; boolean recycle = ( options & _NUM ) != _NUM ; int deltaX = source . getWidth ( ) - targetWidth ; int deltaY = source . getHeight ( ) - targetHeight ; if ( ! scaleUp && ( deltaX < _NUM || deltaY < _NUM ) ) { Log . i ( TAG , _STR ) ; Bitmap b2 = Bitmap . createBitmap ( targetWidth , targetHeight , Bitmap . Config . ARGB_8888 ) ; Canvas c = new Canvas ( b2 ) ; int deltaXHalf = Math . max ( _NUM , deltaX / _NUM ) ; int deltaYHalf = Math . max ( _NUM , deltaY / _NUM ) ; Rect src = new Rect ( deltaXHalf , deltaYHalf , deltaXHalf + Math . min ( targetWidth , source . getWidth ( ) ) , deltaYHalf + Math . min ( targetHeight , source . getHeight ( ) ) ) ; int dstX = ( targetWidth - src . width ( ) ) / _NUM ; int dstY = ( targetHeight - src . height ( ) ) / _NUM ; Rect dst = new Rect ( dstX , dstY , targetWidth - dstX , targetHeight - dstY ) ; c . drawBitmap ( source , src , dst , null ) ; if ( recycle ) { source . recycle ( ) ; } c . setBitmap ( null ) ; Log . i ( TAG , _STR ) ; return b2 ; } float bitmapWidthF = source . getWidth ( ) ; float bitmapHeightF = source . getHeight ( ) ; Log . i ( TAG , _STR + bitmapWidthF + _STR + bitmapHeightF ) ; float bitmapAspect = bitmapWidthF / bitmapHeightF ; float viewAspect = ( float ) targetWidth / targetHeight ; Log . i ( TAG , _STR + targetWidth + _STR + targetHeight ) ; if ( bitmapAspect > viewAspect ) { float scale = targetHeight / bitmapHeightF ; if ( scale < _NUM || scale > _NUM ) { scaler . setScale ( scale , scale ) ; } else { scaler = null ; } } else { float scale = targetWidth / bitmapWidthF ; if ( scale < _NUM || scale > _NUM ) { scaler . setScale ( scale , scale ) ; } else { scaler = null ; } } Bitmap b1 ; if ( scaler != null ) { Log . i ( TAG , _STR ) ; b1 = Bitmap . createBitmap ( source , _NUM , _NUM , source . getWidth ( ) , source . getHeight ( ) , scaler , _BOOL ) ; } else { Log . i ( TAG , _STR ) ; b1 = source ; } if ( recycle && b1 != source ) { Log . i ( TAG , _STR ) ; source . recycle ( ) ; } int dx1 = Math . max ( _NUM , b1 . getWidth ( ) - targetWidth ) ; int dy1 = Math . max ( _NUM , b1 . getHeight ( ) - targetHeight ) ; Bitmap b2 = Bitmap . createBitmap ( b1 , dx1 / _NUM , dy1 / _NUM , targetWidth , targetHeight ) ; if ( b2 != b1 ) { if ( recycle || b1 != source ) { Log . i ( TAG , _STR ) ; b1 . recycle ( ) ; } } Log . i ( TAG , _STR ) ; if ( b2 == null ) { Log . i ( TAG , _STR ) ; } return b2 ; }
private void scoreTrackResults ( Collection < Track > tracks , SearchQuery query , Collection < ScoredResult > output ) { for ( Track track : tracks ) { double score = scoreTrackResult ( query , track ) ; output . add ( new ScoredResult ( track , score ) ) ; } }
private Long currentTime ( ) { return System . currentTimeMillis ( ) / _NUM ; }
public static void v ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . v ( tag , msg ) ; }
private static byte [ ] encode ( double latitude , double longitude ) { byte [ ] bytes = new byte [ _NUM * Integer . BYTES ] ; NumericUtils . intToSortableBytes ( encodeLatitude ( latitude ) , bytes , _NUM ) ; NumericUtils . intToSortableBytes ( encodeLongitude ( longitude ) , bytes , Integer . BYTES ) ; return bytes ; }
public static void putLongVolatile ( Object obj , long off , long val ) { UNSAFE . putLongVolatile ( obj , off , val ) ; }
public static List < String > run ( List < String > commands ) { return Shell . run ( _STR , commands . toArray ( new String [ commands . size ( ) ] ) , null , _BOOL ) ; }
public void circle ( double x , double y , double r ) { if ( r < _NUM ) throw new IllegalArgumentException ( _STR ) ; double xs = scaleX ( x ) ; double ys = scaleY ( y ) ; double ws = factorX ( _NUM * r ) ; double hs = factorY ( _NUM * r ) ; if ( ws <= _NUM && hs <= _NUM ) pixel ( x , y ) ; else offscreen . draw ( new Ellipse2D . Double ( xs - ws / _NUM , ys - hs / _NUM , ws , hs ) ) ; draw ( ) ; }
final public void println ( double v ) { Writer out = this . out ; if ( out == null ) return ; print ( v ) ; try { out . write ( _newline , _NUM , _newline . length ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
public void writeSI32 ( int value ) throws IOException { flushBits ( ) ; out . write ( value & _NUM ) ; out . write ( value > > _NUM ) ; out . write ( value > > _NUM ) ; out . write ( value > > _NUM ) ; bytesWritten += _NUM ; }
private static void map ( final StringBuilder buffer , final ByteSequence sequence , final boolean trim , final boolean foldCase ) { final String value = sequence . toString ( ) ; for ( int i = _NUM ; i < value . length ( ) ; i ++ ) { final char c = value . charAt ( i ) ; if ( MAP_2_NULL . contains ( c ) ) { continue ; } if ( MAP_2_SPACE . contains ( c ) ) { if ( canMapToSpace ( buffer , trim ) ) { buffer . append ( SPACE_CHAR ) ; } continue ; } if ( foldCase ) { final String mapping = CASE_MAP_TABLE . get ( c ) ; if ( mapping != null ) { buffer . append ( mapping ) ; continue ; } } buffer . append ( c ) ; } }
public void addButtonPressedListener ( FieldConfigStringButtonInterface listener ) { if ( buttonPressedListenerList == null ) { buttonPressedListenerList = new ArrayList < FieldConfigStringButtonInterface > ( ) ; } buttonPressedListenerList . add ( listener ) ; }
public void dispose ( ) { logDebug ( _STR ) ; mSetupDone = _BOOL ; if ( mServiceConn != null ) { logDebug ( _STR ) ; if ( mContext != null ) mContext . unbindService ( mServiceConn ) ; mServiceConn = null ; mService = null ; mPurchaseListener = null ; } }
private void fillXMLAttribute ( Attributes att , int index ) { fillQName ( fAttributeQName , att . getURI ( index ) , att . getLocalName ( index ) , att . getQName ( index ) ) ; String type = att . getType ( index ) ; fAttributes . addAttributeNS ( fAttributeQName , ( type != null ) ? type : XMLSymbols . fCDATASymbol , att . getValue ( index ) ) ; }
public JComponent createPropertyGUI ( PropertyConsumer pc ) { this . propertyConsumer = pc ; Properties props = new Properties ( ) ; props = pc . getProperties ( props ) ; Properties info = new Properties ( ) ; info = pc . getPropertyInfo ( info ) ; String prefix = pc . getPropertyPrefix ( ) ; return createPropertyGUI ( prefix , props , info ) ; }
public long copy ( String filename , OutputStream out , long offset , long size ) throws IOException , InterruptedException { if ( size < _NUM ) { return _NUM ; } BufferedInputStream is = new BufferedInputStream ( getFileInputStream ( filename ) ) ; byte [ ] buf = new byte [ _NUM * _NUM ] ; int bytesRead ; long pos = _NUM ; long remaining = size ; try { if ( offset != _NUM ) { is . skip ( offset ) ; pos += offset ; } while ( remaining != _NUM ) { int max = buf . length ; if ( max > remaining ) { max = ( int ) remaining ; } bytesRead = is . read ( buf , _NUM , max ) ; if ( bytesRead == - _NUM ) { break ; } out . write ( buf , _NUM , bytesRead ) ; pos += bytesRead ; remaining -= bytesRead ; } out . flush ( ) ; } catch ( Exception e ) { out . flush ( ) ; } finally { try { is . close ( ) ; } catch ( Exception e ) { } } return pos ; }
private static void deserializeHeader ( KdbHeader kdbHeader , DataInput dataInput ) throws IOException { kdbHeader . setFlags ( dataInput . readInt ( ) ) ; kdbHeader . setVersion ( dataInput . readInt ( ) ) ; byte [ ] buffer = new byte [ _NUM ] ; dataInput . readFully ( buffer ) ; kdbHeader . setMasterSeed ( buffer ) ; buffer = new byte [ _NUM ] ; dataInput . readFully ( buffer ) ; kdbHeader . setEncryptionIv ( buffer ) ; kdbHeader . setGroupCount ( dataInput . readInt ( ) ) ; kdbHeader . setEntryCount ( dataInput . readInt ( ) ) ; byte [ ] buffer32 = new byte [ _NUM ] ; dataInput . readFully ( buffer32 ) ; kdbHeader . setContentHash ( buffer32 ) ; buffer32 = new byte [ _NUM ] ; dataInput . readFully ( buffer32 ) ; kdbHeader . setTransformSeed ( buffer32 ) ; kdbHeader . setTransformRounds ( dataInput . readInt ( ) ) ; }
public List < JCAnnotation > transformAnnotations ( OutputElement target , Tree . Declaration annotated ) { EnumSet < OutputElement > outputs ; if ( annotated instanceof Tree . AnyClass ) { outputs = AnnotationUtil . outputs ( ( Tree . AnyClass ) annotated ) ; } else if ( annotated instanceof Tree . AnyInterface ) { outputs = AnnotationUtil . outputs ( ( Tree . AnyInterface ) annotated ) ; } else if ( annotated instanceof Tree . TypeAliasDeclaration ) { outputs = AnnotationUtil . outputs ( ( Tree . TypeAliasDeclaration ) annotated ) ; } else if ( annotated instanceof Tree . Constructor ) { outputs = AnnotationUtil . outputs ( ( Tree . Constructor ) annotated ) ; } else if ( annotated instanceof Tree . Enumerated ) { outputs = AnnotationUtil . outputs ( ( Tree . Enumerated ) annotated ) ; } else if ( annotated instanceof Tree . AnyMethod ) { outputs = AnnotationUtil . outputs ( ( Tree . AnyMethod ) annotated ) ; } else if ( annotated instanceof Tree . AttributeDeclaration ) { outputs = AnnotationUtil . outputs ( ( Tree . AttributeDeclaration ) annotated ) ; } else if ( annotated instanceof Tree . AttributeGetterDefinition ) { outputs = AnnotationUtil . outputs ( ( Tree . AttributeGetterDefinition ) annotated ) ; } else if ( annotated instanceof Tree . AttributeSetterDefinition ) { outputs = AnnotationUtil . outputs ( ( Tree . AttributeSetterDefinition ) annotated ) ; } else if ( annotated instanceof Tree . ObjectDefinition ) { outputs = AnnotationUtil . outputs ( ( Tree . ObjectDefinition ) annotated ) ; } else { throw BugException . unhandledNodeCase ( annotated ) ; } return transform ( annotated . getDeclarationModel ( ) , target , annotated . getAnnotationList ( ) , outputs ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . insertData ( _NUM , _STR ) ; childData = child . getData ( ) ; assertEquals ( _STR , _STR , childData ) ; }
public boolean areAllPermissionsGranted ( ) { return deniedPermissionResponses . isEmpty ( ) ; }
private String fetchCharsetFromCache ( Client client , Locale loc ) { Map cCache = ( Map ) charsetCache . get ( client . getClientType ( ) ) ; String val = null ; if ( cCache != null ) { val = ( String ) cCache . get ( loc ) ; } return val ; }
public Shape paintLayer ( Graphics g , int offs0 , int offs1 , Shape bounds , JTextComponent c , View view ) { g . setColor ( getColor ( ) ) ; if ( offs0 == view . getStartOffset ( ) && offs1 == view . getEndOffset ( ) ) { Rectangle alloc ; if ( bounds instanceof Rectangle ) alloc = ( Rectangle ) bounds ; else alloc = bounds . getBounds ( ) ; paintSquiggle ( g , alloc ) ; return alloc ; } try { Shape shape = view . modelToView ( offs0 , Position . Bias . Forward , offs1 , Position . Bias . Backward , bounds ) ; Rectangle r = ( shape instanceof Rectangle ) ? ( Rectangle ) shape : shape . getBounds ( ) ; paintSquiggle ( g , r ) ; return r ; } catch ( BadLocationException e ) { e . printStackTrace ( ) ; } return null ; }
public void addControlRoll ( PilotingRollData control ) { controlRolls . addElement ( control ) ; }
void processAddOnChanges ( Window caller , AddOnDependencyChecker . AddOnChangesResult changes ) { if ( addonsDialog != null ) { addonsDialog . setDownloadingUpdates ( ) ; } if ( getView ( ) != null ) { Set < AddOn > addOns = new HashSet < > ( changes . getUninstalls ( ) ) ; addOns . addAll ( changes . getOldVersions ( ) ) ; Set < Extension > extensions = new HashSet < > ( ) ; extensions . addAll ( changes . getUnloadExtensions ( ) ) ; extensions . addAll ( changes . getSoftUnloadExtensions ( ) ) ; if ( ! warnUnsavedResourcesOrActiveActions ( caller , addOns , extensions , _BOOL ) ) { return ; } } uninstallAddOns ( caller , changes . getUninstalls ( ) , _BOOL ) ; Set < AddOn > allAddons = new HashSet < > ( changes . getNewVersions ( ) ) ; allAddons . addAll ( changes . getInstalls ( ) ) ; for ( AddOn addOn : allAddons ) { if ( addonsDialog != null ) { addonsDialog . notifyAddOnDownloading ( addOn ) ; } downloadAddOn ( addOn ) ; } }
public void rederiveColor ( ) { Color src = UIManager . getColor ( uiDefaultParentName ) ; if ( src != null ) { float [ ] tmp = Color . RGBtoHSB ( src . getRed ( ) , src . getGreen ( ) , src . getBlue ( ) , null ) ; tmp [ _NUM ] = clamp ( tmp [ _NUM ] + hOffset ) ; tmp [ _NUM ] = clamp ( tmp [ _NUM ] + sOffset ) ; tmp [ _NUM ] = clamp ( tmp [ _NUM ] + bOffset ) ; int alpha = clamp ( src . getAlpha ( ) + aOffset ) ; argbValue = ( Color . HSBtoRGB ( tmp [ _NUM ] , tmp [ _NUM ] , tmp [ _NUM ] ) & _NUM ) | ( alpha << _NUM ) ; } else { float [ ] tmp = new float [ _NUM ] ; tmp [ _NUM ] = clamp ( hOffset ) ; tmp [ _NUM ] = clamp ( sOffset ) ; tmp [ _NUM ] = clamp ( bOffset ) ; int alpha = clamp ( aOffset ) ; argbValue = ( Color . HSBtoRGB ( tmp [ _NUM ] , tmp [ _NUM ] , tmp [ _NUM ] ) & _NUM ) | ( alpha << _NUM ) ; } }
public static String toString ( int [ ] oid ) { StringBuilder sb = new StringBuilder ( _NUM * oid . length ) ; for ( int i = _NUM ; i < oid . length - _NUM ; ++ i ) { sb . append ( oid [ i ] ) ; sb . append ( _STR ) ; } sb . append ( oid [ oid . length - _NUM ] ) ; return sb . toString ( ) ; }
private void grow ( ) { m_allocatedSize *= _NUM ; boolean newVector [ ] = new boolean [ m_allocatedSize ] ; System . arraycopy ( m_values , _NUM , newVector , _NUM , m_index + _NUM ) ; m_values = newVector ; }
public void onIdleBegin ( ) { _idleCount . incrementAndGet ( ) ; }
private void addSpan ( CacheSpan span ) { TreeSet < CacheSpan > spansForKey = cachedSpans . get ( span . key ) ; if ( spansForKey == null ) { spansForKey = new TreeSet < CacheSpan > ( ) ; cachedSpans . put ( span . key , spansForKey ) ; } spansForKey . add ( span ) ; totalSpace += span . length ; notifySpanAdded ( span ) ; }
public boolean equals ( Object obj ) { if ( this == obj ) { return _BOOL ; } if ( ! ( obj instanceof URIName ) ) { return _BOOL ; } URIName other = ( URIName ) obj ; return uri . equals ( other . getURI ( ) ) ; }
void repaintChildren ( ) { for ( Component child : panel . getComponents ( ) ) { child . repaint ( ) ; } }
private void validateDnsName ( String dnsName ) throws PolicyException { int starIndex = dnsName . indexOf ( _STR ) ; if ( ( starIndex >= _NUM ) && ! dnsName . equals ( _STR ) ) { if ( ( starIndex > _NUM ) || ( ( starIndex == _NUM ) && ( ( dnsName . indexOf ( _STR , _NUM ) != - _NUM ) || ( dnsName . charAt ( _NUM ) != _STR ) ) ) ) { String args [ ] = { DNS_NAME , dnsName } ; throw new PolicyException ( ResBundleUtils . rbName , _STR , args , null ) ; } } }
private static String readComment ( String input , int index ) { String comment = null ; Matcher matcher = COMMENT_PATTERN . matcher ( input . substring ( index ) ) ; if ( matcher . find ( ) ) { comment = matcher . group ( _NUM ) ; comment = comment . substring ( _NUM ) ; } return comment ; }
public static int findNext ( String str , char separator , char escapeChar , int start , StringBuilder split ) { int numPreEscapes = _NUM ; for ( int i = start ; i < str . length ( ) ; i ++ ) { char curChar = str . charAt ( i ) ; if ( numPreEscapes == _NUM && curChar == separator ) { return i ; } else { split . append ( curChar ) ; numPreEscapes = ( curChar == escapeChar ) ? ( ++ numPreEscapes ) % _NUM : _NUM ; } } return - _NUM ; }
private static String guessContentType ( String url ) { url = url . toLowerCase ( ) ; if ( url . endsWith ( _STR ) ) { return _STR ; } else if ( url . endsWith ( _STR ) ) { return _STR ; } else if ( url . matches ( _STR ) ) { return _STR ; } else if ( url . endsWith ( _STR ) ) { return _STR ; } else if ( url . endsWith ( _STR ) ) { return _STR ; } else { return _STR ; } }
public static String extractCSVOutputLineDomain ( String csvOut ) { String tokens [ ] = csvOut . split ( _STR , - _NUM ) ; return tokens [ _NUM ] ; }
public void connect ( ) { connect ( this . logWriter ) ; }
public static boolean doCacheHeaderValidation ( final SolrQueryRequest solrReq , final HttpServletRequest req , final Method reqMethod , final HttpServletResponse resp ) { if ( Method . POST == reqMethod || Method . OTHER == reqMethod ) { return _BOOL ; } final long lastMod = HttpCacheHeaderUtil . calcLastModified ( solrReq ) ; final String etag = HttpCacheHeaderUtil . calcEtag ( solrReq ) ; resp . setDateHeader ( _STR , lastMod ) ; resp . setHeader ( _STR , etag ) ; if ( checkETagValidators ( req , resp , reqMethod , etag ) ) { return _BOOL ; } if ( checkLastModValidators ( req , resp , lastMod ) ) { return _BOOL ; } return _BOOL ; }
public IvrZoneset showActiveIvrZoneset ( ) throws NetworkDeviceControllerException { List < IvrZoneset > zonesets = showIvrZonesets ( _BOOL ) ; return zonesets . isEmpty ( ) ? null : zonesets . get ( _NUM ) ; }
@ SuppressWarnings ( _STR ) public static < K > ImmutableArray < K > empty ( ) { return ( ImmutableArray < K > ) EMPTY ; }
public void replaceNonOptionalNonMinusNodesWith ( final List < IGroupMemberNode > ordered , final boolean recomputeDefinitelyProduced ) { nonOptionalNonMinusNodes . clear ( ) ; nonOptionalNonMinusNodes . addAll ( ordered ) ; if ( recomputeDefinitelyProduced ) { recomputeDefinitelyProduced ( ) ; } }
public static String toString ( Accountable a ) { StringBuilder sb = new StringBuilder ( ) ; toString ( sb , a , _NUM ) ; return sb . toString ( ) ; }
@ Override public int hashCode ( ) { return type << _NUM | value . hashCode ( ) << _NUM | otherValue . hashCode ( ) ; }
protected void deleteTypeVertex ( AtlasVertex instanceVertex , DataTypes . TypeCategory typeCategory , boolean force ) throws AtlasException { switch ( typeCategory ) { case STRUCT : case TRAIT : deleteTypeVertex ( instanceVertex , force ) ; break ; case CLASS : deleteEntities ( Collections . singletonList ( instanceVertex ) ) ; break ; default : throw new IllegalStateException ( _STR + typeCategory + _STR ) ; } }
public static List < String > readToList ( Reader r ) throws IOException { try ( BufferedReader in = new BufferedReader ( r ) ) { List < String > l = new ArrayList < > ( ) ; String line = null ; while ( ( line = in . readLine ( ) ) != null ) l . add ( line ) ; return Collections . unmodifiableList ( l ) ; } }
@ SuppressWarnings ( _STR ) public void addCacheContext ( GridCacheContext cacheCtx ) throws IgniteCheckedException { if ( ctxMap . containsKey ( cacheCtx . cacheId ( ) ) ) { GridCacheContext < K , V > existing = ctxMap . get ( cacheCtx . cacheId ( ) ) ; throw new IgniteCheckedException ( _STR + _STR + cacheCtx . name ( ) + _STR + existing . name ( ) + _STR ) ; } CacheStoreManager mgr = cacheCtx . store ( ) ; if ( mgr . configured ( ) && mgr . isLocal ( ) ) locStoreCnt . incrementAndGet ( ) ; ctxMap . put ( cacheCtx . cacheId ( ) , cacheCtx ) ; }
protected static boolean isCglibGetCallbacks ( AnnotatedMethod am ) { Class < ? > rt = am . getRawType ( ) ; if ( rt == null || ! rt . isArray ( ) ) { return _BOOL ; } Class < ? > compType = rt . getComponentType ( ) ; Package pkg = compType . getPackage ( ) ; if ( pkg != null ) { String pname = pkg . getName ( ) ; if ( pname . startsWith ( _STR ) || pname . startsWith ( _STR ) ) { return _BOOL ; } } return _BOOL ; }
public int compareTo ( NamedMediaType other ) { return _name . compareTo ( other . _name ) ; }
public boolean isModified ( ) { synchronized ( this ) { if ( _isChecking || _isModified ) { return _isModified ; } _isChecking = _BOOL ; } try { long now ; now = CurrentTime . currentTime ( ) ; if ( now < _lastCheckTime + _checkInterval ) return _isModified ; _lastCheckTime = now ; for ( int i = _dependencyList . size ( ) - _NUM ; i >= _NUM ; i -- ) { Dependency dependency = _dependencyList . get ( i ) ; if ( dependency . isModified ( ) ) { dependency . logModified ( log ( ) ) ; _isModified = _BOOL ; return _isModified ; } } return _isModified ; } finally { _isChecking = _BOOL ; } }
protected ReplacedElement newIrreplaceableImageElement ( int cssWidth , int cssHeight ) { BufferedImage missingImage ; ReplacedElement mre ; try { missingImage = ImageUtil . createCompatibleBufferedImage ( cssWidth , cssHeight , BufferedImage . TYPE_INT_RGB ) ; Graphics2D g = missingImage . createGraphics ( ) ; g . setColor ( Color . BLACK ) ; g . setBackground ( Color . WHITE ) ; g . setFont ( new Font ( _STR , Font . PLAIN , _NUM ) ) ; g . drawString ( _STR , _NUM , _NUM ) ; g . dispose ( ) ; mre = new ImageReplacedElement ( missingImage , cssWidth , cssHeight ) ; } catch ( Exception e ) { mre = new EmptyReplacedElement ( cssWidth < _NUM ? _NUM : cssWidth , cssHeight < _NUM ? _NUM : cssHeight ) ; } return mre ; }
public boolean greaterThan ( FXGVersion version ) { return ( compareTo ( version ) > _NUM ) ; }
@ Override public DataSource createDataSource ( Properties properties ) throws SQLException { Properties propertiesCopy = new Properties ( ) ; if ( properties != null ) { propertiesCopy . putAll ( properties ) ; } rejectUnsupportedOptions ( propertiesCopy ) ; rejectPoolingOptions ( propertiesCopy ) ; JdbcDataSource dataSource = new JdbcDataSource ( ) ; setupH2DataSource ( dataSource , propertiesCopy ) ; return dataSource ; }
public Set < String > find ( T object ) { if ( ! locations . containsKey ( object ) ) { locations . put ( object , new HashSet < > ( ) ) ; } return Collections . unmodifiableSet ( locations . get ( object ) ) ; }
private void scrollCurrentItemToCenter ( ) { final ViewItem currItem = mViewItems [ BUFFER_CENTER ] ; if ( currItem == null ) { return ; } final int currentViewCenter = currItem . getCenterX ( ) ; if ( mController . isScrolling ( ) || mIsUserScrolling || isCurrentItemCentered ( ) ) { Log . d ( TAG , _STR + mController . isScrolling ( ) ) ; return ; } int snapInTime = ( int ) ( SNAP_IN_CENTER_TIME_MS * ( ( float ) Math . abs ( mCenterX - currentViewCenter ) ) / mDrawArea . width ( ) ) ; Log . d ( TAG , _STR ) ; mController . scrollToPosition ( currentViewCenter , snapInTime , _BOOL ) ; }
public void addMetaObject ( MetaObject object ) { for ( int k = _NUM ; k < MetaObjects . size ( ) ; ++ k ) { if ( MetaObjects . get ( k ) == null ) { MetaObjects . set ( k , object ) ; return ; } } MetaObjects . add ( object ) ; }
public boolean remove ( String word ) { return m_Words . remove ( word ) ; }
public void testCase12 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . add ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , result . signum ( ) ) ; }
public synchronized void addRecentItem ( T item ) { item = fromString ( toString ( item ) ) ; if ( m_RecentItems . size ( ) > _NUM ) { if ( item . equals ( m_RecentItems . get ( _NUM ) ) ) return ; } m_RecentItems . remove ( item ) ; m_RecentItems . add ( _NUM , item ) ; while ( m_RecentItems . size ( ) > m_MaxCount ) m_RecentItems . remove ( m_RecentItems . size ( ) - _NUM ) ; if ( m_IgnoreChanges ) return ; writeProps ( ) ; updateMenu ( ) ; notifyRecentItemListenersOfAdd ( item ) ; }
private Rect calcBounds ( int index , Paint paint ) { Rect bounds = new Rect ( ) ; CharSequence title = getTitle ( index ) ; bounds . right = ( int ) paint . measureText ( title , _NUM , title . length ( ) ) ; bounds . bottom = ( int ) ( paint . descent ( ) - paint . ascent ( ) ) ; return bounds ; }
public void testInvokeAll2 ( ) throws InterruptedException { ExecutorService e = new ForkJoinPool ( _NUM ) ; PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; List < Future < String > > r = e . invokeAll ( new ArrayList < Callable < String > > ( ) ) ; assertTrue ( r . isEmpty ( ) ) ; } finally { if ( cleaner != null ) { cleaner . close ( ) ; } } }
public void cfgPackage ( ConfigurationValue cfgval , String name , String desc ) { packages . add ( new PackageInfo ( name , desc ) ) ; packageNames . add ( name ) ; }
@ Override public void close ( ) throws IOException { input . close ( ) ; }
private void createBlockMirrorData ( String name , int numBlockMirrors ) throws Exception { Volume volume = new Volume ( ) ; URI volumeURI = URIUtil . createId ( Volume . class ) ; testVolumeURIs . add ( volumeURI ) ; volume . setId ( volumeURI ) ; volume . setLabel ( _STR ) ; URI cgUri = createBlockConsistencyGroup ( _STR ) ; volume . setConsistencyGroup ( cgUri ) ; _dbClient . createObject ( volume ) ; for ( int i = _NUM ; i <= numBlockMirrors ; i ++ ) { BlockMirror blockMirror = new BlockMirror ( ) ; URI blockMirrorURI = URIUtil . createId ( BlockMirror . class ) ; testBlockMirrorURIs . add ( blockMirrorURI ) ; blockMirror . setId ( blockMirrorURI ) ; blockMirror . setLabel ( name + i ) ; blockMirror . setConsistencyGroup ( cgUri ) ; _dbClient . createObject ( blockMirror ) ; } }
@ Override public synchronized void start ( ) { if ( running ) { return ; } LOGGER . info ( _STR ) ; if ( endpoints . isEmpty ( ) ) { int port = config . getInt ( NetworkConfig . Keys . COAP_PORT ) ; LOGGER . log ( Level . INFO , _STR , port ) ; addEndpoint ( new CoapEndpoint ( port , this . config ) ) ; } int started = _NUM ; for ( Endpoint ep : endpoints ) { try { ep . start ( ) ; ++ started ; } catch ( IOException e ) { LOGGER . log ( Level . SEVERE , _STR + ep . getAddress ( ) + _STR , e ) ; } } if ( started == _NUM ) { throw new IllegalStateException ( _STR ) ; } else { running = _BOOL ; } }
public JsonArray add ( String value ) { values . add ( Json . value ( value ) ) ; return this ; }
public boolean retainAll ( AbstractFloatList other ) { if ( other . size ( ) == _NUM ) { if ( size == _NUM ) return _BOOL ; setSize ( _NUM ) ; return _BOOL ; } int limit = other . size ( ) - _NUM ; int j = _NUM ; for ( int i = _NUM ; i < size ; i ++ ) { if ( other . indexOfFromTo ( getQuick ( i ) , _NUM , limit ) >= _NUM ) setQuick ( j ++ , getQuick ( i ) ) ; } boolean modified = ( j != size ) ; setSize ( j ) ; return modified ; }
@ Override public void exceptionCaught ( IoSession session , Throwable cause ) { final IoSessionInputStream in = ( IoSessionInputStream ) session . getAttribute ( KEY_IN ) ; IOException e = null ; if ( cause instanceof StreamIoException ) { e = ( IOException ) cause . getCause ( ) ; } else if ( cause instanceof IOException ) { e = ( IOException ) cause ; } if ( e != null && in != null ) { in . throwException ( e ) ; } else { LOGGER . warn ( _STR , cause ) ; session . close ( _BOOL ) ; } }
protected void clearResult ( ) { md . clearResult ( ) ; localizationResult . setText ( _STR ) ; }
public static < T > String toString ( Collection < T > collection ) { if ( collection == null ) { return _STR ; } if ( collection . isEmpty ( ) ) { return _STR ; } StringBuilder buf = new StringBuilder ( ) ; String delimiter = _STR ; for ( T t : collection ) { if ( t == null ) { continue ; } buf . append ( delimiter ) ; buf . append ( t ) ; delimiter = _STR ; } return buf . toString ( ) ; }
public static float between ( float val , float min , float max ) { return Math . max ( Math . min ( val , max ) , min ) ; }
public static StringBuffer replaceString ( StringBuffer buffer , String [ ] parameters ) { int placeHolderPosition = - _NUM ; String placeHolder = null ; for ( int i = _NUM ; i < parameters . length ; i ++ ) { if ( parameters [ i ] == null ) { break ; } placeHolder = _STR + ( i + _NUM ) + _STR ; placeHolderPosition = buffer . indexOf ( placeHolder ) ; if ( placeHolderPosition != - _NUM ) { buffer . replace ( placeHolderPosition , placeHolderPosition + placeHolder . length ( ) , parameters [ i ] ) ; } else { break ; } } return buffer ; }
private static int lookupQualSelector ( XMPNode arrayNode , String qualName , String qualValue , int aliasForm ) throws XMPException { if ( XML_LANG . equals ( qualName ) ) { qualValue = Utils . normalizeLangValue ( qualValue ) ; int index = XMPNodeUtils . lookupLanguageItem ( arrayNode , qualValue ) ; if ( index < _NUM && ( aliasForm & AliasOptions . PROP_ARRAY_ALT_TEXT ) > _NUM ) { XMPNode langNode = new XMPNode ( ARRAY_ITEM_NAME , null ) ; XMPNode xdefault = new XMPNode ( XML_LANG , X_DEFAULT , null ) ; langNode . addQualifier ( xdefault ) ; arrayNode . addChild ( _NUM , langNode ) ; return _NUM ; } else { return index ; } } else { for ( int index = _NUM ; index < arrayNode . getChildrenLength ( ) ; index ++ ) { XMPNode currItem = arrayNode . getChild ( index ) ; for ( Iterator it = currItem . iterateQualifier ( ) ; it . hasNext ( ) ; ) { XMPNode qualifier = ( XMPNode ) it . next ( ) ; if ( qualName . equals ( qualifier . getName ( ) ) && qualValue . equals ( qualifier . getValue ( ) ) ) { return index ; } } } return - _NUM ; } }
public boolean isMultipleAllowed ( String frameID ) { return multipleFrames . contains ( frameID ) ; }
public String [ ] parseConfiguration ( File xmlFile ) throws SAXException , IOException { Document document = builder . parse ( xmlFile ) ; return ( parseConfiguration ( document ) ) ; }
private double empiricalHSIC ( TetradMatrix Ky , TetradMatrix Kx , TetradMatrix Kz , int m ) { TetradMatrix Kyx = Ky . times ( Kx ) ; TetradMatrix Kyz = Ky . times ( Kz ) ; TetradMatrix Kzx = Kz . times ( Kx ) ; TetradMatrix Kzreg = Kz . copy ( ) ; for ( int i = _NUM ; i < m ; i ++ ) { double ent = ( Kzreg . get ( i , i ) + this . regularizer ) ; Kzreg . set ( i , i , ent ) ; } TetradMatrix A = Kzreg . inverse ( ) ; Kzreg = A . times ( A ) ; TetradMatrix Kyzzregzx = new TetradMatrix ( m , m ) ; A = Kyz . times ( Kzreg ) ; Kyzzregzx = A . times ( Kzx ) ; TetradMatrix Kyzzregzxzzregz = Kyzzregzx . copy ( ) ; Kyzzregzxzzregz = Kyzzregzx . times ( Kz ) ; A = Kyzzregzxzzregz . times ( Kzreg ) ; Kyzzregzxzzregz = A . times ( Kz ) ; double empHSIC = _NUM ; for ( int i = _NUM ; i < m ; i ++ ) { empHSIC += Kyx . get ( i , i ) ; empHSIC += ( - _NUM * Kyzzregzx . get ( i , i ) ) ; empHSIC += Kyzzregzxzzregz . get ( i , i ) ; } empHSIC /= Math . pow ( m - _NUM , _NUM ) ; double Bz = _NUM ; for ( int i = _NUM ; i < ( m - _NUM ) ; i ++ ) { for ( int j = ( i + _NUM ) ; j < m ; j ++ ) { Bz += Math . pow ( Kz . get ( i , j ) , _NUM ) ; Bz += Math . pow ( Kz . get ( j , i ) , _NUM ) ; } } Bz = ( m * ( m - _NUM ) ) / Bz ; empHSIC *= Bz ; return empHSIC ; }
public void create ( String [ ] rpfFilePaths , String outputFile ) throws MakeTocException { create ( rpfFilePaths , outputFile , _BOOL ) ; }
private synchronized void postEvent ( EventInfo eventInfo ) { eventQueue . add ( eventInfo ) ; notifyAll ( ) ; }
public String chooseServerAlias ( String keyType , Principal [ ] issuers , Socket sock ) { return sunX509KeyManager . chooseServerAlias ( keyType , issuers , sock ) ; }
private void processBmpImage ( BufferedImage image ) { if ( ! isError ) { File outputFile = new File ( path , prefix + ( numPage + _NUM ) + _STR ) ; try { ImageIO . write ( image , _STR , outputFile ) ; addTempFile ( outputFile ) ; addScanFile ( outputFile ) ; numPage ++ ; } catch ( IOException e ) { e . printStackTrace ( ) ; endProcess ( _BOOL , _BOOL ) ; } } }
public PathHandler ( String path ) { this ( Paths . get ( path ) ) ; }
public boolean loadLines ( ) { boolean result = _BOOL ; try { m_parser . parse ( new InputSource ( m_reader ) , this ) ; result = _BOOL ; m_success = _BOOL ; } catch ( SAXException e ) { m_errorMessage = _STR ; m_errorDescription = e . getMessage ( ) ; } catch ( IOException e ) { m_errorMessage = _STR ; m_errorDescription = e . getMessage ( ) ; } return result ; }
private void loadIgnoreFile ( final String srcFolder ) { ignoreFile = IgnoreFile . load ( srcFolder ) ; if ( ignoreFile == null ) { loadDefaultExcludePattern ( srcFolder ) ; } }
public boolean removeArg ( final BOp arg ) { if ( arg == null ) throw new IllegalArgumentException ( ) ; if ( arg == this ) throw new IllegalArgumentException ( ) ; if ( args . remove ( arg ) ) { mutation ( ) ; return _BOOL ; } return _BOOL ; }
public static boolean looksLikeAListStyleType ( String val ) { return LIST_TYPES . indexOf ( val ) >= _NUM ; }
public PKCS10Attribute ( PKCS9Attribute attr ) { this . attributeId = attr . getOID ( ) ; this . attributeValue = attr . getValue ( ) ; }
public void createNote ( Note note ) { SQLiteDatabase db = getWritableDatabase ( ) ; String spannableAsHtml = Html . toHtml ( note . getSpannable ( ) ) ; String date = dt . format ( new Date ( ) ) ; ContentValues values = new ContentValues ( ) ; values . put ( KEY_SPANNABLE_NOTE , spannableAsHtml ) ; values . put ( KEY_NOTE_TITLE , note . getTitle ( ) ) ; values . put ( KEY_IMAGE , BitmapConverter . getBytes ( note . getImage ( ) ) ) ; values . put ( KEY_DATE_UPDATED , date ) ; db . insert ( TABLE_NOTES , null , values ) ; db . close ( ) ; }
void verifyUniqueXids ( List < OFMessage > msgs ) { if ( seenXids == null ) seenXids = new HashSet < Long > ( ) ; for ( OFMessage m : msgs ) { long xid = m . getXid ( ) ; assertTrue ( _STR , xid != _NUM ) ; assertFalse ( _STR + xid + _STR , seenXids . contains ( xid ) ) ; seenXids . add ( xid ) ; } }
void addNext ( Node < T > n ) { nextNodes . add ( n ) ; Collections . sort ( nextNodes , isVertical ? verticalComparator : horizontalComparator ) ; }
protected void configDialogPropertyChange ( PropertyChangeEvent event ) { log . debug ( _STR ) ; firePropertyChange ( PropertyChangeID . CONFIG_CHANGE , event . getOldValue ( ) , event . getNewValue ( ) ) ; }
public final String readUTF ( ) throws IOException { return decodeUTF ( readUnsignedShort ( ) ) ; }
private void myAdd ( LinkedList < Integer > l , int i ) { l . add ( i ) ; }
private void resetStateForGridTop ( ) { final int colCount = mColCount ; if ( mItemTops == null || mItemTops . length != colCount ) { mItemTops = new int [ colCount ] ; mItemBottoms = new int [ colCount ] ; } final int top = getPaddingTop ( ) ; Arrays . fill ( mItemTops , top ) ; Arrays . fill ( mItemBottoms , top ) ; mFirstPosition = _NUM ; if ( mRestoreOffsets != null ) Arrays . fill ( mRestoreOffsets , _NUM ) ; }
public String testNextToken ( ) throws IOException { Token t = super . nextToken ( ) ; return Integer . toString ( t . type ) + _STR + t . content + _STR ; }
public static RepaintManager currentManager ( Component c ) { return currentManager ( AppContext . getAppContext ( ) ) ; }
private boolean isRecoverPointInitiator ( String portWWN ) { return portWWN . contains ( RECOVERPOINT_INITIATOR_PREFIX ) ; }
protected boolean isWFXMLChar ( String chardata , Character refInvalidChar ) { if ( chardata == null || ( chardata . length ( ) == _NUM ) ) { return _BOOL ; } char [ ] dataarray = chardata . toCharArray ( ) ; int datalength = dataarray . length ; if ( fIsXMLVersion11 ) { int i = _NUM ; while ( i < datalength ) { if ( XML11Char . isXML11Invalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - _NUM ] ; if ( XMLChar . isHighSurrogate ( ch ) && i < datalength ) { char ch2 = dataarray [ i ++ ] ; if ( XMLChar . isLowSurrogate ( ch2 ) && XMLChar . isSupplemental ( XMLChar . supplemental ( ch , ch2 ) ) ) { continue ; } } refInvalidChar = new Character ( ch ) ; return _BOOL ; } } } else { int i = _NUM ; while ( i < datalength ) { if ( XMLChar . isInvalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - _NUM ] ; if ( XMLChar . isHighSurrogate ( ch ) && i < datalength ) { char ch2 = dataarray [ i ++ ] ; if ( XMLChar . isLowSurrogate ( ch2 ) && XMLChar . isSupplemental ( XMLChar . supplemental ( ch , ch2 ) ) ) { continue ; } } refInvalidChar = new Character ( ch ) ; return _BOOL ; } } } return _BOOL ; }
@ Override public void send ( Buffer buffer ) { _outProxy . write ( _outWriter , buffer , _BOOL ) ; }
@ Override public boolean eIsSet ( int featureID ) { switch ( featureID ) { case EipPackage . ROUTE__OWNED_ENDPOINTS : return ownedEndpoints != null && ! ownedEndpoints . isEmpty ( ) ; case EipPackage . ROUTE__OWNED_CHANNELS : return ownedChannels != null && ! ownedChannels . isEmpty ( ) ; case EipPackage . ROUTE__NAME : return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT . equals ( name ) ; case EipPackage . ROUTE__EXCHANGE_TYPE : return exchangeType != EXCHANGE_TYPE_EDEFAULT ; } return super . eIsSet ( featureID ) ; }
public void removeClickingListener ( OnWheelClickedListener listener ) { clickingListeners . remove ( listener ) ; }
public void addSection ( final Section SECTION ) { if ( null == SECTION ) return ; sections . add ( SECTION ) ; Collections . sort ( sections , new SectionComparator ( ) ) ; fireUpdateEvent ( SECTION_EVENT ) ; }
private int calculatePreferredWrapPosition ( @ NotNull Editor editor , @ NotNull CharSequence text , int tabSize , int spaceSize , int startLineOffset , int endLineOffset , int targetRangeEndOffset ) { boolean hasTabs = _BOOL ; boolean canOptimize = _BOOL ; boolean hasNonSpaceSymbols = _BOOL ; loop : for ( int i = startLineOffset ; i < Math . min ( endLineOffset , targetRangeEndOffset ) ; i ++ ) { char c = text . charAt ( i ) ; switch ( c ) { case _STR : { hasTabs = _BOOL ; if ( hasNonSpaceSymbols ) { canOptimize = _BOOL ; break loop ; } } case _STR : break ; default : hasNonSpaceSymbols = _BOOL ; } } if ( ! hasTabs ) { return wrapPositionForTextWithoutTabs ( startLineOffset , endLineOffset , targetRangeEndOffset ) ; } else if ( canOptimize ) { return wrapPositionForTabbedTextWithOptimization ( text , tabSize , startLineOffset , endLineOffset , targetRangeEndOffset ) ; } else { return wrapPositionForTabbedTextWithoutOptimization ( editor , text , spaceSize , startLineOffset , endLineOffset , targetRangeEndOffset ) ; } }
public void addAll ( OVector v ) { expandFor ( size + v . size - _NUM , null ) ; System . arraycopy ( v . vector , _NUM , vector , size - v . size , v . size ) ; }
private static boolean isOptimizableForDescendantIterator ( Compiler compiler , int stepOpCodePos , int stepIndex ) throws javax . xml . transform . TransformerException { int stepType ; int stepCount = _NUM ; boolean foundDorDS = _BOOL ; boolean foundSelf = _BOOL ; boolean foundDS = _BOOL ; int nodeTestType = OpCodes . NODETYPE_NODE ; while ( OpCodes . ENDOP != ( stepType = compiler . getOp ( stepOpCodePos ) ) ) { if ( nodeTestType != OpCodes . NODETYPE_NODE && nodeTestType != OpCodes . NODETYPE_ROOT ) return _BOOL ; stepCount ++ ; if ( stepCount > _NUM ) return _BOOL ; boolean mightBeProximate = mightBeProximate ( compiler , stepOpCodePos , stepType ) ; if ( mightBeProximate ) return _BOOL ; switch ( stepType ) { case OpCodes . FROM_FOLLOWING : case OpCodes . FROM_FOLLOWING_SIBLINGS : case OpCodes . FROM_PRECEDING : case OpCodes . FROM_PRECEDING_SIBLINGS : case OpCodes . FROM_PARENT : case OpCodes . OP_VARIABLE : case OpCodes . OP_EXTFUNCTION : case OpCodes . OP_FUNCTION : case OpCodes . OP_GROUP : case OpCodes . FROM_NAMESPACE : case OpCodes . FROM_ANCESTORS : case OpCodes . FROM_ANCESTORS_OR_SELF : case OpCodes . FROM_ATTRIBUTES : case OpCodes . MATCH_ATTRIBUTE : case OpCodes . MATCH_ANY_ANCESTOR : case OpCodes . MATCH_IMMEDIATE_ANCESTOR : return _BOOL ; case OpCodes . FROM_ROOT : if ( _NUM != stepCount ) return _BOOL ; break ; case OpCodes . FROM_CHILDREN : if ( ! foundDS && ! ( foundDorDS && foundSelf ) ) return _BOOL ; break ; case OpCodes . FROM_DESCENDANTS_OR_SELF : foundDS = _BOOL ; case OpCodes . FROM_DESCENDANTS : if ( _NUM == stepCount ) return _BOOL ; foundDorDS = _BOOL ; break ; case OpCodes . FROM_SELF : if ( _NUM != stepCount ) return _BOOL ; foundSelf = _BOOL ; break ; default : throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NULL_ERROR_HANDLER , new Object [ ] { Integer . toString ( stepType ) } ) ) ; } nodeTestType = compiler . getStepTestType ( stepOpCodePos ) ; int nextStepOpCodePos = compiler . getNextStepPos ( stepOpCodePos ) ; if ( nextStepOpCodePos < _NUM ) break ; if ( OpCodes . ENDOP != compiler . getOp ( nextStepOpCodePos ) ) { if ( compiler . countPredicates ( stepOpCodePos ) > _NUM ) { return _BOOL ; } } stepOpCodePos = nextStepOpCodePos ; } return _BOOL ; }
public static void pipeAll ( InputStream inStr , OutputStream outStr ) throws IOException { byte [ ] bs = new byte [ BUFFER_SIZE ] ; int numRead ; while ( ( numRead = inStr . read ( bs , _NUM , bs . length ) ) >= _NUM ) { outStr . write ( bs , _NUM , numRead ) ; } }
public void addRule ( String ruleExpression , T resultIfMatched ) { mRuleMap . add ( new MimeMatcherRule ( ruleExpression , resultIfMatched ) ) ; }
protected abstract boolean validateNumber ( ConversationContext context , Number input ) ;
public void sendMessageUntilStopCount ( int stopCount ) { for ( int i = processedWorkerCount ; i < workers . size ( ) ; ++ i ) { ActorRef worker = workers . get ( i ) ; try { Thread . sleep ( _NUM ) ; } catch ( InterruptedException e ) { logger . error ( _STR + e + _STR , e ) ; } worker . tell ( OperationWorkerMsgType . PROCESS_REQUEST , originalManager ) ; processedWorkerCount ++ ; if ( processedWorkerCount > stopCount ) { return ; } logger . debug ( _STR , processedWorkerCount , requestTotalCount , taskIdTrim ) ; } }
ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
public static ArrayList < String > stringToArrayList ( String string ) { return new ArrayList < > ( Arrays . asList ( string . split ( _STR ) ) ) ; }
private String pickCharset ( ) { if ( charset != null ) { return charset ; } else if ( utf8Supported ) { return _STR ; } else { return System . getProperty ( _STR ) ; } }
public void testToEngineeringStringPos ( ) { String a = _STR ; BigDecimal aNumber = new BigDecimal ( a ) ; String result = _STR ; assertEquals ( _STR , result , aNumber . toEngineeringString ( ) ) ; }
@ Override public void clear ( ) { if ( elementCount > _NUM ) { elementCount = _NUM ; Arrays . fill ( elementData , null ) ; modCount ++ ; } }
public void addLayer ( final LayerDefinition layer ) { layer . setMap ( this ) ; layers . add ( layer ) ; }
private List < Rule > readRules ( Reader reader ) throws IOException , IllegalArgumentException { BufferedReader in = new BufferedReader ( reader ) ; List < Rule > rules = new ArrayList < Rule > ( ) ; String line ; while ( ( line = in . readLine ( ) ) != null ) { if ( line . length ( ) == _NUM ) { continue ; } line = line . trim ( ) ; char first = line . charAt ( _NUM ) ; boolean sign = _BOOL ; switch ( first ) { case _STR : sign = _BOOL ; break ; case _STR : sign = _BOOL ; break ; case _STR : case _STR : case _STR : continue ; default : throw new IOException ( _STR + line ) ; } String regex = line . substring ( _NUM ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( _STR + regex + _STR ) ; } Rule rule = createRule ( sign , regex ) ; rules . add ( rule ) ; } return rules ; }
@ SuppressWarnings ( _STR ) @ Override protected Object applyUpdatesToManagedData ( Object updates ) { boolean madeChanges = _BOOL ; List < String > words = ( List < String > ) updates ; log . info ( _STR + words ) ; boolean ignoreCase = getIgnoreCase ( ) ; for ( String word : words ) { if ( ignoreCase ) word = word . toLowerCase ( Locale . ROOT ) ; if ( managedWords . add ( word ) ) { madeChanges = _BOOL ; log . info ( _STR , word ) ; } } return madeChanges ? managedWords : null ; }
protected void drawLabel ( Canvas canvas , String labelText , DefaultRenderer renderer , List < RectF > prevLabelsBounds , int centerX , int centerY , float shortRadius , float longRadius , float currentAngle , float angle , int left , int right , int color , Paint paint , boolean line , boolean display ) { if ( renderer . isShowLabels ( ) || display ) { paint . setColor ( color ) ; double rAngle = Math . toRadians ( _NUM - ( currentAngle + angle / _NUM ) ) ; double sinValue = Math . sin ( rAngle ) ; double cosValue = Math . cos ( rAngle ) ; int x1 = Math . round ( centerX + ( float ) ( shortRadius * sinValue ) ) ; int y1 = Math . round ( centerY + ( float ) ( shortRadius * cosValue ) ) ; int x2 = Math . round ( centerX + ( float ) ( longRadius * sinValue ) ) ; int y2 = Math . round ( centerY + ( float ) ( longRadius * cosValue ) ) ; float size = renderer . getLabelsTextSize ( ) ; float extra = Math . max ( size / _NUM , _NUM ) ; paint . setTextAlign ( Align . LEFT ) ; if ( x1 > x2 ) { extra = - extra ; paint . setTextAlign ( Align . RIGHT ) ; } float xLabel = x2 + extra ; float yLabel = y2 ; float width = right - xLabel ; if ( x1 > x2 ) { width = xLabel - left ; } labelText = getFitText ( labelText , width , paint ) ; float widthLabel = paint . measureText ( labelText ) ; boolean okBounds = _BOOL ; while ( ! okBounds && line ) { boolean intersects = _BOOL ; int length = prevLabelsBounds . size ( ) ; for ( int j = _NUM ; j < length && ! intersects ; j ++ ) { RectF prevLabelBounds = prevLabelsBounds . get ( j ) ; if ( prevLabelBounds . intersects ( xLabel , yLabel , xLabel + widthLabel , yLabel + size ) ) { intersects = _BOOL ; yLabel = Math . max ( yLabel , prevLabelBounds . bottom ) ; } } okBounds = ! intersects ; } if ( line ) { y2 = ( int ) ( yLabel - size / _NUM ) ; canvas . drawLine ( x1 , y1 , x2 , y2 , paint ) ; canvas . drawLine ( x2 , y2 , x2 + extra , y2 , paint ) ; } else { paint . setTextAlign ( Align . CENTER ) ; } canvas . drawText ( labelText , xLabel , yLabel , paint ) ; if ( line ) { prevLabelsBounds . add ( new RectF ( xLabel , yLabel , xLabel + widthLabel , yLabel + size ) ) ; } } }
@ Override public void write ( char c [ ] , int off , int len ) { if ( ( off < _NUM ) || ( off > c . length ) || ( len < _NUM ) || ( ( off + len ) > c . length ) || ( ( off + len ) < _NUM ) ) { throw new IndexOutOfBoundsException ( ) ; } else if ( len == _NUM ) { return ; } int newcount = count + len ; if ( newcount > buf . length ) { buf = Arrays . copyOf ( buf , Math . max ( buf . length << _NUM , newcount ) ) ; } System . arraycopy ( c , off , buf , count , len ) ; count = newcount ; }
@ Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename ( File file ) { LOGGER . debug ( _STR + file . getName ( ) ) ; EpisodeMatchingResult result = new EpisodeMatchingResult ( ) ; String fileName = file . getName ( ) ; result = parseString ( fileName ) ; Collections . sort ( result . episodes ) ; Matcher matcher = stackingMarkerPattern . matcher ( result . name ) ; result . stackingMarkerFound = matcher . matches ( ) ; LOGGER . debug ( _STR + result ) ; return result ; }
public static TypedOperation createArrayCreation ( ArrayType arrayType ) { List < Type > typeList = new ArrayList < > ( ) ; typeList . add ( JavaTypes . INT_TYPE ) ; TypeTuple inputTypes = new TypeTuple ( typeList ) ; return new TypedTermOperation ( new ArrayCreation ( arrayType ) , inputTypes , arrayType ) ; }
public void fireEvent ( final SPARQLUpdateEvent e ) { if ( isReadOnly ( ) ) throw new UnsupportedOperationException ( ) ; if ( e == null ) throw new IllegalArgumentException ( ) ; if ( listeners . isEmpty ( ) ) { return ; } final ISPARQLUpdateListener [ ] a = listeners . toArray ( new ISPARQLUpdateListener [ _NUM ] ) ; for ( ISPARQLUpdateListener l : a ) { final ISPARQLUpdateListener listener = l ; try { listener . updateEvent ( e ) ; } catch ( Throwable t ) { if ( InnerCause . isInnerCause ( t , InterruptedException . class ) ) { throw new RuntimeException ( t ) ; } log . error ( t , t ) ; } } }
public PreferenceBuilder < PreferenceClass > prefType ( Class < PreferenceClass > prefType ) { if ( ! VALID_TYPES . contains ( prefType ) ) { throw new IllegalArgumentException ( _STR + prefType + _STR ) ; } this . prefType = prefType ; return this ; }
private void expungeStaleEntries ( ) { for ( Object x ; ( x = queue . poll ( ) ) != null ; ) { synchronized ( queue ) { @ SuppressWarnings ( _STR ) Entry < K , V > e = ( Entry < K , V > ) x ; int i = indexFor ( e . hash , table . length ) ; Entry < K , V > prev = table [ i ] ; Entry < K , V > p = prev ; while ( p != null ) { Entry < K , V > next = p . next ; if ( p == e ) { if ( prev == e ) table [ i ] = next ; else prev . next = next ; e . value = null ; size -- ; break ; } prev = p ; p = next ; } } } }
protected boolean isNumeric ( String text ) { text = text . trim ( ) ; int tlen = text . length ( ) ; for ( int i = _NUM ; i < tlen ; i ++ ) { if ( Character . isDigit ( text . charAt ( i ) ) == _BOOL ) { return _BOOL ; } } return _BOOL ; }
public static boolean isChar ( String desc ) { return desc . endsWith ( _STR ) ; }
public RSAPublicKeyImpl ( byte [ ] encoded ) throws InvalidKeyException { decode ( encoded ) ; RSAKeyFactory . checkRSAProviderKeyLengths ( n . bitLength ( ) , e ) ; }
Date toDate ( Calendar calendar ) { return calendar . getTime ( ) ; }
public boolean isClientAuthentication ( ) { return clientAuthentication ; }
private JPanel createImageFilePanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . X_AXIS ) ) ; panel . add ( imageFileName ) ; panel . add ( Box . createHorizontalStrut ( _NUM ) ) ; panel . add ( new JButton ( openImageFile ) ) ; return panel ; }
void writeLine ( BufferedWriter writer , String line ) throws IOException { writer . write ( line ) ; writer . newLine ( ) ; }
public Layer childAt ( int index ) { return children . get ( index ) ; }
private static void checkPermission ( ) { SecurityManager security = System . getSecurityManager ( ) ; if ( security != null ) security . checkPermission ( modifyThreadPermission ) ; }
public static Function < Value , Value > ofValue ( ) { return VALUE ; }
public static String removeQuotes ( String s ) { if ( s == null ) { return null ; } String trimmed = s . trim ( ) ; if ( trimmed . length ( ) == _NUM ) { return trimmed ; } int i = nextNonQuoteIndex ( trimmed , _NUM , _BOOL ) ; int j = nextNonQuoteIndex ( trimmed , trimmed . length ( ) - _NUM , _BOOL ) ; return trimmed . substring ( i , j + _NUM ) ; }
public static boolean isDefinedNSDecl ( SerializationHandler serializer , int attr , DTM dtm ) { if ( DTM . NAMESPACE_NODE == dtm . getNodeType ( attr ) ) { String prefix = dtm . getNodeNameX ( attr ) ; String uri = serializer . getNamespaceURIFromPrefix ( prefix ) ; if ( ( null != uri ) && uri . equals ( dtm . getStringValue ( attr ) ) ) return _BOOL ; } return _BOOL ; }
public void testUserDataHandlerNotifiedOfShallowClones ( ) { RecordingHandler handler = new RecordingHandler ( ) ; name . setUserData ( _STR , _STR , handler ) ; name . setUserData ( _STR , _STR , handler ) ; standard . setUserData ( _STR , _STR , handler ) ; waffles . setUserData ( _STR , _STR , handler ) ; Element clonedName = ( Element ) name . cloneNode ( _BOOL ) ; Attr clonedStandard = clonedName . getAttributeNode ( _STR ) ; Set < String > expected = new HashSet < String > ( ) ; expected . add ( notification ( NODE_CLONED , _STR , _STR , name , clonedName ) ) ; expected . add ( notification ( NODE_CLONED , _STR , _STR , name , clonedName ) ) ; expected . add ( notification ( NODE_CLONED , _STR , _STR , standard , clonedStandard ) ) ; assertEquals ( expected , handler . calls ) ; }
public DBasicConstraints ( JDialog parent , byte [ ] value ) throws IOException { super ( parent ) ; setTitle ( res . getString ( _STR ) ) ; initComponents ( ) ; prepopulateWithValue ( value ) ; }
private static int lastIndexOf ( Object o , Object [ ] elements , int index ) { if ( o == null ) { for ( int i = index ; i >= _NUM ; i -- ) if ( elements [ i ] == null ) return i ; } else { for ( int i = index ; i >= _NUM ; i -- ) if ( o . equals ( elements [ i ] ) ) return i ; } return - _NUM ; }
public FloatColumn ( int nrows , int capacity , float defaultValue ) { super ( float . class , new Float ( defaultValue ) ) ; if ( capacity < nrows ) { throw new IllegalArgumentException ( _STR ) ; } m_values = new float [ capacity ] ; Arrays . fill ( m_values , defaultValue ) ; m_size = nrows ; }
void readPRJ ( ) throws IOException { while ( _BOOL ) { String S = isr . readLine ( ) ; if ( S == null ) return ; if ( S . startsWith ( _STR ) ) return ; } }
private void purgeOne ( ) { synchronized ( queue ) { WeakKey key = ( WeakKey ) queue . poll ( ) ; if ( key != null ) { super . remove ( key . getReferenced ( ) ) ; } } }
private void checkAlterPeriodConverters ( ) throws SecurityException { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPermission ( new JodaTimePermission ( _STR ) ) ; } }
public boolean equals ( final ArtifactCoordinates obj ) { return this == obj || obj != null && groupId . equals ( obj . groupId ) && artifactId . equals ( obj . artifactId ) && version . equals ( obj . version ) && classifier . equals ( obj . classifier ) ; }
public synchronized void add ( double x , double y , double value ) { super . add ( x , y ) ; mValue . add ( value ) ; updateRange ( value ) ; }
private void checkMatrixDimensions ( Matrix B ) { if ( B . m != m || B . n != n ) { throw new IllegalArgumentException ( _STR ) ; } }
public void importFromChange ( Change sourceChange ) { if ( sourceChange . revision ( ) > _NUM ) { this . revisionId = new NumericLiteralImpl ( sourceChange . revision ( ) ) ; } if ( sourceChange . timestamp ( ) != null ) { Date date = sourceChange . timestamp ( ) ; Calendar c = Calendar . getInstance ( TimeZone . getTimeZone ( _STR ) , Locale . ROOT ) ; c . setTime ( date ) ; this . lastModified = new LiteralImpl ( DatatypeConverter . printDate ( c ) , XMLSchema . DATETIME ) ; } }
protected PrintWriter lineFileOut ( Document doc ) { return lineFileOut ; }
@ Override public Query newFuzzyQuery ( String text , int fuzziness ) { if ( settings . lowercaseExpandedTerms ( ) ) { text = text . toLowerCase ( settings . locale ( ) ) ; } BooleanQuery . Builder bq = new BooleanQuery . Builder ( ) ; bq . setDisableCoord ( _BOOL ) ; for ( Map . Entry < String , Float > entry : weights . entrySet ( ) ) { try { Query q = new FuzzyQuery ( new Term ( entry . getKey ( ) , text ) , fuzziness ) ; q . setBoost ( entry . getValue ( ) ) ; bq . add ( q , BooleanClause . Occur . SHOULD ) ; } catch ( RuntimeException e ) { rethrowUnlessLenient ( e ) ; } } return super . simplify ( bq . build ( ) ) ; }
public CallChainInfo ( SootMethod m , Stmt s , String type ) { this . type = type ; this . link = _STR ; this . method = m ; this . stmt = s ; calls = _NUM ; if ( type . equals ( _STR ) ) syscalls = _NUM ; }
public void startPlayback ( ) { Log . d ( TAG , _STR ) ; if ( null == mRecordFile ) { Log . e ( TAG , _STR ) ; return ; } mPlayer = new MediaPlayer ( ) ; try { mPlayer . setDataSource ( mRecordFile . getAbsolutePath ( ) ) ; Log . d ( TAG , _STR + mRecordFile . getAbsolutePath ( ) + _STR ) ; mPlayer . setOnCompletionListener ( this ) ; mPlayer . setOnErrorListener ( this ) ; mPlayer . prepare ( ) ; Log . d ( TAG , _STR ) ; mPlayer . start ( ) ; } catch ( IOException e ) { Log . e ( TAG , _STR + e ) ; setError ( ERROR_PLAYER_INTERNAL ) ; return ; } catch ( IllegalArgumentException e ) { Log . e ( TAG , _STR + e ) ; setError ( ERROR_PLAYER_INTERNAL ) ; return ; } catch ( SecurityException e ) { Log . e ( TAG , _STR + e ) ; setError ( ERROR_PLAYER_INTERNAL ) ; return ; } catch ( IllegalStateException e ) { Log . e ( TAG , _STR + e ) ; setError ( ERROR_PLAYER_INTERNAL ) ; return ; } setState ( STATE_PLAYBACK ) ; Log . d ( TAG , _STR ) ; }
public static final double sigma ( double a ) { return _NUM / ( _NUM + Math . exp ( - a ) ) ; }
private void deleteFilesInDir ( File dir ) { for ( File child : dir . listFiles ( ) ) { child . delete ( ) ; } }
public static void notEmpty ( String string , String msg ) { if ( string == null || string . length ( ) == _NUM ) throw new IllegalArgumentException ( msg ) ; }
public static void resetContext ( ) { contexts . set ( null ) ; }
public static Object convertToParameterValues ( Object object ) { Collection < Object > collection ; if ( object instanceof Object [ ] ) { collection = Arrays . asList ( ( Object [ ] ) object ) ; } else if ( object instanceof Collection ) { collection = ( Collection < Object > ) object ; } else { LOGGER . warn ( _STR ) ; return new Object [ ] { } ; } List < Object > s = new LinkedList < Object > ( ) ; for ( Object o : collection ) { Object converted = convertToParameterValue ( o ) ; if ( converted instanceof Object [ ] ) { s . addAll ( Arrays . asList ( ( Object [ ] ) converted ) ) ; } else { s . add ( converted ) ; } } return s . toArray ( new Object [ s . size ( ) ] ) ; }
public boolean logoutUser ( String username , HttpServletRequest req ) { return logoutUser ( username , req , _BOOL , _BOOL ) ; }
public static Operation createOperationToUpdateOrCreateNetworkInterface ( ComputeState existingComputeState , NetworkInterfaceState networkInterface , List < String > tenantLinks , StatelessService service , boolean isPublic ) { String existingInterfaceLink = getExistingNetworkInterfaceLink ( existingComputeState , isPublic ) ; Operation networkInterfaceOperation = null ; if ( existingInterfaceLink == null ) { networkInterfaceOperation = createPostOperation ( service , networkInterface , NetworkInterfaceService . FACTORY_LINK ) ; } else { networkInterfaceOperation = createPatchOperation ( service , networkInterface , existingInterfaceLink ) ; } return networkInterfaceOperation ; }
public CodeSourceFacade ( final CodeSource codeSource ) { this . location = codeSource . getLocation ( ) ; final Certificate [ ] certificates = codeSource . getCertificates ( ) ; if ( null == certificates || _NUM == certificates . length ) { LOGGER . warning ( String . format ( _STR , codeSource ) ) ; this . firstCertificate = null ; return ; } this . firstCertificate = ( X509Certificate ) certificates [ _NUM ] ; }
public static byte [ ] decode ( String encoded ) { if ( encoded == null ) { return null ; } char [ ] base64Data = encoded . toCharArray ( ) ; int len = removeWhiteSpace ( base64Data ) ; if ( len % FOURBYTE != _NUM ) { return null ; } int numberQuadruple = ( len / FOURBYTE ) ; if ( numberQuadruple == _NUM ) { return new byte [ _NUM ] ; } byte decodedData [ ] = null ; byte b1 = _NUM , b2 = _NUM , b3 = _NUM , b4 = _NUM ; char d1 = _NUM , d2 = _NUM , d3 = _NUM , d4 = _NUM ; int i = _NUM ; int encodedIndex = _NUM ; int dataIndex = _NUM ; decodedData = new byte [ ( numberQuadruple ) * _NUM ] ; for ( ; i < numberQuadruple - _NUM ; i ++ ) { if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d3 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d4 = base64Data [ dataIndex ++ ] ) ) ) { return null ; } b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; decodedData [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( b3 << _NUM | b4 ) ; } if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) ) { return null ; } b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; d3 = base64Data [ dataIndex ++ ] ; d4 = base64Data [ dataIndex ++ ] ; if ( ! isData ( ( d3 ) ) || ! isData ( ( d4 ) ) ) { if ( isPad ( d3 ) && isPad ( d4 ) ) { if ( ( b2 & _NUM ) != _NUM ) { return null ; } byte [ ] tmp = new byte [ i * _NUM + _NUM ] ; System . arraycopy ( decodedData , _NUM , tmp , _NUM , i * _NUM ) ; tmp [ encodedIndex ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; return tmp ; } else if ( ! isPad ( d3 ) && isPad ( d4 ) ) { b3 = base64Alphabet [ d3 ] ; if ( ( b3 & _NUM ) != _NUM ) { return null ; } byte [ ] tmp = new byte [ i * _NUM + _NUM ] ; System . arraycopy ( decodedData , _NUM , tmp , _NUM , i * _NUM ) ; tmp [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; tmp [ encodedIndex ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; return tmp ; } else { return null ; } } else { b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; decodedData [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( b3 << _NUM | b4 ) ; } return decodedData ; }
public JdpBroadcaster ( InetAddress address , InetAddress srcAddress , int port , int ttl ) throws IOException , JdpException { this . addr = address ; this . port = port ; ProtocolFamily family = ( address instanceof Inet6Address ) ? StandardProtocolFamily . INET6 : StandardProtocolFamily . INET ; channel = DatagramChannel . open ( family ) ; channel . setOption ( StandardSocketOptions . SO_REUSEADDR , _BOOL ) ; channel . setOption ( StandardSocketOptions . IP_MULTICAST_TTL , ttl ) ; if ( srcAddress != null ) { NetworkInterface interf = NetworkInterface . getByInetAddress ( srcAddress ) ; try { channel . bind ( new InetSocketAddress ( srcAddress , _NUM ) ) ; } catch ( UnsupportedAddressTypeException ex ) { throw new JdpException ( _STR ) ; } channel . setOption ( StandardSocketOptions . IP_MULTICAST_IF , interf ) ; } }
public void close ( ) throws IOException { rrdFile . close ( ) ; }
public Vector rotateInDegree ( double degree ) { return rotateInRadian ( Math . toRadians ( degree ) ) ; }
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
public static String toString ( final URI uri , final Charset encoding ) throws IOException { return IOUtils . toString ( uri . toURL ( ) , Charsets . toCharset ( encoding ) ) ; }
public void put ( int fieldNumber , FieldData data ) { int i = binarySearch ( fieldNumber ) ; if ( i >= _NUM ) { mData [ i ] = data ; } else { i = ~ i ; if ( i < mSize && mData [ i ] == DELETED ) { mFieldNumbers [ i ] = fieldNumber ; mData [ i ] = data ; return ; } if ( mGarbage && mSize >= mFieldNumbers . length ) { gc ( ) ; i = ~ binarySearch ( fieldNumber ) ; } if ( mSize >= mFieldNumbers . length ) { int n = idealIntArraySize ( mSize + _NUM ) ; int [ ] nkeys = new int [ n ] ; FieldData [ ] nvalues = new FieldData [ n ] ; System . arraycopy ( mFieldNumbers , _NUM , nkeys , _NUM , mFieldNumbers . length ) ; System . arraycopy ( mData , _NUM , nvalues , _NUM , mData . length ) ; mFieldNumbers = nkeys ; mData = nvalues ; } if ( mSize - i != _NUM ) { System . arraycopy ( mFieldNumbers , i , mFieldNumbers , i + _NUM , mSize - i ) ; System . arraycopy ( mData , i , mData , i + _NUM , mSize - i ) ; } mFieldNumbers [ i ] = fieldNumber ; mData [ i ] = data ; mSize ++ ; } }
void hideBorder ( ) { Insets insets = getInsets ( ) ; setBorder ( BorderFactory . createEmptyBorder ( insets . top , insets . left , insets . bottom , insets . right ) ) ; }
public void remove ( String btxn ) { synchronized ( filterMap ) { FilterProcessor oldfp = filterMap . get ( btxn ) ; if ( oldfp != null ) { globalExclusionFilters . remove ( oldfp ) ; btxnFilters . remove ( oldfp ) ; } } }
public void add ( double weight , double x , double y ) { observations . add ( new WeightedObservedPoint ( weight , x , y ) ) ; }
public boolean addTagId ( final Long tagId ) { if ( tagId != null && tagId > _NUM ) { return tagIds . add ( tagId ) ; } return _BOOL ; }
public void supportTlsIntolerantServer ( SSLSocket socket ) { socket . setEnabledProtocols ( new String [ ] { _STR } ) ; }
@ SuppressLint ( _STR ) @ TargetApi ( Build . VERSION_CODES . KITKAT ) private static Platform findPlatform ( ) { try { try { Class . forName ( _STR ) ; } catch ( ClassNotFoundException e ) { Class . forName ( _STR ) ; } OptionalMethod < Socket > setUseSessionTickets = new OptionalMethod < > ( null , _STR , boolean . class ) ; OptionalMethod < Socket > setHostname = new OptionalMethod < > ( null , _STR , String . class ) ; Method trafficStatsTagSocket = null ; Method trafficStatsUntagSocket = null ; OptionalMethod < Socket > getAlpnSelectedProtocol = null ; OptionalMethod < Socket > setAlpnProtocols = null ; try { Class < ? > trafficStats = Class . forName ( _STR ) ; trafficStatsTagSocket = trafficStats . getMethod ( _STR , Socket . class ) ; trafficStatsUntagSocket = trafficStats . getMethod ( _STR , Socket . class ) ; try { Class . forName ( _STR ) ; getAlpnSelectedProtocol = new OptionalMethod < > ( byte [ ] . class , _STR ) ; setAlpnProtocols = new OptionalMethod < > ( null , _STR , byte [ ] . class ) ; } catch ( ClassNotFoundException ignored ) { } } catch ( ClassNotFoundException | NoSuchMethodException ignored ) { } return new Android ( setUseSessionTickets , setHostname , trafficStatsTagSocket , trafficStatsUntagSocket , getAlpnSelectedProtocol , setAlpnProtocols ) ; } catch ( ClassNotFoundException ignored ) { } try { String negoClassName = _STR ; Class < ? > negoClass = Class . forName ( negoClassName ) ; Class < ? > providerClass = Class . forName ( negoClassName + _STR ) ; Class < ? > clientProviderClass = Class . forName ( negoClassName + _STR ) ; Class < ? > serverProviderClass = Class . forName ( negoClassName + _STR ) ; Method putMethod = negoClass . getMethod ( _STR , SSLSocket . class , providerClass ) ; Method getMethod = negoClass . getMethod ( _STR , SSLSocket . class ) ; Method removeMethod = negoClass . getMethod ( _STR , SSLSocket . class ) ; return new JdkWithJettyBootPlatform ( putMethod , getMethod , removeMethod , clientProviderClass , serverProviderClass ) ; } catch ( ClassNotFoundException | NoSuchMethodException ignored ) { } return new Platform ( ) ; }
public static List < ExecutionEntity > orderFromRootToLeaf ( Collection < ExecutionEntity > executions ) { List < ExecutionEntity > orderedList = new ArrayList < ExecutionEntity > ( executions . size ( ) ) ; HashSet < String > previousIds = new HashSet < String > ( ) ; for ( ExecutionEntity execution : executions ) { if ( execution . getParentId ( ) == null ) { orderedList . add ( execution ) ; previousIds . add ( execution . getId ( ) ) ; } } while ( orderedList . size ( ) < executions . size ( ) ) { for ( ExecutionEntity execution : executions ) { if ( ! previousIds . contains ( execution . getId ( ) ) && previousIds . contains ( execution . getParentId ( ) ) ) { orderedList . add ( execution ) ; previousIds . add ( execution . getId ( ) ) ; } } } return orderedList ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public void initTKF91 ( ) { int iNumNodes = iParent . length ; double iBeta [ ] = new double [ iNumNodes ] ; iB = new double [ iNumNodes ] ; iE = new double [ iNumNodes ] ; iH = new double [ iNumNodes ] ; iN = new double [ iNumNodes ] ; iInitial = _NUM ; for ( int i = _NUM ; i < iNumNodes ; i ++ ) { if ( i == iNumNodes - _NUM ) { iBeta [ i ] = _NUM / iMu ; iH [ i ] = _NUM ; } else { iBeta [ i ] = Math . exp ( ( iLambda - iMu ) * iTau [ i ] ) ; iBeta [ i ] = ( _NUM - iBeta [ i ] ) / ( iMu - iLambda * iBeta [ i ] ) ; iH [ i ] = Math . exp ( - iMu * iTau [ i ] ) * ( _NUM - iLambda * iBeta [ i ] ) ; } iB [ i ] = iLambda * iBeta [ i ] ; iE [ i ] = iMu * iBeta [ i ] ; iN [ i ] = ( _NUM - iMu * iBeta [ i ] ) * ( _NUM - iB [ i ] ) - iH [ i ] ; iInitial *= ( _NUM - iB [ i ] ) ; } }
public static String serializeExpression ( Node s ) { if ( s instanceof ASTTerm ) { ASTTerm a = ( ASTTerm ) s ; return ( a . isNotFlag ( ) ? _STR : _STR ) + _STR + a . getTerm ( ) ; } String prefix = _STR ; String suffix = _STR ; String join = _STR ; if ( s instanceof ASTExpression ) { ASTExpression a = ( ASTExpression ) s ; prefix = ( a . isNotFlag ( ) ? _STR : _STR ) + _STR ; suffix = _STR ; join = _STR + a . getType ( ) + _STR ; } List < String > children = new ArrayList < String > ( ) ; for ( int i = _NUM ; i < s . jjtGetNumChildren ( ) ; i ++ ) { children . add ( serializeExpression ( s . jjtGetChild ( i ) ) ) ; } return prefix + StringUtils . join ( children , join ) + suffix ; }
private void defineInternalFrameMenuButtons ( UIDefaults d ) { String p = _STR ; String c = PAINTER_PREFIX + _STR ; d . put ( p + _STR , new TitlePaneMenuButtonWindowNotFocusedState ( ) ) ; d . put ( p + _STR , new InsetsUIResource ( _NUM , _NUM , _NUM , _NUM ) ) ; d . put ( p + _STR , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_ENABLED ) ) ; d . put ( p + _STR , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_DISABLED ) ) ; d . put ( p + _STR , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_MOUSEOVER ) ) ; d . put ( p + _STR , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_PRESSED ) ) ; d . put ( p + _STR , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_ENABLED_WINDOWNOTFOCUSED ) ) ; d . put ( p + _STR , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_MOUSEOVER_WINDOWNOTFOCUSED ) ) ; d . put ( p + _STR , new LazyPainter ( c , TitlePaneMenuButtonPainter . Which . ICON_PRESSED_WINDOWNOTFOCUSED ) ) ; d . put ( p + _STR , new SeaGlassIcon ( p , _STR , _NUM , _NUM ) ) ; }
public static Workflow . Method restoreFromCloneMethod ( URI storage , List < URI > clone , Boolean updateOpStatus , boolean isCG ) { return new Workflow . Method ( _STR , storage , clone , updateOpStatus , isCG ) ; }
@ Override public synchronized void removeDataSourceListener ( DataSourceListener dsl ) { m_dataSourceListeners . remove ( dsl ) ; }
public String rightStr ( String str , int length ) { return str . substring ( Math . max ( _NUM , str . length ( ) - length ) ) ; }
public void clearNameInUnoccupiedBlocks ( ) { for ( int i = _NUM ; i < mBlockEntries . size ( ) ; i ++ ) { Block b = mBlockEntries . get ( i ) ; if ( b . getState ( ) == Block . UNOCCUPIED ) { b . setValue ( _STR ) ; } } }
public static Object unserialize ( Data data ) { try { Class clazz = ( Class ) Class . forName ( ( String ) data . get ( _STR ) ) ; if ( clazz . isEnum ( ) ) { return Enum . valueOf ( clazz , data . get ( _STR ) ) ; } else if ( clazz == Vector3D . class ) { return new Vector3D ( data . get ( _STR ) , data . get ( _STR ) , data . get ( _STR ) ) ; } else if ( clazz == Vector2D . class ) { return new Vector2D ( data . get ( _STR ) , ( double ) data . get ( _STR ) ) ; } else { return unserialize ( clazz , data ) ; } } catch ( Exception e ) { throw new DataException ( e ) ; } }
public static void onGridStop ( ) throws InterruptedException { synchronized ( mux ) { if ( gridCnt == _NUM ) return ; -- gridCnt ; Thread timer0 = timer ; if ( gridCnt == _NUM && timer0 != null ) { timer = null ; timer0 . interrupt ( ) ; timer0 . join ( ) ; } } }
public void pushTemplateFolder ( @ NotNull String folderName ) throws IOException { myLastTemplateFolders . push ( resolveName ( folderName ) ) ; }
public void printDepthFirst ( ) { print ( new DepthFirstEnumerator ( _firstNode ) ) ; }
protected void drawHorizontalBezier ( Canvas c , ILineDataSet dataSet ) { Transformer trans = mChart . getTransformer ( dataSet . getAxisDependency ( ) ) ; int entryCount = dataSet . getEntryCount ( ) ; Entry entryFrom = dataSet . getEntryForXIndex ( ( mMinX < _NUM ) ? _NUM : mMinX , DataSet . Rounding . DOWN ) ; Entry entryTo = dataSet . getEntryForXIndex ( mMaxX , DataSet . Rounding . UP ) ; int diff = ( entryFrom == entryTo ) ? _NUM : _NUM ; int minx = Math . max ( dataSet . getEntryIndex ( entryFrom ) - diff , _NUM ) ; int maxx = Math . min ( Math . max ( minx + _NUM , dataSet . getEntryIndex ( entryTo ) + _NUM ) , entryCount ) ; float phaseX = Math . max ( _NUM , Math . min ( _NUM , mAnimator . getPhaseX ( ) ) ) ; float phaseY = mAnimator . getPhaseY ( ) ; cubicPath . reset ( ) ; int size = ( int ) Math . ceil ( ( maxx - minx ) * phaseX + minx ) ; if ( size - minx >= _NUM ) { Entry prev = dataSet . getEntryForIndex ( minx ) ; Entry cur = prev ; cubicPath . moveTo ( cur . getXIndex ( ) , cur . getVal ( ) * phaseY ) ; for ( int j = minx + _NUM , count = Math . min ( size , entryCount ) ; j < count ; j ++ ) { prev = dataSet . getEntryForIndex ( j - _NUM ) ; cur = dataSet . getEntryForIndex ( j ) ; final float cpx = ( float ) ( prev . getXIndex ( ) ) + ( float ) ( cur . getXIndex ( ) - prev . getXIndex ( ) ) / _NUM ; cubicPath . cubicTo ( cpx , prev . getVal ( ) * phaseY , cpx , cur . getVal ( ) * phaseY , cur . getXIndex ( ) , cur . getVal ( ) * phaseY ) ; } } if ( dataSet . isDrawFilledEnabled ( ) ) { cubicFillPath . reset ( ) ; cubicFillPath . addPath ( cubicPath ) ; drawCubicFill ( mBitmapCanvas , dataSet , cubicFillPath , trans , minx , size ) ; } mRenderPaint . setColor ( dataSet . getColor ( ) ) ; mRenderPaint . setStyle ( Paint . Style . STROKE ) ; trans . pathValueToPixel ( cubicPath ) ; mBitmapCanvas . drawPath ( cubicPath , mRenderPaint ) ; mRenderPaint . setPathEffect ( null ) ; }
public void addEvent ( SimEvent newEvent ) { double eventTime = newEvent . eventTime ( ) ; if ( eventTime >= maxTime ) { list . add ( newEvent ) ; maxTime = eventTime ; return ; } ListIterator < SimEvent > iterator = list . listIterator ( ) ; SimEvent event ; while ( iterator . hasNext ( ) ) { event = iterator . next ( ) ; if ( event . eventTime ( ) > eventTime ) { iterator . previous ( ) ; iterator . add ( newEvent ) ; return ; } } list . add ( newEvent ) ; }
public DbSchemaEjbGenerator ( GeneratedTables genTables , SchemaElement schemaElement ) { this ( genTables , schemaElement , CollectionType . COLLECTION , _BOOL , _BOOL , _BOOL ) ; }
@ Override public void initialize ( ) { board = null ; switch ( simPaneCtrl . getParamValueIndex ( PARAM_INIT_CONF ) ) { case _NUM : board = new EightPuzzleBoard ( new int [ ] { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ) ; break ; case _NUM : board = new EightPuzzleBoard ( new int [ ] { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ) ; break ; case _NUM : board = new EightPuzzleBoard ( new int [ ] { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ) ; break ; case _NUM : board = new EightPuzzleBoard ( new int [ ] { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ) ; Random r = new Random ( System . currentTimeMillis ( ) ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { switch ( r . nextInt ( _NUM ) ) { case _NUM : board . moveGapUp ( ) ; break ; case _NUM : board . moveGapDown ( ) ; break ; case _NUM : board . moveGapLeft ( ) ; break ; case _NUM : board . moveGapRight ( ) ; break ; } } } stateViewCtrl . initialize ( board ) ; }
protected abstract void onOpen ( HTableInterface tbl , Scan scan ) throws IOException ;
private static void addAbbreviation ( String primitive , String abbreviation ) { abbreviationMap . put ( primitive , abbreviation ) ; reverseAbbreviationMap . put ( abbreviation , primitive ) ; }
private void initTreeMap ( ) { if ( entityType == null ) { entityType = _STR ; } if ( entityType . equalsIgnoreCase ( _STR ) ) { imageMap = RotatingEntityManager . getCircle ( ) ; } if ( entityType . equalsIgnoreCase ( _STR ) ) { imageMap = RotatingEntityManager . getMouse ( ) ; } else if ( entityType . equalsIgnoreCase ( _STR ) ) { imageMap = RotatingEntityManager . getRotatingTileset ( _STR , _NUM ) ; } else if ( entityType . equalsIgnoreCase ( _STR ) ) { imageMap = RotatingEntityManager . getRotatingTileset ( _STR , _NUM ) ; } else if ( entityType . equalsIgnoreCase ( _STR ) ) { imageMap = RotatingEntityManager . getRotatingTileset ( _STR , _NUM ) ; } else if ( entityType . equalsIgnoreCase ( _STR ) ) { imageMap = RotatingEntityManager . getRotatingTileset ( _STR , _NUM ) ; } else if ( entityType . equalsIgnoreCase ( _STR ) ) { imageMap = RotatingEntityManager . getRotatingTileset ( _STR , _NUM ) ; } else if ( entityType . equalsIgnoreCase ( _STR ) ) { imageMap = RotatingEntityManager . getRotatingTileset ( _STR , _NUM ) ; } else if ( entityType . equalsIgnoreCase ( _STR ) ) { imageMap = RotatingEntityManager . getRotatingTileset ( _STR , _NUM ) ; } else if ( entityType . equalsIgnoreCase ( _STR ) ) { imageMap = RotatingEntityManager . getRotatingTileset ( _STR , _NUM ) ; } else if ( entityType . equalsIgnoreCase ( _STR ) ) { imageMap = RotatingEntityManager . getRotatingTileset ( _STR , _NUM ) ; } update ( ) ; }
public static File locateReplicatorHomeDir ( ) { if ( replicatorHomeDir == null ) { String replicatorHome = System . getProperty ( HOME_DIR ) ; if ( replicatorHome == null ) replicatorHome = System . getProperty ( _STR ) ; replicatorHomeDir = new File ( replicatorHome ) ; if ( ! replicatorHomeDir . isDirectory ( ) ) { throw new ServerRuntimeException ( _STR + replicatorHomeDir ) ; } } return replicatorHomeDir ; }
public StringData ( String data ) { m_data = data ; }
void writeRepeatedSqr ( DD xdd ) { if ( xdd . ge ( DD . valueOf ( _NUM ) ) ) throw new IllegalArgumentException ( _STR ) ; int count = _NUM ; while ( xdd . doubleValue ( ) > _NUM ) { count ++ ; if ( count == _NUM ) count = count ; double x = xdd . doubleValue ( ) ; DD xSqr = xdd . sqr ( ) ; String s = xSqr . toString ( ) ; DD xSqr2 = DD . parse ( s ) ; xdd = xSqr ; } }
public java . lang . StringBuffer append ( float f ) { internal . append ( f ) ; return this ; }
public static final void open ( File file ) throws NoSuchMethodException { if ( Platform . isMacOSX ( ) ) { execArgs ( _STR , file . getAbsolutePath ( ) ) ; } else if ( Platform . isWindows ( ) ) { if ( file . isDirectory ( ) ) { execArgs ( _STR , file . getAbsolutePath ( ) ) ; } else { execArgs ( _STR , file . getAbsolutePath ( ) ) ; } } else if ( Platform . isUnix ( ) && hasUnixCommand ( _STR ) ) { execArgs ( _STR , file . toString ( ) ) ; } else if ( Platform . isUnix ( ) && hasUnixCommand ( _STR ) ) { execArgs ( _STR , file . toString ( ) ) ; } else if ( Platform . isSolaris ( ) && file . isDirectory ( ) ) { execArgs ( _STR , _STR , file . getAbsolutePath ( ) ) ; } else { throw new NoSuchMethodException ( _STR ) ; } }
@ Override public String testDestination ( Location destination , Track track ) { String status = super . testDestination ( destination , track ) ; if ( ! status . equals ( Track . OKAY ) ) { return status ; } if ( track == null ) { return status ; } return track . checkSchedule ( this ) ; }
public void close ( ) throws java . io . IOException { flushBuffer ( ) ; m_os . close ( ) ; }
private static String [ ] norm ( String path ) { String [ ] elements = path . split ( _STR ) ; ArrayList < String > stack = new ArrayList < String > ( ) ; for ( String e : elements ) { if ( e . isEmpty ( ) || e . equals ( _STR ) ) continue ; if ( e . equals ( _STR ) ) { if ( ! stack . isEmpty ( ) ) stack . remove ( stack . size ( ) - _NUM ) ; else return null ; continue ; } stack . add ( e ) ; } return stack . toArray ( new String [ stack . size ( ) ] ) ; }
static Random random ( ) { if ( null == LUCENE_TEST_CASE ) { return null ; } else { try { Method randomMethod = LUCENE_TEST_CASE . getMethod ( _STR ) ; return ( Random ) randomMethod . invoke ( null ) ; } catch ( Exception e ) { throw new IllegalStateException ( _STR , e ) ; } } }
protected String record ( String deployment ) { deployments . add ( deployment ) ; return deployment ; }
protected void onBeforeStart ( BundleContext ctx ) { }
@ Override public void onSuccess ( DLSN value ) { if ( value . getLogSegmentSequenceNo ( ) != currentLogSegmentSeqNo ) { LOG . error ( _STR , value . getLogSegmentSequenceNo ( ) , currentLogSegmentSeqNo ) ; errorsFound . set ( _BOOL ) ; } if ( verifyEntryId && value . getEntryId ( ) != currentEntryId ) { LOG . error ( _STR , value . getEntryId ( ) , currentEntryId ) ; errorsFound . set ( _BOOL ) ; } syncLatch . countDown ( ) ; }
private static void shutDownMySQLAbandonedConnectionCleanupThread ( ClassLoader classLoader ) { try { Class < ? > mysqlCleanupThreadClass ; try { mysqlCleanupThreadClass = classLoader . loadClass ( _STR ) ; } catch ( ClassNotFoundException e ) { LOG . trace ( _STR + _STR , e ) ; return ; } Method shutdownMethod = mysqlCleanupThreadClass . getMethod ( _STR ) ; shutdownMethod . invoke ( null ) ; LOG . debug ( _STR ) ; } catch ( Throwable e ) { LOG . warn ( _STR , e ) ; } }
public void write ( byte [ ] buffer ) { if ( isFinal ) { log . warning ( _STR ) ; return ; } byte [ ] newData = new byte [ data . length + buffer . length ] ; System . arraycopy ( data , _NUM , newData , _NUM , data . length ) ; System . arraycopy ( buffer , _NUM , newData , data . length , buffer . length ) ; data = newData ; }
public String parse ( String controlTemplate , Context controlContext ) throws Exception { this . controlContext = controlContext ; fillContextDefaults ( this . controlContext ) ; fillContextProperties ( this . controlContext ) ; Template template = getTemplate ( controlTemplate , inputEncoding ) ; StringWriter sw = new StringWriter ( ) ; template . merge ( controlContext , sw ) ; return sw . toString ( ) ; }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( _STR ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
protected boolean onCreateCustomFromTag ( XmlPullParser parser , T parent , final AttributeSet attrs ) throws XmlPullParserException { return _BOOL ; }
public static long writeFile ( String path , byte [ ] jpeg , ExifInterface exif ) throws IOException { if ( ! createDirectoryIfNeeded ( path ) ) { Log . e ( TAG , _STR + path ) ; return - _NUM ; } if ( exif != null ) { exif . writeExif ( jpeg , path ) ; File f = new File ( path ) ; return f . length ( ) ; } else { return writeFile ( path , jpeg ) ; } }
private boolean checkForImageServers ( ) { boolean imageServerExists = _BOOL ; List < URI > imageServerURIList = _dbClient . queryByType ( ComputeImageServer . class , _BOOL ) ; ArrayList < URI > tempList = Lists . newArrayList ( imageServerURIList . iterator ( ) ) ; if ( tempList . isEmpty ( ) ) { imageServerExists = _BOOL ; } return imageServerExists ; }
final long now ( ) { return System . nanoTime ( ) ; }
public void removeExtension ( String ext ) { synchronized ( exts ) { ext = ext . toLowerCase ( ) ; exts . remove ( ext ) ; } }
protected SuballocatedIntVector findNamespaceContext ( int elementNodeIndex ) { if ( null != m_namespaceDeclSetElements ) { int wouldBeAt = findInSortedSuballocatedIntVector ( m_namespaceDeclSetElements , elementNodeIndex ) ; if ( wouldBeAt >= _NUM ) return ( SuballocatedIntVector ) m_namespaceDeclSets . elementAt ( wouldBeAt ) ; if ( wouldBeAt == - _NUM ) return null ; wouldBeAt = - _NUM - wouldBeAt ; int candidate = m_namespaceDeclSetElements . elementAt ( -- wouldBeAt ) ; int ancestor = _parent ( elementNodeIndex ) ; if ( wouldBeAt == _NUM && candidate < ancestor ) { int rootHandle = getDocumentRoot ( makeNodeHandle ( elementNodeIndex ) ) ; int rootID = makeNodeIdentity ( rootHandle ) ; int uppermostNSCandidateID ; if ( getNodeType ( rootHandle ) == DTM . DOCUMENT_NODE ) { int ch = _firstch ( rootID ) ; uppermostNSCandidateID = ( ch != DTM . NULL ) ? ch : rootID ; } else { uppermostNSCandidateID = rootID ; } if ( candidate == uppermostNSCandidateID ) { return ( SuballocatedIntVector ) m_namespaceDeclSets . elementAt ( wouldBeAt ) ; } } while ( wouldBeAt >= _NUM && ancestor > _NUM ) { if ( candidate == ancestor ) { return ( SuballocatedIntVector ) m_namespaceDeclSets . elementAt ( wouldBeAt ) ; } else if ( candidate < ancestor ) { do { ancestor = _parent ( ancestor ) ; } while ( candidate < ancestor ) ; } else if ( wouldBeAt > _NUM ) { candidate = m_namespaceDeclSetElements . elementAt ( -- wouldBeAt ) ; } else break ; } } return null ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public void addObserver ( Observer observer ) { if ( observer == null ) { throw new NullPointerException ( _STR ) ; } synchronized ( this ) { if ( ! observers . contains ( observer ) ) observers . add ( observer ) ; } }
public static void closeOutputStream ( OutputStream stream , String tag ) { if ( stream != null ) { try { stream . close ( ) ; } catch ( IOException e ) { Log . e ( tag , _STR + e ) ; } } }
protected double distance ( int i , int k , int [ ] designations ) { return Math . sqrt ( Math . max ( selfK [ i ] - _NUM / ownes [ k ] * evalSumK ( i , k , designations ) + meanSqrdNorms [ k ] * normConsts [ k ] , _NUM ) ) ; }
public StringBuffer format ( Object pat , StringBuffer result , FieldPosition fpos ) { String pattern = processPattern ( ( String ) pat ) ; int lastOffset = _NUM ; for ( int i = _NUM ; i <= maxOffset ; ++ i ) { int offidx = offsets [ i ] ; result . append ( pattern . substring ( lastOffset , offsets [ i ] ) ) ; lastOffset = offidx ; String key = arguments [ i ] ; String obj ; if ( key . length ( ) > _NUM ) { obj = formatObject ( processKey ( key ) ) ; } else { result . append ( this . ldel ) ; result . append ( this . rdel ) ; continue ; } if ( obj == null ) { String lessgreedy = ldel + key ; int fromright = lessgreedy . lastIndexOf ( ldel ) ; if ( fromright > _NUM ) { String newkey = lessgreedy . substring ( fromright + ldel . length ( ) ) ; String newsubst = formatObject ( processKey ( newkey ) ) ; if ( newsubst != null ) { obj = lessgreedy . substring ( _NUM , fromright ) + newsubst ; } } } if ( obj == null ) { if ( throwex ) { throw new IllegalArgumentException ( _STR ) ; } else { obj = ldel + key + rdel ; } } result . append ( obj ) ; } result . append ( pattern . substring ( lastOffset , pattern . length ( ) ) ) ; return result ; }
public void add ( String keyword , byte id ) { int key = getStringMapKey ( keyword ) ; map [ key ] = new Keyword ( keyword . toCharArray ( ) , id , map [ key ] ) ; }
void release ( Object owner , Field field ) { Map < String , Integer > fields = owners . get ( owner ) ; if ( fields != null ) { release ( ) ; Integer count = fields . get ( field . toGenericString ( ) ) ; if ( -- count > _NUM ) { fields . put ( field . toGenericString ( ) , count ) ; } else { fields . remove ( field . toGenericString ( ) ) ; } } if ( fields != null && fields . isEmpty ( ) ) { owners . remove ( owner ) ; } }
public static List < DashboardDto > transformToDto ( List < Dashboard > dashboards ) { if ( dashboards == null ) { throw new WebApplicationException ( _STR , Status . INTERNAL_SERVER_ERROR ) ; } List < DashboardDto > result = new ArrayList < DashboardDto > ( ) ; for ( Dashboard dashboard : dashboards ) { result . add ( transformToDto ( dashboard ) ) ; } return result ; }
static Executor screenExecutor ( Executor e ) { if ( ! useCommonPool && e == ForkJoinPool . commonPool ( ) ) return asyncPool ; if ( e == null ) throw new NullPointerException ( ) ; return e ; }
public void addGroupPropertiesListener ( GroupPropertiesListener groupPropertiesListener ) { groupPropertiesListeners . add ( groupPropertiesListener ) ; }
public static void editGlobalFunctionComment ( final AbstractSQLProvider provider , final INaviFunction function , final Integer commentId , final Integer userId , final String newComment ) throws CouldntSaveDataException { PostgreSQLCommentFunctions . editComment ( provider , commentId , userId , newComment ) ; }
public void load ( Element element , Object o ) { log . error ( _STR ) ; }
public synchronized void clearSessions ( Context context , Boolean clearCredentials ) { synchronized ( instance ) { while ( mMXSessions . size ( ) > _NUM ) { clearSession ( context , mMXSessions . get ( _NUM ) , clearCredentials ) ; } } }
public boolean doesEntryExists ( SSOToken token , String entryDN ) { try { PersistentObject po = UMSObject . getObject ( internalToken , new Guid ( entryDN ) ) ; } catch ( UMSException ue ) { if ( entryDN . indexOf ( _STR ) < _NUM ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR , ue ) ; } } return _BOOL ; } return _BOOL ; }
private static char [ ] yy_unpack_cmap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
private static native void initIDs ( ) ;
private static int hashWrapperName ( String xn ) { if ( xn . length ( ) < _NUM ) { return _NUM ; } return ( _NUM * xn . charAt ( _NUM ) + xn . charAt ( _NUM ) ) % _NUM ; }
@ Override public final void startElement ( final String ns , final String lName , final String qName , final Attributes list ) throws SAXException { String name = lName == null || lName . length ( ) == _NUM ? qName : lName ; StringBuffer sb = new StringBuffer ( match ) ; if ( match . length ( ) > _NUM ) { sb . append ( _STR ) ; } sb . append ( name ) ; match = sb . toString ( ) ; Rule r = ( Rule ) RULES . match ( match ) ; if ( r != null ) { r . begin ( name , list ) ; } }
public boolean isString ( String key ) { Object val = get ( key ) ; return val instanceof String ; }
private void createPRWithTotalNumPropSetList ( List vmList , int startIndexForRegion , int endIndexForRegion , int localMaxMemory , int redundancy ) { Iterator nodeIterator = vmList . iterator ( ) ; while ( nodeIterator . hasNext ( ) ) { VM vm = ( VM ) nodeIterator . next ( ) ; vm . invoke ( createMultiplePRWithTotalNumBucketPropSet ( prPrefix , startIndexForRegion , endIndexForRegion , redundancy , localMaxMemory , _NUM ) ) ; } }
public Zdiagmat ( Zmat A , int k ) throws JampackException { Parameters . BaseIndexNotChangeable = _BOOL ; basex = Parameters . BaseIndex ; if ( k >= _NUM ) { if ( k >= A . ncol ) { throw new JampackException ( _STR ) ; } order = Math . min ( A . nrow , A . ncol - k ) ; re = new double [ order ] ; im = new double [ order ] ; for ( int i = _NUM ; i < order ; i ++ ) { re [ i ] = A . re [ i ] [ i + k ] ; im [ i ] = A . im [ i ] [ i + k ] ; } } else { k = - k ; if ( k >= A . nrow ) { throw new JampackException ( _STR ) ; } order = Math . min ( A . nrow - k , A . ncol ) ; re = new double [ order ] ; im = new double [ order ] ; for ( int i = _NUM ; i < order ; i ++ ) { re [ i ] = A . re [ i + k ] [ i ] ; im [ i ] = A . im [ i + k ] [ i ] ; } } getProperties ( ) ; }
protected void checkAntVersion ( Hashtable h ) { if ( null == h ) h = new Hashtable ( ) ; try { final String ANT_VERSION_CLASS = _STR ; final String ANT_VERSION_METHOD = _STR ; final Class noArgs [ ] = new Class [ _NUM ] ; Class clazz = ObjectFactory . findProviderClass ( ANT_VERSION_CLASS , ObjectFactory . findClassLoader ( ) , _BOOL ) ; Method method = clazz . getMethod ( ANT_VERSION_METHOD , noArgs ) ; Object returnValue = method . invoke ( null , new Object [ _NUM ] ) ; h . put ( VERSION + _STR , ( String ) returnValue ) ; } catch ( Exception e ) { h . put ( VERSION + _STR , CLASS_NOTPRESENT ) ; } }
public void buildNetwork ( ) { Neuron firstNeuron = new Neuron ( network , DEFAULT_NEURON_TYPE ) ; List < Neuron > currentLayer = new ArrayList < Neuron > ( ) ; firstNeuron . setPosition ( initialPosition ) ; currentLayer . add ( firstNeuron ) ; int numNeuronsLastLayer = ( int ) Math . pow ( numBrachesPerNeuron , numLayers ) ; double totalSpace = numNeuronsLastLayer * horizontalSpacing ; for ( int layerIndex = _NUM ; layerIndex <= numLayers ; layerIndex ++ ) { List < Neuron > tempList = new ArrayList < Neuron > ( ) ; double layerSpacing = totalSpace / ( int ) Math . pow ( numBrachesPerNeuron , layerIndex ) ; double branchWidth = layerSpacing * ( numBrachesPerNeuron - _NUM ) ; for ( Neuron baseNeuron : currentLayer ) { network . addNeuron ( baseNeuron ) ; double initialXOffset = branchWidth / _NUM ; for ( int j = _NUM ; j < numBrachesPerNeuron ; j ++ ) { Neuron targetNeuron = new Neuron ( network , new LinearRule ( ) ) ; targetNeuron . setLocation ( baseNeuron . getX ( ) - initialXOffset + ( j * layerSpacing ) , initialPosition . y - ( layerIndex * verticalSpacing ) ) ; tempList . add ( targetNeuron ) ; network . addNeuron ( targetNeuron ) ; targetNeuron . setUpdatePriority ( layerIndex ) ; Synapse synapse = new Synapse ( network , baseNeuron , targetNeuron , new StaticSynapseRule ( ) ) ; network . addSynapse ( synapse ) ; } } currentLayer = tempList ; } }
private static boolean areEqual ( int fromIndex , CharSequence left , CharSequence right ) { if ( left == right ) return _BOOL ; if ( ( left == null ) || ( right == null ) ) return _BOOL ; int n = left . length ( ) ; if ( right . length ( ) != n ) return _BOOL ; for ( int i = n ; i > fromIndex ; ) { if ( Character . toUpperCase ( left . charAt ( -- i ) ) != Character . toUpperCase ( right . charAt ( i ) ) ) return _BOOL ; } return _BOOL ; }
public void testCase12 ( ) { byte bBytes [ ] = { _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , - _NUM } ; int bSign = - _NUM ; byte rBytes [ ] = { _NUM } ; BigInteger aNumber = BigInteger . ZERO ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . divide ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public Enumeration productions ( ) { return _productions . elements ( ) ; }
public void addTightSourceNode ( ASTNode reference ) { fTightSourceRangeNodes . add ( reference ) ; List < StructuralPropertyDescriptor > properties = reference . structuralPropertiesForType ( ) ; for ( Iterator < StructuralPropertyDescriptor > iterator = properties . iterator ( ) ; iterator . hasNext ( ) ; ) { StructuralPropertyDescriptor descriptor = iterator . next ( ) ; if ( descriptor . isChildProperty ( ) ) { ASTNode child = ( ASTNode ) reference . getStructuralProperty ( descriptor ) ; if ( child != null && isExtending ( child , reference ) ) { addTightSourceNode ( child ) ; } } else if ( descriptor . isChildListProperty ( ) ) { List < ? extends ASTNode > children = ( List < ? extends ASTNode > ) reference . getStructuralProperty ( descriptor ) ; for ( Iterator < ? extends ASTNode > iterator2 = children . iterator ( ) ; iterator2 . hasNext ( ) ; ) { ASTNode child = iterator2 . next ( ) ; if ( isExtending ( child , reference ) ) { addTightSourceNode ( child ) ; } } } } }
protected boolean isEventDisabled ( XEvent e ) { switch ( e . get_type ( ) ) { case XConstants . ConfigureNotify : return _BOOL ; case XConstants . EnterNotify : case XConstants . LeaveNotify : return _BOOL ; default : return super . isEventDisabled ( e ) ; } }
public DJarInfo ( JFrame parent ) throws IOException { this ( parent , res . getString ( _STR ) , ModalityType . DOCUMENT_MODAL ) ; }
protected void transformPointArrayNoTouch ( float [ ] pts ) { mMatrixValueToPx . mapPoints ( pts ) ; mMatrixOffset . mapPoints ( pts ) ; }
private void convertEscapedFunction ( final StringBuilder target , final CharSequence escapedFunction ) throws FBSQLParseException { final String templateResult = FBEscapedFunctionHelper . convertTemplate ( escapedFunction . toString ( ) , mode ) ; target . append ( templateResult != null ? templateResult : escapedFunction ) ; }
@ Override public final String toString ( ) { if ( stringRep == null ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( this . name ) ; buffer . append ( _STR ) ; buffer . append ( Integer . toString ( this . defaultPort ) ) ; stringRep = buffer . toString ( ) ; } return stringRep ; }
public void addListener ( ImsSessionListener listener ) { mListeners . add ( listener ) ; }
public int checkBookiesUp ( int count , int timeout ) throws Exception { ZooKeeper zkc = connectZooKeeper ( zkHost , zkPort , zkTimeoutSec ) ; try { int mostRecentSize = _NUM ; for ( int i = _NUM ; i < timeout ; i ++ ) { try { List < String > children = zkc . getChildren ( _STR , _BOOL ) ; children . remove ( _STR ) ; mostRecentSize = children . size ( ) ; if ( ( mostRecentSize > count ) || LOG . isDebugEnabled ( ) ) { LOG . info ( _STR + mostRecentSize + _STR + _STR + count ) ; if ( ( mostRecentSize > count ) || LOG . isTraceEnabled ( ) ) { for ( String child : children ) { LOG . info ( _STR + child ) ; } } } if ( mostRecentSize == count ) { break ; } } catch ( KeeperException e ) { } Thread . sleep ( _NUM ) ; } return mostRecentSize ; } finally { zkc . close ( ) ; } }
public static IPath stampToPath ( final long stamp ) { fgCalendar . setTimeInMillis ( stamp ) ; final StringBuffer buffer = new StringBuffer ( _NUM ) ; buffer . append ( fgCalendar . get ( Calendar . YEAR ) ) ; buffer . append ( IPath . SEPARATOR ) ; buffer . append ( fgCalendar . get ( Calendar . MONTH ) + _NUM ) ; buffer . append ( IPath . SEPARATOR ) ; buffer . append ( fgCalendar . get ( Calendar . WEEK_OF_YEAR ) ) ; return new Path ( buffer . toString ( ) ) ; }
private void addPingTimeData ( long sample ) { lastPingTimesLock . lock ( ) ; try { if ( lastPingTimes == null ) { lastPingTimes = new long [ PING_MOVING_AVERAGE_WINDOW ] ; Arrays . fill ( lastPingTimes , sample ) ; } else { System . arraycopy ( lastPingTimes , _NUM , lastPingTimes , _NUM , lastPingTimes . length - _NUM ) ; lastPingTimes [ lastPingTimes . length - _NUM ] = sample ; } } finally { lastPingTimesLock . unlock ( ) ; } }
public void printUserMessage ( UserMessage message ) { User user = message . user ; boolean ignored = message . ignored_compact ; if ( ignored ) { printCompact ( _STR , user ) ; return ; } Color color = message . color ; boolean action = message . action ; String text = message . text ; TagEmotes emotes = message . emotes ; boolean highlighted = message . highlighted ; if ( message . whisper && message . action ) { color = StyleConstants . getForeground ( styles . info ( ) ) ; highlighted = _BOOL ; } closeCompactMode ( ) ; MutableAttributeSet style ; if ( highlighted ) { style = styles . highlight ( color ) ; } else { style = styles . standard ( ) ; } print ( getTimePrefix ( ) , style ) ; printUser ( user , action , message . whisper , message . id ) ; if ( ! highlighted && action && styles . actionColored ( ) ) { style = styles . standard ( user . getDisplayColor ( ) ) ; } printSpecials ( text , user , style , emotes , _BOOL , message . bits > _NUM ) ; printNewline ( ) ; }
public boolean connectImpl ( String address , int port ) throws IOException { _socketTimeout = _NUM ; _nativeFd = - _NUM ; _isClosed . set ( _BOOL ) ; synchronized ( _writeLock ) { boolean isConnect = nativeConnect ( _socketFd , address , port ) ; return isConnect ; } }
public static boolean isAccessModifier ( String str ) { return str . equals ( _STR ) || str . equals ( _STR ) || str . equals ( _STR ) || str . equals ( _STR ) || str . equals ( _STR ) || str . equals ( _STR ) ; }
protected void handleAppendRequestFailure ( MemberState member , AppendRequest request , Throwable error ) { failAttempt ( member , error ) ; }
private static SizePair selectSizePair ( Camera camera , int desiredWidth , int desiredHeight ) { List < SizePair > validPreviewSizes = generateValidPreviewSizeList ( camera ) ; SizePair selectedPair = null ; int minDiff = Integer . MAX_VALUE ; for ( SizePair sizePair : validPreviewSizes ) { Size size = sizePair . previewSize ( ) ; int diff = Math . abs ( size . getWidth ( ) - desiredWidth ) + Math . abs ( size . getHeight ( ) - desiredHeight ) ; if ( diff < minDiff ) { selectedPair = sizePair ; minDiff = diff ; } } return selectedPair ; }
public List < AddressItem > loadAllDeepFromCursor ( Cursor cursor ) { int count = cursor . getCount ( ) ; List < AddressItem > list = new ArrayList < AddressItem > ( count ) ; if ( cursor . moveToFirst ( ) ) { if ( identityScope != null ) { identityScope . lock ( ) ; identityScope . reserveRoom ( count ) ; } try { do { list . add ( loadCurrentDeep ( cursor , _BOOL ) ) ; } while ( cursor . moveToNext ( ) ) ; } finally { if ( identityScope != null ) { identityScope . unlock ( ) ; } } } return list ; }
public static String decode ( byte [ ] utf8 ) throws CharacterCodingException { return decode ( ByteBuffer . wrap ( utf8 ) , _BOOL ) ; }
private Map < String , String > attributesToLowerCase ( ) { Map < String , String > lowerCaseAttributes = new LinkedHashMap < String , String > ( ) ; for ( String key : attributes . keySet ( ) ) { lowerCaseAttributes . put ( key . toLowerCase ( ) , attributes . get ( key ) ) ; } return lowerCaseAttributes ; }
protected final void acceptAnnotations ( final MethodVisitor mv ) { int n = visibleTypeAnnotations == null ? _NUM : visibleTypeAnnotations . size ( ) ; for ( int i = _NUM ; i < n ; ++ i ) { TypeAnnotationNode an = visibleTypeAnnotations . get ( i ) ; an . accept ( mv . visitInsnAnnotation ( an . typeRef , an . typePath , an . desc , _BOOL ) ) ; } n = invisibleTypeAnnotations == null ? _NUM : invisibleTypeAnnotations . size ( ) ; for ( int i = _NUM ; i < n ; ++ i ) { TypeAnnotationNode an = invisibleTypeAnnotations . get ( i ) ; an . accept ( mv . visitInsnAnnotation ( an . typeRef , an . typePath , an . desc , _BOOL ) ) ; } }
public static < T > List < T > toList ( T obj1 , T obj2 ) { List < T > list = new LinkedList < T > ( ) ; list . add ( obj1 ) ; list . add ( obj2 ) ; return list ; }
public byte [ ] readNextPart ( ) throws JPlagException { if ( remainingBytes == _NUM ) { throw new JPlagException ( _STR , _STR , _STR ) ; } try { FileInputStream in = new FileInputStream ( file ) ; in . skip ( filesize - remainingBytes ) ; int partsize = remainingBytes ; if ( partsize > _NUM ) partsize = _NUM ; byte [ ] data = new byte [ partsize ] ; in . read ( data ) ; in . close ( ) ; remainingBytes -= partsize ; return data ; } catch ( IOException e ) { e . printStackTrace ( ) ; throw new JPlagException ( _STR , _STR + _STR , _STR ) ; } }
public boolean isMultiLineTabbed ( ) { return multiLineTab ; }
protected void computeParameters ( ) { if ( m_SumOfWeights > _NUM ) { m_Mean = m_SumOfValues / m_SumOfWeights ; double stdDev = Math . sqrt ( Math . abs ( m_SumOfValuesSq - m_Mean * m_SumOfValues ) / m_SumOfWeights ) ; if ( stdDev > _NUM ) { m_StandardDev = Math . max ( m_Precision / ( _NUM * _NUM ) , stdDev ) ; } } }
public String translateDataType ( String sourceVendorName , String targetVendorName , String dataType , int size , int scale ) { return getDataType ( targetVendorName , getDataTypeID ( sourceVendorName , dataType ) , size , scale ) ; }
public static List < ShapeRecord > rectangle ( double startx , double starty , double width , double height , double radiusX , double radiusY , double topLeftRadiusX , double topLeftRadiusY , double topRightRadiusX , double topRightRadiusY , double bottomLeftRadiusX , double bottomLeftRadiusY , double bottomRightRadiusX , double bottomRightRadiusY ) { List < ShapeRecord > shapeRecords = new ArrayList < ShapeRecord > ( ) ; if ( radiusX == _NUM ) { radiusY = radiusX = _NUM ; } else if ( radiusY == _NUM ) { radiusY = radiusX ; } if ( radiusX > width / _NUM ) radiusX = width / _NUM ; if ( radiusY > height / _NUM ) radiusY = height / _NUM ; double [ ] topLeftRadius = getCornerRadius ( topLeftRadiusX , topLeftRadiusY , radiusX , radiusY , width , height ) ; topLeftRadiusX = topLeftRadius [ _NUM ] ; topLeftRadiusY = topLeftRadius [ _NUM ] ; double [ ] topRightRadius = getCornerRadius ( topRightRadiusX , topRightRadiusY , radiusX , radiusY , width , height ) ; topRightRadiusX = topRightRadius [ _NUM ] ; topRightRadiusY = topRightRadius [ _NUM ] ; double [ ] bottomLeftRadius = getCornerRadius ( bottomLeftRadiusX , bottomLeftRadiusY , radiusX , radiusY , width , height ) ; bottomLeftRadiusX = bottomLeftRadius [ _NUM ] ; bottomLeftRadiusY = bottomLeftRadius [ _NUM ] ; double [ ] bottomRightRadius = getCornerRadius ( bottomRightRadiusX , bottomRightRadiusY , radiusX , radiusY , width , height ) ; bottomRightRadiusX = bottomRightRadius [ _NUM ] ; bottomRightRadiusY = bottomRightRadius [ _NUM ] ; double c0 = _NUM ; double c1 = _NUM ; double c3 = _NUM ; double rx = bottomRightRadiusX ; double ry = bottomRightRadiusY ; double tx = rx / _NUM ; double ty = ry / _NUM ; double dx , currentx ; double dy , currenty ; dx = startx + width - rx ; dy = starty + height - ry ; shapeRecords . add ( move ( ( dx + rx ) , dy ) ) ; currentx = ( dx + rx ) ; currenty = dy ; if ( bottomRightRadiusX != _NUM ) { shapeRecords . add ( curvedEdge ( currentx , currenty , ( dx + c0 * tx ) , ( dy + c1 * ty ) , ( dx + c3 * rx ) , ( dy + c3 * ry ) ) ) ; shapeRecords . add ( curvedEdge ( ( dx + c3 * rx ) , ( dy + c3 * ry ) , ( dx + c1 * tx ) , ( dy + c0 * ty ) , dx , ( dy + ry ) ) ) ; currentx = dx ; currenty = dy + ry ; } rx = bottomLeftRadiusX ; ry = bottomLeftRadiusY ; tx = rx / _NUM ; ty = ry / _NUM ; dx = startx + rx ; dy = starty + height - ry ; shapeRecords . addAll ( straightEdge ( currentx , currenty , dx , ( dy + ry ) ) ) ; currentx = dx ; currenty = dy + ry ; if ( bottomLeftRadiusX != _NUM ) { shapeRecords . add ( curvedEdge ( currentx , currenty , ( dx - c1 * tx ) , ( dy + c0 * ty ) , ( dx - c3 * rx ) , ( dy + c3 * ry ) ) ) ; shapeRecords . add ( curvedEdge ( ( dx - c3 * rx ) , ( dy + c3 * ry ) , ( dx - c0 * tx ) , ( dy + c1 * ty ) , ( dx - rx ) , dy ) ) ; currentx = dx - rx ; currenty = dy ; } rx = topLeftRadiusX ; ry = topLeftRadiusY ; tx = rx / _NUM ; ty = ry / _NUM ; dx = startx + rx ; dy = starty + ry ; shapeRecords . addAll ( straightEdge ( currentx , currenty , ( dx - rx ) , dy ) ) ; currentx = dx - rx ; currenty = dy ; if ( topLeftRadiusX != _NUM ) { shapeRecords . add ( curvedEdge ( currentx , currenty , ( dx - c0 * tx ) , ( dy - c1 * ty ) , ( dx - c3 * rx ) , ( dy - c3 * ry ) ) ) ; shapeRecords . add ( curvedEdge ( ( dx - c3 * rx ) , ( dy - c3 * ry ) , ( dx - c1 * tx ) , ( dy - c0 * ty ) , dx , ( dy - ry ) ) ) ; currentx = dx ; currenty = dy - ry ; } rx = topRightRadiusX ; ry = topRightRadiusY ; tx = rx / _NUM ; ty = ry / _NUM ; dx = startx + width - rx ; dy = starty + ry ; shapeRecords . addAll ( straightEdge ( currentx , currenty , dx , ( dy - ry ) ) ) ; currentx = dx ; currenty = dy - ry ; if ( topRightRadiusX != _NUM ) { shapeRecords . add ( curvedEdge ( currentx , currenty , ( dx + c1 * tx ) , ( dy - c0 * ty ) , ( dx + c3 * rx ) , ( dy - c3 * ry ) ) ) ; shapeRecords . add ( curvedEdge ( ( dx + c3 * rx ) , ( dy - c3 * ry ) , ( dx + c0 * tx ) , ( dy - c1 * ty ) , ( dx + rx ) , dy ) ) ; currentx = ( dx + rx ) ; currenty = dy ; } rx = bottomRightRadiusX ; ry = bottomRightRadiusY ; tx = rx / _NUM ; ty = ry / _NUM ; dx = startx + width - rx ; dy = starty + height - ry ; shapeRecords . addAll ( straightEdge ( currentx , currenty , ( dx + rx ) , dy ) ) ; return shapeRecords ; }
public static int findGlobalValleyLocation ( double [ ] data ) { double min = Double . NaN ; int imin = - _NUM ; for ( int i = _NUM ; i < data . length ; i ++ ) { if ( Double . isNaN ( data [ i ] ) ) continue ; if ( Double . isNaN ( min ) || data [ i ] < min ) { min = data [ i ] ; imin = i ; } } return imin ; }
public void delete ( ) throws IOException { close ( ) ; deleteContents ( directory ) ; }
protected void moveDownSelected ( ) { int selectedIndex = table . getSelectedRow ( ) ; if ( selectedIndex > - _NUM ) { int index = data . moveDown ( indexToModel ( selectedIndex ) ) ; setRowSelected ( indexToView ( index ) ) ; } }
JarWithFile ( PathImpl backing ) { super ( backing ) ; }
public List < Runnable > shutdownNow ( ) { logger . info ( _STR ) ; return executor . shutdownNow ( ) ; }
public static List < String > toRelativePaths ( @ NotNull VirtualFile root , @ NotNull final Collection < FilePath > filePaths ) { ArrayList < String > rc = new ArrayList < String > ( filePaths . size ( ) ) ; for ( FilePath path : filePaths ) { rc . add ( relativePath ( root , path ) ) ; } return rc ; }
private void handleUnlockOrInstall ( ) { if ( isFinishing ( ) ) { return ; } switch ( mKeyStore . state ( ) ) { case UNINITIALIZED : { ensureKeyGuard ( ) ; return ; } case LOCKED : { new UnlockDialog ( ) ; return ; } case UNLOCKED : { if ( ! checkKeyGuardQuality ( ) ) { new ConfigureKeyGuardDialog ( ) ; return ; } installIfAvailable ( ) ; finish ( ) ; return ; } } }
private void stopDrag ( MotionEvent ev ) { mTouchMode = TOUCH_MODE_IDLE ; final boolean commitChange = ev . getAction ( ) == MotionEvent . ACTION_UP && isEnabled ( ) ; final boolean oldState = isChecked ( ) ; final boolean newState ; if ( commitChange ) { mVelocityTracker . computeCurrentVelocity ( _NUM ) ; final float xvel = mVelocityTracker . getXVelocity ( ) ; if ( Math . abs ( xvel ) > mMinFlingVelocity ) { newState = ViewUtils . isLayoutRtl ( this ) ? ( xvel < _NUM ) : ( xvel > _NUM ) ; } else { newState = getTargetCheckedState ( ) ; } } else { newState = oldState ; } if ( newState != oldState ) { playSoundEffect ( SoundEffectConstants . CLICK ) ; } setChecked ( newState ) ; cancelSuperTouch ( ev ) ; }
private void offsetStartTimeIfNecessary ( Time startTime , Time endTime , String rrule , CalendarEventModel model ) { if ( rrule == null || rrule . isEmpty ( ) ) { return ; } mEventRecurrence . parse ( rrule ) ; if ( mEventRecurrence . freq != EventRecurrence . WEEKLY ) { return ; } if ( mEventRecurrence . byday . length > mEventRecurrence . bydayCount ) { return ; } int closestWeekday = Integer . MAX_VALUE ; int weekstart = EventRecurrence . day2TimeDay ( mEventRecurrence . wkst ) ; int startDay = startTime . weekDay ; for ( int i = _NUM ; i < mEventRecurrence . bydayCount ; i ++ ) { int day = EventRecurrence . day2TimeDay ( mEventRecurrence . byday [ i ] ) ; if ( day == startDay ) { return ; } if ( day < weekstart ) { day += _NUM ; } if ( day > startDay && ( day < closestWeekday || closestWeekday < startDay ) ) { closestWeekday = day ; } if ( closestWeekday == Integer . MAX_VALUE || closestWeekday < startDay ) { if ( day < closestWeekday ) { closestWeekday = day ; } } } if ( closestWeekday < startDay ) { closestWeekday += _NUM ; } int daysOffset = closestWeekday - startDay ; startTime . monthDay += daysOffset ; endTime . monthDay += daysOffset ; long newStartTime = startTime . normalize ( _BOOL ) ; long newEndTime = endTime . normalize ( _BOOL ) ; model . mStart = newStartTime ; model . mEnd = newEndTime ; }
public Vector3 ceil ( ) { return new Vector3 ( Math . ceil ( x ) , Math . ceil ( y ) , Math . ceil ( z ) ) ; }
public void simulateMethod ( SootMethod method , ReferenceVariable thisVar , ReferenceVariable returnVar , ReferenceVariable params [ ] ) { String subSignature = method . getSubSignature ( ) ; if ( subSignature . equals ( _STR ) ) { java_lang_Throwable_fillInStackTrace ( method , thisVar , returnVar , params ) ; return ; } else { defaultMethod ( method , thisVar , returnVar , params ) ; return ; } }
private void cleanUpFrontier ( ) { while ( ! frontier . isEmpty ( ) && isExplored ( frontier . element ( ) ) ) frontier . remove ( ) ; }
public void addChangingListener ( OnWheelChangedListener listener ) { changingListeners . add ( listener ) ; }
private void parseAttributes ( TypedArray a ) { barWidth = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwBarWidth , barWidth ) ; rimWidth = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwRimWidth , rimWidth ) ; spinSpeed = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwSpinSpeed , spinSpeed ) ; barLength = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwBarLength , barLength ) ; delayMillis = a . getInteger ( R . styleable . ProgressWheel_pwDelayMillis , delayMillis ) ; if ( delayMillis < _NUM ) { delayMillis = _NUM ; } if ( a . hasValue ( R . styleable . ProgressWheel_pwText ) ) { setText ( a . getString ( R . styleable . ProgressWheel_pwText ) ) ; } barColor = a . getColor ( R . styleable . ProgressWheel_pwBarColor , barColor ) ; textColor = a . getColor ( R . styleable . ProgressWheel_pwTextColor , textColor ) ; rimColor = a . getColor ( R . styleable . ProgressWheel_pwRimColor , rimColor ) ; circleColor = a . getColor ( R . styleable . ProgressWheel_pwCircleColor , circleColor ) ; contourColor = a . getColor ( R . styleable . ProgressWheel_pwContourColor , contourColor ) ; textSize = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwTextSize , textSize ) ; contourSize = a . getDimension ( R . styleable . ProgressWheel_pwContourSize , contourSize ) ; a . recycle ( ) ; }
public static byte [ ] concatenate ( byte [ ] a , byte [ ] b ) { byte [ ] output = new byte [ a . length + b . length ] ; System . arraycopy ( a , _NUM , output , _NUM , a . length ) ; System . arraycopy ( b , _NUM , output , a . length , b . length ) ; return output ; }
public final AssertSubscriber < T > assertTerminated ( ) { if ( cdl . getCount ( ) != _NUM ) { throw new AssertionError ( _STR , null ) ; } return this ; }
protected static void assertArgument ( final boolean validArg , final String message , final Object ... args ) { if ( ! validArg ) { throw new IllegalArgumentException ( String . format ( message , args ) ) ; } }
public static boolean isBeforeToday ( Calendar _calendar ) { return _calendar . before ( Calendar . getInstance ( ) ) ; }
public static ViewItemGroup buildLoginUI ( ModelApplication modelApp , Activity activity ) { ViewItemGroup viewItems = new ViewItemGroup ( activity ) ; TextView usernameText = new TextView ( activity ) ; usernameText . setText ( R . string . username ) ; viewItems . addView ( usernameText ) ; ViewItemFactory viewItemFactory = ViewItemFactory . instance ( ) ; ViewItem usernameItem = viewItemFactory . create ( LoginViewID . USERNAME , viewItemFactory . TEXT_DATATYPE_DB_ID , activity ) ; viewItems . addViewItem ( usernameItem , new OmniText ( modelApp . getUsername ( ) ) ) ; TextView passwordText = new TextView ( activity ) ; passwordText . setText ( R . string . password ) ; viewItems . addView ( passwordText ) ; ViewItem passwordItem = viewItemFactory . create ( LoginViewID . PASSWORD , viewItemFactory . PASSWORD_INPUT_DATATYPE_DB_ID , activity ) ; viewItems . addViewItem ( passwordItem , new OmniPasswordInput ( modelApp . getPassword ( ) ) ) ; return viewItems ; }
public void unMapVolumeFromSCSIInitiator ( String volumeId , String initiatorId ) throws Exception { String uri = ScaleIOConstants . getUnmapVolumeToScsiInitiatorURI ( volumeId ) ; ScaleIOUnmapVolumeToScsiInitiator unmapParm = new ScaleIOUnmapVolumeToScsiInitiator ( ) ; unmapParm . setScsiInitiatorId ( initiatorId ) ; post ( URI . create ( uri ) , getJsonForEntity ( unmapParm ) ) ; }
public Collection < T > asCollection ( ) { return this . list ; }
private static void addQuarterArc ( Path2D . Float path , float x1 , float y1 , float x2 , float y2 , float curvature , boolean verticalStart ) { boolean down = y1 < y2 ; boolean left = x1 > x2 ; float cx1 = _NUM ; float cy1 = _NUM ; float cx2 = _NUM ; float cy2 = _NUM ; if ( verticalStart ) { cx1 = x1 ; cy2 = y2 ; if ( left ) { cx2 = x1 - curvature ; } else { cx2 = x1 + curvature ; } if ( down ) { cy1 = y2 - curvature ; } else { cy1 = y2 + curvature ; } } else { cx2 = x2 ; cy1 = y1 ; if ( left ) { cx1 = x2 + curvature ; } else { cx1 = x2 - curvature ; } if ( down ) { cy2 = y1 + curvature ; } else { cy2 = y1 - curvature ; } } path . curveTo ( cx1 , cy1 , cx2 , cy2 , x2 , y2 ) ; }
@ Override public void parse ( String content , Node block ) { this . block = block ; this . input = content . trim ( ) ; this . index = _NUM ; this . lastDelimiter = null ; this . lastBracket = null ; boolean moreToParse ; do { moreToParse = parseInline ( ) ; } while ( moreToParse ) ; processDelimiters ( null ) ; mergeTextNodes ( block . getFirstChild ( ) , block . getLastChild ( ) ) ; }
public static void random ( byte [ ] b , int offset , int length ) { checkPositionIndex ( offset , b . length , _STR ) ; checkArgument ( length > _NUM , _STR ) ; checkPositionIndex ( offset + length , b . length , _STR ) ; byte [ ] buf = new byte [ length ] ; RNG . nextBytes ( buf ) ; System . arraycopy ( buf , _NUM , b , offset , length ) ; }
public void removeAllScanningCallbacks ( ) { scanningCallbacks . clear ( ) ; }
public int read ( byte [ ] buf , int off , int len ) throws TTransportException { if ( inputStream_ == null ) { throw new TTransportException ( TTransportException . NOT_OPEN , _STR ) ; } int bytesRead ; try { bytesRead = inputStream_ . read ( buf , off , len ) ; } catch ( IOException iox ) { throw new TTransportException ( TTransportException . UNKNOWN , iox ) ; } if ( bytesRead < _NUM ) { throw new TTransportException ( TTransportException . END_OF_FILE ) ; } return bytesRead ; }
public void handleManagerCreation ( ) throws ManagementException { if ( ! isServiceInitialised ( _STR ) ) { return ; } ObjectName managerMBeanName = MBeanJMXAdapter . getManagerName ( ) ; ManagerMBeanBridge bridge = new ManagerMBeanBridge ( service ) ; ManagerMXBean bean = new ManagerMBean ( bridge ) ; service . registerInternalMBean ( bean , managerMBeanName ) ; }
@ SuppressWarnings ( _STR ) private boolean checkSetShape ( Shape oldShape , Shape newShape ) { Shape currentShape = getShape ( ) ; assert oldShape != newShape : _STR ; assert newShape != currentShape : _STR + currentShape ; assert oldShape == currentShape || oldShape . getParent ( ) == currentShape : _STR + _STR + currentShape + _STR + oldShape + _STR + newShape ; return _BOOL ; }
protected boolean isFileVisible ( File file ) { if ( file == null || ! file . exists ( ) || ! file . canRead ( ) || file . isHidden ( ) ) { return _BOOL ; } return _BOOL ; }
public static String [ ] append ( final String [ ] a , final String ... b ) { final int alen = a . length ; final int blen = b . length ; final String [ ] res = Arrays . copyOf ( a , alen + blen ) ; System . arraycopy ( b , _NUM , res , alen , blen ) ; return res ; }
public void delete ( ) throws AMException , SSOException { delete ( _BOOL ) ; }
public String ( byte [ ] bytes , int off , int len , java . lang . String enc ) throws java . io . UnsupportedEncodingException { this ( bytesToChars ( bytes , off , len , enc ) ) ; }
private boolean initializeSearchItemset ( BitVector bv , int [ ] scratchi , int [ ] iters ) { for ( int i = _NUM ; i < scratchi . length ; i ++ ) { iters [ i ] = ( i == _NUM ) ? bv . iter ( ) : bv . iterAdvance ( iters [ i - _NUM ] ) ; if ( iters [ i ] < _NUM ) { return _BOOL ; } scratchi [ i ] = bv . iterDim ( iters [ i ] ) ; } return _BOOL ; }
private Rectangle computeEditorBounds ( ) { if ( row == - _NUM || column == - _NUM ) return new Rectangle ( _NUM , _NUM , _NUM , _NUM ) ; Rectangle cell = grid . getCellBounds ( column , row ) ; Rectangle area = grid . getClientArea ( ) ; if ( cell . x < area . x + area . width ) { if ( cell . x + cell . width > area . x + area . width ) { cell . width = area . x + area . width - cell . x ; } } Rectangle editorRect = new Rectangle ( cell . x , cell . y , minimumWidth , minimumHeight ) ; if ( grabHorizontal ) { editorRect . width = Math . max ( cell . width , minimumWidth ) ; } if ( grabVertical ) { editorRect . height = Math . max ( cell . height , minimumHeight ) ; } if ( horizontalAlignment == SWT . RIGHT ) { editorRect . x += cell . width - editorRect . width ; } else if ( horizontalAlignment == SWT . LEFT ) { } else { editorRect . x += ( cell . width - editorRect . width ) / _NUM ; } if ( verticalAlignment == SWT . BOTTOM ) { editorRect . y += cell . height - editorRect . height ; } else if ( verticalAlignment == SWT . TOP ) { } else { editorRect . y += ( cell . height - editorRect . height ) / _NUM ; } return editorRect ; }
public int read ( byte [ ] buffer , int offset , int length ) throws IOException { throw new UnsupportedOperationException ( String . valueOf ( this ) ) ; }
public Cuboid ( World world , int x1 , int y1 , int z1 , int x2 , int y2 , int z2 ) { this . worldName = world . getName ( ) ; this . x1 = Math . min ( x1 , x2 ) ; this . x2 = Math . max ( x1 , x2 ) ; this . y1 = Math . min ( y1 , y2 ) ; this . y2 = Math . max ( y1 , y2 ) ; this . z1 = Math . min ( z1 , z2 ) ; this . z2 = Math . max ( z1 , z2 ) ; }
@ SuppressWarnings ( { _STR } ) public double logMarginalLikelihoodSmoothed ( List < Double > v , double delta , double Pdata ) { final double logDelta = StrictMath . log ( delta ) ; final double logInvDelta = StrictMath . log ( _NUM - delta ) ; final int n = v . size ( ) ; final double logN = StrictMath . log ( n ) ; final double offset = logInvDelta - Pdata ; double bottom = logN + logDelta - logInvDelta ; double top = bottom + Pdata ; for ( int i = _NUM ; i < n ; i ++ ) { double weight = - LogTricks . logSum ( logDelta , offset + v . get ( i ) ) ; top = LogTricks . logSum ( top , weight + v . get ( i ) ) ; bottom = LogTricks . logSum ( bottom , weight ) ; } return top - bottom ; }
public boolean isNewMessage ( ) { if ( message == null ) { throw new IllegalStateException ( _STR ) ; } return message . startsWith ( _STR ) || message . equals ( _STR ) ; }
private void installProperties ( ) { System . setProperty ( _STR , UserAgentGenerator . getUserAgent ( ) ) ; if ( OSUtils . isMacOSX ( ) ) { System . setProperty ( _STR , _STR ) ; } }
public DoubleBuffer put ( double [ ] src , int srcOffset , int doubleCount ) { Arrays . checkOffsetAndCount ( src . length , srcOffset , doubleCount ) ; if ( doubleCount > remaining ( ) ) { throw new BufferOverflowException ( ) ; } for ( int i = srcOffset ; i < srcOffset + doubleCount ; ++ i ) { put ( src [ i ] ) ; } return this ; }
private void loadRecipients ( int addressType , HashSet < String > recipients , HashMap < Integer , EncodedStringValue [ ] > addressMap , boolean excludeMyNumber ) { EncodedStringValue [ ] array = addressMap . get ( addressType ) ; if ( array == null ) { return ; } if ( excludeMyNumber && array . length == _NUM ) { return ; } String myNumber = excludeMyNumber ? mTelephonyManager . getLine1Number ( ) : null ; for ( EncodedStringValue v : array ) { if ( v != null ) { String number = v . getString ( ) ; if ( ( myNumber == null || ! PhoneNumberUtils . compare ( number , myNumber ) ) && ! recipients . contains ( number ) ) { recipients . add ( number ) ; } } } }
public static boolean isExtension ( String filename , String extension ) { if ( filename == null ) { return _BOOL ; } if ( extension == null || extension . length ( ) == _NUM ) { return indexOfExtension ( filename ) == - _NUM ; } String fileExt = getExtension ( filename ) ; return fileExt . equals ( extension ) ; }
private String scriptFromDisk ( String name ) { name = name . replace ( _STR , _STR ) ; final char SEP = _STR ; String pkgPart = _STR ; String pathPart = _STR ; String namePart = _STR ; int at = name . indexOf ( SEP ) ; if ( at > - _NUM ) { int nextAt = name . indexOf ( SEP , at + _NUM ) ; if ( nextAt > - _NUM ) { pathPart = name . substring ( _NUM , at ) ; pkgPart = name . substring ( at + _NUM , nextAt ) ; namePart = name . substring ( nextAt + _NUM ) ; } else { pathPart = name . substring ( _NUM , at ) ; namePart = name . substring ( at + _NUM ) ; } } else { at = name . lastIndexOf ( _STR ) ; if ( at > - _NUM ) { int mx = name . lastIndexOf ( _STR ) ; if ( mx > - _NUM ) { pathPart = name . substring ( _NUM , mx ) ; pkgPart = name . substring ( mx + _NUM , at ) ; } else { pathPart = name . substring ( _NUM , at ) ; } namePart = name . substring ( at + _NUM ) ; } else { pathPart = _STR ; namePart = name ; } } String script = null ; try { Charset realEncoding = null ; Charset bomEncoding = null ; InputStream in = locateScriptFile ( pathPart , pkgPart , namePart ) ; if ( in != null ) { try { BufferedInputStream bis = new BufferedInputStream ( in ) ; bomEncoding = getEncodingFromBOM ( bis ) ; script = pullInSource ( bis , bomEncoding ) ; realEncoding = getEncodingFromXMLDirective ( script ) ; } finally { try { in . close ( ) ; } catch ( IOException e ) { } } } if ( realEncoding != null && ! realEncoding . equals ( bomEncoding ) ) { in = locateScriptFile ( pathPart , pkgPart , namePart ) ; if ( in != null ) { try { BufferedInputStream bis = new BufferedInputStream ( in ) ; getEncodingFromBOM ( bis ) ; script = pullInSource ( bis , realEncoding ) ; } finally { try { in . close ( ) ; } catch ( IOException e ) { } } } } } catch ( FileNotFoundException fnf ) { fnf . printStackTrace ( ) ; } return script ; }
@ PrePersist public void prePersist ( ) { lockTime = System . currentTimeMillis ( ) ; }
public LibPadstack add ( String p_name , ShapeConvex [ ] p_shapes , boolean p_attach_allowed , boolean p_placed_absolute ) { int pad_no = count ( ) + _NUM ; LibPadstack new_padstack = new LibPadstack ( p_name , pad_no , p_shapes , p_attach_allowed , p_placed_absolute ) ; padstack_list . add ( new_padstack ) ; return new_padstack ; }
private Rect calcBounds ( int index , Paint paint ) { Rect bounds = new Rect ( ) ; CharSequence title = getTitle ( index ) ; bounds . right = ( int ) paint . measureText ( title , _NUM , title . length ( ) ) ; bounds . bottom = ( int ) ( paint . descent ( ) - paint . ascent ( ) ) ; return bounds ; }
protected ArgsBase ( ) { _argv = null ; _env = null ; }
@ Override public void startContentModel ( String elementName , Augmentations augs ) throws XNIException { if ( fValidation ) { fDTDElementDeclName = elementName ; fMixedElementTypes . clear ( ) ; } if ( fDTDGrammar != null ) fDTDGrammar . startContentModel ( elementName , augs ) ; if ( fDTDContentModelHandler != null ) { fDTDContentModelHandler . startContentModel ( elementName , augs ) ; } }
public OMRangeRings ( LatLonPoint center , double radius , Length units , int nverts ) { super ( center , radius , units , nverts ) ; centerPoint = createCenterPoint ( ) ; form . setMaximumFractionDigits ( _NUM ) ; }
public static InputSource createInputSource ( String s ) { try { return new InputSource ( new ByteArrayInputStream ( s . getBytes ( _STR ) ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }
public static void write ( File file , CharSequence data , boolean append ) throws IOException { write ( file , data , Charset . defaultCharset ( ) , append ) ; }
public static Preferences userRoot ( ) { return factory . userRoot ( ) ; }
public static String toDebugString ( final long socketIdentifier ) { final int ipBits = ( int ) socketIdentifier ; final int port = extractPortNumber ( socketIdentifier ) ; final int inode = ( int ) ( socketIdentifier > > _NUM ) ; return Integer . toHexString ( ipBits ) + _STR + port + _STR + inode ; }
@ Override public void onAlbumUpdate ( ProviderIdentifier provider , final Album a ) throws RemoteException { if ( a == null ) { Log . w ( TAG , _STR ) ; return ; } Album cached = mCache . getAlbum ( a . getRef ( ) ) ; boolean modified = _BOOL ; if ( cached == null ) { mCache . putAlbum ( provider , a ) ; cached = a ; modified = _BOOL ; } else if ( ! cached . isLoaded ( ) || ! cached . isIdentical ( a ) ) { cached . setName ( a . getName ( ) ) ; cached . setYear ( a . getYear ( ) ) ; cached . setIsLoaded ( a . isLoaded ( ) ) ; cached . setProvider ( a . getProvider ( ) ) ; if ( cached . getSongsCount ( ) != a . getSongsCount ( ) ) { Iterator < String > songsIt = a . songs ( ) ; while ( songsIt . hasNext ( ) ) { String songRef = songsIt . next ( ) ; cached . addSong ( songRef ) ; } } modified = _BOOL ; } if ( cached . getProvider ( ) == null ) { Log . e ( TAG , _STR + cached . getRef ( ) + _STR ) ; } if ( modified ) { Iterator < String > songs = a . songs ( ) ; while ( songs . hasNext ( ) ) { String songRef = songs . next ( ) ; Song song = retrieveSong ( songRef , a . getProvider ( ) ) ; if ( song != null && song . isLoaded ( ) ) { String artistRef = song . getArtist ( ) ; if ( artistRef != null ) { Artist artist = retrieveArtist ( artistRef , song . getProvider ( ) ) ; if ( artist != null ) { artist . addAlbum ( a . getRef ( ) ) ; } else { if ( DEBUG ) Log . e ( TAG , _STR ) ; } } } else { if ( DEBUG ) Log . e ( TAG , _STR ) ; } } postAlbumForUpdate ( cached ) ; } }
public final void push ( String s ) { if ( ( m_firstFree + _NUM ) >= m_mapSize ) { m_mapSize += m_blocksize ; String newMap [ ] = new String [ m_mapSize ] ; System . arraycopy ( m_map , _NUM , newMap , _NUM , m_firstFree + _NUM ) ; m_map = newMap ; } m_map [ m_firstFree ] = s ; m_firstFree ++ ; }
public static String readFromFile ( final File path ) throws IOException { FileInputStream fis = null ; try { fis = new FileInputStream ( path ) ; return readFromFile ( fis ) ; } finally { if ( fis != null ) { fis . close ( ) ; } } }
public static int XToTileX ( int x , int tileGridXOffset , int tileWidth ) { x -= tileGridXOffset ; if ( x < _NUM ) { x += _NUM - tileWidth ; } return x / tileWidth ; }
private boolean checkTouchSlop ( View child , float dx , float dy ) { if ( child == null ) { return _BOOL ; } final boolean checkHorizontal = mCallback . getViewHorizontalDragRange ( child ) > _NUM ; final boolean checkVertical = mCallback . getViewVerticalDragRange ( child ) > _NUM ; if ( checkHorizontal && checkVertical ) { return dx * dx + dy * dy > mTouchSlop * mTouchSlop ; } else if ( checkHorizontal ) { return Math . abs ( dx ) > mTouchSlop ; } else if ( checkVertical ) { return Math . abs ( dy ) > mTouchSlop ; } return _BOOL ; }
public Input ( String name , @ InputType int type , @ Alignment int align , Connection connection ) { mName = name ; mType = type ; mAlign = align ; mConnection = connection ; if ( mConnection != null ) { mConnection . setInput ( this ) ; } }
public static BshClassManager createClassManager ( Interpreter interpreter ) { BshClassManager manager ; if ( Capabilities . classExists ( _STR ) && Capabilities . classExists ( _STR ) && Capabilities . classExists ( _STR ) ) try { Class clas = Class . forName ( _STR ) ; manager = ( BshClassManager ) clas . newInstance ( ) ; } catch ( Exception e ) { throw new InterpreterError ( _STR + e ) ; } else manager = new BshClassManager ( ) ; if ( interpreter == null ) interpreter = new Interpreter ( ) ; manager . declaringInterpreter = interpreter ; return manager ; }
public int swap ( ) { if ( ! mEgl . eglSwapBuffers ( mEglDisplay , mEglSurface ) ) { return mEgl . eglGetError ( ) ; } return EGL10 . EGL_SUCCESS ; }
public void requestLastLoginTime ( ) { operations . add ( PasswordPolicyStateOperationType . GET_LAST_LOGIN_TIME ) ; }
public static Stream < String > wordsOf ( String text ) { requireNonNull ( text ) ; return WORDS . splitAsStream ( text ) ; }
public void add ( AppInfo info ) { if ( mAppFilter != null && ! mAppFilter . shouldShowApp ( info . componentName ) ) { return ; } if ( findActivity ( data , info . componentName , info . user ) ) { return ; } data . add ( info ) ; added . add ( info ) ; }
public Joiner match ( String field , Object ... value ) { return match ( field , Arrays . asList ( value ) ) ; }
private String removeYouTubeMarkup ( String plot ) { if ( plot == null ) return null ; return plot . replaceAll ( _STR , _STR ) ; }
private String createDashArrayString ( List < Float > dashesArray ) { StringBuilder sb = new StringBuilder ( ) ; if ( dashesArray != null ) { int index = _NUM ; for ( Float value : dashesArray ) { String str = Float . toString ( value ) ; if ( str . endsWith ( _STR ) ) { sb . append ( value . intValue ( ) ) ; } else { sb . append ( value ) ; } if ( index < dashesArray . size ( ) - _NUM ) { sb . append ( _STR ) ; } index ++ ; } } return sb . toString ( ) ; }
private final boolean compareAndSetHead ( Node update ) { return unsafe . compareAndSwapObject ( this , headOffset , null , update ) ; }
public long position ( java . sql . Blob pattern , long start ) throws SQLException { return position ( pattern . getBytes ( _NUM , ( int ) pattern . length ( ) ) , start ) ; }
protected synchronized T load ( ) throws IOException { long genLoaded = - _NUM ; IOException ioe = null ; List < String > genFiles = new ArrayList < String > ( ) ; String [ ] files ; try { files = dir . listAll ( ) ; } catch ( IOException ioe2 ) { return null ; } T loaded = null ; for ( String file : files ) { if ( file . startsWith ( prefix ) ) { long gen = Long . parseLong ( file . substring ( prefix . length ( ) ) ) ; if ( genLoaded == - _NUM || gen > genLoaded ) { genFiles . add ( file ) ; IndexInput in = dir . openInput ( file , IOContext . DEFAULT ) ; try { loaded = loadOne ( in ) ; } catch ( IOException ioe2 ) { if ( ioe == null ) { ioe = ioe2 ; } } finally { in . close ( ) ; } genLoaded = gen ; } } } if ( genLoaded == - _NUM ) { if ( ioe != null ) { throw ioe ; } } else { if ( genFiles . size ( ) > _NUM ) { String curFileName = prefix + genLoaded ; for ( String file : genFiles ) { long gen = Long . parseLong ( file . substring ( prefix . length ( ) ) ) ; if ( canDelete ( gen ) && ! curFileName . equals ( file ) ) { dir . deleteFile ( file ) ; } } } nextWriteGen = _NUM + genLoaded ; } return loaded ; }
public static String readLine ( InputStream in , String charset ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; while ( _BOOL ) { int b = in . read ( ) ; if ( b == - _NUM ) { if ( baos . size ( ) == _NUM ) { return null ; } else { break ; } } if ( b == _STR ) { break ; } if ( b != _STR ) { baos . write ( b ) ; continue ; } int b2 = in . read ( ) ; if ( b2 == - _NUM ) { baos . write ( b ) ; break ; } if ( b2 == _STR ) { break ; } baos . write ( b ) ; baos . write ( b2 ) ; } return baos . toString ( charset ) ; }
protected static final String addEscapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = _NUM ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case _NUM : continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < _NUM || ch > _NUM ) { String s = _STR + Integer . toString ( ch , _NUM ) ; retval . append ( _STR + s . substring ( s . length ( ) - _NUM , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; }
public boolean checkTableExists ( TableDefinition table ) { String column = null ; for ( FieldDefinition field : table . getFields ( ) ) { if ( column == null ) { column = field . getName ( ) ; } else if ( field . isPrimaryKey ( ) ) { column = field . getName ( ) ; break ; } } String sql = _STR + column + _STR + table . getFullName ( ) + _STR + column + _STR + column ; DataReadQuery query = new DataReadQuery ( sql ) ; query . setMaxRows ( _NUM ) ; try { session . executeQuery ( query ) ; return _BOOL ; } catch ( Exception notFound ) { return _BOOL ; } finally { } }
private int processColon ( int length ) { if ( _hasScheme ) { if ( ! readUserPass ( length ) && _buffer . length ( ) > _NUM ) { _reader . goBack ( ) ; _buffer . delete ( _buffer . length ( ) - _NUM , _buffer . length ( ) ) ; int backtrackOnFail = _reader . getPosition ( ) - _buffer . length ( ) + length ; if ( ! readDomainName ( _buffer . substring ( length ) ) ) { _reader . seek ( backtrackOnFail ) ; readEnd ( ReadEndState . InvalidUrl ) ; } length = _NUM ; } } else if ( readScheme ( ) && _buffer . length ( ) > _NUM ) { _hasScheme = _BOOL ; length = _buffer . length ( ) ; } else if ( _buffer . length ( ) > _NUM && _options . hasFlag ( UrlDetectorOptions . ALLOW_SINGLE_LEVEL_DOMAIN ) && _reader . canReadChars ( _NUM ) ) { _reader . goBack ( ) ; _buffer . delete ( _buffer . length ( ) - _NUM , _buffer . length ( ) ) ; readDomainName ( _buffer . toString ( ) ) ; } else { readEnd ( ReadEndState . InvalidUrl ) ; length = _NUM ; } return length ; }
public static boolean containsSqlScriptDelimiters ( String script , String delim ) { boolean inLiteral = _BOOL ; char [ ] content = script . toCharArray ( ) ; for ( int i = _NUM ; i < script . length ( ) ; i ++ ) { if ( content [ i ] == _STR ) { inLiteral = ! inLiteral ; } if ( ! inLiteral && script . startsWith ( delim , i ) ) { return _BOOL ; } } return _BOOL ; }
public void compress ( byte [ ] bytes , int off , int len , OutputStream os ) { try { os . write ( bytes , off , len ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
public void assertNotJoined ( final UUID serviceId ) { m_triggers . add ( new QuorumEventInvariant ( QuorumEventEnum . SERVICE_JOIN , serviceId ) ) ; if ( isMember ( m_quorum . getJoined ( ) , serviceId ) ) broken ( ) ; }
private void fitImageToView ( ) { Drawable drawable = getDrawable ( ) ; if ( drawable == null || drawable . getIntrinsicWidth ( ) == _NUM || drawable . getIntrinsicHeight ( ) == _NUM ) { return ; } if ( matrix == null || prevMatrix == null ) { return ; } int drawableWidth = drawable . getIntrinsicWidth ( ) ; int drawableHeight = drawable . getIntrinsicHeight ( ) ; float scaleX = ( float ) viewWidth / drawableWidth ; float scaleY = ( float ) viewHeight / drawableHeight ; switch ( mScaleType ) { case CENTER : scaleX = scaleY = _NUM ; break ; case CENTER_CROP : scaleX = scaleY = Math . max ( scaleX , scaleY ) ; break ; case CENTER_INSIDE : scaleX = scaleY = Math . min ( _NUM , Math . min ( scaleX , scaleY ) ) ; case FIT_CENTER : scaleX = scaleY = Math . min ( scaleX , scaleY ) ; break ; case FIT_XY : break ; default : throw new UnsupportedOperationException ( _STR ) ; } float redundantXSpace = viewWidth - ( scaleX * drawableWidth ) ; float redundantYSpace = viewHeight - ( scaleY * drawableHeight ) ; matchViewWidth = viewWidth - redundantXSpace ; matchViewHeight = viewHeight - redundantYSpace ; if ( ! isZoomed ( ) && ! imageRenderedAtLeastOnce ) { matrix . setScale ( scaleX , scaleY ) ; matrix . postTranslate ( redundantXSpace / _NUM , redundantYSpace / _NUM ) ; normalizedScale = _NUM ; } else { if ( prevMatchViewWidth == _NUM || prevMatchViewHeight == _NUM ) { savePreviousImageValues ( ) ; } prevMatrix . getValues ( m ) ; m [ Matrix . MSCALE_X ] = matchViewWidth / drawableWidth * normalizedScale ; m [ Matrix . MSCALE_Y ] = matchViewHeight / drawableHeight * normalizedScale ; float transX = m [ Matrix . MTRANS_X ] ; float transY = m [ Matrix . MTRANS_Y ] ; float prevActualWidth = prevMatchViewWidth * normalizedScale ; float actualWidth = getImageWidth ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_X , transX , prevActualWidth , actualWidth , prevViewWidth , viewWidth , drawableWidth ) ; float prevActualHeight = prevMatchViewHeight * normalizedScale ; float actualHeight = getImageHeight ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_Y , transY , prevActualHeight , actualHeight , prevViewHeight , viewHeight , drawableHeight ) ; matrix . setValues ( m ) ; } fixTrans ( ) ; setImageMatrix ( matrix ) ; }
public int encryptBlock ( byte [ ] in , int inOff , byte [ ] out , int outOff ) throws DataLengthException , IllegalStateException { if ( ( inOff + blockSize ) > in . length ) { throw new DataLengthException ( _STR ) ; } if ( ( outOff + blockSize ) > out . length ) { throw new DataLengthException ( _STR ) ; } cipher . processBlock ( cfbV , _NUM , cfbOutV , _NUM ) ; for ( int i = _NUM ; i < blockSize ; i ++ ) { out [ outOff + i ] = ( byte ) ( cfbOutV [ i ] ^ in [ inOff + i ] ) ; } System . arraycopy ( cfbV , blockSize , cfbV , _NUM , cfbV . length - blockSize ) ; System . arraycopy ( out , outOff , cfbV , cfbV . length - blockSize , blockSize ) ; return blockSize ; }
public final void print ( String value ) { try { Element rootElement = workDoc . getDefaultRootElement ( ) ; int deleteLines = rootElement . getElementCount ( ) - linesMax ; for ( int index = _NUM ; index < deleteLines ; index ++ ) { Element elem = rootElement . getElement ( _NUM ) ; workDoc . remove ( elem . getStartOffset ( ) , elem . getEndOffset ( ) ) ; } workDoc . insertString ( workDoc . getLength ( ) , value , null ) ; textArea . setCaretPosition ( workDoc . getLength ( ) ) ; } catch ( Exception exc ) { exc . printStackTrace ( ) ; } }
private void addConnectionGroups ( Collection < ConnectionGroup > connectionGroups ) { for ( ConnectionGroup connectionGroup : connectionGroups ) { APIConnectionGroup parent = retrievedGroups . get ( connectionGroup . getParentIdentifier ( ) ) ; if ( parent != null ) { Collection < APIConnectionGroup > children = parent . getChildConnectionGroups ( ) ; if ( children == null ) { children = new ArrayList < APIConnectionGroup > ( ) ; parent . setChildConnectionGroups ( children ) ; } APIConnectionGroup apiConnectionGroup = new APIConnectionGroup ( connectionGroup ) ; retrievedGroups . put ( connectionGroup . getIdentifier ( ) , apiConnectionGroup ) ; children . add ( apiConnectionGroup ) ; } else logger . debug ( _STR , connectionGroup . getIdentifier ( ) , connectionGroup . getParentIdentifier ( ) ) ; } }
public void loadMap ( InputStream input , String groupID ) throws Exception { shapes = parser . parse ( input , groupID ) ; boundaries = new ArrayList < Rect2D > ( shapes . size ( ) ) ; for ( IGeometric2D shape : shapes ) { boundaries . add ( shape . getBounds ( ) ) ; } }
public void addDecoration ( LineDecoration decoration ) { if ( decoration != null ) { decorations . add ( decoration ) ; } }
private String parseLinkTitle ( ) { String title = match ( LINK_TITLE ) ; if ( title != null ) { return Escaping . unescapeString ( title . substring ( _NUM , title . length ( ) - _NUM ) ) ; } else { return null ; } }
public void recordSRDFOperation ( DbClient dbClient , OperationTypeEnum opType , Operation . Status status , Object ... extParam ) { try { boolean opStatus = ( Operation . Status . ready == status ) ? _BOOL : _BOOL ; String evType ; evType = opType . getEvType ( opStatus ) ; String evDesc = opType . getDescription ( ) ; String opStage = AuditLogManager . AUDITOP_END ; _logger . info ( _STR , opType . toString ( ) , evType . toString ( ) + _STR + evDesc ) ; recordBourneSRDFEvent ( dbClient , getId ( ) , evType , status , evDesc ) ; String id = ( String ) extParam [ _NUM ] ; switch ( opType ) { case CREATE_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; break ; case SUSPEND_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; break ; case DETACH_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; break ; case PAUSE_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; break ; case RESUME_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; break ; case FAILOVER_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; break ; case SWAP_SRDF_VOLUME : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; break ; case STOP_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; break ; case SYNC_SRDF_LINK : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; break ; default : _logger . error ( _STR ) ; } } catch ( Exception e ) { _logger . error ( _STR , opType . toString ( ) , e ) ; } }
@ Override public void put ( double val ) { final double nn = this . n + _NUM ; final double delta = val - m1 ; final double delta_nn = delta / nn ; final double delta_nn2 = delta_nn * delta_nn ; final double inc = delta * delta_nn * this . n ; m4 += inc * delta_nn2 * ( nn * nn - _NUM * nn + _NUM ) + _NUM * delta_nn2 * m2 - _NUM * delta_nn * m3 ; m3 += inc * delta_nn * ( nn - _NUM ) - _NUM * delta_nn * m2 ; m2 += inc ; m1 += delta_nn ; n = nn ; min = Math . min ( min , val ) ; max = Math . max ( max , val ) ; }
public void close ( ) { this . closed = _BOOL ; }
public int size ( ) { return m_RecentItems . size ( ) ; }
public JCDiagnostic warning ( LintCategory lc , String key , Object ... args ) { return create ( WARNING , lc , EnumSet . noneOf ( DiagnosticFlag . class ) , null , null , key , args ) ; }
public Destructurer ( final Tree . Pattern that , final GenerateJsVisitor gen , final Set < Declaration > directAccess , final String expvar , boolean first , final boolean forAssert ) { this . gen = gen ; jsw = gen == null ? null : gen . out ; names = gen == null ? null : gen . getNames ( ) ; this . directAccess = directAccess ; this . expvar = expvar ; this . first = first ; this . forAssert = forAssert ; that . visit ( this ) ; if ( jsw != null && ! attribs . isEmpty ( ) ) { for ( Value attr : attribs ) { jsw . write ( _STR , names . self ( ( TypeDeclaration ) attr . getContainer ( ) ) , _STR , names . name ( attr ) , _STR , names . name ( attr ) ) ; } } }
@ SuppressWarnings ( _STR ) public void handleTblSubConfigButtonDeleteRequest ( RequestInvocationEvent event ) throws ModelControlException { submitCycle = _BOOL ; CCActionTable tbl = ( CCActionTable ) getChild ( TBL_SUB_CONFIG ) ; tbl . restoreStateData ( ) ; CCActionTableModel tblModel = ( CCActionTableModel ) tbl . getModel ( ) ; Integer [ ] selected = tblModel . getSelectedRows ( ) ; SerializedField szCache = ( SerializedField ) getChild ( SZ_CACHE ) ; List list = szCache . getSerializedObj ( ) ; Set < String > names = new HashSet < > ( selected . length * _NUM ) ; for ( Integer index : selected ) { SMSubConfig sc = ( SMSubConfig ) list . get ( index ) ; names . add ( sc . getName ( ) ) ; } try { AbstractAuditModel model = ( AbstractAuditModel ) getModel ( ) ; model . deleteEventHandles ( names ) ; if ( selected . length == _NUM ) { setInlineAlertMessage ( TYPE_INFO , INFORMATION_MESSAGE , _STR ) ; } else { setInlineAlertMessage ( TYPE_INFO , INFORMATION_MESSAGE , _STR ) ; } } catch ( AMConsoleException e ) { setInlineAlertMessage ( TYPE_ERROR , ERROR_MESSAGE , e . getMessage ( ) ) ; } submitCycle = _BOOL ; forwardTo ( ) ; }
public synchronized void removeGraphListener ( GraphListener cl ) { m_graphListeners . remove ( cl ) ; }
public boolean isHealthy ( boolean doExtensiveChecks ) { if ( socket . isClosed ( ) || socket . isInputShutdown ( ) || socket . isOutputShutdown ( ) ) { return _BOOL ; } if ( framedConnection != null ) { return _BOOL ; } if ( doExtensiveChecks ) { try { int readTimeout = socket . getSoTimeout ( ) ; try { socket . setSoTimeout ( _NUM ) ; if ( source . exhausted ( ) ) { return _BOOL ; } return _BOOL ; } finally { socket . setSoTimeout ( readTimeout ) ; } } catch ( SocketTimeoutException ignored ) { } catch ( IOException e ) { return _BOOL ; } } return _BOOL ; }
public void addColumn ( int index , Column column ) { validateColumn ( column ) ; columnList . add ( index , column ) ; }
private float clampMag ( float value , float absMin , float absMax ) { final float absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
private void init ( ) { setTitle ( _STR ) ; hopPropertiesPanel = new HopfieldPropertiesPanel ( networkPanel ) ; hopPropertiesPanel . fillFieldValues ( ) ; tabLogic . setLayout ( new FlowLayout ( ) ) ; tabLogic . add ( hopPropertiesPanel ) ; tabLayout . add ( layoutPanel ) ; layoutPanel = new MainLayoutPanel ( _BOOL , this ) ; tabbedPane . addTab ( _STR , tabLogic ) ; tabbedPane . addTab ( _STR , layoutPanel ) ; setContentPane ( tabbedPane ) ; Action helpAction = new ShowHelpAction ( hopPropertiesPanel . getHelpPath ( ) ) ; addButton ( new JButton ( helpAction ) ) ; }
public BatchedImageRequest ( Request < ? > request , ImageContainer container ) { mRequest = request ; mContainers . add ( container ) ; }
private double normVector ( double [ ] z ) { double sum = _NUM ; for ( int i = _NUM ; i < problem . getNumberOfObjectives ( ) ; i ++ ) { sum += z [ i ] * z [ i ] ; } return Math . sqrt ( sum ) ; }
public String forceGetValueAsString ( ) { if ( mValue == null ) { return _STR ; } else if ( mValue instanceof byte [ ] ) { if ( mDataType == TYPE_ASCII ) { return new String ( ( byte [ ] ) mValue , US_ASCII ) ; } else { return Arrays . toString ( ( byte [ ] ) mValue ) ; } } else if ( mValue instanceof long [ ] ) { if ( ( ( long [ ] ) mValue ) . length == _NUM ) { return String . valueOf ( ( ( long [ ] ) mValue ) [ _NUM ] ) ; } else { return Arrays . toString ( ( long [ ] ) mValue ) ; } } else if ( mValue instanceof Object [ ] ) { if ( ( ( Object [ ] ) mValue ) . length == _NUM ) { Object val = ( ( Object [ ] ) mValue ) [ _NUM ] ; if ( val == null ) { return _STR ; } else { return val . toString ( ) ; } } else { return Arrays . toString ( ( Object [ ] ) mValue ) ; } } else { return mValue . toString ( ) ; } }
public int hashCode ( ) { return _NUM * factor . hashCode ( ) + lag ; }
public void deserializeArchivedVersions ( ) throws RuntimeException { System . out . println ( _STR + getArchiveDirectory ( ) + _STR ) ; File archive = new File ( getArchiveDirectory ( ) ) ; if ( ! archive . exists ( ) || ! archive . isDirectory ( ) ) { return ; } String [ ] listing = archive . list ( ) ; for ( String archiveName : listing ) { if ( ! ( archiveName . endsWith ( _STR ) ) ) { continue ; } try { File file = new File ( getArchiveDirectory ( ) , archiveName ) ; ZipFile zipFile = new ZipFile ( file ) ; ZipEntry entry = zipFile . getEntry ( _STR ) ; InputStream inputStream = zipFile . getInputStream ( entry ) ; ObjectInputStream objectIn = new ObjectInputStream ( inputStream ) ; Map < String , List < String > > classFields = ( Map < String , List < String > > ) objectIn . readObject ( ) ; zipFile . close ( ) ; for ( String className : classFields . keySet ( ) ) { List < String > fieldNames = classFields . get ( className ) ; Class < ? > clazz = Class . forName ( className ) ; ObjectStreamClass streamClass = ObjectStreamClass . lookup ( clazz ) ; if ( streamClass == null ) { System . out . println ( ) ; } for ( String fieldName : fieldNames ) { assert streamClass != null ; ObjectStreamField field = streamClass . getField ( fieldName ) ; if ( field == null ) { throw new RuntimeException ( _STR + fieldName + _STR + className + _STR + _STR + _STR + className + _STR + archiveName + _STR ) ; } } } } catch ( ClassNotFoundException e ) { throw new RuntimeException ( _STR + archiveName + _STR , e ) ; } catch ( IOException e ) { throw new RuntimeException ( _STR + archiveName + _STR , e ) ; } System . out . println ( _STR + archiveName + _STR ) ; ZipEntry zipEntry = null ; try { File file = new File ( getArchiveDirectory ( ) , archiveName ) ; FileInputStream in = new FileInputStream ( file ) ; ZipInputStream zipinputstream = new ZipInputStream ( in ) ; while ( ( zipEntry = zipinputstream . getNextEntry ( ) ) != null ) { if ( ! zipEntry . getName ( ) . endsWith ( _STR ) ) { continue ; } ObjectInputStream objectIn = new ObjectInputStream ( zipinputstream ) ; objectIn . readObject ( ) ; zipinputstream . closeEntry ( ) ; } zipinputstream . close ( ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( _STR + zipEntry . getName ( ) + _STR + archiveName + _STR + _STR + _STR , e ) ; } catch ( IOException e ) { throw new RuntimeException ( _STR + archiveName + _STR , e ) ; } } System . out . println ( _STR ) ; }
private void convertMaximalToMinimalEdgeRings ( List ringEdges ) { for ( Iterator i = ringEdges . iterator ( ) ; i . hasNext ( ) ; ) { PolygonizeDirectedEdge de = ( PolygonizeDirectedEdge ) i . next ( ) ; long label = de . getLabel ( ) ; List intNodes = findIntersectionNodes ( de , label ) ; if ( intNodes == null ) continue ; for ( Iterator iNode = intNodes . iterator ( ) ; iNode . hasNext ( ) ; ) { Node node = ( Node ) iNode . next ( ) ; computeNextCCWEdges ( node , label ) ; } } }
public byte [ ] generateMAC ( byte commandClass , byte [ ] ciphertext , byte sendingNode , byte receivingNode , byte [ ] iv ) throws GeneralSecurityException { traceHex ( _STR , ciphertext ) ; traceHex ( _STR , iv ) ; int bufferSize = ciphertext . length + _NUM ; byte [ ] buffer = new byte [ bufferSize ] ; byte [ ] tempAuth = new byte [ _NUM ] ; buffer [ _NUM ] = commandClass ; buffer [ _NUM ] = sendingNode ; buffer [ _NUM ] = receivingNode ; buffer [ _NUM ] = ( byte ) ciphertext . length ; System . arraycopy ( ciphertext , _NUM , buffer , _NUM , ciphertext . length ) ; traceHex ( _STR , networkKey . getEncoded ( ) ) ; traceHex ( _STR , buffer ) ; Cipher encryptCipher = Cipher . getInstance ( _STR ) ; encryptCipher . init ( Cipher . ENCRYPT_MODE , authKey ) ; tempAuth = encryptCipher . doFinal ( iv ) ; traceHex ( _STR , tempAuth ) ; byte [ ] encpck = new byte [ _NUM ] ; int block = _NUM ; for ( int i = _NUM ; i < bufferSize ; i ++ ) { encpck [ block ] = buffer [ i ] ; block ++ ; if ( block == _NUM ) { for ( int j = _NUM ; j < _NUM ; j ++ ) { tempAuth [ j ] = ( byte ) ( encpck [ j ] ^ tempAuth [ j ] ) ; encpck [ j ] = _NUM ; } Arrays . fill ( encpck , ( byte ) _NUM ) ; block = _NUM ; encryptCipher . init ( Cipher . ENCRYPT_MODE , authKey ) ; tempAuth = encryptCipher . doFinal ( tempAuth ) ; } } if ( block > _NUM ) { for ( int i = _NUM ; i < _NUM ; i ++ ) { tempAuth [ i ] = ( byte ) ( encpck [ i ] ^ tempAuth [ i ] ) ; } encryptCipher . init ( Cipher . ENCRYPT_MODE , authKey ) ; tempAuth = encryptCipher . doFinal ( tempAuth ) ; } traceHex ( _STR , tempAuth ) ; byte [ ] mac = new byte [ _NUM ] ; System . arraycopy ( tempAuth , _NUM , mac , _NUM , _NUM ) ; return mac ; }
public void removeEventListener ( ImageSharingListener listener ) throws RcsServiceNotAvailableException , RcsGenericException { if ( mApi == null ) { throw new RcsServiceNotAvailableException ( ) ; } try { WeakReference < IImageSharingListener > weakRef = mImageSharingListeners . remove ( listener ) ; if ( weakRef == null ) { return ; } IImageSharingListener rcsListener = weakRef . get ( ) ; if ( rcsListener != null ) { mApi . removeEventListener2 ( rcsListener ) ; } } catch ( Exception e ) { RcsIllegalArgumentException . assertException ( e ) ; throw new RcsGenericException ( e ) ; } }
private void updateWaveFileSize ( ) throws IOException { ByteBuffer buffer = getUnsignedIntegerBuffer ( mFileChannel . size ( ) - _NUM ) ; mFileChannel . write ( buffer , _NUM ) ; ByteBuffer buffer2 = getUnsignedIntegerBuffer ( mFileChannel . size ( ) - _NUM ) ; mFileChannel . write ( buffer2 , _NUM ) ; }
private void writeJournal ( ParcelFileDescriptor newState , Journal journal ) { try { FileOutputStream outStream = new FileOutputStream ( newState . getFileDescriptor ( ) ) ; final byte [ ] journalBytes = writeCheckedBytes ( journal ) ; outStream . write ( journalBytes ) ; if ( VERBOSE ) Log . v ( TAG , _STR + journalBytes . length + _STR ) ; } catch ( IOException e ) { Log . w ( TAG , _STR , e ) ; } }
public boolean matches ( String sa ) { if ( _length != sa . length ( ) ) return _BOOL ; char [ ] buffer = _buffer ; int offset = _offset ; for ( int i = _length - _NUM ; i >= _NUM ; i -- ) if ( _buffer [ _offset + i ] != sa . charAt ( i ) ) return _BOOL ; return _BOOL ; }
@ Override public void mouseReleased ( MouseEvent event ) { if ( event . getSource ( ) == getComponentDecreaseSpinnerButton ( ) ) { decreaseTimer . stop ( ) ; } else { increaseTimer . stop ( ) ; } }
public double computeMaxClassValueUsingPercentFactorPerSeries ( DefaultChartData chartData , String [ ] series , double [ ] percentFactorPerSeries ) { double maxValue = _NUM ; for ( String className : chartData . getClassNamesIncludingDisabled ( ) ) { double total = _NUM ; for ( int i = _NUM ; i < series . length ; i ++ ) { String seriesName = series [ i ] ; if ( transposedHeightsAdditive ) total += percentFactorPerSeries [ i ] * chartData . getValueAsDouble ( seriesName , className ) ; else total = Math . max ( total , percentFactorPerSeries [ i ] * chartData . getValueAsDouble ( seriesName , className ) ) ; } if ( total > maxValue ) { maxValue = total ; } } return _NUM * maxValue ; }
public int addChannel ( Channel channel ) { int index = - _NUM ; switch ( channel . getChannelType ( ) ) { case STANDARD : mChannels . add ( channel ) ; index = mChannels . size ( ) - _NUM ; fireTableRowsInserted ( index , index ) ; break ; case TRAFFIC : mTrafficChannels . add ( channel ) ; index = mChannels . size ( ) - _NUM ; break ; default : break ; } broadcast ( new ChannelEvent ( channel , Event . NOTIFICATION_ADD ) ) ; if ( channel . getEnabled ( ) ) { broadcast ( new ChannelEvent ( channel , Event . REQUEST_ENABLE ) ) ; } return index ; }
public static String join ( Object ... array ) { if ( array == null ) { return null ; } if ( array . length == _NUM ) { return StringPool . EMPTY ; } if ( array . length == _NUM ) { return String . valueOf ( array [ _NUM ] ) ; } final StringBuilder sb = new StringBuilder ( array . length * _NUM ) ; for ( int i = _NUM ; i < array . length ; i ++ ) { sb . append ( array [ i ] ) ; } return sb . toString ( ) ; }
public boolean hasTrait ( final StoreTrait storeTrait ) { final Set < StoreTrait > traits = getTraits ( ) ; return null != traits && traits . contains ( storeTrait ) ; }
public void createSupply ( MWMInOutBoundLine boundline , BigDecimal qtySupply ) { MProduct product = MProduct . get ( boundline . getCtx ( ) , boundline . getM_Product_ID ( ) ) ; if ( product . isBOM ( ) ) { createMO ( boundline , product , qtySupply ) ; } else if ( product . isPurchased ( ) ) { createRequisition ( boundline , product , qtySupply ) ; } }
public int size ( ) { return parameters . size ( ) ; }
public List < LocalTime > top ( int n ) { List < LocalTime > top = new ArrayList < > ( ) ; int [ ] values = data . toIntArray ( ) ; IntArrays . parallelQuickSort ( values , ReverseIntComparator . instance ( ) ) ; for ( int i = _NUM ; i < n && i < values . length ; i ++ ) { top . add ( PackedLocalTime . asLocalTime ( values [ i ] ) ) ; } return top ; }
@ Override public void loadXML ( Node stepnode , List < DatabaseMeta > databases , Map < String , Counter > counters ) throws KettleXMLException { try { schemaName = XMLHandler . getTagValue ( stepnode , _STR ) ; tabelName = XMLHandler . getTagValue ( stepnode , _STR ) ; mdkeySize = XMLHandler . getTagValue ( stepnode , _STR ) ; measureCount = XMLHandler . getTagValue ( stepnode , _STR ) ; heirAndKeySize = XMLHandler . getTagValue ( stepnode , _STR ) ; cubeName = XMLHandler . getTagValue ( stepnode , _STR ) ; groupByEnabled = XMLHandler . getTagValue ( stepnode , _STR ) ; aggregatorClassString = XMLHandler . getTagValue ( stepnode , _STR ) ; aggregatorString = XMLHandler . getTagValue ( stepnode , _STR ) ; factDimLensString = XMLHandler . getTagValue ( stepnode , _STR ) ; levelAnddataTypeString = XMLHandler . getTagValue ( stepnode , _STR ) ; currentRestructNumber = Integer . parseInt ( XMLHandler . getTagValue ( stepnode , _STR ) ) ; partitionID = XMLHandler . getTagValue ( stepnode , _STR ) ; segmentId = XMLHandler . getTagValue ( stepnode , _STR ) ; taskNo = XMLHandler . getTagValue ( stepnode , _STR ) ; } catch ( Exception e ) { throw new KettleXMLException ( _STR , e ) ; } }
public void put ( int key , E value ) { int i = binarySearch ( mKeys , _NUM , mSize , key ) ; if ( i >= _NUM ) { mValues [ i ] = value ; } else { i = ~ i ; if ( i < mSize && mValues [ i ] == DELETED ) { mKeys [ i ] = key ; mValues [ i ] = value ; return ; } if ( mGarbage && mSize >= mKeys . length ) { gc ( ) ; i = ~ binarySearch ( mKeys , _NUM , mSize , key ) ; } if ( mSize >= mKeys . length ) { int n = Math . max ( mSize + _NUM , mKeys . length * _NUM ) ; int [ ] nkeys = new int [ n ] ; Object [ ] nvalues = new Object [ n ] ; System . arraycopy ( mKeys , _NUM , nkeys , _NUM , mKeys . length ) ; System . arraycopy ( mValues , _NUM , nvalues , _NUM , mValues . length ) ; mKeys = nkeys ; mValues = nvalues ; } if ( mSize - i != _NUM ) { System . arraycopy ( mKeys , i , mKeys , i + _NUM , mSize - i ) ; System . arraycopy ( mValues , i , mValues , i + _NUM , mSize - i ) ; } mKeys [ i ] = key ; mValues [ i ] = value ; mSize ++ ; } }
public void readData ( DataInput din ) throws IOException { reference = din . readUnsignedShort ( ) ; }
public float dotProduct ( DenseVector df ) { float res = _NUM ; for ( int i = _NUM ; i < Math . min ( size , df . getLength ( ) ) ; i ++ ) { res += u [ i ] * df . u [ i ] ; } return res ; }
private void emitCode ( ) { LinkedList < Instantiation > worklist = new LinkedList < Instantiation > ( ) ; worklist . add ( new Instantiation ( null , mainSubroutine ) ) ; InsnList newInstructions = new InsnList ( ) ; List < TryCatchBlockNode > newTryCatchBlocks = new ArrayList < TryCatchBlockNode > ( ) ; List < LocalVariableNode > newLocalVariables = new ArrayList < LocalVariableNode > ( ) ; while ( ! worklist . isEmpty ( ) ) { Instantiation inst = worklist . removeFirst ( ) ; emitSubroutine ( inst , worklist , newInstructions , newTryCatchBlocks , newLocalVariables ) ; } instructions = newInstructions ; tryCatchBlocks = newTryCatchBlocks ; localVariables = newLocalVariables ; }
public static double stDev ( final List < Double > list ) { return Math . sqrt ( variance ( list ) ) ; }
public void trimToSize ( ) { if ( size < array . length ) { int [ ] olddata = array ; array = new int [ size ] ; System . arraycopy ( olddata , _NUM , array , _NUM , size ) ; } }
public void testSetBitZeroOutside1 ( ) { byte aBytes [ ] = { _NUM } ; int aSign = _NUM ; int number = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . setBit ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public static int compare ( Date left , boolean right ) { return compare ( left , right ? _NUM : _NUM ) ; }
private IBindingSet [ ] decodeNextChunk ( ) throws IOException { if ( nsolutions == solutionSetCount ) { if ( log . isDebugEnabled ( ) ) log . debug ( _STR + name + _STR + nsolutions ) ; return null ; } in . readInt ( ) ; final int chunkSize = in . readInt ( ) ; final int byteLength = in . readInt ( ) ; final byte [ ] a = new byte [ byteLength ] ; in . readFully ( a ) ; final DataInputBuffer buf = new DataInputBuffer ( a ) ; final IBindingSet [ ] t = new IBindingSet [ chunkSize ] ; for ( int i = _NUM ; i < chunkSize ; i ++ ) { t [ i ] = decoder . decodeSolution ( buf , _BOOL ) ; if ( log . isTraceEnabled ( ) ) log . trace ( _STR + name + _STR + t [ i ] ) ; } nsolutions += chunkSize ; if ( log . isTraceEnabled ( ) ) log . trace ( _STR + name + _STR + chunkSize + _STR + ( SolutionSetStreamEncoder . CHUNK_HEADER_SIZE + byteLength ) + _STR + nsolutions ) ; return t ; }
public UDPClientSocket ( Logger logger ) { this . logger = logger ; try { socket = new DatagramSocket ( ) ; socket . setBroadcast ( _BOOL ) ; socket . setSendBufferSize ( _NUM * _NUM * _NUM ) ; socket . setReceiveBufferSize ( _NUM * _NUM * _NUM ) ; socket . setSoTimeout ( _NUM ) ; } catch ( SocketException e ) { logger . severe ( _STR ) ; logger . severe ( _STR + e . getMessage ( ) ) ; System . exit ( _NUM ) ; } }
public void multiplyAllValuesBy ( final double multiplyBy , final int RoundType ) { for ( final T t : keySet ( ) ) { double val = mapValues . get ( t ) ; switch ( RoundType ) { case _NUM : val = Math . floor ( val * multiplyBy ) ; break ; case _NUM : val = Math . round ( val * multiplyBy ) ; break ; case _NUM : val = Math . ceil ( val * multiplyBy ) ; break ; default : val = val * multiplyBy ; break ; } put ( t , ( int ) val ) ; } }
public static boolean isLevel ( Level level ) { if ( level == null ) return _BOOL ; return level . intValue ( ) >= s_currentLevel . intValue ( ) ; }
protected void computeFolderChildren ( File folder , boolean isIncluded , String [ ] pkgName , ArrayList vChildren , char [ ] [ ] inclusionPatterns , char [ ] [ ] exclusionPatterns ) throws JavaModelException { if ( isIncluded ) { IPackageFragment pkg = getPackageFragment ( pkgName ) ; vChildren . add ( pkg ) ; } try { File [ ] members = folder . listFiles ( ) ; boolean hasIncluded = isIncluded ; int length = members . length ; if ( length > _NUM ) { JavaProject javaProject = ( JavaProject ) getJavaProject ( ) ; String sourceLevel = javaProject . getOption ( JavaCore . COMPILER_SOURCE , _BOOL ) ; String complianceLevel = javaProject . getOption ( JavaCore . COMPILER_COMPLIANCE , _BOOL ) ; for ( int i = _NUM ; i < length ; i ++ ) { File member = members [ i ] ; String memberName = member . getName ( ) ; if ( member . isDirectory ( ) ) { if ( Util . isValidFolderNameForPackage ( memberName , sourceLevel , complianceLevel ) ) { String [ ] newNames = Util . arrayConcat ( pkgName , manager . intern ( memberName ) ) ; boolean isMemberIncluded = _BOOL ; computeFolderChildren ( member , isMemberIncluded , newNames , vChildren , inclusionPatterns , exclusionPatterns ) ; } } else { if ( ! hasIncluded && Util . isValidCompilationUnitName ( memberName , sourceLevel , complianceLevel ) ) { hasIncluded = _BOOL ; IPackageFragment pkg = getPackageFragment ( pkgName ) ; vChildren . add ( pkg ) ; } } } } } catch ( IllegalArgumentException e ) { throw new JavaModelException ( e , IJavaModelStatusConstants . ELEMENT_DOES_NOT_EXIST ) ; } catch ( CoreException e ) { throw new JavaModelException ( e ) ; } }
public static String quote ( File input ) { return quote ( input . getAbsolutePath ( ) ) ; }
private void readFromNet ( ) throws IgniteCheckedException { try { inNetBuf . clear ( ) ; int read = ch . read ( inNetBuf ) ; if ( read == - _NUM ) throw new IgniteCheckedException ( _STR ) ; } catch ( IOException e ) { throw new IgniteCheckedException ( _STR , e ) ; } }
synchronized void clear ( ) { maps = new Maps ( ) ; tombstones . clear ( ) ; ramBytesUsedCurrent . set ( _NUM ) ; if ( mgr != null ) { mgr . removeListener ( this ) ; mgr = null ; } }
public synchronized void removeConsumer ( ImageConsumer ic ) { ics . removeElement ( ic ) ; }
public boolean isNavigationAtBottom ( ) { return ( mSmallestWidthDp >= _NUM || mInPortrait ) ; }
private void updateAperture ( int newValue , long now ) { int previous = targetAperture ; targetAperture = newValue ; targetAperture = Math . max ( minAperture , targetAperture ) ; int maxAperture = Math . min ( this . maxAperture , activeSockets . size ( ) + activeFactories . size ( ) ) ; targetAperture = Math . min ( maxAperture , targetAperture ) ; lastApertureRefresh = now ; pendings . reset ( ( minPendings + maxPendings ) / _NUM ) ; if ( targetAperture != previous ) { logger . debug ( _STR , pendings . value ( ) , targetAperture , previous ) ; } }
public I buildInvocation ( Object protocolKey , I invocation ) throws ConfigException { Objects . requireNonNull ( invocation ) ; invocation = buildInvocation ( invocation ) ; LruCache < Object , I > invocationCache = _invocationCache ; if ( invocationCache != null ) { I oldInvocation ; oldInvocation = invocationCache . get ( protocolKey ) ; if ( oldInvocation != null && ! oldInvocation . isModified ( ) ) { return oldInvocation ; } if ( invocation . getURLLength ( ) < _maxURLLength ) { invocationCache . put ( protocolKey , invocation ) ; } } return invocation ; }
public WebResourceStatistics computeMark ( WebResourceStatistics wrStatistics ) { float passed = wrStatistics . getNbOfPassed ( ) ; if ( passed == - _NUM ) { wrStatistics . setRawMark ( Float . valueOf ( - _NUM ) ) ; return wrStatistics ; } float failed = wrStatistics . getNbOfFailed ( ) ; float needMoreInfo = wrStatistics . getNbOfNmi ( ) ; if ( failed == _NUM && passed == _NUM ) { wrStatistics . setMark ( Float . valueOf ( _NUM ) ) ; return wrStatistics ; } float ratioNMI = needMoreInfo / ( passed + failed + needMoreInfo ) ; float result = ( ( _NUM - ratioNMI ) * passed / ( passed + failed ) + ratioNMI * needMoreInfo / ( passed + failed + needMoreInfo ) ) * _NUM ; wrStatistics . setMark ( result ) ; return wrStatistics ; }
public void testGcdFirstZero ( ) { byte aBytes [ ] = { _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . gcd ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public void testKingCapture ( ) throws ChessParseError { Position pos = TextIO . readFEN ( _STR ) ; pos . setWhiteMove ( _BOOL ) ; List < String > strMoves = getMoveList ( pos , _BOOL ) ; assertEquals ( _NUM , strMoves . size ( ) ) ; assertEquals ( _STR , strMoves . get ( _NUM ) ) ; pos . setPiece ( Position . getSquare ( _NUM , _NUM ) , Piece . WBISHOP ) ; pos . setPiece ( Position . getSquare ( _NUM , _NUM ) , Piece . WPAWN ) ; strMoves = getMoveList ( pos , _BOOL ) ; assertEquals ( _NUM , strMoves . size ( ) ) ; assertEquals ( _STR , strMoves . get ( _NUM ) ) ; pos . setPiece ( Position . getSquare ( _NUM , _NUM ) , Piece . WPAWN ) ; pos . setPiece ( Position . getSquare ( _NUM , _NUM ) , Piece . WPAWN ) ; strMoves = getMoveList ( pos , _BOOL ) ; assertEquals ( _NUM , strMoves . size ( ) ) ; assertEquals ( _STR , strMoves . get ( _NUM ) ) ; }
public static BinaryMessage checkAndCorrect ( BinaryMessage message , int startIndex ) { boolean parityError = message . cardinality ( ) % _NUM != _NUM ; int syndrome = getSyndrome ( message , startIndex ) ; if ( syndrome == _NUM ) { if ( parityError ) { message . flip ( startIndex + _NUM ) ; } message . setCRC ( CRC . PASSED ) ; return message ; } int original = message . getInt ( _NUM , _NUM ) ; int index = - _NUM ; int syndromeWeight = _NUM ; int errors = _NUM ; while ( index < _NUM ) { if ( index != - _NUM ) { if ( index > _NUM ) { message . flip ( index - _NUM ) ; } message . flip ( index ) ; syndromeWeight = _NUM ; } syndrome = getSyndrome ( message , startIndex ) ; if ( syndrome > _NUM ) { for ( int i = _NUM ; i < _NUM ; i ++ ) { errors = Integer . bitCount ( syndrome ) ; if ( errors <= syndromeWeight ) { message . xor ( _NUM , _NUM , syndrome ) ; message . rotateRight ( i , startIndex , startIndex + _NUM ) ; if ( index >= _NUM ) { errors ++ ; } int corrected = message . getInt ( _NUM , _NUM ) ; if ( Integer . bitCount ( original ^ corrected ) > _NUM ) { message . setCRC ( CRC . FAILED_CRC ) ; return message ; } message . setCRC ( CRC . PASSED ) ; return message ; } else { message . rotateLeft ( startIndex , startIndex + _NUM ) ; syndrome = getSyndrome ( message , startIndex ) ; } } index ++ ; } } message . setCRC ( CRC . FAILED_CRC ) ; return message ; }
public static List < Object > validateAndEvaluate ( String viewName , StatementContext statementContext , List < ExprNode > expressions ) throws ViewParameterException { List < Object > results = new ArrayList < Object > ( ) ; int expressionNumber = _NUM ; StreamTypeService streamTypeService = new StreamTypeServiceImpl ( statementContext . getEngineURI ( ) , _BOOL ) ; for ( ExprNode expr : expressions ) { Object result = validateAndEvaluateExpr ( viewName , statementContext , expr , streamTypeService , expressionNumber ) ; results . add ( result ) ; expressionNumber ++ ; } return results ; }
@ NotNull public static String parseRelativeDirectory ( @ NotNull String s ) throws SvnBindException { s = s . trim ( ) ; int length = s . length ( ) ; String result ; if ( isUnescapedQuote ( s , length - _NUM ) ) { int index = lastUnescapedIndexOf ( s , length - _NUM , _STR ) ; assertIndex ( s , index , _STR ) ; result = s . substring ( index + _NUM , length - _NUM ) ; } else { int index = lastUnescapedIndexOf ( s , length , _STR ) ; assertIndex ( s , index , _STR ) ; result = s . substring ( index + _NUM ) ; } return unescape ( result ) ; }
private String pickEncoding ( InputSource inputSource ) { Reader reader = inputSource . getCharacterStream ( ) ; if ( reader != null ) { return CHARACTER_ENCODING ; } String encoding = inputSource . getEncoding ( ) ; return encoding == null ? DEFAULT_ENCODING : encoding ; }
@ Override public String generateURL ( CategoryDataset dataset , int series , int category ) { String url = this . prefix ; Comparable seriesKey = dataset . getRowKey ( series ) ; Comparable categoryKey = dataset . getColumnKey ( category ) ; boolean firstParameter = ! url . contains ( _STR ) ; url += firstParameter ? _STR : _STR ; try { url += this . seriesParameterName + _STR + URLEncoder . encode ( seriesKey . toString ( ) , _STR ) ; url += _STR + this . categoryParameterName + _STR + URLEncoder . encode ( categoryKey . toString ( ) , _STR ) ; } catch ( UnsupportedEncodingException ex ) { throw new RuntimeException ( ex ) ; } return url ; }
public boolean isIdleExpire ( ) { if ( ! _lifecycle . isActive ( ) ) return _BOOL ; long now = currentTimeActual ( ) ; long idleExpire = _threadIdleExpireTime . get ( ) ; int idleCount = _idleCount . get ( ) ; if ( _idleMin < idleCount ) { long nextIdleExpire = now + _idleTimeout ; if ( _idleMax < idleCount && _idleMin < _idleMax ) { _threadIdleExpireTime . compareAndSet ( idleExpire , nextIdleExpire ) ; return _BOOL ; } else if ( idleExpire < now && _threadIdleExpireTime . compareAndSet ( idleExpire , nextIdleExpire ) ) { return _BOOL ; } } return _BOOL ; }
public void beginDisplay ( DisplayEvent event ) throws ModelControlException { IdentitySubjectModel subjectModel = getSubjectModel ( ) ; PolicyModel model = ( PolicyModel ) getModel ( ) ; super . beginDisplay ( event ) ; CCDropDownMenu menu = ( CCDropDownMenu ) getChild ( FILTER_TYPE ) ; Map supportedEntityTypes = model . getSupportedEntityTypes ( realmName ) ; OptionList entityTypes = createOptionList ( supportedEntityTypes ) ; entityTypes . add ( _NUM , _STR , _STR ) ; menu . setOptions ( entityTypes ) ; menu . setValue ( _STR ) ; CCAddRemove child = ( CCAddRemove ) getChild ( VALUES_MULTIPLE_CHOICE_VALUE ) ; child . restoreStateData ( ) ; OptionList selected = addRemoveModel . getSelectedOptionList ( ) ; OptionList possible = helper . createOptionList ( model . getUserSSOToken ( ) , model . getUserLocale ( ) , this , getPossibleValues ( subjectModel , realmName ) ) ; child . resetStateData ( ) ; addRemoveModel . setAvailableOptionList ( possible ) ; }
private void decode64 ( ByteBuffer infile , LongArrayPointer a ) { byte [ ] nbitplanes = new byte [ N03 ] ; byte [ ] tmagic = new byte [ _NUM ] ; infile . get ( tmagic ) ; if ( tmagic [ _NUM ] != CODE_MAGIC [ _NUM ] || tmagic [ _NUM ] != CODE_MAGIC [ _NUM ] ) { throw new RuntimeException ( _STR ) ; } this . nx = infile . getInt ( ) ; this . ny = infile . getInt ( ) ; this . scale = infile . getInt ( ) ; long sumall = infile . getLong ( ) ; infile . get ( nbitplanes ) ; dodecode64 ( infile , a , nbitplanes ) ; a . set ( _NUM , sumall ) ; }
private static void createScript ( ) throws Exception { Class . forName ( _STR ) ; Connection conn = DriverManager . getConnection ( _STR ) ; Statement stat = conn . createStatement ( ) ; stat . execute ( _STR ) ; stat . execute ( _STR ) ; stat . execute ( _STR ) ; stat . close ( ) ; conn . close ( ) ; }
public static double cauchy ( ) { return Math . tan ( Math . PI * ( uniform ( ) - _NUM ) ) ; }
public void addJobGroupToNeverDelete ( String group ) { if ( group != null ) jobGroupsToNeverDelete . add ( group ) ; }
private WebDoc createLayout ( WebDoc doc , MWorkflow wf , int activeNode , MWFNode [ ] nodes , ArrayList nodes_ID , int [ ] [ ] imageMap ) { body b = doc . getBody ( ) ; b . addElement ( printWorkflow ( activeNode , wf , nodes , nodes_ID , imageMap ) ) ; b . addElement ( new hr ( ) ) ; b . addElement ( printDescription ( activeNode , wf , nodes , nodes_ID ) ) ; b . addElement ( new br ( ) ) ; b . addElement ( printControlPanel ( activeNode , wf , nodes , nodes_ID ) ) ; return doc ; }
@ Override public void requestPollRead ( ) { try { requestLoop ( ) ; } catch ( Exception e ) { log . log ( Level . WARNING , e . toString ( ) , e ) ; } }
public MultiMatchQueryBuilder field ( String field ) { fields . add ( field ) ; return this ; }
void encode ( OutputStream os , boolean include_h ) throws IOException { int q = params . q ; os . write ( getEncoded ( f ) ) ; if ( params . basisType == NTRUSigningKeyGenerationParameters . BASIS_TYPE_STANDARD ) { IntegerPolynomial fPrimeInt = fPrime . toIntegerPolynomial ( ) ; for ( int i = _NUM ; i < fPrimeInt . coeffs . length ; i ++ ) { fPrimeInt . coeffs [ i ] += q / _NUM ; } os . write ( fPrimeInt . toBinary ( q ) ) ; } else { os . write ( getEncoded ( fPrime ) ) ; } if ( include_h ) { os . write ( h . toBinary ( q ) ) ; } }
private void signalNoAcks ( ) { lock . lock ( ) ; try { allAcksRcvCond . signalAll ( ) ; } finally { lock . unlock ( ) ; } }
private static String arrayToString ( int [ ] array ) { StringBuilder sb = new StringBuilder ( ) ; boolean first = _BOOL ; for ( int i : array ) { if ( first ) { first = _BOOL ; } else { sb . append ( _STR ) ; } sb . append ( i ) ; } return sb . toString ( ) ; }
public static byte [ ] copy ( byte [ ] source , byte [ ] target ) { int len = source . length ; if ( len > target . length ) { target = new byte [ len ] ; } System . arraycopy ( source , _NUM , target , _NUM , len ) ; return target ; }
public double greatCircleDistance ( Location location ) { if ( location == null ) { throw new IllegalArgumentException ( Logger . logMessage ( Logger . ERROR , _STR , _STR , _STR ) ) ; } double lat1Radians = Math . toRadians ( this . latitude ) ; double lon1Radians = Math . toRadians ( this . longitude ) ; double lat2Radians = Math . toRadians ( location . latitude ) ; double lon2Radians = Math . toRadians ( location . longitude ) ; if ( lat1Radians == lat2Radians && lon1Radians == lon2Radians ) { return _NUM ; } double a = Math . sin ( ( lat2Radians - lat1Radians ) / _NUM ) ; double b = Math . sin ( ( lon2Radians - lon1Radians ) / _NUM ) ; double c = a * a + Math . cos ( lat1Radians ) * Math . cos ( lat2Radians ) * b * b ; double distanceRadians = _NUM * Math . asin ( Math . sqrt ( c ) ) ; return Double . isNaN ( distanceRadians ) ? _NUM : distanceRadians ; }
private List < InputSplit > parseManifest ( FileSystem fs , Path manifestPath , JobConf job ) throws IOException { List < InputSplit > splits = null ; FSDataInputStream fp = fs . open ( manifestPath ) ; JsonReader reader = new JsonReader ( new InputStreamReader ( fp , Charsets . UTF_8 ) ) ; reader . beginObject ( ) ; while ( reader . hasNext ( ) ) { String name = reader . nextName ( ) ; switch ( name ) { case VERSION_JSON_KEY : job . set ( DynamoDBConstants . EXPORT_FORMAT_VERSION , String . valueOf ( reader . nextInt ( ) ) ) ; break ; case ENTRIES_JSON_KEY : splits = readEntries ( reader , job ) ; break ; default : log . info ( _STR + name ) ; reader . skipValue ( ) ; break ; } } reader . endObject ( ) ; if ( splits == null ) { return Collections . emptyList ( ) ; } return splits ; }
@ Override public final void readFully ( byte ba [ ] , int off , int len ) throws IOException { dis . readFully ( ba , off , len ) ; }
public void fireOperatorMoved ( Operator operator ) { List < Operator > list = new LinkedList < > ( ) ; list . add ( operator ) ; fireOperatorsMoved ( list ) ; }
public void remove ( int i ) { individuals . remove ( i ) ; }
@ Override public void modifyVariableId ( String oldId , String newId ) { if ( baseVar . equals ( oldId ) ) { baseVar = newId . replace ( _STR , _STR ) ; } }
public static String repeat ( String str , int count ) { final StringBuilder result = new StringBuilder ( str . length ( ) * count ) ; for ( int i = _NUM ; i < count ; i ++ ) { result . append ( str ) ; } return result . toString ( ) ; }
private void waitForStateChange ( int maxTTW ) throws MqttException { synchronized ( waiter ) { if ( ! donext ) { try { waiter . wait ( maxTTW ) ; } catch ( InterruptedException e ) { log ( _STR ) ; e . printStackTrace ( ) ; } if ( ex != null ) { throw ( MqttException ) ex ; } } donext = _BOOL ; } }
@ Override public Node pickNode ( final InferenceGraph g ) { treeCache . clear ( ) ; Pair < List < Node > , Integer > bestPath = noPath ; for ( Node n : g . nodes ) { if ( ! Collections . disjoint ( n . data , varsToSolve ) ) { Pair < List < Node > , Integer > path = computeTreeToLeafs ( n ) ; if ( path . snd < bestPath . snd ) { bestPath = path ; } } } if ( bestPath == noPath ) { throw new NodeNotFoundException ( g ) ; } return bestPath . fst . head ; }
public AddUserFields ( ) { m_attributeSpecs = new ArrayList < AttributeSpec > ( ) ; }
private Integer parseInt ( String s , int flags ) { if ( convertColorNames ( flags ) ) { String c = Descriptor . convertColorName ( s ) ; if ( c != null ) { s = c ; } } try { if ( hasLeadingZeros ( s ) ) { return null ; } else { return Integer . decode ( s ) ; } } catch ( NumberFormatException e ) { return null ; } }
private Rectangle findBounds ( int AD_WF_Node_ID ) { for ( int i = _NUM ; i < m_nodes . size ( ) ; i ++ ) { WFNode node = ( WFNode ) m_nodes . get ( i ) ; if ( node . getAD_WF_Node_ID ( ) == AD_WF_Node_ID ) return node . getBounds ( ) ; } return null ; }
protected void stopWorkers ( Collection < WorkerThread > workers ) { if ( workers == null ) { workers = this . workers ; } final Iterator < WorkerThread > iter = workers . iterator ( ) ; while ( iter . hasNext ( ) ) { final WorkerThread worker = iter . next ( ) ; if ( ( worker . getStatus ( ) & ( WorkerThread . sENDED | WorkerThread . sENDING ) ) == _NUM ) { worker . signalShutdown ( ) ; runningWorkers -- ; } } }
public ArrayList < Mapping > cloneFrame ( ) { if ( stack [ top ] == null ) return null ; ArrayList < Mapping > clone = new ArrayList < Mapping > ( ) ; for ( Mapping map = topOfFrame ( ) ; map != null ; map = next ( ) ) { clone . add ( map ) ; } return clone ; }
private static int computeHashCode ( int seed , Object ... objects ) { if ( objects == null || objects . length == _NUM ) { return seed * HashCode . PRIME ; } int hc = seed ; for ( Object object : objects ) { hc = HashCode . PRIME * hc ; if ( object instanceof byte [ ] ) { hc += Arrays . hashCode ( ( byte [ ] ) object ) ; } else if ( object instanceof boolean [ ] ) { hc += Arrays . hashCode ( ( boolean [ ] ) object ) ; } else if ( object instanceof short [ ] ) { hc += Arrays . hashCode ( ( short [ ] ) object ) ; } else if ( object instanceof int [ ] ) { hc += Arrays . hashCode ( ( int [ ] ) object ) ; } else if ( object instanceof long [ ] ) { hc += Arrays . hashCode ( ( long [ ] ) object ) ; } else if ( object instanceof float [ ] ) { hc += Arrays . hashCode ( ( float [ ] ) object ) ; } else if ( object instanceof double [ ] ) { hc += Arrays . hashCode ( ( double [ ] ) object ) ; } else if ( object instanceof char [ ] ) { hc += Arrays . hashCode ( ( char [ ] ) object ) ; } else if ( object instanceof Object [ ] ) { hc += Arrays . hashCode ( ( Object [ ] ) object ) ; } else if ( object != null ) { hc += object . hashCode ( ) ; } } return hc ; }
protected float calculateStateTransitionPercentage ( String name , boolean flapping ) { int flapInterval = getFlapInterval ( name ) ; LinkedList < Boolean > list = getFlaps ( name ) ; float lowWeight = getFlapLowWeight ( name ) ; float highWeight = getFlapHighWeight ( name ) ; float weightRange = highWeight - lowWeight ; float result = _NUM ; for ( int i = list . size ( ) - _NUM ; i >= _NUM ; i -- ) { boolean thisFlap = list . get ( i ) ; if ( flapping != thisFlap ) { float weight = lowWeight + ( weightRange * i / ( flapInterval - _NUM ) ) ; result += weight ; } } return result / flapInterval ; }
public static String mangleName ( Method method , boolean isFull ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( method . getName ( ) ) ; Class [ ] params = method . getParameterTypes ( ) ; for ( int i = _NUM ; i < params . length ; i ++ ) { sb . append ( _STR ) ; sb . append ( mangleClass ( params [ i ] , isFull ) ) ; } return sb . toString ( ) ; }
private void saveState ( ) { savedStartOffset = offsetAttribute . startOffset ( ) ; savedEndOffset = offsetAttribute . endOffset ( ) ; hasIllegalOffsets = ( savedEndOffset - savedStartOffset != termAttribute . length ( ) ) ; savedType = typeAttribute . type ( ) ; if ( savedBuffer . length < termAttribute . length ( ) ) { savedBuffer = new char [ ArrayUtil . oversize ( termAttribute . length ( ) , Character . BYTES ) ] ; } System . arraycopy ( termAttribute . buffer ( ) , _NUM , savedBuffer , _NUM , termAttribute . length ( ) ) ; iterator . text = savedBuffer ; hasSavedState = _BOOL ; }
public String consumeTo ( String seq ) { int offset = queue . indexOf ( seq , pos ) ; if ( offset != - _NUM ) { String consumed = queue . substring ( pos , offset ) ; pos += consumed . length ( ) ; return consumed ; } else { return remainder ( ) ; } }
private void printOutDefinedIPs ( List < String > definedIPs ) { List < String > ipList = new ArrayList < > ( ) ; for ( String ip : definedIPs ) { if ( ip . indexOf ( _STR ) != - _NUM ) { ipList . add ( _STR + ip ) ; } else { ipList . add ( _STR + ip ) ; } } Collections . sort ( ipList ) ; for ( String ip : ipList ) { log . info ( ip ) ; } }
private void disposeCodec ( IoSession session ) { disposeEncoder ( session ) ; disposeDecoder ( session ) ; disposeDecoderOut ( session ) ; }
private static int transpositions ( final CharSequence first , final CharSequence second ) { int transpositions = _NUM ; for ( int i = _NUM ; i < first . length ( ) ; i ++ ) { if ( first . charAt ( i ) != second . charAt ( i ) ) { transpositions ++ ; } } return transpositions / _NUM ; }
@ Override public Object parseObject ( final String source , final ParsePosition pos ) { return parser . parseObject ( source , pos ) ; }
@ Override public default Stream < TimeSeriesCollection > stream ( ) { return StreamSupport . stream ( spliterator ( ) , _BOOL ) ; }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
private ManifestModInfo registerMod ( File file , Manifest manifest ) { ManifestModInfo mod = loadMod ( file , manifest ) ; if ( mod != null ) { if ( idMap . containsKey ( mod . getModID ( ) ) ) { ModInfo mod2 = idMap . get ( mod . getModID ( ) ) ; duplicates . put ( mod . getModID ( ) , mod ) ; duplicates . put ( mod . getModID ( ) , mod2 ) ; log . error ( _STR , mod . getModFile ( ) , mod2 . getModFile ( ) ) ; } else { modList . add ( mod ) ; idMap . put ( mod . getModID ( ) , mod ) ; } } return mod ; }
protected Size2D arrangeNN ( BlockContainer container , Graphics2D g2 ) { List blocks = container . getBlocks ( ) ; Block b = ( Block ) blocks . get ( _NUM ) ; Size2D s = b . arrange ( g2 , RectangleConstraint . NONE ) ; b . setBounds ( new Rectangle2D . Double ( _NUM , _NUM , s . width , s . height ) ) ; return new Size2D ( s . width , s . height ) ; }
public static boolean isContentType ( String contentType , Message message ) { if ( contentType == null ) { return message . getContentType ( ) == null ; } else { return contentType . equals ( message . getContentType ( ) ) ; } }
private static X509Certificate generateCertificate ( String dn , int days , String applicationUri , KeyPair keys , org . opcfoundation . ua . transport . security . KeyPair issuerKeys , String ... hostNames ) throws GeneralSecurityException , IOException { PrivateKey privkey = keys . getPrivate ( ) ; PublicKey publicKey = keys . getPublic ( ) ; return generateCertificate ( dn , days , applicationUri , publicKey , privkey , issuerKeys , hostNames ) ; }
@ SuppressWarnings ( _STR ) public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { submitCycle = _BOOL ; AbstractAuditModel model = ( AbstractAuditModel ) getModel ( ) ; AMPropertySheet ps = ( AMPropertySheet ) getChild ( PROPERTY_ATTRIBUTE ) ; String subConfigName = ( String ) getPageSessionAttribute ( AUDIT_HANDLER_NAME ) ; try { Map orig = model . getEventHandlerAttributeValues ( subConfigName ) ; Map values = ps . getAttributeValues ( orig , _BOOL , _BOOL , model ) ; model . setEventHandlerAttributeValues ( subConfigName , values ) ; backToProfileViewBean ( ) ; } catch ( AMConsoleException e ) { setInlineAlertMessage ( TYPE_ERROR , ERROR_MESSAGE , e . getMessage ( ) ) ; forwardTo ( ) ; } }
private String checkAllDependencies ( HashMap < String , ModuleDescriptor > modlist ) { for ( ModuleDescriptor md : modlist . values ( ) ) { String res = checkDependencies ( md , modlist ) ; if ( ! res . isEmpty ( ) ) { return res ; } } return _STR ; }
public void childrenRemoved ( BeanContextMembershipEvent bcme ) { for ( Iterator it = bcme . iterator ( ) ; it . hasNext ( ) ; ) { findAndUndo ( it . next ( ) ) ; } }
public static void checkDirectoryIsWriteable ( @ NotNull File directory ) throws IOException { while ( ! directory . exists ( ) || ! directory . isDirectory ( ) ) { directory = directory . getParentFile ( ) ; } if ( ! directory . canWrite ( ) ) { throw new IOException ( _STR + directory . getAbsolutePath ( ) ) ; } }
public String toString ( ) { StringBuilder s = new StringBuilder ( ) ; boolean appended = _BOOL ; if ( this . weeks != _NUM || appended ) { appended = _BOOL ; s . append ( this . weeks + _STR ) ; } if ( this . days != _NUM || appended ) { appended = _BOOL ; s . append ( this . days + _STR ) ; } if ( this . hours != _NUM || appended ) { appended = _BOOL ; s . append ( this . hours + _STR ) ; } if ( this . minutes != _NUM || appended ) { appended = _BOOL ; s . append ( this . minutes + _STR ) ; } if ( this . seconds != _NUM || appended ) { appended = _BOOL ; s . append ( this . seconds + _STR ) ; } if ( this . milliseconds != _NUM || appended ) { appended = _BOOL ; s . append ( this . milliseconds + _STR ) ; } return s . toString ( ) ; }
private synchronized void writeObject ( java . io . ObjectOutputStream s ) throws IOException { s . defaultWriteObject ( ) ; }
public void startEntity ( String name ) throws org . xml . sax . SAXException { }
public static boolean isJavaKeyword ( String name ) { return tokens . contains ( name ) ; }
protected String extractImportUrl ( final Matcher matcher ) { return matcher . group ( INDEX_URL ) ; }
@ Override public boolean equals ( Object that ) { if ( this == that ) { return _BOOL ; } if ( that == null ) { return _BOOL ; } if ( getClass ( ) != that . getClass ( ) ) { return _BOOL ; } Collator other = ( Collator ) that ; return ( ( strength == other . strength ) && ( decmp == other . decmp ) ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList emList ; Node emNode ; CharacterData emText ; Node nullChild ; doc = ( Document ) load ( _STR , _BOOL ) ; emList = doc . getElementsByTagName ( _STR ) ; emNode = emList . item ( _NUM ) ; emText = ( CharacterData ) emNode . getFirstChild ( ) ; nullChild = emText . getFirstChild ( ) ; assertNull ( _STR , nullChild ) ; }
Type renameTypeAsType ( Type type ) { if ( type == null ) { return null ; } if ( type . getSort ( ) == Type . OBJECT ) { String in = type . getInternalName ( ) ; String newIn = renameInternalType ( in ) ; if ( newIn != in ) { return Type . getType ( _STR + newIn + _STR ) ; } } else if ( type . getSort ( ) == Type . ARRAY ) { StringBuilder sb = new StringBuilder ( ) ; for ( int n = type . getDimensions ( ) ; n > _NUM ; n -- ) { sb . append ( _STR ) ; } sb . append ( renameType ( type . getElementType ( ) ) ) ; return Type . getType ( sb . toString ( ) ) ; } return type ; }
public static void writeFileList ( XMLOutput xmlOutput , String tagName , Iterable < File > listValues ) throws IOException { if ( listValues != null ) { writeFileList ( xmlOutput , tagName , listValues . iterator ( ) ) ; } }
public DPolicyConstraints ( JDialog parent ) { super ( parent ) ; setTitle ( res . getString ( _STR ) ) ; initComponents ( ) ; }
@ PreAuthorize ( SpringEvalExpressions . HAS_AUTH_SYSTEM_ADMIN ) @ Override public ResponseEntity < Collection < String > > invalidateCaches ( ) { final Collection < String > cacheNames = cacheManager . getCacheNames ( ) ; LOGGER . info ( _STR , cacheNames ) ; cacheNames . forEach ( null ) ; return ResponseEntity . ok ( cacheNames ) ; }
public static final void writeByteArrayXml ( byte [ ] val , String name , XmlSerializer out ) throws XmlPullParserException , java . io . IOException { if ( val == null ) { out . startTag ( null , _STR ) ; out . endTag ( null , _STR ) ; return ; } out . startTag ( null , _STR ) ; if ( name != null ) { out . attribute ( null , _STR , name ) ; } final int N = val . length ; out . attribute ( null , _STR , Integer . toString ( N ) ) ; StringBuilder sb = new StringBuilder ( val . length * _NUM ) ; for ( int i = _NUM ; i < N ; i ++ ) { int b = val [ i ] ; int h = b > > _NUM ; sb . append ( h >= _NUM ? ( _STR + h - _NUM ) : ( _STR + h ) ) ; h = b & _NUM ; sb . append ( h >= _NUM ? ( _STR + h - _NUM ) : ( _STR + h ) ) ; } out . text ( sb . toString ( ) ) ; out . endTag ( null , _STR ) ; }
public static void writeFile ( final File destination , final List < String > contents ) throws IOException { final BufferedWriter bw = new BufferedWriter ( new FileWriter ( destination ) ) ; try { for ( String line : contents ) { bw . write ( line ) ; bw . newLine ( ) ; } bw . flush ( ) ; } finally { bw . close ( ) ; } }
public void cancelRequestsByTAG ( Object TAG , boolean mayInterruptIfRunning ) { if ( TAG == null ) { return ; } for ( List < RequestHandle > requestList : requestMap . values ( ) ) { if ( requestList != null ) { for ( RequestHandle requestHandle : requestList ) { if ( TAG . equals ( requestHandle . getTag ( ) ) ) requestHandle . cancel ( mayInterruptIfRunning ) ; } } } }
public static void drawSnapHorizontalMargin ( ViewTransform transform , Graphics2D g , int x1 , int x2 , int y1 , String text , boolean textOver ) { Canvas c = new Canvas ( ) ; FontMetrics fm = c . getFontMetrics ( sFont ) ; g . setFont ( sFont ) ; int padding = transform . getSwingDimension ( _NUM ) ; Rectangle2D bounds = fm . getStringBounds ( text , g ) ; int tw = ( int ) bounds . getWidth ( ) ; int offset = _NUM * CONNECTION_ARROW_SIZE ; if ( x1 > x2 ) { int temp = x1 ; x1 = x2 ; x2 = temp ; } int w = ( ( x2 - x1 ) - ( tw + _NUM * padding ) ) / _NUM ; if ( w <= padding ) { g . drawLine ( x1 , y1 , x2 , y1 ) ; if ( textOver ) { offset = - _NUM * offset / _NUM ; } g . drawString ( text , x1 + w + padding , y1 + offset ) ; } else { g . drawLine ( x1 , y1 , x1 + w , y1 ) ; g . drawLine ( x2 - w , y1 , x2 , y1 ) ; g . drawString ( text , x1 + w + padding , ( int ) ( y1 + ( bounds . getHeight ( ) / _NUM ) ) ) ; } g . drawLine ( x1 , y1 - CONNECTION_ARROW_SIZE , x1 , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x2 , y1 - CONNECTION_ARROW_SIZE , x2 , y1 + CONNECTION_ARROW_SIZE ) ; }
public static GenericRecord subsetRecord ( GenericRecord record , Schema subsetSchema ) { return subsetRecord ( record , subsetSchema , null ) ; }
static public void queueOperation ( Context context , OperationInfo args ) { args . calculateScheduledTime ( ) ; synchronized ( sWorkQueue ) { sWorkQueue . add ( args ) ; sWorkQueue . notify ( ) ; } context . startService ( new Intent ( context , AsyncQueryServiceHelper . class ) ) ; }
private static Cell [ ] interpret ( String string ) { Cell [ ] cells = new Cell [ _NUM ] ; for ( int i = _NUM ; i < string . length ( ) ; i ++ ) { int dig = string . charAt ( i ) - _STR ; int col = dig % _NUM ; int row = dig / _NUM ; cells [ i ] = new Cell ( col , row ) ; } return cells ; }
public Shape transform ( Shape shape ) { Rectangle2D bounds = shape . getBounds2D ( ) ; Point2D center = new Point2D . Double ( bounds . getCenterX ( ) , bounds . getCenterY ( ) ) ; Point2D newCenter = transform ( center ) ; double dx = newCenter . getX ( ) - center . getX ( ) ; double dy = newCenter . getY ( ) - center . getY ( ) ; AffineTransform at = AffineTransform . getTranslateInstance ( dx , dy ) ; return at . createTransformedShape ( shape ) ; }
public void list ( PrintWriter out , int indent ) { for ( int i = _NUM ; i < indent ; i ++ ) { out . print ( _STR ) ; } out . println ( this ) ; }
private void init ( ) { setTitle ( _STR ) ; compPropertiesPanel = CompetitivePropertiesPanel . createCompetitivePropertiesPanel ( networkPanel , CompetitivePropsPanelType . CREATE_GROUP ) ; tabLogic . add ( compPropertiesPanel ) ; layoutPanel = new MainLayoutPanel ( _BOOL , this ) ; layoutPanel . setCurrentLayout ( CompetitiveGroup . DEFAULT_LAYOUT ) ; tabLayout . add ( layoutPanel ) ; tabbedPane . addTab ( _STR , tabLogic ) ; tabbedPane . addTab ( _STR , layoutPanel ) ; setContentPane ( tabbedPane ) ; Action helpAction = new ShowHelpAction ( compPropertiesPanel . getHelpPath ( ) ) ; addButton ( new JButton ( helpAction ) ) ; }
public static RevocationStatus check ( X509Certificate cert , X509Certificate issuerCert ) throws IOException , CertPathValidatorException { CertId certId = null ; URI responderURI = null ; try { X509CertImpl certImpl = X509CertImpl . toImpl ( cert ) ; responderURI = getResponderURI ( certImpl ) ; if ( responderURI == null ) { throw new CertPathValidatorException ( _STR ) ; } certId = new CertId ( issuerCert , certImpl . getSerialNumberObject ( ) ) ; } catch ( CertificateException | IOException e ) { throw new CertPathValidatorException ( _STR , e ) ; } OCSPResponse ocspResponse = check ( Collections . singletonList ( certId ) , responderURI , issuerCert , null , null , Collections . < Extension > emptyList ( ) ) ; return ( RevocationStatus ) ocspResponse . getSingleResponse ( certId ) ; }
public static CompositeType forAlphaComposite ( AlphaComposite ac ) { switch ( ac . getRule ( ) ) { case AlphaComposite . CLEAR : return Clear ; case AlphaComposite . SRC : if ( ac . getAlpha ( ) >= _NUM ) { return SrcNoEa ; } else { return Src ; } case AlphaComposite . DST : return Dst ; case AlphaComposite . SRC_OVER : if ( ac . getAlpha ( ) >= _NUM ) { return SrcOverNoEa ; } else { return SrcOver ; } case AlphaComposite . DST_OVER : return DstOver ; case AlphaComposite . SRC_IN : return SrcIn ; case AlphaComposite . DST_IN : return DstIn ; case AlphaComposite . SRC_OUT : return SrcOut ; case AlphaComposite . DST_OUT : return DstOut ; case AlphaComposite . SRC_ATOP : return SrcAtop ; case AlphaComposite . DST_ATOP : return DstAtop ; case AlphaComposite . XOR : return AlphaXor ; default : throw new InternalError ( _STR ) ; } }
public void removeTrackingIcon ( Object tag ) { if ( trackingIcons != null && trackingIcons . remove ( tag ) ) { repaint ( ) ; } }
private List findPhonemes ( ) { Set set = new HashSet ( ) ; for ( int i = _NUM ; i < stateMachine . length ; i ++ ) { if ( stateMachine [ i ] instanceof FinalState ) { FinalState fstate = ( FinalState ) stateMachine [ i ] ; if ( fstate . phoneList != null ) { for ( int j = _NUM ; j < fstate . phoneList . length ; j ++ ) { set . add ( fstate . phoneList [ j ] ) ; } } } } return new ArrayList ( set ) ; }
public static File removeParent ( File parent , File file ) { String absolutePath = file . getAbsolutePath ( ) ; String parentAbsolutePath = parent . getAbsolutePath ( ) ; String newPath = absolutePath . replace ( parentAbsolutePath + _STR , _STR ) ; return new File ( newPath ) ; }
public static boolean almostEqual ( double a , double b , double delta ) { return Math . abs ( a - b ) <= delta ; }
public void endElement ( ) { nss . popContext ( ) ; }
public void test_fill$BIIB ( ) { byte val = Byte . MAX_VALUE ; byte d [ ] = new byte [ _NUM ] ; Arrays . fill ( d , _NUM , d . length , val ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) assertTrue ( _STR , ! ( d [ i ] == val ) ) ; for ( int i = _NUM ; i < d . length ; i ++ ) assertTrue ( _STR , d [ i ] == val ) ; int result ; try { Arrays . fill ( new byte [ _NUM ] , _NUM , _NUM , ( byte ) _NUM ) ; result = _NUM ; } catch ( ArrayIndexOutOfBoundsException e ) { result = _NUM ; } catch ( IllegalArgumentException e ) { result = _NUM ; } assertEquals ( _STR , _NUM , result ) ; try { Arrays . fill ( new byte [ _NUM ] , - _NUM , _NUM , ( byte ) _NUM ) ; result = _NUM ; } catch ( ArrayIndexOutOfBoundsException e ) { result = _NUM ; } catch ( IllegalArgumentException e ) { result = _NUM ; } assertEquals ( _STR , _NUM , result ) ; try { Arrays . fill ( new byte [ _NUM ] , _NUM , _NUM , ( byte ) _NUM ) ; result = _NUM ; } catch ( ArrayIndexOutOfBoundsException e ) { result = _NUM ; } catch ( IllegalArgumentException e ) { result = _NUM ; } assertEquals ( _STR , _NUM , result ) ; }
private JsonWriter open ( int empty , String openBracket ) throws IOException { beforeValue ( ) ; push ( empty ) ; out . write ( openBracket ) ; return this ; }
private double calculateLog ( double value ) { return Math . log ( value ) / this . baseLog ; }
@ Override public boolean uploadFile ( String source , String dest ) { FileInputStream fis ; try { File file = new File ( source ) ; fis = new FileInputStream ( file ) ; mDBApi . putFileOverwrite ( dest , fis , file . length ( ) , null ) ; fis . close ( ) ; return _BOOL ; } catch ( DropboxUnlinkedException e ) { Log . d ( String . valueOf ( R . string . app_name ) , _STR , e ) ; return _BOOL ; } catch ( DropboxException e ) { Log . d ( String . valueOf ( R . string . app_name ) , _STR , e ) ; return _BOOL ; } catch ( FileNotFoundException e ) { Log . d ( String . valueOf ( R . string . app_name ) , _STR , e ) ; return _BOOL ; } catch ( IOException e ) { e . printStackTrace ( ) ; return _BOOL ; } }
private File createZipFileHandle ( ) throws IOException { File zipFile = File . createTempFile ( _STR , _STR , tmpOutputFolder . getRoot ( ) ) ; assertTrue ( zipFile . delete ( ) ) ; return zipFile ; }
public boolean removeHandler ( String columnName ) { if ( m_overrides == null ) return _BOOL ; else return m_overrides . remove ( columnName ) != null ; }
public boolean isEmpty ( ) { return ( tag == null || tag . isEmpty ( ) ) && images . size ( ) == _NUM ; }
@ SuppressWarnings ( _STR ) private void restoreBadges ( ) { Bundle restoredBundle = savedInstanceState ; if ( restoredBundle != null ) { if ( restoredBundle . containsKey ( BADGE_FULL_TEXT_KEY ) ) { shouldShowBadgeWithNinePlus = restoredBundle . getBoolean ( BADGE_FULL_TEXT_KEY ) ; } if ( restoredBundle . containsKey ( BUDGES_ITEM_BUNDLE_KEY ) ) { badgeSaveInstanceHashMap = ( HashMap < Integer , Object > ) savedInstanceState . getSerializable ( BUDGES_ITEM_BUNDLE_KEY ) ; if ( badgeSaveInstanceHashMap != null ) { for ( Integer integer : badgeSaveInstanceHashMap . keySet ( ) ) { BadgeHelper . forceShowBadge ( badgeList . get ( integer ) , ( BadgeItem ) badgeSaveInstanceHashMap . get ( integer ) , shouldShowBadgeWithNinePlus ) ; } } } } }
public void touch ( ) { touch = System . currentTimeMillis ( ) ; if ( worker != null ) { worker . touch ( ) ; } }
public CatalogEntry ( String name , Vector args ) throws CatalogException { Integer iType = ( Integer ) entryTypes . get ( name ) ; if ( iType == null ) { throw new CatalogException ( CatalogException . INVALID_ENTRY_TYPE ) ; } int type = iType . intValue ( ) ; try { Integer iArgs = ( Integer ) entryArgs . get ( type ) ; if ( iArgs . intValue ( ) != args . size ( ) ) { throw new CatalogException ( CatalogException . INVALID_ENTRY ) ; } } catch ( ArrayIndexOutOfBoundsException e ) { throw new CatalogException ( CatalogException . INVALID_ENTRY_TYPE ) ; } entryType = type ; this . args = args ; }
public void addMsgWaiting ( MwiType type , int count , MwiProfile profile , boolean storeMessage ) { if ( count > _NUM ) { count = _NUM ; } messages_ . add ( new MsgWaiting ( type , count , profile , storeMessage ) ) ; }
private void pushStack ( int newTop ) { if ( stackSize == stack . length ) { int [ ] newStack = new int [ stackSize * _NUM ] ; int [ ] newPathIndices = new int [ stackSize * _NUM ] ; String [ ] newPathNames = new String [ stackSize * _NUM ] ; System . arraycopy ( stack , _NUM , newStack , _NUM , stackSize ) ; System . arraycopy ( pathIndices , _NUM , newPathIndices , _NUM , stackSize ) ; System . arraycopy ( pathNames , _NUM , newPathNames , _NUM , stackSize ) ; stack = newStack ; pathIndices = newPathIndices ; pathNames = newPathNames ; } stack [ stackSize ++ ] = newTop ; }
private static void logHierarchy ( String prefix , ClassLoader classLoader ) { if ( ! isDiagnosticsEnabled ( ) ) { return ; } ClassLoader systemClassLoader ; if ( classLoader != null ) { final String classLoaderString = classLoader . toString ( ) ; logDiagnostic ( prefix + objectId ( classLoader ) + _STR + classLoaderString + _STR ) ; } try { systemClassLoader = ClassLoader . getSystemClassLoader ( ) ; } catch ( SecurityException ex ) { logDiagnostic ( prefix + _STR ) ; return ; } if ( classLoader != null ) { StringBuffer buf = new StringBuffer ( prefix + _STR ) ; for ( ; ; ) { buf . append ( objectId ( classLoader ) ) ; if ( classLoader == systemClassLoader ) { buf . append ( _STR ) ; } try { classLoader = classLoader . getParent ( ) ; } catch ( SecurityException ex ) { buf . append ( _STR ) ; break ; } buf . append ( _STR ) ; if ( classLoader == null ) { buf . append ( _STR ) ; break ; } } logDiagnostic ( buf . toString ( ) ) ; } }
public void addGossipMember ( GossipMember member ) { gossipMembers . add ( member ) ; }
public static Collection < String > logFiles ( ) { Collection < String > res = new ArrayList < > ( fileAppenders . size ( ) ) ; for ( FileAppender a : fileAppenders ) res . add ( a . getFile ( ) ) ; return res ; }
public boolean isCaseSensitive ( ) { return m_caseSensitiveBox . isSelected ( ) ; }
public boolean isNamespaceNode ( Node n ) { if ( Node . ATTRIBUTE_NODE == n . getNodeType ( ) ) { String attrName = n . getNodeName ( ) ; return ( attrName . startsWith ( _STR ) || attrName . equals ( _STR ) ) ; } return _BOOL ; }
@ Override public int hashCode ( ) { int hash = type . hashCode ( ) ; if ( name != null ) hash ^= name . hashCode ( ) ; if ( actions != null ) hash ^= actions . hashCode ( ) ; return hash ; }
public SubConfigModelImpl ( HttpServletRequest req , String serviceName , String parentId , Map map ) throws AMConsoleException { super ( req , map ) ; this . serviceName = serviceName ; this . parentId = parentId ; subConfigMeta = new SubConfigMeta ( serviceName , this ) ; subConfigMeta . setParentId ( parentId ) ; displayName = subConfigMeta . getParentDisplayName ( ) ; }
@ Override public boolean equals ( Object obj ) { if ( ! ( obj instanceof PolynomialFunction2D ) ) { return _BOOL ; } PolynomialFunction2D that = ( PolynomialFunction2D ) obj ; return Arrays . equals ( this . coefficients , that . coefficients ) ; }
public static int convertToColorInt ( String a , String r , String g , String b , boolean useAlpha ) { int alpha = useAlpha ? Integer . parseInt ( a , _NUM ) : _NUM ; int red = Integer . parseInt ( r , _NUM ) ; int green = Integer . parseInt ( g , _NUM ) ; int blue = Integer . parseInt ( b , _NUM ) ; return Color . argb ( useAlpha ? alpha : - _NUM , red , green , blue ) ; }
@ Override public void onAction ( ) { onAction ( ActionType . PICK ) ; }
public AbstractBinaryTraversal ( IBinaryTreeNode < T > node ) { if ( node == null ) { throw new NullPointerException ( _STR ) ; } stack . add ( new Moment ( node , initialPhase ( ) ) ) ; advance ( ) ; }
@ Override public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( qName . equals ( TAG_ROOT ) ) { } else if ( qName . equals ( TAG_GROUP ) || qName . equals ( TAG_PROPERTY ) ) { SettingsItem item = itemStack . remove ( itemStack . size ( ) - _NUM ) ; settingsItems . put ( item . getKey ( ) , item ) ; } else { throw new SAXException ( _STR + localName ) ; } }
public void cancelAll ( ) { endpoint . cancelAll ( ) ; }
@ Override public double value ( int attIndex ) { int index = locateIndex ( attIndex ) ; if ( ( index >= _NUM ) && ( m_Indices [ index ] == attIndex ) ) { return m_AttValues [ index ] ; } else { return _NUM ; } }
public void initialize ( Context context , TimePickerDialog timePickerDialog , int initialHoursOfDay , int initialMinutes , boolean is24HourMode ) { if ( mTimeInitialized ) { Log . e ( TAG , _STR ) ; return ; } mTimePickerDialog = timePickerDialog ; mIs24HourMode = is24HourMode ; mHideAmPm = mAccessibilityManager . isTouchExplorationEnabled ( ) || mIs24HourMode ; mCircleView . initialize ( context , mHideAmPm ) ; mCircleView . invalidate ( ) ; if ( ! mHideAmPm ) { mAmPmCirclesView . initialize ( context , initialHoursOfDay < _NUM ? AM : PM ) ; mAmPmCirclesView . invalidate ( ) ; } Resources res = context . getResources ( ) ; int [ ] hours = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int [ ] hours_24 = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int [ ] minutes = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; String [ ] hoursTexts = new String [ _NUM ] ; String [ ] innerHoursTexts = new String [ _NUM ] ; String [ ] minutesTexts = new String [ _NUM ] ; for ( int i = _NUM ; i < _NUM ; i ++ ) { hoursTexts [ i ] = is24HourMode ? String . format ( _STR , hours_24 [ i ] ) : String . format ( _STR , hours [ i ] ) ; innerHoursTexts [ i ] = String . format ( _STR , hours [ i ] ) ; minutesTexts [ i ] = String . format ( _STR , minutes [ i ] ) ; } mHourRadialTextsView . initialize ( res , hoursTexts , ( is24HourMode ? innerHoursTexts : null ) , mHideAmPm , _BOOL ) ; mHourRadialTextsView . setSelection ( is24HourMode ? initialHoursOfDay : hours [ initialHoursOfDay % _NUM ] ) ; mHourRadialTextsView . invalidate ( ) ; mMinuteRadialTextsView . initialize ( res , minutesTexts , null , mHideAmPm , _BOOL ) ; mMinuteRadialTextsView . setSelection ( initialMinutes ) ; mMinuteRadialTextsView . invalidate ( ) ; setValueForItem ( HOUR_INDEX , initialHoursOfDay ) ; setValueForItem ( MINUTE_INDEX , initialMinutes ) ; int hourDegrees = ( initialHoursOfDay % _NUM ) * HOUR_VALUE_TO_DEGREES_STEP_SIZE ; mHourRadialSelectorView . initialize ( context , mHideAmPm , is24HourMode , _BOOL , hourDegrees , isHourInnerCircle ( initialHoursOfDay ) ) ; int minuteDegrees = initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE ; mMinuteRadialSelectorView . initialize ( context , mHideAmPm , _BOOL , _BOOL , minuteDegrees , _BOOL ) ; mTimeInitialized = _BOOL ; }
protected void decodeBitmapData ( final GifFrame frame , byte [ ] dstPixels ) { if ( frame != null ) { rawData . position ( frame . bufferFrameStart ) ; } final int nullCode = - _NUM ; final int npix = ( frame == null ) ? width * height : frame . iw * frame . ih ; int available , clear , code_mask , code_size , end_of_information , in_code , old_code , bits , code , count , i , datum , data_size , first , top , bi , pi ; if ( dstPixels == null || dstPixels . length < npix ) { dstPixels = new byte [ npix ] ; } if ( prefix == null ) { prefix = new short [ MAX_STACK_SIZE ] ; } if ( suffix == null ) { suffix = new byte [ MAX_STACK_SIZE ] ; } if ( pixelStack == null ) { pixelStack = new byte [ MAX_STACK_SIZE + _NUM ] ; } data_size = read ( ) ; clear = _NUM << data_size ; end_of_information = clear + _NUM ; available = clear + _NUM ; old_code = nullCode ; code_size = data_size + _NUM ; code_mask = ( _NUM << code_size ) - _NUM ; for ( code = _NUM ; code < clear ; code ++ ) { prefix [ code ] = _NUM ; suffix [ code ] = ( byte ) code ; } datum = bits = count = first = top = pi = bi = _NUM ; for ( i = _NUM ; i < npix ; ) { if ( top == _NUM ) { if ( bits < code_size ) { if ( count == _NUM ) { count = readBlock ( ) ; if ( count <= _NUM ) { break ; } bi = _NUM ; } datum += ( ( block [ bi ] ) & _NUM ) << bits ; bits += _NUM ; bi ++ ; count -- ; continue ; } code = datum & code_mask ; datum >>= code_size ; bits -= code_size ; if ( ( code > available ) || ( code == end_of_information ) ) { break ; } if ( code == clear ) { code_size = data_size + _NUM ; code_mask = ( _NUM << code_size ) - _NUM ; available = clear + _NUM ; old_code = nullCode ; continue ; } if ( old_code == nullCode ) { pixelStack [ top ++ ] = suffix [ code ] ; old_code = code ; first = code ; continue ; } in_code = code ; if ( code == available ) { pixelStack [ top ++ ] = ( byte ) first ; code = old_code ; } while ( code > clear ) { pixelStack [ top ++ ] = suffix [ code ] ; code = prefix [ code ] ; } first = ( suffix [ code ] ) & _NUM ; if ( available >= MAX_STACK_SIZE ) { break ; } pixelStack [ top ++ ] = ( byte ) first ; prefix [ available ] = ( short ) old_code ; suffix [ available ] = ( byte ) first ; available ++ ; if ( ( ( available & code_mask ) == _NUM ) && ( available < MAX_STACK_SIZE ) ) { code_size ++ ; code_mask += available ; } old_code = in_code ; } top -- ; dstPixels [ pi ++ ] = pixelStack [ top ] ; i ++ ; } for ( i = pi ; i < npix ; i ++ ) { dstPixels [ i ] = _NUM ; } }
public synchronized String findValue ( String k ) { if ( k == null ) { for ( int i = nkeys ; -- i >= _NUM ; ) if ( keys [ i ] == null ) return values [ i ] ; } else for ( int i = nkeys ; -- i >= _NUM ; ) { if ( k . equalsIgnoreCase ( keys [ i ] ) ) return values [ i ] ; } return null ; }
public static byte [ ] decode ( String input ) throws ParseException { if ( input . length ( ) == _NUM ) { return new byte [ _NUM ] ; } byte [ ] input58 = new byte [ input . length ( ) ] ; for ( int i = _NUM ; i < input . length ( ) ; ++ i ) { char c = input . charAt ( i ) ; int digit = c < _NUM ? INDEXES [ c ] : - _NUM ; if ( digit < _NUM ) { throw new ParseException ( _STR + c + _STR + i , i ) ; } input58 [ i ] = ( byte ) digit ; } int zeros = _NUM ; while ( zeros < input58 . length && input58 [ zeros ] == _NUM ) { ++ zeros ; } byte [ ] decoded = new byte [ input . length ( ) ] ; int outputStart = decoded . length ; for ( int inputStart = zeros ; inputStart < input58 . length ; ) { decoded [ -- outputStart ] = divmod ( input58 , inputStart , _NUM , _NUM ) ; if ( input58 [ inputStart ] == _NUM ) { ++ inputStart ; } } while ( outputStart < decoded . length && decoded [ outputStart ] == _NUM ) { ++ outputStart ; } return Arrays . copyOfRange ( decoded , outputStart - zeros , decoded . length ) ; }
TemplateSubPatternAssociation ( ElemTemplate template , StepPattern pattern , String pat ) { m_pattern = pat ; m_template = template ; m_stepPattern = pattern ; m_targetString = m_stepPattern . getTargetString ( ) ; m_wild = m_targetString . equals ( _STR ) ; }
public boolean delete ( ) throws IOException { if ( closed . compareAndSet ( _BOOL , _BOOL ) ) { close ( _BOOL ) ; boolean success = allocatedNodesList . delete ( ) ; success &= nioFile . delete ( ) ; return success ; } return _BOOL ; }
public static boolean hasNoPrefix ( final AnnotatedTypeMirror annoType ) { if ( annoType == null ) { return _BOOL ; } for ( AnnotationMirror mirror : annoType . getAnnotations ( ) ) { if ( ! hasNoPrefix ( mirror ) ) { return _BOOL ; } } return _BOOL ; }
public static void tryFormatSatisfiability ( String format ) throws IllegalFormatException { @ SuppressWarnings ( _STR ) String unused = String . format ( format , ( Object [ ] ) null ) ; }
public static IgniteLogger logger ( GridKernalContext ctx , AtomicReference < IgniteLogger > logRef , Class < ? > cls ) { IgniteLogger log = logRef . get ( ) ; if ( log == null ) { logRef . compareAndSet ( null , ctx . log ( cls ) ) ; log = logRef . get ( ) ; } return log ; }
public byte receiveOneByte ( ) { Log . d ( TAG , _STR ) ; try { acquireLock ( ) ; mServerSocket . receive ( mReceivePacket ) ; Log . d ( TAG , _STR + ( _NUM + mReceivePacket . getData ( ) [ _NUM ] ) ) ; return mReceivePacket . getData ( ) [ _NUM ] ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return Byte . MIN_VALUE ; }
public static List < ConstraintViolation > check ( Resource resource , ProgressMonitor monitor ) { return check ( resource , SPIN . constraint , null , monitor ) ; }
public static boolean isValidImdbId ( String imdbId ) { if ( StringUtils . isEmpty ( imdbId ) ) { return _BOOL ; } return imdbId . matches ( _STR ) ; }
protected void showRecordedVideo ( ) { String absPath = mCurrentVideoFile . getAbsolutePath ( ) ; Intent intent = new Intent ( this , PlayerActivity . class ) ; intent . putExtra ( PlayerActivity . EXTRA_VIDEO_PATH , absPath ) ; startActivity ( intent ) ; mCurrentVideoFile = null ; }
private void write ( Coordinate [ ] coords , int level , StringBuffer buf ) { startLine ( _STR , level , buf ) ; boolean isNewLine = _BOOL ; for ( int i = _NUM ; i < coords . length ; i ++ ) { if ( i > _NUM ) { buf . append ( TUPLE_SEPARATOR ) ; } if ( isNewLine ) { startLine ( _STR , level , buf ) ; isNewLine = _BOOL ; } write ( coords [ i ] , buf ) ; if ( ( i + _NUM ) % maxCoordinatesPerLine == _NUM && i < coords . length - _NUM ) { buf . append ( _STR ) ; isNewLine = _BOOL ; } } buf . append ( _STR ) ; }
protected static boolean isIntendedException ( Exception e , Class < ? > clazz ) { final String message = e . getMessage ( ) ; return ( ! TextUtils . isEmpty ( message ) && message . startsWith ( clazz . getName ( ) ) ) ; }
public static void swapPivot ( DenseDoubleMatrix2D source , long diag , DenseDoubleMatrix2D s , DenseDoubleMatrix2D t ) { long swapRow = diag ; long swapCol = diag ; double maxValue = Math . abs ( source . getDouble ( diag , diag ) ) ; long rows = source . getRowCount ( ) ; long cols = source . getColumnCount ( ) ; double abs = _NUM ; for ( long row = diag ; row < rows ; row ++ ) { for ( long col = diag ; col < cols ; col ++ ) { abs = Math . abs ( source . getDouble ( row , col ) ) ; if ( abs > maxValue ) { maxValue = abs ; swapRow = row ; swapCol = col ; } } } if ( swapRow != diag ) { swapRows ( source , swapRow , diag ) ; swapRows ( t , swapRow , diag ) ; } if ( swapCol != diag ) { swapCols ( source , swapCol , diag ) ; swapCols ( s , swapCol , diag ) ; } }
public boolean canPopupOverlapTaskBar ( ) { boolean result = _BOOL ; try { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPermission ( SecurityConstants . AWT . SET_WINDOW_ALWAYS_ON_TOP_PERMISSION ) ; } } catch ( SecurityException se ) { result = _BOOL ; } return result ; }
public Job createJobForCreateCluster ( String activitiXmlClasspathResourceName , List < Parameter > parameters ) throws Exception { return createJobForCreateCluster ( activitiXmlClasspathResourceName , parameters , null ) ; }
public static List < String > findMainClasses ( File rootDir ) throws IOException { List < String > ret = new ArrayList < > ( ) ; if ( ! rootDir . exists ( ) ) { return ret ; } if ( ! rootDir . isDirectory ( ) ) { throw new IllegalArgumentException ( String . format ( _STR , rootDir . getPath ( ) ) ) ; } findClasses ( ret , rootDir , rootDir . getAbsolutePath ( ) + _STR ) ; return ret ; }
private static String validateXML ( String string ) throws IOException { for ( int i = _NUM ; i < string . length ( ) ; i ++ ) { char ch = string . charAt ( i ) ; if ( ! ( ch == _NUM || ch == _NUM || ch == _NUM || ch >= _NUM ) ) throw new IOException ( _STR + Integer . toString ( ch ) + _STR ) ; } return string ; }
public void writeToFile ( String filename ) { GridUtils . writeSpatialGridTable ( this , filename ) ; }
public void readValues ( ) { readValues ( _BOOL ) ; }
protected static boolean isAccessCompatibleWithInstantRun ( int access ) { return ( ( access & Opcodes . ACC_ABSTRACT ) == _NUM ) && ( ( access & Opcodes . ACC_BRIDGE ) == _NUM ) ; }
protected ASN1Sequence ( ASN1Encodable [ ] array ) { for ( int i = _NUM ; i != array . length ; i ++ ) { seq . addElement ( array [ i ] ) ; } }
public ThreadedListenerManager ( ExecutorService pool ) { managerNumber = MANAGER_COUNT . getAndIncrement ( ) ; this . pool = pool ; }
private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject ( ) ; if ( choiceLimits . length != choiceFormats . length ) { throw new InvalidObjectException ( _STR ) ; } }
private void computeOffsetSegment ( LineSegment seg , int side , double distance , LineSegment offset ) { int sideSign = side == Position . LEFT ? _NUM : - _NUM ; double dx = seg . p1 . x - seg . p0 . x ; double dy = seg . p1 . y - seg . p0 . y ; double len = Math . sqrt ( dx * dx + dy * dy ) ; double ux = sideSign * distance * dx / len ; double uy = sideSign * distance * dy / len ; offset . p0 . x = seg . p0 . x - uy ; offset . p0 . y = seg . p0 . y + ux ; offset . p1 . x = seg . p1 . x - uy ; offset . p1 . y = seg . p1 . y + ux ; }
@ SuppressWarnings ( _STR ) public synchronized E elementAt ( int location ) { if ( location < elementCount ) { return ( E ) elementData [ location ] ; } throw arrayIndexOutOfBoundsException ( location , elementCount ) ; }
private List < QoSRule > createQoSRules ( JsonObject qosSettings ) { List < QoSRule > rules = new ArrayList < > ( ) ; if ( qosSettings . containsKey ( JSON_FIELD_RULES ) ) { JsonObject jsonRules = qosSettings . getJsonObject ( JSON_FIELD_RULES ) ; for ( String urlPatternRegExp : jsonRules . fieldNames ( ) ) { log . debug ( _STR + urlPatternRegExp ) ; JsonObject jsonRule = jsonRules . getJsonObject ( urlPatternRegExp ) ; Pattern urlPattern = Pattern . compile ( urlPatternRegExp ) ; QoSRule rule = new QoSRule ( urlPattern ) ; boolean addRule = _BOOL ; if ( jsonRule . containsKey ( _STR ) ) { addRule = _BOOL ; rule . setReject ( jsonRule . getDouble ( _STR ) ) ; } if ( jsonRule . containsKey ( _STR ) ) { addRule = _BOOL ; rule . setWarn ( jsonRule . getDouble ( _STR ) ) ; } if ( addRule ) { rules . add ( rule ) ; } else { log . warn ( _STR , urlPatternRegExp ) ; } } } return rules ; }
private static final byte [ ] toOctets ( int identifier , String text ) { byte [ ] s = text . getBytes ( StandardCharsets . UTF_8 ) ; byte [ ] base = OctetUtils . toOctets ( AttributeType . VENDOR_SPECIFIC , identifier ) ; int maxTextSpace = Attribute . MAX_ATTRIBUTE_LENGTH - base . length ; byte [ ] octets ; if ( s . length > maxTextSpace ) { octets = new byte [ Attribute . MAX_ATTRIBUTE_LENGTH ] ; System . arraycopy ( s , _NUM , octets , base . length , Attribute . MAX_ATTRIBUTE_LENGTH - base . length ) ; } else { octets = new byte [ base . length + s . length ] ; System . arraycopy ( s , _NUM , octets , base . length , s . length ) ; } System . arraycopy ( base , _NUM , octets , _NUM , base . length ) ; octets [ _NUM ] = ( byte ) octets . length ; return octets ; }
private Double formatDoubleValue ( Double value , int places ) { BigDecimal bd = new BigDecimal ( value ) ; bd = bd . setScale ( places , RoundingMode . HALF_UP ) ; return bd . doubleValue ( ) ; }
@ Override public void flush ( ) throws IOException { out . flush ( ) ; }
protected int moveOrCopyFiles ( boolean move , String what , File [ ] destFiles , File [ ] sourceFiles ) { int opCode = ( move ) ? OP_MOVE : OP_COPY ; mModifiedSrcFiles = ( move ) ? new ArrayList < String > ( ) : null ; mModifiedDestFiles = new ArrayList < String > ( ) ; openLogfile ( ) ; onPreProcess ( what , null , null , opCode ) ; int itemCount = _NUM ; int pos = _NUM ; int fileCount = destFiles . length ; while ( pos < fileCount ) { File sourceFile = sourceFiles [ pos ] ; File destFile = destFiles [ pos ] ; File destRenamed = renameDuplicate ( destFile ) ; if ( osFileMoveOrCopy ( move , destRenamed , sourceFile ) ) itemCount ++ ; log ( ( ( move ) ? _STR : _STR ) , getFilenameForLog ( sourceFile ) , _STR , getFilenameForLog ( destRenamed ) ) ; File sourceSidecar = getSidecar ( sourceFile ) ; if ( osFileExists ( sourceSidecar ) ) { File destSidecar = getSidecar ( destRenamed ) ; if ( osFileMoveOrCopy ( move , destSidecar , sourceSidecar ) ) itemCount ++ ; log ( ( ( move ) ? _STR : _STR ) , getFilenameForLog ( sourceSidecar ) , _STR , getFilenameForLog ( destSidecar ) ) ; } pos ++ ; } int modifyCount = mModifiedDestFiles . size ( ) ; String [ ] modifiedSourceFiles = ( ( mModifiedSrcFiles != null ) && ( mModifiedSrcFiles . size ( ) > _NUM ) ) ? mModifiedSrcFiles . toArray ( new String [ modifyCount ] ) : null ; onPostProcess ( what , modifiedSourceFiles , ( modifyCount > _NUM ) ? mModifiedDestFiles . toArray ( new String [ modifyCount ] ) : null , itemCount , sourceFiles . length , opCode ) ; closeLogFile ( ) ; return itemCount ; }
static boolean isCOctetStringValid ( String value , int maxLength ) { if ( value == null ) return _BOOL ; if ( value . length ( ) >= maxLength ) return _BOOL ; return _BOOL ; }
public Rectangle2D createProperBounds ( double x1 , double y1 , double x2 , double y2 ) { double x = Math . min ( x1 , x2 ) ; double y = Math . min ( y1 , y2 ) ; double w = Math . abs ( x1 - x2 ) ; double h = Math . abs ( y1 - y2 ) ; return new Rectangle2D . Double ( x , y , w , h ) ; }
public void addClearGraphDataButton ( ) { JButton clearButton = new JButton ( _STR ) ; clearButton . setAction ( RasterPlotActions . getClearGraphAction ( this ) ) ; buttonPanel . add ( clearButton ) ; }
public static float normalizedLevenshteinDistance ( String s , String t ) { float d = levenshteinDistance ( s , t ) ; int max = Math . max ( s . length ( ) , t . length ( ) ) ; return d / ( float ) max ; }
private void createFile ( int number , String extention ) { for ( int i = _NUM ; i < number ; i ++ ) { try { BufferedWriter output = new BufferedWriter ( new FileWriter ( new File ( textInputFolder + _STR + String . valueOf ( i ) + extention ) ) ) ; try { output . write ( _STR ) ; output . write ( String . valueOf ( i ) ) ; } finally { output . close ( ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } }
public boolean isAnimal ( ) { return typeString . contains ( SUFFIX_ANIMAL ) ; }
public static String unifyLineSeparators ( String s , String ls ) { if ( s == null ) { return null ; } if ( ls == null ) { ls = System . getProperty ( _STR ) ; } if ( ! ( ls . equals ( _STR ) || ls . equals ( _STR ) || ls . equals ( _STR ) ) ) { throw new IllegalArgumentException ( _STR ) ; } int length = s . length ( ) ; StringBuilder buffer = new StringBuilder ( length ) ; for ( int i = _NUM ; i < length ; i ++ ) { if ( s . charAt ( i ) == _STR ) { if ( ( i + _NUM ) < length && s . charAt ( i + _NUM ) == _STR ) { i ++ ; } buffer . append ( ls ) ; } else if ( s . charAt ( i ) == _STR ) { buffer . append ( ls ) ; } else { buffer . append ( s . charAt ( i ) ) ; } } return buffer . toString ( ) ; }
private void adjustNameAndPosition ( Node node , int deltaX , int deltaY ) { String originalName = node . getName ( ) ; String uniqueName = nextUniqueName ( originalName ) ; if ( ! uniqueName . equals ( originalName ) ) { node . setName ( uniqueName ) ; node . setCenterX ( node . getCenterX ( ) + deltaX ) ; node . setCenterY ( node . getCenterY ( ) + deltaY ) ; } }
public void addNotification ( PingNotification notification ) { notifications . add ( notification ) ; }
public List < Datastore > createNfsDatastore ( ClusterComputeResource cluster , FileShareRestRep fileSystem , FileSystemExportParam export , URI datacenterId , String datastoreName ) { addNfsDatastoreTag ( fileSystem , export , datacenterId , datastoreName ) ; List < Datastore > datastores = Lists . newArrayList ( ) ; String fileServer = StringUtils . substringBefore ( export . getMountPoint ( ) , _STR ) ; String mountPath = StringUtils . substringAfter ( export . getMountPoint ( ) , _STR ) ; for ( HostSystem host : cluster . getHosts ( ) ) { datastores . add ( execute ( new CreateNfsDatastore ( host , fileServer , mountPath , datastoreName ) ) ) ; addAffectedResource ( fileSystem ) ; ExecutionUtils . clearRollback ( ) ; } return datastores ; }
private void checkSize ( final int i ) { if ( i >= max_size ) { final int old_size = max_size ; max_size += increment_size ; if ( max_size <= i ) { max_size = i + increment_size + _NUM ; } final String [ ] temp = items ; items = new String [ max_size ] ; System . arraycopy ( temp , _NUM , items , _NUM , old_size ) ; increment_size = incrementSize ( increment_size ) ; } }
public Album ( Context context , Uri mediaUri ) { super ( ) ; media . add ( _NUM , new Media ( context , mediaUri ) ) ; setCurrentPhotoIndex ( _NUM ) ; }
static void checkInternalName ( final String name , final int start , final int end , final String msg ) { int max = end == - _NUM ? name . length ( ) : end ; try { int begin = start ; int slash ; do { slash = name . indexOf ( _STR , begin + _NUM ) ; if ( slash == - _NUM || slash > max ) { slash = max ; } checkIdentifier ( name , begin , slash , null ) ; begin = slash + _NUM ; } while ( slash != max ) ; } catch ( IllegalArgumentException unused ) { throw new IllegalArgumentException ( _STR + msg + _STR + name ) ; } }
protected void initializeTaskDone ( Set < TaskImageContainer > tasks , Optional < Runnable > runnableWhenDone ) { Set < CaptureSession > sessionSet = new HashSet < > ( ) ; Map < CaptureSession , Integer > sessionTaskCount = new HashMap < > ( ) ; for ( TaskImageContainer task : tasks ) { sessionSet . add ( task . mSession ) ; Integer currentCount = sessionTaskCount . get ( task . mSession ) ; if ( currentCount == null ) { sessionTaskCount . put ( task . mSession , _NUM ) ; } else { sessionTaskCount . put ( task . mSession , currentCount + _NUM ) ; } } synchronized ( mShadowTaskMap ) { for ( CaptureSession captureSession : sessionSet ) { BlockSignalProtocol protocol = new BlockSignalProtocol ( ) ; protocol . setCount ( sessionTaskCount . get ( captureSession ) ) ; final ImageShadowTask shadowTask ; shadowTask = new ImageShadowTask ( protocol , captureSession , runnableWhenDone ) ; mShadowTaskMap . put ( captureSession , shadowTask ) ; mProcessingTaskConsumer . enqueueTask ( shadowTask ) ; } } }
public void createCalibrationCharts ( String colorScheme , SortedMap < Integer , Integer [ ] > distanceTripMap , SortedMap < Integer , Integer [ ] > travelTimeTripMap , SortedMap < Integer , Integer [ ] > numberTripsPerMode , String path , String surveyName ) throws IOException { path = path . substring ( _NUM , path . lastIndexOf ( _STR ) ) + _STR + path . substring ( path . lastIndexOf ( _STR ) , path . length ( ) ) ; getSimulationData ( distanceTripMap , travelTimeTripMap , numberTripsPerMode ) ; simulationDistDataset . calculateSharesAndTotals ( ) ; simulationTTDataset . calculateSharesAndTotals ( ) ; commonColorScheme = colorScheme ; createModeShareStackedBarChart ( surveyName + _STR , path + fileTripDistanceByModeBenchmark , surveyDistDataset , _STR , _STR ) ; createModeShareStackedBarChart ( _STR , path + fileTripDistanceByModeSimulation , simulationDistDataset , _STR , _STR ) ; createModeShareComparisonChart ( _STR + surveyName + _STR , path + fileTripDistanceByModeComparison , simulationDistDataset , surveyDistDataset , _STR , _STR ) ; createCummulativeModeShareChart ( surveyName + _STR , path + fileCumulativeTripDistanceByModeBenchmark , surveyDistDataset , _STR , _STR ) ; createCummulativeModeShareChart ( _STR , path + fileCumulativeTripDistanceByModeSimulation , simulationDistDataset , _STR , _STR ) ; createCummulativeModeShareComparisonChart ( _STR + surveyName + _STR , path + fileCumulativeTripDistanceByModeComparison , simulationDistDataset , surveyDistDataset , _STR , _STR ) ; createModeShareStackedBarChart ( surveyName + _STR , path + fileTripTTByModeBenchmark , surveyTTDataset , _STR , _STR ) ; createModeShareStackedBarChart ( _STR , path + fileTripTTByModeSimulation , simulationTTDataset , _STR , _STR ) ; createModeShareComparisonChart ( _STR + surveyName + _STR , path + fileTripTTByModeComparison , simulationTTDataset , surveyTTDataset , _STR , _STR ) ; createCummulativeModeShareChart ( surveyName + _STR , path + fileCumulativeTripTTByModeBenchmark , surveyTTDataset , _STR , _STR ) ; createCummulativeModeShareChart ( _STR , path + fileCumModeshareTTSimulation , simulationTTDataset , _STR , _STR ) ; createCummulativeModeShareComparisonChart ( _STR + surveyName + _STR , path + fileCumModeshareTTComparison , simulationTTDataset , surveyTTDataset , _STR , _STR ) ; createModeShareHistoryChart ( _STR , path . substring ( _NUM , path . indexOf ( _STR ) ) + fileModeshareHistory , modeShareHistoryDataset , _STR , _STR , surveyTTDataset ) ; }
public static String unquote ( String name ) { return isQuoted ( name ) ? name . substring ( _NUM , name . length ( ) - _NUM ) : name ; }
public boolean hasLeader ( String playerName ) { return ( leader != null ) && leader . equals ( playerName ) ; }
synchronized void redo ( RTEditText editor ) { Stack < Operation > redoStack = getRedoStack ( editor ) ; if ( ! redoStack . empty ( ) ) { Stack < Operation > undoStack = getUndoStack ( editor ) ; Operation op = redoStack . pop ( ) ; push ( op , undoStack ) ; op . redo ( editor ) ; while ( ! redoStack . empty ( ) && op . canMerge ( redoStack . peek ( ) ) ) { op = redoStack . pop ( ) ; push ( op , undoStack ) ; op . redo ( editor ) ; } } }
private static < T > T reportJoin ( Object r ) { if ( r instanceof AltResult ) { Throwable x ; if ( ( x = ( ( AltResult ) r ) . ex ) == null ) return null ; if ( x instanceof CancellationException ) throw ( CancellationException ) x ; if ( x instanceof CompletionException ) throw ( CompletionException ) x ; throw new CompletionException ( x ) ; } @ SuppressWarnings ( _STR ) T t = ( T ) r ; return t ; }
public int write ( final Protein protein ) throws IOException { checkEntryHierarchy ( ) ; if ( entryHierarchy != null ) { for ( ProteinXref xref : protein . getCrossReferences ( ) ) { final SimpleProtein simpleProtein = SimpleProtein . valueOf ( protein , xref , entryHierarchy ) ; if ( simpleProtein != null ) { final SimpleHash model = buildModelMap ( simpleProtein , entryHierarchy ) ; Writer writer = null ; try { final Template temp = freeMarkerConfig . getTemplate ( freeMarkerTemplate ) ; checkTempDirectory ( tempDirectory ) ; if ( ! tempDirectory . endsWith ( File . separator ) ) { tempDirectory = tempDirectory + File . separator ; } UrlFriendlyIdGenerator gen = UrlFriendlyIdGenerator . getInstance ( ) ; String urlFriendlyId = gen . generate ( xref . getIdentifier ( ) ) ; final Path newResultFile = Paths . get ( tempDirectory + urlFriendlyId + _STR ) ; resultFiles . add ( newResultFile ) ; writer = Files . newBufferedWriter ( newResultFile , characterSet ) ; temp . process ( model , writer ) ; writer . flush ( ) ; } catch ( TemplateException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } finally { if ( writer != null ) { writer . close ( ) ; } } } } } return _NUM ; }
public void testCasts ( ) { String sql_begin = _STR ; String [ ] [ ] sql_tests = new String [ ] [ ] { { _STR , _STR } , { _STR , _STR } , { _STR , _STR } , { _STR , _STR } , { _STR , _STR } , { _STR , _STR } , { _STR , _STR } } ; String sql_end = _STR ; StringBuffer sql = new StringBuffer ( sql_begin ) ; StringBuffer sqle = new StringBuffer ( sql_begin ) ; for ( int i = _NUM ; i < sql_tests . length ; i ++ ) { if ( i > _NUM ) { sql . append ( _STR ) ; sqle . append ( _STR ) ; } sql . append ( sql_tests [ i ] [ _NUM ] ) ; sqle . append ( sql_tests [ i ] [ _NUM ] ) ; } sql . append ( sql_end ) ; sqle . append ( sql_end ) ; String [ ] r = convert . convert ( sql . toString ( ) ) ; assertEquals ( sqle . toString ( ) , r [ _NUM ] ) ; }
private boolean saveMacro ( ) { if ( firstTime ) { try { Thread . sleep ( firstTimeSleep ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } firstTime = _BOOL ; byte [ ] macroAccy = new byte [ macroSize ] ; int index = _NUM ; int accyNum = _NUM ; accyNum = getAccyRow ( macroAccy , index , textAccy1 , accyTextField1 , cmdButton1 ) ; if ( accyNum < _NUM ) { return _BOOL ; } if ( accyNum > _NUM ) { index += _NUM ; } accyNum = getAccyRow ( macroAccy , index , textAccy2 , accyTextField2 , cmdButton2 ) ; if ( accyNum < _NUM ) { return _BOOL ; } if ( accyNum > _NUM ) { index += _NUM ; } accyNum = getAccyRow ( macroAccy , index , textAccy3 , accyTextField3 , cmdButton3 ) ; if ( accyNum < _NUM ) { return _BOOL ; } if ( accyNum > _NUM ) { index += _NUM ; } accyNum = getAccyRow ( macroAccy , index , textAccy4 , accyTextField4 , cmdButton4 ) ; if ( accyNum < _NUM ) { return _BOOL ; } if ( accyNum > _NUM ) { index += _NUM ; } accyNum = getAccyRow ( macroAccy , index , textAccy5 , accyTextField5 , cmdButton5 ) ; if ( accyNum < _NUM ) { return _BOOL ; } if ( accyNum > _NUM ) { index += _NUM ; } accyNum = getAccyRow ( macroAccy , index , textAccy6 , accyTextField6 , cmdButton6 ) ; if ( accyNum < _NUM ) { return _BOOL ; } if ( accyNum > _NUM ) { index += _NUM ; } accyNum = getAccyRow ( macroAccy , index , textAccy7 , accyTextField7 , cmdButton7 ) ; if ( accyNum < _NUM ) { return _BOOL ; } if ( accyNum > _NUM ) { index += _NUM ; } if ( ! isUsb ) { accyNum = getAccyRow ( macroAccy , index , textAccy8 , accyTextField8 , cmdButton8 ) ; if ( accyNum < _NUM ) { return _BOOL ; } if ( accyNum > _NUM ) { index += _NUM ; } accyNum = getAccyRow ( macroAccy , index , textAccy9 , accyTextField9 , cmdButton9 ) ; if ( accyNum < _NUM ) { return _BOOL ; } if ( accyNum > _NUM ) { index += _NUM ; } } accyNum = getAccyRow ( macroAccy , index , textAccy10 , accyTextField10 , cmdButton10 ) ; if ( accyNum < _NUM ) { JOptionPane . showMessageDialog ( this , rb . getString ( _STR ) , rb . getString ( _STR ) , JOptionPane . ERROR_MESSAGE ) ; return _BOOL ; } processMemory ( _BOOL , _BOOL , macroNum , macroAccy ) ; return _BOOL ; }
public void writeIntoSPTKLF0File ( String sptkFileName ) throws IOException { LEDataOutputStream lf0Data = new LEDataOutputStream ( new BufferedOutputStream ( new FileOutputStream ( sptkFileName ) ) ) ; for ( int i = _NUM ; i < this . contour . length ; i ++ ) { double f0Val = contour [ i ] ; if ( contour [ i ] == _NUM ) { lf0Data . writeFloat ( NEGATIVE_MAXIMUM ) ; } else { lf0Data . writeFloat ( ( float ) Math . log ( contour [ i ] ) ) ; } } lf0Data . flush ( ) ; lf0Data . close ( ) ; }
public static Thread start ( long timeout ) { return start ( Thread . currentThread ( ) , timeout ) ; }
public static Element find ( Node parent , String name ) { NodeList list = parent . getChildNodes ( ) ; for ( int i = _NUM ; i < list . getLength ( ) ; i ++ ) { Node n = list . item ( i ) ; if ( n instanceof Element ) { Element e = ( Element ) n ; if ( name . equals ( e . getAttribute ( _STR ) ) ) { return e ; } } Element r = find ( n , name ) ; if ( r != null ) { return r ; } } return null ; }
final boolean transferAfterCancelledWait ( Node node ) { if ( compareAndSetWaitStatus ( node , Node . CONDITION , _NUM ) ) { enq ( node ) ; return _BOOL ; } while ( ! isOnSyncQueue ( node ) ) Thread . yield ( ) ; return _BOOL ; }
public static RE mkStar ( RE x ) { if ( x . equals ( epsilon ) || x . equals ( empty ) ) { return epsilon ; } RE res = new RE ( ReOp . STAR ) ; res . unaryArg = x ; return res ; }
public void remove ( final Object element ) { Set oldSelection = new HashSet ( selection ) ; boolean rv = selection . remove ( element ) ; if ( rv ) { fireSelectionChanged ( oldSelection , selection ) ; } oldSelection = null ; }
@ Override public void mouseClicked ( MouseEvent evt ) { delegate . mouseMoved ( evt ) ; }
public void printf ( Locale locale , String format , Object ... args ) { out . printf ( locale , format , args ) ; out . flush ( ) ; }
public void transform ( Source xmlSource , Result outputTarget ) throws TransformerException { transform ( xmlSource , outputTarget , _BOOL ) ; }
public void testSortsAttributesBeforeElements ( ) throws Exception { XppDom dom1 = XppFactory . buildDom ( _STR ) ; XppDom dom2 = XppFactory . buildDom ( _STR ) ; assertEquals ( - _NUM , comparator . compare ( dom1 , dom2 ) ) ; assertEquals ( _STR , xpath . get ( ) ) ; assertEquals ( _NUM , comparator . compare ( dom2 , dom1 ) ) ; assertEquals ( _STR , xpath . get ( ) ) ; }
public void addSuffix ( DalvInsn insn ) { suffix . add ( insn ) ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( _NUM ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; return newVector . elements ( ) ; }
private void closeSelector ( ) { if ( selector . isOpen ( ) ) { if ( log . isDebugEnabled ( ) ) log . debug ( _STR ) ; for ( SelectionKey key : selector . keys ( ) ) U . close ( key . channel ( ) , log ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR ) ; U . close ( selector , log ) ; } }
public static Number sub ( Number a , Number b ) { if ( isFloatingPoint ( a ) || isFloatingPoint ( b ) ) { return a . doubleValue ( ) - b . doubleValue ( ) ; } else { return a . longValue ( ) - b . longValue ( ) ; } }
public Builder requiredAttributes ( final String ... nameOrOIDs ) { return requiredAttributes ( Arrays . asList ( nameOrOIDs ) ) ; }
private void showHistoryDialog ( ) { JBList commandsList = new JBList ( HistoryUtils . getCommandsFromHistory ( ) ) ; commandsList . setCellRenderer ( new HistoryListCellRenderer ( ) ) ; commandsList . setEmptyText ( _STR ) ; commandsList . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; String [ ] buttons = { _STR , _STR } ; int result = JOptionPane . showOptionDialog ( toolWindowContent , commandsList , _STR , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . PLAIN_MESSAGE , null , buttons , buttons [ _NUM ] ) ; if ( result == _NUM ) { updateUiFromCommand ( ( Command ) commandsList . getSelectedValue ( ) ) ; } }
public int size ( ) { return count . get ( ) ; }
protected static byte [ ] read ( InputStream is ) throws IOException { final boolean close = _BOOL ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; try { int i ; while ( ( i = is . read ( ) ) != - _NUM ) { baos . write ( i ) ; } } finally { try { if ( close ) { is . close ( ) ; } baos . close ( ) ; } catch ( Exception ex ) { log . warn ( _STR + ex , ex ) ; } } return baos . toByteArray ( ) ; }
public static < T > Streamable < T > fromPublisher ( final Publisher < ? extends T > publisher ) { Objects . requireNonNull ( publisher ) ; final SeqSubscriber < T > sub = SeqSubscriber . subscriber ( ) ; publisher . subscribe ( sub ) ; return fromStream ( sub . stream ( ) ) ; }
public ProtobufConnection ( Listener < MessageType > handler , MessageType prototype , int maxMessageSize , int timeoutMillis ) { this . handler = handler ; this . prototype = prototype ; this . maxMessageSize = Math . min ( maxMessageSize , Integer . MAX_VALUE - _NUM ) ; setTimeoutEnabled ( _BOOL ) ; setSocketTimeout ( timeoutMillis ) ; }
private Response < Bitmap > doParse ( NetworkResponse response ) { byte [ ] data = response . data ; BitmapFactory . Options decodeOptions = new BitmapFactory . Options ( ) ; Bitmap bitmap = null ; if ( mMaxWidth == _NUM && mMaxHeight == _NUM ) { decodeOptions . inPreferredConfig = mDecodeConfig ; bitmap = BitmapFactory . decodeByteArray ( data , _NUM , data . length , decodeOptions ) ; } else { decodeOptions . inJustDecodeBounds = _BOOL ; BitmapFactory . decodeByteArray ( data , _NUM , data . length , decodeOptions ) ; int actualWidth = decodeOptions . outWidth ; int actualHeight = decodeOptions . outHeight ; int desiredWidth = getResizedDimension ( mMaxWidth , mMaxHeight , actualWidth , actualHeight , mScaleType ) ; int desiredHeight = getResizedDimension ( mMaxHeight , mMaxWidth , actualHeight , actualWidth , mScaleType ) ; decodeOptions . inJustDecodeBounds = _BOOL ; decodeOptions . inSampleSize = findBestSampleSize ( actualWidth , actualHeight , desiredWidth , desiredHeight ) ; Bitmap tempBitmap = BitmapFactory . decodeByteArray ( data , _NUM , data . length , decodeOptions ) ; if ( tempBitmap != null && ( tempBitmap . getWidth ( ) > desiredWidth || tempBitmap . getHeight ( ) > desiredHeight ) ) { bitmap = Bitmap . createScaledBitmap ( tempBitmap , desiredWidth , desiredHeight , _BOOL ) ; tempBitmap . recycle ( ) ; } else { bitmap = tempBitmap ; } } if ( bitmap == null ) { return Response . error ( new ParseError ( response ) ) ; } else { return Response . success ( bitmap , HttpHeaderParser . parseCacheHeaders ( response ) ) ; } }
public Notification find ( Integer notificationID ) { Notification notification = new Notification ( context , notificationID , null ) ; if ( notification . getAttributes ( ) == null ) notification . loadAttributesFromPreferences ( ) ; return notification ; }
public GreenGradient ( int maxCount ) { this . maxCount = maxCount ; factor = maxCount / Math . log ( maxCount ) ; }
public static void writeHistogram ( TDoubleDoubleHashMap distr , String filename ) throws FileNotFoundException , IOException { BufferedWriter aWriter = IOUtils . getBufferedWriter ( filename ) ; aWriter . write ( _STR ) ; aWriter . newLine ( ) ; double [ ] keys = distr . keys ( ) ; Arrays . sort ( keys ) ; for ( double key : keys ) { aWriter . write ( String . valueOf ( key ) ) ; aWriter . write ( _STR ) ; aWriter . write ( String . valueOf ( distr . get ( key ) ) ) ; aWriter . newLine ( ) ; } aWriter . close ( ) ; }
public static < T > CompletionStage < T > dereference ( CompletionStage < ? extends CompletionStage < T > > stage ) { return stage . thenCompose ( Identity . INSTANCE ) ; }
public static Number plus ( Character left , Number right ) { return NumberNumberPlus . plus ( Integer . valueOf ( left ) , right ) ; }
public static String clipStringIfNecessary ( JComponent c , FontMetrics fm , String string , int availTextWidth ) { if ( ( string == null ) || ( string . equals ( _STR ) ) ) { return _STR ; } int textWidth = SwingUtilities2 . stringWidth ( c , fm , string ) ; if ( textWidth > availTextWidth ) { return SwingUtilities2 . clipString ( c , fm , string , availTextWidth ) ; } return string ; }
public boolean removeElement ( Object obj ) { synchronized ( actions ) { if ( allowToChange ) { boolean result = actions . remove ( obj ) ; if ( actions . isEmpty ( ) ) { if ( headTask != null ) { cancel ( ) ; } } return result ; } } return _BOOL ; }
public static boolean isCglibProxy ( Object object ) { return ClassUtils . isCglibProxyClass ( object . getClass ( ) ) ; }
public void resetReferences ( ) { if ( _refs != null ) _refs . clear ( ) ; }
public void addSlide ( @ NonNull Fragment fragment ) { fragments . add ( fragment ) ; addBackgroundColor ( Color . TRANSPARENT ) ; pagerAdapter . notifyDataSetChanged ( ) ; }
public static String [ ] wrapString ( @ Nonnull String str , int maxWidth , @ Nullable String [ ] output ) { if ( output == null ) { output = new String [ ( int ) ( ( str . length ( ) / maxWidth ) * _NUM + _NUM ) ] ; } int lineStart = _NUM ; int arrayIndex = _NUM ; int i ; for ( i = _NUM ; i < str . length ( ) ; i ++ ) { char c = str . charAt ( i ) ; if ( c == _STR ) { output = addString ( output , str . substring ( lineStart , i ) , arrayIndex ++ ) ; lineStart = i + _NUM ; } else if ( i - lineStart == maxWidth ) { output = addString ( output , str . substring ( lineStart , i ) , arrayIndex ++ ) ; lineStart = i ; } } if ( lineStart != i || i == _NUM ) { output = addString ( output , str . substring ( lineStart ) , arrayIndex ++ , output . length + _NUM ) ; } if ( arrayIndex < output . length ) { output [ arrayIndex ] = null ; } return output ; }
public void removeChangingListener ( OnWheelChangedListener listener ) { changingListeners . remove ( listener ) ; }
private static FloatBuffer createVertexArray ( float [ ] coords ) { ByteBuffer bb = ByteBuffer . allocateDirect ( coords . length * _NUM ) ; bb . order ( ByteOrder . nativeOrder ( ) ) ; FloatBuffer fb = bb . asFloatBuffer ( ) ; fb . put ( coords ) ; fb . position ( _NUM ) ; return fb ; }
protected void publish ( ) throws MqttException , IOException { sampleClientPub = new SampleAsyncWait ( url , clientIdPub , cleanSession , quietMode , userName , password ) ; if ( sampleClientPub != null ) { String topic = _STR ; int qos = _NUM ; String message = _STR ; try { sampleClientPub . publish ( topic , qos , message . getBytes ( ) ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; } } }
public static void cleanDirectory ( File directory ) throws IOException { if ( ! directory . exists ( ) ) { String message = directory + _STR ; throw new IllegalArgumentException ( message ) ; } if ( ! directory . isDirectory ( ) ) { String message = directory + _STR ; throw new IllegalArgumentException ( message ) ; } File [ ] files = directory . listFiles ( ) ; if ( files == null ) { throw new IOException ( _STR + directory ) ; } IOException exception = null ; for ( File file : files ) { try { forceDelete ( file ) ; } catch ( IOException ioe ) { exception = ioe ; } } if ( null != exception ) { throw exception ; } }
private Object [ ] invWmSubBand ( Image img , double [ ] wm , int n , double threshold ) { int m = _NUM ; double z = _NUM ; double v = _NUM ; for ( int i = _NUM ; i < img . getWidth ( ) * img . getHeight ( ) ; i ++ ) { if ( img . getData ( ) [ i ] > threshold ) { z += ( img . getData ( ) [ i ] * wm [ i % n ] ) ; v += Math . abs ( img . getData ( ) [ i ] ) ; m ++ ; } } return new Object [ ] { m , z , v } ; }
public static void moveToDirectory ( File src , File destDir , boolean createDestDir ) throws IOException { if ( src == null ) { throw new NullPointerException ( _STR ) ; } if ( destDir == null ) { throw new NullPointerException ( _STR ) ; } if ( ! src . exists ( ) ) { throw new FileNotFoundException ( _STR + src + _STR ) ; } if ( src . isDirectory ( ) ) { moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else { moveFileToDirectory ( src , destDir , createDestDir ) ; } }
private static TungstenProperties loadSecurityPropertiesFromFile ( String propertiesFileLocation ) throws ConfigurationException { TungstenProperties securityProps = null ; FileInputStream securityConfigurationFileInputStream = null ; if ( propertiesFileLocation == null && ClusterConfiguration . getClusterHome ( ) == null ) { throw new ConfigurationException ( _STR ) ; } File securityPropertiesFile ; if ( propertiesFileLocation == null ) { File clusterConfDirectory = ClusterConfiguration . getDir ( ClusterConfiguration . getGlobalConfigDirName ( ClusterConfiguration . getClusterHome ( ) ) ) ; securityPropertiesFile = new File ( clusterConfDirectory . getPath ( ) , SecurityConf . SECURITY_PROPERTIES_FILE_NAME ) ; } else { securityPropertiesFile = new File ( propertiesFileLocation ) ; } try { securityProps = new TungstenProperties ( ) ; securityConfigurationFileInputStream = new FileInputStream ( securityPropertiesFile ) ; securityProps . load ( securityConfigurationFileInputStream , _BOOL ) ; closeSecurityConfigurationFileInputStream ( securityConfigurationFileInputStream ) ; } catch ( FileNotFoundException e ) { String msg = MessageFormat . format ( _STR , securityPropertiesFile . getPath ( ) ) ; logger . debug ( msg , e ) ; throw new ConfigurationException ( msg ) ; } catch ( IOException e ) { String msg = MessageFormat . format ( _STR , securityPropertiesFile . getPath ( ) , e . getMessage ( ) ) ; logger . debug ( msg , e ) ; throw new ConfigurationException ( msg ) ; } finally { closeSecurityConfigurationFileInputStream ( securityConfigurationFileInputStream ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( MessageFormat . format ( _STR , securityPropertiesFile . getPath ( ) ) ) ; } securityProps . put ( SecurityConf . SECURITY_PROPERTIES_PARENT_FILE_LOCATION , securityPropertiesFile . getAbsolutePath ( ) ) ; return securityProps ; }
public static void close ( InputStream in ) { try { if ( in != null ) { in . close ( ) ; } } catch ( IOException ioE ) { } }
private synchronized void clearScanFiles ( ) { if ( ( allFiles != null ) && ( allFiles . size ( ) > _NUM ) ) { Iterator it = allFiles . iterator ( ) ; File file = null ; while ( it . hasNext ( ) ) { file = ( File ) it . next ( ) ; file . delete ( ) ; } allFiles . clear ( ) ; } }
private static boolean intersectsLatEdge ( S2Point a , S2Point b , double lat , S1Interval lng ) { S2Point z = S2Point . normalize ( S2 . robustCrossProd ( a , b ) ) ; if ( z . z < _NUM ) { z = S2Point . neg ( z ) ; } S2Point y = S2Point . normalize ( S2 . robustCrossProd ( z , new S2Point ( _NUM , _NUM , _NUM ) ) ) ; S2Point x = S2Point . crossProd ( y , z ) ; double sinLat = Math . sin ( lat ) ; if ( Math . abs ( sinLat ) >= x . z ) { return _BOOL ; } double cosTheta = sinLat / x . z ; double sinTheta = Math . sqrt ( _NUM - cosTheta * cosTheta ) ; double theta = Math . atan2 ( sinTheta , cosTheta ) ; S1Interval abTheta = S1Interval . fromPointPair ( Math . atan2 ( a . dotProd ( y ) , a . dotProd ( x ) ) , Math . atan2 ( b . dotProd ( y ) , b . dotProd ( x ) ) ) ; if ( abTheta . contains ( theta ) ) { S2Point isect = S2Point . add ( S2Point . mul ( x , cosTheta ) , S2Point . mul ( y , sinTheta ) ) ; if ( lng . contains ( Math . atan2 ( isect . y , isect . x ) ) ) { return _BOOL ; } } if ( abTheta . contains ( - theta ) ) { S2Point intersection = S2Point . sub ( S2Point . mul ( x , cosTheta ) , S2Point . mul ( y , sinTheta ) ) ; if ( lng . contains ( Math . atan2 ( intersection . y , intersection . x ) ) ) { return _BOOL ; } } return _BOOL ; }
public static void execAndCheckOutput ( ProcessBuilder builder , String expectedOut , String expectedErr ) throws Exception { Process process = builder . start ( ) ; ExecutorService executorService = Executors . newFixedThreadPool ( _NUM ) ; try { Future < String > errFuture = executorService . submit ( streamToStringCallable ( process . getErrorStream ( ) ) ) ; Future < String > outFuture = executorService . submit ( streamToStringCallable ( process . getInputStream ( ) ) ) ; assertEquals ( expectedOut , outFuture . get ( _NUM , TimeUnit . SECONDS ) ) ; assertEquals ( expectedErr , errFuture . get ( _NUM , TimeUnit . SECONDS ) ) ; } finally { executorService . shutdown ( ) ; process . waitFor ( ) ; } }
private void startFileBasedMerge ( ) throws CarbonSortKeyAndGroupByException { try { executorService . shutdown ( ) ; executorService . awaitTermination ( _NUM , TimeUnit . DAYS ) ; dataSorterAndWriterExecutorService . shutdown ( ) ; dataSorterAndWriterExecutorService . awaitTermination ( _NUM , TimeUnit . DAYS ) ; } catch ( InterruptedException e ) { throw new CarbonSortKeyAndGroupByException ( _STR , e ) ; } }
public void insertUpdate ( DocumentEvent e ) { if ( ! dirty ) { setDirty ( _BOOL ) ; } }
public DateTimeParseException ( String message , CharSequence parsedData , int errorIndex ) { super ( message ) ; this . parsedString = parsedData . toString ( ) ; this . errorIndex = errorIndex ; }
private boolean areParallelSiblings ( Component source , Component target , int axis ) { ComponentInfo sourceInfo = getComponentInfo ( source ) ; ComponentInfo targetInfo = getComponentInfo ( target ) ; Spring sourceSpring ; Spring targetSpring ; if ( axis == HORIZONTAL ) { sourceSpring = sourceInfo . horizontalSpring ; targetSpring = targetInfo . horizontalSpring ; } else { sourceSpring = sourceInfo . verticalSpring ; targetSpring = targetInfo . verticalSpring ; } ArrayList sourcePath = tmpParallelSet ; sourcePath . clear ( ) ; Spring spring = sourceSpring . getParent ( ) ; while ( spring != null ) { sourcePath . add ( spring ) ; spring = spring . getParent ( ) ; } spring = targetSpring . getParent ( ) ; while ( spring != null ) { if ( sourcePath . contains ( spring ) ) { sourcePath . clear ( ) ; while ( spring != null ) { if ( spring instanceof ParallelGroup ) { return _BOOL ; } spring = spring . getParent ( ) ; } return _BOOL ; } spring = spring . getParent ( ) ; } sourcePath . clear ( ) ; return _BOOL ; }
protected Object readObjectImpl ( Class cl ) throws IOException { try { Object obj = cl . newInstance ( ) ; if ( _refs == null ) _refs = new ArrayList ( ) ; _refs . add ( obj ) ; HashMap fieldMap = getFieldMap ( cl ) ; int code = read ( ) ; for ( ; code >= _NUM && code != _STR ; code = read ( ) ) { unread ( ) ; Object key = readObject ( ) ; Field field = ( Field ) fieldMap . get ( key ) ; if ( field != null ) { Object value = readObject ( field . getType ( ) ) ; field . set ( obj , value ) ; } else { Object value = readObject ( ) ; } } if ( code != _STR ) throw expect ( _STR , code ) ; try { Method method = cl . getMethod ( _STR , new Class [ _NUM ] ) ; return method . invoke ( obj , new Object [ _NUM ] ) ; } catch ( Exception e ) { } return obj ; } catch ( IOException e ) { throw e ; } catch ( Exception e ) { throw new IOExceptionWrapper ( e ) ; } }
public void testCase18 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM } ; byte bBytes [ ] = { _NUM } ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM } ; int aSign = _NUM ; int bSign = _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . subtract ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _NUM , result . signum ( ) ) ; }
protected static Pair < String , String > lsrImmediate ( final long offset , final ITranslationEnvironment environment , final List < ReilInstruction > instructions , final String registerNodeValue , final String immediateNodeValue ) { final String shifterOperand = environment . getNextVariableString ( ) ; final String shifterCarryOut = environment . getNextVariableString ( ) ; long baseOffset = offset ; if ( immediateNodeValue . equals ( _STR ) ) { final String tmpVar1 = environment . getNextVariableString ( ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue , wordSize , minusThirtyOneSet , wordSize , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , wordSize , tmpVar1 , byteSize , oneSet , byteSize , shifterCarryOut ) ) ; return new Pair < String , String > ( String . valueOf ( _NUM ) , shifterCarryOut ) ; } else { final String tmpVar1 = environment . getNextVariableString ( ) ; final String tmpVar2 = environment . getNextVariableString ( ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue , wordSize , _STR + immediateNodeValue , qWordSize , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , qWordSize , tmpVar1 , dWordSize , bitMaskAllBitsSet , dWordSize , shifterOperand ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue , wordSize , String . valueOf ( - ( Integer . decode ( immediateNodeValue ) - _NUM ) ) , dWordSize , tmpVar2 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , tmpVar2 , byteSize , oneSet , byteSize , shifterCarryOut ) ) ; return new Pair < String , String > ( shifterOperand , shifterCarryOut ) ; } }
public static PlainText plain ( int text ) { return plain ( Integer . toString ( text ) ) ; }
private float clampMag ( float value , float absMin , float absMax ) { final float absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
public static boolean isToday ( Calendar _calendar ) { Calendar now = Calendar . getInstance ( ) ; if ( now . get ( Calendar . DAY_OF_MONTH ) == _calendar . get ( Calendar . DAY_OF_MONTH ) ) { if ( now . get ( Calendar . MONTH ) == _calendar . get ( Calendar . MONTH ) ) { if ( now . get ( Calendar . YEAR ) == _calendar . get ( Calendar . YEAR ) ) { return _BOOL ; } } } return _BOOL ; }
public void start ( ) { managedPairs . add ( createPort ( ) ) ; fixNames ( ) ; singlePorts . addObserver ( observer , _BOOL ) ; for ( Ports < M > ports : multiPortsList ) { ports . addObserver ( observer , _BOOL ) ; } }
protected void sprint ( double doubleField ) { sprint ( String . valueOf ( doubleField ) ) ; }
public static Bitmap convertYuvImageToBitmap ( @ NonNull final YuvImage yuvImage ) { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; yuvImage . compressToJpeg ( new Rect ( _NUM , _NUM , yuvImage . getWidth ( ) , yuvImage . getHeight ( ) ) , _NUM , out ) ; byte [ ] imageBytes = out . toByteArray ( ) ; try { out . close ( ) ; } catch ( IOException e ) { Log . e ( LOG_TAG , _STR , e ) ; } return BitmapFactory . decodeByteArray ( imageBytes , _NUM , imageBytes . length ) ; }
public Double read ( String value ) { return Double . valueOf ( value ) ; }
public boolean hasFeature ( String feature , String version ) { if ( feature . equals ( _STR ) ) { return version == null || version . equals ( _STR ) || version . equals ( _STR ) ; } return _BOOL ; }
private StoragePort assignPortBasedOnUsage ( List < StoragePort > matchingTargetPorts , Map < StoragePort , Integer > portUsage ) { StoragePort foundPort = null ; for ( StoragePort matchedPort : matchingTargetPorts ) { if ( portUsage . get ( matchedPort ) == null ) { portUsage . put ( matchedPort , _NUM ) ; } if ( foundPort == null ) { foundPort = matchedPort ; } else { if ( portUsage . get ( matchedPort ) < portUsage . get ( foundPort ) ) { foundPort = matchedPort ; } } } if ( foundPort != null ) { portUsage . put ( foundPort , portUsage . get ( foundPort ) + _NUM ) ; } return foundPort ; }
public ExternalEvent nextEvent ( ) { if ( queue . size ( ) == _NUM ) { return new ExternalEvent ( Double . MAX_VALUE ) ; } ExternalEvent ee = queue . get ( nextEventIndex ) ; nextEventIndex ++ ; if ( nextEventIndex >= queue . size ( ) ) { queue = readEvents ( nrofPreload ) ; nextEventIndex = _NUM ; } return ee ; }
public void appendToBuffer ( StringBuilder buf ) { Iterator < double [ ] > iter = points . iterator ( ) ; while ( iter . hasNext ( ) ) { double [ ] data = iter . next ( ) ; for ( int i = _NUM ; i < data . length ; i ++ ) { if ( i > _NUM ) { buf . append ( _STR ) ; } buf . append ( data [ i ] ) ; } if ( iter . hasNext ( ) ) { buf . append ( _STR ) ; } } }
public void updateComboBox ( JComboBox < Track > box ) { box . removeAllItems ( ) ; box . addItem ( null ) ; List < Track > tracks = getTrackByNameList ( null ) ; for ( Track track : tracks ) { box . addItem ( track ) ; } }
public RefactoringSessionTransformer ( final boolean projects ) { fProjects = projects ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( _NUM ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; return newVector . elements ( ) ; }
public CompareResult open ( ) { final ContentComparator [ ] comparatorArray = comparators . toArray ( new ContentComparator [ comparators . size ( ) ] ) ; final CustomCompareEditorInput input = new CustomCompareEditorInput ( modified , original , ancestor , comparatorArray , compareConfiguration , externalCompareHandler ) ; if ( compareConfiguration . isLeftEditable ( ) || compareConfiguration . isRightEditable ( ) ) { compareConfiguration . setProperty ( _STR , Boolean . FALSE ) ; input . setAlwaysDirty ( alwaysDirty ) ; } input . addSaveListener ( new ProxyCompareSaveListener ( ) ) ; log . info ( MessageFormat . format ( _STR , getLabelNOLOC ( modified ) , getLabelNOLOC ( original ) ) ) ; compareUIType . openCompareUI ( input ) ; final boolean contentsIdentical = ( input . getCompareResult ( ) == null ) ; final boolean contentsSaved = ( input . getSavedContents ( ) . length > _NUM ) ; return new CompareResult ( contentsIdentical , input . wasOKPressed ( ) , contentsSaved ) ; }
protected void engineSetMode ( String mode ) { if ( ! mode . equalsIgnoreCase ( _STR ) ) { throw new IllegalArgumentException ( _STR + mode ) ; } }
protected void addResource ( String resource ) { if ( ! StringUtils . isEmpty ( resource ) ) { resources . add ( resource ) ; } }
public static boolean isNumeric ( String maybeNumeric ) { return maybeNumeric != null && maybeNumeric . matches ( _STR ) ; }
public void openKeyStore ( File keyStoreFile , String defaultPassword ) { try { if ( ! keyStoreFile . isFile ( ) ) { JOptionPane . showMessageDialog ( frame , MessageFormat . format ( res . getString ( _STR ) , keyStoreFile ) , res . getString ( _STR ) , JOptionPane . WARNING_MESSAGE ) ; return ; } if ( isKeyStoreFileOpen ( keyStoreFile ) ) { JOptionPane . showMessageDialog ( frame , MessageFormat . format ( res . getString ( _STR ) , keyStoreFile ) , res . getString ( _STR ) , JOptionPane . WARNING_MESSAGE ) ; return ; } Password password = ( defaultPassword != null ) ? new Password ( defaultPassword . toCharArray ( ) ) : null ; KeyStore openedKeyStore = null ; boolean firstTry = _BOOL ; while ( _BOOL ) { if ( password == null ) { password = showPasswordDialog ( keyStoreFile ) ; } if ( password == null ) { return ; } try { openedKeyStore = KeyStoreUtil . load ( keyStoreFile , password ) ; break ; } catch ( KeyStoreLoadException klex ) { if ( defaultPassword == null || ! firstTry ) { int tryAgainChoice = showErrorMessage ( keyStoreFile , klex ) ; if ( tryAgainChoice == JOptionPane . NO_OPTION ) { return ; } } } password . nullPassword ( ) ; password = null ; firstTry = _BOOL ; } if ( openedKeyStore == null ) { JOptionPane . showMessageDialog ( frame , MessageFormat . format ( res . getString ( _STR ) , keyStoreFile . getName ( ) ) , res . getString ( _STR ) , JOptionPane . WARNING_MESSAGE ) ; return ; } kseFrame . addKeyStore ( openedKeyStore , keyStoreFile , password ) ; } catch ( FileNotFoundException ex ) { JOptionPane . showMessageDialog ( frame , MessageFormat . format ( res . getString ( _STR ) , keyStoreFile ) , res . getString ( _STR ) , JOptionPane . WARNING_MESSAGE ) ; } catch ( Exception ex ) { DError . displayError ( frame , ex ) ; } }
public static String encode ( String string ) { byte [ ] bytes ; try { bytes = string . getBytes ( PREFERRED_ENCODING ) ; } catch ( UnsupportedEncodingException e ) { bytes = string . getBytes ( ) ; } return encodeBytes ( bytes ) ; }
public final long addAndGet ( long delta ) { for ( ; ; ) { long current = get ( ) ; long next = current + delta ; if ( compareAndSet ( current , next ) ) return next ; } }
default long now ( TimeUnit unit ) { return unit . convert ( System . currentTimeMillis ( ) , TimeUnit . MILLISECONDS ) ; }
private final void append ( List < ? super NameValuePair > l , final String k , final String v ) { if ( v != null ) l . add ( new NameValuePair ( k , v ) ) ; }
protected Properties createProperties ( URL location ) throws IOException { InputStream is = null ; if ( location != null ) { is = location . openStream ( ) ; } Properties tmpProperties = new Properties ( ) ; if ( is != null ) { tmpProperties . load ( is ) ; } return tmpProperties ; }
protected double calcPlanWeight ( final T plan , final double maxScore ) { if ( plan . getScore ( ) == null ) { return Double . NaN ; } double weight = Math . exp ( this . beta * ( plan . getScore ( ) - maxScore ) ) ; if ( weight < MIN_WEIGHT ) weight = MIN_WEIGHT ; return weight ; }
public static boolean isExtension ( String filename , Collection < String > extensions ) { if ( filename == null ) { return _BOOL ; } if ( extensions == null || extensions . isEmpty ( ) ) { return indexOfExtension ( filename ) == - _NUM ; } String fileExt = getExtension ( filename ) ; for ( String extension : extensions ) { if ( fileExt . equals ( extension ) ) { return _BOOL ; } } return _BOOL ; }
void findValue ( ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + label ( ) ) ; } for ( int i = _NUM ; i < _value . getItemCount ( ) ; i ++ ) { String choice = _value . getItemAt ( i ) ; SettingList sl = choiceHash . get ( choice ) ; if ( sl . match ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + i ) ; } _value . setSelectedItem ( choice ) ; return ; } } if ( log . isDebugEnabled ( ) ) { log . debug ( _STR ) ; } }
public java . lang . StringBuilder insert ( int index , java . lang . String string ) { if ( string == null ) { string = _STR ; } int min = string . length ( ) ; if ( min != _NUM ) { move ( min , index ) ; string . getChars ( _NUM , min , value , index ) ; count += min ; } return this ; }
public void mkdir ( String key ) throws IOException { key = key . replace ( _STR , _STR ) ; if ( key . endsWith ( _STR ) && ! key . equals ( _STR ) ) { throw new InvalidParameterException ( _STR ) ; } String [ ] split = key . split ( _STR ) ; StringBuilder builder = new StringBuilder ( ) ; for ( String s : split ) { builder . append ( s ) ; if ( ! s . isEmpty ( ) && ! exists ( builder . toString ( ) ) ) { zkState . set ( builder . toString ( ) , null ) ; } builder . append ( _STR ) ; } }
public double calculateLog ( double value ) { return Math . log ( value ) / this . baseLog ; }
public static Vector3 pow ( Vector3 o , double power ) { return new Vector3 ( Math . pow ( o . x , power ) , Math . pow ( o . y , power ) , Math . pow ( o . z , power ) ) ; }
public DatagramPacket responseReceive ( ) throws IOException { byte [ ] buf = new byte [ _NUM ] ; DatagramPacket dp = new DatagramPacket ( buf , buf . length ) ; datagramSocket . receive ( dp ) ; return dp ; }
@ After public void tearDown ( ) { webClient . closeAllWindows ( ) ; }
@ Override public void flush ( ) { flush ( _BOOL ) ; }
public static float [ ] temperatureToRGB ( int degreesK ) { int k = MathUtils . constrain ( degreesK , _NUM , _NUM ) ; float a = ( k % _NUM ) / _NUM ; int i = ( ( k - _NUM ) / _NUM ) * _NUM ; return new float [ ] { interp ( i , a ) , interp ( i + _NUM , a ) , interp ( i + _NUM , a ) } ; }
public AdvancedStateMap . Builder withName ( Function < PropertiesMap , String > mapper ) { this . nameMapper = mapper ; return this ; }
public synchronized void message ( LocoNetMessage m ) { int opCode = m . getOpCode ( ) ; switch ( opCode ) { case LnConstants . OPC_PEER_XFER : int src = m . getElement ( _NUM ) ; int dst = m . getElement ( _NUM ) + m . getElement ( _NUM ) * _NUM ; int [ ] packet = m . getPeerXfrData ( ) ; if ( src == lowPart ( LocoBufferAddress ) ) { String lbv = ( ( packet [ _NUM ] != _NUM ) ? dotme ( packet [ _NUM ] ) : _STR ) ; setLBVersion ( lbv ) ; } if ( dst == LocoBufferAddress && src == lowPart ( unitAddress ) && ( packet [ _NUM ] == unitSubAddress ) ) { stopTimer ( ) ; replyReceived ( ) ; String fw = ( ( packet [ _NUM ] != _NUM ) ? dotme ( packet [ _NUM ] ) : _STR ) ; setLIOVersion ( fw ) ; if ( packet [ _NUM ] == LocoIO . LOCOIO_SV_READ || reading ) { if ( lastOpCv >= _NUM && lastOpCv <= _NUM ) { int data = ( packet [ _NUM ] != _NUM ) ? packet [ _NUM ] : packet [ _NUM ] ; int channel = ( lastOpCv / _NUM ) - _NUM ; if ( channel < _NUM ) { log . warn ( _STR ) ; channel = _NUM ; } int type = lastOpCv - ( channel * _NUM + _NUM ) ; log . debug ( _STR + channel + _STR + type + _STR + ( type == _NUM ? _STR : type == _NUM ? _STR : type == _NUM ? _STR : _STR ) + _STR + Integer . toHexString ( data ) ) ; if ( type == _NUM ) { setV2 ( channel , data ) ; setMode ( channel , _STR ) ; } else if ( type == _NUM ) { setV1 ( channel , data ) ; setMode ( channel , _STR ) ; } else if ( type == _NUM ) { setSV ( channel , data ) ; LocoIOMode lim = validmodes . getLocoIOModeFor ( getSV ( channel ) , getV1 ( channel ) , getV2 ( channel ) ) ; if ( lim == null ) { setMode ( channel , _STR ) ; setAddr ( channel , _NUM ) ; log . debug ( _STR ) ; } else { setMode ( channel , lim . getFullMode ( ) ) ; setAddr ( channel , validmodes . valuesToAddress ( lim . getOpcode ( ) , getSV ( channel ) , getV1 ( channel ) , getV2 ( channel ) ) ) ; } log . debug ( _STR + _STR + Integer . toHexString ( getSV ( channel ) ) + _STR + _STR + Integer . toHexString ( getV1 ( channel ) ) + _STR + _STR + Integer . toHexString ( getV2 ( channel ) ) + _STR + _STR + getAddr ( channel ) + _STR + Integer . toHexString ( getAddr ( channel ) ) + _STR ) ; } else { log . warn ( _STR + type + _STR + channel ) ; } } else { } } issueNextOperation ( ) ; return ; } else { return ; } case LnConstants . OPC_INPUT_REP : if ( log . isDebugEnabled ( ) ) { log . debug ( LnConstants . OPC_NAME ( opCode ) + _STR ) ; } for ( int i = _NUM ; i < _numRows ; i ++ ) { if ( capture [ i ] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + i ) ; } int val1 = m . getElement ( _NUM ) ; int val2 = m . getElement ( _NUM ) ; setAddr ( i , ( ( val2 & _NUM ) << _NUM ) * _NUM + ( ( val1 & _NUM ) << _NUM ) | ( ( ( val2 & LnConstants . OPC_SW_REQ_DIR ) == LnConstants . OPC_SW_REQ_DIR ) ? _NUM : _NUM ) ) ; capture [ i ] = _BOOL ; } } return ; case LnConstants . OPC_SW_REQ : if ( log . isDebugEnabled ( ) ) { log . debug ( LnConstants . OPC_NAME ( opCode ) + _STR ) ; } for ( int i = _NUM ; i < _numRows ; i ++ ) { if ( capture [ i ] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + i ) ; } int val1 = m . getElement ( _NUM ) ; int val2 = m . getElement ( _NUM ) ; int addr = LocoIO . SENSOR_ADR ( val1 , val2 ) ; setAddr ( i , addr ) ; capture [ i ] = _BOOL ; } } return ; default : } }
@ Override public String toString ( ) { return buf . toString ( ) ; }
public void test_fill$ZIIZ ( ) { boolean val = _BOOL ; boolean d [ ] = new boolean [ _NUM ] ; Arrays . fill ( d , _NUM , d . length , val ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) assertTrue ( _STR , ! ( d [ i ] == val ) ) ; for ( int i = _NUM ; i < d . length ; i ++ ) assertTrue ( _STR , d [ i ] == val ) ; try { Arrays . fill ( d , _NUM , _NUM , val ) ; fail ( _STR ) ; } catch ( IllegalArgumentException e ) { } try { Arrays . fill ( d , - _NUM , _NUM , val ) ; fail ( _STR ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } try { Arrays . fill ( d , _NUM , d . length + _NUM , val ) ; fail ( _STR ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } }
protected void linearLayout ( VisualTable labels ) { Rectangle2D b = getLayoutBounds ( ) ; double breadth = getBreadth ( b ) ; double span = m_hi - m_lo ; double pspan = m_prevhi - m_prevlo ; double vlo = _NUM ; if ( m_lo >= _NUM ) { vlo = Math . pow ( _NUM , Math . floor ( MathLib . log10 ( m_lo ) ) ) ; } else { vlo = - Math . pow ( _NUM , _NUM + Math . floor ( MathLib . log10 ( - m_lo ) ) ) ; } Iterator iter = labels . tuples ( ) ; while ( iter . hasNext ( ) ) { VisualItem item = ( VisualItem ) iter . next ( ) ; reset ( item ) ; double v = item . getDouble ( VALUE ) ; double x = span == _NUM ? _NUM : ( ( v - m_lo ) / span ) * breadth ; set ( item , x , b ) ; } Index index = labels . index ( VALUE ) ; double step = getLinearStep ( span , span == _NUM ? _NUM : breadth / span ) ; if ( step == _NUM ) step = _NUM ; int r ; for ( double x , v = vlo ; v <= m_hi ; v += step ) { x = ( ( v - m_lo ) / span ) * breadth ; if ( x < - _NUM ) { continue ; } else if ( ( r = index . get ( v ) ) >= _NUM ) { VisualItem item = labels . getItem ( r ) ; item . setVisible ( _BOOL ) ; item . setEndVisible ( _BOOL ) ; } else { VisualItem item = labels . addItem ( ) ; item . set ( LABEL , m_nf . format ( v ) ) ; item . setDouble ( VALUE , v ) ; double f = pspan == _NUM ? _NUM : ( ( v - m_prevlo ) / pspan ) ; if ( f <= _NUM || f >= _NUM ) item . setStartVisible ( _BOOL ) ; set ( item , f * breadth , b ) ; set ( item , x , b ) ; } } }
@ Override public synchronized boolean addAll ( Collection < ? extends E > collection ) { return addAll ( elementCount , collection ) ; }
public boolean handleExceptionFromServer ( Writer writer , Reader reader , Throwable ex ) { if ( ex instanceof ClosedChannelException ) { if ( _logger . isLoggable ( Level . FINE ) ) _logger . log ( Level . FINE , _STR + writer . getEndPointAddress ( ) + _STR ) ; return _BOOL ; } if ( ex instanceof MarshalContextClearedException ) { if ( _logger . isLoggable ( Level . FINE ) ) _logger . log ( Level . FINE , _STR + writer . getEndPointAddress ( ) + _STR ) ; return _BOOL ; } try { String msg = _STR + writer . getEndPointAddress ( ) + _STR ; if ( ex instanceof LRMIUnhandledException ) { if ( _logger . isLoggable ( Level . FINE ) ) _logger . log ( Level . FINE , msg , ex ) ; LRMIUnhandledException lrmiue = ( LRMIUnhandledException ) ex ; if ( lrmiue . getStage ( ) == Stage . DESERIALIZATION ) { reader . resetContext ( ) ; } if ( writer . isOpen ( ) ) writer . writeReply ( new ReplyPacket ( null , lrmiue ) ) ; return _BOOL ; } else if ( ex instanceof RuntimeException || ex instanceof InvalidClassException ) { if ( _logger . isLoggable ( Level . SEVERE ) ) _logger . log ( Level . SEVERE , msg , ex ) ; } else if ( ex instanceof UnmarshalException ) { if ( _logger . isLoggable ( Level . WARNING ) ) _logger . log ( Level . WARNING , msg , ex ) ; } else { if ( _logger . isLoggable ( Level . FINE ) ) _logger . log ( Level . FINE , msg , ex ) ; } if ( writer . isOpen ( ) ) writer . writeReply ( new ReplyPacket ( null , new ProtocolException ( msg , ex ) ) ) ; return _BOOL ; } catch ( Exception ex2 ) { if ( _logger . isLoggable ( Level . FINE ) ) _logger . log ( Level . FINE , _STR + writer . getEndPointAddress ( ) + _STR , ex ) ; return _BOOL ; } }
public String sprintf ( ) { final Iterator < ConversionSpecification > e = vFmt . iterator ( ) ; ConversionSpecification cs ; char c ; final StringBuilder sb = new StringBuilder ( ) ; while ( e . hasNext ( ) ) { cs = e . next ( ) ; c = cs . getConversionCharacter ( ) ; if ( c == _STR ) { sb . append ( cs . getLiteral ( ) ) ; } else if ( c == _STR ) { sb . append ( _STR ) ; } } return sb . toString ( ) ; }
default String resourceName ( String tableName , String type ) { return String . format ( RESOURCE_NAME , tableName , type ) ; }
protected void updateComboBoxesLoadChange ( ) { if ( autoTrackCheckBox . isSelected ( ) ) { updateLocationTrackComboBox ( ) ; } if ( autoDestinationTrackCheckBox . isSelected ( ) ) { updateDestinationTrackComboBox ( ) ; } if ( autoFinalDestTrackCheckBox . isSelected ( ) ) { updateFinalDestination ( ) ; } }
public String removeClassColumnTipText ( ) { return _STR ; }
public static String join ( NamedValue [ ] values , String separator ) { StringBuilder buff = new StringBuilder ( ) ; for ( int i = _NUM ; i < values . length ; i ++ ) { buff . append ( values [ i ] ) ; if ( i < values . length - _NUM ) buff . append ( separator ) ; } return buff . toString ( ) ; }
private int currentDepth ( ) { try { Integer oneBased = ( ( Integer ) DEPTH_FIELD . get ( this ) ) ; return oneBased - _NUM ; } catch ( IllegalAccessException e ) { throw new AssertionError ( e ) ; } }
protected LocPathIterator changePartToRef ( final QName uniquePseudoVarName , WalkingIterator wi , final int numSteps , final boolean isGlobal ) { Variable var = new Variable ( ) ; var . setQName ( uniquePseudoVarName ) ; var . setIsGlobal ( isGlobal ) ; if ( isGlobal ) { ElemTemplateElement elem = getElemFromExpression ( wi ) ; StylesheetRoot root = elem . getStylesheetRoot ( ) ; Vector vars = root . getVariablesAndParamsComposed ( ) ; var . setIndex ( vars . size ( ) - _NUM ) ; } AxesWalker walker = wi . getFirstWalker ( ) ; for ( int i = _NUM ; i < numSteps ; i ++ ) { assertion ( null != walker , _STR ) ; walker = walker . getNextWalker ( ) ; } if ( null != walker ) { FilterExprWalker few = new FilterExprWalker ( wi ) ; few . setInnerExpression ( var ) ; few . exprSetParent ( wi ) ; few . setNextWalker ( walker ) ; walker . setPrevWalker ( few ) ; wi . setFirstWalker ( few ) ; return wi ; } else { FilterExprIteratorSimple feis = new FilterExprIteratorSimple ( var ) ; feis . exprSetParent ( wi . exprGetParent ( ) ) ; return feis ; } }
protected String sourceClass ( Attribute c , double [ ] dist ) { if ( c . isNominal ( ) ) { return Integer . toString ( Utils . maxIndex ( dist ) ) ; } else { return Double . toString ( dist [ _NUM ] ) ; } }
public void done ( ) throws IOException { printer . flush ( ) ; }
int requestGroupData ( char groupNum ) { setCurrDataGroup ( groupNum ) ; currGrpItems = knownGrpItems . get ( Integer . valueOf ( getCurrDataGroup ( ) ) ) ; char [ ] payLoad = { groupNum } ; return ( writeTelegram ( payLoad , CMD_GROUP_READ , null ) ) ; }
protected String computeFullUrl ( URL baseUrl , String link ) { if ( link == null || link . length ( ) == _NUM ) { return null ; } if ( ! link . startsWith ( _STR ) ) { if ( link . startsWith ( _STR ) ) { link = baseUrl . getProtocol ( ) + _STR + baseUrl . getAuthority ( ) + link ; } else { if ( link . contains ( _STR ) ) { return null ; } String path = baseUrl . getPath ( ) ; if ( ! path . endsWith ( _STR ) ) { int sep = path . lastIndexOf ( _STR ) ; String file = path . substring ( sep + _NUM ) ; if ( file . contains ( _STR ) || file . contains ( _STR ) ) path = path . substring ( _NUM , sep ) ; } link = baseUrl . getProtocol ( ) + _STR + baseUrl . getAuthority ( ) + path + _STR + link ; } } link = normalizeUrlEnding ( link ) ; String l = link . toLowerCase ( Locale . ROOT ) ; if ( l . endsWith ( _STR ) || l . endsWith ( _STR ) || l . endsWith ( _STR ) || l . endsWith ( _STR ) ) { return null ; } return link ; }
protected String encodeCookie ( SerializableHttpCookie cookie ) { if ( cookie == null ) return null ; ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ; try { ObjectOutputStream outputStream = new ObjectOutputStream ( os ) ; outputStream . writeObject ( cookie ) ; } catch ( IOException e ) { Log . d ( LOG_TAG , _STR , e ) ; return null ; } return byteArrayToHexString ( os . toByteArray ( ) ) ; }
public long skip ( long bytes ) throws IOException { if ( closed ) { throw new IOException ( _STR ) ; } int av = available ( ) ; if ( av == _NUM ) { av = makeAvailable ( ) ; if ( av == _NUM ) { return _NUM ; } } long res = Math . min ( av , bytes ) ; head += res ; return res ; }
public void resume ( ) { mPaused = _BOOL ; mLastFrameTime = System . currentTimeMillis ( ) ; invalidate ( ) ; }
protected void drawCenterText ( Canvas c ) { CharSequence centerText = mChart . getCenterText ( ) ; if ( mChart . isDrawCenterTextEnabled ( ) && centerText != null ) { PointF center = mChart . getCenterCircleBox ( ) ; float innerRadius = mChart . isDrawHoleEnabled ( ) && ! mChart . isDrawSlicesUnderHoleEnabled ( ) ? mChart . getRadius ( ) * ( mChart . getHoleRadius ( ) / _NUM ) : mChart . getRadius ( ) ; RectF holeRect = mRectBuffer [ _NUM ] ; holeRect . left = center . x - innerRadius ; holeRect . top = center . y - innerRadius ; holeRect . right = center . x + innerRadius ; holeRect . bottom = center . y + innerRadius ; RectF boundingRect = mRectBuffer [ _NUM ] ; boundingRect . set ( holeRect ) ; float radiusPercent = mChart . getCenterTextRadiusPercent ( ) / _NUM ; if ( radiusPercent > _NUM ) { boundingRect . inset ( ( boundingRect . width ( ) - boundingRect . width ( ) * radiusPercent ) / _NUM , ( boundingRect . height ( ) - boundingRect . height ( ) * radiusPercent ) / _NUM ) ; } if ( ! centerText . equals ( mCenterTextLastValue ) || ! boundingRect . equals ( mCenterTextLastBounds ) ) { mCenterTextLastBounds . set ( boundingRect ) ; mCenterTextLastValue = centerText ; float width = mCenterTextLastBounds . width ( ) ; mCenterTextLayout = new StaticLayout ( centerText , _NUM , centerText . length ( ) , mCenterTextPaint , ( int ) Math . max ( Math . ceil ( width ) , _NUM ) , Layout . Alignment . ALIGN_CENTER , _NUM , _NUM , _BOOL ) ; } float layoutHeight = mCenterTextLayout . getHeight ( ) ; c . save ( ) ; if ( Build . VERSION . SDK_INT >= _NUM ) { Path path = new Path ( ) ; path . addOval ( holeRect , Path . Direction . CW ) ; c . clipPath ( path ) ; } c . translate ( boundingRect . left , boundingRect . top + ( boundingRect . height ( ) - layoutHeight ) / _NUM ) ; mCenterTextLayout . draw ( c ) ; c . restore ( ) ; } }
public void testSubtractDiffScaleNegPos ( ) { String a = _STR ; int aScale = - _NUM ; String b = _STR ; int bScale = _NUM ; String c = _STR ; int cScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal result = aNumber . subtract ( bNumber ) ; assertEquals ( _STR , c , result . toString ( ) ) ; assertEquals ( _STR , cScale , result . scale ( ) ) ; }
void addToPrototypeCallback ( ) ;
public AllToAllPanel ( AllToAll connector , NetworkPanel networkPanel ) { super ( ) ; this . connection = connector ; allowSelfConnectPanel = new JPanel ( new FlowLayout ( FlowLayout . LEFT ) ) ; allowSelfConnectPanel . add ( new JLabel ( _STR ) ) ; allowSelfConnectPanel . add ( allowSelfConnectChkBx ) ; fillFieldValues ( ) ; add ( allowSelfConnectPanel ) ; }
public void addPropertyChangeListener ( PropertyChangeListener pcl ) { m_pcSupport . addPropertyChangeListener ( pcl ) ; }
public boolean functionAvailable ( String ns , String funcName ) throws javax . xml . transform . TransformerException { try { if ( funcName == null ) { String fmsg = XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_ARG_CANNOT_BE_NULL , new Object [ ] { _STR } ) ; throw new NullPointerException ( fmsg ) ; } javax . xml . namespace . QName myQName = new QName ( ns , funcName ) ; javax . xml . xpath . XPathFunction xpathFunction = resolver . resolveFunction ( myQName , _NUM ) ; if ( xpathFunction == null ) { return _BOOL ; } return _BOOL ; } catch ( Exception e ) { return _BOOL ; } }
private void allocate_sections ( int p_section_count ) { section_list . ensureCapacity ( p_section_count ) ; while ( section_list . size ( ) < p_section_count ) { section_list . add ( new MazeSearchElement ( ) ) ; } }
public boolean refreshNeeded ( ) { return this . softTtl < System . currentTimeMillis ( ) ; }
public static byte [ ] randomBytes ( int length ) { byte [ ] bytes = new byte [ length ] ; SEEDED_RANDOM . nextBytes ( bytes ) ; return bytes ; }
public WeightDistribution ( ColumnExampleTable columnTable , int [ ] selection , int attributeNumber ) { calculateLabelWeights ( columnTable , selection , attributeNumber ) ; leftLabelWeights = new double [ totalLabelWeights . length ] ; leftWeight = _NUM ; totalWeight = getTotalWeight ( totalLabelWeights ) ; if ( hasMissings ) { missingsWeight = getTotalWeight ( missingsLabelWeights ) ; rightWeight = totalWeight - missingsWeight ; rightLabelWeights = arrayDifference ( totalLabelWeights , missingsLabelWeights ) ; } else { missingsWeight = _NUM ; rightWeight = totalWeight ; rightLabelWeights = new double [ totalLabelWeights . length ] ; System . arraycopy ( totalLabelWeights , _NUM , rightLabelWeights , _NUM , totalLabelWeights . length ) ; } }
public static String removeExtension ( String fileName ) { int index = fileName . lastIndexOf ( _STR ) ; if ( index == - _NUM ) { return fileName ; } else { return fileName . substring ( _NUM , index ) ; } }
public void delete ( String name ) throws IOException { if ( name . equalsIgnoreCase ( KEY_ID ) ) { id = null ; } else { throw new IOException ( _STR + _STR ) ; } encodeThis ( ) ; }
public static DataFrame normalize ( DataFrame dataFrame , double min , double max ) { return normalize ( dataFrame , min , max , Collections . < String > emptyList ( ) ) ; }
boolean isSocketScheme ( String scheme ) { for ( String p : URIHelper . SOCKET_SCHEMES ) { if ( p . equals ( scheme ) ) { return _BOOL ; } } return _BOOL ; }
private static void addLeafWithNonExistingParents ( Spatial root , Spatial leaf ) { if ( ! ( root instanceof Node ) ) { logger . log ( Level . WARNING , _STR , new Object [ ] { leaf . getName ( ) , root . getName ( ) } ) ; return ; } for ( Spatial s = leaf ; s . getParent ( ) != null ; s = s . getParent ( ) ) { Spatial parent = s . getParent ( ) ; Spatial other = findTaggedSpatial ( root , parent ) ; if ( other == null ) { continue ; } if ( other instanceof Node ) { logger . log ( Level . INFO , _STR , new Object [ ] { s , other , root , leaf } ) ; for ( Spatial spt = leaf ; spt != parent ; spt = spt . getParent ( ) ) { spt . setUserData ( ORIGINAL_NAME , spt . getName ( ) ) ; spt . setUserData ( ORIGINAL_PATH , getSpatialPath ( spt ) ) ; spt = spt . getParent ( ) ; } Node otherNode = ( Node ) other ; otherNode . attachChild ( s ) ; logger . log ( LogLevel . USERINFO , _STR , new Object [ ] { other . getName ( ) , leaf . getName ( ) } ) ; return ; } else { logger . log ( Level . WARNING , _STR , new Object [ ] { leaf , other , root } ) ; } } logger . log ( Level . WARNING , _STR , leaf . getName ( ) ) ; }
private void adjustBlockListeners ( List < OBlock > oldRange , List < OBlock > newRange , Tracker tracker ) { Iterator < OBlock > iter = newRange . iterator ( ) ; while ( iter . hasNext ( ) ) { OBlock b = iter . next ( ) ; if ( oldRange . contains ( b ) ) { oldRange . remove ( b ) ; continue ; } addBlockListener ( b , tracker ) ; } iter = oldRange . iterator ( ) ; while ( iter . hasNext ( ) ) { removeBlockListener ( iter . next ( ) , tracker ) ; } }
public static String dbNameToVarName ( String columnName ) { if ( columnName == null ) return null ; StringBuilder fieldName = new StringBuilder ( columnName . length ( ) ) ; boolean toUpper = _BOOL ; for ( int i = _NUM ; i < columnName . length ( ) ; i ++ ) { char ch = columnName . charAt ( i ) ; if ( ch == _STR ) { toUpper = _BOOL ; } else if ( toUpper ) { fieldName . append ( Character . toUpperCase ( ch ) ) ; toUpper = _BOOL ; } else { fieldName . append ( Character . toLowerCase ( ch ) ) ; } } return fieldName . toString ( ) ; }
static public String hexEncode ( byte [ ] aInput ) { StringBuffer result = new StringBuffer ( ) ; final char [ ] digits = { _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR } ; for ( int idx = _NUM ; idx < aInput . length ; ++ idx ) { byte b = aInput [ idx ] ; result . append ( digits [ ( b & _NUM ) > > _NUM ] ) ; result . append ( digits [ b & _NUM ] ) ; } return result . toString ( ) ; }
private static Size clampSize ( Size original , double maxArea , Size maxSize ) { if ( original . getWidth ( ) * original . getHeight ( ) < maxArea && original . getWidth ( ) < maxSize . getWidth ( ) && original . getHeight ( ) < maxSize . getHeight ( ) ) { return original ; } double ratio = Math . min ( Math . sqrt ( maxArea / original . area ( ) ) , _NUM ) ; int width = ( int ) Math . round ( original . width ( ) * ratio ) ; int height = ( int ) Math . round ( original . height ( ) * ratio ) ; if ( width > maxSize . width ( ) || height > maxSize . height ( ) ) { return computeFitWithinSize ( original , maxSize ) ; } return new Size ( width , height ) ; }
TCPChannel ( TCPTransport tr , TCPEndpoint ep ) { this . tr = tr ; this . ep = ep ; }
@ Override public final String toString ( ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( _STR ) ; for ( int i = _NUM ; i < fields . size ( ) ; i ++ ) { IndexableField field = fields . get ( i ) ; buffer . append ( field . toString ( ) ) ; if ( i != fields . size ( ) - _NUM ) { buffer . append ( _STR ) ; } } buffer . append ( _STR ) ; return buffer . toString ( ) ; }
public static byte [ ] encode ( byte [ ] data ) { ByteArrayOutputStream bOut = new ByteArrayOutputStream ( ) ; try { encoder . encode ( data , _NUM , data . length , bOut ) ; } catch ( IOException e ) { throw new RuntimeException ( _STR + e ) ; } return bOut . toByteArray ( ) ; }
public static Face drawDir ( Direction dir , MeshModel model , double minX , double minY , double minZ , double maxX , double maxY , double maxZ , CubeTextureCoordinates textureCoordinates ) { switch ( dir ) { case DOWN : return drawDown ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case UP : return drawUp ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case NORTH : return drawNorth ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case SOUTH : return drawSouth ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case EAST : return drawEast ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case WEST : return drawWest ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; } throw new RenderException ( _STR ) ; }
public void addObserver ( final FileAlterationObserver observer ) { if ( observer != null ) { observers . add ( observer ) ; } }
public MAVLinkMessage ( MAVLinkSchema schema , ByteBuffer buffer ) throws MAVLinkProtocolException , MAVLinkUnknownMessage , BufferUnderflowException { if ( buffer . remaining ( ) < NON_PAYLOAD_LENGTH ) { throw new BufferUnderflowException ( ) ; } int startPos = buffer . position ( ) ; byte startSign = buffer . get ( ) ; if ( startSign != START_OF_FRAME ) { throw new MAVLinkProtocolException ( String . format ( _STR , startSign , START_OF_FRAME ) ) ; } int payloadLen = buffer . get ( ) & _NUM ; if ( buffer . remaining ( ) < payloadLen + NON_PAYLOAD_LENGTH - _NUM ) { buffer . position ( startPos ) ; throw new BufferUnderflowException ( ) ; } sequence = buffer . get ( ) ; systemID = buffer . get ( ) & _NUM ; componentID = buffer . get ( ) & _NUM ; msgID = buffer . get ( ) & _NUM ; this . schema = schema ; this . definition = schema . getMessageDefinition ( msgID ) ; if ( definition == null ) { buffer . position ( buffer . position ( ) + payloadLen + CRC_LENGTH ) ; throw new MAVLinkUnknownMessage ( String . format ( _STR , msgID ) ) ; } if ( payloadLen != definition . payloadLength ) { buffer . position ( buffer . position ( ) + payloadLen + CRC_LENGTH ) ; throw new MAVLinkUnknownMessage ( String . format ( _STR , definition . name , msgID , payloadLen , definition . payloadLength ) ) ; } this . payload = new byte [ definition . payloadLength ] ; buffer . get ( payload ) ; crc = Short . reverseBytes ( buffer . getShort ( ) ) & _NUM ; int endPos = buffer . position ( ) ; buffer . position ( startPos ) ; int crcCalc = calculateCRC ( buffer ) ; buffer . position ( endPos ) ; if ( crc != crcCalc ) { throw new MAVLinkUnknownMessage ( String . format ( _STR , definition . name , msgID , crc , crcCalc ) ) ; } this . payloadBB = ByteBuffer . wrap ( payload ) ; payloadBB . order ( schema . getByteOrder ( ) ) ; }
public static double log1p ( final double x ) { if ( x == - _NUM ) { return Double . NEGATIVE_INFINITY ; } if ( x == Double . POSITIVE_INFINITY ) { return Double . POSITIVE_INFINITY ; } if ( x > _NUM || x < - _NUM ) { final double xpa = _NUM + x ; final double xpb = - ( xpa - _NUM - x ) ; final double [ ] hiPrec = new double [ _NUM ] ; final double lores = log ( xpa , hiPrec ) ; if ( Double . isInfinite ( lores ) ) { return lores ; } final double fx1 = xpb / xpa ; final double epsilon = _NUM * fx1 + _NUM ; return epsilon * fx1 + hiPrec [ _NUM ] + hiPrec [ _NUM ] ; } else { final double y = ( x * F_1_3 - F_1_2 ) * x + _NUM ; return y * x ; } }
protected ScriptBuilder bigNum ( long num ) { return bigNum ( chunks . size ( ) , num ) ; }
Callbacks tryGetCallbacks ( Callbacks oldCallbacks ) { synchronized ( mLock ) { if ( mStopped ) { return null ; } if ( mCallbacks == null ) { return null ; } final Callbacks callbacks = mCallbacks . get ( ) ; if ( callbacks != oldCallbacks ) { return null ; } if ( callbacks == null ) { Log . w ( TAG , _STR ) ; return null ; } return callbacks ; } }
public final void change_entries ( BrdTracep p_obj , Polyline p_new_polyline , int p_keep_at_start_count , int p_keep_at_end_count ) { int compensated_half_width = p_obj . get_half_width ( ) + get_clearance_compensation ( p_obj . clearance_idx ( ) , p_obj . get_layer ( ) ) ; ArrayList < ShapeTile > changed_shapes = offset_shapes ( p_new_polyline , compensated_half_width , p_keep_at_start_count , p_new_polyline . plaline_len ( - _NUM ) - p_keep_at_end_count ) ; int old_shape_count = p_obj . tree_shape_count ( this ) ; int new_shape_count = changed_shapes . size ( ) + p_keep_at_start_count + p_keep_at_end_count ; AwtreeNodeLeaf [ ] new_leaf_arr = new AwtreeNodeLeaf [ new_shape_count ] ; ShapeTile [ ] new_precalculated_tree_shapes = new ShapeTile [ new_shape_count ] ; AwtreeNodeLeaf [ ] old_entries = p_obj . get_search_tree_entries ( this ) ; for ( int index = _NUM ; index < p_keep_at_start_count ; ++ index ) { new_leaf_arr [ index ] = old_entries [ index ] ; new_precalculated_tree_shapes [ index ] = p_obj . get_tree_shape ( this , index ) ; } for ( int index = p_keep_at_start_count ; index < old_shape_count - p_keep_at_end_count ; ++ index ) { remove_leaf ( old_entries [ index ] ) ; } for ( int i = _NUM ; i < p_keep_at_end_count ; ++ i ) { int new_index = new_shape_count - p_keep_at_end_count + i ; int old_index = old_shape_count - p_keep_at_end_count + i ; new_leaf_arr [ new_index ] = old_entries [ old_index ] ; new_leaf_arr [ new_index ] . shape_index_in_object = new_index ; new_precalculated_tree_shapes [ new_index ] = p_obj . get_tree_shape ( this , old_index ) ; } for ( int index = p_keep_at_start_count ; index < new_shape_count - p_keep_at_end_count ; ++ index ) { new_precalculated_tree_shapes [ index ] = changed_shapes . get ( index - p_keep_at_start_count ) ; } p_obj . set_precalculated_tree_shapes ( new_precalculated_tree_shapes , this ) ; for ( int index = p_keep_at_start_count ; index < new_shape_count - p_keep_at_end_count ; ++ index ) { new_leaf_arr [ index ] = insert ( p_obj , index ) ; } p_obj . set_search_tree_entries ( this , new_leaf_arr ) ; }
static Object newInstance ( String className , ClassLoader cl , boolean doFallback ) throws ConfigurationError { try { Class providerClass = findProviderClass ( className , cl , doFallback ) ; Object instance = providerClass . newInstance ( ) ; if ( DEBUG ) debugPrintln ( _STR + providerClass + _STR + cl ) ; return instance ; } catch ( ClassNotFoundException x ) { throw new ConfigurationError ( _STR + className + _STR , x ) ; } catch ( Exception x ) { throw new ConfigurationError ( _STR + className + _STR + x , x ) ; } }
public void paintComponentBackground ( Graphics g ) { super . paintComponentBackground ( g ) ; int clipX = g . getClipX ( ) ; int clipY = g . getClipY ( ) ; int clipW = g . getClipWidth ( ) ; int clipH = g . getClipHeight ( ) ; int width = getWidth ( ) ; int height = getHeight ( ) ; int y = getY ( ) ; if ( infinite ) { int blockSize = getWidth ( ) / _NUM ; int x = getX ( ) + ( int ) ( ( ( ( float ) value ) / ( ( float ) maxValue - minValue ) ) * ( getWidth ( ) - blockSize ) ) ; g . clipRect ( x , y , blockSize , height - _NUM ) ; } else { if ( vertical ) { int actualHeight = ( int ) ( ( ( ( float ) value ) / ( ( float ) maxValue - minValue ) ) * getHeight ( ) ) ; y += height - actualHeight ; } else { width = ( int ) ( ( ( ( float ) value ) / ( ( float ) maxValue - minValue ) ) * getWidth ( ) ) ; } g . clipRect ( getX ( ) , y , width , height ) ; } paintingFull = _BOOL ; super . paintComponentBackground ( g ) ; paintingFull = _BOOL ; g . setClip ( clipX , clipY , clipW , clipH ) ; if ( thumbImage != null && ! infinite ) { if ( ! vertical ) { int xPos = getX ( ) + width - thumbImage . getWidth ( ) / _NUM ; xPos = Math . max ( getX ( ) , xPos ) ; xPos = Math . min ( getX ( ) + getWidth ( ) - thumbImage . getWidth ( ) , xPos ) ; g . drawImage ( thumbImage , xPos , y + height / _NUM - thumbImage . getHeight ( ) / _NUM ) ; } else { int yPos = y ; g . drawImage ( thumbImage , getX ( ) + width / _NUM - thumbImage . getWidth ( ) / _NUM , yPos ) ; } } }
public void addAction ( EntityAction ea ) { actions . addElement ( ea ) ; processGameEvent ( new GameNewActionEvent ( this , ea ) ) ; }
public Polygon ( PolygonPoint p1 , PolygonPoint p2 , PolygonPoint p3 ) { p1 . _next = p2 ; p2 . _next = p3 ; p3 . _next = p1 ; p1 . _previous = p3 ; p2 . _previous = p1 ; p3 . _previous = p2 ; _points . add ( p1 ) ; _points . add ( p2 ) ; _points . add ( p3 ) ; }
public static JSONObject readJSONObject ( final JSONArray jsonArray , final int index , final boolean required , final boolean notNull ) throws JSONException { if ( required ) { return jsonArray . getJSONObject ( index ) ; } if ( notNull && jsonArray . isNull ( index ) ) { throw new JSONException ( String . format ( Locale . US , NULL_VALUE_FORMAT_ARRAY , index ) ) ; } JSONObject value = null ; if ( ! jsonArray . isNull ( index ) ) { value = jsonArray . getJSONObject ( index ) ; } return value ; }
public static void waitElementToNotBePresent ( SearchContext parent , By by , int waitInSeconds ) { Preconditions . checkNotNull ( parent ) ; Preconditions . checkNotNull ( by ) ; try { WebElementWait wait = new WebElementWait ( parent , waitInSeconds ) ; wait . until ( null ) ; } catch ( TimeoutException e ) { throw new TimeoutException ( String . format ( _STR , by , waitInSeconds ) , e ) ; } }
public final TestSubscriber assertTerminated ( ) { if ( done . getCount ( ) != _NUM ) { fail ( _STR , _STR , errors ) ; } long c = completions ; if ( c > _NUM ) { fail ( _STR , _STR + c , errors ) ; } int s = errors . size ( ) ; if ( s > _NUM ) { fail ( _STR , _STR + s , errors ) ; } if ( c != _NUM && s != _NUM ) { fail ( _STR , _STR + c , errors ) ; } return this ; }
public boolean isVimeoURLValid ( ) { String videoID = getExtractedIdentifier ( ) ; return videoID . length ( ) > _NUM && TextUtils . isDigitsOnly ( videoID ) ; }
public boolean isCancelled ( ) { return mState . get ( ) == STATE_CANCELLED ; }
public final void pushSubContextList ( SubContextList iter ) { m_axesIteratorStack . push ( iter ) ; }
static void checkDesc ( final String desc , final boolean canBeVoid ) { int end = checkDesc ( desc , _NUM , canBeVoid ) ; if ( end != desc . length ( ) ) { throw new IllegalArgumentException ( _STR + desc ) ; } }
private void updateDownloadedFiles ( SQLiteDatabase db , String newAccountName , String oldAccountName ) { String whereClause = ProviderTableMeta . FILE_ACCOUNT_OWNER + _STR + ProviderTableMeta . FILE_STORAGE_PATH + _STR ; Cursor c = db . query ( ProviderTableMeta . FILE_TABLE_NAME , null , whereClause , new String [ ] { newAccountName } , null , null , null ) ; try { if ( c . moveToFirst ( ) ) { String oldAccountPath = FileStorageUtils . getSavePath ( oldAccountName ) ; String newAccountPath = FileStorageUtils . getSavePath ( newAccountName ) ; File oldAccountFolder = new File ( oldAccountPath ) ; File newAccountFolder = new File ( newAccountPath ) ; oldAccountFolder . renameTo ( newAccountFolder ) ; do { String oldPath = c . getString ( c . getColumnIndex ( ProviderTableMeta . FILE_STORAGE_PATH ) ) ; OCFile file = new OCFile ( c . getString ( c . getColumnIndex ( ProviderTableMeta . FILE_PATH ) ) ) ; String newPath = FileStorageUtils . getDefaultSavePathFor ( newAccountName , file ) ; ContentValues cv = new ContentValues ( ) ; cv . put ( ProviderTableMeta . FILE_STORAGE_PATH , newPath ) ; db . update ( ProviderTableMeta . FILE_TABLE_NAME , cv , ProviderTableMeta . FILE_STORAGE_PATH + _STR , new String [ ] { oldPath } ) ; Log_OC . v ( _STR , _STR + oldPath + _STR + newPath ) ; } while ( c . moveToNext ( ) ) ; } } finally { c . close ( ) ; } }
public void dumpOptions ( ) { logger . info ( _STR ) ; for ( Method getter : GetConfigurationInterface . class . getMethods ( ) ) { String getterName = getter . getName ( ) ; try { Object result = getter . invoke ( ConfigurationManager . getCurrentProfile ( ) ) ; if ( result instanceof Boolean ) { result = LocalizationHelper . getYesOrNo ( ( Boolean ) result ) ; } if ( result instanceof List ) { for ( int i = _NUM ; i < ( ( List ) result ) . size ( ) ; i ++ ) { assert ( ( List ) result ) . get ( i ) instanceof CustomCatalogEntry ; CustomCatalogEntry c = ( ( List < CustomCatalogEntry > ) result ) . get ( i ) ; String OptionName = Helper . pad ( Localization . Main . getText ( _STR ) + _STR + ( i + _NUM ) + _STR + c . getAtTop ( ) . toString ( ) , _STR , _NUM ) + _STR ; logger . info ( OptionName + c . getLabel ( ) + _STR + c . getValue ( ) . toString ( ) + _STR + c . getAtTop ( ) . toString ( ) ) ; } } else { String optionName = getterName . substring ( _NUM ) ; dumpOption ( optionName , result ) ; } } catch ( IllegalAccessException e ) { logger . warn ( _STR , e ) ; } catch ( InvocationTargetException e ) { logger . warn ( _STR , e ) ; } } logger . info ( _STR ) ; }
private JsonNode parseLanguageResource ( Resource resource ) throws IOException { InputStream stream = resource . asStream ( ) ; if ( stream == null ) return null ; try { JsonNode tree = mapper . readTree ( stream ) ; return tree ; } finally { stream . close ( ) ; } }
public Collection < Tuple2 < TransitionState , Double > > startStates ( ) { List < Tuple2 < TransitionState , Double > > result = new ArrayList < Tuple2 < TransitionState , Double > > ( ) ; { double score = Math . log ( LINE_MRGN_PROB ) ; addNoSubGlyphStartState ( result , new int [ _NUM ] , TransitionStateType . LMRGN , - _NUM , score ) ; } for ( int destLanguage = _NUM ; destLanguage < numLanguages ; ++ destLanguage ) { SingleLanguageModel destLM = lm . get ( destLanguage ) ; double destLanguagePrior = lm . languagePrior ( destLanguage ) ; for ( int c : destLM . getActiveCharacters ( ) ) { if ( c != spaceCharIndex ) { double score = Math . log ( _NUM - LINE_MRGN_PROB ) + Math . log ( getNgramProb ( destLM , new int [ _NUM ] , c ) ) + Math . log ( destLanguagePrior ) ; addGlyphStartStates ( result , c , new int [ ] { c } , TransitionStateType . TMPL , destLanguage , score ) ; } } } { double totalSpaceProb = _NUM ; for ( int language = _NUM ; language < numLanguages ; ++ language ) totalSpaceProb += getNgramProb ( lm . get ( language ) , new int [ _NUM ] , spaceCharIndex ) * lm . languagePrior ( language ) ; double score = Math . log ( _NUM - LINE_MRGN_PROB ) + Math . log ( totalSpaceProb ) ; addNoSubGlyphStartState ( result , new int [ ] { spaceCharIndex } , TransitionStateType . TMPL , - _NUM , score ) ; } return result ; }
public boolean removeContainerAndCancelIfNecessary ( ImageContainer container ) { mContainers . remove ( container ) ; if ( mContainers . isEmpty ( ) ) { mRequest . cancel ( ) ; return _BOOL ; } return _BOOL ; }
public KernelDensityFunction ( Collection < double [ ] > points ) { this ( points . toArray ( new double [ points . size ( ) ] [ ] ) ) ; }
private static Object cloneSerializableObject ( Object o ) throws IOException , ClassNotFoundException { ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; ObjectOutputStream out = new ObjectOutputStream ( b ) ; out . writeObject ( o ) ; out . flush ( ) ; out . close ( ) ; ByteArrayInputStream bi = new ByteArrayInputStream ( b . toByteArray ( ) ) ; ObjectInputStream in = new ObjectInputStream ( bi ) ; return in . readObject ( ) ; }
public boolean hasThree ( ) { return points . size ( ) > _NUM ; }
public ZipEntry ( String name ) { Objects . requireNonNull ( name , _STR ) ; if ( name . length ( ) > _NUM ) { throw new IllegalArgumentException ( _STR ) ; } this . name = name ; }
public void _testStatements ( ) throws Exception { Connection connection = getConnectionViaDriverManager ( ) ; connection . setAutoCommit ( _BOOL ) ; try { Statement stmt = connection . createStatement ( ) ; ResultSet rs = stmt . executeQuery ( _STR ) ; rs . close ( ) ; RandomSelector selector1 = new RandomSelector ( stmt , SELECT_TABLE_1 , RECORD_COUNT ) ; RandomSelector selector2 = new RandomSelector ( stmt , SELECT_TABLE_2 , RECORD_COUNT ) ; Thread thread1 = new Thread ( selector1 , _STR ) ; Thread thread2 = new Thread ( selector2 , _STR ) ; thread1 . start ( ) ; thread2 . start ( ) ; Thread . sleep ( TEST_TIME_SECONDS * _NUM ) ; selector1 . stop ( ) ; selector2 . stop ( ) ; thread1 . join ( ) ; thread2 . join ( ) ; stmt . close ( ) ; } finally { connection . close ( ) ; } }
void readDictionary ( String filename , String suffix , InputStream res ) throws IOException { DictionaryNames nms = new DictionaryNames ( filename , suffix ) ; BufferedReader in = new BufferedReader ( new InputStreamReader ( res ) ) ; String line ; while ( ( line = in . readLine ( ) ) != null ) { String [ ] terms = splitter . split ( line ) ; if ( terms . length > maxPhraseLength ) continue ; if ( terms . length == _NUM ) continue ; GazEntry ge = gaz . get ( terms [ _NUM ] ) ; if ( ge == null ) { gaz . put ( terms [ _NUM ] , new GazEntry ( terms , _NUM , nms ) ) ; } else { ge . addChild ( terms , _NUM , nms ) ; } } in . close ( ) ; }
private T matchTokens ( String targetToken , String requestToken ) { int wildcardIndex = _NUM ; if ( targetToken == null && requestToken == null ) { return exactMatch ; } if ( targetToken == null || requestToken == null ) { return noMatch ; } int beginTargetIndex = _NUM ; int beginRequestIndex = _NUM ; String substr = null ; int targetTokenLength = targetToken . length ( ) ; int requestTokenLength = requestToken . length ( ) ; if ( targetToken . indexOf ( oneLevelWildcard , beginTargetIndex ) != - _NUM ) { while ( ( wildcardIndex = targetToken . indexOf ( oneLevelWildcard , beginTargetIndex ) ) != - _NUM ) { if ( wildcardIndex > beginTargetIndex ) { substr = targetToken . substring ( beginTargetIndex , wildcardIndex ) ; if ( ( beginRequestIndex = requestToken . indexOf ( substr , beginRequestIndex ) ) == - _NUM ) { return noMatch ; } beginTargetIndex = beginTargetIndex + substr . length ( ) + oneLevelWildcardLength ; beginRequestIndex = beginRequestIndex + substr . length ( ) ; } else { if ( wildcardIndex == beginTargetIndex ) { if ( targetTokenLength == oneLevelWildcardLength ) { return wildcardMatch ; } else { beginTargetIndex = beginTargetIndex + oneLevelWildcardLength ; continue ; } } } } if ( beginTargetIndex >= targetTokenLength ) { return wildcardMatch ; } String targetStr = targetToken . substring ( beginTargetIndex , targetTokenLength ) ; String remRequest = requestToken . substring ( beginRequestIndex , requestTokenLength ) ; int remRequestIndex = - _NUM ; if ( ( remRequestIndex = remRequest . lastIndexOf ( targetStr , remRequest . length ( ) - _NUM ) ) == - _NUM ) { return noMatch ; } else { beginRequestIndex = beginRequestIndex + remRequestIndex ; if ( beginRequestIndex + targetStr . length ( ) >= requestTokenLength ) { return wildcardMatch ; } else { return noMatch ; } } } else { if ( targetToken . equals ( requestToken ) ) { return exactMatch ; } } return noMatch ; }
public void addVertex ( ValueGraphVertex v ) { if ( vertices . add ( v ) ) { if ( v . representsParameter ( ) ) { nParameter ++ ; } if ( representativeV == null ) { representativeV = v ; } } }
private void createViewToModel ( int rowCount ) { int recreateFrom = _NUM ; if ( viewToModel != null ) { recreateFrom = Math . min ( rowCount , viewToModel . length ) ; if ( viewToModel . length != rowCount ) { Row [ ] oldViewToModel = viewToModel ; viewToModel = new Row [ rowCount ] ; System . arraycopy ( oldViewToModel , _NUM , viewToModel , _NUM , recreateFrom ) ; } } else { viewToModel = new Row [ rowCount ] ; } int i ; for ( i = _NUM ; i < recreateFrom ; i ++ ) { viewToModel [ i ] . modelIndex = i ; } for ( i = recreateFrom ; i < rowCount ; i ++ ) { viewToModel [ i ] = new Row ( this , i ) ; } }
public Set < String > files ( ) { if ( setFiles == null ) { throw new IllegalStateException ( _STR ) ; } return Collections . unmodifiableSet ( setFiles ) ; }
public static boolean isMac ( ) { String osName = System . getProperty ( _STR ) ; osName = osName . toLowerCase ( ) ; return osName . indexOf ( _STR ) != - _NUM ; }
private boolean isAssignableFrom ( Throwable concreteThrowable , Set < Class < ? extends Throwable > > throwableClasses ) { for ( Class < ? extends Throwable > t : throwableClasses ) { if ( t . isAssignableFrom ( concreteThrowable . getClass ( ) ) ) { return _BOOL ; } } return _BOOL ; }
public String popAndEncode ( boolean fromOnlineEvent ) { synchronized ( this ) { if ( activeBridgeMode == null ) { return null ; } activeBridgeMode . notifyOfFlush ( this , fromOnlineEvent ) ; if ( queue . isEmpty ( ) ) { return null ; } int totalPayloadLen = _NUM ; int numMessagesToSend = _NUM ; for ( JsMessage message : queue ) { int messageSize = calculatePackedMessageLength ( message ) ; if ( numMessagesToSend > _NUM && totalPayloadLen + messageSize > MAX_PAYLOAD_SIZE && MAX_PAYLOAD_SIZE > _NUM ) { break ; } totalPayloadLen += messageSize ; numMessagesToSend += _NUM ; } StringBuilder sb = new StringBuilder ( totalPayloadLen ) ; for ( int i = _NUM ; i < numMessagesToSend ; ++ i ) { JsMessage message = queue . removeFirst ( ) ; packMessage ( message , sb ) ; } if ( ! queue . isEmpty ( ) ) { sb . append ( _STR ) ; } String ret = sb . toString ( ) ; return ret ; } }
protected void print ( int v ) throws IOException { print ( String . valueOf ( v ) ) ; }
public Object2DoubleOpenHashMap < IntRBTreeSet > confidenceMap ( ) { List < ItemSet > itemSets = learn ( ) ; Object2DoubleOpenHashMap < IntRBTreeSet > confidenceMap = new Object2DoubleOpenHashMap < > ( itemSets . size ( ) ) ; for ( ItemSet itemSet : itemSets ) { IntRBTreeSet itemSetCopy = new IntRBTreeSet ( itemSet . items ) ; confidenceMap . put ( itemSetCopy , itemSet . support / ( double ) setCount ) ; } return confidenceMap ; }
public static boolean isAllAlpha ( String str ) { if ( str == null ) return _BOOL ; for ( int i = str . length ( ) - _NUM ; i >= _NUM ; i -- ) { if ( ! Character . isLetter ( str . charAt ( i ) ) ) return _BOOL ; } return _BOOL ; }
private void extract ( int minsupp , int minlength , int maxlength , int item , int [ ] postfix , int plen , int [ ] buf2 , int [ ] buf3 , boolean destruct , Collector col ) { if ( header [ item ] == null ) { return ; } if ( header [ item ] . sibling == null ) { if ( header [ item ] . count < minsupp ) { return ; } extractLinear ( header [ item ] . count , minsupp , minlength , maxlength , item , postfix , plen , buf2 , col ) ; if ( destruct ) { Arrays . fill ( header , null ) ; } return ; } int support = _NUM ; for ( FPNode cur = header [ item ] ; cur != null ; cur = cur . sibling ) { support += cur . count ; } if ( support < minsupp ) { return ; } Arrays . fill ( buf3 , _NUM ) ; for ( FPNode cur = header [ item ] ; cur != null ; cur = cur . sibling ) { for ( FPNode parent = cur . parent ; parent . key >= _NUM ; parent = parent . parent ) { buf3 [ parent . key ] += cur . count ; } } final int mminlength = minlength - ( plen + _NUM ) ; if ( mminlength > _NUM ) { int fparents = _NUM ; for ( int i = _NUM ; i < item ; i ++ ) { if ( buf3 [ i ] >= minsupp ) { fparents += _NUM ; } } if ( fparents < mminlength ) { return ; } } final int last = item - _NUM ; FPTree proj = new FPTree ( item ) ; for ( FPNode cur = header [ item ] ; cur != null ; cur = cur . sibling ) { int j = buf2 . length ; for ( FPNode parent = cur . parent ; parent . key >= _NUM ; parent = parent . parent ) { if ( buf3 [ parent . key ] >= minsupp ) { buf2 [ -- j ] = parent . key ; } } if ( buf2 . length - j >= mminlength ) { proj . insert ( proj , buf2 , j , buf2 . length , cur . count ) ; } } proj . reduceMemory ( ) ; postfix [ plen ++ ] = item ; if ( plen >= minlength && plen <= maxlength ) { col . collect ( support , postfix , _NUM , plen ) ; } for ( int j = last ; j >= _NUM ; j -- ) { proj . extract ( minsupp , minlength , maxlength , j , postfix , plen , buf2 , buf3 , destruct , col ) ; } if ( destruct ) { header [ item ] = null ; } }
public void updatePosition ( Particle particle , long elapsedTime ) { Vector3f speed = particle . getSpeed ( ) ; float delta = elapsedTime / _NUM ; float dx = speed . x * delta ; float dy = speed . y * delta ; float dz = speed . z * delta ; Vector3f pos = particle . getPosition ( ) ; particle . setPosition ( pos . x + dx , pos . y + dy , pos . z + dz ) ; }
protected static int toDigit ( char ch , int index ) throws DSSException { int digit = Character . digit ( ch , _NUM ) ; if ( digit == - _NUM ) { throw new DSSException ( _STR + ch + _STR + index ) ; } return digit ; }
static void loadLibraryWithPath ( String libName , ClassLoader loader , String libraryPath ) { throw new Error ( _STR ) ; }
public Enumeration listOptions ( ) { Vector newVector = new Vector ( ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; return newVector . elements ( ) ; }
public void testConstructorSignBytesPositive7 ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , - _NUM } ; int aSign = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , aNumber . signum ( ) ) ; }
public void save ( File keyStore , String type , char [ ] password , char [ ] keyPassword , String caAlias ) throws GeneralSecurityException , IOException { KeyStore store = KeyStore . getInstance ( type ) ; store . load ( null , password ) ; store . setKeyEntry ( caAlias , caKey , keyPassword , caCerts ) ; OutputStream out = new FileOutputStream ( keyStore ) ; try { store . store ( out , password ) ; } catch ( IOException ioe ) { ioe . printStackTrace ( ) ; } finally { out . close ( ) ; } }
public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
public OrQueryBuilder add ( QueryBuilder filterBuilder ) { filters . add ( filterBuilder ) ; return this ; }
public static void d ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_DEBUG ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . d ( tag , msg ) ; }
public static byte [ ] randomBytes ( int length ) { byte [ ] bytes = new byte [ length ] ; SEEDED_RANDOM . nextBytes ( bytes ) ; return bytes ; }
void update ( long timeNanos , int rows ) { count ++ ; executionTimeMinNanos = Math . min ( timeNanos , executionTimeMinNanos ) ; executionTimeMaxNanos = Math . max ( timeNanos , executionTimeMaxNanos ) ; rowCountMin = Math . min ( rows , rowCountMin ) ; rowCountMax = Math . max ( rows , rowCountMax ) ; double rowDelta = rows - rowCountMean ; rowCountMean += rowDelta / count ; rowCountM2 += rowDelta * ( rows - rowCountMean ) ; double timeDelta = timeNanos - executionTimeMeanNanos ; executionTimeMeanNanos += timeDelta / count ; executionTimeM2Nanos += timeDelta * ( timeNanos - executionTimeMeanNanos ) ; executionTimeCumulativeNanos += timeNanos ; rowCountCumulative += rows ; lastUpdateTime = System . currentTimeMillis ( ) ; }
public void test_ctor_2 ( ) throws SailException { final File file = new File ( getName ( ) + Options . JNL ) ; if ( file . exists ( ) ) { if ( ! file . delete ( ) ) { fail ( _STR + file ) ; } } final Properties properties = new Properties ( ) ; properties . setProperty ( Options . FILE , file . toString ( ) ) ; final BigdataSail sail = new BigdataSail ( properties ) ; try { sail . initialize ( ) ; sail . shutDown ( ) ; } finally { if ( ! file . exists ( ) ) { fail ( _STR + file ) ; if ( ! file . delete ( ) ) { fail ( _STR + file ) ; } } } }
@ Override public String toString ( ) { String result ; result = null ; if ( isObject ( ) ) { if ( isRoot ( ) ) { result = _STR ; } else if ( m_Name == null ) { result = _STR ; } else { result = escape ( m_Name ) + _STR ; } } else if ( isArray ( ) ) { if ( m_Name == null ) { result = _STR ; } else { result = escape ( m_Name ) + _STR ; } } else { if ( m_Name != null ) { result = escape ( m_Name ) + _STR + escape ( m_Value ) ; } else { result = _STR + m_Value ; } } return result ; }
public final boolean split_traces_keep_point ( ) { if ( keep_point == null ) return _BOOL ; ItemSelectionFilter filter = new ItemSelectionFilter ( ItemSelectionChoice . TRACES ) ; Collection < BrdItem > picked_items = r_board . pick_items ( keep_point . keep_point , keep_point . on_layer , filter ) ; for ( BrdItem curr_item : picked_items ) { BrdTracep a_trace = ( BrdTracep ) curr_item ; int line_idx = a_trace . polyline_find_line_idx ( keep_point . keep_point ) ; if ( line_idx < _NUM ) continue ; ArrayList < BrdTracep > clean_list = a_trace . split_with_end_point ( line_idx , keep_point . keep_point ) ; return clean_list . size ( ) > _NUM ; } return _BOOL ; }
public static byte [ ] flipAllBitsInPlace ( byte [ ] bytes , int index , int length ) { int endIndex = Math . min ( bytes . length , index + length ) ; for ( int i = index ; i < endIndex ; i ++ ) { bytes [ i ] = ( byte ) ( bytes [ i ] ^ _NUM ) ; } return bytes ; }
public CreateIndexRequest source ( String source ) { return source ( source . getBytes ( Charsets . UTF_8 ) ) ; }
private void addUsers ( User [ ] users , LocalConfiguration configuration ) { for ( User user : users ) { configuration . addUser ( user . createUser ( ) ) ; } }
void tryToDrainBuffers ( ) { if ( evictionLock . tryLock ( ) ) { try { drainStatus . lazySet ( PROCESSING ) ; drainBuffers ( ) ; } finally { drainStatus . compareAndSet ( PROCESSING , IDLE ) ; evictionLock . unlock ( ) ; } } }
public void remove ( int i ) { individuals . remove ( i ) ; }
public static boolean copyFile ( File source , File dest ) { File parentDest = dest . getParentFile ( ) ; if ( ! parentDest . exists ( ) ) { if ( ! createDirectory ( parentDest . getAbsolutePath ( ) ) ) { return _BOOL ; } } try { Files . copy ( source . toPath ( ) , dest . toPath ( ) ) ; return _BOOL ; } catch ( IOException e ) { e . printStackTrace ( ) ; return _BOOL ; } }
public static String propertiesEncode ( Properties pp ) { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; try { pp . store ( bos , _STR ) ; } catch ( IOException e ) { log . log ( Level . SEVERE , _STR , e ) ; } String result = new String ( bos . toByteArray ( ) ) ; try { result = URLEncoder . encode ( result , MobileEnv . ENCODING ) ; } catch ( UnsupportedEncodingException e ) { log . log ( Level . SEVERE , _STR + MobileEnv . ENCODING , e ) ; String enc = System . getProperty ( _STR ) ; try { result = URLEncoder . encode ( result , enc ) ; log . info ( _STR + enc ) ; } catch ( Exception ex ) { log . log ( Level . SEVERE , _STR , ex ) ; } } return result ; }
@ Override public void generateRss ( XmlWriter w , ExtensionProfile extProfile ) throws IOException { ArrayList < XmlWriter . Attribute > attrs = new ArrayList < XmlWriter . Attribute > ( _NUM ) ; if ( mimeType != null ) { attrs . add ( new XmlWriter . Attribute ( _STR , mimeType . getMediaType ( ) ) ) ; } if ( uri != null ) { attrs . add ( new XmlWriter . Attribute ( _STR , uri ) ) ; } if ( length != - _NUM ) { attrs . add ( new XmlWriter . Attribute ( _STR , Long . toString ( length ) ) ) ; } w . simpleElement ( Namespaces . rssNs , _STR , attrs , null ) ; }
public void testSortsElementsByName ( ) throws Exception { XppDom dom1 = XppFactory . buildDom ( _STR ) ; XppDom dom2 = XppFactory . buildDom ( _STR ) ; assertEquals ( - _NUM , comparator . compare ( dom1 , dom2 ) ) ; assertEquals ( _STR , xpath . get ( ) ) ; assertEquals ( _NUM , comparator . compare ( dom2 , dom1 ) ) ; assertEquals ( _STR , xpath . get ( ) ) ; }
public static boolean deleteDirectory ( final File path ) { if ( path . exists ( ) ) { File [ ] files = path . listFiles ( ) ; for ( File file : files ) { if ( file . isDirectory ( ) ) { deleteDirectory ( file ) ; } else { file . delete ( ) ; } } } return path . delete ( ) ; }
public void morph ( Component source , Component destination , int duration , Runnable onCompletion ) { morph ( source , destination , duration , _BOOL , onCompletion ) ; }
public static Timestamp stringToTimeStamp ( String dateTimeString , String dateTimeFormat , TimeZone tz , Locale locale ) throws ParseException { DateFormat dateFormat = toDateTimeFormat ( dateTimeFormat , tz , locale ) ; Date parsedDate = dateFormat . parse ( dateTimeString ) ; return new Timestamp ( parsedDate . getTime ( ) ) ; }
private boolean startsNewHunk ( String string ) { if ( string . length ( ) == _NUM ) return _BOOL ; return isLegalChar ( string . charAt ( _NUM ) ) ; }
public void clearValues ( ) { valueMap . clear ( ) ; }
void addFillComponents ( Container panel , int [ ] cols , int [ ] rows ) { Dimension filler = new Dimension ( _NUM , _NUM ) ; boolean filled_cell_11 = _BOOL ; CellConstraints cc = new CellConstraints ( ) ; if ( cols . length > _NUM && rows . length > _NUM ) { if ( cols [ _NUM ] == _NUM && rows [ _NUM ] == _NUM ) { panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , _NUM ) ) ; filled_cell_11 = _BOOL ; } } for ( int index = _NUM ; index < cols . length ; index ++ ) { if ( cols [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( cols [ index ] , _NUM ) ) ; } for ( int index = _NUM ; index < rows . length ; index ++ ) { if ( rows [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , rows [ index ] ) ) ; } }
private HashMap < String , byte [ ] > readChars ( byte [ ] d ) { HashMap < String , byte [ ] > hm = new HashMap < String , byte [ ] > ( ) ; int i = findSlashName ( d , _STR ) ; if ( i < _NUM ) { return hm ; } PSParser psp = new PSParser ( d , i ) ; while ( _BOOL ) { String s = psp . readThing ( ) ; char c = s . charAt ( _NUM ) ; if ( c == _STR ) { int len = Integer . parseInt ( psp . readThing ( ) ) ; String go = psp . readThing ( ) ; if ( go . equals ( _STR ) || go . equals ( _STR ) ) { psp . setLoc ( psp . getLoc ( ) + _NUM ) ; byte [ ] line = psp . getNEncodedBytes ( len , password , lenIV ) ; hm . put ( s . substring ( _NUM ) , line ) ; } } else if ( s . equals ( _STR ) ) { break ; } } return hm ; }
public static byte [ ] stringToByteArray ( String input ) { char chars [ ] = input . toCharArray ( ) ; byte bytes [ ] = new byte [ chars . length ] ; for ( int i = _NUM ; i < chars . length ; i ++ ) { bytes [ i ] = ( byte ) chars [ i ] ; } return bytes ; }
public void playFileForUser ( String fileName , String userName ) throws SoundPlaybackException { if ( userName == null || userName . isEmpty ( ) ) { userName = appProperties . getProperty ( _STR ) ; } try { Guild guild = getUsersGuild ( userName ) ; joinUsersCurrentChannel ( userName ) ; playFile ( fileName , guild ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
@ Deprecated public static void runFinalizersOnExit ( boolean run ) { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkExit ( _NUM ) ; } synchronized ( hooksList ) { finalizeOnExit = run ; } }
public double [ ] [ ] predictIntervals ( double conf ) { updateMeanAndVariance ( ) ; double val = Statistics . normalInverse ( _NUM - ( _NUM - conf ) / _NUM ) ; double [ ] [ ] arr = new double [ _NUM ] [ _NUM ] ; arr [ _NUM ] [ _NUM ] = m_Mean + val * Math . sqrt ( m_Variance ) ; arr [ _NUM ] [ _NUM ] = m_Mean - val * Math . sqrt ( m_Variance ) ; return arr ; }
public static < T > T min ( Collection < ? extends T > collection , Comparator < ? super T > comparator ) { if ( comparator == null ) { @ SuppressWarnings ( _STR ) T result = ( T ) min ( ( Collection < java . lang . Comparable > ) collection ) ; return result ; } Iterator < ? extends T > it = collection . iterator ( ) ; T min = it . next ( ) ; while ( it . hasNext ( ) ) { T next = it . next ( ) ; if ( comparator . compare ( min , next ) > _NUM ) { min = next ; } } return min ; }
public static boolean checkSHA ( final String shaHash , final File file ) { if ( TextUtils . isEmpty ( shaHash ) || file == null || ! FileUtils . isReadable ( file ) ) { Log . e ( _STR ) ; return _BOOL ; } final String hash = getSHA ( file ) ; if ( hash == null ) { Log . e ( _STR ) ; return _BOOL ; } return hash . equalsIgnoreCase ( shaHash ) ; }
public void addValueKeyName ( String key ) { valueKeyNames . add ( key ) ; }
public Assignment update ( Border border ) { Arrays . sort ( cs ) ; int j = _NUM ; boolean found = ( cs [ _NUM ] . core == border . core ) ; for ( int i = _NUM ; i < cs . length ; i ++ ) { if ( cs [ i ] . core != cs [ i - _NUM ] . core ) { cs [ j ++ ] = cs [ i ] ; } found |= ( cs [ i ] . core == border . core ) ; } if ( found ) { if ( j == _NUM ) { Border r = cs [ _NUM ] ; cs = null ; return r ; } if ( j < cs . length ) { cs = Arrays . copyOf ( cs , j ) ; } return this ; } if ( j + _NUM != cs . length ) { cs = Arrays . copyOf ( cs , j + _NUM ) ; } cs [ j ] = border ; return this ; }
public static String fromChar ( int value ) { if ( value > _NUM ) return null ; String name ; initialize ( ) ; name = ( String ) _byChar . get ( new Integer ( value ) ) ; return name ; }
public static List < String > splitLines ( final String content ) { if ( content == null || content . length ( ) == _NUM ) return Collections . emptyList ( ) ; String [ ] lines = content . split ( _STR ) ; return Arrays . asList ( lines ) ; }
@ Override public void draw ( Graphics2D g2 , Rectangle2D area , Point2D anchor , PlotState state , PlotRenderingInfo info ) { boolean b1 = ( area . getWidth ( ) <= MINIMUM_WIDTH_TO_DRAW ) ; boolean b2 = ( area . getHeight ( ) <= MINIMUM_HEIGHT_TO_DRAW ) ; if ( b1 || b2 ) { return ; } if ( info != null ) { info . setPlotArea ( area ) ; } RectangleInsets insets = getInsets ( ) ; insets . trim ( area ) ; drawChipGrid ( g2 , area ) ; drawWaferEdge ( g2 , area ) ; }
public void addHole ( EdgeRing holeER ) { holeER . setShell ( this ) ; LinearRing hole = holeER . getRing ( ) ; if ( holes == null ) holes = new ArrayList ( ) ; holes . add ( hole ) ; }
private static void registerComponents ( ) { registerComponent ( BarChartComponent . class , BarChartGui . class ) ; registerComponent ( DocViewerComponent . class , DocViewerDesktopComponent . class ) ; registerComponent ( ConsoleComponent . class , ConsoleDesktopComponent . class ) ; registerComponent ( DisplayComponent . class , DisplayComponentDesktopGui . class ) ; registerComponent ( DataWorldComponent . class , DataWorldDesktopComponent . class ) ; registerComponent ( HistogramComponent . class , HistogramGui . class ) ; registerComponent ( NetworkComponent . class , NetworkDesktopComponent . class ) ; registerComponent ( OdorWorldComponent . class , OdorWorldDesktopComponent . class ) ; registerComponent ( PieChartComponent . class , PieChartGui . class ) ; registerComponent ( ProjectionComponent . class , ProjectionGui . class ) ; registerComponent ( ReaderComponent . class , ReaderComponentDesktopGui . class ) ; registerComponent ( ScatterPlotComponent . class , ScatterPlotGui . class ) ; registerComponent ( TimeSeriesPlotComponent . class , TimeSeriesPlotGui . class ) ; registerComponent ( RasterPlotComponent . class , RasterPlotGui . class ) ; registerComponent ( VisionWorldComponent . class , VisionWorldDesktopComponent . class ) ; registerComponent ( GameComponent . class , GameDesktopComponent . class ) ; registerComponent ( DeviceInteractionComponent . class , DeviceInteractionDesktopComponent . class ) ; }
public void addContainer ( ImageContainer container ) { mContainers . add ( container ) ; }
private void initialize ( Class < OpsType > opsType , Interface instance ) throws InstantiationException , IllegalAccessException { mOpsInstance = opsType . newInstance ( ) ; mRetainedFragmentManager . put ( opsType . getSimpleName ( ) , mOpsInstance ) ; mOpsInstance . onConfiguration ( instance , _BOOL ) ; }
private long skipInputBytes ( long n ) throws IOException { cbLock . lock ( ) ; try { return iis . skipBytes ( n ) ; } finally { cbLock . unlock ( ) ; } }
public byte [ ] generate64BitHashId ( ) throws CryptoException { try { DERBitString publicKeyBitString = encodePublicKeyAsBitString ( publicKey ) ; byte [ ] hash = DigestUtil . getMessageDigest ( publicKeyBitString . getBytes ( ) , DigestType . SHA1 ) ; byte [ ] subHash = Arrays . copyOfRange ( hash , _NUM , _NUM ) ; subHash [ _NUM ] &= _NUM ; subHash [ _NUM ] |= _NUM ; return subHash ; } catch ( IOException ex ) { throw new CryptoException ( res . getString ( _STR ) , ex ) ; } }
public static < C extends ConfigurationClient , S extends Configuration > CreateSubCommandHandler < C , S > create ( SubCommandArgumentParser parser , ManagedObjectPath < ? , ? > p , OptionalRelationDefinition < C , S > r ) throws ArgumentException { return new CreateSubCommandHandler < > ( parser , p , r , null , p . child ( r ) ) ; }
public DSubjectInformationAccess ( JDialog parent , byte [ ] value ) throws IOException { super ( parent ) ; setTitle ( res . getString ( _STR ) ) ; initComponents ( ) ; prepopulateWithValue ( value ) ; }
public void testSignerStringIdentityScope ( ) throws Exception { Signer s = new SignerStub ( _STR , IdentityScope . getSystemScope ( ) ) ; assertNotNull ( s ) ; assertEquals ( _STR , s . getName ( ) ) ; assertSame ( IdentityScope . getSystemScope ( ) , s . getScope ( ) ) ; assertNull ( s . getPrivateKey ( ) ) ; try { Signer s2 = new SignerStub ( _STR , IdentityScope . getSystemScope ( ) ) ; fail ( _STR ) ; } catch ( KeyManagementException e ) { } Signer s2 = new SignerStub ( null ) ; assertNull ( s2 . getName ( ) ) ; }
private Figure readLineElement ( IXMLElement elem ) throws IOException { HashMap < AttributeKey , Object > a = new HashMap < AttributeKey , Object > ( ) ; readCoreAttributes ( elem , a ) ; readTransformAttribute ( elem , a ) ; readOpacityAttribute ( elem , a ) ; readLineAttributes ( elem , a ) ; if ( FILL_COLOR . get ( a ) != null && STROKE_COLOR . get ( a ) == null ) { STROKE_COLOR . put ( a , FILL_COLOR . get ( a ) ) ; } if ( FILL_GRADIENT . get ( a ) != null && STROKE_GRADIENT . get ( a ) == null ) { STROKE_GRADIENT . put ( a , FILL_GRADIENT . get ( a ) ) ; } FILL_COLOR . put ( a , null ) ; FILL_GRADIENT . put ( a , null ) ; double x1 = toNumber ( elem , readAttribute ( elem , _STR , _STR ) ) ; double y1 = toNumber ( elem , readAttribute ( elem , _STR , _STR ) ) ; double x2 = toNumber ( elem , readAttribute ( elem , _STR , _STR ) ) ; double y2 = toNumber ( elem , readAttribute ( elem , _STR , _STR ) ) ; Figure figure = factory . createLine ( x1 , y1 , x2 , y2 , a ) ; elementObjects . put ( elem , figure ) ; return figure ; }
public ListModel ( final Object [ ] items ) { for ( int i = _NUM ; i < items . length ; ++ i ) m_items . add ( items [ i ] ) ; }
public boolean isSetCallType ( ) { return __isset_bit_vector . get ( __CALLTYPE_ISSET_ID ) ; }
private IBuffer mapSource ( SourceMapper mapper , IBinaryType info , IClassFile bufferOwner ) { char [ ] contents = mapper . findSource ( getType ( ) , info ) ; if ( contents != null ) { IBuffer buffer = BufferManager . createBuffer ( bufferOwner ) ; if ( buffer == null ) return null ; BufferManager bufManager = getBufferManager ( ) ; bufManager . addBuffer ( buffer ) ; if ( buffer . getCharacters ( ) == null ) { buffer . setContents ( contents ) ; } buffer . addBufferChangedListener ( this ) ; mapper . mapSource ( getOuterMostEnclosingType ( ) , contents , info ) ; return buffer ; } else { IBuffer buffer = BufferManager . createNullBuffer ( bufferOwner ) ; if ( buffer == null ) return null ; BufferManager bufManager = getBufferManager ( ) ; bufManager . addBuffer ( buffer ) ; buffer . addBufferChangedListener ( this ) ; return buffer ; } }
public JFileDataStoreChooser ( Shell parent , int style , final List < String > extensions ) { this ( parent , style , associations ( extensions ) ) ; }
private void computeStaticLoadMetrics ( AccessProfile accessProfile ) throws BaseCollectionException { URI storageSystemId = accessProfile . getSystemId ( ) ; StorageSystem storageSystem = null ; try { storageSystem = _dbClient . queryObject ( StorageSystem . class , storageSystemId ) ; _logger . info ( _STR , storageSystem . getLabel ( ) ) ; VNXeApiClient client = getVnxUnityClient ( accessProfile ) ; List < VNXeNasServer > nasServers = client . getNasServers ( ) ; for ( VNXeNasServer nasServer : nasServers ) { if ( ( nasServer . getMode ( ) == VNXeNasServer . NasServerModeEnum . DESTINATION ) || nasServer . getIsReplicationDestination ( ) ) { _logger . debug ( _STR ) ; continue ; } if ( nasServer . getIsSystem ( ) ) { continue ; } VirtualNAS virtualNAS = findvNasByNativeId ( storageSystem , nasServer . getId ( ) ) ; if ( virtualNAS != null ) { _logger . info ( _STR , nasServer . getName ( ) ) ; StringMap dbMetrics = virtualNAS . getMetrics ( ) ; if ( dbMetrics == null ) { dbMetrics = new StringMap ( ) ; } StringMap tmpDbMetrics = populateDbMetrics ( nasServer , client ) ; dbMetrics . putAll ( tmpDbMetrics ) ; virtualNAS . setMetrics ( dbMetrics ) ; _dbClient . updateObject ( virtualNAS ) ; } } } catch ( Exception e ) { _logger . error ( _STR , storageSystemId , e ) ; } }
public final short readShort ( ) throws java . io . IOException { readFully ( scratch , _NUM , _NUM ) ; return ( short ) ( ( scratch [ _NUM ] << _NUM ) | ( scratch [ _NUM ] & _NUM ) ) ; }
public ReplicationJob createJobForCopyPartition ( long auditLogId , long auditLogEntryCreateTime , HiveObjectSpec spec ) throws StateUpdateException { Map < String , String > extras = new HashMap < > ( ) ; extras . put ( PersistedJobInfo . AUDIT_LOG_ID_EXTRAS_KEY , Long . toString ( auditLogId ) ) ; extras . put ( PersistedJobInfo . AUDIT_LOG_ENTRY_CREATE_TIME_KEY , Long . toString ( auditLogEntryCreateTime ) ) ; List < String > partitionNames = new ArrayList < > ( ) ; partitionNames . add ( spec . getPartitionName ( ) ) ; ReplicationOperation replicationOperation = ReplicationOperation . COPY_PARTITION ; PersistedJobInfo persistedJobInfo = jobInfoStore . resilientCreate ( replicationOperation , ReplicationStatus . PENDING , Optional . empty ( ) , srcCluster . getName ( ) , spec , partitionNames , Optional . empty ( ) , Optional . empty ( ) , Optional . empty ( ) , extras ) ; ReplicationTask replicationTask = new CopyPartitionTask ( conf , destinationObjectFactory , objectConflictHandler , srcCluster , destCluster , spec , Optional . < Path > empty ( ) , Optional . < Path > empty ( ) , directoryCopier , _BOOL ) ; return new ReplicationJob ( conf , replicationTask , onStateChangeHandler , persistedJobInfo ) ; }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( _STR ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
public static void main ( String ... args ) throws Exception { String [ ] pages = { _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR } ; StringBuilder buff = new StringBuilder ( ) ; for ( String fileName : pages ) { String text = getContent ( fileName ) ; for ( String page : pages ) { text = StringUtils . replaceAll ( text , page + _STR , _STR ) ; } text = disableRailroads ( text ) ; text = removeHeaderFooter ( fileName , text ) ; buff . append ( text ) ; } String finalText = buff . toString ( ) ; File output = new File ( BASE_DIR , _STR ) ; PrintWriter writer = new PrintWriter ( new FileWriter ( output ) ) ; writer . println ( _STR + _STR ) ; writer . println ( _STR ) ; writer . println ( _STR + _STR ) ; writer . println ( _STR ) ; writer . println ( _STR + Constants . getFullVersion ( ) + _STR ) ; writer . println ( finalText ) ; writer . println ( _STR ) ; writer . close ( ) ; }
public static Map < String , Object > findOrders ( DispatchContext dctx , Map < String , ? extends Object > context ) { return findOrders ( dctx , context , _BOOL ) ; }
public static boolean isFileExist ( String filePath ) { if ( StringUtils . isBlank ( filePath ) ) { return _BOOL ; } File file = new File ( filePath ) ; return ( file . exists ( ) && file . isFile ( ) ) ; }
public static PronghornStage findStageByPath ( GraphManager m , int ... path ) { int ordinal = path [ _NUM ] ; int i = _NUM ; int limit = m . stageIdToStage . length ; while ( i < limit ) { if ( null != m . stageIdToStage [ i ] ) { if ( - _NUM == m . multInputIds [ m . stageIdToInputsBeginIdx [ m . stageIdToStage [ i ] . stageId ] ] ) { if ( -- ordinal <= _NUM ) { return findStageByPath ( m , m . stageIdToStage [ i ] , _NUM , path ) ; } } } i ++ ; } throw new UnsupportedOperationException ( _STR + path [ _NUM ] ) ; }
public static double [ ] calculateTStats ( double [ ] coef , double [ ] stderror , int k ) { double [ ] result = new double [ k ] ; for ( int i = _NUM ; i < k ; i ++ ) { result [ i ] = coef [ i ] / stderror [ i ] ; } return result ; }
static void runBootstrappers ( final CoreEarlyComponent early , final List < HeroicBootstrap > bootstrappers ) throws Exception { for ( final HeroicBootstrap bootstrap : bootstrappers ) { try { bootstrap . run ( early ) ; } catch ( Exception e ) { throw new Exception ( _STR + bootstrap , e ) ; } } }
public static byte [ ] checkIndexHeaderID ( DataInput in , byte [ ] expectedID ) throws IOException { byte id [ ] = new byte [ StringHelper . ID_LENGTH ] ; in . readBytes ( id , _NUM , id . length ) ; if ( ! Arrays . equals ( id , expectedID ) ) { throw new CorruptIndexException ( _STR + StringHelper . idToString ( expectedID ) + _STR + StringHelper . idToString ( id ) , in ) ; } return id ; }
public byte [ ] toByteArray ( ) { byte [ ] b = output . toByteArray ( ) ; ByteArray . write16bit ( numOfEntries , b , _NUM ) ; return b ; }
protected void saveBuffer ( String name ) { StringBuffer sb = m_History . getNamedBuffer ( name ) ; if ( sb != null ) { if ( m_SaveOut . save ( sb ) ) { m_Log . logMessage ( _STR ) ; } } }
public List < Recommendation > scheduleStorage ( VirtualArray srcVarray , Set < URI > requestedVPlexSystems , URI srcStorageSystem , VirtualPool srcVpool , boolean isHARequest , VirtualArray requestedHaVarray , VirtualPool haVpool , VirtualPoolCapabilityValuesWrapper capabilities , Project project , VpoolUse vpoolUse , Map < VpoolUse , List < Recommendation > > currentRecommendations ) { _log . info ( _STR ) ; if ( ! isHARequest ) { return scheduleStorageForLocalVPLEXVolume ( srcVarray , requestedVPlexSystems , srcStorageSystem , srcVpool , capabilities , project , vpoolUse , currentRecommendations ) ; } else { return scheduleStorageForDistributedVPLEXVolume ( srcVarray , requestedVPlexSystems , srcStorageSystem , srcVpool , requestedHaVarray , haVpool , capabilities , project , vpoolUse , currentRecommendations ) ; } }
@ NotNull public static List < String > completeRelativePath ( @ NotNull String baseDir , @ NotNull String shownBaseDir , @ NotNull String relativePath ) { List < String > result = Lists . newLinkedList ( ) ; String bashBaseDir = OSUtil . toBashCompatible ( baseDir ) ; for ( String path : completeAbsolutePath ( baseDir + File . separator + relativePath , Predicates . < File > alwaysTrue ( ) ) ) { if ( path . startsWith ( bashBaseDir ) ) { result . add ( shownBaseDir + path . substring ( bashBaseDir . length ( ) ) ) ; } } return result ; }
protected boolean isFileSpecifyingModuleSpecifier ( String specifier ) { return specifier . length ( ) > _NUM && specifier . charAt ( specifier . length ( ) - _NUM ) != IPath . SEPARATOR ; }
private void insertExpectedPoolSettingsPerTier ( CIMObjectPath capabilitiesPath , Map < String , Object > keyMap ) { List < String > expectedPoolSettingsTier = ( List < String > ) keyMap . get ( Constants . VNXPOOLCAPABILITIES_TIER ) ; expectedPoolSettingsTier . add ( capabilitiesPath . toString ( ) + Constants . HYPHEN + Constants . NO_DATA_MOVEMENT ) ; expectedPoolSettingsTier . add ( capabilitiesPath . toString ( ) + Constants . HYPHEN + Constants . AUTO_TIER ) ; expectedPoolSettingsTier . add ( capabilitiesPath . toString ( ) + Constants . HYPHEN + Constants . HIGH_AVAILABLE_TIER ) ; expectedPoolSettingsTier . add ( capabilitiesPath . toString ( ) + Constants . HYPHEN + Constants . LOW_AVAILABLE_TIER ) ; expectedPoolSettingsTier . add ( capabilitiesPath . toString ( ) + Constants . HYPHEN + Constants . START_HIGH_THEN_AUTO_TIER ) ; }
private static final void transferStreams ( InputStream source , OutputStream destination , String path , IProgressMonitor monitor ) throws CoreException { monitor = Policy . monitorFor ( monitor ) ; try { synchronized ( buffer ) { while ( _BOOL ) { int bytesRead = - _NUM ; try { bytesRead = source . read ( buffer ) ; } catch ( IOException e ) { String msg = NLS . bind ( Messages . failedReadDuringWrite , path ) ; Policy . error ( EFS . ERROR_READ , msg , e ) ; } try { if ( bytesRead == - _NUM ) { destination . close ( ) ; break ; } destination . write ( buffer , _NUM , bytesRead ) ; } catch ( IOException e ) { String msg = NLS . bind ( Messages . couldNotWrite , path ) ; Policy . error ( EFS . ERROR_WRITE , msg , e ) ; } monitor . worked ( _NUM ) ; } } } finally { Policy . safeClose ( source ) ; Policy . safeClose ( destination ) ; } }
private int pathPositionAtLevel ( int orgUnitLevel ) { return ( orgUnitLevel - _NUM ) * _NUM + _NUM ; }
private int makeAvailable ( ) { if ( pos != - _NUM ) { return _NUM ; } total += tail - head - pad ; System . arraycopy ( buffer , tail - pad , buffer , _NUM , pad ) ; head = _NUM ; tail = pad ; for ( ; ; ) { int bytesRead = _NUM ; try { bytesRead = input . read ( buffer , tail , bufSize - tail ) ; } catch ( IOException e ) { throw new RuntimeException ( _STR ) ; } if ( bytesRead == - _NUM ) { final String msg = _STR ; throw new MalformedStreamException ( msg ) ; } tail += bytesRead ; findSeparator ( ) ; int av = available ( ) ; if ( av > _NUM || pos != - _NUM ) { return av ; } } }
protected void addNumericTrainClass ( double classValue , double weight ) { if ( classValue > m_MaxTarget ) { m_MaxTarget = classValue ; } if ( classValue < m_MinTarget ) { m_MinTarget = classValue ; } if ( m_TrainClassVals == null ) { m_TrainClassVals = new double [ _NUM ] ; m_TrainClassWeights = new double [ _NUM ] ; } if ( m_NumTrainClassVals == m_TrainClassVals . length ) { double [ ] temp = new double [ m_TrainClassVals . length * _NUM ] ; System . arraycopy ( m_TrainClassVals , _NUM , temp , _NUM , m_TrainClassVals . length ) ; m_TrainClassVals = temp ; temp = new double [ m_TrainClassWeights . length * _NUM ] ; System . arraycopy ( m_TrainClassWeights , _NUM , temp , _NUM , m_TrainClassWeights . length ) ; m_TrainClassWeights = temp ; } m_TrainClassVals [ m_NumTrainClassVals ] = classValue ; m_TrainClassWeights [ m_NumTrainClassVals ] = weight ; m_NumTrainClassVals ++ ; }
private List < Group > parseGroups ( JSONArray groups , String groupType ) throws JSONException , AdeUsageException { if ( groups . length ( ) == _NUM ) throw new AdeUsageException ( _STR + groupType ) ; List < Group > currentGroups = new ArrayList < Group > ( ) ; for ( int i = _NUM ; i < groups . length ( ) ; i ++ ) { JSONObject group = groups . getJSONObject ( i ) ; String name = group . getString ( _STR ) ; String dataType = group . getString ( _STR ) ; short evalOrder = group . getShort ( _STR ) ; String ruleName = group . getString ( _STR ) ; if ( ! verifyStringParam ( name , _NUM , _STR ) || name . equalsIgnoreCase ( _STR ) || ! validateDataType ( dataType ) || evalOrder < _NUM || ! verifyStringParam ( ruleName , _NUM , _STR ) ) { throw new AdeUsageException ( _STR + groupType + _STR ) ; } currentGroups . add ( new Group ( name , GroupType . valueOf ( groupType ) , DataType . valueOf ( dataType . toUpperCase ( ) ) , evalOrder , ruleName ) ) ; } validateEvaluationOrderAndName ( currentGroups ) ; return currentGroups ; }
private void translateMatrixAfterRotate ( int axis , float trans , float prevImageSize , float imageSize , int prevViewSize , int viewSize , int drawableSize ) { if ( imageSize < viewSize ) { m [ axis ] = ( viewSize - ( drawableSize * m [ Matrix . MSCALE_X ] ) ) * _NUM ; } else if ( trans > _NUM ) { m [ axis ] = - ( ( imageSize - viewSize ) * _NUM ) ; } else { float percentage = ( Math . abs ( trans ) + ( _NUM * prevViewSize ) ) / prevImageSize ; m [ axis ] = - ( ( percentage * imageSize ) - ( viewSize * _NUM ) ) ; } }
public DoubleFft1d ( int n ) { if ( n < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } this . n = n ; if ( ! ConcurrencyUtils . isPowerOf2 ( n ) ) { if ( getReminder ( n , factors ) >= _NUM ) { plan = Plans . BLUESTEIN ; nBluestein = ConcurrencyUtils . nextPow2 ( n * _NUM - _NUM ) ; bk1 = new double [ _NUM * nBluestein ] ; bk2 = new double [ _NUM * nBluestein ] ; this . ip = new int [ _NUM + ( int ) Math . ceil ( _NUM + ( _NUM << ( int ) ( Math . log ( nBluestein + _NUM ) / Math . log ( _NUM ) ) / _NUM ) ) ] ; this . w = new double [ nBluestein ] ; int twon = _NUM * nBluestein ; nw = ip [ _NUM ] ; if ( twon > ( nw << _NUM ) ) { nw = twon > > _NUM ; makewt ( nw ) ; } nc = ip [ _NUM ] ; if ( nBluestein > ( nc << _NUM ) ) { nc = nBluestein > > _NUM ; makect ( nc , w , nw ) ; } bluesteini ( ) ; } else { plan = Plans . MIXED_RADIX ; wtable = new double [ _NUM * n + _NUM ] ; wtable_r = new double [ _NUM * n + _NUM ] ; cffti ( ) ; rffti ( ) ; } } else { plan = Plans . SPLIT_RADIX ; this . ip = new int [ _NUM + ( int ) Math . ceil ( _NUM + ( _NUM << ( int ) ( Math . log ( n + _NUM ) / Math . log ( _NUM ) ) / _NUM ) ) ] ; this . w = new double [ n ] ; int twon = _NUM * n ; nw = ip [ _NUM ] ; if ( twon > ( nw << _NUM ) ) { nw = twon > > _NUM ; makewt ( nw ) ; } nc = ip [ _NUM ] ; if ( n > ( nc << _NUM ) ) { nc = n > > _NUM ; makect ( nc , w , nw ) ; } } }
@ Override public void dragGestureRecognized ( DragGestureEvent evt ) { DragEntry dragEntry = kseFrame . dragSelectedEntry ( ) ; if ( dragEntry == null ) { return ; } ImageIcon icon = dragEntry . getImage ( ) ; Toolkit toolkit = Toolkit . getDefaultToolkit ( ) ; Dimension dim = toolkit . getBestCursorSize ( icon . getIconWidth ( ) , icon . getIconHeight ( ) ) ; BufferedImage buffImage = new BufferedImage ( dim . width , dim . height , BufferedImage . TYPE_INT_ARGB_PRE ) ; icon . paintIcon ( evt . getComponent ( ) , buffImage . getGraphics ( ) , _NUM , _NUM ) ; cursor = toolkit . createCustomCursor ( buffImage , new Point ( _NUM , _NUM ) , _STR ) ; evt . startDrag ( cursor , new KeyStoreEntryTransferable ( dragEntry ) , this ) ; }
public static boolean isIdentifierHelperChar ( char ch ) { return _STR == ch || _STR == ch || _STR == ch || _STR == ch ; }
public void addHeader ( String line ) { header . add ( line ) ; }
public static IAddress loadAddress ( final ResultSet resultSet , final String columnName ) throws SQLException { Preconditions . checkNotNull ( resultSet , _STR ) ; Preconditions . checkNotNull ( columnName , _STR ) ; final String addressString = readString ( resultSet , columnName ) ; return resultSet . wasNull ( ) ? null : new CAddress ( new BigInteger ( addressString ) ) ; }
private static String encode ( String stringToEncode ) { String encoded ; try { encoded = URLEncoder . encode ( stringToEncode , UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { throw new MCApiRuntimeException ( e ) ; } encoded = encoded . replace ( _STR , _STR ) ; encoded = encoded . replace ( _STR , _STR ) ; encoded = encoded . replace ( _STR , _STR ) ; return encoded ; }
public static String toGetUrl ( String url , Bundle params ) { if ( params != null ) { if ( ! url . endsWith ( _STR ) ) { url = url + _STR ; } for ( String key : params . keySet ( ) ) { url = url + key + _STR + params . getString ( key ) + _STR ; } } return url ; }
public void namespaceAfterStartElement ( String prefix , String uri ) throws SAXException { if ( m_firstTagNotEmitted && m_firstElementURI == null && m_firstElementName != null ) { String prefix1 = getPrefixPart ( m_firstElementName ) ; if ( prefix1 == null && EMPTYSTRING . equals ( prefix ) ) { m_firstElementURI = uri ; } } startPrefixMapping ( prefix , uri , _BOOL ) ; }
protected static String guessType ( File file ) { String name = file . getName ( ) ; String suffix = name . substring ( name . lastIndexOf ( _STR ) + _NUM ) ; return mimeMap . get ( suffix . toLowerCase ( Locale . ROOT ) ) ; }
public void testAdvanceAllTerms ( ) throws Exception { List < String > termsList = new ArrayList < > ( ) ; termsList . addAll ( Arrays . asList ( commonTerms ) ) ; termsList . addAll ( Arrays . asList ( mediumTerms ) ) ; termsList . addAll ( Arrays . asList ( rareTerms ) ) ; String terms [ ] = termsList . toArray ( new String [ _NUM ] ) ; for ( int amount = _NUM ; amount < _NUM ; amount += _NUM ) { for ( int minNrShouldMatch = _NUM ; minNrShouldMatch <= terms . length ; minNrShouldMatch ++ ) { Scorer expected = scorer ( terms , minNrShouldMatch , Mode . DOC_VALUES ) ; Scorer actual = scorer ( terms , minNrShouldMatch , Mode . SCORER ) ; assertAdvance ( expected , actual , amount ) ; expected = scorer ( terms , minNrShouldMatch , Mode . DOC_VALUES ) ; actual = scorer ( terms , minNrShouldMatch , Mode . BULK_SCORER ) ; assertAdvance ( expected , actual , amount ) ; } } }
public boolean isPublic ( ) { return Modifier . isPublic ( getAccessFlags ( ) ) ; }
public boolean releaseEncumbranceBudget ( final Map < String , Object > detailsMap ) { if ( detailsMap == null ) throw new ValidationException ( Arrays . asList ( new ValidationError ( _STR , _STR ) ) ) ; detailsMap . put ( Constants . CONSUMEORRELEASE , _BOOL ) ; final BigDecimal bd = getDetails ( detailsMap ) ; return bd . intValue ( ) == _NUM ; }
protected Transferable createLocaleTransferable ( long [ ] formats ) throws IOException { return null ; }
public void putLength ( int len ) throws IOException { if ( len < _NUM ) { write ( ( byte ) len ) ; } else if ( len < ( _NUM << _NUM ) ) { write ( ( byte ) _NUM ) ; write ( ( byte ) len ) ; } else if ( len < ( _NUM << _NUM ) ) { write ( ( byte ) _NUM ) ; write ( ( byte ) ( len > > _NUM ) ) ; write ( ( byte ) len ) ; } else if ( len < ( _NUM << _NUM ) ) { write ( ( byte ) _NUM ) ; write ( ( byte ) ( len > > _NUM ) ) ; write ( ( byte ) ( len > > _NUM ) ) ; write ( ( byte ) len ) ; } else { write ( ( byte ) _NUM ) ; write ( ( byte ) ( len > > _NUM ) ) ; write ( ( byte ) ( len > > _NUM ) ) ; write ( ( byte ) ( len > > _NUM ) ) ; write ( ( byte ) len ) ; } }
public void putGenericFontFamily ( String familyName , Font font ) { genericFontFamilies . put ( familyName . toLowerCase ( ) , font ) ; }
private boolean writeReference ( Object value , NodeMap node ) { String name = get ( value ) ; int size = size ( ) ; if ( name != null ) { node . put ( refer , name ) ; return _BOOL ; } String unique = String . valueOf ( size ) ; node . put ( mark , unique ) ; put ( value , unique ) ; return _BOOL ; }
private NSObject parseData ( ) throws ParseException { NSObject obj = null ; skip ( ) ; if ( accept ( DATA_GSOBJECT_BEGIN_TOKEN ) ) { skip ( ) ; expect ( DATA_GSBOOL_BEGIN_TOKEN , DATA_GSDATE_BEGIN_TOKEN , DATA_GSINT_BEGIN_TOKEN , DATA_GSREAL_BEGIN_TOKEN ) ; if ( accept ( DATA_GSBOOL_BEGIN_TOKEN ) ) { skip ( ) ; expect ( DATA_GSBOOL_TRUE_TOKEN , DATA_GSBOOL_FALSE_TOKEN ) ; if ( accept ( DATA_GSBOOL_TRUE_TOKEN ) ) { obj = new NSNumber ( _BOOL ) ; } else { obj = new NSNumber ( _BOOL ) ; } skip ( ) ; } else if ( accept ( DATA_GSDATE_BEGIN_TOKEN ) ) { skip ( ) ; String dateString = readInputUntil ( DATA_END_TOKEN ) ; obj = new NSDate ( dateString ) ; } else if ( accept ( DATA_GSINT_BEGIN_TOKEN , DATA_GSREAL_BEGIN_TOKEN ) ) { skip ( ) ; String numberString = readInputUntil ( DATA_END_TOKEN ) ; obj = new NSNumber ( numberString ) ; } read ( DATA_END_TOKEN ) ; } else { String dataString = readInputUntil ( DATA_END_TOKEN ) ; dataString = dataString . replaceAll ( _STR , _STR ) ; int numBytes = dataString . length ( ) / _NUM ; byte [ ] bytes = new byte [ numBytes ] ; for ( int i = _NUM ; i < bytes . length ; i ++ ) { String byteString = dataString . substring ( i * _NUM , i * _NUM + _NUM ) ; int byteValue = Integer . parseInt ( byteString , _NUM ) ; bytes [ i ] = ( byte ) byteValue ; } obj = new NSData ( bytes ) ; skip ( ) ; } return obj ; }
public boolean empty ( ) { return individuals . size ( ) == _NUM ; }
@ Override public String format ( DateTimeFormatter formatter ) { Objects . requireNonNull ( formatter , _STR ) ; return formatter . format ( this ) ; }
public @ DottedClassName String toDottedClassName ( ) { return ClassName . toDottedClassName ( className ) ; }
public DAddExtensions ( JFrame parent , String title , X509ExtensionSet extensions , PublicKey authorityPublicKey , X500Name authorityCertName , BigInteger authorityCertSerialNumber , PublicKey subjectPublicKey ) { super ( parent , Dialog . ModalityType . DOCUMENT_MODAL ) ; setTitle ( res . getString ( _STR ) ) ; this . extensions = extensions ; this . authorityPublicKey = authorityPublicKey ; this . authorityCertName = authorityCertName ; this . authorityCertSerialNumber = authorityCertSerialNumber ; this . subjectPublicKey = subjectPublicKey ; initComponents ( ) ; }
private void playNext ( ) { if ( mediaType == Config . YOUTUBE_MEDIA_TYPE_VIDEO ) { seekVideo ( _NUM ) ; restartVideo ( ) ; return ; } if ( previousWasCalled ) { previousWasCalled = _BOOL ; iterator . next ( ) ; } if ( ! iterator . hasNext ( ) ) { iterator = youTubeVideos . listIterator ( ) ; } videoItem = iterator . next ( ) ; nextWasCalled = _BOOL ; playVideo ( ) ; }
public static < T > T invokeMethod ( Object obj , String name , Object ... params ) throws NoSuchMethodException { Class [ ] paramTypes = getParamTypes ( params ) ; final Class < ? > aClass = obj . getClass ( ) ; Method method ; try { method = aClass . getDeclaredMethod ( name , paramTypes ) ; } catch ( NoSuchMethodException e ) { method = aClass . getMethod ( name , paramTypes ) ; } method . setAccessible ( _BOOL ) ; try { return ( T ) method . invoke ( obj , params ) ; } catch ( IllegalAccessException | InvocationTargetException e ) { throw new RuntimeException ( e ) ; } }
public void addNodes ( NodeIterator iterator ) { if ( ! m_mutable ) throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NODESET_NOT_MUTABLE , null ) ) ; if ( null != iterator ) { Node obj ; while ( null != ( obj = iterator . nextNode ( ) ) ) { addElement ( obj ) ; } } }
public static RotateStream create ( Path path ) { synchronized ( _streams ) { WeakReference < RotateStream > ref = _streams . get ( path ) ; RotateStream stream = ref != null ? ref . get ( ) : null ; if ( stream == null ) { stream = new RotateStream ( path ) ; _streams . put ( path , new WeakReference < > ( stream ) ) ; } return stream ; } }
private void cleanUpHistory ( ) { if ( ! mHistoryOfNumbers . isEmpty ( ) && mHistoryOfNumbers . size ( ) >= MAX_HISTORY_SIZE ) { for ( int i = _NUM ; i < Math . max ( _NUM , MAX_HISTORY_SIZE / _NUM ) ; i ++ ) { mPreviousNumbers . remove ( mHistoryOfNumbers . removeFirst ( ) ) ; } } }
@ SuppressWarnings ( _STR ) protected void processStyledAttributes ( @ NonNull TypedArray a ) { float targetAspectRatioX = Math . abs ( a . getFloat ( R . styleable . ucrop_UCropView_ucrop_aspect_ratio_x , DEFAULT_ASPECT_RATIO ) ) ; float targetAspectRatioY = Math . abs ( a . getFloat ( R . styleable . ucrop_UCropView_ucrop_aspect_ratio_y , DEFAULT_ASPECT_RATIO ) ) ; if ( targetAspectRatioX == SOURCE_IMAGE_ASPECT_RATIO || targetAspectRatioY == SOURCE_IMAGE_ASPECT_RATIO ) { mTargetAspectRatio = SOURCE_IMAGE_ASPECT_RATIO ; } else { mTargetAspectRatio = targetAspectRatioX / targetAspectRatioY ; } }
public LogMessage ( String template , int code ) { this ( template , null , EMPTY_STRING_ARRAY , code , Optional . empty ( ) ) ; }
protected String action_translate ( String act_string , int act_pos , Hashtable label_map , Hashtable label_types ) { int id_start ; int pos ; int len ; String id_str ; boolean in_id ; StringBuffer result ; char buffer [ ] ; if ( act_string == null || act_string . length ( ) == _NUM ) return act_string ; len = act_string . length ( ) ; result = new StringBuffer ( len + _NUM ) ; buffer = new char [ len + _NUM ] ; act_string . getChars ( _NUM , len , buffer , _NUM ) ; buffer [ len ] = _STR ; in_id = _BOOL ; for ( pos = id_start = _NUM ; pos <= len ; pos ++ ) { if ( in_id ) { if ( ! is_id_char ( buffer [ pos ] ) ) { id_str = new String ( buffer , id_start , pos - id_start ) ; result . append ( label_translate ( id_str , act_pos , label_map , label_types ) ) ; if ( buffer [ pos ] != _STR ) result . append ( buffer , pos , _NUM ) ; in_id = _BOOL ; } else { } } else { if ( is_id_start ( buffer [ pos ] ) ) { in_id = _BOOL ; id_start = pos ; } else { if ( buffer [ pos ] != _STR ) result . append ( buffer , pos , _NUM ) ; } } } return result . toString ( ) ; }
public boolean canLoad ( ) { return _BOOL ; }
public boolean bool ( ) { return ( Double . isNaN ( m_val ) || ( m_val == _NUM ) ) ? _BOOL : _BOOL ; }
public String generateXML ( String sessionID , String versionName , long installAge , RequestData data ) throws RequestFailureException { XmlSerializer serializer = Xml . newSerializer ( ) ; StringWriter writer = new StringWriter ( ) ; try { serializer . setOutput ( writer ) ; serializer . startDocument ( _STR , _BOOL ) ; serializer . startTag ( null , _STR ) ; serializer . attribute ( null , _STR , _STR ) ; serializer . attribute ( null , _STR , _STR ) ; serializer . attribute ( null , _STR , _STR ) ; serializer . attribute ( null , _STR , _STR + data . getRequestID ( ) + _STR ) ; serializer . attribute ( null , _STR , _STR + sessionID + _STR ) ; serializer . attribute ( null , _STR , data . getInstallSource ( ) ) ; appendExtraAttributes ( _STR , serializer ) ; serializer . startTag ( null , _STR ) ; serializer . attribute ( null , _STR , _STR ) ; serializer . attribute ( null , _STR , Build . VERSION . RELEASE ) ; serializer . attribute ( null , _STR , _STR ) ; serializer . endTag ( null , _STR ) ; serializer . startTag ( null , _STR ) ; serializer . attribute ( null , _STR , getBrand ( ) ) ; serializer . attribute ( null , _STR , getClient ( ) ) ; serializer . attribute ( null , _STR , getAppId ( ) ) ; serializer . attribute ( null , _STR , versionName ) ; serializer . attribute ( null , _STR , _STR ) ; serializer . attribute ( null , _STR , getLanguage ( ) ) ; serializer . attribute ( null , _STR , String . valueOf ( installAge ) ) ; serializer . attribute ( null , _STR , getAdditionalParameters ( ) ) ; appendExtraAttributes ( _STR , serializer ) ; if ( data . isSendInstallEvent ( ) ) { serializer . startTag ( null , _STR ) ; serializer . attribute ( null , _STR , _STR ) ; serializer . attribute ( null , _STR , _STR ) ; serializer . endTag ( null , _STR ) ; } else { serializer . startTag ( null , _STR ) ; serializer . endTag ( null , _STR ) ; serializer . startTag ( null , _STR ) ; serializer . attribute ( null , _STR , _STR ) ; serializer . endTag ( null , _STR ) ; } serializer . endTag ( null , _STR ) ; serializer . endTag ( null , _STR ) ; serializer . endDocument ( ) ; } catch ( IOException e ) { throw new RequestFailureException ( _STR , e ) ; } catch ( IllegalArgumentException e ) { throw new RequestFailureException ( _STR , e ) ; } catch ( IllegalStateException e ) { throw new RequestFailureException ( _STR , e ) ; } return writer . toString ( ) ; }
protected boolean strictParseBoolean ( String s ) { if ( s == null || s . isEmpty ( ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( s . equalsIgnoreCase ( _STR ) ) { return _BOOL ; } if ( s . equalsIgnoreCase ( _STR ) ) { return _BOOL ; } throw new IllegalArgumentException ( _STR + s ) ; }
@ Override public boolean eIsSet ( int featureID ) { switch ( featureID ) { case FunctionblockPackage . EVENT__NAME : return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT . equals ( name ) ; case FunctionblockPackage . EVENT__PROPERTIES : return properties != null && ! properties . isEmpty ( ) ; } return super . eIsSet ( featureID ) ; }
public String format ( DateTimeFormatter formatter ) { Objects . requireNonNull ( formatter , _STR ) ; return formatter . format ( this ) ; }
private void initializeSourceCodeMap ( String adaptedContent ) { sourceCodeWithLine = new LinkedHashMap < > ( ) ; int lineNumber = _NUM ; StringReader sr = new StringReader ( adaptedContent ) ; BufferedReader br = new BufferedReader ( sr ) ; String line ; try { while ( ( line = br . readLine ( ) ) != null ) { sourceCodeWithLine . put ( lineNumber , line ) ; lineNumber ++ ; } } catch ( IOException ex ) { LOGGER . error ( _STR + ex . getMessage ( ) ) ; } }
@ Override public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { if ( oldVersion != newVersion ) { if ( newVersion == _NUM && oldVersion == _NUM ) { WXLogUtils . d ( TAG_STORAGE , _STR + oldVersion + _STR + newVersion ) ; boolean updateResult = _BOOL ; try { long start = System . currentTimeMillis ( ) ; db . beginTransaction ( ) ; String SQL_ADD_COLUMN_TIMESTAMP = _STR + TABLE_STORAGE + _STR + COLUMN_TIMESTAMP + _STR ; WXLogUtils . d ( TAG_STORAGE , _STR + SQL_ADD_COLUMN_TIMESTAMP ) ; db . execSQL ( SQL_ADD_COLUMN_TIMESTAMP ) ; String SQL_ADD_COLUMN_PERSISTENT = _STR + TABLE_STORAGE + _STR + COLUMN_PERSISTENT + _STR ; WXLogUtils . d ( TAG_STORAGE , _STR + SQL_ADD_COLUMN_PERSISTENT ) ; db . execSQL ( SQL_ADD_COLUMN_PERSISTENT ) ; String SQL_UPDATE_TABLE = _STR + TABLE_STORAGE + _STR + COLUMN_TIMESTAMP + _STR + sDateFormatter . format ( new Date ( ) ) + _STR + COLUMN_PERSISTENT + _STR ; WXLogUtils . d ( TAG_STORAGE , _STR + SQL_UPDATE_TABLE ) ; db . execSQL ( SQL_UPDATE_TABLE ) ; db . setTransactionSuccessful ( ) ; long time = System . currentTimeMillis ( ) - start ; WXLogUtils . d ( TAG_STORAGE , _STR + time + _STR ) ; } catch ( Exception e ) { WXLogUtils . d ( TAG_STORAGE , _STR + oldVersion + _STR + newVersion + _STR + e . getMessage ( ) ) ; updateResult = _BOOL ; } finally { db . endTransaction ( ) ; } if ( ! updateResult ) { WXLogUtils . d ( TAG_STORAGE , _STR ) ; deleteDB ( ) ; onCreate ( db ) ; } } else { deleteDB ( ) ; onCreate ( db ) ; } } }
public Matrix U ( ) { return U . clone ( ) ; }
protected Set < String > allowedDuplicateErrorCodes ( ) { return Collections . emptySet ( ) ; }
private boolean isFieldVisited ( Object object , Field objectField , Field field ) { Map < String , Set < String > > bag = visitedFields . get ( object ) ; if ( bag == null ) { return _BOOL ; } String objectFiledKey = objectField == null ? _STR : objectField . toGenericString ( ) ; Set < String > fields = bag . get ( objectFiledKey ) ; return fields != null && fields . contains ( field ) ; }
public void removeFromCompletedList ( DownloadInfoRunnable downloadInfoRunnable ) { mCompletedList . remove ( downloadInfoRunnable ) ; }
protected void addShingledPhraseQueries ( final BooleanQuery mainQuery , final List < Clause > clauses , final Collection < FieldParams > fields , int shingleSize , final float tiebreaker , final int slop ) throws SyntaxError { if ( null == fields || fields . isEmpty ( ) || null == clauses || clauses . size ( ) < shingleSize ) return ; if ( _NUM == shingleSize ) shingleSize = clauses . size ( ) ; final int lastClauseIndex = shingleSize - _NUM ; StringBuilder userPhraseQuery = new StringBuilder ( ) ; for ( int i = _NUM ; i < clauses . size ( ) - lastClauseIndex ; i ++ ) { userPhraseQuery . append ( _STR ) ; for ( int j = _NUM ; j <= lastClauseIndex ; j ++ ) { userPhraseQuery . append ( clauses . get ( i + j ) . val ) ; userPhraseQuery . append ( _STR ) ; } userPhraseQuery . append ( _STR ) ; userPhraseQuery . append ( _STR ) ; } ExtendedSolrQueryParser pp = createEdismaxQueryParser ( this , IMPOSSIBLE_FIELD_NAME ) ; pp . addAlias ( IMPOSSIBLE_FIELD_NAME , tiebreaker , getFieldBoosts ( fields ) ) ; pp . setPhraseSlop ( slop ) ; pp . setRemoveStopFilter ( _BOOL ) ; pp . makeDismax = _BOOL ; pp . minClauseSize = _NUM ; Query phrase = pp . parse ( userPhraseQuery . toString ( ) ) ; if ( phrase != null ) { mainQuery . add ( phrase , BooleanClause . Occur . SHOULD ) ; } }
public String asXmlId ( ) { return DatatypeConverter . printHexBinary ( tokenDigest . getValue ( ) ) ; }
private void updateInfo ( ) { m_updating = _BOOL ; nameField . setText ( m_cc . getName ( ) ) ; appsHostField . setText ( m_cc . getAppsHost ( ) ) ; appsPortField . setText ( String . valueOf ( m_cc . getAppsPort ( ) ) ) ; bTestApps . setIcon ( getStatusIcon ( m_cc . isAppsServerOK ( _BOOL ) ) ) ; boolean rw = CConnection . isServerEmbedded ( ) ? _BOOL : ! m_cc . isAppsServerOK ( _BOOL ) ; dbTypeLabel . setReadWrite ( rw ) ; dbTypeField . setReadWrite ( rw ) ; dbTypeField . setSelectedItem ( m_cc . getType ( ) ) ; hostLabel . setReadWrite ( rw ) ; hostField . setReadWrite ( rw ) ; hostField . setText ( m_cc . getDbHost ( ) ) ; portLabel . setReadWrite ( rw ) ; dbPortField . setReadWrite ( rw ) ; dbPortField . setText ( String . valueOf ( m_cc . getDbPort ( ) ) ) ; sidLabel . setReadWrite ( rw ) ; sidField . setReadWrite ( rw ) ; sidField . setText ( m_cc . getDbName ( ) ) ; dbUidLabel . setReadWrite ( rw ) ; dbUidField . setReadWrite ( rw ) ; dbUidField . setText ( m_cc . getDbUid ( ) ) ; dbPwdField . setEditable ( rw ) ; dbPwdField . setText ( m_cc . getDbPwd ( ) ) ; cbBequeath . setReadWrite ( rw ) ; cbBequeath . setEnabled ( m_cc . isOracle ( ) ) ; cbBequeath . setSelected ( m_cc . isBequeath ( ) ) ; boolean fwEnabled = rw && m_cc . isViaFirewall ( ) && m_cc . isOracle ( ) ; cbFirewall . setReadWrite ( rw && m_cc . isOracle ( ) ) ; cbFirewall . setSelected ( m_cc . isViaFirewall ( ) ) ; fwHostLabel . setReadWrite ( fwEnabled ) ; fwHostField . setReadWrite ( fwEnabled ) ; fwHostField . setText ( m_cc . getFwHost ( ) ) ; fwPortLabel . setReadWrite ( fwEnabled ) ; fwPortField . setReadWrite ( fwEnabled ) ; fwPortField . setText ( String . valueOf ( m_cc . getFwPort ( ) ) ) ; bTestDB . setToolTipText ( m_cc . getConnectionURL ( ) ) ; bTestDB . setIcon ( getStatusIcon ( m_cc . isDatabaseOK ( ) ) ) ; m_updating = _BOOL ; }
public void createSnapshot ( ) throws BackupException { logger . debug ( _STR + this . snapshotName ) ; processHelper . exec ( _STR , lvcreateCmd ) ; }
public final Uri storeLogFile ( final LogFile logFile , final int sessionId ) { final ContentValues values = new ContentValues ( ) ; values . put ( Schema . COL_MANUFACTURER , logFile . getManufacturer ( ) ) ; values . put ( Schema . COL_MODEL , logFile . getModel ( ) ) ; values . put ( Schema . COL_REVISION , logFile . getRevision ( ) ) ; values . put ( Schema . COL_SWID , logFile . getSwid ( ) ) ; values . put ( Schema . COL_SWVER , logFile . getSwVersion ( ) ) ; values . put ( Schema . COL_TIMESTAMP , System . currentTimeMillis ( ) ) ; values . put ( Schema . COL_SESSION_ID , sessionId ) ; return contentResolver . insert ( ContentProvider . CONTENT_URI_LOGFILE , values ) ; }
public Map < String , String > merge ( Map < String , String > curProps , Map < String , String > newProps ) throws IOException { Map < String , String > props = new HashMap < > ( newProps ) ; for ( Map . Entry < String , String > e : curProps . entrySet ( ) ) { String name = e . getKey ( ) ; String curValue = e . getValue ( ) ; if ( props . containsKey ( name ) ) { props . put ( name , curValue ) ; } } return props ; }
@ Override public void addFocusables ( ArrayList < View > views , int direction , int focusableMode ) { final int focusableCount = views . size ( ) ; final int descendantFocusability = getDescendantFocusability ( ) ; if ( descendantFocusability != FOCUS_BLOCK_DESCENDANTS ) { for ( int i = _NUM ; i < getChildCount ( ) ; i ++ ) { final View child = getChildAt ( i ) ; if ( child . getVisibility ( ) == VISIBLE ) { ItemInfo ii = infoForChild ( child ) ; if ( ii != null && ii . position == mCurItem ) { child . addFocusables ( views , direction , focusableMode ) ; } } } } if ( descendantFocusability != FOCUS_AFTER_DESCENDANTS || ( focusableCount == views . size ( ) ) ) { if ( ! isFocusable ( ) ) { return ; } if ( ( focusableMode & FOCUSABLES_TOUCH_MODE ) == FOCUSABLES_TOUCH_MODE && isInTouchMode ( ) && ! isFocusableInTouchMode ( ) ) { return ; } if ( views != null ) { views . add ( this ) ; } } }
public Builder deletePreferredLanguage ( ) { deleteFields . add ( _STR ) ; return this ; }
public void onPrepared ( MediaPlayer player ) { mState = State . PLAYING ; updateNotification ( String . format ( getString ( R . string . media_state_playing ) , mFile . getFileName ( ) ) ) ; if ( mMediaController != null ) { mMediaController . setEnabled ( _BOOL ) ; } player . seekTo ( mStartPosition ) ; configAndStartMediaPlayer ( ) ; if ( ! mPlayOnPrepared ) { processPauseRequest ( ) ; } if ( mMediaController != null ) { mMediaController . updatePausePlay ( ) ; } }
private void parseParameter ( String token , String value ) { if ( token != null && value != null ) { if ( token . equalsIgnoreCase ( NONCE_TOKEN ) ) { mNonce = value ; return ; } if ( token . equalsIgnoreCase ( STALE_TOKEN ) ) { parseStale ( value ) ; return ; } if ( token . equalsIgnoreCase ( OPAQUE_TOKEN ) ) { mOpaque = value ; return ; } if ( token . equalsIgnoreCase ( QOP_TOKEN ) ) { mQop = value . toLowerCase ( ) ; return ; } if ( token . equalsIgnoreCase ( ALGORITHM_TOKEN ) ) { mAlgorithm = value . toLowerCase ( ) ; return ; } } }
public List < String > makeURLList ( String shard ) { List < String > urls = StrUtils . splitSmart ( shard , _STR , _BOOL ) ; for ( int i = _NUM ; i < urls . size ( ) ; i ++ ) { urls . set ( i , buildUrl ( urls . get ( i ) ) ) ; } if ( urls . size ( ) > _NUM ) Collections . shuffle ( urls , r ) ; return urls ; }
public void skip ( int n ) throws IOException { dis . skip ( n ) ; }
public void addContainer ( ImageContainer container ) { mContainers . add ( container ) ; }
public void toAllInRadius ( WorldServer world , Vec3d pos , double radius ) { double maxDistance = radius * radius + radius * radius + radius * radius ; toAll ( world . getPlayers ( EntityPlayerMP . class , null ) ) ; }
public static ECDHECryptography fromNamedCurveId ( int supportedGroupId ) { SupportedGroup group = SupportedGroup . fromId ( supportedGroupId ) ; if ( group == null ) { return null ; } else { try { return new ECDHECryptography ( group . name ( ) ) ; } catch ( GeneralSecurityException e ) { LOGGER . log ( Level . WARNING , _STR , new Object [ ] { group . name ( ) , e . getMessage ( ) } ) ; return null ; } } }
private boolean journalRebuildRequired ( ) { final int redundantOpCompactThreshold = _NUM ; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries . size ( ) ; }
private static void addHeader ( Message message , String name , String value ) { Map < String , List < String > > protocolHeaders = CastUtils . cast ( ( Map < ? , ? > ) message . get ( Message . PROTOCOL_HEADERS ) ) ; if ( protocolHeaders == null ) { protocolHeaders = new TreeMap < String , List < String > > ( String . CASE_INSENSITIVE_ORDER ) ; message . put ( Message . PROTOCOL_HEADERS , protocolHeaders ) ; } List < String > header = CastUtils . cast ( ( List < ? > ) protocolHeaders . get ( name ) ) ; if ( header == null ) { header = new ArrayList < String > ( ) ; protocolHeaders . put ( name , header ) ; } if ( header . size ( ) == _NUM ) { header . add ( value ) ; } else { header . set ( _NUM , header . get ( _NUM ) + _STR + value ) ; } }
private static void swilk ( boolean [ ] init , double [ ] x , int n , int n1 , int n2 , double [ ] a , double [ ] w , double [ ] pw , int [ ] ifault ) { pw [ _NUM ] = _NUM ; if ( w [ _NUM ] >= _NUM ) { w [ _NUM ] = _NUM ; } double an = n ; ifault [ _NUM ] = _NUM ; int nn2 = n / _NUM ; if ( n2 < nn2 ) { return ; } ifault [ _NUM ] = _NUM ; if ( n < _NUM ) { return ; } if ( ! init [ _NUM ] ) { if ( n == _NUM ) { a [ _NUM ] = SQRTH ; } else { double an25 = an + _NUM ; double summ2 = _NUM ; for ( int i = _NUM ; i <= n2 ; ++ i ) { a [ i ] = ppnd ( ( i - TH ) / an25 ) ; summ2 += a [ i ] * a [ i ] ; } summ2 *= _NUM ; double ssumm2 = Math . sqrt ( summ2 ) ; double rsn = _NUM / Math . sqrt ( an ) ; double a1 = poly ( C1 , _NUM , rsn ) - a [ _NUM ] / ssumm2 ; int i1 ; double fac ; if ( n > _NUM ) { i1 = _NUM ; double a2 = - a [ _NUM ] / ssumm2 + poly ( C2 , _NUM , rsn ) ; fac = Math . sqrt ( ( summ2 - _NUM * a [ _NUM ] * a [ _NUM ] - _NUM * a [ _NUM ] * a [ _NUM ] ) / ( _NUM - _NUM * a1 * a1 - _NUM * a2 * a2 ) ) ; a [ _NUM ] = a1 ; a [ _NUM ] = a2 ; } else { i1 = _NUM ; fac = Math . sqrt ( ( summ2 - _NUM * a [ _NUM ] * a [ _NUM ] ) / ( _NUM - _NUM * a1 * a1 ) ) ; a [ _NUM ] = a1 ; } for ( int i = i1 ; i <= nn2 ; ++ i ) { a [ i ] = - a [ i ] / fac ; } } init [ _NUM ] = _BOOL ; } if ( n1 < _NUM ) { return ; } int ncens = n - n1 ; ifault [ _NUM ] = _NUM ; if ( ncens < _NUM || ( ncens > _NUM && n < _NUM ) ) { return ; } ifault [ _NUM ] = _NUM ; double delta = ncens / an ; if ( delta > _NUM ) { return ; } double w1 , xx ; if ( w [ _NUM ] < _NUM ) { w1 = _NUM + w [ _NUM ] ; ifault [ _NUM ] = _NUM ; } else { ifault [ _NUM ] = _NUM ; double range = x [ n1 ] - x [ _NUM ] ; if ( range < SMALL ) { return ; } ifault [ _NUM ] = _NUM ; xx = x [ _NUM ] / range ; double sx = xx ; double sa = - a [ _NUM ] ; int j = n - _NUM ; for ( int i = _NUM ; i <= n1 ; ++ i ) { double xi = x [ i ] / range ; sx += xi ; if ( i != j ) { sa += sign ( _NUM , i - j ) * a [ Math . min ( i , j ) ] ; } xx = xi ; -- j ; } ifault [ _NUM ] = _NUM ; if ( n > _NUM ) { ifault [ _NUM ] = _NUM ; } sa /= n1 ; sx /= n1 ; double ssa = _NUM ; double ssx = _NUM ; double sax = _NUM ; j = n ; double asa ; for ( int i = _NUM ; i <= n1 ; ++ i ) { if ( i != j ) { asa = sign ( _NUM , i - j ) * a [ Math . min ( i , j ) ] - sa ; } else { asa = - sa ; } double xsx = x [ i ] / range - sx ; ssa += asa * asa ; ssx += xsx * xsx ; sax += asa * xsx ; -- j ; } double ssassx = Math . sqrt ( ssa * ssx ) ; w1 = ( ssassx - sax ) * ( ssassx + sax ) / ( ssa * ssx ) ; } w [ _NUM ] = _NUM - w1 ; if ( n == _NUM ) { pw [ _NUM ] = PI6 * ( Math . asin ( Math . sqrt ( w [ _NUM ] ) ) - STQR ) ; return ; } double y = Math . log ( w1 ) ; xx = Math . log ( an ) ; double m = _NUM ; double s = _NUM ; if ( n <= _NUM ) { double gamma = poly ( G , _NUM , an ) ; if ( y >= gamma ) { pw [ _NUM ] = SMALL ; return ; } y = - Math . log ( gamma - y ) ; m = poly ( C3 , _NUM , an ) ; s = Math . exp ( poly ( C4 , _NUM , an ) ) ; } else { m = poly ( C5 , _NUM , xx ) ; s = Math . exp ( poly ( C6 , _NUM , xx ) ) ; } if ( ncens > _NUM ) { double ld = - Math . log ( delta ) ; double bf = _NUM + xx * BF1 ; double z90f = Z90 + bf * Math . pow ( poly ( C7 , _NUM , Math . pow ( XX90 , xx ) ) , ld ) ; double z95f = Z95 + bf * Math . pow ( poly ( C8 , _NUM , Math . pow ( XX95 , xx ) ) , ld ) ; double z99f = Z99 + bf * Math . pow ( poly ( C9 , _NUM , xx ) , ld ) ; double zfm = ( z90f + z95f + z99f ) / _NUM ; double zsd = ( Z90 * ( z90f - zfm ) + Z95 * ( z95f - zfm ) + Z99 * ( z99f - zfm ) ) / ZSS ; double zbar = zfm - zsd * ZM ; m += zbar * s ; s *= zsd ; } pw [ _NUM ] = alnorm ( ( y - m ) / s , UPPER ) ; }
public String asString ( ) { StringBuilder buff = new StringBuilder ( ) ; for ( int i = _NUM ; i < arrayLevel ; i ++ ) { if ( refCount ) { buff . append ( _STR ) ; } buff . append ( _STR ) ; } if ( refCount ) { if ( ! classObj . isPrimitive ) { buff . append ( _STR ) ; } } buff . append ( classObj . toString ( ) ) ; if ( refCount ) { if ( ! classObj . isPrimitive ) { buff . append ( _STR ) ; } } for ( int i = _NUM ; i < arrayLevel ; i ++ ) { if ( refCount ) { buff . append ( _STR ) ; } else { if ( ! classObj . isPrimitive ) { buff . append ( _STR ) ; } } buff . append ( _STR ) ; } if ( ! refCount ) { if ( isObject ( ) ) { buff . append ( _STR ) ; } } return buff . toString ( ) ; }
public boolean recreateWorkspaceTable ( SQLiteDatabase db ) { db . beginTransaction ( ) ; try { Cursor c = db . query ( TABLE_WORKSPACE_SCREENS , new String [ ] { LauncherSettings . WorkspaceScreens . _ID } , null , null , null , null , LauncherSettings . WorkspaceScreens . SCREEN_RANK ) ; ArrayList < Long > sortedIDs = new ArrayList < Long > ( ) ; long maxId = _NUM ; try { while ( c . moveToNext ( ) ) { Long id = c . getLong ( _NUM ) ; if ( ! sortedIDs . contains ( id ) ) { sortedIDs . add ( id ) ; maxId = Math . max ( maxId , id ) ; } } } finally { c . close ( ) ; } db . execSQL ( _STR + TABLE_WORKSPACE_SCREENS ) ; addWorkspacesTable ( db , _BOOL ) ; int total = sortedIDs . size ( ) ; for ( int i = _NUM ; i < total ; i ++ ) { ContentValues values = new ContentValues ( ) ; values . put ( LauncherSettings . WorkspaceScreens . _ID , sortedIDs . get ( i ) ) ; values . put ( LauncherSettings . WorkspaceScreens . SCREEN_RANK , i ) ; addModifiedTime ( values ) ; db . insertOrThrow ( TABLE_WORKSPACE_SCREENS , null , values ) ; } db . setTransactionSuccessful ( ) ; mMaxScreenId = maxId ; } catch ( SQLException ex ) { Log . e ( TAG , ex . getMessage ( ) , ex ) ; return _BOOL ; } finally { db . endTransaction ( ) ; } return _BOOL ; }
public List < JsonObject > executeParametrizedStatement ( String statement , List < String > parameterNames , List < Object > parameterValues ) { JsonObject namedParams = JsonObject . create ( ) ; for ( int param = _NUM ; param < parameterNames . size ( ) ; param ++ ) { namedParams . put ( parameterNames . get ( param ) , parameterValues . get ( param ) ) ; } ParameterizedN1qlQuery query = N1qlQuery . parameterized ( statement , namedParams ) ; return executeQuery ( query ) ; }
public final T endAll ( ) { while ( ! tagStack . isEmpty ( ) ) { end ( ) ; } return getSelf ( ) ; }
public void entityReference ( String name ) throws org . xml . sax . SAXException { append ( m_doc . createEntityReference ( name ) ) ; }
public static Table createPartitionedTable ( Configuration conf , HiveMetastoreClient ms , HiveObjectSpec tableSpec , TableType tableType , Path warehouseRoot ) throws IOException , HiveMetastoreException { Path tableLocation = getPathForHiveObject ( warehouseRoot , tableSpec ) ; Table table = new Table ( ) ; table . setDbName ( tableSpec . getDbName ( ) ) ; table . setTableName ( tableSpec . getTableName ( ) ) ; Map < String , String > parameters = new HashMap < > ( ) ; parameters . put ( HiveParameterKeys . TLDT , Long . toString ( System . currentTimeMillis ( ) ) ) ; table . setParameters ( parameters ) ; table . setTableType ( tableType . toString ( ) ) ; List < FieldSchema > partitionCols = new ArrayList < > ( ) ; partitionCols . add ( new FieldSchema ( _STR , _STR , _STR ) ) ; partitionCols . add ( new FieldSchema ( _STR , _STR , _STR ) ) ; table . setPartitionKeys ( partitionCols ) ; StorageDescriptor sd = new StorageDescriptor ( ) ; List < FieldSchema > columns = new ArrayList < > ( ) ; columns . add ( new FieldSchema ( _STR , _STR , _STR ) ) ; sd . setCols ( columns ) ; if ( tableType == TableType . MANAGED_TABLE || tableType == TableType . EXTERNAL_TABLE ) { sd . setLocation ( tableLocation . toString ( ) ) ; } sd . setSerdeInfo ( new SerDeInfo ( _STR , _STR , new HashMap < > ( ) ) ) ; table . setSd ( sd ) ; if ( ! ms . existsDb ( table . getDbName ( ) ) ) { ms . createDatabase ( new Database ( table . getDbName ( ) , null , null , null ) ) ; } ms . createTable ( table ) ; return table ; }
private boolean linkLast ( Node < E > node ) { if ( count >= capacity ) return _BOOL ; Node < E > l = last ; node . prev = l ; last = node ; if ( first == null ) first = node ; else l . next = node ; ++ count ; notEmpty . signal ( ) ; return _BOOL ; }
void drawDivider ( Canvas canvas , Rect bounds , int childIndex ) { final Drawable divider = mDivider ; final boolean clipDivider = mClipDivider ; if ( ! clipDivider ) { divider . setBounds ( bounds ) ; } else { canvas . save ( ) ; canvas . clipRect ( bounds ) ; } divider . draw ( canvas ) ; if ( clipDivider ) { canvas . restore ( ) ; } }
protected FormSpec ( DefaultAlignment defaultAlignment , String encodedDescription ) { this ( defaultAlignment , Sizes . DEFAULT , NO_GROW ) ; parseAndInitValues ( encodedDescription . toLowerCase ( Locale . ENGLISH ) ) ; }
public static < T > List < T > decode ( InputStream data , Parser < T > parser ) throws IOException { CodedInputStream stream = CodedInputStream . newInstance ( data ) ; List < T > list = new ArrayList < > ( ) ; while ( ! stream . isAtEnd ( ) ) { int size = stream . readRawVarint32 ( ) ; byte [ ] element = stream . readRawBytes ( size ) ; T decoded = parser . parseFrom ( element ) ; list . add ( decoded ) ; } return list ; }
@ Override public void drawItem ( Graphics2D g2 , XYItemRendererState state , Rectangle2D dataArea , PlotRenderingInfo info , XYPlot plot , ValueAxis domainAxis , ValueAxis rangeAxis , XYDataset dataset , int series , int item , CrosshairState crosshairState , int pass ) { if ( ( ! getPlotLines ( ) ) || ( ( ! ( domainAxis instanceof CyclicNumberAxis ) ) && ( ! ( rangeAxis instanceof CyclicNumberAxis ) ) ) || ( item <= _NUM ) ) { super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , dataset , series , item , crosshairState , pass ) ; return ; } double xn = dataset . getXValue ( series , item - _NUM ) ; double yn = dataset . getYValue ( series , item - _NUM ) ; if ( Double . isNaN ( yn ) ) { super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , dataset , series , item , crosshairState , pass ) ; return ; } double [ ] x = new double [ _NUM ] ; double [ ] y = new double [ _NUM ] ; x [ _NUM ] = xn ; y [ _NUM ] = yn ; xn = dataset . getXValue ( series , item ) ; yn = dataset . getYValue ( series , item ) ; if ( Double . isNaN ( yn ) ) { return ; } x [ _NUM ] = xn ; y [ _NUM ] = yn ; double xcycleBound = Double . NaN ; double ycycleBound = Double . NaN ; boolean xBoundMapping = _BOOL , yBoundMapping = _BOOL ; CyclicNumberAxis cnax = null , cnay = null ; if ( domainAxis instanceof CyclicNumberAxis ) { cnax = ( CyclicNumberAxis ) domainAxis ; xcycleBound = cnax . getCycleBound ( ) ; xBoundMapping = cnax . isBoundMappedToLastCycle ( ) ; if ( ( x [ _NUM ] != x [ _NUM ] ) && ( ( xcycleBound >= x [ _NUM ] ) && ( xcycleBound <= x [ _NUM ] ) || ( xcycleBound >= x [ _NUM ] ) && ( xcycleBound <= x [ _NUM ] ) ) ) { double [ ] nx = new double [ _NUM ] ; double [ ] ny = new double [ _NUM ] ; nx [ _NUM ] = x [ _NUM ] ; nx [ _NUM ] = x [ _NUM ] ; ny [ _NUM ] = y [ _NUM ] ; ny [ _NUM ] = y [ _NUM ] ; nx [ _NUM ] = xcycleBound ; ny [ _NUM ] = ( y [ _NUM ] - y [ _NUM ] ) * ( xcycleBound - x [ _NUM ] ) / ( x [ _NUM ] - x [ _NUM ] ) + y [ _NUM ] ; x = nx ; y = ny ; } } if ( rangeAxis instanceof CyclicNumberAxis ) { cnay = ( CyclicNumberAxis ) rangeAxis ; ycycleBound = cnay . getCycleBound ( ) ; yBoundMapping = cnay . isBoundMappedToLastCycle ( ) ; if ( ( y [ _NUM ] != y [ _NUM ] ) && ( ( ycycleBound >= y [ _NUM ] ) && ( ycycleBound <= y [ _NUM ] ) || ( ycycleBound >= y [ _NUM ] ) && ( ycycleBound <= y [ _NUM ] ) ) ) { double [ ] nx = new double [ x . length + _NUM ] ; double [ ] ny = new double [ y . length + _NUM ] ; nx [ _NUM ] = x [ _NUM ] ; nx [ _NUM ] = x [ _NUM ] ; ny [ _NUM ] = y [ _NUM ] ; ny [ _NUM ] = y [ _NUM ] ; ny [ _NUM ] = ycycleBound ; nx [ _NUM ] = ( x [ _NUM ] - x [ _NUM ] ) * ( ycycleBound - y [ _NUM ] ) / ( y [ _NUM ] - y [ _NUM ] ) + x [ _NUM ] ; if ( x . length == _NUM ) { nx [ _NUM ] = x [ _NUM ] ; ny [ _NUM ] = y [ _NUM ] ; } x = nx ; y = ny ; } else if ( ( x . length == _NUM ) && ( y [ _NUM ] != y [ _NUM ] ) && ( ( ycycleBound >= y [ _NUM ] ) && ( ycycleBound <= y [ _NUM ] ) || ( ycycleBound >= y [ _NUM ] ) && ( ycycleBound <= y [ _NUM ] ) ) ) { double [ ] nx = new double [ _NUM ] ; double [ ] ny = new double [ _NUM ] ; nx [ _NUM ] = x [ _NUM ] ; nx [ _NUM ] = x [ _NUM ] ; nx [ _NUM ] = x [ _NUM ] ; ny [ _NUM ] = y [ _NUM ] ; ny [ _NUM ] = y [ _NUM ] ; ny [ _NUM ] = y [ _NUM ] ; ny [ _NUM ] = ycycleBound ; nx [ _NUM ] = ( x [ _NUM ] - x [ _NUM ] ) * ( ycycleBound - y [ _NUM ] ) / ( y [ _NUM ] - y [ _NUM ] ) + x [ _NUM ] ; x = nx ; y = ny ; } } if ( x . length == _NUM ) { super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , dataset , series , item , crosshairState , pass ) ; return ; } OverwriteDataSet newset = new OverwriteDataSet ( x , y , dataset ) ; if ( cnax != null ) { if ( xcycleBound == x [ _NUM ] ) { cnax . setBoundMappedToLastCycle ( x [ _NUM ] <= xcycleBound ) ; } if ( xcycleBound == x [ _NUM ] ) { cnax . setBoundMappedToLastCycle ( x [ _NUM ] <= xcycleBound ) ; } } if ( cnay != null ) { if ( ycycleBound == y [ _NUM ] ) { cnay . setBoundMappedToLastCycle ( y [ _NUM ] <= ycycleBound ) ; } if ( ycycleBound == y [ _NUM ] ) { cnay . setBoundMappedToLastCycle ( y [ _NUM ] <= ycycleBound ) ; } } super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , newset , series , _NUM , crosshairState , pass ) ; if ( cnax != null ) { if ( xcycleBound == x [ _NUM ] ) { cnax . setBoundMappedToLastCycle ( x [ _NUM ] <= xcycleBound ) ; } if ( xcycleBound == x [ _NUM ] ) { cnax . setBoundMappedToLastCycle ( x [ _NUM ] <= xcycleBound ) ; } } if ( cnay != null ) { if ( ycycleBound == y [ _NUM ] ) { cnay . setBoundMappedToLastCycle ( y [ _NUM ] <= ycycleBound ) ; } if ( ycycleBound == y [ _NUM ] ) { cnay . setBoundMappedToLastCycle ( y [ _NUM ] <= ycycleBound ) ; } } super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , newset , series , _NUM , crosshairState , pass ) ; if ( x . length == _NUM ) { if ( cnax != null ) { if ( xcycleBound == x [ _NUM ] ) { cnax . setBoundMappedToLastCycle ( x [ _NUM ] <= xcycleBound ) ; } if ( xcycleBound == x [ _NUM ] ) { cnax . setBoundMappedToLastCycle ( x [ _NUM ] <= xcycleBound ) ; } } if ( cnay != null ) { if ( ycycleBound == y [ _NUM ] ) { cnay . setBoundMappedToLastCycle ( y [ _NUM ] <= ycycleBound ) ; } if ( ycycleBound == y [ _NUM ] ) { cnay . setBoundMappedToLastCycle ( y [ _NUM ] <= ycycleBound ) ; } } super . drawItem ( g2 , state , dataArea , info , plot , domainAxis , rangeAxis , newset , series , _NUM , crosshairState , pass ) ; } if ( cnax != null ) { cnax . setBoundMappedToLastCycle ( xBoundMapping ) ; } if ( cnay != null ) { cnay . setBoundMappedToLastCycle ( yBoundMapping ) ; } }
public static void writeInt ( DataOutput out , int v ) throws IOException { out . writeByte ( _NUM & v ) ; out . writeByte ( _NUM & ( v > > > _NUM ) ) ; out . writeByte ( _NUM & ( v > > > _NUM ) ) ; out . writeByte ( _NUM & ( v > > > _NUM ) ) ; }
public void writeField ( final String name , final double value ) throws java . io . IOException { writeField ( name , Double . toString ( value ) ) ; }
public Creature calculateNextCreature ( final int questLevel ) { final List < Creature > possibleCreaturesToSpawn = new ArrayList < Creature > ( ) ; int lastLevel = _NUM ; for ( final Creature creature : sortedCreatures ) { if ( creature . getLevel ( ) > questLevel ) { break ; } if ( creature . getLevel ( ) > lastLevel ) { possibleCreaturesToSpawn . clear ( ) ; lastLevel = creature . getLevel ( ) ; } possibleCreaturesToSpawn . add ( creature ) ; } Creature creatureToSpawn = null ; if ( possibleCreaturesToSpawn . size ( ) == _NUM ) { creatureToSpawn = sortedCreatures . get ( sortedCreatures . size ( ) - _NUM ) ; } else { Collections . shuffle ( possibleCreaturesToSpawn ) ; creatureToSpawn = possibleCreaturesToSpawn . get ( _NUM ) ; } return creatureToSpawn ; }
@ Override public void before ( PropertyInfoRestRep oldProps , PropertyInfoRestRep newProps ) { String newIntervalStr = newProps . getProperty ( BackupConstants . SCHEDULE_INTERVAL ) ; String newStartTimeStr = newProps . getProperty ( BackupConstants . SCHEDULE_TIME ) ; if ( ( newIntervalStr == null || newIntervalStr . isEmpty ( ) ) && ( newStartTimeStr == null || newStartTimeStr . isEmpty ( ) ) ) { _log . info ( _STR ) ; return ; } String intervalStr = ( newIntervalStr == null || newIntervalStr . isEmpty ( ) ) ? oldProps . getProperty ( BackupConstants . SCHEDULE_INTERVAL ) : newIntervalStr ; String startTimeStr = ( newStartTimeStr == null || newStartTimeStr . isEmpty ( ) ) ? oldProps . getProperty ( BackupConstants . SCHEDULE_TIME ) : newStartTimeStr ; _log . info ( _STR , intervalStr , startTimeStr ) ; validateBackupIntervalAndStartTime ( intervalStr , startTimeStr ) ; }
@ Override public void deleteTrait ( String guid , String traitNameToBeDeleted ) throws AtlasException { guid = ParamChecker . notEmpty ( guid , _STR ) ; traitNameToBeDeleted = ParamChecker . notEmpty ( traitNameToBeDeleted , _STR ) ; if ( ! typeSystem . isRegistered ( traitNameToBeDeleted ) ) { final String msg = String . format ( _STR , traitNameToBeDeleted ) ; LOG . error ( msg ) ; throw new TypeNotFoundException ( msg ) ; } repository . deleteTrait ( guid , traitNameToBeDeleted ) ; onTraitDeletedFromEntity ( repository . getEntityDefinition ( guid ) , traitNameToBeDeleted ) ; }
public void addTables ( Collection < Table > tables ) { for ( Iterator < Table > it = tables . iterator ( ) ; it . hasNext ( ) ; ) { addTable ( ( Table ) it . next ( ) ) ; } }
protected void writeFile ( String template , Writer writer ) { if ( template == null ) { throw new IllegalArgumentException ( _STR ) ; } BufferedWriter bufferedWriter = new BufferedWriter ( writer ) ; String output = replace ( template , null ) ; try { bufferedWriter . append ( output ) ; } catch ( IOException e ) { logger . log ( Diagnostic . Kind . ERROR , _STR ) ; e . printStackTrace ( ) ; } finally { try { bufferedWriter . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } }
public static String slurpURLNoExceptions ( URL u , String encoding ) { try { return slurpURL ( u , encoding ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }
public synchronized boolean clear ( ) { if ( isLoading ( ) ) { return _BOOL ; } loader = new Thread ( null ) ; loader . start ( ) ; return _BOOL ; }
public int indexOf ( final RoundedToolItem item ) { checkWidget ( ) ; return items . indexOf ( item ) ; }
public void addAttribute ( String alias , String typeUri , boolean required , int count ) throws MessageException { if ( alias . indexOf ( _STR ) > - _NUM || alias . indexOf ( _STR ) > - _NUM || alias . indexOf ( _STR ) > - _NUM || alias . indexOf ( _STR ) > - _NUM ) throw new MessageException ( _STR + alias ) ; _parameters . set ( new Parameter ( _STR + alias , typeUri ) ) ; String level = required ? _STR : _STR ; Parameter levelParam = _parameters . getParameter ( level ) ; Parameter newParam ; if ( levelParam == null ) { newParam = new Parameter ( level , alias ) ; } else { newParam = new Parameter ( level , levelParam . getValue ( ) + _STR + alias ) ; _parameters . removeParameters ( level ) ; } _parameters . set ( newParam ) ; setCount ( alias , count ) ; if ( DEBUG ) _log . debug ( _STR + typeUri + _STR + alias + _STR + count + _STR + required ) ; }
public Void call ( ) throws Exception { final List < Future < Void > > tasks = new LinkedList < Future < Void > > ( ) ; try { for ( IV < ? , ? > termId : graphs ) { final FutureTask < Void > ft = new FutureTask < Void > ( new DrainIteratorTask ( termId ) ) ; tasks . add ( ft ) ; executor . execute ( ft ) ; } for ( Future < Void > f : tasks ) { f . get ( ) ; } } catch ( Throwable ex ) { for ( Future < Void > f : tasks ) f . cancel ( _BOOL ) ; throw new RuntimeException ( ex ) ; } finally { buffer . close ( ) ; } return null ; }
protected void runFullImport ( String dataConfig , Map < String , String > extraParams ) throws Exception { HashMap < String , String > params = new HashMap < > ( ) ; params . put ( _STR , _STR ) ; params . put ( _STR , _STR ) ; params . put ( _STR , dataConfig ) ; params . put ( _STR , _STR ) ; params . put ( _STR , _STR ) ; params . putAll ( extraParams ) ; NamedList l = new NamedList ( ) ; for ( Map . Entry < String , String > e : params . entrySet ( ) ) { l . add ( e . getKey ( ) , e . getValue ( ) ) ; } LocalSolrQueryRequest request = new LocalSolrQueryRequest ( h . getCore ( ) , l ) ; h . query ( _STR , request ) ; }
public String userIdFromRange ( Object ominId , Object omaxId ) { int minId = FunctionHandler . getInt ( ominId ) ; int maxId = FunctionHandler . getInt ( omaxId ) ; Stack < Integer > stack = getStack ( minId , maxId ) ; if ( stack . size ( ) > _NUM ) { return Integer . toString ( stack . pop ( ) ) ; } throw new IllegalArgumentException ( _STR ) ; }
public void start ( ) { if ( isStarted ) { log . info ( _STR ) ; return ; } log . info ( _STR ) ; systemConsumer . start ( ) ; isStarted = _BOOL ; }
public static void generateBinaryOperationFlags ( final ITranslationEnvironment environment , final long nextOffset , final String result , final OperandSize resultSize , final List < ReilInstruction > instructions ) throws IllegalArgumentException { Preconditions . checkNotNull ( environment , _STR ) ; Preconditions . checkNotNull ( result , _STR ) ; Preconditions . checkNotNull ( resultSize , _STR ) ; Preconditions . checkNotNull ( instructions , _STR ) ; final long baseOffset = nextOffset - instructions . size ( ) ; long offset = nextOffset ; generateSignFlagCode ( environment , offset , result , resultSize , instructions ) ; offset = ( baseOffset + instructions . size ( ) ) - _NUM ; instructions . add ( ReilHelpers . createBisz ( offset + _NUM , resultSize , result , OperandSize . BYTE , Helpers . ZERO_FLAG ) ) ; instructions . add ( ReilHelpers . createStr ( offset + _NUM , OperandSize . BYTE , _STR , OperandSize . BYTE , Helpers . CARRY_FLAG ) ) ; instructions . add ( ReilHelpers . createStr ( offset + _NUM , OperandSize . BYTE , _STR , OperandSize . BYTE , Helpers . OVERFLOW_FLAG ) ) ; }
public boolean isLabelMovable ( ) { mxGraph graph = graphComponent . getGraph ( ) ; String label = graph . getLabel ( state . getCell ( ) ) ; return graph . isLabelMovable ( state . getCell ( ) ) && label != null && label . length ( ) > _NUM ; }
public int writeTypeList ( TypeList typeList ) { int off = data . position ( ) ; short [ ] types = typeList . types ; writeInt ( types . length ) ; for ( short type : types ) { writeShort ( type ) ; } return off ; }
public static void loadConfigResource ( String resourceName ) throws IOException { config . clear ( ) ; config . putAll ( loadPropertiesFromResource ( resourceName ) ) ; }
public static void safeCloseStream ( InputStream in ) { if ( in != null ) { try { in . close ( ) ; } catch ( Exception e ) { log . error ( e . getMessage ( ) , e ) ; } } }
private Transaction createTransaction ( ) throws LeaseDeniedException , RemoteException , TransactionException { ITransactionManagerProvider transactionManagerProvider = getTransactionManagerProvider ( ) ; return ( TransactionFactory . create ( transactionManagerProvider . getTransactionManager ( ) , _config . getTransactionTimeout ( ) ) ) . transaction ; }
public void skipWhile ( String skip ) throws IOException { char ch ; do { ch = read ( ) ; } while ( skip . indexOf ( ch ) > - _NUM ) ; unreadCharacter ( ch ) ; }
public static String packageToPath ( String packageName ) { return packageName . replace ( _STR , File . separatorChar ) ; }
@ Override public boolean containsKey ( Object key ) { if ( key == null ) { return entryForNullKey != null ; } int hash = key . hashCode ( ) ; hash ^= ( hash > > > _NUM ) ^ ( hash > > > _NUM ) ; hash ^= ( hash > > > _NUM ) ^ ( hash > > > _NUM ) ; HashMapEntry < K , V > [ ] tab = table ; for ( HashMapEntry < K , V > e = tab [ hash & ( tab . length - _NUM ) ] ; e != null ; e = e . next ) { K eKey = e . key ; if ( eKey == key || ( e . hash == hash && key . equals ( eKey ) ) ) { return _BOOL ; } } return _BOOL ; }
protected boolean isValidFragment ( String fragment ) { if ( fragment == null ) { return _BOOL ; } return isOff ( NO_FRAGMENTS ) ; }
private void rehash ( ) { int oldCapacity = m_capacity ; HashEntry [ ] oldTable = m_table ; int newCapacity = _NUM * oldCapacity + _NUM ; m_capacity = newCapacity ; m_threshold = ( int ) ( newCapacity * m_loadFactor ) ; m_table = new HashEntry [ newCapacity ] ; for ( int i = oldCapacity - _NUM ; i >= _NUM ; i -- ) { for ( HashEntry old = oldTable [ i ] ; old != null ; ) { HashEntry e = old ; old = old . next ; int newIndex = e . hash % newCapacity ; if ( newIndex < _NUM ) newIndex = - newIndex ; e . next = m_table [ newIndex ] ; m_table [ newIndex ] = e ; } } }
public void savePoisFromAssets ( ) { List < Poi > pois = poiAssetLoader . loadPoisFromAssets ( ) ; Timber . d ( _STR , pois . size ( ) ) ; for ( Poi poi : pois ) { Timber . d ( _STR , poi ) ; savePoi ( poi ) ; Timber . d ( _STR ) ; } }
private void createElement ( Document doc , Element parentElement , String elementName , Color value ) { Element element = doc . createElement ( elementName ) ; element . appendChild ( doc . createTextNode ( ColourUtils . fromColour ( value ) ) ) ; parentElement . appendChild ( element ) ; }
public static boolean beenDone ( @ Scope int scope , String tag , CountChecker numberOfTimes ) { List < Long > tagSeenDates = tagLastSeenMap . get ( tag ) ; if ( tagSeenDates . isEmpty ( ) ) { return _BOOL ; } if ( scope == THIS_APP_INSTALL ) { return numberOfTimes . check ( tagSeenDates . size ( ) ) ; } else if ( scope == THIS_APP_SESSION ) { int counter = _NUM ; for ( String tagFromList : sessionList ) { if ( tagFromList . equals ( tag ) ) { counter ++ ; } } return numberOfTimes . check ( counter ) ; } else { int counter = _NUM ; for ( Long seenDate : tagSeenDates ) { if ( seenDate > lastAppUpdatedTime ) { counter ++ ; } } return numberOfTimes . check ( counter ) ; } }
void variableOperatorChanged ( int row , String oper ) { ConditionalVariable variable = _variableList . get ( row ) ; int oldOper = variable . getOpern ( ) ; if ( row > _NUM ) { if ( oper . equals ( Bundle . getMessage ( _STR ) ) ) { variable . setOpern ( Conditional . OPERATOR_OR ) ; } else { variable . setOpern ( Conditional . OPERATOR_AND ) ; } } else { variable . setOpern ( Conditional . OPERATOR_NONE ) ; } if ( variable . getOpern ( ) != oldOper ) { makeAntecedent ( ) ; } }
public void addHeader ( String name , String val ) { mMsgHeader = mMsgHeader + name + _STR + val + mLineDelimiter ; addInternalHeaderFields ( name , val ) ; }
public static void checkDuplicateRequest ( RedisClient redisClient , String uri , Buffer buffer , String ttl , Handler < Boolean > callback ) { Integer timeToLive = parseTimeToLive ( ttl ) ; String redisKey = getRedisKey ( uri , HashCodeGenerator . createHashCode ( uri , buffer . toString ( ) ) ) ; handleStorage ( redisClient , redisKey , timeToLive , callback ) ; }
boolean isHidden ( View view ) { return mHiddenViews . contains ( view ) ; }
public void writeExif ( InputStream jpegStream , OutputStream exifOutStream ) throws IOException { if ( jpegStream == null || exifOutStream == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = getExifWriterStream ( exifOutStream ) ; doExifStreamIO ( jpegStream , s ) ; s . flush ( ) ; }
public static void deleteRecursive ( @ NonNull File fileOrDirectory ) { deleteRecursive ( fileOrDirectory , Collections . EMPTY_LIST ) ; }
static boolean doesMenuBarBorderToolBar ( JMenuBar c ) { JToolBar tb = ( JToolBar ) MetalToolBarUI . findRegisteredComponentOfType ( c , JToolBar . class ) ; if ( tb != null && tb . getOrientation ( ) == JToolBar . HORIZONTAL ) { JRootPane rp = SwingUtilities . getRootPane ( c ) ; Point point = new Point ( _NUM , _NUM ) ; point = SwingUtilities . convertPoint ( c , point , rp ) ; int menuX = point . x ; int menuY = point . y ; point . x = point . y = _NUM ; point = SwingUtilities . convertPoint ( tb , point , rp ) ; return ( point . x == menuX && menuY + c . getHeight ( ) == point . y && c . getWidth ( ) == tb . getWidth ( ) ) ; } return _BOOL ; }
void constructNode ( String nodeName , String prefix , String nodeNamespace , TransformerImpl transformer ) throws TransformerException { boolean shouldAddAttrs ; try { SerializationHandler rhandler = transformer . getResultTreeHandler ( ) ; if ( null == nodeName ) { shouldAddAttrs = _BOOL ; } else { if ( null != prefix ) { rhandler . startPrefixMapping ( prefix , nodeNamespace , _BOOL ) ; } rhandler . startElement ( nodeNamespace , QName . getLocalPart ( nodeName ) , nodeName ) ; super . execute ( transformer ) ; shouldAddAttrs = _BOOL ; } transformer . executeChildTemplates ( this , shouldAddAttrs ) ; if ( null != nodeName ) { rhandler . endElement ( nodeNamespace , QName . getLocalPart ( nodeName ) , nodeName ) ; if ( null != prefix ) { rhandler . endPrefixMapping ( prefix ) ; } } } catch ( SAXException se ) { throw new TransformerException ( se ) ; } }
private PriorityQueue < USField > createQueue ( String fieldName , Map < String , Flt > words ) throws IOException { int numDocs = ir . numDocs ( ) ; FreqQ res = new FreqQ ( words . size ( ) ) ; for ( String word : words . keySet ( ) ) { float tf = words . get ( word ) . x ; if ( minTermFreq > _NUM && tf < minTermFreq ) { continue ; } int docFreq = ir . docFreq ( new Term ( fieldName , word ) ) ; if ( minDocFreq > _NUM && docFreq < minDocFreq ) { continue ; } if ( docFreq == _NUM || docFreq > maxDocFreq ) { continue ; } float idf = similarity . idf ( docFreq , numDocs ) ; float score = _NUM ; if ( isLogTf ( ) ) { score = ( float ) ( Math . log ( tf + _NUM ) * idf ) ; } else { score = tf * idf ; } USField mltField ; if ( isPayloadField ( fieldName ) ) { mltField = new USField ( word , fieldName , score , tf , idf , docFreq , _NUM ) ; } else { mltField = new USField ( word , fieldName , score , tf , idf , docFreq ) ; } res . insertWithOverflow ( mltField ) ; } return res ; }
private synchronized void rebuildJournal ( ) throws IOException { if ( journalWriter != null ) { journalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFileTmp ) , Util . US_ASCII ) ) ; try { writer . write ( MAGIC ) ; writer . write ( _STR ) ; writer . write ( VERSION_1 ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( appVersion ) ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( valueCount ) ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; for ( Entry entry : lruEntries . values ( ) ) { if ( entry . currentEditor != null ) { writer . write ( DIRTY + _STR + entry . key + _STR ) ; } else { writer . write ( CLEAN + _STR + entry . key + entry . getLengths ( ) + _STR ) ; } } } finally { writer . close ( ) ; } if ( journalFile . exists ( ) ) { renameTo ( journalFile , journalFileBackup , _BOOL ) ; } renameTo ( journalFileTmp , journalFile , _BOOL ) ; journalFileBackup . delete ( ) ; journalWriter = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFile , _BOOL ) , Util . US_ASCII ) ) ; }
public static void eachObject ( ObjectInputStream ois , Closure closure ) throws IOException , ClassNotFoundException { try { while ( _BOOL ) { try { Object obj = ois . readObject ( ) ; closure . call ( obj ) ; } catch ( EOFException e ) { break ; } } InputStream temp = ois ; ois = null ; temp . close ( ) ; } finally { closeWithWarning ( ois ) ; } }
private static int exitWithStatus ( int status ) { if ( ToolIO . getMode ( ) == ToolIO . SYSTEM ) { System . exit ( status ) ; } return status ; }
public static double distanceInMeters ( final double latP1 , final double latP2 , final double lonP1 , final double lonP2 ) { double distRad = Math . acos ( Math . sin ( toRadians ( latP1 ) ) * Math . sin ( toRadians ( latP2 ) ) + Math . cos ( toRadians ( latP1 ) ) * Math . cos ( toRadians ( latP2 ) ) * Math . cos ( toRadians ( lonP1 - lonP2 ) ) ) ; final double distAsDegree = toDegrees ( distRad ) ; return distAsDegree * _NUM * _NUM * _NUM ; }
public void processChallenge ( final String challenge ) throws MalformedChallengeException { String s = AuthChallengeParser . extractScheme ( challenge ) ; if ( ! s . equalsIgnoreCase ( getSchemeName ( ) ) ) { throw new MalformedChallengeException ( _STR + challenge ) ; } int i = challenge . indexOf ( _STR ) ; if ( i != - _NUM ) { s = challenge . substring ( i , challenge . length ( ) ) ; this . ntlmchallenge = s . trim ( ) ; this . state = TYPE2_MSG_RECEIVED ; } else { this . ntlmchallenge = _STR ; if ( this . state == UNINITIATED ) { this . state = INITIATED ; } else { this . state = FAILED ; } } }
public static BigInteger calculateA ( BigInteger p , BigInteger q , BigInteger gA , BigInteger x2s ) { return gA . modPow ( x2s , p ) ; }
public static MCostQueue add ( MProduct product , int M_AttributeSetInstance_ID , MAcctSchema as , int AD_Org_ID , int M_CostElement_ID , BigDecimal amt , BigDecimal qty , int precision , MCostDetail cd , String trxName ) { if ( CLogMgt . isLevelFine ( ) ) s_log . fine ( _STR + AD_Org_ID + _STR + product . get_ID ( ) + _STR + M_AttributeSetInstance_ID + _STR + amt + _STR + qty + _STR + precision ) ; MCostQueue cq = new MCostQueue ( product , M_AttributeSetInstance_ID , as , AD_Org_ID , M_CostElement_ID , trxName ) ; cq . setCosts ( amt , qty , precision ) ; cq . setDateAcct ( cd . getDateAcct ( ) ) ; cq . saveEx ( ) ; if ( CLogMgt . isLevelFine ( ) ) s_log . fine ( _STR + cq ) ; return cq ; }
public void addUndoEvent ( UndoInterface event ) { if ( shouldProcessUndoRedoAction ( ) ) { boolean atEndOfList = ( currentIndex >= undoList . size ( ) ) ; if ( ! atEndOfList ) { while ( undoList . size ( ) > currentIndex ) { int lastIndex = undoList . size ( ) - _NUM ; undoList . remove ( lastIndex ) ; } } undoList . add ( event ) ; currentIndex = undoList . size ( ) ; updateMenuItems ( ) ; logger . debug ( event . getStringRepresentation ( ) ) ; } }
public static Exception establishCacheIfNeeded ( PrintStream ... progress ) { if ( m_offline ) { return null ; } if ( REP_MIRROR == null ) { establishMirror ( ) ; } Exception problem = null ; if ( INITIAL_CACHE_BUILD_NEEDED ) { for ( PrintStream p : progress ) { p . println ( _STR ) ; } problem = refreshCache ( progress ) ; INITIAL_CACHE_BUILD_NEEDED = _BOOL ; } return problem ; }
public Spanny append ( CharSequence text , ImageSpan imageSpan ) { text = _STR + text ; append ( text ) ; setSpan ( imageSpan , length ( ) - text . length ( ) , length ( ) - text . length ( ) + _NUM ) ; return this ; }
public static boolean validatePassword ( String password , String correctHash ) throws NoSuchAlgorithmException , InvalidKeySpecException { return validatePassword ( password . toCharArray ( ) , correctHash ) ; }
public List < Snapshot > currentSnapshots ( String repositoryName ) { List < Snapshot > snapshotList = new ArrayList < > ( ) ; List < SnapshotsInProgress . Entry > entries = currentSnapshots ( repositoryName , null ) ; for ( SnapshotsInProgress . Entry entry : entries ) { snapshotList . add ( inProgressSnapshot ( entry ) ) ; } CollectionUtil . timSort ( snapshotList ) ; return Collections . unmodifiableList ( snapshotList ) ; }
public void addCertificate ( X509CertificateHolder certificate ) throws CMSException { certs . add ( certificate . toASN1Structure ( ) ) ; }
public void testCase8 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; byte rBytes [ ] = { _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = BigInteger . ZERO ; BigInteger result = aNumber . multiply ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
private void cleanStatic ( MethodNode method ) { }
@ Override protected void paintTabBackground ( Graphics g , int tabPlacement , int tabIndex , int x , int y , int w , int h , boolean isSelected ) { if ( isSelected ) { if ( tabPlacement == TOP ) { g . setColor ( Color . white ) ; g . fillRoundRect ( x , y , w , h + R + R , R , R ) ; } } else { } }
public void push ( final float value ) { int bits = Float . floatToIntBits ( value ) ; if ( bits == _NUM || bits == _NUM || bits == _NUM ) { mv . visitInsn ( Opcodes . FCONST_0 + ( int ) value ) ; } else { mv . visitLdcInsn ( value ) ; } }
private Automaton buildAutomaton ( BytesRefHash termBytesHash ) { final TreeSet < BytesRef > terms = new TreeSet < BytesRef > ( ) ; for ( int i = _NUM ; i < termBytesHash . size ( ) ; i ++ ) { BytesRef ref = new BytesRef ( ) ; termBytesHash . get ( i , ref ) ; terms . add ( ref ) ; } final Automaton a = DaciukMihovAutomatonBuilder . build ( terms ) ; return a ; }
protected Range findRangeBounds ( CategoryDataset dataset , boolean includeInterval ) { if ( dataset == null ) { return null ; } if ( getDataBoundsIncludesVisibleSeriesOnly ( ) ) { List visibleSeriesKeys = new ArrayList ( ) ; int seriesCount = dataset . getRowCount ( ) ; for ( int s = _NUM ; s < seriesCount ; s ++ ) { if ( isSeriesVisible ( s ) ) { visibleSeriesKeys . add ( dataset . getRowKey ( s ) ) ; } } return DatasetUtilities . findRangeBounds ( dataset , visibleSeriesKeys , includeInterval ) ; } else { return DatasetUtilities . findRangeBounds ( dataset , includeInterval ) ; } }
protected String adminShutdown ( ) { server . shutdown ( ) ; return _STR ; }
public long num_threads ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
public void assignRole ( AMRole role ) throws AMException , SSOException { assignRole ( role . getDN ( ) ) ; }
public OrderedThreadPoolExecutor ( int corePoolSize , int maximumPoolSize ) { this ( corePoolSize , maximumPoolSize , DEFAULT_KEEP_ALIVE , TimeUnit . SECONDS , Executors . defaultThreadFactory ( ) , null ) ; }
protected void writeInitialStyles ( ) throws IOException { out . flushBits ( ) ; fillBits = OutStream . determineUnsignedBitSize ( fillStyles . size ( ) ) ; lineBits = OutStream . determineUnsignedBitSize ( lineStyles . size ( ) ) ; if ( ! hasStyle ) { fillBits = _NUM ; } else { writeStyles ( fillStyles ) ; writeStyles ( lineStyles ) ; out . flushBits ( ) ; } out . writeUBits ( _NUM , fillBits ) ; out . writeUBits ( _NUM , lineBits ) ; }
public static < T extends Map . Entry < String , String > > String formEncode ( Collection < T > parameters ) throws IOException { ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; formEncode ( parameters , b ) ; return new String ( b . toByteArray ( ) ) ; }
public void test_singleResourceLocking_serialized_lowConcurrency2 ( ) throws Exception { Properties properties = new Properties ( ) ; properties . setProperty ( TestOptions . NTHREADS , _STR ) ; properties . setProperty ( TestOptions . NTASKS , _STR ) ; properties . setProperty ( TestOptions . NRESOURCES , _STR ) ; properties . setProperty ( TestOptions . MIN_LOCKS , _STR ) ; properties . setProperty ( TestOptions . MAX_LOCKS , _STR ) ; properties . setProperty ( TestOptions . PREDECLARE_LOCKS , _STR ) ; properties . setProperty ( TestOptions . SORT_LOCK_REQUESTS , _STR ) ; doComparisonTest ( properties ) ; }
public void runNextPendingCommand ( ) { Runnable runnable = deltaQueue . pop ( ) ; runnable . run ( ) ; }
public void stop ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( _BOOL , _BOOL ) ) { return ; } List < WebSocket > socketsToClose = null ; synchronized ( connections ) { socketsToClose = new ArrayList < WebSocket > ( connections ) ; } for ( WebSocket ws : socketsToClose ) { ws . close ( CloseFrame . GOING_AWAY ) ; } synchronized ( this ) { if ( selectorthread != null && selectorthread != Thread . currentThread ( ) ) { selector . wakeup ( ) ; selectorthread . interrupt ( ) ; selectorthread . join ( timeout ) ; } } }
private static Document loadDocument ( Resource xmlFile ) throws SAXException , IOException { DOMParser parser = new DOMParser ( ) ; InputStream is = null ; try { is = IOUtil . toBufferedInputStream ( xmlFile . getInputStream ( ) ) ; InputSource source = new InputSource ( is ) ; parser . parse ( source ) ; } finally { IOUtil . closeEL ( is ) ; } return parser . getDocument ( ) ; }
public void test_DivideBigDecimalRoundingModeDOWN ( ) { String a = _STR ; String b = _STR ; RoundingMode rm = RoundingMode . DOWN ; String c = _STR ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) ) ; BigDecimal result = aNumber . divide ( bNumber , rm ) ; assertEquals ( _STR , c , result . toString ( ) ) ; }
public void removeAnnotation ( int index ) { mAnnotations . remove ( index ) ; mStringXY . removeByIndex ( index ) ; }
public String replace ( char oldChar , char newChar ) { char [ ] buffer = value ; int _offset = offset ; int _count = count ; int idx = _offset ; int last = _offset + _count ; boolean copied = _BOOL ; while ( idx < last ) { if ( buffer [ idx ] == oldChar ) { if ( ! copied ) { char [ ] newBuffer = new char [ _count ] ; System . arraycopy ( buffer , _offset , newBuffer , _NUM , _count ) ; buffer = newBuffer ; idx -= _offset ; last -= _offset ; copied = _BOOL ; } buffer [ idx ] = newChar ; } idx ++ ; } return copied ? new String ( _NUM , count , buffer ) : this ; }
public static void touch ( File file ) throws IOException { if ( ! file . exists ( ) ) { OutputStream out = openOutputStream ( file ) ; IOUtils . closeQuietly ( out ) ; } boolean success = file . setLastModified ( System . currentTimeMillis ( ) ) ; if ( ! success ) { throw new IOException ( _STR + file ) ; } }
private < Type extends Message > RpcCallback < Type > wrapsCallback ( MockCallback < ? > callback ) { EasyMock . reportMatcher ( new WrapsCallback ( callback ) ) ; return null ; }
public boolean shouldSelectCell ( EventObject e ) { log . finest ( m_mField . getColumnName ( ) ) ; return _BOOL ; }
public static void prepareUnicode ( final StringBuilder buffer , final ByteSequence sequence , final boolean trim , final boolean foldCase ) { Reject . ifNull ( buffer , sequence ) ; final int length = sequence . length ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { final byte b = sequence . byteAt ( i ) ; if ( ( b & _NUM ) != b ) { MappingTable . map ( buffer , sequence . subSequence ( i , length ) , trim , foldCase ) ; String normalizedForm = Normalizer . normalize ( buffer , Form . NFKD ) ; buffer . setLength ( _NUM ) ; buffer . append ( normalizedForm ) ; break ; } switch ( b ) { case _STR : if ( canMapToSpace ( buffer , trim ) ) { buffer . append ( _STR ) ; } break ; default : if ( b >= _STR && b < _STR ) { if ( canMapToSpace ( buffer , trim ) ) { buffer . append ( SPACE_CHAR ) ; } } else if ( ( b >= _STR && b <= _STR ) || ( b >= _STR && b <= _STR ) || b == _STR ) { break ; } else if ( foldCase && b >= _STR && b <= _STR ) { buffer . append ( ( char ) ( b + _NUM ) ) ; } else { buffer . append ( ( char ) b ) ; } break ; } } if ( trim ) { for ( int i = buffer . length ( ) - _NUM ; i > _NUM ; i -- ) { if ( buffer . charAt ( i ) == SPACE_CHAR ) { buffer . delete ( i , i + _NUM ) ; } else { break ; } } } }
public void testCase18 ( ) { byte aBytes [ ] = { _NUM } ; byte bBytes [ ] = { _NUM } ; byte rBytes [ ] = { _NUM } ; int aSign = _NUM ; int bSign = _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . add ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
@ Nonnull public BugInstance addClass ( ClassNode classNode ) { String dottedClassName = ClassName . toDottedClassName ( classNode . name ) ; ClassAnnotation classAnnotation = new ClassAnnotation ( dottedClassName ) ; add ( classAnnotation ) ; return this ; }
public static void tryFormatSatisfiability ( String format ) throws IllegalFormatException { MessageFormat . format ( format , ( Object [ ] ) null ) ; }
public static int parseUpperMap ( String s ) throws NumberFormatException { int upperCase = MAP_UNDEFINED ; int length = s . length ( ) ; if ( length >= _NUM && length <= _NUM ) { upperCase = Integer . parseInt ( s , _NUM ) ; } else if ( s . length ( ) != _NUM ) { throw new NumberFormatException ( ) ; } return upperCase ; }
@ Override public void run ( ) { while ( ! isInterrupted ( ) ) { try { Reference ref = _queue . remove ( ) ; _entryInfos . remove ( ref ) ; } catch ( InterruptedException e ) { interrupt ( ) ; break ; } } }
private File createZipFile ( int entryCount , int entrySize ) throws IOException { File result = createTemporaryZipFile ( ) ; byte [ ] writeBuffer = new byte [ _NUM ] ; Random random = new Random ( ) ; ZipOutputStream out = new ZipOutputStream ( new BufferedOutputStream ( new FileOutputStream ( result ) ) ) ; for ( int entry = _NUM ; entry < entryCount ; ++ entry ) { ZipEntry ze = new ZipEntry ( Integer . toHexString ( entry ) ) ; out . putNextEntry ( ze ) ; for ( int i = _NUM ; i < entrySize ; i += writeBuffer . length ) { random . nextBytes ( writeBuffer ) ; int byteCount = Math . min ( writeBuffer . length , entrySize - i ) ; out . write ( writeBuffer , _NUM , byteCount ) ; } out . closeEntry ( ) ; } out . close ( ) ; return result ; }
private boolean isValidPlaylistName ( String newName ) { Playlist blankPlaylist = new Playlist ( newName , _BOOL ) ; return ! newName . isEmpty ( ) && ! musicLibrary . containsPlaylist ( blankPlaylist ) ; }
public String importXML ( String fileName , Properties ctx , String trxName ) throws Exception { log . info ( _STR + fileName ) ; File in = new File ( fileName ) ; if ( ! in . exists ( ) ) { String msg = _STR + fileName ; log . info ( _STR + msg ) ; return msg ; } try { log . info ( _STR ) ; System . setProperty ( _STR , _STR ) ; PackInHandler handler = new PackInHandler ( ) ; handler . set_TrxName ( trxName ) ; handler . setCtx ( ctx ) ; handler . setProcess ( this ) ; SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; SAXParser parser = factory . newSAXParser ( ) ; String msg = _STR ; log . info ( msg ) ; parser . parse ( in , handler ) ; msg = _STR ; log . info ( msg ) ; return _STR ; } catch ( Exception e ) { log . log ( Level . SEVERE , _STR , e ) ; throw e ; } }
public synchronized void logAddOrRemoveRow ( Session session , int tableId , Row row , boolean add ) { if ( logMode != LOG_MODE_OFF ) { if ( ! recoveryRunning ) { log . logAddOrRemoveRow ( session , tableId , row , add ) ; } } }
public org . smpte_ra . schemas . st2067_2_2016 . DigestMethodType buildDefaultDigestMethodType ( ) { org . smpte_ra . schemas . st2067_2_2016 . DigestMethodType digestMethodType = new org . smpte_ra . schemas . st2067_2_2016 . DigestMethodType ( ) ; digestMethodType . setAlgorithm ( CompositionPlaylistBuilder_2016 . defaultHashAlgorithm ) ; return digestMethodType ; }
public static < V extends SampledVertex > Set < V > createSampledPartition ( Collection < V > vertices ) { Set < V > partition = new HashSet < V > ( ) ; for ( V vertex : vertices ) { if ( vertex . isSampled ( ) ) partition . add ( vertex ) ; } return partition ; }
public GremlinTransactionManager ( GremlinGraphFactory graphFactory ) { super ( ) ; this . graphFactory = graphFactory ; }
public void shiftBeans ( BeanInstance toShiftTo , boolean save ) { if ( save ) { m_originalCoords = new Vector < Point > ( ) ; } int targetX = toShiftTo . getX ( ) ; int targetY = toShiftTo . getY ( ) ; for ( int i = _NUM ; i < m_subFlow . size ( ) ; i ++ ) { BeanInstance temp = ( BeanInstance ) m_subFlow . elementAt ( i ) ; if ( save ) { Point p = new Point ( temp . getX ( ) - targetX , temp . getY ( ) - targetY ) ; m_originalCoords . add ( p ) ; } temp . setX ( targetX ) ; temp . setY ( targetY ) ; } }
@ Override protected final List < LatLong > doInBackground ( final Object ... args ) { List < LatLong > points = new ArrayList < > ( ) ; DataHelper dbHelper = new DataHelper ( mContext ) ; final ArrayList < PositionRecord > positions = dbHelper . loadPositions ( ( Integer ) args [ SESSION_ID ] , ( Double ) args [ MIN_LAT_COL ] , ( Double ) args [ MAX_LAT_COL ] , ( Double ) args [ MIN_LON_COL ] , ( Double ) args [ MAX_LON_COL ] ) ; for ( PositionRecord position : positions ) { points . add ( new LatLong ( position . getLatitude ( ) , position . getLongitude ( ) ) ) ; } return points ; }
public void make ( ) throws Exception { for ( int i = _NUM ; i < _makeList . size ( ) ; i ++ ) { Make make = _makeList . get ( i ) ; make . make ( ) ; } }
@ Override void deletedText ( CharacterDataImpl node , int offset , int count ) { if ( ranges != null ) { notifyRangesDeletedText ( node , offset , count ) ; } }
private int clampMag ( int value , int absMin , int absMax ) { final int absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
private ApplicationEnvironment ( ) { try { if ( System . getProperty ( BootstrapProperties . IS_UBERJAR ) != null ) { this . mode = Mode . UBERJAR ; if ( ! loadWildFlySwarmApplicationManifestFromClasspath ( ) ) { loadWildFlySwarmApplicationManifestFromTCCL ( ) ; } } else { this . mode = Mode . CLASSPATH ; loadFractionManifestsFromClasspath ( ) ; } } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
public ProducerWorker ( String topic , String message ) { this . _topic = topic ; this . _message = message ; }
private void tabCreatedInForeground ( int id , int sourceId , boolean newIsIncognito , float originX , float originY ) { LayoutTab newLayoutTab = createLayoutTab ( id , newIsIncognito , NO_CLOSE_BUTTON , NO_TITLE ) ; if ( mLayoutTabs == null || mLayoutTabs . length == _NUM ) { mLayoutTabs = new LayoutTab [ ] { newLayoutTab } ; } else { mLayoutTabs = new LayoutTab [ ] { mLayoutTabs [ _NUM ] , newLayoutTab } ; } updateCacheVisibleIds ( new LinkedList < Integer > ( Arrays . asList ( id , sourceId ) ) ) ; newLayoutTab . setBorderAlpha ( _NUM ) ; newLayoutTab . setStaticToViewBlend ( _NUM ) ; forceAnimationToFinish ( ) ; Interpolator interpolator = BakedBezierInterpolator . TRANSFORM_CURVE ; addToAnimation ( newLayoutTab , LayoutTab . Property . SCALE , _NUM , _NUM , FOREGROUND_ANIMATION_DURATION , _NUM , _BOOL , interpolator ) ; addToAnimation ( newLayoutTab , LayoutTab . Property . ALPHA , _NUM , _NUM , FOREGROUND_ANIMATION_DURATION , _NUM , _BOOL , interpolator ) ; addToAnimation ( newLayoutTab , LayoutTab . Property . X , originX , _NUM , FOREGROUND_ANIMATION_DURATION , _NUM , _BOOL , interpolator ) ; addToAnimation ( newLayoutTab , LayoutTab . Property . Y , originY , _NUM , FOREGROUND_ANIMATION_DURATION , _NUM , _BOOL , interpolator ) ; mTabModelSelector . selectModel ( newIsIncognito ) ; startHiding ( id , _BOOL ) ; }
private static boolean functionsAreAllowed ( boolean isAddAllFunction , boolean isPutAllFunction , Class < ? > classD , Class < ? > classS ) { if ( isAddAllFunction ) return collectionIsAssignableFrom ( classD ) && collectionIsAssignableFrom ( classS ) ; if ( isPutAllFunction ) return mapIsAssignableFrom ( classD ) && mapIsAssignableFrom ( classS ) ; return isAssignableFrom ( classD , classS ) ; }
private void loadOrgAccessUser ( ArrayList < OrgAccess > list ) { PreparedStatement pstmt = null ; ResultSet rs = null ; String sql = _STR + _STR ; try { pstmt = DB . prepareStatement ( sql , get_TrxName ( ) ) ; pstmt . setInt ( _NUM , getAD_User_ID ( ) ) ; rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { MUserOrgAccess oa = new MUserOrgAccess ( getCtx ( ) , rs , get_TrxName ( ) ) ; loadOrgAccessAdd ( list , new OrgAccess ( oa . getAD_Client_ID ( ) , oa . getAD_Org_ID ( ) , oa . isReadOnly ( ) ) ) ; } } catch ( Exception e ) { log . log ( Level . SEVERE , sql , e ) ; } finally { DB . close ( rs , pstmt ) ; } }
public void close ( ) { synchronized ( mDiskCacheLock ) { if ( mDiskLruCache != null ) { try { if ( ! mDiskLruCache . isClosed ( ) ) { mDiskLruCache . close ( ) ; } } catch ( Throwable e ) { LogUtils . e ( e . getMessage ( ) , e ) ; } mDiskLruCache = null ; } } }
private Map < URI , Integer > createVolumeMapForExportMask ( ExportMask exportMask ) { Map < URI , Integer > map = new HashMap < > ( ) ; for ( URI uri : ExportMaskUtils . getVolumeURIs ( exportMask ) ) { map . put ( uri , ExportGroup . LUN_UNASSIGNED ) ; } return map ; }
@ Override public void close ( ) throws IOException { SocketChannel s = _channel ; _channel = null ; SSLSocket sslSocket = _sslSocket ; _sslSocket = null ; if ( sslSocket != null ) { try { sslSocket . close ( ) ; } catch ( Exception e ) { } } if ( s != null ) { try { s . close ( ) ; } catch ( Exception e ) { } } }
public static Vector3D max ( Vector3D a , Vector3D b ) { return new Vector3D ( FastMath . max ( a . getX ( ) , b . getX ( ) ) , FastMath . max ( a . getY ( ) , b . getY ( ) ) , FastMath . max ( a . getZ ( ) , b . getZ ( ) ) ) ; }
public static void waitForProcessOutput ( Process self , OutputStream output , OutputStream error ) { Thread tout = consumeProcessOutputStream ( self , output ) ; Thread terr = consumeProcessErrorStream ( self , error ) ; try { tout . join ( ) ; } catch ( InterruptedException ignore ) { } try { terr . join ( ) ; } catch ( InterruptedException ignore ) { } try { self . waitFor ( ) ; } catch ( InterruptedException ignore ) { } closeStreams ( self ) ; }
private int clampMag ( int value , int absMin , int absMax ) { final int absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
public void or ( Criteria criteria ) { oredCriteria . add ( criteria ) ; }
public CommandLine add ( String ... args ) { if ( args != null && args . length > _NUM ) { Collections . addAll ( line , args ) ; } return this ; }
@ Override final Node < V > find ( int h , long k ) { for ( Node < V > e = first ; e != null ; ) { int s ; if ( ( ( s = lockState ) & ( WAITER | WRITER ) ) != _NUM ) { if ( ( e . key == k ) ) { return e ; } e = e . next ; } else if ( U . compareAndSwapInt ( this , LOCKSTATE , s , s + READER ) ) { TreeNode < V > r ; TreeNode < V > p ; try { p = ( ( r = root ) == null ? null : r . findTreeNode ( h , k ) ) ; } finally { Thread w ; if ( getAndAddInt ( this , LOCKSTATE , - READER ) == ( READER | WAITER ) && ( w = waiter ) != null ) { LockSupport . unpark ( w ) ; } } return p ; } } return null ; }
@ Override public AxisState draw ( Graphics2D g2 , double cursor , Rectangle2D plotArea , Rectangle2D dataArea , RectangleEdge edge , PlotRenderingInfo plotState ) { AxisState axisState = new AxisState ( cursor ) ; if ( isAxisLineVisible ( ) ) { drawAxisLine ( g2 , cursor , dataArea , edge ) ; } if ( isTickMarksVisible ( ) ) { drawTickMarks ( g2 , axisState , dataArea , edge ) ; } if ( isTickLabelsVisible ( ) ) { for ( int band = _NUM ; band < this . labelInfo . length ; band ++ ) { axisState = drawTickLabels ( band , g2 , axisState , dataArea , edge ) ; } } if ( getAttributedLabel ( ) != null ) { axisState = drawAttributedLabel ( getAttributedLabel ( ) , g2 , plotArea , dataArea , edge , axisState ) ; } else { axisState = drawLabel ( getLabel ( ) , g2 , plotArea , dataArea , edge , axisState ) ; } return axisState ; }
private ArrayList < URLCrawlDatum > readContents ( Path fetchlist ) throws IOException { SequenceFile . Reader reader = new SequenceFile . Reader ( fs , fetchlist , conf ) ; ArrayList < URLCrawlDatum > l = new ArrayList < URLCrawlDatum > ( ) ; READ : do { Text key = new Text ( ) ; CrawlDatum value = new CrawlDatum ( ) ; if ( ! reader . next ( key , value ) ) { break READ ; } l . add ( new URLCrawlDatum ( key , value ) ) ; } while ( _BOOL ) ; reader . close ( ) ; return l ; }
public void playTogether ( Collection < Animator > items ) { if ( items != null && items . size ( ) > _NUM ) { mNeedsSort = _BOOL ; Builder builder = null ; for ( Animator anim : items ) { if ( builder == null ) { builder = play ( anim ) ; } else { builder . with ( anim ) ; } } } }
public static Color createRandomColour ( ) { float r = rand . nextFloat ( ) ; float g = rand . nextFloat ( ) ; float b = rand . nextFloat ( ) ; Color randomColor = new Color ( r , g , b ) ; return randomColor ; }
private static Pair < DiagnosticKind , Boolean > parseCategoryString ( String category ) { final String fixable = _STR ; final boolean isFixable = category . startsWith ( fixable ) ; if ( isFixable ) { category = category . substring ( fixable . length ( ) ) ; } DiagnosticKind categoryEnum = DiagnosticKind . fromParseString ( category ) ; return Pair . of ( categoryEnum , isFixable ) ; }
public void legacyProcess ( Class clazz , Method m , MethodAppearanceDecision decision ) { if ( m . getDeclaringClass ( ) != Object . class && m . getReturnType ( ) != void . class && m . getParameterTypes ( ) . length == _NUM ) { String mName = m . getName ( ) ; if ( ! looksLikePropertyReadMethod ( mName ) ) { decision . setExposeMethodAs ( null ) ; try { decision . setExposeAsProperty ( new PropertyDescriptor ( mName , clazz , mName , null ) ) ; } catch ( IntrospectionException e ) { throw new RuntimeException ( e ) ; } } } }
public SPTKPitchReaderWriter ( String lf0SPTKFile , float windowSizeInSeconds , float skipSizeInSeconds , int samplingRate ) { contour = null ; header = new PitchFileHeader ( ) ; header . windowSizeInSeconds = windowSizeInSeconds ; header . skipSizeInSeconds = skipSizeInSeconds ; header . fs = samplingRate ; try { contour = readSPTKF0Data ( lf0SPTKFile ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public void abort ( ) { cleanUp ( ) ; if ( mFuture != null ) { mFuture . cancel ( _BOOL ) ; mFuture = null ; } if ( mExecutorService != null ) { mExecutorService . shutdownNow ( ) ; mExecutorService = null ; } mListener = null ; }
public void addCSPStateListener ( CSPStateListener listener ) { listeners . add ( listener ) ; }
public static void printWrappedText ( final PrintStream stream , final String message ) { if ( stream != null && message != null && ! message . isEmpty ( ) ) { stream . println ( wrapText ( message , MAX_LINE_WIDTH ) ) ; } }
public void removeAtRange ( int index , int size ) { final int end = Math . min ( mSize , index + size ) ; for ( int i = index ; i < end ; i ++ ) { removeAt ( i ) ; } }
public static void assertNullability ( ResultSet rs , boolean [ ] nullability ) throws SQLException { ResultSetMetaData rsmd = rs . getMetaData ( ) ; int actualCols = rsmd . getColumnCount ( ) ; assertEquals ( _STR , nullability . length , rsmd . getColumnCount ( ) ) ; for ( int i = _NUM ; i < actualCols ; i ++ ) { int expected = nullability [ i ] ? ResultSetMetaData . columnNullable : ResultSetMetaData . columnNoNulls ; assertEquals ( _STR + ( i + _NUM ) , expected , rsmd . isNullable ( i + _NUM ) ) ; } }
private synchronized Rect [ ] computeBoundingBoxes ( ) { if ( ! boundingBoxes . isPresent ( ) ) { Rect [ ] bb = new Rect [ ( int ) contours . size ( ) ] ; for ( int i = _NUM ; i < contours . size ( ) ; i ++ ) { bb [ i ] = boundingRect ( contours . get ( i ) ) ; } boundingBoxes = Optional . of ( bb ) ; } return boundingBoxes . get ( ) ; }
public void addTimeline ( final JSONObject timeline ) { TimelineChannel . notifyTimeline ( timeline ) ; timelines . addFirst ( timeline ) ; final int maxCnt = Symphonys . getInt ( _STR ) ; if ( timelines . size ( ) > maxCnt ) { timelines . remove ( maxCnt ) ; } }
private boolean loadLOBData ( ) { if ( isStoreAttachmentsOnFileSystem ) { return loadLOBDataFromFileSystem ( ) ; } return loadLOBDataFromDB ( ) ; }
protected void paintComponent ( Graphics g ) { backgroundPainter . paint ( g , getVisibleRect ( ) ) ; TextUI ui = getUI ( ) ; if ( ui != null ) { Graphics scratchGraphics = g . create ( ) ; try { ui . update ( scratchGraphics , this ) ; } finally { scratchGraphics . dispose ( ) ; } } }
public static < T > List < T > copyToArrayListWithExtraCapacity ( T [ ] elements , int extraCapacity ) { List < T > asList ; if ( elements != null ) { asList = new ArrayList < T > ( elements . length + extraCapacity ) ; asList . addAll ( Arrays . asList ( elements ) ) ; } else { asList = new ArrayList < T > ( extraCapacity ) ; } return asList ; }
private boolean sendEventToListeners ( ClusterEvent event ) { boolean success = _BOOL ; for ( String listenerId : Collections . unmodifiableSet ( listeners . keySet ( ) ) ) { logger . debug ( _STR , listenerId , event . getType ( ) , instanceId ) ; ClusterEventListener listener = listeners . get ( listenerId ) ; if ( listener != null && ! listener . handleEvent ( event ) ) { success = _BOOL ; } } return success ; }
@ RequestMapping ( method = RequestMethod . PUT , value = _STR , consumes = { MediaType . APPLICATION_JSON_VALUE } , produces = { MediaType . APPLICATION_JSON_VALUE } ) @ ApiOperation ( value = _STR , notes = _STR + _STR + _STR , response = void . class ) @ ApiResponses ( { @ ApiResponse ( code = _NUM , message = _STR ) , @ ApiResponse ( code = _NUM , message = _STR ) , @ ApiResponse ( code = _NUM , message = _STR ) , @ ApiResponse ( code = _NUM , message = _STR ) , @ ApiResponse ( code = _NUM , message = _STR ) , @ ApiResponse ( code = _NUM , message = _STR ) , @ ApiResponse ( code = _NUM , message = _STR ) } ) @ PreAuthorize ( _STR ) public ResponseEntity < ? > update ( @ PathVariable ( _STR ) String region , @ PathVariable ( _STR ) final String [ ] keys , @ RequestParam ( value = _STR , defaultValue = _STR ) final String opValue , @ RequestBody final String json ) { logger . debug ( _STR , region ) ; region = decode ( region ) ; if ( keys . length > _NUM ) { return updateMultipleKeys ( region , keys , json ) ; } else { return updateSingleKey ( region , keys [ _NUM ] , json , opValue ) ; } }
public void load ( X509Extension extensions ) { Set < String > critExts = extensions . getCriticalExtensionOIDs ( ) ; Set < String > nonCritExts = extensions . getNonCriticalExtensionOIDs ( ) ; List < X509Ext > sortedExts = new ArrayList < X509Ext > ( ) ; for ( Iterator < String > itr = critExts . iterator ( ) ; itr . hasNext ( ) ; ) { String extOid = itr . next ( ) ; byte [ ] value = extensions . getExtensionValue ( extOid ) ; X509Ext ext = new X509Ext ( new ASN1ObjectIdentifier ( extOid ) , value , _BOOL ) ; sortedExts . add ( ext ) ; } for ( Iterator < String > itr = nonCritExts . iterator ( ) ; itr . hasNext ( ) ; ) { String extOid = itr . next ( ) ; byte [ ] value = extensions . getExtensionValue ( extOid ) ; X509Ext ext = new X509Ext ( new ASN1ObjectIdentifier ( extOid ) , value , _BOOL ) ; sortedExts . add ( ext ) ; } Collections . sort ( sortedExts , new ExtensionNameComparator ( ) ) ; data = new Object [ sortedExts . size ( ) ] [ _NUM ] ; int i = _NUM ; for ( Iterator < X509Ext > itrSortedExts = sortedExts . iterator ( ) ; itrSortedExts . hasNext ( ) ; ) { X509Ext ext = itrSortedExts . next ( ) ; loadRow ( ext , i ) ; i ++ ; } fireTableDataChanged ( ) ; }
public Builder deleteAddresses ( ) { deleteFields . add ( _STR ) ; return this ; }
public static void write ( File file , CharSequence data , Charset encoding , boolean append ) throws IOException { String str = data == null ? null : data . toString ( ) ; writeStringToFile ( file , str , encoding , append ) ; }
public Query limit ( int limit ) { return limit ( limit < _NUM ? NO_LIMIT : Field . < Integer > field ( Integer . toString ( limit ) ) ) ; }
public static boolean fileExists ( String fName ) { boolean result = _BOOL ; File file = new File ( fName ) ; if ( file != null ) { result = file . exists ( ) && file . isFile ( ) ; } return result ; }
@ Override public void write ( byte [ ] b , int off , int len ) { if ( ( off < _NUM ) || ( off > b . length ) || ( len < _NUM ) || ( ( off + len ) > b . length ) || ( ( off + len ) < _NUM ) ) { throw new IndexOutOfBoundsException ( ) ; } else if ( len == _NUM ) { return ; } synchronized ( this ) { int newcount = count + len ; int remaining = len ; int inBufferPos = count - filledBufferSum ; while ( remaining > _NUM ) { int part = Math . min ( remaining , currentBuffer . length - inBufferPos ) ; System . arraycopy ( b , off + len - remaining , currentBuffer , inBufferPos , part ) ; remaining -= part ; if ( remaining > _NUM ) { needNewBuffer ( newcount ) ; inBufferPos = _NUM ; } } count = newcount ; } }
public long skip ( long n ) { if ( position + n <= document . getLength ( ) ) { position += n ; return n ; } long temp = position ; position = document . getLength ( ) ; return document . getLength ( ) - temp ; }
private static void _init ( ) { addMethod ( _STR , new com . earth2me . essentials . register . payment . methods . iCo6 ( ) ) ; addMethod ( _STR , new com . earth2me . essentials . register . payment . methods . iCo5 ( ) ) ; addMethod ( _STR , new com . earth2me . essentials . register . payment . methods . BOSE7 ( ) ) ; addMethod ( _STR , new com . earth2me . essentials . register . payment . methods . MCUR ( ) ) ; Dependencies . add ( _STR ) ; addMethod ( _STR , new com . earth2me . essentials . register . payment . methods . VaultEco ( ) ) ; }
public static String convertFileName ( String name , int maxBytes ) { try { return convertFileName ( name , maxBytes , Charset . defaultCharset ( ) ) ; } catch ( CharacterCodingException cce ) { try { return convertFileName ( name , maxBytes , Charset . forName ( _STR ) ) ; } catch ( CharacterCodingException e ) { throw new RuntimeException ( _STR + name , e ) ; } } }
public static void copy ( URL url , File file ) throws IOException { InputStream is = url . openStream ( ) ; try { OutputStream os = new FileOutputStream ( file ) ; try { byte [ ] buffer = new byte [ _NUM ] ; int read ; while ( ( read = is . read ( buffer ) ) > _NUM ) { os . write ( buffer , _NUM , read ) ; } } finally { os . close ( ) ; } } finally { is . close ( ) ; } }
public void updateDeltas ( int deltaX , int deltaY ) { if ( mLeftBorderActive ) { mDeltaX = Math . max ( - mBaselineX , deltaX ) ; mDeltaX = Math . min ( mBaselineWidth - _NUM * mTouchTargetWidth , mDeltaX ) ; } else if ( mRightBorderActive ) { mDeltaX = Math . min ( mDragLayer . getWidth ( ) - ( mBaselineX + mBaselineWidth ) , deltaX ) ; mDeltaX = Math . max ( - mBaselineWidth + _NUM * mTouchTargetWidth , mDeltaX ) ; } if ( mTopBorderActive ) { mDeltaY = Math . max ( - mBaselineY , deltaY ) ; mDeltaY = Math . min ( mBaselineHeight - _NUM * mTouchTargetWidth , mDeltaY ) ; } else if ( mBottomBorderActive ) { mDeltaY = Math . min ( mDragLayer . getHeight ( ) - ( mBaselineY + mBaselineHeight ) , deltaY ) ; mDeltaY = Math . max ( - mBaselineHeight + _NUM * mTouchTargetWidth , mDeltaY ) ; } }
public void createAuthConfiguration ( String name ) throws AMConsoleException { if ( ( name == null ) || ( name . length ( ) == _NUM ) ) { throw new AMConsoleException ( getLocalizedString ( _STR ) ) ; } String [ ] params = { currentRealm , name } ; logEvent ( _STR , params ) ; String errorMsg = null ; try { AMAuthConfigUtils . createNamedConfig ( name , _NUM , new HashMap ( ) , currentRealm , getUserSSOToken ( ) ) ; logEvent ( _STR , params ) ; } catch ( SMSException e ) { errorMsg = getErrorString ( e ) ; String [ ] paramsEx = { currentRealm , name , errorMsg } ; logEvent ( _STR , paramsEx ) ; debug . warning ( _STR , e ) ; } catch ( SSOException e ) { errorMsg = getErrorString ( e ) ; String [ ] paramsEx = { currentRealm , name , errorMsg } ; logEvent ( _STR , paramsEx ) ; debug . warning ( _STR , e ) ; } catch ( AMConfigurationException e ) { errorMsg = getErrorString ( e ) ; String [ ] paramsEx = { currentRealm , name , errorMsg } ; logEvent ( _STR , paramsEx ) ; debug . warning ( _STR , e ) ; } if ( errorMsg != null ) { throw new AMConsoleException ( errorMsg ) ; } }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( _STR ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
public void trim ( String aText , int [ ] aSpan ) { int begin = aSpan [ _NUM ] ; int end = aSpan [ _NUM ] - _NUM ; String data = aText ; while ( ( begin < ( data . length ( ) - _NUM ) ) && trimChar ( data . charAt ( begin ) ) ) { begin ++ ; } while ( ( end > _NUM ) && trimChar ( data . charAt ( end ) ) ) { end -- ; } end ++ ; aSpan [ _NUM ] = begin ; aSpan [ _NUM ] = end ; }
public String classifierTipText ( ) { return _STR ; }
public WritableRaster createWritableChild ( int x , int y , int width , int height , int x0 , int y0 , int [ ] bandList ) { if ( x < this . minX ) { throw new RasterFormatException ( _STR ) ; } if ( y < this . minY ) { throw new RasterFormatException ( _STR ) ; } if ( ( x + width < x ) || ( x + width > this . minX + this . width ) ) { throw new RasterFormatException ( _STR ) ; } if ( ( y + height < y ) || ( y + height > this . minY + this . height ) ) { throw new RasterFormatException ( _STR ) ; } SampleModel sm ; if ( bandList != null ) { sm = sampleModel . createSubsetSampleModel ( bandList ) ; } else { sm = sampleModel ; } int deltaX = x0 - x ; int deltaY = y0 - y ; return new BytePackedRaster ( sm , dataBuffer , new Rectangle ( x0 , y0 , width , height ) , new Point ( sampleModelTranslateX + deltaX , sampleModelTranslateY + deltaY ) , this ) ; }
private void sendBuffer ( ) throws IOException { buf . flip ( ) ; send ( buf , buf . remaining ( ) ) ; buf = null ; }
private void ensureCapacity ( int n ) { if ( n <= _NUM ) { return ; } int max ; if ( data == null || data . length == _NUM ) { max = _NUM ; } else if ( data . length >= n * _NUM ) { return ; } else { max = data . length ; } while ( max < n * _NUM ) { max *= _NUM ; } String newData [ ] = new String [ max ] ; if ( length > _NUM ) { System . arraycopy ( data , _NUM , newData , _NUM , length * _NUM ) ; } data = newData ; }
public void callEvent ( Event event ) { if ( event . isAsynchronous ( ) ) { if ( Thread . holdsLock ( this ) ) { throw new IllegalStateException ( event . getEventName ( ) + _STR ) ; } if ( server . isPrimaryThread ( ) ) { throw new IllegalStateException ( event . getEventName ( ) + _STR ) ; } fireEvent ( event ) ; } else { synchronized ( this ) { fireEvent ( event ) ; } } }
@ Nullable private static PsiFile findFileToOpen ( @ NotNull List < PsiFile > files ) { PsiFile bestFile = null ; FolderConfiguration bestConfig = null ; for ( PsiFile file : files ) { PsiDirectory qualifiedDirectory = file . getParent ( ) ; assert qualifiedDirectory != null : _STR ; FolderConfiguration config = FolderConfiguration . getConfigForFolder ( qualifiedDirectory . getName ( ) ) ; if ( bestConfig == null || config == null || config . compareTo ( bestConfig ) < _NUM ) { bestConfig = config ; bestFile = file ; } } return bestFile ; }
protected boolean areEqual ( String string1 , String string2 , boolean caseMatters ) { return ( caseMatters && string1 . equals ( string2 ) ) || ( ! caseMatters && string1 . equalsIgnoreCase ( string2 ) ) ; }
public static CommandResult execCommand ( List < String > commands , boolean isRoot ) { return execCommand ( commands == null ? null : commands . toArray ( new String [ ] { } ) , isRoot , _BOOL ) ; }
protected void populateBlob ( int id , byte [ ] baseContent , int requiredSize ) throws SQLException { Connection con = getConnectionViaDriverManager ( ) ; CallableStatement cstmt = null ; try { cstmt = con . prepareCall ( EXECUTE_FILL_BINARY_BLOB ) ; cstmt . setInt ( _NUM , id ) ; cstmt . setBytes ( _NUM , baseContent ) ; cstmt . setInt ( _NUM , requiredSize ) ; cstmt . execute ( ) ; } finally { closeQuietly ( cstmt ) ; closeQuietly ( con ) ; } }
private void removeObservedFile ( String localPath ) { File file = new File ( localPath ) ; String parentPath = file . getParent ( ) ; FolderObserver observer = mFolderObserversMap . get ( parentPath ) ; if ( observer != null ) { observer . stopWatching ( file . getName ( ) ) ; if ( observer . isEmpty ( ) ) { mFolderObserversMap . remove ( parentPath ) ; Log_OC . d ( TAG , _STR + parentPath + _STR ) ; } } else { Log_OC . d ( TAG , _STR + localPath ) ; } }
public void makeImmutable ( ) { if ( mutable ) { if ( results != null ) { int length = results . size ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { Result result = ( Result ) results . get ( i ) ; result . makeImmutable ( ) ; } results = Collections . unmodifiableList ( results ) ; } mutable = _BOOL ; } }
public Statement isNull ( ) { statement . append ( _STR ) ; return this ; }
public void clear ( ) { processQueue ( ) ; hash . clear ( ) ; }
private void updateFavoriteStation ( ) { String showString = null ; if ( FmRadioStation . isFavoriteStation ( mContext , mCurrentStation ) ) { String stationName = FmRadioStation . getStationName ( mContext , mCurrentStation , FmRadioStation . STATION_TYPE_FAVORITE ) ; FmRadioStation . updateStationToDb ( mContext , stationName , FmRadioStation . STATION_TYPE_SEARCHED , mCurrentStation ) ; mButtonAddToFavorite . setImageResource ( R . drawable . btn_fm_favorite_off_selector ) ; mTextStationName . setText ( _STR ) ; showString = mProjectStringExt . getProjectString ( mContext , R . string . toast_channel_deleted , R . string . toast_channel_deleted1 ) ; } else { String stationName = FmRadioStation . getStationName ( mContext , mCurrentStation , FmRadioStation . STATION_TYPE_SEARCHED ) ; if ( FmRadioStation . isStationExist ( mContext , mCurrentStation , FmRadioStation . STATION_TYPE_SEARCHED ) ) { FmRadioStation . updateStationToDb ( mContext , stationName , FmRadioStation . STATION_TYPE_FAVORITE , mCurrentStation ) ; } else { FmRadioStation . insertStationToDb ( mContext , stationName , mCurrentStation , FmRadioStation . STATION_TYPE_FAVORITE ) ; } mButtonAddToFavorite . setImageResource ( R . drawable . btn_fm_favorite_on_selector ) ; mTextStationName . setText ( stationName ) ; showString = mProjectStringExt . getProjectString ( mContext , R . string . toast_channel_added , R . string . toast_channel_added1 ) ; } showToast ( showString ) ; }
public int addAllAbsent ( Collection < ? extends E > c ) { Object [ ] cs = c . toArray ( ) ; if ( cs . length == _NUM ) return _NUM ; final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { Object [ ] elements = getArray ( ) ; int len = elements . length ; int added = _NUM ; for ( int i = _NUM ; i < cs . length ; ++ i ) { Object e = cs [ i ] ; if ( indexOf ( e , elements , _NUM , len ) < _NUM && indexOf ( e , cs , _NUM , added ) < _NUM ) cs [ added ++ ] = e ; } if ( added > _NUM ) { Object [ ] newElements = Arrays . copyOf ( elements , len + added ) ; System . arraycopy ( cs , _NUM , newElements , len , added ) ; setArray ( newElements ) ; } return added ; } finally { lock . unlock ( ) ; } }
public Analyzer saveAnalysis ( File file ) throws IOException { PrintStream ps = null ; try { ps = new PrintStream ( new BufferedOutputStream ( new FileOutputStream ( file ) ) ) ; printAnalysis ( ps ) ; } finally { if ( ps != null ) { ps . close ( ) ; } } return this ; }
public Iterator < Capability > dependencies ( ) { return m_Dependencies . iterator ( ) ; }
public static void notifyTicket ( Context c , @ NonNull Ticket t , boolean keepNotification ) { String text ; String ticker ; int smallIcon ; int largeIcon ; int status ; switch ( TicketsAdapter . getValidityStatus ( t . getStatus ( ) , t . getValidTo ( ) ) ) { case TicketProvider . Tickets . STATUS_VALID : case TicketProvider . Tickets . STATUS_VALID_EXPIRING : text = c . getString ( R . string . notif_valid_text , FormatUtil . formatDateTimeDifference ( t . getValidTo ( ) ) ) ; ticker = c . getString ( R . string . notif_valid_ticker ) ; smallIcon = R . drawable . notification_small_ready ; largeIcon = R . drawable . notification_big_ready ; status = TicketProvider . Tickets . STATUS_VALID_EXPIRING ; break ; case TicketProvider . Tickets . STATUS_EXPIRING : case TicketProvider . Tickets . STATUS_EXPIRING_EXPIRED : text = c . getString ( R . string . notif_expiring_text , FormatUtil . formatTime ( t . getValidTo ( ) ) ) ; ticker = c . getString ( R . string . notif_expiring_ticker ) ; smallIcon = R . drawable . notification_small_warning ; largeIcon = R . drawable . notification_big_warning ; status = TicketProvider . Tickets . STATUS_EXPIRING_EXPIRED ; break ; case TicketProvider . Tickets . STATUS_EXPIRED : text = c . getString ( R . string . notif_expired_text , FormatUtil . formatTime ( t . getValidTo ( ) ) ) ; ticker = c . getString ( R . string . notif_expired_ticker ) ; smallIcon = R . drawable . notification_small_expired ; largeIcon = R . drawable . notification_big_expired ; status = TicketProvider . Tickets . STATUS_EXPIRED ; break ; default : return ; } Intent intent = new Intent ( c , WearableService . class ) ; intent . setAction ( _STR ) ; intent . putExtra ( _STR , t ) ; intent . putExtra ( _STR , status ) ; c . startService ( intent ) ; Intent i = new Intent ( c , MainActivity . class ) ; i . addFlags ( Intent . FLAG_ACTIVITY_SINGLE_TOP | Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; i . putExtra ( MainActivity . EXTRA_TICKET_ID , t . getId ( ) ) ; PendingIntent openIntent = PendingIntent . getActivity ( c , t . getNotificationId ( ) , i , PendingIntent . FLAG_CANCEL_CURRENT ) ; Intent i2 = new Intent ( c , MainActivity . class ) ; i2 . addFlags ( Intent . FLAG_ACTIVITY_SINGLE_TOP | Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; i2 . putExtra ( MainActivity . EXTRA_TICKET_ID , t . getId ( ) ) ; i2 . putExtra ( MainActivity . EXTRA_SHOW_SMS , _BOOL ) ; PendingIntent showSmsIntent = PendingIntent . getActivity ( c , t . getNotificationId ( ) + _NUM , i2 , PendingIntent . FLAG_CANCEL_CURRENT ) ; List < Action > actions = new ArrayList < Action > ( ) ; actions . add ( new Action ( R . drawable . notification_show_sms , R . string . notif_show_sms , showSmsIntent ) ) ; List < String > rows = new ArrayList < String > ( ) ; rows . add ( text ) ; rows . add ( c . getString ( R . string . tickets_valid_from ) + _STR + FormatUtil . formatDateTime ( t . getValidFrom ( ) ) ) ; rows . add ( c . getString ( R . string . tickets_code ) + _STR + t . getHash ( ) ) ; fireNotification ( c , t . getNotificationId ( ) , openIntent , c . getString ( R . string . application_name ) , text , rows , t . getCity ( ) , ticker , smallIcon , largeIcon , actions , keepNotification ) ; }
public final static int parseInt ( String str ) { char c = str . charAt ( _NUM ) ; int length = str . length ( ) ; boolean negative = ( c == _STR ) ; int offset = _NUM ; if ( negative ) { if ( length == _NUM || length > _NUM ) { return Integer . parseInt ( str ) ; } c = str . charAt ( offset ++ ) ; } else { if ( length > _NUM ) { return Integer . parseInt ( str ) ; } } if ( c > _STR || c < _STR ) { return Integer . parseInt ( str ) ; } int num = c - _STR ; if ( offset < length ) { c = str . charAt ( offset ++ ) ; if ( c > _STR || c < _STR ) { return Integer . parseInt ( str ) ; } num = ( num * _NUM ) + ( c - _STR ) ; if ( offset < length ) { c = str . charAt ( offset ++ ) ; if ( c > _STR || c < _STR ) { return Integer . parseInt ( str ) ; } num = ( num * _NUM ) + ( c - _STR ) ; if ( offset < length ) { do { c = str . charAt ( offset ++ ) ; if ( c > _STR || c < _STR ) { return Integer . parseInt ( str ) ; } num = ( num * _NUM ) + ( c - _STR ) ; } while ( offset < length ) ; } } } return negative ? - num : num ; }
public BufferedHeader ( final CharArrayBuffer buffer ) throws ParseException { super ( ) ; if ( buffer == null ) { throw new IllegalArgumentException ( _STR ) ; } int colon = buffer . indexOf ( _STR ) ; if ( colon == - _NUM ) { throw new ParseException ( _STR + buffer . toString ( ) ) ; } String s = buffer . substringTrimmed ( _NUM , colon ) ; if ( s . length ( ) == _NUM ) { throw new ParseException ( _STR + buffer . toString ( ) ) ; } this . buffer = buffer ; this . name = s ; this . valuePos = colon + _NUM ; }
public synchronized void returnBuf ( byte [ ] buf ) { if ( buf == null || buf . length > mSizeLimit ) { return ; } mBuffersByLastUse . add ( buf ) ; int pos = Collections . binarySearch ( mBuffersBySize , buf , BUF_COMPARATOR ) ; if ( pos < _NUM ) { pos = - pos - _NUM ; } mBuffersBySize . add ( pos , buf ) ; mCurrentSize += buf . length ; trim ( ) ; }
public static String toDateString ( java . util . Date date , String format ) { if ( date == null ) return _STR ; SimpleDateFormat dateFormat = null ; if ( format != null ) { dateFormat = new SimpleDateFormat ( format ) ; } else { dateFormat = new SimpleDateFormat ( ) ; } Calendar calendar = Calendar . getInstance ( ) ; calendar . setTime ( date ) ; return dateFormat . format ( date ) ; }
@ Deprecated public static < T > T executeWithBackOff ( AbstractGoogleClientRequest < T > client , String error , Object ... errorArgs ) throws IOException , InterruptedException { return executeWithBackOff ( client , String . format ( error , errorArgs ) ) ; }
private void checkServerResponseCode ( HttpURLConnection urlConnection ) throws RequestFailureException { try { if ( urlConnection . getResponseCode ( ) != _NUM ) { throw new RequestFailureException ( _STR + urlConnection . getResponseCode ( ) + _STR ) ; } } catch ( IOException e ) { throw new RequestFailureException ( _STR , e ) ; } }
public static void addResourceSource ( ResourceSource source ) { ALL_RESOURCE_SOURCES . add ( source ) ; }
private void commitChanges ( ) { hopfieldPropsPanel . commitChanges ( ) ; inputPanel . commitChanges ( ) ; }
private boolean connect_to_target ( PlaPointInt p_from_point ) { if ( nearest_target_item != null && target_set != null && ! target_set . contains ( nearest_target_item ) ) { nearest_target_item = null ; } if ( nearest_target_item == null || ! nearest_target_item . shares_net_no ( net_nos ) ) { return _BOOL ; } boolean route_completed = _BOOL ; PlaPointInt connection_point = null ; if ( nearest_target_item instanceof BrdAbit ) { BrdAbit target = ( BrdAbit ) nearest_target_item ; connection_point = target . center_get ( ) ; } else if ( nearest_target_item instanceof BrdTracep ) { return r_board . connect_to_trace ( p_from_point , ( BrdTracep ) nearest_target_item , pen_half_width_arr [ layer_active_no ] , clearance_class ) ; } else if ( nearest_target_item instanceof BrdAreaConduction ) { connection_point = p_from_point ; } if ( connection_point != null ) { route_completed = itera_connect ( p_from_point , connection_point ) ; } return route_completed ; }
public boolean onGenericMotionEvent ( MotionEvent ev ) { if ( ( ev . getSource ( ) & InputDevice . SOURCE_CLASS_POINTER ) == InputDevice . SOURCE_CLASS_POINTER ) { int action = ev . getAction ( ) ; switch ( action & MotionEvent . ACTION_MASK ) { case MotionEvent . ACTION_SCROLL : float vScroll = ev . getAxisValue ( MotionEvent . AXIS_VSCROLL ) ; if ( vScroll > _NUM ) { if ( mDeckView . ensureFocusedTask ( ) ) { mDeckView . focusNextTask ( _BOOL , _BOOL ) ; } } else { if ( mDeckView . ensureFocusedTask ( ) ) { mDeckView . focusNextTask ( _BOOL , _BOOL ) ; } } return _BOOL ; } } return _BOOL ; }
public boolean addClass ( OwlClass targetClass ) { targetClass . addQCRestriction ( this ) ; return qcClasses . add ( targetClass ) ; }
public void editElement ( final Object element , final String columnPropertyName ) { final int columnIndex = TableViewerUtils . columnPropertyNameToColumnIndex ( columnPropertyName , _BOOL , viewer ) ; viewer . editElement ( element , columnIndex ) ; }
public Fp ( ECCurve curve , ECFieldElement x , ECFieldElement y ) { this ( curve , x , y , _BOOL ) ; }
private static String serializeDocumentInt ( Document doc ) throws TransformerException , IOException { ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; TransformerFactory factory = TransformerFactory . newInstance ( ) ; Transformer transformer = factory . newTransformer ( ) ; transformer . setOutputProperty ( OutputKeys . METHOD , _STR ) ; transformer . setOutputProperty ( OutputKeys . INDENT , _STR ) ; DOMSource source = new DOMSource ( doc ) ; StreamResult outputTarget = new StreamResult ( s ) ; transformer . transform ( source , outputTarget ) ; return s . toString ( _STR ) ; }
void addFillComponents ( Container panel , int [ ] cols , int [ ] rows ) { Dimension filler = new Dimension ( _NUM , _NUM ) ; boolean filled_cell_11 = _BOOL ; CellConstraints cc = new CellConstraints ( ) ; if ( cols . length > _NUM && rows . length > _NUM ) { if ( cols [ _NUM ] == _NUM && rows [ _NUM ] == _NUM ) { panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , _NUM ) ) ; filled_cell_11 = _BOOL ; } } for ( int index = _NUM ; index < cols . length ; index ++ ) { if ( cols [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( cols [ index ] , _NUM ) ) ; } for ( int index = _NUM ; index < rows . length ; index ++ ) { if ( rows [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , rows [ index ] ) ) ; } }
@ Override public boolean useBufferPerWindow ( ) { return ! Win32GraphicsEnvironment . isDWMCompositionEnabled ( ) ; }
static double area ( S2Point a , S2Point b , S2Point c ) { final double sa = b . angle ( c ) ; final double sb = c . angle ( a ) ; final double sc = a . angle ( b ) ; final double s = _NUM * ( sa + sb + sc ) ; if ( s >= _NUM ) { double s2 = s * s ; double dmin = s - Math . max ( sa , Math . max ( sb , sc ) ) ; if ( dmin < _NUM * s * s2 * s2 ) { double area = girardArea ( a , b , c ) ; if ( dmin < s * ( _NUM * area ) ) { return area ; } } } return _NUM * Math . atan ( Math . sqrt ( Math . max ( _NUM , Math . tan ( _NUM * s ) * Math . tan ( _NUM * ( s - sa ) ) * Math . tan ( _NUM * ( s - sb ) ) * Math . tan ( _NUM * ( s - sc ) ) ) ) ) ; }
private void hqr2 ( ) { int nn = this . n ; int n = nn - _NUM ; int low = _NUM ; int high = nn - _NUM ; double eps = Math . pow ( _NUM , - _NUM ) ; double exshift = _NUM ; double p = _NUM , q = _NUM , r = _NUM , s = _NUM , z = _NUM , t , w , x , y ; double norm = _NUM ; for ( int i = _NUM ; i < nn ; i ++ ) { if ( i < low | i > high ) { d [ i ] = H [ i ] [ i ] ; e [ i ] = _NUM ; } for ( int j = Math . max ( i - _NUM , _NUM ) ; j < nn ; j ++ ) { norm = norm + Math . abs ( H [ i ] [ j ] ) ; } } int iter = _NUM ; while ( n >= low ) { int l = n ; while ( l > low ) { s = Math . abs ( H [ l - _NUM ] [ l - _NUM ] ) + Math . abs ( H [ l ] [ l ] ) ; if ( s == _NUM ) { s = norm ; } if ( Math . abs ( H [ l ] [ l - _NUM ] ) < eps * s ) { break ; } l -- ; } if ( l == n ) { H [ n ] [ n ] = H [ n ] [ n ] + exshift ; d [ n ] = H [ n ] [ n ] ; e [ n ] = _NUM ; n -- ; iter = _NUM ; } else if ( l == n - _NUM ) { w = H [ n ] [ n - _NUM ] * H [ n - _NUM ] [ n ] ; p = ( H [ n - _NUM ] [ n - _NUM ] - H [ n ] [ n ] ) / _NUM ; q = p * p + w ; z = Math . sqrt ( Math . abs ( q ) ) ; H [ n ] [ n ] = H [ n ] [ n ] + exshift ; H [ n - _NUM ] [ n - _NUM ] = H [ n - _NUM ] [ n - _NUM ] + exshift ; x = H [ n ] [ n ] ; if ( q >= _NUM ) { if ( p >= _NUM ) { z = p + z ; } else { z = p - z ; } d [ n - _NUM ] = x + z ; d [ n ] = d [ n - _NUM ] ; if ( z != _NUM ) { d [ n ] = x - w / z ; } e [ n - _NUM ] = _NUM ; e [ n ] = _NUM ; x = H [ n ] [ n - _NUM ] ; s = Math . abs ( x ) + Math . abs ( z ) ; p = x / s ; q = z / s ; r = Math . sqrt ( p * p + q * q ) ; p = p / r ; q = q / r ; for ( int j = n - _NUM ; j < nn ; j ++ ) { z = H [ n - _NUM ] [ j ] ; H [ n - _NUM ] [ j ] = q * z + p * H [ n ] [ j ] ; H [ n ] [ j ] = q * H [ n ] [ j ] - p * z ; } for ( int i = _NUM ; i <= n ; i ++ ) { z = H [ i ] [ n - _NUM ] ; H [ i ] [ n - _NUM ] = q * z + p * H [ i ] [ n ] ; H [ i ] [ n ] = q * H [ i ] [ n ] - p * z ; } for ( int i = low ; i <= high ; i ++ ) { z = V [ i ] [ n - _NUM ] ; V [ i ] [ n - _NUM ] = q * z + p * V [ i ] [ n ] ; V [ i ] [ n ] = q * V [ i ] [ n ] - p * z ; } } else { d [ n - _NUM ] = x + p ; d [ n ] = x + p ; e [ n - _NUM ] = z ; e [ n ] = - z ; } n = n - _NUM ; iter = _NUM ; } else { x = H [ n ] [ n ] ; y = _NUM ; w = _NUM ; if ( l < n ) { y = H [ n - _NUM ] [ n - _NUM ] ; w = H [ n ] [ n - _NUM ] * H [ n - _NUM ] [ n ] ; } if ( iter == _NUM ) { exshift += x ; for ( int i = low ; i <= n ; i ++ ) { H [ i ] [ i ] -= x ; } s = Math . abs ( H [ n ] [ n - _NUM ] ) + Math . abs ( H [ n - _NUM ] [ n - _NUM ] ) ; x = y = _NUM * s ; w = - _NUM * s * s ; } if ( iter == _NUM ) { s = ( y - x ) / _NUM ; s = s * s + w ; if ( s > _NUM ) { s = Math . sqrt ( s ) ; if ( y < x ) { s = - s ; } s = x - w / ( ( y - x ) / _NUM + s ) ; for ( int i = low ; i <= n ; i ++ ) { H [ i ] [ i ] -= s ; } exshift += s ; x = y = w = _NUM ; } } iter = iter + _NUM ; int m = n - _NUM ; while ( m >= l ) { z = H [ m ] [ m ] ; r = x - z ; s = y - z ; p = ( r * s - w ) / H [ m + _NUM ] [ m ] + H [ m ] [ m + _NUM ] ; q = H [ m + _NUM ] [ m + _NUM ] - z - r - s ; r = H [ m + _NUM ] [ m + _NUM ] ; s = Math . abs ( p ) + Math . abs ( q ) + Math . abs ( r ) ; p = p / s ; q = q / s ; r = r / s ; if ( m == l ) { break ; } if ( Math . abs ( H [ m ] [ m - _NUM ] ) * ( Math . abs ( q ) + Math . abs ( r ) ) < eps * ( Math . abs ( p ) * ( Math . abs ( H [ m - _NUM ] [ m - _NUM ] ) + Math . abs ( z ) + Math . abs ( H [ m + _NUM ] [ m + _NUM ] ) ) ) ) { break ; } m -- ; } for ( int i = m + _NUM ; i <= n ; i ++ ) { H [ i ] [ i - _NUM ] = _NUM ; if ( i > m + _NUM ) { H [ i ] [ i - _NUM ] = _NUM ; } } for ( int k = m ; k <= n - _NUM ; k ++ ) { boolean notlast = ( k != n - _NUM ) ; if ( k != m ) { p = H [ k ] [ k - _NUM ] ; q = H [ k + _NUM ] [ k - _NUM ] ; r = ( notlast ? H [ k + _NUM ] [ k - _NUM ] : _NUM ) ; x = Math . abs ( p ) + Math . abs ( q ) + Math . abs ( r ) ; if ( x != _NUM ) { p = p / x ; q = q / x ; r = r / x ; } } if ( x == _NUM ) { break ; } s = Math . sqrt ( p * p + q * q + r * r ) ; if ( p < _NUM ) { s = - s ; } if ( s != _NUM ) { if ( k != m ) { H [ k ] [ k - _NUM ] = - s * x ; } else if ( l != m ) { H [ k ] [ k - _NUM ] = - H [ k ] [ k - _NUM ] ; } p = p + s ; x = p / s ; y = q / s ; z = r / s ; q = q / p ; r = r / p ; for ( int j = k ; j < nn ; j ++ ) { p = H [ k ] [ j ] + q * H [ k + _NUM ] [ j ] ; if ( notlast ) { p = p + r * H [ k + _NUM ] [ j ] ; H [ k + _NUM ] [ j ] = H [ k + _NUM ] [ j ] - p * z ; } H [ k ] [ j ] = H [ k ] [ j ] - p * x ; H [ k + _NUM ] [ j ] = H [ k + _NUM ] [ j ] - p * y ; } for ( int i = _NUM ; i <= Math . min ( n , k + _NUM ) ; i ++ ) { p = x * H [ i ] [ k ] + y * H [ i ] [ k + _NUM ] ; if ( notlast ) { p = p + z * H [ i ] [ k + _NUM ] ; H [ i ] [ k + _NUM ] = H [ i ] [ k + _NUM ] - p * r ; } H [ i ] [ k ] = H [ i ] [ k ] - p ; H [ i ] [ k + _NUM ] = H [ i ] [ k + _NUM ] - p * q ; } for ( int i = low ; i <= high ; i ++ ) { p = x * V [ i ] [ k ] + y * V [ i ] [ k + _NUM ] ; if ( notlast ) { p = p + z * V [ i ] [ k + _NUM ] ; V [ i ] [ k + _NUM ] = V [ i ] [ k + _NUM ] - p * r ; } V [ i ] [ k ] = V [ i ] [ k ] - p ; V [ i ] [ k + _NUM ] = V [ i ] [ k + _NUM ] - p * q ; } } } } } if ( norm == _NUM ) { return ; } for ( n = nn - _NUM ; n >= _NUM ; n -- ) { p = d [ n ] ; q = e [ n ] ; if ( q == _NUM ) { int l = n ; H [ n ] [ n ] = _NUM ; for ( int i = n - _NUM ; i >= _NUM ; i -- ) { w = H [ i ] [ i ] - p ; r = _NUM ; for ( int j = l ; j <= n ; j ++ ) { r = r + H [ i ] [ j ] * H [ j ] [ n ] ; } if ( e [ i ] < _NUM ) { z = w ; s = r ; } else { l = i ; if ( e [ i ] == _NUM ) { if ( w != _NUM ) { H [ i ] [ n ] = - r / w ; } else { H [ i ] [ n ] = - r / ( eps * norm ) ; } } else { x = H [ i ] [ i + _NUM ] ; y = H [ i + _NUM ] [ i ] ; q = ( d [ i ] - p ) * ( d [ i ] - p ) + e [ i ] * e [ i ] ; t = ( x * s - z * r ) / q ; H [ i ] [ n ] = t ; if ( Math . abs ( x ) > Math . abs ( z ) ) { H [ i + _NUM ] [ n ] = ( - r - w * t ) / x ; } else { H [ i + _NUM ] [ n ] = ( - s - y * t ) / z ; } } t = Math . abs ( H [ i ] [ n ] ) ; if ( ( eps * t ) * t > _NUM ) { for ( int j = i ; j <= n ; j ++ ) { H [ j ] [ n ] = H [ j ] [ n ] / t ; } } } } } else if ( q < _NUM ) { int l = n - _NUM ; if ( Math . abs ( H [ n ] [ n - _NUM ] ) > Math . abs ( H [ n - _NUM ] [ n ] ) ) { H [ n - _NUM ] [ n - _NUM ] = q / H [ n ] [ n - _NUM ] ; H [ n - _NUM ] [ n ] = - ( H [ n ] [ n ] - p ) / H [ n ] [ n - _NUM ] ; } else { cdiv ( _NUM , - H [ n - _NUM ] [ n ] , H [ n - _NUM ] [ n - _NUM ] - p , q ) ; H [ n - _NUM ] [ n - _NUM ] = cdivr ; H [ n - _NUM ] [ n ] = cdivi ; } H [ n ] [ n - _NUM ] = _NUM ; H [ n ] [ n ] = _NUM ; for ( int i = n - _NUM ; i >= _NUM ; i -- ) { double ra , sa , vr , vi ; ra = _NUM ; sa = _NUM ; for ( int j = l ; j <= n ; j ++ ) { ra = ra + H [ i ] [ j ] * H [ j ] [ n - _NUM ] ; sa = sa + H [ i ] [ j ] * H [ j ] [ n ] ; } w = H [ i ] [ i ] - p ; if ( e [ i ] < _NUM ) { z = w ; r = ra ; s = sa ; } else { l = i ; if ( e [ i ] == _NUM ) { cdiv ( - ra , - sa , w , q ) ; H [ i ] [ n - _NUM ] = cdivr ; H [ i ] [ n ] = cdivi ; } else { x = H [ i ] [ i + _NUM ] ; y = H [ i + _NUM ] [ i ] ; vr = ( d [ i ] - p ) * ( d [ i ] - p ) + e [ i ] * e [ i ] - q * q ; vi = ( d [ i ] - p ) * _NUM * q ; if ( vr == _NUM & vi == _NUM ) { vr = eps * norm * ( Math . abs ( w ) + Math . abs ( q ) + Math . abs ( x ) + Math . abs ( y ) + Math . abs ( z ) ) ; } cdiv ( x * r - z * ra + q * sa , x * s - z * sa - q * ra , vr , vi ) ; H [ i ] [ n - _NUM ] = cdivr ; H [ i ] [ n ] = cdivi ; if ( Math . abs ( x ) > ( Math . abs ( z ) + Math . abs ( q ) ) ) { H [ i + _NUM ] [ n - _NUM ] = ( - ra - w * H [ i ] [ n - _NUM ] + q * H [ i ] [ n ] ) / x ; H [ i + _NUM ] [ n ] = ( - sa - w * H [ i ] [ n ] - q * H [ i ] [ n - _NUM ] ) / x ; } else { cdiv ( - r - y * H [ i ] [ n - _NUM ] , - s - y * H [ i ] [ n ] , z , q ) ; H [ i + _NUM ] [ n - _NUM ] = cdivr ; H [ i + _NUM ] [ n ] = cdivi ; } } t = Math . max ( Math . abs ( H [ i ] [ n - _NUM ] ) , Math . abs ( H [ i ] [ n ] ) ) ; if ( ( eps * t ) * t > _NUM ) { for ( int j = i ; j <= n ; j ++ ) { H [ j ] [ n - _NUM ] = H [ j ] [ n - _NUM ] / t ; H [ j ] [ n ] = H [ j ] [ n ] / t ; } } } } } } for ( int i = _NUM ; i < nn ; i ++ ) { if ( i < low | i > high ) { for ( int j = i ; j < nn ; j ++ ) { V [ i ] [ j ] = H [ i ] [ j ] ; } } } for ( int j = nn - _NUM ; j >= low ; j -- ) { for ( int i = low ; i <= high ; i ++ ) { z = _NUM ; for ( int k = low ; k <= Math . min ( j , high ) ; k ++ ) { z = z + V [ i ] [ k ] * H [ k ] [ j ] ; } V [ i ] [ j ] = z ; } } }
private void serializable ( final IsolationLevels level ) throws Exception { clear ( store ) ; final ValueFactory vf = store . getValueFactory ( ) ; final IRI subj = vf . createIRI ( _STR ) ; final IRI pred = vf . createIRI ( _STR ) ; RepositoryConnection prep = store . getConnection ( ) ; try { prep . begin ( level ) ; prep . add ( subj , pred , vf . createLiteral ( _NUM ) ) ; prep . commit ( ) ; } finally { prep . close ( ) ; } final CountDownLatch start = new CountDownLatch ( _NUM ) ; final CountDownLatch observed = new CountDownLatch ( _NUM ) ; Thread t1 = incrementBy ( start , observed , level , vf , subj , pred , _NUM ) ; Thread t2 = incrementBy ( start , observed , level , vf , subj , pred , _NUM ) ; t2 . start ( ) ; t1 . start ( ) ; t2 . join ( ) ; t1 . join ( ) ; assertNotFailed ( ) ; RepositoryConnection check = store . getConnection ( ) ; try { check . begin ( level ) ; Literal lit = readLiteral ( check , subj , pred ) ; int val = lit . intValue ( ) ; if ( val != _NUM && val != _NUM ) { assertEquals ( _NUM , val ) ; } check . commit ( ) ; } finally { check . close ( ) ; } }
public static Array listToArrayRemoveEmpty ( String list , char delimiter ) { int len = list . length ( ) ; ArrayImpl array = new ArrayImpl ( ) ; if ( len == _NUM ) return array ; int last = _NUM ; for ( int i = _NUM ; i < len ; i ++ ) { if ( list . charAt ( i ) == delimiter ) { if ( last < i ) array . _append ( list . substring ( last , i ) ) ; last = i + _NUM ; } } if ( last < len ) array . _append ( list . substring ( last ) ) ; return array ; }
private int clampMag ( int value , int absMin , int absMax ) { final int absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
public static < T extends Object & java . lang . Comparable < ? super T > > T min ( Collection < ? extends T > collection ) { Iterator < ? extends T > it = collection . iterator ( ) ; T min = it . next ( ) ; while ( it . hasNext ( ) ) { T next = it . next ( ) ; if ( min . compareTo ( next ) > _NUM ) { min = next ; } } return min ; }
@ Override public ServerHeartbeat server ( String address , int port , boolean isSSL , String clusterId , String displayName , boolean isDynamic ) { Objects . requireNonNull ( address ) ; Objects . requireNonNull ( clusterId ) ; if ( address . isEmpty ( ) ) { address = _STR ; } ClusterHeartbeat cluster = createCluster ( clusterId ) ; ServerHeartbeat server ; if ( isDynamic ) { server = cluster . createDynamicServer ( address , port , isSSL ) ; } else { server = cluster . createServer ( address , port , isSSL ) ; } if ( displayName != null ) { server . setDisplayName ( displayName ) ; } if ( ! isDynamic ) { cluster . addSeedServer ( server ) ; } return server ; }
public void testToString ( ) { LinkedBlockingQueue q = populatedQueue ( SIZE ) ; String s = q . toString ( ) ; for ( int i = _NUM ; i < SIZE ; ++ i ) { assertTrue ( s . indexOf ( String . valueOf ( i ) ) >= _NUM ) ; } }
private void findClub ( ) { if ( ce ( ) == null ) { return ; } String title = Messages . getString ( _STR ) ; String body = Messages . getString ( _STR ) ; if ( ! clientgui . doYesNoDialog ( title , body ) ) { return ; } attacks . removeAllElements ( ) ; attacks . addElement ( new FindClubAction ( cen ) ) ; ready ( ) ; }
public void test_allocationContexts ( ) throws IOException { final Journal store = ( Journal ) getStore ( ) ; try { final RWStrategy bs = ( RWStrategy ) store . getBufferStrategy ( ) ; final RWStore rw = bs . getStore ( ) ; final IAllocationContext allocContext1 = rw . newAllocationContext ( _BOOL ) ; final IAllocationContext allocContext2 = rw . newAllocationContext ( _BOOL ) ; final int sze = _NUM ; final byte [ ] buf = new byte [ sze + _NUM ] ; r . nextBytes ( buf ) ; final long addr1a = bs . write ( ByteBuffer . wrap ( buf ) , allocContext1 ) ; final long addr1b = bs . write ( ByteBuffer . wrap ( buf ) , allocContext1 ) ; rw . detachContext ( allocContext1 ) ; final long addr2a = bs . write ( ByteBuffer . wrap ( buf ) , allocContext2 ) ; final long addr2b = bs . write ( ByteBuffer . wrap ( buf ) , allocContext2 ) ; rw . detachContext ( allocContext2 ) ; try { bs . write ( ByteBuffer . wrap ( buf ) , allocContext1 ) ; fail ( _STR ) ; } catch ( IllegalStateException ise ) { } final IAllocationContext allocContext3 = rw . newAllocationContext ( _BOOL ) ; final long addr1c = bs . write ( ByteBuffer . wrap ( buf ) , allocContext3 ) ; assertTrue ( _STR , bs . getPhysicalAddress ( addr1c ) > bs . getPhysicalAddress ( addr2b ) ) ; bs . delete ( addr1c , allocContext3 ) ; final long addr1d = bs . write ( ByteBuffer . wrap ( buf ) , allocContext3 ) ; assertTrue ( _STR , addr1c == addr1d ) ; rw . detachContext ( allocContext3 ) ; store . commit ( ) ; bs . delete ( addr1d ) ; final long addr1e = bs . write ( ByteBuffer . wrap ( buf ) ) ; assertTrue ( _STR , addr1e != addr1d ) ; store . commit ( ) ; } finally { store . destroy ( ) ; } }
public PDFXref ( byte [ ] line ) { if ( line == null ) { id = - _NUM ; generation = - _NUM ; } else { id = Integer . parseInt ( new String ( line , _NUM , _NUM ) ) ; generation = Integer . parseInt ( new String ( line , _NUM , _NUM ) ) ; } compressed = _BOOL ; }
public static String [ ] makeStrings ( Collection < InetAddress > addrs ) { String [ ] result = new String [ addrs . size ( ) ] ; int i = _NUM ; for ( InetAddress addr : addrs ) { result [ i ++ ] = addr . getHostAddress ( ) ; } return result ; }
public static void showProfile ( Activity activity , String pilotId , @ Nullable HashMap < String , String > extras ) { if ( ( pilotId == null || pilotId . isEmpty ( ) ) && AirMap . hasValidAuthenticatedUser ( ) ) { pilotId = AirMap . getUserId ( ) ; } Intent intent = new Intent ( activity , ProfileActivity . class ) ; intent . putExtra ( ProfileActivity . ARG_PILOT_ID , pilotId ) ; if ( extras != null ) { intent . putExtra ( CreateFlightActivity . KEY_VALUE_EXTRAS , extras ) ; } activity . startActivity ( intent ) ; }
public SmoothMoves ( ) { cycleStart = System . nanoTime ( ) / _NUM ; startTimer ( currentResolution ) ; }
public static void updatePriceLists ( Properties ctx , ProductBean productBean , String trxName ) throws OperationException { ArrayList < ProductBean > list = productBean . getProductBeanList ( ) ; if ( list != null ) { int productId = productBean . getProductId ( ) ; Iterator < ProductBean > iter = list . iterator ( ) ; while ( iter . hasNext ( ) ) { ProductBean bean = iter . next ( ) ; int priceListId = bean . getPriceListId ( ) ; BigDecimal stdPrice = bean . getStdPrice ( ) ; BigDecimal listPrice = bean . getListPrice ( ) ; BigDecimal limitPrice = bean . getLimitPrice ( ) ; MPriceList priceList = MPriceList . get ( ctx , priceListId , trxName ) ; if ( priceList . isTaxIncluded ( ) ) { stdPrice = bean . getStdPriceIncl ( ) ; listPrice = bean . getListPriceIncl ( ) ; limitPrice = bean . getLimitPriceIncl ( ) ; } updatePriceLists ( ctx , productId , priceListId , stdPrice , listPrice , limitPrice , trxName ) ; } } }
private String checkDependencies ( ModuleDescriptor md , HashMap < String , ModuleDescriptor > modlist ) { logger . debug ( _STR + md . getId ( ) ) ; ModuleInterface [ ] requires = md . getRequires ( ) ; if ( requires != null ) { for ( ModuleInterface req : requires ) { String res = checkOneDependency ( md , req , modlist ) ; if ( ! res . isEmpty ( ) ) { return res ; } } } return _STR ; }
public void testClearBitPositiveInside1 ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = _NUM ; int number = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . clearBit ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public void deserializeFunnel ( List < Object > serializedFunnel ) { Set < Object > funnelStepAccumulator = new HashSet < > ( ) ; for ( Object e : serializedFunnel ) { if ( e != null ) { funnelStepAccumulator . add ( e ) ; } else { funnelSteps . add ( new HashSet < > ( funnelStepAccumulator ) ) ; funnelStepAccumulator . clear ( ) ; } } }
public static String appendParameter ( CtClass type , String descriptor ) { int i = descriptor . indexOf ( _STR ) ; if ( i < _NUM ) return descriptor ; else { StringBuffer newdesc = new StringBuffer ( ) ; newdesc . append ( descriptor . substring ( _NUM , i ) ) ; toDescriptor ( newdesc , type ) ; newdesc . append ( descriptor . substring ( i ) ) ; return newdesc . toString ( ) ; } }
public void addCatchClause ( CatchClause clause ) { assertNotNull ( clause ) ; if ( catchClauses == null ) { catchClauses = new ArrayList < CatchClause > ( ) ; } catchClauses . add ( clause ) ; clause . setParent ( this ) ; }
public static void streamContentToBrowser ( HttpServletResponse response , byte [ ] bytes , String contentType , String fileName ) throws IOException { setResponseBrowserProxyNoCache ( response ) ; response . setContentLength ( bytes . length ) ; if ( contentType != null ) { response . setContentType ( contentType ) ; } if ( fileName != null ) { response . setHeader ( _STR , _STR + fileName + _STR ) ; } OutputStream out = response . getOutputStream ( ) ; InputStream in = new ByteArrayInputStream ( bytes ) ; try { streamContent ( out , in , bytes . length ) ; } catch ( IOException e ) { in . close ( ) ; out . close ( ) ; throw e ; } in . close ( ) ; out . flush ( ) ; out . close ( ) ; }
public void unlock ( Object key ) { String uid = String . valueOf ( key ) ; Transaction tr = lockedUIDHashMap . get ( uid ) ; if ( tr == null ) { return ; } try { tr . commit ( ) ; } catch ( Exception e ) { logger . warn ( _STR , e ) ; } finally { lockedUIDHashMap . remove ( uid ) ; } }
public List < Order > fetchOrders ( int startIndex , int num ) { int endIndex = startIndex + num > orders . size ( ) ? orders . size ( ) : startIndex + num ; return orders . subList ( startIndex , endIndex ) ; }
public boolean ensureSchemaAgreement ( ) { long start = System . currentTimeMillis ( ) ; Map < String , List < String > > schemas = null ; while ( System . currentTimeMillis ( ) - start < DbClientContext . MAX_SCHEMA_WAIT_MS ) { try { log . info ( _STR , DbClientContext . SCHEMA_RETRY_SLEEP_MILLIS / _NUM ) ; Thread . sleep ( DbClientContext . SCHEMA_RETRY_SLEEP_MILLIS ) ; } catch ( InterruptedException ex ) { log . warn ( _STR ) ; } schemas = getSchemaVersions ( ) ; if ( schemas . size ( ) > _NUM ) { continue ; } if ( schemas . size ( ) == _NUM ) { if ( ! schemas . containsKey ( StorageProxy . UNREACHABLE ) ) { return _BOOL ; } else { continue ; } } if ( schemas . containsKey ( StorageProxy . UNREACHABLE ) ) { return _BOOL ; } } log . error ( _STR , schemas ) ; throw new IllegalStateException ( _STR ) ; }
void clear ( ) { stack . clear ( ) ; }
private TileStore ( final SpriteStore store ) { this . store = store ; tiles = new ArrayList < Sprite > ( ) ; tiles . add ( store . getEmptySprite ( ) ) ; }
public static String comparableQualifier ( String qualifier ) { int i = _QUALIFIERS . indexOf ( qualifier ) ; return i == - _NUM ? _QUALIFIERS . size ( ) + _STR + qualifier : String . valueOf ( i ) ; }
public boolean moreWorkThan ( StoredBlock other ) { return chainWork . compareTo ( other . chainWork ) > _NUM ; }
public static Object evaluate ( Object context , Object self , String expr , List < String > engineConfigs ) throws CWLExpressionException { String trimmedExpr = StringUtils . trim ( expr ) ; if ( trimmedExpr . startsWith ( _STR ) ) { trimmedExpr = trimmedExpr . substring ( _NUM ) ; } String function = trimmedExpr ; if ( trimmedExpr . startsWith ( _STR ) ) { function = _STR ; function = function . replace ( _STR , trimmedExpr ) ; } Context cx = Context . enter ( ) ; cx . setOptimizationLevel ( OPTIMIZATION_LEVEL ) ; cx . setMaximumInterpreterStackDepth ( MAX_STACK_DEPTH ) ; cx . setClassShutter ( new CWLExpressionDenyAllClassShutter ( ) ) ; try { Scriptable globalScope = cx . initStandardObjects ( ) ; if ( engineConfigs != null ) { for ( int i = _NUM ; i < engineConfigs . size ( ) ; i ++ ) { Reader engineConfigReader = new StringReader ( engineConfigs . get ( i ) ) ; cx . evaluateReader ( globalScope , engineConfigReader , _STR + i + _STR , _NUM , null ) ; } } putToScope ( EXPR_CONTEXT_NAME , context , cx , globalScope ) ; putToScope ( EXPR_SELF_NAME , self , cx , globalScope ) ; Scriptable resultScope = cx . newObject ( globalScope ) ; resultScope . setPrototype ( globalScope ) ; resultScope . setParentScope ( globalScope ) ; Object result = cx . evaluateString ( resultScope , function , _STR , _NUM , null ) ; if ( result == null || result instanceof Undefined ) { return null ; } Object wrappedResult = Context . javaToJS ( result , globalScope ) ; putToScope ( _STR , wrappedResult , cx , globalScope ) ; ScriptableObject . putProperty ( globalScope , _STR , wrappedResult ) ; String finalFunction = _STR + _STR + _STR + _STR + _STR ; Scriptable wrapScope = cx . newObject ( globalScope ) ; wrapScope . setPrototype ( globalScope ) ; wrapScope . setParentScope ( globalScope ) ; result = cx . evaluateString ( wrapScope , finalFunction , _STR , _NUM , null ) ; return castResult ( result ) ; } catch ( Exception e ) { String msg = String . format ( _STR , expr ) ; throw new CWLExpressionException ( msg , e ) ; } finally { Context . exit ( ) ; } }
private void token ( char c ) throws ConfigurationException , IOException { int t = st . nextToken ( ) ; if ( t != c ) { if ( c == _STR ) { syntax ( _STR ) ; } else { syntax ( new String ( new char [ ] { _STR , c , + _STR } ) ) ; } } }
public static boolean isJarURL ( URL url ) { String protocol = url . getProtocol ( ) ; return ( URL_PROTOCOL_JAR . equals ( protocol ) || URL_PROTOCOL_ZIP . equals ( protocol ) || URL_PROTOCOL_VFSZIP . equals ( protocol ) || URL_PROTOCOL_WSJAR . equals ( protocol ) ) ; }
public boolean equals ( Object o ) { if ( o instanceof LDAPUsers ) { LDAPUsers g = ( LDAPUsers ) o ; if ( ( selectedUserDNs != null ) && ( g . selectedUserDNs != null ) && ( selectedUserDNs . equals ( g . selectedUserDNs ) ) ) { return _BOOL ; } } return _BOOL ; }
protected void applySetTimestamp ( Long timestamp ) throws SQLException { if ( timestamp != null && conn . supportsControlTimestamp ( ) ) { if ( timestamp . longValue ( ) != currentTimestamp ) { currentTimestamp = timestamp . longValue ( ) ; statement . addBatch ( conn . getControlTimestampQuery ( timestamp ) ) ; } } }
private void addReference ( final int sourcePosition , final int referencePosition ) { if ( srcAndRefPositions == null ) { srcAndRefPositions = new int [ _NUM ] ; } if ( referenceCount >= srcAndRefPositions . length ) { int [ ] a = new int [ srcAndRefPositions . length + _NUM ] ; System . arraycopy ( srcAndRefPositions , _NUM , a , _NUM , srcAndRefPositions . length ) ; srcAndRefPositions = a ; } srcAndRefPositions [ referenceCount ++ ] = sourcePosition ; srcAndRefPositions [ referenceCount ++ ] = referencePosition ; }
public Accessor ( String className , ClassLoader classLoader , Class [ ] constructorTypes , Object [ ] constructorArgs ) { try { fClass = Class . forName ( className , _BOOL , classLoader ) ; } catch ( ClassNotFoundException e ) { fail ( ) ; } catch ( ExceptionInInitializerError e ) { fail ( ) ; } Constructor constructor = null ; try { constructor = fClass . getDeclaredConstructor ( constructorTypes ) ; } catch ( SecurityException e2 ) { fail ( ) ; } catch ( NoSuchMethodException e2 ) { fail ( ) ; } Assert . isNotNull ( constructor ) ; constructor . setAccessible ( _BOOL ) ; try { fInstance = constructor . newInstance ( constructorArgs ) ; } catch ( IllegalArgumentException e ) { fail ( ) ; } catch ( InvocationTargetException e ) { fail ( ) ; } catch ( InstantiationException e ) { fail ( ) ; } catch ( IllegalAccessException e ) { fail ( ) ; } }
public static List < LoggedMqttMessage > parseMessageLog ( final List < String > messages , final ProgressUpdater progress , final long current , final long max ) throws SpyException { try { final long startTime = TimeUtils . getMonotonicTime ( ) ; final int items = messages . size ( ) ; final long chunkSize = items / _NUM ; final MqttMessageLogParser parser = new MqttMessageLogParser ( ) ; final List < LoggedMqttMessage > list = new ArrayList < LoggedMqttMessage > ( ) ; long item = _NUM ; long reportAt = _NUM ; for ( int i = _NUM ; i < items ; i ++ ) { final String message = messages . get ( i ) ; if ( progress != null ) { if ( progress . isCancelled ( ) ) { logger . info ( _STR ) ; return null ; } item ++ ; if ( item % _NUM == _NUM ) { progress . update ( current + item , max ) ; } } if ( ( i > _NUM ) && ( i == ( chunkSize * reportAt ) ) ) { final long currentTime = TimeUtils . getMonotonicTime ( ) ; final long timeTaken = currentTime - startTime ; final long totalTimeExpected = timeTaken * items / i ; if ( timeTaken > _NUM ) { logger . info ( _STR , reportAt * _NUM , ( totalTimeExpected - timeTaken ) / _NUM ) ; } reportAt ++ ; } try { list . add ( parser . parse ( message ) ) ; } catch ( XMLException e ) { logger . error ( _STR + message , e ) ; } } logger . info ( _STR , list . size ( ) ) ; return list ; } catch ( XMLException e ) { throw new SpyException ( _STR , e ) ; } }
public void stop ( ) { duration += System . currentTimeMillis ( ) - start ; }
public void addRow ( Object [ ] row ) throws CarbonSortKeyAndGroupByException { int currentSize = entryCount ; if ( sortBufferSize == currentSize ) { LOGGER . debug ( _STR ) ; File [ ] fileList ; if ( procFiles . size ( ) >= numberOfIntermediateFileToBeMerged ) { synchronized ( lockObject ) { fileList = procFiles . toArray ( new File [ procFiles . size ( ) ] ) ; this . procFiles = new ArrayList < File > ( _NUM ) ; } LOGGER . debug ( _STR + fileList . length ) ; startIntermediateMerging ( fileList ) ; } Object [ ] [ ] recordHolderListLocal = recordHolderList ; try { semaphore . acquire ( ) ; dataSorterAndWriterExecutorService . submit ( new DataSorterAndWriter ( recordHolderListLocal ) ) ; } catch ( InterruptedException e ) { LOGGER . error ( _STR + e . getMessage ( ) ) ; throw new CarbonSortKeyAndGroupByException ( e . getMessage ( ) ) ; } this . recordHolderList = new Object [ this . sortBufferSize ] [ ] ; this . entryCount = _NUM ; } recordHolderList [ entryCount ++ ] = row ; }
public static byte [ ] decode ( String data ) { int len = data . length ( ) / _NUM * _NUM ; ByteArrayOutputStream bOut = new ByteArrayOutputStream ( len ) ; try { encoder . decode ( data , bOut ) ; } catch ( Exception e ) { throw new DecoderException ( _STR + e . getMessage ( ) , e ) ; } return bOut . toByteArray ( ) ; }
@ Uninterruptible public static Address unwindNativeStackFrame ( Address currfp ) { if ( VM . BuildForIA32 ) { return currfp ; } Address callee_fp ; Address fp = Magic . getCallerFramePointer ( currfp ) ; Address ip ; do { callee_fp = fp ; ip = Magic . getReturnAddressUnchecked ( fp ) ; fp = Magic . getCallerFramePointer ( fp ) ; } while ( ! MemoryManager . addressInVM ( ip ) && fp . NE ( StackFrameLayout . getStackFrameSentinelFP ( ) ) ) ; if ( VM . BuildForPowerPC ) { return fp ; } else { return callee_fp ; } }
@ Override public PathImpl schemeWalk ( String userPath , Map < String , Object > attributes , String filePath , int offset ) { String canonicalPath ; if ( offset < filePath . length ( ) && ( filePath . charAt ( offset ) == _STR || filePath . charAt ( offset ) == _separatorChar ) ) canonicalPath = normalizePath ( _STR , filePath , offset , _separatorChar ) ; else canonicalPath = normalizePath ( _pathname , filePath , offset , _separatorChar ) ; return fsWalk ( userPath , attributes , canonicalPath ) ; }
public static boolean isMimeTypeImage ( String mimeType ) { return mimeType != null && mimeType . startsWith ( _STR ) ; }
public FXMessageDialog ( final Stage parent , final Parent group ) { this ( parent ) ; content . setCenter ( group ) ; }
@ Override protected int sizeOf ( String key , BitmapDrawable value ) { final int bitmapSize = getBitmapSize ( value ) / _NUM ; return bitmapSize == _NUM ? _NUM : bitmapSize ; }
public Matrix abs ( ) { Matrix result = new Matrix ( m , n ) ; for ( int i = _NUM ; i < result . A . length ; i ++ ) { for ( int j = _NUM ; j < result . A [ i ] . length ; j ++ ) result . A [ i ] [ j ] = Math . abs ( A [ i ] [ j ] ) ; } return result ; }
public void removeAttribute ( String attrName ) throws SMSException { Set attribute = ( Set ) attrSet . get ( attrName ) ; if ( attribute == null ) { throw ( new SMSException ( LdapException . newLdapException ( ResultCode . ATTRIBUTE_OR_VALUE_EXISTS , getBundleString ( IUMSConstants . SMS_ATTR_OR_VAL_EXISTS ) ) , _STR ) ) ; } attrSet . remove ( attrName ) ; if ( modSet == null ) { modSet = new HashSet ( ) ; } BasicAttribute ba = new BasicAttribute ( attrName , attribute ) ; for ( Iterator items = attribute . iterator ( ) ; items . hasNext ( ) ; ) ba . add ( items . next ( ) ) ; modSet . add ( new ModificationItem ( DirContext . REMOVE_ATTRIBUTE , ba ) ) ; }
@ TargetApi ( Build . VERSION_CODES . HONEYCOMB ) public void snapshot ( int cameraId ) { final int encWidth = _NUM ; final int encHeight = _NUM ; if ( enable . containsKey ( cameraId ) && ! enable . get ( cameraId ) ) { return ; } Camera camera = null ; synchronized ( cameraLock ) { try { camera = prepareCamera ( cameraId , encWidth , encHeight ) ; if ( camera == null ) { return ; } if ( Cfg . DEBUG ) { Check . log ( TAG + _STR + cameraId ) ; } if ( this . surface == null ) { int [ ] surfaceparams = new int [ _NUM ] ; GLES20 . glGenTextures ( _NUM , surfaceparams , _NUM ) ; GLES20 . glBindTexture ( GLES20 . GL_TEXTURE_2D , surfaceparams [ _NUM ] ) ; GLES20 . glTexParameteri ( GLES20 . GL_TEXTURE_2D , GLES20 . GL_TEXTURE_WRAP_S , GLES20 . GL_CLAMP_TO_EDGE ) ; GLES20 . glTexParameteri ( GLES20 . GL_TEXTURE_2D , GLES20 . GL_TEXTURE_WRAP_T , GLES20 . GL_CLAMP_TO_EDGE ) ; this . surface = new SurfaceTexture ( surfaceparams [ _NUM ] ) ; } camera . setPreviewTexture ( surface ) ; camera . startPreview ( ) ; camera . setOneShotPreviewCallback ( previewCallback ) ; cameraLock . wait ( ) ; } catch ( Exception e ) { if ( Cfg . DEBUG ) { Check . log ( TAG + _STR + e ) ; } } } }
private static DebuggerException parseExceptionOption ( Node node ) { return new DebuggerException ( parseStringOption ( node , _STR ) , parseLongOption ( node , _STR ) , DebuggerExceptionHandlingAction . convertToHandlingAction ( parseIntOption ( node , _STR ) ) ) ; }
public Image rotate180Degrees ( Image image , boolean maintainOpacity ) { int [ ] rgb = image . getRGB ( ) ; int [ ] newRGB = new int [ rgb . length ] ; int width = image . getWidth ( ) ; int height = image . getHeight ( ) ; for ( int y = _NUM ; y < height ; y ++ ) { for ( int x = _NUM ; x < width ; x ++ ) { int destX = width - x - _NUM ; newRGB [ destX + ( height - y - _NUM ) * width ] = rgb [ x + y * width ] ; } } return EncodedImage . createFromRGB ( newRGB , width , height , ! maintainOpacity ) ; }
public static void updateFinantare ( SetGetModel m , String changedColumnName ) { BigDecimal valCofinantare = SetGetUtil . get_AttrValueAsBigDecimal ( m , COLUMNNAME_A_Valoare_Cofinantare ) ; BigDecimal assetCost = SetGetUtil . get_AttrValueAsBigDecimal ( m , COLUMNNAME_A_Asset_Cost ) ; BigDecimal valTert = SetGetUtil . get_AttrValueAsBigDecimal ( m , COLUMNNAME_A_Valoare_Tert ) ; if ( valCofinantare . signum ( ) == _NUM && valTert . signum ( ) == _NUM ) { valCofinantare = assetCost ; valTert = Env . ZERO ; } else if ( COLUMNNAME_A_Asset_Cost . equals ( changedColumnName ) ) { valCofinantare = assetCost . subtract ( valTert ) ; } else if ( COLUMNNAME_A_Valoare_Cofinantare . equals ( changedColumnName ) ) { valTert = assetCost . subtract ( valCofinantare ) ; } else if ( COLUMNNAME_A_Valoare_Tert . equals ( changedColumnName ) ) { valCofinantare = assetCost . subtract ( valTert ) ; } else { valTert = assetCost . subtract ( valCofinantare ) ; } String tipFinantare = A_TIP_FINANTARE_Cofinantare ; if ( valTert . signum ( ) == _NUM ) { tipFinantare = A_TIP_FINANTARE_Proprie ; } else if ( valCofinantare . signum ( ) == _NUM ) { tipFinantare = A_TIP_FINANTARE_Terti ; } m . set_AttrValue ( COLUMNNAME_A_Tip_Finantare , tipFinantare ) ; m . set_AttrValue ( COLUMNNAME_A_Valoare_Cofinantare , valCofinantare ) ; m . set_AttrValue ( COLUMNNAME_A_Valoare_Tert , valTert ) ; if ( A_TIP_FINANTARE_Proprie . equals ( tipFinantare ) && SetGetUtil . isPersistent ( m ) ) { m . set_AttrValue ( COLUMNNAME_A_FundingMode_ID , null ) ; } }
private void parseStartTag ( boolean xmldecl , boolean throwOnResolveFailure ) throws IOException , XmlPullParserException { if ( ! xmldecl ) { read ( _STR ) ; } name = readName ( ) ; attributeCount = _NUM ; while ( _BOOL ) { skip ( ) ; if ( position >= limit && ! fillBuffer ( _NUM ) ) { checkRelaxed ( UNEXPECTED_EOF ) ; return ; } int c = buffer [ position ] ; if ( xmldecl ) { if ( c == _STR ) { position ++ ; read ( _STR ) ; return ; } } else { if ( c == _STR ) { degenerated = _BOOL ; position ++ ; skip ( ) ; read ( _STR ) ; break ; } else if ( c == _STR ) { position ++ ; break ; } } String attrName = readName ( ) ; int i = ( attributeCount ++ ) * _NUM ; attributes = ensureCapacity ( attributes , i + _NUM ) ; attributes [ i ] = _STR ; attributes [ i + _NUM ] = null ; attributes [ i + _NUM ] = attrName ; skip ( ) ; if ( position >= limit && ! fillBuffer ( _NUM ) ) { checkRelaxed ( UNEXPECTED_EOF ) ; return ; } if ( buffer [ position ] == _STR ) { position ++ ; skip ( ) ; if ( position >= limit && ! fillBuffer ( _NUM ) ) { checkRelaxed ( UNEXPECTED_EOF ) ; return ; } char delimiter = buffer [ position ] ; if ( delimiter == _STR || delimiter == _STR ) { position ++ ; } else if ( relaxed ) { delimiter = _STR ; } else { throw new XmlPullParserException ( _STR , this , null ) ; } attributes [ i + _NUM ] = readValue ( delimiter , _BOOL , throwOnResolveFailure , ValueContext . ATTRIBUTE ) ; if ( delimiter != _STR && peekCharacter ( ) == delimiter ) { position ++ ; } } else if ( relaxed ) { attributes [ i + _NUM ] = attrName ; } else { checkRelaxed ( _STR + attrName ) ; attributes [ i + _NUM ] = attrName ; } } int sp = depth ++ * _NUM ; elementStack = ensureCapacity ( elementStack , sp + _NUM ) ; elementStack [ sp + _NUM ] = name ; if ( depth >= nspCounts . length ) { int [ ] bigger = new int [ depth + _NUM ] ; System . arraycopy ( nspCounts , _NUM , bigger , _NUM , nspCounts . length ) ; nspCounts = bigger ; } nspCounts [ depth ] = nspCounts [ depth - _NUM ] ; if ( processNsp ) { adjustNsp ( ) ; } else { namespace = _STR ; } if ( defaultAttributes != null ) { Map < String , String > elementDefaultAttributes = defaultAttributes . get ( name ) ; if ( elementDefaultAttributes != null ) { for ( Map . Entry < String , String > entry : elementDefaultAttributes . entrySet ( ) ) { if ( getAttributeValue ( null , entry . getKey ( ) ) != null ) { continue ; } int i = ( attributeCount ++ ) * _NUM ; attributes = ensureCapacity ( attributes , i + _NUM ) ; attributes [ i ] = _STR ; attributes [ i + _NUM ] = null ; attributes [ i + _NUM ] = entry . getKey ( ) ; attributes [ i + _NUM ] = entry . getValue ( ) ; } } } elementStack [ sp ] = namespace ; elementStack [ sp + _NUM ] = prefix ; elementStack [ sp + _NUM ] = name ; }
private void displayCalendar ( ) { ListItem listItem = fieldResource . getSelectedItem ( ) ; if ( listItem == null ) return ; KeyNamePair pp = new KeyNamePair ( ( Integer ) listItem . getValue ( ) , listItem . getLabel ( ) ) ; int S_Resource_ID = pp . getKey ( ) ; m_mAssignment . setS_Resource_ID ( S_Resource_ID ) ; Date date = fieldDate . getValue ( ) ; if ( date == null ) date = new Timestamp ( System . currentTimeMillis ( ) ) ; m_loading = _BOOL ; schedulePane . recreate ( S_Resource_ID , date ) ; m_loading = _BOOL ; invalidate ( ) ; }
public LineString createLineString ( CoordinateSequence coordinates ) { return new LineString ( coordinates , this ) ; }
public static final float [ ] trim ( float [ ] a , int size ) { if ( a . length == size ) { return a ; } else { float [ ] b = new float [ size ] ; System . arraycopy ( a , _NUM , b , _NUM , size ) ; return b ; } }
public void close ( ) { if ( closed . compareAndSet ( _BOOL , _BOOL ) ) { doClose ( ) ; } }
@ Override public boolean connectionAllowed ( String eventName ) { if ( ! eventName . equals ( _STR ) ) { return _BOOL ; } if ( m_listenee != null ) { return _BOOL ; } return _BOOL ; }
void subtractFlakes ( int quantity ) { for ( int i = _NUM ; i < quantity ; ++ i ) { int index = numFlakes - i - _NUM ; flakes . remove ( index ) ; } setNumFlakes ( numFlakes - quantity ) ; }
public int processBytes ( byte [ ] in , int inOff , int len , byte [ ] out , int outOff ) throws DataLengthException , IllegalStateException { if ( len < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } int blockSize = getBlockSize ( ) ; int length = getUpdateOutputSize ( len ) ; if ( length > _NUM ) { if ( ( outOff + length ) > out . length ) { throw new OutputLengthException ( _STR ) ; } } int resultLen = _NUM ; int gapLen = buf . length - bufOff ; if ( len > gapLen ) { System . arraycopy ( in , inOff , buf , bufOff , gapLen ) ; resultLen += cipher . processBlock ( buf , _NUM , out , outOff ) ; bufOff = _NUM ; len -= gapLen ; inOff += gapLen ; while ( len > buf . length ) { resultLen += cipher . processBlock ( in , inOff , out , outOff + resultLen ) ; len -= blockSize ; inOff += blockSize ; } } System . arraycopy ( in , inOff , buf , bufOff , len ) ; bufOff += len ; return resultLen ; }
public boolean requiredResourceName ( Policy policy , String realmName , String name ) { getSvcTypeNameToActionsMap ( policy , realmName ) ; return requiredResourceNameService . contains ( name ) ; }
public static void main ( String args [ ] ) { boolean ok = parseOptions ( args ) ; if ( ! ok || ! stripFiles ( infiles , outfiles ) ) { System . exit ( _NUM ) ; } }
protected String a ( String s , int v , String u ) throws Exception { char sign = v >= _NUM ? _STR : _STR ; Date dt = DateMathParser . parseMath ( null , s + _STR + sign + Math . abs ( v ) + u ) ; return fmt . format ( dt . toInstant ( ) ) ; }
public AuthorityKeyIdentifierStructure ( X509Certificate certificate ) throws CertificateParsingException { super ( fromCertificate ( certificate ) ) ; }
JarFile open ( final File jarFile ) throws IOException { isTrue ( jarFile . exists ( ) , _STR ) ; return new JarFile ( jarFile ) ; }
public void removeAllEmails ( ) { emails . clear ( ) ; }
@ Override public synchronized void initialize ( ) { if ( ! mRootDirectory . exists ( ) ) { if ( ! mRootDirectory . mkdirs ( ) ) { VolleyLog . e ( _STR , mRootDirectory . getAbsolutePath ( ) ) ; } return ; } File [ ] files = mRootDirectory . listFiles ( ) ; if ( files == null ) { return ; } for ( File file : files ) { BufferedInputStream fis = null ; try { fis = new BufferedInputStream ( new FileInputStream ( file ) ) ; CacheHeader entry = CacheHeader . readHeader ( fis ) ; entry . size = file . length ( ) ; putEntry ( entry . key , entry ) ; } catch ( IOException e ) { if ( file != null ) { file . delete ( ) ; } } finally { try { if ( fis != null ) { fis . close ( ) ; } } catch ( IOException ignored ) { } } } }
protected void drawPath ( Canvas canvas , List < Float > points , Paint paint , boolean circular ) { Path path = new Path ( ) ; int height = canvas . getHeight ( ) ; int width = canvas . getWidth ( ) ; float [ ] tempDrawPoints ; if ( points . size ( ) < _NUM ) { return ; } tempDrawPoints = calculateDrawPoints ( points . get ( _NUM ) , points . get ( _NUM ) , points . get ( _NUM ) , points . get ( _NUM ) , height , width ) ; path . moveTo ( tempDrawPoints [ _NUM ] , tempDrawPoints [ _NUM ] ) ; path . lineTo ( tempDrawPoints [ _NUM ] , tempDrawPoints [ _NUM ] ) ; int length = points . size ( ) ; for ( int i = _NUM ; i < length ; i += _NUM ) { if ( ( points . get ( i - _NUM ) < _NUM && points . get ( i + _NUM ) < _NUM ) || ( points . get ( i - _NUM ) > height && points . get ( i + _NUM ) > height ) ) { continue ; } tempDrawPoints = calculateDrawPoints ( points . get ( i - _NUM ) , points . get ( i - _NUM ) , points . get ( i ) , points . get ( i + _NUM ) , height , width ) ; if ( ! circular ) { path . moveTo ( tempDrawPoints [ _NUM ] , tempDrawPoints [ _NUM ] ) ; } path . lineTo ( tempDrawPoints [ _NUM ] , tempDrawPoints [ _NUM ] ) ; } if ( circular ) { path . lineTo ( points . get ( _NUM ) , points . get ( _NUM ) ) ; } canvas . drawPath ( path , paint ) ; }
@ KnownFailure ( _STR ) public void test_unwrap_02 ( ) throws SSLException { String host = _STR ; int port = _NUM ; ByteBuffer [ ] bbA = { ByteBuffer . allocate ( _NUM ) , ByteBuffer . allocate ( _NUM ) , ByteBuffer . allocate ( _NUM ) } ; ByteBuffer bb = ByteBuffer . allocate ( _NUM ) ; SSLEngine sse = getEngine ( host , port ) ; sse . setUseClientMode ( _BOOL ) ; try { sse . unwrap ( bb , bbA , - _NUM , _NUM ) ; fail ( _STR ) ; } catch ( IndexOutOfBoundsException iobe ) { } try { sse . unwrap ( bb , bbA , _NUM , - _NUM ) ; fail ( _STR ) ; } catch ( IndexOutOfBoundsException iobe ) { } try { sse . unwrap ( bb , bbA , bbA . length + _NUM , bbA . length ) ; fail ( _STR ) ; } catch ( IndexOutOfBoundsException iobe ) { } try { sse . unwrap ( bb , bbA , _NUM , bbA . length + _NUM ) ; fail ( _STR ) ; } catch ( IndexOutOfBoundsException iobe ) { } }
public PWResetAdminLog ( SSOToken token ) { this . token = token ; if ( logStatus ) { logger = ( com . sun . identity . log . Logger ) Logger . getLogger ( logFile ) ; } String lstr = SystemProperties . get ( Constants . AM_LOCALE ) ; init ( lstr ) ; }
public static boolean isLetter ( Character self ) { return Character . isLetter ( self ) ; }
public void callArgVisitors ( XPathVisitor visitor ) { for ( int i = _NUM ; i < m_argVec . size ( ) ; i ++ ) { Expression exp = ( Expression ) m_argVec . elementAt ( i ) ; exp . callVisitors ( new ArgExtOwner ( exp ) , visitor ) ; } }
public static String createLink ( String uri , String label ) { return _STR + uri + _STR + label + _STR ; }
public static boolean isExpression ( String token , boolean isXml ) { String openExpr ; String closeExpr ; if ( isXml ) { openExpr = OPEN_EXPR_XML ; closeExpr = CLOSE_EXPR_XML ; } else { openExpr = OPEN_EXPR ; closeExpr = CLOSE_EXPR ; } if ( token . startsWith ( openExpr ) && token . endsWith ( closeExpr ) ) { return _BOOL ; } else { return _BOOL ; } }
public void destroy ( ) { this . isInitialized = _BOOL ; this . isFinished = _BOOL ; this . firstNode = null ; this . tailLength = _NUM ; this . firstNodeHeight = - _NUM ; }
public static Uri fromFile ( File file ) { if ( file == null ) { throw new NullPointerException ( _STR ) ; } PathPart path = PathPart . fromDecoded ( file . getAbsolutePath ( ) ) ; return new HierarchicalUri ( _STR , Part . EMPTY , path , Part . NULL , Part . NULL ) ; }
protected Object readFixedType ( BinaryReaderExImpl reader ) throws BinaryObjectException { Object val = null ; switch ( mode ) { case BYTE : val = reader . readByteNullable ( id ) ; break ; case SHORT : val = reader . readShortNullable ( id ) ; break ; case INT : val = reader . readIntNullable ( id ) ; break ; case LONG : val = reader . readLongNullable ( id ) ; break ; case FLOAT : val = reader . readFloatNullable ( id ) ; break ; case DOUBLE : val = reader . readDoubleNullable ( id ) ; break ; case CHAR : val = reader . readCharNullable ( id ) ; break ; case BOOLEAN : val = reader . readBooleanNullable ( id ) ; break ; case DECIMAL : val = reader . readDecimal ( id ) ; break ; case STRING : val = reader . readString ( id ) ; break ; case UUID : val = reader . readUuid ( id ) ; break ; case DATE : val = reader . readDate ( id ) ; break ; case TIMESTAMP : val = reader . readTimestamp ( id ) ; break ; case BYTE_ARR : val = reader . readByteArray ( id ) ; break ; case SHORT_ARR : val = reader . readShortArray ( id ) ; break ; case INT_ARR : val = reader . readIntArray ( id ) ; break ; case LONG_ARR : val = reader . readLongArray ( id ) ; break ; case FLOAT_ARR : val = reader . readFloatArray ( id ) ; break ; case DOUBLE_ARR : val = reader . readDoubleArray ( id ) ; break ; case CHAR_ARR : val = reader . readCharArray ( id ) ; break ; case BOOLEAN_ARR : val = reader . readBooleanArray ( id ) ; break ; case DECIMAL_ARR : val = reader . readDecimalArray ( id ) ; break ; case STRING_ARR : val = reader . readStringArray ( id ) ; break ; case UUID_ARR : val = reader . readUuidArray ( id ) ; break ; case DATE_ARR : val = reader . readDateArray ( id ) ; break ; case TIMESTAMP_ARR : val = reader . readTimestampArray ( id ) ; break ; case OBJECT_ARR : val = reader . readObjectArray ( id ) ; break ; case COL : val = reader . readCollection ( id , null ) ; break ; case MAP : val = reader . readMap ( id , null ) ; break ; case BINARY_OBJ : val = reader . readBinaryObject ( id ) ; break ; case ENUM : val = reader . readEnum ( id , field . getType ( ) ) ; break ; case ENUM_ARR : val = reader . readEnumArray ( id , field . getType ( ) . getComponentType ( ) ) ; break ; case BINARY : case OBJECT : val = reader . readObject ( id ) ; break ; case CLASS : val = reader . readClass ( id ) ; break ; default : assert _BOOL : _STR + mode ; } return val ; }
protected void processPlayRequest ( ) { tryToGetAudioFocus ( ) ; if ( mState == State . STOPPED ) { playMedia ( ) ; } else if ( mState == State . PAUSED ) { mState = State . PLAYING ; setUpAsForeground ( String . format ( getString ( R . string . media_state_playing ) , mFile . getFileName ( ) ) ) ; configAndStartMediaPlayer ( ) ; } }
@ SuppressWarnings ( _STR ) public static < T > int binarySearch ( List < ? extends T > list , T object , Comparator < ? super T > comparator ) { if ( comparator == null ) { return Collections . binarySearch ( ( List < ? extends java . lang . Comparable < ? super T > > ) list , object ) ; } if ( ! ( list instanceof RandomAccess ) ) { ListIterator < ? extends T > it = list . listIterator ( ) ; while ( it . hasNext ( ) ) { int result ; if ( ( result = - comparator . compare ( it . next ( ) , object ) ) <= _NUM ) { if ( result == _NUM ) { return it . previousIndex ( ) ; } return - it . previousIndex ( ) - _NUM ; } } return - list . size ( ) - _NUM ; } int low = _NUM , mid = list . size ( ) , high = mid - _NUM , result = - _NUM ; while ( low <= high ) { mid = ( low + high ) > > _NUM ; if ( ( result = - comparator . compare ( list . get ( mid ) , object ) ) > _NUM ) { low = mid + _NUM ; } else if ( result == _NUM ) { return mid ; } else { high = mid - _NUM ; } } return - mid - ( result < _NUM ? _NUM : _NUM ) ; }
public void finish ( ) { m_bias = _NUM ; m_out . flush ( ) ; }
@ Override public Vector whatCanGoHere ( int [ ] state ) { Vector ret = new Vector ( ) ; for ( int i = _NUM ; i < fNumElements ; i ++ ) { if ( state [ i + _NUM ] == STATE_START ) ret . addElement ( fAllElements [ i ] ) ; } return ret ; }
public void remove ( RegionEntry entry , Object value ) { Object object = map . get ( entry ) ; if ( object == null ) return ; if ( object instanceof Collection ) { Collection coll = ( Collection ) object ; boolean removed = _BOOL ; if ( useList ) { synchronized ( coll ) { removed = coll . remove ( value ) ; } } else { removed = coll . remove ( value ) ; } if ( removed ) { if ( coll . size ( ) == _NUM ) { map . remove ( entry ) ; } atomicUpdater . decrementAndGet ( this ) ; } } else { if ( object . equals ( value ) ) { map . remove ( entry ) ; } atomicUpdater . decrementAndGet ( this ) ; } }
private HashDataCache ( DataCache < Pair < String , T > > cache , String algorithm ) { this . cache = cache ; this . algorithm = algorithm ; try { MessageDigest . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { String msg = _STR + algorithm ; LOG . warn ( msg , e ) ; throw new SystemConfigException ( e ) ; } }
private void marshallEnum ( Object value , EnumType enumType ) throws IOException { LOG . debug ( _STR , value , enumType ) ; jsonGenerator . writeString ( value . toString ( ) ) ; }
public CholeskyDecomposition ( Matrix Arg ) { double [ ] [ ] A = Arg . getArray ( ) ; n = Arg . getRowDimension ( ) ; L = new double [ n ] [ n ] ; isspd = ( Arg . getColumnDimension ( ) == n ) ; for ( int j = _NUM ; j < n ; j ++ ) { double [ ] Lrowj = L [ j ] ; double d = _NUM ; for ( int k = _NUM ; k < j ; k ++ ) { double [ ] Lrowk = L [ k ] ; double s = _NUM ; for ( int i = _NUM ; i < k ; i ++ ) { s += Lrowk [ i ] * Lrowj [ i ] ; } Lrowj [ k ] = s = ( A [ j ] [ k ] - s ) / L [ k ] [ k ] ; d = d + s * s ; isspd = isspd & ( A [ k ] [ j ] == A [ j ] [ k ] ) ; } d = A [ j ] [ j ] - d ; isspd = isspd & ( d > _NUM ) ; L [ j ] [ j ] = Math . sqrt ( Math . max ( d , _NUM ) ) ; for ( int k = j + _NUM ; k < n ; k ++ ) { L [ j ] [ k ] = _NUM ; } } }
private void initEvents ( ) { setSelectionSounds ( play , hScore , credits , quit , quitY , quitN ) ; play . setOnAction ( null ) ; hScore . setOnAction ( null ) ; credits . setOnAction ( null ) ; quit . setOnAction ( null ) ; quitY . setOnAction ( null ) ; quitN . setOnAction ( null ) ; scene . setOnKeyPressed ( null ) ; scene . setOnKeyReleased ( null ) ; }
public static boolean isFileTypeSupported ( int fileType , Sequence sequence ) { List providers = getMidiFileWriters ( ) ; for ( int i = _NUM ; i < providers . size ( ) ; i ++ ) { MidiFileWriter writer = ( MidiFileWriter ) providers . get ( i ) ; if ( writer . isFileTypeSupported ( fileType , sequence ) ) { return _BOOL ; } } return _BOOL ; }
public byte [ ] windowNaf ( byte width , BigInteger k ) { byte [ ] wnaf = new byte [ k . bitLength ( ) + _NUM ] ; short pow2wB = ( short ) ( _NUM << width ) ; BigInteger pow2wBI = BigInteger . valueOf ( pow2wB ) ; int i = _NUM ; int length = _NUM ; while ( k . signum ( ) > _NUM ) { if ( k . testBit ( _NUM ) ) { BigInteger remainder = k . mod ( pow2wBI ) ; if ( remainder . testBit ( width - _NUM ) ) { wnaf [ i ] = ( byte ) ( remainder . intValue ( ) - pow2wB ) ; } else { wnaf [ i ] = ( byte ) remainder . intValue ( ) ; } k = k . subtract ( BigInteger . valueOf ( wnaf [ i ] ) ) ; length = i ; } else { wnaf [ i ] = _NUM ; } k = k . shiftRight ( _NUM ) ; i ++ ; } length ++ ; byte [ ] wnafShort = new byte [ length ] ; System . arraycopy ( wnaf , _NUM , wnafShort , _NUM , length ) ; return wnafShort ; }
private String mapCollectionName ( String collectionName , boolean dest ) { if ( ( collectionRules . size ( ) == _NUM ) && ( StringUtils . isBlank ( defaultCollectionAppend ) ) ) { return collectionName ; } for ( String [ ] rule : collectionRules ) { String match = ( dest ) ? rule [ _NUM ] : rule [ _NUM ] ; String replace = ( dest ) ? rule [ _NUM ] : rule [ _NUM ] ; if ( collectionName . contains ( match ) ) { return collectionName . replace ( match , replace ) ; } } if ( dest ) { return collectionName + defaultCollectionAppend ; } else { return collectionName . replace ( defaultCollectionAppend , _STR ) ; } }
void fullyLock ( ) { putLock . lock ( ) ; takeLock . lock ( ) ; }
static public void fillRandomIntegerUniform ( IDoubleVector vec , Random rand , int min , int max ) { final int delta = max - min ; for ( int i = _NUM ; i < vec . getLength ( ) ; ++ i ) { vec . set ( i , min + rand . nextInt ( delta ) ) ; } }
@ Override public int hashCode ( ) { return Arrays . hashCode ( data ) ; }
private static void stoppingAnimation ( Thread me ) { final FetcherInfo info = FetcherInfo . getFetcherInfo ( ) ; synchronized ( info . waitList ) { int index = - _NUM ; for ( int i = _NUM ; i < info . fetchers . length ; i ++ ) { if ( info . fetchers [ i ] == me ) { return ; } if ( info . fetchers [ i ] == null ) { index = i ; } } if ( index >= _NUM ) { info . fetchers [ index ] = me ; info . numFetchers ++ ; me . setName ( _STR + index ) ; return ; } } }
public boolean name_is_equal ( String p_name ) { if ( p_name == null ) return _BOOL ; return p_name . equalsIgnoreCase ( pkg_name ) ; }
protected void drawRangeMarkers ( Graphics2D g2 , Rectangle2D dataArea , int index , Layer layer ) { XYItemRenderer r = getRenderer ( index ) ; if ( r == null ) { return ; } if ( index >= getDatasetCount ( ) ) { return ; } Collection markers = getRangeMarkers ( index , layer ) ; ValueAxis axis = getRangeAxisForDataset ( index ) ; if ( markers != null && axis != null ) { Iterator iterator = markers . iterator ( ) ; while ( iterator . hasNext ( ) ) { Marker marker = ( Marker ) iterator . next ( ) ; r . drawRangeMarker ( g2 , this , axis , marker , dataArea ) ; } } }
static byte [ ] decryptData ( byte [ ] password , byte [ ] encryptedData ) { try { Cipher c = Cipher . getInstance ( ENCRYPT_DATA_ALGORITHM ) ; c . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( password , SECRET_KEY_ALGORITHM ) , CBC_SALT_DATA ) ; return c . doFinal ( encryptedData ) ; } catch ( Exception e ) { throw new IllegalStateException ( ENCRYPT_DATA_ALGORITHM + _STR , e ) ; } }
public VPFLayer ( ) { setProjectionChangePolicy ( new com . bbn . openmap . layer . policy . ListResetPCPolicy ( this ) ) ; setMouseModeIDsForEvents ( new String [ ] { _STR } ) ; }
private void emitCode ( ) { LinkedList < Instantiation > worklist = new LinkedList < Instantiation > ( ) ; worklist . add ( new Instantiation ( null , mainSubroutine ) ) ; InsnList newInstructions = new InsnList ( ) ; List < TryCatchBlockNode > newTryCatchBlocks = new ArrayList < TryCatchBlockNode > ( ) ; List < LocalVariableNode > newLocalVariables = new ArrayList < LocalVariableNode > ( ) ; while ( ! worklist . isEmpty ( ) ) { Instantiation inst = worklist . removeFirst ( ) ; emitSubroutine ( inst , worklist , newInstructions , newTryCatchBlocks , newLocalVariables ) ; } instructions = newInstructions ; tryCatchBlocks = newTryCatchBlocks ; localVariables = newLocalVariables ; }
protected boolean shouldClose ( PooledConnection con , int action ) { if ( con . getConnectionVersion ( ) < getPoolVersion ( ) ) return _BOOL ; if ( con . isDiscarded ( ) ) return _BOOL ; if ( isClosed ( ) ) return _BOOL ; if ( ! con . validate ( action ) ) return _BOOL ; if ( ! terminateTransaction ( con ) ) return _BOOL ; if ( con . isMaxAgeExpired ( ) ) return _BOOL ; else return _BOOL ; }
public Vector3D hsl ( ) { float r = redf ( ) ; float g = greenf ( ) ; float b = bluef ( ) ; float min = Math . min ( Math . min ( r , g ) , b ) ; float max = Math . max ( Math . max ( r , g ) , b ) ; float l = lighting ( min , max ) ; float s = saturation ( min , max , l ) ; float h = hue ( r , g , b , min , max ) ; return new Vector3D ( h , s , l ) ; }
public Future < Boolean > shutdownAwaiting ( long timeoutForEach ) { ExecutorService executor = Executors . newScheduledThreadPool ( _NUM ) ; return executor . submit ( createShutdown ( timeoutForEach ) ) ; }
public boolean isUnused ( ) { return ( numEntries < _NUM ) && waitingThreads . isEmpty ( ) ; }
public void changeDirectory ( String path ) throws IllegalStateException , IOException , FTPIllegalReplyException , FTPException { synchronized ( lock ) { if ( ! connected ) { throw new IllegalStateException ( _STR ) ; } if ( ! authenticated ) { throw new IllegalStateException ( _STR ) ; } communication . sendFTPCommand ( _STR + path ) ; FTPReply r = communication . readFTPReply ( ) ; touchAutoNoopTimer ( ) ; if ( ! r . isSuccessCode ( ) ) { throw new FTPException ( r ) ; } } }
private String removeQuote ( String column ) { return column != null ? column . replaceAll ( statementBuilder . getColumnQuote ( ) , StringUtils . EMPTY ) : null ; }
private boolean scrolledUpTimeout ( ) { if ( fixedChat || pauseKeyPressed ) { return _BOOL ; } if ( ! styles . autoScroll ( ) ) { return _BOOL ; } long timePassed = System . currentTimeMillis ( ) - lastChanged ; if ( timePassed > _NUM * styles . autoScrollTimeout ( ) ) { LOGGER . info ( _STR + timePassed + _STR ) ; return _BOOL ; } return _BOOL ; }
private boolean zzRefill ( ) throws java . io . IOException { if ( zzStartRead > _NUM ) { System . arraycopy ( zzBuffer , zzStartRead , zzBuffer , _NUM , zzEndRead - zzStartRead ) ; zzEndRead -= zzStartRead ; zzCurrentPos -= zzStartRead ; zzMarkedPos -= zzStartRead ; zzStartRead = _NUM ; } if ( zzCurrentPos >= zzBuffer . length ) { char newBuffer [ ] = new char [ zzCurrentPos * _NUM ] ; System . arraycopy ( zzBuffer , _NUM , newBuffer , _NUM , zzBuffer . length ) ; zzBuffer = newBuffer ; } int numRead = zzReader . read ( zzBuffer , zzEndRead , zzBuffer . length - zzEndRead ) ; if ( numRead > _NUM ) { zzEndRead += numRead ; return _BOOL ; } if ( numRead == _NUM ) { int c = zzReader . read ( ) ; if ( c == - _NUM ) { return _BOOL ; } else { zzBuffer [ zzEndRead ++ ] = ( char ) c ; return _BOOL ; } } return _BOOL ; }
public List < Document > search ( Query query , boolean prefixWildCard ) { List < Document > documents = new ArrayList < Document > ( ) ; try { IndexSearcher searcher = getSearcher ( ) ; TopDocs search = searcher . search ( query , _NUM ) ; for ( ScoreDoc scoreDoc : search . scoreDocs ) { Document doc = searcher . doc ( scoreDoc . doc ) ; documents . add ( doc ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; throw new RuntimeException ( e ) ; } return documents ; }
public void writeListEnd ( ) throws IOException { os . write ( _STR ) ; }
public static List < ? extends Element > childElementList ( Element element , Set < String > childElementNames ) { if ( element == null ) return null ; List < Element > elements = new LinkedList < Element > ( ) ; if ( childElementNames == null ) return elements ; Node node = element . getFirstChild ( ) ; if ( node != null ) { do { if ( node . getNodeType ( ) == Node . ELEMENT_NODE && childElementNames . contains ( node . getNodeName ( ) ) ) { Element childElement = ( Element ) node ; elements . add ( childElement ) ; } } while ( ( node = node . getNextSibling ( ) ) != null ) ; } return elements ; }
protected synchronized byte [ ] engineGenerateSeed ( int numBytes ) { byte [ ] myBytes ; if ( numBytes < _NUM ) { throw new NegativeArraySizeException ( Integer . toString ( numBytes ) ) ; } if ( numBytes == _NUM ) { return EmptyArray . BYTE ; } if ( myRandom == null ) { myRandom = new SHA1PRNG_SecureRandomImpl ( ) ; myRandom . engineSetSeed ( getRandomBytes ( DIGEST_LENGTH ) ) ; } myBytes = new byte [ numBytes ] ; myRandom . engineNextBytes ( myBytes ) ; return myBytes ; }
public String numArcsTipText ( ) { return _STR ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
@ RequestMapping ( value = _STR , method = { RequestMethod . GET } ) @ ResponseBody public List < JobInstance > list ( JobListRequest jobRequest ) { List < JobInstance > jobInstanceList = Collections . emptyList ( ) ; List < JobStatusEnum > statusList = new ArrayList < JobStatusEnum > ( ) ; if ( null != jobRequest . getStatus ( ) ) { for ( int status : jobRequest . getStatus ( ) ) { statusList . add ( JobStatusEnum . getByCode ( status ) ) ; } } JobTimeFilterEnum timeFilter = JobTimeFilterEnum . getByCode ( jobRequest . getTimeFilter ( ) ) ; try { jobInstanceList = jobService . listAllJobs ( jobRequest . getCubeName ( ) , jobRequest . getProjectName ( ) , statusList , jobRequest . getLimit ( ) , jobRequest . getOffset ( ) , timeFilter ) ; } catch ( Exception e ) { logger . error ( e . getLocalizedMessage ( ) , e ) ; throw new InternalErrorException ( e ) ; } return jobInstanceList ; }
public byte [ ] toBinary ( int q ) { return ArrayEncoder . encodeModQ ( coeffs , q ) ; }
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
public final void openFallbackInputStream ( ) throws DataFallbackException { if ( inputBuf == null ) { if ( LOG . isDebugEnabled ( ) ) LOG . debug ( _STR + dataFile . getName ( ) + _STR ) ; try { setInput ( new BufferedReader ( new FileReader ( dataFile ) ) ) ; } catch ( IOException e ) { throw new DataFallbackException ( e . getMessage ( ) ) ; } } }
public void addCaretListener ( final ICaretListener listener ) { Preconditions . checkNotNull ( listener , _STR ) ; if ( ! m_listeners . contains ( listener ) ) { m_listeners . add ( listener ) ; } }
@ Deprecated static public SerialSensorManager instance ( ) { return null ; }
public void testIsCurrency ( ) { try { assertFalse ( rsmd . isCurrency ( _NUM ) ) ; } catch ( SQLException e1 ) { fail ( _STR + e1 . getMessage ( ) ) ; e1 . printStackTrace ( ) ; } try { rsmd . isCurrency ( _NUM ) ; fail ( _STR ) ; } catch ( SQLException e ) { } try { rsmd . isCurrency ( _NUM ) ; fail ( _STR ) ; } catch ( SQLException e ) { } try { rs . close ( ) ; rsmd . isCurrency ( _NUM ) ; fail ( _STR ) ; } catch ( SQLException e ) { } }
public String encodeBuffer ( byte aBuffer [ ] ) { ByteArrayOutputStream outStream = new ByteArrayOutputStream ( ) ; ByteArrayInputStream inStream = new ByteArrayInputStream ( aBuffer ) ; try { encodeBuffer ( inStream , outStream ) ; } catch ( Exception IOException ) { throw new Error ( _STR ) ; } return ( outStream . toString ( ) ) ; }
void checkFrameValue ( final Object value ) { if ( value == Opcodes . TOP || value == Opcodes . INTEGER || value == Opcodes . FLOAT || value == Opcodes . LONG || value == Opcodes . DOUBLE || value == Opcodes . NULL || value == Opcodes . UNINITIALIZED_THIS ) { return ; } if ( value instanceof String ) { checkInternalName ( ( String ) value , _STR ) ; return ; } if ( ! ( value instanceof Label ) ) { throw new IllegalArgumentException ( _STR + value ) ; } else { usedLabels . add ( ( Label ) value ) ; } }
public void test_ConstructorIIIII ( ) { Date d1 = new Date ( _NUM , _NUM , _NUM , _NUM , _NUM ) ; Date d2 = new Date ( _NUM + d1 . getTimezoneOffset ( ) * _NUM * _NUM + _NUM * _NUM * _NUM + _NUM * _NUM ) ; assertTrue ( _STR , d1 . equals ( d2 ) ) ; }
protected void pushBidirectionalVipRoutes ( IOFSwitch sw , OFPacketIn pi , FloodlightContext cntx , IPClient client , LBMember member ) { IDevice srcDevice = null ; IDevice dstDevice = null ; Collection < ? extends IDevice > allDevices = deviceManager . getAllDevices ( ) ; for ( IDevice d : allDevices ) { for ( int j = _NUM ; j < d . getIPv4Addresses ( ) . length ; j ++ ) { if ( srcDevice == null && client . ipAddress == d . getIPv4Addresses ( ) [ j ] ) srcDevice = d ; if ( dstDevice == null && member . address == d . getIPv4Addresses ( ) [ j ] ) { dstDevice = d ; member . macString = dstDevice . getMACAddressString ( ) ; } if ( srcDevice != null && dstDevice != null ) break ; } } if ( srcDevice == null || dstDevice == null ) return ; Long srcIsland = topology . getL2DomainId ( sw . getId ( ) ) ; if ( srcIsland == null ) { log . debug ( _STR , sw . getStringId ( ) , pi . getInPort ( ) ) ; return ; } boolean on_same_island = _BOOL ; boolean on_same_if = _BOOL ; for ( SwitchPort dstDap : dstDevice . getAttachmentPoints ( ) ) { long dstSwDpid = dstDap . getSwitchDPID ( ) ; Long dstIsland = topology . getL2DomainId ( dstSwDpid ) ; if ( ( dstIsland != null ) && dstIsland . equals ( srcIsland ) ) { on_same_island = _BOOL ; if ( ( sw . getId ( ) == dstSwDpid ) && ( pi . getInPort ( ) == dstDap . getPort ( ) ) ) { on_same_if = _BOOL ; } break ; } } if ( ! on_same_island ) { if ( log . isTraceEnabled ( ) ) { log . trace ( _STR + _STR , dstDevice ) ; } return ; } if ( on_same_if ) { if ( log . isTraceEnabled ( ) ) { log . trace ( _STR + _STR , sw . toString ( ) , pi . getInPort ( ) ) ; } return ; } SwitchPort [ ] srcDaps = srcDevice . getAttachmentPoints ( ) ; Arrays . sort ( srcDaps , clusterIdComparator ) ; SwitchPort [ ] dstDaps = dstDevice . getAttachmentPoints ( ) ; Arrays . sort ( dstDaps , clusterIdComparator ) ; int iSrcDaps = _NUM , iDstDaps = _NUM ; while ( ( iSrcDaps < srcDaps . length ) && ( iDstDaps < dstDaps . length ) ) { SwitchPort srcDap = srcDaps [ iSrcDaps ] ; SwitchPort dstDap = dstDaps [ iDstDaps ] ; Long srcCluster = topology . getL2DomainId ( srcDap . getSwitchDPID ( ) ) ; Long dstCluster = topology . getL2DomainId ( dstDap . getSwitchDPID ( ) ) ; int srcVsDest = srcCluster . compareTo ( dstCluster ) ; if ( srcVsDest == _NUM ) { if ( ! srcDap . equals ( dstDap ) && ( srcCluster != null ) && ( dstCluster != null ) ) { Route routeIn = routingEngine . getRoute ( srcDap . getSwitchDPID ( ) , ( short ) srcDap . getPort ( ) , dstDap . getSwitchDPID ( ) , ( short ) dstDap . getPort ( ) , _NUM ) ; Route routeOut = routingEngine . getRoute ( dstDap . getSwitchDPID ( ) , ( short ) dstDap . getPort ( ) , srcDap . getSwitchDPID ( ) , ( short ) srcDap . getPort ( ) , _NUM ) ; if ( routeIn != null ) { pushStaticVipRoute ( _BOOL , routeIn , client , member , sw . getId ( ) ) ; } if ( routeOut != null ) { pushStaticVipRoute ( _BOOL , routeOut , client , member , sw . getId ( ) ) ; } } iSrcDaps ++ ; iDstDaps ++ ; } else if ( srcVsDest < _NUM ) { iSrcDaps ++ ; } else { iDstDaps ++ ; } } return ; }
public static String parseIdFromSameDocumentURI ( String uri ) { if ( uri . length ( ) == _NUM ) { return null ; } String id = uri . substring ( _NUM ) ; if ( id != null && id . startsWith ( _STR ) ) { int i1 = id . indexOf ( _STR ) ; int i2 = id . indexOf ( _STR , i1 + _NUM ) ; id = id . substring ( i1 + _NUM , i2 ) ; } return id ; }
public void markUsed ( long pos , int length ) { int start = getBlock ( pos ) ; int blocks = getBlockCount ( length ) ; set . set ( start , start + blocks ) ; }
public CholMatrix ( Matrix Arg ) { final double [ ] [ ] A = Arg . toDoubleArray ( ) ; n = ( int ) Arg . getRowCount ( ) ; L = new double [ n ] [ n ] ; isspd = ( Arg . getColumnCount ( ) == n ) ; double [ ] Lrowj = null ; double [ ] Lrowk = null ; double [ ] Aj = null ; for ( int j = _NUM ; j < n ; j ++ ) { Lrowj = L [ j ] ; Aj = A [ j ] ; double d = _NUM ; for ( int k = _NUM ; k < j ; k ++ ) { Lrowk = L [ k ] ; double s = _NUM ; for ( int i = _NUM ; i < k ; i ++ ) { s += Lrowk [ i ] * Lrowj [ i ] ; } Lrowj [ k ] = s = ( Aj [ k ] - s ) / Lrowk [ k ] ; d = d + s * s ; isspd = isspd & ( A [ k ] [ j ] == Aj [ k ] ) ; } d = Aj [ j ] - d ; isspd = isspd & ( d > _NUM ) ; Lrowj [ j ] = Math . sqrt ( Math . max ( d , _NUM ) ) ; for ( int k = j + _NUM ; k < n ; k ++ ) { Lrowj [ k ] = _NUM ; } } }
public static String readStringNZ ( Memory mem , int address , int n ) { address &= Memory . addressMask ; if ( address + n > MemoryMap . END_RAM ) { n = MemoryMap . END_RAM - address + _NUM ; if ( n < _NUM ) { n = _NUM ; } } byte [ ] bytes = new byte [ Math . min ( n , _NUM ) ] ; int length = _NUM ; IMemoryReader memoryReader = MemoryReader . getMemoryReader ( address , n , _NUM ) ; for ( ; n > _NUM ; n -- ) { int b = memoryReader . readNext ( ) ; if ( b == _NUM ) { break ; } if ( length >= bytes . length ) { byte [ ] newBytes = new byte [ bytes . length + _NUM ] ; System . arraycopy ( bytes , _NUM , newBytes , _NUM , bytes . length ) ; bytes = newBytes ; } bytes [ length ] = ( byte ) b ; length ++ ; } return new String ( bytes , _NUM , length , Constants . charset ) ; }
static boolean shiftRight ( int [ ] result , int resultLen , int [ ] source , int intCount , int count ) { int i ; boolean allZero = _BOOL ; for ( i = _NUM ; i < intCount ; i ++ ) allZero &= source [ i ] == _NUM ; if ( count == _NUM ) { System . arraycopy ( source , intCount , result , _NUM , resultLen ) ; i = resultLen ; } else { int leftShiftCount = _NUM - count ; allZero &= ( source [ i ] << leftShiftCount ) == _NUM ; for ( i = _NUM ; i < resultLen - _NUM ; i ++ ) { result [ i ] = ( source [ i + intCount ] > > > count ) | ( source [ i + intCount + _NUM ] << leftShiftCount ) ; } result [ i ] = ( source [ i + intCount ] > > > count ) ; i ++ ; } return allZero ; }
@ Override public void agg ( Object newVal ) { valueSet . add ( newVal instanceof Long ? ( Long ) newVal : Long . valueOf ( newVal . toString ( ) ) ) ; firstTime = _BOOL ; }
private boolean removeLegionMember ( String charName , boolean kick , String playerName ) { LegionMemberEx legionMember = getLegionMemberEx ( charName ) ; if ( legionMember == null ) { log . error ( _STR + charName ) ; return _BOOL ; } deleteLegionMemberFromDB ( legionMember ) ; Player player = world . findPlayer ( charName ) ; if ( player != null ) { PacketSendUtility . broadcastPacket ( player , new SM_LEGION_UPDATE_TITLE ( player . getObjectId ( ) , _NUM , _STR , _NUM ) , _BOOL ) ; } if ( kick ) { PacketSendUtility . broadcastPacketToLegion ( legionMember . getLegion ( ) , new SM_LEGION_LEAVE_MEMBER ( _NUM , legionMember . getObjectId ( ) , playerName , legionMember . getName ( ) ) ) ; } else { PacketSendUtility . broadcastPacketToLegion ( legionMember . getLegion ( ) , new SM_LEGION_LEAVE_MEMBER ( _NUM , legionMember . getObjectId ( ) , charName ) ) ; } return _BOOL ; }
synchronized void printBuffer ( ) throws IOException { int len = sb . length ( ) ; if ( len > _NUM ) { char [ ] chars = new char [ len ] ; sb . getChars ( _NUM , len , chars , _NUM ) ; sb . setLength ( _NUM ) ; super . write ( chars , _NUM , chars . length ) ; } }
Calendar toCalendar ( String value , String pattern , Locale locale ) { Calendar calendar = null ; try { DateFormat format = ( locale == null ) ? new SimpleDateFormat ( pattern ) : new SimpleDateFormat ( pattern , locale ) ; format . setLenient ( _BOOL ) ; format . parse ( value ) ; calendar = format . getCalendar ( ) ; } catch ( Exception e ) { fail ( _STR + value + _STR + pattern + _STR + e . toString ( ) ) ; } return calendar ; }
public boolean containsBafBody ( ) { Iterator < SootMethod > methodIt = methodIterator ( ) ; while ( methodIt . hasNext ( ) ) { SootMethod m = methodIt . next ( ) ; if ( m . hasActiveBody ( ) && m . getActiveBody ( ) instanceof soot . baf . BafBody ) { return _BOOL ; } } return _BOOL ; }
public static String retainAllChars ( String str , String retainChars ) { int pos = indexOfChars ( str , retainChars ) ; if ( pos == - _NUM ) { return _STR ; } StringBuilder buf = new StringBuilder ( ) ; do { buf . append ( str . charAt ( pos ) ) ; pos = indexOfChars ( str , retainChars , pos + _NUM ) ; } while ( pos != - _NUM ) ; return buf . toString ( ) ; }
public synchronized void deleteLeastUsedConnection ( ) { final HttpConnection connection = ( HttpConnection ) freeConnections . removeFirst ( ) ; if ( connection != null ) { deleteConnection ( connection ) ; } else if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( _STR ) ; } }
private int binarySearch ( T x , int from , int to ) { while ( from <= to ) { int m = ( from + to ) > > > _NUM ; if ( comp . compare ( x , data [ m ] ) >= _NUM ) { from = m + _NUM ; } else { to = m - _NUM ; } } return from ; }
private TransitSchedule cleanUpSchedule ( TransitSchedule newTransitSchedule ) { newTransitSchedule = TransitScheduleCleaner . removeRoutesWithoutDepartures ( newTransitSchedule ) ; newTransitSchedule = TransitScheduleCleaner . removeEmptyLines ( newTransitSchedule ) ; newTransitSchedule = TransitScheduleCleaner . removeStopsNotUsed ( newTransitSchedule ) ; return newTransitSchedule ; }
protected static boolean match ( Object ref , Object test ) { if ( ref == null ) { return _BOOL ; } if ( ref == test ) { return _BOOL ; } if ( ref instanceof LabelList && test instanceof LabelList ) { final LabelList lref = ( LabelList ) ref ; final LabelList ltest = ( LabelList ) test ; final int s1 = lref . size ( ) , s2 = ltest . size ( ) ; if ( s1 == _NUM || s2 == _NUM ) { return _BOOL ; } for ( int i = _NUM ; i < s1 ; i ++ ) { String l1 = lref . get ( i ) ; if ( l1 == null ) { continue ; } for ( int j = _NUM ; j < s2 ; j ++ ) { if ( l1 . equals ( ltest . get ( j ) ) ) { return _BOOL ; } } } } return ref . equals ( test ) ; }
private boolean step1 ( ) { if ( CT == null ) return _BOOL ; if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = replaceSuffix ( CT , _STR , _STR ) ; return _BOOL ; } if ( CT . length ( ) >= _NUM ) { if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { replaceSuffix ( CT , _STR , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = replaceSuffix ( CT , _STR , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R1 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } } if ( CT . length ( ) >= _NUM ) { if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = replaceSuffix ( CT , _STR , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = replaceSuffix ( CT , _STR , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = replaceSuffix ( CT , _STR , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } } if ( CT . length ( ) >= _NUM ) { if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( RV , _STR ) && suffixPreceded ( CT , _STR , _STR ) ) { CT = replaceSuffix ( CT , _STR , _STR ) ; return _BOOL ; } } if ( CT . length ( ) >= _NUM ) { if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( R2 , _STR ) ) { CT = removeSuffix ( CT , _STR ) ; return _BOOL ; } if ( suffix ( CT , _STR ) && suffix ( RV , _STR ) && suffixPreceded ( CT , _STR , _STR ) ) { CT = replaceSuffix ( CT , _STR , _STR ) ; return _BOOL ; } } return _BOOL ; }
public final CharSequence yytext ( ) { return zzBuffer . subSequence ( zzStartRead , zzMarkedPos ) ; }
public String patch_toText ( List < Patch > patches ) { StringBuilder text = new StringBuilder ( ) ; for ( Patch aPatch : patches ) { text . append ( aPatch ) ; } return text . toString ( ) ; }
void close ( int contextPrec , int ownPrec ) throws IOException { if ( ownPrec < contextPrec ) out . write ( _STR ) ; }
private void validateSortSize ( ) { String sortSizeStr = carbonProperties . getProperty ( CarbonCommonConstants . SORT_SIZE , CarbonCommonConstants . SORT_SIZE_DEFAULT_VAL ) ; try { int sortSize = Integer . parseInt ( sortSizeStr ) ; if ( sortSize < CarbonCommonConstants . SORT_SIZE_MIN_VAL ) { LOGGER . info ( _STR + sortSizeStr + _STR + CarbonCommonConstants . SORT_SIZE_DEFAULT_VAL ) ; carbonProperties . setProperty ( CarbonCommonConstants . SORT_SIZE , CarbonCommonConstants . SORT_SIZE_DEFAULT_VAL ) ; } } catch ( NumberFormatException e ) { LOGGER . info ( _STR + sortSizeStr + _STR + CarbonCommonConstants . SORT_SIZE_DEFAULT_VAL ) ; carbonProperties . setProperty ( CarbonCommonConstants . SORT_SIZE , CarbonCommonConstants . SORT_SIZE_DEFAULT_VAL ) ; } }
public void finishPainting ( boolean useCache ) { DataBufferInt dataBuffer = new DataBufferInt ( w0 * h0 ) ; int transparency = nativeFinishPainting ( SunWritableRaster . stealData ( dataBuffer , _NUM ) , w0 , h0 ) ; SunWritableRaster . markDirty ( dataBuffer ) ; int [ ] bands = BAND_OFFSETS [ transparency - _NUM ] ; WritableRaster raster = Raster . createPackedRaster ( dataBuffer , w0 , h0 , w0 , bands , null ) ; ColorModel cm = COLOR_MODELS [ transparency - _NUM ] ; Image img = new BufferedImage ( cm , raster , _BOOL , null ) ; if ( useCache ) { cache . setImage ( getClass ( ) , null , w0 , h0 , cacheArgs , img ) ; } graphics . drawImage ( img , x0 , y0 , null ) ; }
public boolean deletePanel ( ) { if ( ! super . deletePanel ( ) ) { return _BOOL ; } turnoutList . clear ( ) ; trackList . clear ( ) ; pointList . clear ( ) ; xingList . clear ( ) ; slipList . clear ( ) ; turntableList . clear ( ) ; return _BOOL ; }
@ Override default CompletableFuture < OptionalDouble > averageDouble ( final ToDoubleFunction < ? super T > fn ) { return CompletableFuture . supplyAsync ( null , getExec ( ) ) ; }
public String next ( ) { return next ( ANY_PATTERN ) ; }
public XercesHTMLDocumentBuilderFactory ( DocumentBuilderSetting [ ] settings ) throws DOMTestIncompatibleException { super ( settings ) ; try { ClassLoader classLoader = ClassLoader . getSystemClassLoader ( ) ; Class htmlBuilderClass = classLoader . loadClass ( _STR ) ; htmlBuilderConstructor = htmlBuilderClass . getConstructor ( NO_CLASSES ) ; getHTMLDocumentMethod = htmlBuilderClass . getMethod ( _STR , NO_CLASSES ) ; Class htmlDOMImpl = classLoader . loadClass ( _STR ) ; Method method = htmlDOMImpl . getMethod ( _STR , NO_CLASSES ) ; domImpl = ( DOMImplementation ) method . invoke ( null , NO_OBJECTS ) ; Class saxFactoryClass = classLoader . loadClass ( _STR ) ; factory = ( SAXParserFactory ) saxFactoryClass . newInstance ( ) ; } catch ( InvocationTargetException ex ) { throw new DOMTestIncompatibleException ( ex . getTargetException ( ) , null ) ; } catch ( Exception ex ) { throw new DOMTestIncompatibleException ( ex , null ) ; } if ( settings != null ) { for ( int i = _NUM ; i < settings . length ; i ++ ) { } } try { factory . newSAXParser ( ) ; } catch ( ParserConfigurationException ex ) { throw new DOMTestIncompatibleException ( ex , null ) ; } catch ( SAXException ex ) { throw new DOMTestIncompatibleException ( ex , null ) ; } }
@ Override public final String toString ( ) { StringBuilder cab = new StringBuilder ( _NUM + getHopCount ( ) * _NUM ) ; cab . append ( _STR ) ; if ( this . localAddress != null ) { cab . append ( this . localAddress ) ; cab . append ( _STR ) ; } cab . append ( _STR ) ; if ( this . tunnelled == TunnelType . TUNNELLED ) cab . append ( _STR ) ; if ( this . layered == LayerType . LAYERED ) cab . append ( _STR ) ; if ( this . secure ) cab . append ( _STR ) ; cab . append ( _STR ) ; if ( this . proxyChain != null ) { for ( HttpHost aProxyChain : this . proxyChain ) { cab . append ( aProxyChain ) ; cab . append ( _STR ) ; } } cab . append ( this . targetHost ) ; cab . append ( _STR ) ; return cab . toString ( ) ; }
private void push ( final int type ) { if ( outputStack == null ) { outputStack = new int [ _NUM ] ; } int n = outputStack . length ; if ( outputStackTop >= n ) { int [ ] t = new int [ Math . max ( outputStackTop + _NUM , _NUM * n ) ] ; System . arraycopy ( outputStack , _NUM , t , _NUM , n ) ; outputStack = t ; } outputStack [ outputStackTop ++ ] = type ; int top = owner . inputStackTop + outputStackTop ; if ( top > owner . outputStackMax ) { owner . outputStackMax = top ; } }
public Macro ( File file ) throws EOFException , FileNotFoundException , IOException { DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder db = null ; Document doc = null ; try { db = dbf . newDocumentBuilder ( ) ; InputSource is = new InputSource ( new UnicodeReader ( new FileInputStream ( file ) , FILE_ENCODING ) ) ; is . setEncoding ( FILE_ENCODING ) ; doc = db . parse ( is ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; String desc = e . getMessage ( ) ; if ( desc == null ) { desc = e . toString ( ) ; } throw new IOException ( _STR + desc ) ; } macroRecords = new ArrayList ( ) ; boolean parsedOK = initializeFromXMLFile ( doc . getDocumentElement ( ) ) ; if ( parsedOK == _BOOL ) { name = null ; macroRecords . clear ( ) ; macroRecords = null ; throw new IOException ( _STR ) ; } }
public static void deleteESInput ( ) { String esPIRIndex = SystemConfiguration . getProperty ( DistributedTestDriver . ES_INPUT_NODES_PROPERTY ) + _STR + SystemConfiguration . getProperty ( DistributedTestDriver . ES_INPUT_PORT_PROPERTY ) + _STR + SystemConfiguration . getProperty ( DistributedTestDriver . ES_INPUT_INDEX_PROPERTY ) ; logger . info ( _STR + esPIRIndex ) ; ProcessBuilder pDeletePIR = new ProcessBuilder ( _STR , _STR , esPIRIndex ) ; try { TestUtils . executeCommand ( pDeletePIR ) ; logger . info ( _STR ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
private boolean add ( int part ) { if ( ! parts . contains ( part ) ) { parts . add ( part ) ; return _BOOL ; } return _BOOL ; }
private void terminateAndWaitFsyncService ( ) throws Exception { if ( fsyncService . isTerminated ( ) ) return ; fsyncService . shutdown ( ) ; fsyncService . awaitTermination ( _NUM , TimeUnit . SECONDS ) ; Exception fsyncExceptionCopy = fsyncException ; if ( fsyncExceptionCopy != null ) throw fsyncExceptionCopy ; }
private Location findFarthestLocation ( Location location , Direction direction ) { Location farthest ; do { farthest = location ; location = farthest . offset ( direction ) ; } while ( gridOperator . isValidLocation ( location ) && gameGrid . get ( location ) == null ) ; return farthest ; }
public static int computeMinImageSampleSize ( ImageSize srcSize ) { int srcWidth = srcSize . getWidth ( ) ; int srcHeight = srcSize . getHeight ( ) ; int targetWidth = maxBitmapSize . getWidth ( ) ; int targetHeight = maxBitmapSize . getHeight ( ) ; int widthScale = ( int ) Math . ceil ( ( float ) srcWidth / targetWidth ) ; int heightScale = ( int ) Math . ceil ( ( float ) srcHeight / targetHeight ) ; return Math . max ( widthScale , heightScale ) ; }
private JSplitPane createMainSplitPane ( ) { final JSplitPane mainSplitPane = new JSplitPane ( ) ; mainSplitPane . setOneTouchExpandable ( _BOOL ) ; mainSplitPane . setDividerLocation ( _NUM ) ; mainSplitPane . setResizeWeight ( _NUM ) ; mainSplitPane . setOrientation ( JSplitPane . HORIZONTAL_SPLIT ) ; m_componentPanel . setBackground ( Color . WHITE ) ; mainSplitPane . setLeftComponent ( createProjectTreePanel ( ) ) ; mainSplitPane . setRightComponent ( m_componentPanel ) ; mainSplitPane . setBorder ( new LineBorder ( Color . GRAY ) ) ; return mainSplitPane ; }
private DigicoreChain cleanChain ( DigicoreChain chain ) { return chain ; }
private boolean checkSetup ( ) { this . txmgr = TransactionManagerImp . getTransactionManager ( ) ; if ( this . txmgr == null ) { try { Hashtable < String , String > env = new Hashtable < String , String > ( ) ; env . put ( Context . INITIAL_CONTEXT_FACTORY , this . initialContextFactory ) ; env . put ( Context . PROVIDER_URL , this . providerUrl ) ; Context ctx = new InitialContext ( env ) ; this . txmgrServer = ( UserTransactionServer ) PortableRemoteObject . narrow ( ctx . lookup ( this . userTransactionServerLookupName ) , UserTransactionServer . class ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; throw new RuntimeException ( getNotFoundMessage ( ) ) ; } if ( this . txmgrServer == null ) throw new RuntimeException ( getNotFoundMessage ( ) ) ; } return this . txmgr != null ; }
public static final boolean givesCheck ( Position pos , Move m ) { boolean wtm = pos . whiteMove ; int oKingSq = pos . getKingSq ( ! wtm ) ; int oKing = wtm ? Piece . BKING : Piece . WKING ; int p = Piece . makeWhite ( m . promoteTo == Piece . EMPTY ? pos . getPiece ( m . from ) : m . promoteTo ) ; int d1 = BitBoard . getDirection ( m . to , oKingSq ) ; switch ( d1 ) { case _NUM : case - _NUM : case _NUM : case - _NUM : if ( ( p == Piece . WQUEEN ) || ( p == Piece . WROOK ) ) if ( ( d1 != _NUM ) && ( MoveGen . nextPiece ( pos , m . to , d1 ) == oKing ) ) return _BOOL ; break ; case _NUM : case _NUM : case - _NUM : case - _NUM : if ( ( p == Piece . WQUEEN ) || ( p == Piece . WBISHOP ) ) { if ( ( d1 != _NUM ) && ( MoveGen . nextPiece ( pos , m . to , d1 ) == oKing ) ) return _BOOL ; } else if ( p == Piece . WPAWN ) { if ( ( ( d1 > _NUM ) == wtm ) && ( pos . getPiece ( m . to + d1 ) == oKing ) ) return _BOOL ; } break ; default : if ( d1 != _NUM ) { if ( p == Piece . WKNIGHT ) return _BOOL ; } } int d2 = BitBoard . getDirection ( m . from , oKingSq ) ; if ( ( d2 != _NUM ) && ( d2 != d1 ) && ( MoveGen . nextPiece ( pos , m . from , d2 ) == oKing ) ) { int p2 = MoveGen . nextPieceSafe ( pos , m . from , - d2 ) ; switch ( d2 ) { case _NUM : case - _NUM : case _NUM : case - _NUM : if ( ( p2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p2 == ( wtm ? Piece . WROOK : Piece . BROOK ) ) ) return _BOOL ; break ; case _NUM : case _NUM : case - _NUM : case - _NUM : if ( ( p2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p2 == ( wtm ? Piece . WBISHOP : Piece . BBISHOP ) ) ) return _BOOL ; break ; } } if ( ( m . promoteTo != Piece . EMPTY ) && ( d1 != _NUM ) && ( d1 == d2 ) ) { switch ( d1 ) { case _NUM : case - _NUM : case _NUM : case - _NUM : if ( ( p == Piece . WQUEEN ) || ( p == Piece . WROOK ) ) if ( ( d1 != _NUM ) && ( MoveGen . nextPiece ( pos , m . from , d1 ) == oKing ) ) return _BOOL ; break ; case _NUM : case _NUM : case - _NUM : case - _NUM : if ( ( p == Piece . WQUEEN ) || ( p == Piece . WBISHOP ) ) { if ( ( d1 != _NUM ) && ( MoveGen . nextPiece ( pos , m . from , d1 ) == oKing ) ) return _BOOL ; } break ; } } if ( p == Piece . WKING ) { if ( m . to - m . from == _NUM ) { if ( MoveGen . nextPieceSafe ( pos , m . from , - _NUM ) == oKing ) return _BOOL ; if ( MoveGen . nextPieceSafe ( pos , m . from + _NUM , wtm ? _NUM : - _NUM ) == oKing ) return _BOOL ; } else if ( m . to - m . from == - _NUM ) { if ( MoveGen . nextPieceSafe ( pos , m . from , _NUM ) == oKing ) return _BOOL ; if ( MoveGen . nextPieceSafe ( pos , m . from - _NUM , wtm ? _NUM : - _NUM ) == oKing ) return _BOOL ; } } else if ( p == Piece . WPAWN ) { if ( pos . getPiece ( m . to ) == Piece . EMPTY ) { int dx = Position . getX ( m . to ) - Position . getX ( m . from ) ; if ( dx != _NUM ) { int epSq = m . from + dx ; int d3 = BitBoard . getDirection ( epSq , oKingSq ) ; switch ( d3 ) { case _NUM : case _NUM : case - _NUM : case - _NUM : if ( MoveGen . nextPiece ( pos , epSq , d3 ) == oKing ) { int p2 = MoveGen . nextPieceSafe ( pos , epSq , - d3 ) ; if ( ( p2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p2 == ( wtm ? Piece . WBISHOP : Piece . BBISHOP ) ) ) return _BOOL ; } break ; case _NUM : if ( MoveGen . nextPiece ( pos , Math . max ( epSq , m . from ) , d3 ) == oKing ) { int p2 = MoveGen . nextPieceSafe ( pos , Math . min ( epSq , m . from ) , - d3 ) ; if ( ( p2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p2 == ( wtm ? Piece . WROOK : Piece . BROOK ) ) ) return _BOOL ; } break ; case - _NUM : if ( MoveGen . nextPiece ( pos , Math . min ( epSq , m . from ) , d3 ) == oKing ) { int p2 = MoveGen . nextPieceSafe ( pos , Math . max ( epSq , m . from ) , - d3 ) ; if ( ( p2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p2 == ( wtm ? Piece . WROOK : Piece . BROOK ) ) ) return _BOOL ; } break ; } } } } return _BOOL ; }
public static FSDirectory newFSDirectory ( Class < ? extends FSDirectory > clazz , Path path ) throws ReflectiveOperationException { return newFSDirectory ( clazz , path , FSLockFactory . getDefault ( ) ) ; }
private static Element addElement ( Document doc , Node parent , String tagName , String attr1 , String val1 , String attr2 , String val2 ) { Element elem = doc . createElement ( tagName ) ; if ( attr1 != null ) elem . setAttribute ( attr1 , val1 ) ; if ( attr2 != null ) elem . setAttribute ( attr2 , val2 ) ; parent . appendChild ( elem ) ; return elem ; }
public static String stream2String ( InputStream is , int maxLength ) throws IOException { byte [ ] buffer = new byte [ _NUM ] ; StringWriter sw = new StringWriter ( ) ; int totalRead = _NUM ; int read = _NUM ; do { sw . write ( new String ( buffer , _NUM , read ) ) ; totalRead += read ; read = is . read ( buffer , _NUM , buffer . length ) ; } while ( ( ( - _NUM == maxLength ) || ( totalRead < maxLength ) ) && ( read != - _NUM ) ) ; return sw . toString ( ) ; }
private static Couple < String > splitNameOfRemoteBranch ( String branchName ) { int firstSlash = branchName . indexOf ( _STR ) ; String remoteName = firstSlash > - _NUM ? branchName . substring ( _NUM , firstSlash ) : branchName ; String remoteBranchName = branchName . substring ( firstSlash + _NUM ) ; return Couple . of ( remoteName , remoteBranchName ) ; }
private static void decodeAnsiX12Segment ( BitSource bits , StringBuilder result ) throws FormatException { int [ ] cValues = new int [ _NUM ] ; do { if ( bits . available ( ) == _NUM ) { return ; } int firstByte = bits . readBits ( _NUM ) ; if ( firstByte == _NUM ) { return ; } parseTwoBytes ( firstByte , bits . readBits ( _NUM ) , cValues ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { int cValue = cValues [ i ] ; if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else { throw FormatException . getFormatInstance ( ) ; } } } while ( bits . available ( ) > _NUM ) ; }
public static OutputStream encrypt ( OutputStream unencryptedOutputStream , char [ ] password ) throws EncryptionException , IOException { OutputStream encryptedOutputStream = null ; PBEKeySpec pbeKeySpec = new PBEKeySpec ( password ) ; PBEParameterSpec pbeParameterSpec = new PBEParameterSpec ( SALT , ITERATION_COUNT ) ; try { SecretKeyFactory secretKeyFactory = SecretKeyFactory . getInstance ( ENCRYPTION_ALGORITHM , CRYPTOPROVIDER ) ; SecretKey pbeKey = secretKeyFactory . generateSecret ( pbeKeySpec ) ; Cipher cipher = Cipher . getInstance ( ENCRYPTION_ALGORITHM , CRYPTOPROVIDER ) ; cipher . init ( Cipher . ENCRYPT_MODE , pbeKey , pbeParameterSpec ) ; encryptedOutputStream = new CipherOutputStream ( unencryptedOutputStream , cipher ) ; } catch ( GeneralSecurityException e ) { throw new EncryptionException ( _STR , e ) ; } return encryptedOutputStream ; }
public static String rightPad ( String original , int length , char padChar ) { if ( original . length ( ) >= length ) { return original ; } return original + stringOfChar ( padChar , length - original . length ( ) ) ; }
private boolean checkSelectForSwipe ( int action , MotionEvent motionEvent , int pointerIndex ) { if ( mSelected != null || action != MotionEvent . ACTION_MOVE || mActionState == ACTION_STATE_DRAG || ! mCallback . isItemViewSwipeEnabled ( ) ) { return _BOOL ; } if ( mRecyclerView . getScrollState ( ) == RecyclerView . SCROLL_STATE_DRAGGING ) { return _BOOL ; } final ViewHolder vh = findSwipedView ( motionEvent ) ; if ( vh == null ) { return _BOOL ; } final int movementFlags = mCallback . getAbsoluteMovementFlags ( mRecyclerView , vh ) ; final int swipeFlags = ( movementFlags & ACTION_MODE_SWIPE_MASK ) > > ( DIRECTION_FLAG_COUNT * ACTION_STATE_SWIPE ) ; if ( swipeFlags == _NUM ) { return _BOOL ; } final float x = MotionEventCompat . getX ( motionEvent , pointerIndex ) ; final float y = MotionEventCompat . getY ( motionEvent , pointerIndex ) ; final float dx = x - mInitialTouchX ; final float dy = y - mInitialTouchY ; final float absDx = Math . abs ( dx ) ; final float absDy = Math . abs ( dy ) ; if ( absDx < mSlop && absDy < mSlop ) { return _BOOL ; } if ( absDx > absDy ) { if ( dx < _NUM && ( swipeFlags & LEFT ) == _NUM ) { return _BOOL ; } if ( dx > _NUM && ( swipeFlags & RIGHT ) == _NUM ) { return _BOOL ; } } else { if ( dy < _NUM && ( swipeFlags & UP ) == _NUM ) { return _BOOL ; } if ( dy > _NUM && ( swipeFlags & DOWN ) == _NUM ) { return _BOOL ; } } mDx = mDy = _NUM ; mActivePointerId = MotionEventCompat . getPointerId ( motionEvent , _NUM ) ; select ( vh , ACTION_STATE_SWIPE ) ; if ( mPreOpened != null && mPreOpened != vh && vh != null ) { closeOpenedPreItem ( ) ; } return _BOOL ; }
protected void reloadSwipeStateInView ( View frontView , int position ) { if ( ! opened . get ( position ) ) { ViewCompat . setTranslationX ( frontView , _NUM ) ; } else { if ( openedRight . get ( position ) ) { ViewCompat . setTranslationX ( frontView , swipeListView . getWidth ( ) ) ; } else { ViewCompat . setTranslationX ( frontView , - swipeListView . getWidth ( ) ) ; } } }
public final void pushPair ( int v1 , int v2 ) { if ( null == m_map ) { m_map = new int [ m_blocksize ] ; m_mapSize = m_blocksize ; } else { if ( ( m_firstFree + _NUM ) >= m_mapSize ) { m_mapSize += m_blocksize ; int newMap [ ] = new int [ m_mapSize ] ; System . arraycopy ( m_map , _NUM , newMap , _NUM , m_firstFree ) ; m_map = newMap ; } } m_map [ m_firstFree ] = v1 ; m_map [ m_firstFree + _NUM ] = v2 ; m_firstFree += _NUM ; }
void reset ( ) { System . arraycopy ( iv , _NUM , k , _NUM , blockSize ) ; }
public Matrix3 multiplyByVerticalFlip ( ) { double [ ] m = this . m ; m [ _NUM ] += m [ _NUM ] ; m [ _NUM ] += m [ _NUM ] ; m [ _NUM ] += m [ _NUM ] ; m [ _NUM ] = - m [ _NUM ] ; m [ _NUM ] = - m [ _NUM ] ; m [ _NUM ] = - m [ _NUM ] ; return this ; }
public void shutdown ( ) throws DataSourceException { if ( createdSessionFactory ) { if ( sessionFactory != null && ! sessionFactory . isClosed ( ) ) { try { sessionFactory . close ( ) ; } finally { sessionFactory = null ; } } } }
private String stringifyIP ( byte [ ] ip ) { String temp = _STR ; for ( int i = _NUM ; i < ip . length / _NUM ; i ++ ) { temp += Integer . toString ( ip [ i ] & _NUM ) + _STR ; } temp = temp . substring ( _NUM , temp . length ( ) - _NUM ) ; temp += _STR ; for ( int i = ip . length / _NUM ; i < ip . length ; i ++ ) { temp += Integer . toString ( ip [ i ] & _NUM ) + _STR ; } temp = temp . substring ( _NUM , temp . length ( ) - _NUM ) ; return temp ; }
public COpenFunctionAction ( final CGraphWindow parent , final IViewContainer container , final INaviFunction function ) { super ( String . format ( _STR , function . getName ( ) ) ) ; Preconditions . checkNotNull ( parent , _STR ) ; Preconditions . checkNotNull ( container , _STR ) ; m_parent = parent ; m_container = container ; m_function = function ; }
public static byte [ ] hexStringToBytes ( String hexString ) { if ( hexString == null || hexString . equals ( _STR ) ) { return null ; } hexString = hexString . toUpperCase ( ) ; int length = hexString . length ( ) / _NUM ; char [ ] hexChars = hexString . toCharArray ( ) ; byte [ ] d = new byte [ length ] ; for ( int i = _NUM ; i < length ; i ++ ) { int pos = i * _NUM ; d [ i ] = ( byte ) ( charToByte ( hexChars [ pos ] ) << _NUM | charToByte ( hexChars [ pos + _NUM ] ) ) ; } return d ; }
public void writeString ( final String s ) { final byte [ ] bytes = s . getBytes ( ) ; final int len = bytes . length ; writeInt ( len ) ; System . arraycopy ( bytes , _NUM , buffer , offset , len ) ; offset += len ; pad ( ) ; }
private static PermissionCollection createAllPermissions ( ) { Permissions permissions = new Permissions ( ) ; permissions . add ( new AllPermission ( ) ) ; return permissions ; }
private void mergeNetworks ( Network tzone , Network sZone ) { List < String > addedEndPoints = new ArrayList < String > ( sZone . retrieveEndpoints ( ) ) ; StringSet newEndPoints = sZone . retrieveEndpoints ( ) ; for ( String endpoint : tzone . retrieveEndpoints ( ) ) { if ( newEndPoints . contains ( endpoint ) ) { addedEndPoints . remove ( endpoint ) ; } } if ( ! addedEndPoints . isEmpty ( ) ) { tzone . addEndpoints ( addedEndPoints , _BOOL ) ; } tzone . setNativeGuid ( sZone . getNativeGuid ( ) ) ; }
static public void println ( String msg ) { println ( msg , CLLogLevel . normal ) ; }
private static ByteString readChunk ( InputStream in , final int chunkSize ) throws IOException { final byte [ ] buf = new byte [ chunkSize ] ; int bytesRead = _NUM ; while ( bytesRead < chunkSize ) { final int count = in . read ( buf , bytesRead , chunkSize - bytesRead ) ; if ( count == - _NUM ) { break ; } bytesRead += count ; } if ( bytesRead == _NUM ) { return null ; } else { return ByteString . copyFrom ( buf , _NUM , bytesRead ) ; } }
private List < FacetResult > sumAssociations ( ) throws IOException { DirectoryReader indexReader = DirectoryReader . open ( indexDir ) ; IndexSearcher searcher = new IndexSearcher ( indexReader ) ; TaxonomyReader taxoReader = new DirectoryTaxonomyReader ( taxoDir ) ; FacetsCollector fc = new FacetsCollector ( ) ; FacetsCollector . search ( searcher , new MatchAllDocsQuery ( ) , _NUM , fc ) ; Facets tags = new TaxonomyFacetSumIntAssociations ( _STR , taxoReader , config , fc ) ; Facets genre = new TaxonomyFacetSumFloatAssociations ( _STR , taxoReader , config , fc ) ; List < FacetResult > results = new ArrayList < > ( ) ; results . add ( tags . getTopChildren ( _NUM , _STR ) ) ; results . add ( genre . getTopChildren ( _NUM , _STR ) ) ; indexReader . close ( ) ; taxoReader . close ( ) ; return results ; }
public ReverseGeoCode ( InputStream placenames , boolean majorOnly ) throws IOException { createKdTree ( placenames , majorOnly ) ; }
protected String patchName ( String qname ) { final int lastColon = qname . lastIndexOf ( _STR ) ; if ( lastColon > _NUM ) { final int firstColon = qname . indexOf ( _STR ) ; final String prefix = qname . substring ( _NUM , firstColon ) ; final String localName = qname . substring ( lastColon + _NUM ) ; final String uri = m_prefixMap . lookupNamespace ( prefix ) ; if ( uri != null && uri . length ( ) == _NUM ) { return localName ; } else if ( firstColon != lastColon ) { return prefix + _STR + localName ; } } return qname ; }
public static String fromTag ( ListTag < Tag > tag ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( ARRAY_START ) ; boolean start = _BOOL ; for ( Tag value : tag . getValue ( ) ) { if ( start ) { start = _BOOL ; } else { builder . append ( ELEMENT_SEPERATOR ) ; } builder . append ( fromGenericTag ( value ) ) ; } builder . append ( ARRAY_END ) ; return builder . toString ( ) ; }
private XMLElement2 createAnotherElement ( ) { return new XMLElement2 ( this . entities , this . ignoreWhitespace , _BOOL , this . ignoreCase ) ; }
public synchronized void reset ( ) { labels . clear ( ) ; labels . put ( SensisionConstants . SENSISION_LABEL_TOPIC , this . topic ) ; labels . put ( SensisionConstants . SENSISION_LABEL_GROUPID , this . groupid ) ; for ( int i = _NUM ; i < this . counters . length ; i ++ ) { if ( null == this . counters [ i ] ) { continue ; } labels . put ( SensisionConstants . SENSISION_LABEL_PARTITION , Integer . toString ( i ) ) ; Sensision . clear ( SensisionConstants . SENSISION_CLASS_WARP_KAFKA_CONSUMER_OFFSET , labels ) ; this . counters [ i ] = null ; } }
public Vector rotateInRadian ( double radians ) { final double length = length ( ) ; double angle = angleInRadian ( ) ; angle += radians ; final Vector result = new Vector ( Math . cos ( angle ) , Math . sin ( angle ) ) ; return result . multiply ( length ) ; }
public void connectionLost ( java . lang . Throwable cause ) { int rc = - _NUM ; led . setAmber ( ) ; led . setFlash ( ) ; setTitleText ( _STR ) ; synchronized ( this ) { writeLogln ( _STR + mqtt . getServerURI ( ) ) ; } try { while ( ( rc == - _NUM ) && connected ) { try { synchronized ( connLostWait ) { connLostWait . wait ( _NUM ) ; } } catch ( InterruptedException iex ) { } synchronized ( this ) { if ( connected ) { writeLog ( _STR ) ; try { connect ( mqtt . getServerURI ( ) , optionsComp . isPersistenceSelected ( ) ) ; rc = _NUM ; } catch ( MqttException mqte ) { rc = - _NUM ; } if ( rc == - _NUM ) { writeLogln ( _STR ) ; } else { writeLogln ( _STR ) ; } } } } setTitleText ( _STR ) ; } catch ( Exception ex ) { setTitleText ( _STR ) ; ex . printStackTrace ( ) ; disconnect ( ) ; } finally { if ( led . isFlashing ( ) ) { led . setFlash ( ) ; } } if ( connected ) { led . setGreen ( ) ; setConnected ( _BOOL ) ; } else { led . setRed ( ) ; setConnected ( _BOOL ) ; } }
private Rect calcBounds ( int index , Paint paint ) { Rect bounds = new Rect ( ) ; CharSequence title = getTitle ( index ) ; bounds . right = ( int ) paint . measureText ( title , _NUM , title . length ( ) ) ; bounds . bottom = ( int ) ( paint . descent ( ) - paint . ascent ( ) ) ; return bounds ; }
public String headerOut ( String name ) { ArrayList < String > keys = _headerKeysOut ; int headerSize = keys . size ( ) ; for ( int i = _NUM ; i < headerSize ; i ++ ) { String oldKey = keys . get ( i ) ; if ( oldKey . equalsIgnoreCase ( name ) ) { return ( String ) _headerValuesOut . get ( i ) ; } } if ( name . equalsIgnoreCase ( _STR ) ) { return _contentLengthOut >= _NUM ? String . valueOf ( _contentLengthOut ) : null ; } if ( name . equalsIgnoreCase ( _STR ) ) { return _contentTypeOut ; } return null ; }
private static Map < String , Set < String > > parseSparseFields ( MultivaluedMap < String , String > queryParams ) { Map < String , Set < String > > result = new HashMap < > ( ) ; for ( Map . Entry < String , List < String > > kv : queryParams . entrySet ( ) ) { String key = kv . getKey ( ) ; if ( key . startsWith ( _STR ) && key . endsWith ( _STR ) ) { String type = key . substring ( _NUM , key . length ( ) - _NUM ) ; LinkedHashSet < String > filters = new LinkedHashSet < > ( ) ; for ( String filterParams : kv . getValue ( ) ) { Collections . addAll ( filters , filterParams . split ( _STR ) ) ; } if ( ! filters . isEmpty ( ) ) { result . put ( type , filters ) ; } } } return result ; }
public Element signWithWSSSAMLTokenProfile ( Document doc , java . security . cert . Certificate cert , String assertionID , String algorithm , List ids ) throws XMLSignatureException { return signWithWSSSAMLTokenProfile ( doc , cert , assertionID , algorithm , ids , SOAPBindingConstants . WSF_10_VERSION ) ; }
@ Override public void stateChanged ( ChangeEvent e ) { updateFrameTitle ( ) ; updateMenu ( ) ; if ( e . getSource ( ) instanceof JComponent ) { setTabTitle ( ( JComponent ) e . getSource ( ) ) ; } }
@ Override public void addURL ( URL url , boolean isScanned ) { if ( containsURL ( url ) ) { return ; } super . addURL ( url , isScanned ) ; if ( isScanned ) _pendingScanRoots . add ( new ScanRoot ( url , null ) ) ; }
public void add ( final int start , final int end , final byte status ) { final int s = start - mStart ; if ( s < mInterval . length && end > mStart ) { Arrays . fill ( mInterval , Math . max ( s , _NUM ) , Math . min ( end - mStart , mInterval . length ) , status ) ; } }
public void reset ( ) { alpha = initAlpha ; neighborhoodSize = initNeighborhoodSize ; }
private void reload ( ) { Document doc = textPane . getDocument ( ) ; doc . putProperty ( Document . StreamDescriptionProperty , null ) ; reference = currentReference ; loadPage ( currentPage ) ; }
protected void drawHexagon ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean shadow , String direction ) { Polygon hexagon = new Polygon ( ) ; if ( direction . equals ( mxConstants . DIRECTION_NORTH ) || direction . equals ( mxConstants . DIRECTION_SOUTH ) ) { hexagon . addPoint ( x + ( int ) ( _NUM * w ) , y ) ; hexagon . addPoint ( x + w , y + ( int ) ( _NUM * h ) ) ; hexagon . addPoint ( x + w , y + ( int ) ( _NUM * h ) ) ; hexagon . addPoint ( x + ( int ) ( _NUM * w ) , y + h ) ; hexagon . addPoint ( x , y + ( int ) ( _NUM * h ) ) ; hexagon . addPoint ( x , y + ( int ) ( _NUM * h ) ) ; } else { hexagon . addPoint ( x + ( int ) ( _NUM * w ) , y ) ; hexagon . addPoint ( x + ( int ) ( _NUM * w ) , y ) ; hexagon . addPoint ( x + w , y + ( int ) ( _NUM * h ) ) ; hexagon . addPoint ( x + ( int ) ( _NUM * w ) , y + h ) ; hexagon . addPoint ( x + ( int ) ( _NUM * w ) , y + h ) ; hexagon . addPoint ( x , y + ( int ) ( _NUM * h ) ) ; } drawPolygon ( hexagon , fillColor , fillPaint , penColor , shadow ) ; }
private boolean isStatic ( Field field ) { int modifier = field . getModifiers ( ) ; if ( Modifier . isStatic ( modifier ) ) { return _BOOL ; } return _BOOL ; }
public int outstandingRequests ( ) { return outstanding . get ( ) ; }
final public static String toString ( final byte [ ] key , final int off , final int len ) { if ( key == null ) return NULL ; final StringBuilder sb = new StringBuilder ( len * _NUM + _NUM ) ; sb . append ( _STR ) ; for ( int i = off ; i < off + len ; i ++ ) { if ( i > _NUM ) sb . append ( _STR ) ; sb . append ( Integer . toString ( key [ i ] & _NUM ) ) ; } sb . append ( _STR ) ; return sb . toString ( ) ; }
public void init ( String componentName ) throws LogException { accessLogger = Logger . getLogger ( componentName + _STR ) ; errorLogger = Logger . getLogger ( componentName + _STR ) ; }
private View fillLeft ( int pos , int nextRight ) { if ( DEBUG ) Log . i ( TAG , _STR + pos + _STR + nextRight + M_FIRST_POSITION + mFirstPosition ) ; View selectedView = null ; final int end = mListPadding . left ; while ( nextRight > end && pos >= _NUM ) { View temp = makeColumn ( pos , nextRight , _BOOL ) ; if ( temp != null ) { selectedView = temp ; } nextRight = mReferenceView . getLeft ( ) - mHorizontalSpacing ; mFirstPosition = pos ; pos -= mNumRows ; } if ( mStackFromBottom ) { mFirstPosition = Math . max ( _NUM , pos + _NUM ) ; } return selectedView ; }
public void removeDefaultValue ( String value ) throws SMSException , SSOException { Set defaultValues = getDefaultValues ( ) ; if ( defaultValues != Collections . EMPTY_SET ) { defaultValues . remove ( value ) ; updateDefaultValues ( defaultValues ) ; } }
public static int keyBindingDescriptionToKeyCode ( String keyBindingDescription ) { if ( StringUtils . isBlank ( keyBindingDescription ) ) { return _NUM ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . ESC ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F1 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F2 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F3 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F4 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F5 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F6 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F7 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F8 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F9 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F10 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F11 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . F12 ; } else if ( keyBindingDescription . equals ( _STR ) ) { return SWT . SCROLL_LOCK ; } else if ( VALID_ACTION_KEY_CODES . indexOf ( keyBindingDescription . charAt ( keyBindingDescription . length ( ) - _NUM ) ) != - _NUM ) { return keyBindingDescription . charAt ( keyBindingDescription . length ( ) - _NUM ) ; } else { return _NUM ; } }
public void testPutCauseEviction ( ) { List < String > log = new ArrayList < String > ( ) ; LruCache < String , String > cache = newRemovalLogCache ( log ) ; cache . put ( _STR , _STR ) ; cache . put ( _STR , _STR ) ; cache . put ( _STR , _STR ) ; cache . put ( _STR , _STR ) ; assertEquals ( Arrays . asList ( _STR ) , log ) ; assertSnapshot ( cache , _STR , _STR , _STR , _STR , _STR , _STR ) ; }
protected Signature mergeSignatures ( Signature first , Signature second , int numBins ) { int d2 = - _NUM ; for ( int i = _NUM ; i < second . spec . length ; i += _NUM ) { if ( second . spec [ i ] >= _NUM ) { assert ( d2 == - _NUM ) : _STR ; d2 = i ; } } assert ( d2 >= _NUM ) : _STR ; if ( first . spec [ d2 ] >= _NUM ) { return null ; } final ModifiableDBIDs intersection = DBIDUtil . intersection ( first . ids , second . ids ) ; final int support = intersection . size ( ) ; double width = ( second . spec [ d2 + _NUM ] - second . spec [ d2 ] + _NUM ) / ( double ) numBins ; double expect = first . ids . size ( ) * width ; if ( support <= expect || support < minClusterSize ) { return null ; } final double test = PoissonDistribution . rawProbability ( support , expect ) ; if ( ( poissonThreshold ) <= test ) { return null ; } int [ ] spec = first . spec . clone ( ) ; spec [ d2 ] = second . spec [ d2 ] ; spec [ d2 + _NUM ] = second . spec [ d2 ] ; final Signature newsig = new Signature ( spec , intersection ) ; if ( LOG . isDebugging ( ) ) { LOG . debug ( newsig . toString ( ) ) ; } return newsig ; }
@ Override public int hashCode ( ) { return super . hashCode ( ) ; }
public IgniteDeploymentException ( Throwable cause ) { this ( cause . getMessage ( ) , cause ) ; }
public synchronized boolean enter ( CnATreeElement obj ) throws TransactionAbortedException { if ( aborted ) { throw new TransactionAbortedException ( ) ; } visited . add ( obj ) ; if ( this . initiator != null ) { return _BOOL ; } this . initiator = obj ; aborted = _BOOL ; return _BOOL ; }
public Options addOption ( Option opt ) { String key = opt . getKey ( ) ; if ( opt . hasLongOpt ( ) ) { longOpts . put ( opt . getLongOpt ( ) , opt ) ; } if ( opt . isRequired ( ) ) { if ( requiredOpts . contains ( key ) ) { requiredOpts . remove ( requiredOpts . indexOf ( key ) ) ; } requiredOpts . add ( key ) ; } shortOpts . put ( key , opt ) ; return this ; }
private void pauseForClientToJoin ( ) { Wait . pause ( _NUM ) ; }
public void propertyChange ( PropertyChangeEvent pce ) { if ( pce . getPropertyName ( ) == MapBean . BackgroundProperty && backgroundSlave ) { map . setBckgrnd ( ( Paint ) pce . getNewValue ( ) ) ; } }
public TransitionBuilder addFrame ( int imageResource ) { mFrames . add ( imageResource ) ; return this ; }
public Class < ? > [ ] scanForClasses ( String location , Class < ? > implementedInterface ) throws Exception { LOG . debug ( _STR + location + _STR + implementedInterface . getName ( ) + _STR ) ; List < Class < ? > > classes = new ArrayList < Class < ? > > ( ) ; Set < String > resourceNames = findResourceNames ( location , _STR , _STR ) ; for ( String resourceName : resourceNames ) { String className = toClassName ( resourceName ) ; Class < ? > clazz = classLoader . loadClass ( className ) ; if ( Modifier . isAbstract ( clazz . getModifiers ( ) ) || clazz . isEnum ( ) || clazz . isAnonymousClass ( ) ) { LOG . debug ( _STR + className ) ; continue ; } if ( ! implementedInterface . isAssignableFrom ( clazz ) ) { continue ; } try { ClassUtils . instantiate ( className , classLoader ) ; } catch ( Exception e ) { throw new CassandraMigrationException ( _STR + className , e ) ; } classes . add ( clazz ) ; LOG . debug ( _STR + className ) ; } return classes . toArray ( new Class < ? > [ classes . size ( ) ] ) ; }
public String nextCDATA ( ) throws JSONException { char c ; int i ; StringBuffer sb = new StringBuffer ( ) ; for ( ; ; ) { c = next ( ) ; if ( end ( ) ) { throw syntaxError ( _STR ) ; } sb . append ( c ) ; i = sb . length ( ) - _NUM ; if ( i >= _NUM && sb . charAt ( i ) == _STR && sb . charAt ( i + _NUM ) == _STR && sb . charAt ( i + _NUM ) == _STR ) { sb . setLength ( i ) ; return sb . toString ( ) ; } } }
private static boolean needsSkylightUpdate ( FastCubeBlockAccess access , MutableBlockPos pos ) { if ( access . getBlockLightOpacity ( pos ) >= _NUM ) { return _BOOL ; } int computedLight = access . computeLightValue ( pos ) ; for ( EnumFacing facing : EnumFacing . values ( ) ) { pos . move ( facing ) ; int currentLight = access . getLightFor ( EnumSkyBlock . SKY , pos ) ; int currentOpacity = Math . max ( _NUM , access . getBlockLightOpacity ( pos ) ) ; pos . move ( facing . getOpposite ( ) ) ; if ( computedLight == currentLight - currentOpacity ) { return _BOOL ; } } return _BOOL ; }
public static void expand ( Rectangle2D r , double amount ) { r . setRect ( r . getX ( ) - amount , r . getY ( ) - amount , r . getWidth ( ) + _NUM * amount , r . getHeight ( ) + _NUM * amount ) ; }
static void stringToPacket ( String s , DatagramPacket packet ) { byte [ ] bytes = s . getBytes ( ) ; System . arraycopy ( bytes , _NUM , packet . getData ( ) , _NUM , bytes . length ) ; packet . setLength ( bytes . length ) ; }
@ Override public String toString ( ) { StringBuffer buffer = new StringBuffer ( _STR ) ; buffer . append ( _STR ) ; buffer . append ( gridX ) ; buffer . append ( _STR ) ; buffer . append ( gridY ) ; buffer . append ( _STR ) ; buffer . append ( gridWidth ) ; buffer . append ( _STR ) ; buffer . append ( gridHeight ) ; buffer . append ( _STR ) ; buffer . append ( hAlign ) ; buffer . append ( _STR ) ; buffer . append ( vAlign ) ; if ( ! EMPTY_INSETS . equals ( insets ) ) { buffer . append ( _STR ) ; buffer . append ( insets ) ; } buffer . append ( _STR ) ; buffer . append ( honorsVisibility ) ; buffer . append ( _STR ) ; return buffer . toString ( ) ; }
private ArrayList < PROCLUSCluster > assignPoints ( ArrayDBIDs m_current , long [ ] [ ] dimensions , Relation < V > database ) { ModifiableDBIDs [ ] clusterIDs = new ModifiableDBIDs [ dimensions . length ] ; for ( int i = _NUM ; i < m_current . size ( ) ; i ++ ) { clusterIDs [ i ] = DBIDUtil . newHashSet ( ) ; } DBIDArrayIter m_i = m_current . iter ( ) ; for ( DBIDIter it = database . iterDBIDs ( ) ; it . valid ( ) ; it . advance ( ) ) { V p = database . get ( it ) ; double minDist = Double . NaN ; int best = - _NUM , i = _NUM ; for ( m_i . seek ( _NUM ) ; m_i . valid ( ) ; m_i . advance ( ) , i ++ ) { V m = database . get ( m_i ) ; double currentDist = manhattanSegmentalDistance ( p , m , dimensions [ i ] ) ; if ( ! ( minDist <= currentDist ) ) { minDist = currentDist ; best = i ; } } assert best >= _NUM ; ModifiableDBIDs ids = clusterIDs [ best ] ; ids . add ( it ) ; } ArrayList < PROCLUSCluster > clusters = new ArrayList < > ( m_current . size ( ) ) ; for ( int i = _NUM ; i < dimensions . length ; i ++ ) { ModifiableDBIDs objectIDs = clusterIDs [ i ] ; if ( ! objectIDs . isEmpty ( ) ) { long [ ] clusterDimensions = dimensions [ i ] ; double [ ] centroid = Centroid . make ( database , objectIDs ) . getArrayRef ( ) ; clusters . add ( new PROCLUSCluster ( objectIDs , clusterDimensions , centroid ) ) ; } else { clusters . add ( null ) ; } } if ( LOG . isDebugging ( ) ) { StringBuilder msg = new StringBuilder ( ) ; msg . append ( _STR ) ; msg . append ( _STR ) . append ( clusters ) . append ( _STR ) ; LOG . debugFine ( msg . toString ( ) ) ; } return clusters ; }
public double slideSubtree ( MutableTree tree ) { double logHastingsRatio ; NodeRef i , newParent , newChild ; do { i = tree . getNode ( MathUtils . nextInt ( tree . getNodeCount ( ) ) ) ; } while ( tree . getRoot ( ) == i ) ; NodeRef iP = tree . getParent ( i ) ; NodeRef CiP = getOtherChild ( tree , iP , i ) ; NodeRef PiP = tree . getParent ( iP ) ; double delta = getDelta ( ) ; double oldHeight = tree . getNodeHeight ( iP ) ; double newHeight = oldHeight + delta ; if ( delta > _NUM ) { if ( PiP != null && tree . getNodeHeight ( PiP ) < newHeight ) { newParent = PiP ; newChild = iP ; while ( tree . getNodeHeight ( newParent ) < newHeight ) { newChild = newParent ; newParent = tree . getParent ( newParent ) ; if ( newParent == null ) break ; } tree . beginTreeEdit ( ) ; if ( tree . isRoot ( newChild ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . setRoot ( iP ) ; } else { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . addChild ( newParent , iP ) ; } tree . setNodeHeight ( iP , newHeight ) ; tree . endTreeEdit ( ) ; int possibleSources = intersectingEdges ( tree , newChild , oldHeight , null ) ; logHastingsRatio = Math . log ( _NUM / ( double ) possibleSources ) ; } else { tree . setNodeHeight ( iP , newHeight ) ; logHastingsRatio = _NUM ; } } else { if ( tree . getNodeHeight ( i ) > newHeight ) { return Double . NEGATIVE_INFINITY ; } if ( tree . getNodeHeight ( CiP ) > newHeight ) { ArrayList newChildren = new ArrayList ( ) ; int possibleDestinations = intersectingEdges ( tree , CiP , newHeight , newChildren ) ; if ( newChildren . size ( ) == _NUM ) { return Double . NEGATIVE_INFINITY ; } int childIndex = MathUtils . nextInt ( newChildren . size ( ) ) ; newChild = ( NodeRef ) newChildren . get ( childIndex ) ; newParent = tree . getParent ( newChild ) ; tree . beginTreeEdit ( ) ; if ( tree . isRoot ( iP ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( newParent , iP ) ; tree . setRoot ( CiP ) ; } else { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . addChild ( newParent , iP ) ; } tree . setNodeHeight ( iP , newHeight ) ; tree . endTreeEdit ( ) ; logHastingsRatio = Math . log ( ( double ) possibleDestinations ) ; } else { tree . setNodeHeight ( iP , newHeight ) ; logHastingsRatio = _NUM ; } } return logHastingsRatio ; }
public boolean isInitialized ( ) { return _initialized ; }
public boolean removeShutdownHook ( Thread hook ) { if ( hook == null ) { throw new NullPointerException ( _STR ) ; } if ( shuttingDown ) { throw new IllegalStateException ( _STR ) ; } synchronized ( shutdownHooks ) { return shutdownHooks . remove ( hook ) ; } }
private ResultPointsAndTransitions transitionsBetween ( ResultPoint from , ResultPoint to ) { int fromX = ( int ) from . getX ( ) ; int fromY = ( int ) from . getY ( ) ; int toX = ( int ) to . getX ( ) ; int toY = ( int ) to . getY ( ) ; boolean steep = Math . abs ( toY - fromY ) > Math . abs ( toX - fromX ) ; if ( steep ) { int temp = fromX ; fromX = fromY ; fromY = temp ; temp = toX ; toX = toY ; toY = temp ; } int dx = Math . abs ( toX - fromX ) ; int dy = Math . abs ( toY - fromY ) ; int error = - dx / _NUM ; int ystep = fromY < toY ? _NUM : - _NUM ; int xstep = fromX < toX ? _NUM : - _NUM ; int transitions = _NUM ; boolean inBlack = image . get ( steep ? fromY : fromX , steep ? fromX : fromY ) ; for ( int x = fromX , y = fromY ; x != toX ; x += xstep ) { boolean isBlack = image . get ( steep ? y : x , steep ? x : y ) ; if ( isBlack != inBlack ) { transitions ++ ; inBlack = isBlack ; } error += dy ; if ( error > _NUM ) { if ( y == toY ) { break ; } y += ystep ; error -= dx ; } } return new ResultPointsAndTransitions ( from , to , transitions ) ; }
public String toString ( ) { return Double . toString ( get ( ) ) ; }
boolean checkCameraSize ( CameraOptions cameraId ) { boolean sizeAvailable = _BOOL ; Camera camera = null ; Method method = getCameraOpenMethod ( ) ; if ( method != null ) { try { camera = ( Camera ) method . invoke ( camera , new Object [ ] { cameraId . getValue ( ) } ) ; } catch ( Exception e ) { camera = Camera . open ( ) ; } } else { camera = Camera . open ( ) ; } if ( camera == null ) { return _BOOL ; } Parameters param = camera . getParameters ( ) ; List < Camera . Size > sizes = param . getSupportedPreviewSizes ( ) ; for ( Camera . Size size : sizes ) { if ( ( size . width == H264Config . QVGA_WIDTH && size . height == H264Config . QVGA_HEIGHT ) || ( size . width == H264Config . CIF_WIDTH && size . height == H264Config . CIF_HEIGHT ) || ( size . width == H264Config . VGA_WIDTH && size . height == H264Config . VGA_HEIGHT ) ) { sizeAvailable = _BOOL ; break ; } } camera . release ( ) ; return sizeAvailable ; }
ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
public void append ( final String s ) { if ( first ) { first = _BOOL ; } else { builder . append ( space ) ; } builder . append ( s ) ; }
public static ByteArrayOutputStream encode ( String plaintext ) throws IOException , MessagingException { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; byte [ ] in = plaintext . getBytes ( ) ; ByteArrayOutputStream inStream = new ByteArrayOutputStream ( ) ; inStream . write ( in , _NUM , in . length ) ; if ( ( in . length % _NUM ) == _NUM ) { inStream . write ( _NUM ) ; inStream . write ( _NUM ) ; } else if ( ( in . length % _NUM ) == _NUM ) { inStream . write ( _NUM ) ; } inStream . writeTo ( MimeUtility . encode ( out , _STR ) ) ; return out ; }
public LookupListTable lookupList ( ) { if ( lookupListTable . get ( ) == null ) { lookupListTable . compareAndSet ( null , gsub . createLookupList ( ) ) ; } return lookupListTable . get ( ) ; }
public long sum ( ) { return deltaSum . get ( ) ; }
protected final void refreshLoadingViewsSize ( ) { final int maximumPullScroll = ( int ) ( getMaximumPullScroll ( ) * _NUM ) ; int pLeft = getPaddingLeft ( ) ; int pTop = getPaddingTop ( ) ; int pRight = getPaddingRight ( ) ; int pBottom = getPaddingBottom ( ) ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setWidth ( maximumPullScroll ) ; pLeft = - maximumPullScroll ; } else { pLeft = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setWidth ( maximumPullScroll ) ; pRight = - maximumPullScroll ; } else { pRight = _NUM ; } break ; case VERTICAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setHeight ( maximumPullScroll ) ; pTop = - maximumPullScroll ; } else { pTop = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setHeight ( maximumPullScroll ) ; pBottom = - maximumPullScroll ; } else { pBottom = _NUM ; } break ; } if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR , pLeft , pTop , pRight , pBottom ) ) ; } setPadding ( pLeft , pTop , pRight , pBottom ) ; }
private static boolean isWordBoundary ( CharSequence singleChar , String wordSeparators ) { return TextUtils . isEmpty ( singleChar ) || wordSeparators . contains ( singleChar ) ; }
public void executeBlocking ( String desc , BlockingConsumer < MongoClient > operation ) throws InterruptedException { while ( _BOOL ) { MongoClient primary = primaryConnectionSupplier . get ( ) ; try { operation . accept ( primary ) ; return ; } catch ( Throwable t ) { errorHandler . accept ( desc , t ) ; } } }
public void write ( char [ ] cbuf ) throws java . io . IOException { write ( cbuf , _NUM , cbuf . length ) ; }
protected TableViewer createTable ( Composite parent , int span ) { Table table = new Table ( parent , SWT . H_SCROLL | SWT . V_SCROLL | SWT . BORDER | SWT . SINGLE | SWT . FULL_SELECTION ) ; GridData data = new GridData ( GridData . FILL_BOTH | GridData . GRAB_HORIZONTAL ) ; data . horizontalSpan = span ; table . setLayoutData ( data ) ; TableLayout layout = new TableLayout ( ) ; layout . addColumnData ( new ColumnWeightData ( _NUM , _BOOL ) ) ; table . setLayout ( layout ) ; TableColumn col = new TableColumn ( table , SWT . NONE ) ; col . setResizable ( _BOOL ) ; return new TableViewer ( table ) ; }
public String typeAsString ( ) { String typeStr = _STR ; String subtypeStr = _STR ; switch ( this . type ) { case ETYPE_CONTROL : typeStr = _STR ; switch ( this . subtype ) { case ESTYPE_HEADER : subtypeStr = _STR ; break ; case ESTYPE_FOOTER : subtypeStr = _STR ; break ; } break ; case ETYPE_TRANSACTIONS : typeStr = _STR ; switch ( this . subtype ) { case ESTYPE_TRAN_START : subtypeStr = _STR ; break ; case ESTYPE_TRAN_COMMIT : subtypeStr = _STR ; break ; case ESTYPE_TRAN_ROLLBACK : subtypeStr = _STR ; break ; case ESTYPE_TRAN_ROLLBACK_TO_SAVEPOINT : subtypeStr = _STR ; break ; case ESTYPE_TRAN_AUDIT : subtypeStr = _STR ; break ; } break ; case ETYPE_LCR_DATA : typeStr = _STR ; switch ( this . subtype ) { case ESTYPE_LCR_INSERT : subtypeStr = _STR ; break ; case ESTYPE_LCR_DELETE : subtypeStr = _STR ; break ; case ESTYPE_LCR_UPDATE : subtypeStr = _STR ; break ; case ESTYPE_LCR_LOB_WRITE : subtypeStr = _STR ; break ; case ESTYPE_LCR_LOB_TRIM : subtypeStr = _STR ; break ; case ESTYPE_LCR_LOB_ERASE : subtypeStr = _STR ; break ; case ESTYPE_LCR_DDL : subtypeStr = _STR ; break ; } break ; case ETYPE_LCR_PLOG : typeStr = _STR ; switch ( this . subtype ) { case ESTYPE_LCR_PLOG_IFILE : subtypeStr = _STR ; break ; case ESTYPE_LCR_PLOG_IFILE_STATS : subtypeStr = _STR ; break ; } break ; default : typeStr = _STR + this . type + _STR ; subtypeStr = _STR + this . subtype ; } return typeStr + subtypeStr ; }
public void lineTo ( float x , float y ) { mPoints . add ( PathPoint . lineTo ( x , y ) ) ; }
public void flagActionItems ( ) { if ( ! mIsActionItemsStale ) { return ; } boolean flagged = _BOOL ; for ( WeakReference < MenuPresenter > ref : mPresenters ) { final MenuPresenter presenter = ref . get ( ) ; if ( presenter == null ) { mPresenters . remove ( ref ) ; } else { flagged |= presenter . flagActionItems ( ) ; } } if ( flagged ) { mActionItems . clear ( ) ; mNonActionItems . clear ( ) ; ArrayList < MenuItemImpl > visibleItems = getVisibleItems ( ) ; final int itemsSize = visibleItems . size ( ) ; for ( int i = _NUM ; i < itemsSize ; i ++ ) { MenuItemImpl item = visibleItems . get ( i ) ; if ( item . isActionButton ( ) ) { mActionItems . add ( item ) ; } else { mNonActionItems . add ( item ) ; } } } else { mActionItems . clear ( ) ; mNonActionItems . clear ( ) ; mNonActionItems . addAll ( getVisibleItems ( ) ) ; } mIsActionItemsStale = _BOOL ; }
protected boolean [ ] canHandleMissing ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , boolean predictorMissing , boolean classMissing , int missingLevel ) { if ( missingLevel == _NUM ) { print ( _STR ) ; } print ( _STR ) ; if ( predictorMissing ) { print ( _STR ) ; if ( classMissing ) { print ( _STR ) ; } } if ( classMissing ) { print ( _STR ) ; } print ( _STR ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( _STR ) ; ArrayList < String > accepts = new ArrayList < String > ( ) ; accepts . add ( _STR ) ; accepts . add ( _STR ) ; accepts . add ( _STR ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = _NUM ; return runBasicTest ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType , missingLevel , predictorMissing , classMissing , numTrain , numTest , numClasses , accepts ) ; }
private void disableButtons ( ) { for ( DeployCommand cmd : DeployCommand . values ( ) ) { setButtonEnabled ( cmd , _BOOL ) ; } butDone . setEnabled ( _BOOL ) ; setLoadEnabled ( _BOOL ) ; setUnloadEnabled ( _BOOL ) ; setAssaultDropEnabled ( _BOOL ) ; }
public Artifact load ( File path ) throws IOException { return load ( new ArtifactName ( path . getName ( ) ) , path ) ; }
protected final boolean tryAcquire ( int acquires ) { final Thread current = Thread . currentThread ( ) ; int c = getState ( ) ; if ( c == _NUM ) { if ( ! hasQueuedPredecessors ( ) && compareAndSetState ( _NUM , acquires ) ) { setExclusiveOwnerThread ( current ) ; return _BOOL ; } } else if ( current == getExclusiveOwnerThread ( ) ) { int nextc = c + acquires ; if ( nextc < _NUM ) throw new Error ( _STR ) ; setState ( nextc ) ; return _BOOL ; } return _BOOL ; }
private static final boolean isHeaderEnd ( StringBuilder sb ) { int len = sb . length ( ) ; if ( len > _NUM ) { if ( LF2 . equals ( sb . substring ( len - _NUM ) ) ) { return _BOOL ; } } if ( len > _NUM ) { if ( CRLF2 . equals ( sb . substring ( len - _NUM ) ) ) { return _BOOL ; } } return _BOOL ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > result = new Vector < Option > ( ) ; result . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; result . add ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; return result . elements ( ) ; }
public TSActionDelay ( TransitSectionAction tsa , int delay ) { _tsa = tsa ; _delay = delay ; }
public DAddExtensions ( JDialog parent , X509ExtensionSet extensions , PublicKey authorityPublicKey , X500Name authorityCertName , BigInteger authorityCertSerialNumber , PublicKey subjectPublicKey ) { super ( parent , Dialog . ModalityType . DOCUMENT_MODAL ) ; setTitle ( res . getString ( _STR ) ) ; this . extensions = ( X509ExtensionSet ) extensions . clone ( ) ; this . authorityPublicKey = authorityPublicKey ; this . authorityCertName = authorityCertName ; this . authorityCertSerialNumber = authorityCertSerialNumber ; this . subjectPublicKey = subjectPublicKey ; initComponents ( ) ; }
public void add ( IMultiPoint pt ) { if ( inProgress ) { throw new ConcurrentModificationException ( _STR ) ; } points . add ( pt ) ; }
public static boolean isCglibProxyClass ( Class < ? > clazz ) { return ( clazz != null && isCglibProxyClassName ( clazz . getName ( ) ) ) ; }
private DiscoveryInformation verifyDiscovered ( AuthSuccess authResp , DiscoveryInformation discovered ) throws DiscoveryException { if ( authResp == null || authResp . getIdentity ( ) == null ) { _log . info ( _STR ) ; return null ; } if ( authResp . isVersion2 ( ) ) return verifyDiscovered2 ( authResp , discovered ) ; else return verifyDiscovered1 ( authResp , discovered ) ; }
public boolean generate ( ReportDescription description , Date date ) { try { Integer targetDateInt = Integer . parseInt ( format . format ( date ) ) ; AnalysisResultSet logAggregation = makeLogAnal ( description , targetDateInt ) ; Report report = new Report ( ) ; report . setSendTime ( new Date ( ) ) ; report . setTargetDate ( date ) ; report . setLogReport ( logAggregation ) ; report . setTargets ( description . getTargets ( ) ) ; logger . debug ( _STR + report ) ; reportRepository . save ( report ) ; return _BOOL ; } catch ( Exception e ) { logger . error ( e . getMessage ( ) , e ) ; return _BOOL ; } }
@ Override public void updateTextViews ( Recharge recharge ) { unitTypeTextView . setText ( recharge . getUnits ( ) ) ; unitValueTextView . setText ( String . valueOf ( recharge . getCurrentAmount ( ) ) ) ; costTextView . setText ( Currency . localize ( recharge . getCurrentCost ( ) , _BOOL ) ) ; rechargeName . setText ( recharge . getTitle ( ) ) ; confirmationTextView . setText ( _STR + recharge . getCurrentAmount ( ) + _STR + recharge . getUnits ( ) + _STR ) ; if ( recharge . getCurrentAmount ( ) == recharge . getInitialAmount ( ) ) { downArrow . setVisibility ( View . INVISIBLE ) ; } else { downArrow . setVisibility ( View . VISIBLE ) ; } }
private ConcurrentMap < GridCacheVersion , IgniteInternalTx > transactionMap ( IgniteInternalTx tx ) { return ( tx . near ( ) && ! tx . local ( ) ) ? nearIdMap : idMap ; }
public void stop ( ) { synchronized ( this ) { mStopped = _BOOL ; if ( mListenerThread == null ) { return ; } } mListenerThread . interrupt ( ) ; try { if ( mServerSocket != null ) { mServerSocket . close ( ) ; } } catch ( IOException e ) { } }
public static byte [ ] decode ( byte [ ] data , String pri_key ) { try { Cipher cipher = Cipher . getInstance ( _STR ) ; java . security . Key k = getPrivateKey ( pri_key ) ; cipher . init ( Cipher . DECRYPT_MODE , k ) ; byte [ ] deBytes = cipher . doFinal ( data ) ; return deBytes ; } catch ( Exception e ) { log . error ( pri_key , e ) ; } return null ; }
public static int deriveARGB ( Color color1 , Color color2 , float midPoint ) { int r = color1 . getRed ( ) + ( int ) ( ( color2 . getRed ( ) - color1 . getRed ( ) ) * midPoint + _NUM ) ; int g = color1 . getGreen ( ) + ( int ) ( ( color2 . getGreen ( ) - color1 . getGreen ( ) ) * midPoint + _NUM ) ; int b = color1 . getBlue ( ) + ( int ) ( ( color2 . getBlue ( ) - color1 . getBlue ( ) ) * midPoint + _NUM ) ; int a = color1 . getAlpha ( ) + ( int ) ( ( color2 . getAlpha ( ) - color1 . getAlpha ( ) ) * midPoint + _NUM ) ; return ( ( a & _NUM ) << _NUM ) | ( ( r & _NUM ) << _NUM ) | ( ( g & _NUM ) << _NUM ) | ( b & _NUM ) ; }
public void addLandingPad ( int x , int z ) { BlockPosition pos = new BlockPosition ( x , _NUM , z ) ; if ( ! spawnLocations . contains ( pos ) ) { spawnLocations . add ( pos ) ; occupiedLandingPads . put ( pos , _BOOL ) ; } }
static AttackStrategy create ( String params ) { String [ ] arg = params . split ( _STR , - _NUM ) ; if ( arg . length != _NUM ) { throw new IllegalArgumentException ( _STR + params + _STR ) ; } Pair < String , String > desc = parseStrategy ( arg [ _NUM ] ) ; TargetSelectionStrategy targeter = TargetSelectionStrategyFactory . get ( desc . first ( ) , desc . second ( ) ) ; desc = parseStrategy ( arg [ _NUM ] ) ; PositioningStrategy positioner = PositioningStrategyFactory . get ( desc . first ( ) , desc . second ( ) ) ; return new CompoundAttackStrategy ( getSubStrategy ( arg [ _NUM ] ) , targeter , positioner ) ; }
public OrderedThreadPoolExecutor ( ) { this ( DEFAULT_INITIAL_THREAD_POOL_SIZE , DEFAULT_MAX_THREAD_POOL , DEFAULT_KEEP_ALIVE , TimeUnit . SECONDS , Executors . defaultThreadFactory ( ) , null ) ; }
public void addPropertyChangeListener ( PropertyChangeListener pcl ) { m_pcSupport . addPropertyChangeListener ( pcl ) ; }
final public void writeChunk ( L locator , KVO < O > [ ] chunk ) throws MockStaleLocatorException { synchronized ( this ) { if ( staleLocators . contains ( locator . getPartitionId ( ) ) ) { throw new MockStaleLocatorException ( locator ) ; } if ( ! knownLocators . contains ( locator . getPartitionId ( ) ) ) { throw new RuntimeException ( _STR + locator ) ; } } acceptWrite ( locator , chunk ) ; }
public Event event ( int id ) { if ( ! host ) { return ( Event ) events . get ( new Integer ( id ) ) ; } return null ; }
private void initValues ( ) { IPreferenceStore store = doGetPreferenceStore ( ) ; final String storedItems = store . getString ( CheckerPreferences . PREF_CHECKER_CUSTOM_CLASSES ) ; if ( ! storedItems . equals ( _STR ) ) { customCheckers . setItems ( storedItems . split ( _STR ) ) ; } }
private void loadProperties ( ) { String property = System . getProperty ( _STR ) ; if ( null == property ) { property = CarbonCommonConstants . CARBON_PROPERTIES_FILE_PATH ; } File file = new File ( property ) ; LOGGER . info ( _STR + file . getAbsolutePath ( ) ) ; FileInputStream fis = null ; try { if ( file . exists ( ) ) { fis = new FileInputStream ( file ) ; carbonProperties . load ( fis ) ; } } catch ( FileNotFoundException e ) { LOGGER . error ( _STR + CarbonCommonConstants . CARBON_PROPERTIES_FILE_PATH + _STR ) ; } catch ( IOException e ) { LOGGER . error ( _STR + CarbonCommonConstants . CARBON_PROPERTIES_FILE_PATH ) ; } finally { if ( null != fis ) { try { fis . close ( ) ; } catch ( IOException e ) { LOGGER . error ( _STR + CarbonCommonConstants . CARBON_PROPERTIES_FILE_PATH ) ; } } } print ( ) ; }
void sync ( int sourceRepoIndex , int destRepoIndex , AuthenticationInfo subject ) throws IOException { LOG . info ( _STR ) ; NotebookAuthorization auth = NotebookAuthorization . getInstance ( ) ; NotebookRepo srcRepo = getRepo ( sourceRepoIndex ) ; NotebookRepo dstRepo = getRepo ( destRepoIndex ) ; List < NoteInfo > allSrcNotes = srcRepo . list ( subject ) ; List < NoteInfo > srcNotes = auth . filterByUser ( allSrcNotes , subject ) ; List < NoteInfo > dstNotes = dstRepo . list ( subject ) ; Map < String , List < String > > noteIds = notesCheckDiff ( srcNotes , srcRepo , dstNotes , dstRepo , subject ) ; List < String > pushNoteIds = noteIds . get ( pushKey ) ; List < String > pullNoteIds = noteIds . get ( pullKey ) ; List < String > delDstNoteIds = noteIds . get ( delDstKey ) ; if ( ! pushNoteIds . isEmpty ( ) ) { LOG . info ( _STR ) ; for ( String id : pushNoteIds ) { LOG . info ( _STR + id ) ; } pushNotes ( subject , pushNoteIds , srcRepo , dstRepo , _BOOL ) ; } else { LOG . info ( _STR ) ; } if ( ! pullNoteIds . isEmpty ( ) ) { LOG . info ( _STR ) ; for ( String id : pullNoteIds ) { LOG . info ( _STR + id ) ; } pushNotes ( subject , pullNoteIds , dstRepo , srcRepo , _BOOL ) ; } else { LOG . info ( _STR ) ; } if ( ! delDstNoteIds . isEmpty ( ) ) { LOG . info ( _STR ) ; for ( String id : delDstNoteIds ) { LOG . info ( _STR + id ) ; } deleteNotes ( subject , delDstNoteIds , dstRepo ) ; } else { LOG . info ( _STR ) ; } LOG . info ( _STR ) ; }
public void list ( PrintStream out ) { out . println ( _STR ) ; Hashtable < String , Object > h = new Hashtable < > ( ) ; enumerate ( h ) ; for ( Enumeration < String > e = h . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = e . nextElement ( ) ; String val = ( String ) h . get ( key ) ; if ( val . length ( ) > _NUM ) { val = val . substring ( _NUM , _NUM ) + _STR ; } out . println ( key + _STR + val ) ; } }
public static Date stringToDate ( String strdate , @ SuppressWarnings ( _STR ) String format ) { Date date = null ; SimpleDateFormat formatter = new SimpleDateFormat ( format ) ; try { date = formatter . parse ( strdate ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; } return date ; }
@ Nullable public static String md5 ( @ Nullable File file , @ Nullable IgniteLogger log ) { if ( file != null ) return file . isFile ( ) ? fileMd5 ( file , log ) : directoryMd5 ( file , log ) ; return null ; }
public void init ( int size , int certainty , SecureRandom random ) { this . size = size ; this . certainty = certainty ; this . random = random ; }
@ Override public boolean hasNext ( ) { if ( allRowsResult . size ( ) == _NUM ) { return _BOOL ; } totalRecordCounter ++ ; listRecordCounter ++ ; if ( listRecordCounter == _NUM || ( listRecordCounter >= currentRowPointer . size ( ) && currentListCounter < allRowsResult . size ( ) ) ) { listRecordCounter = _NUM ; currentRowPointer = allRowsResult . get ( currentListCounter ) ; currentListCounter ++ ; } return totalRecordCounter < totalNumberOfRecords ; }
public void trimToSize ( ) { delegate . trimToSize ( ) ; }
JSONStringer open ( Scope empty , String openBracket ) throws JSONException { if ( stack . isEmpty ( ) && out . length ( ) > _NUM ) { throw new JSONException ( _STR ) ; } beforeValue ( ) ; stack . add ( empty ) ; out . append ( openBracket ) ; return this ; }
public static final String asciiBoard ( Position pos ) { StringBuilder ret = new StringBuilder ( _NUM ) ; String nl = String . format ( Locale . US , _STR ) ; ret . append ( _STR ) ; ret . append ( nl ) ; for ( int y = _NUM ; y >= _NUM ; y -- ) { ret . append ( _STR ) ; for ( int x = _NUM ; x < _NUM ; x ++ ) { ret . append ( _STR ) ; int p = pos . getPiece ( Position . getSquare ( x , y ) ) ; if ( p == Piece . EMPTY ) { boolean dark = Position . darkSquare ( x , y ) ; ret . append ( dark ? _STR : _STR ) ; } else { ret . append ( Piece . isWhite ( p ) ? _STR : _STR ) ; String pieceName = pieceToChar ( p ) ; if ( pieceName . length ( ) == _NUM ) pieceName = _STR ; ret . append ( pieceName ) ; ret . append ( _STR ) ; } } ret . append ( nl ) ; ret . append ( _STR ) ; ret . append ( nl ) ; } return ret . toString ( ) ; }
public final void clear ( ) { caches . clear ( ) ; sections . clear ( ) ; }
static Set < Node > toNodeSet ( Iterator < Node > i ) { Set < Node > nodeSet = new HashSet < Node > ( ) ; while ( i . hasNext ( ) ) { Node n = i . next ( ) ; nodeSet . add ( n ) ; if ( n . getNodeType ( ) == Node . ELEMENT_NODE ) { NamedNodeMap nnm = n . getAttributes ( ) ; for ( int j = _NUM , length = nnm . getLength ( ) ; j < length ; j ++ ) { nodeSet . add ( nnm . item ( j ) ) ; } } } return nodeSet ; }
public static void runConcurrently ( final Callable < Void > task , final int times ) throws Exception { final ExecutorService service = Executors . newFixedThreadPool ( _NUM ) ; final List < Future < ? > > futures = new ArrayList < Future < ? > > ( ) ; for ( int i = _NUM ; i < times ; i ++ ) { futures . add ( service . submit ( task ) ) ; } for ( final Future < ? > future : futures ) { future . get ( ) ; } }
private static ArrayList < ContainerVm > createVmList ( int brokerId , int containerVmsNumber ) { ArrayList < ContainerVm > containerVms = new ArrayList < ContainerVm > ( ) ; for ( int i = _NUM ; i < containerVmsNumber ; ++ i ) { ArrayList < ContainerPe > peList = new ArrayList < ContainerPe > ( ) ; int vmType = i / ( int ) Math . ceil ( ( double ) containerVmsNumber / _NUM ) ; for ( int j = _NUM ; j < ConstantsExamples . VM_PES [ vmType ] ; ++ j ) { peList . add ( new ContainerPe ( j , new CotainerPeProvisionerSimple ( ( double ) ConstantsExamples . VM_MIPS [ vmType ] ) ) ) ; } containerVms . add ( new PowerContainerVm ( IDs . pollId ( ContainerVm . class ) , brokerId , ( double ) ConstantsExamples . VM_MIPS [ vmType ] , ( float ) ConstantsExamples . VM_RAM [ vmType ] , ConstantsExamples . VM_BW , ConstantsExamples . VM_SIZE , _STR , new ContainerSchedulerTimeSharedOverSubscription ( peList ) , new ContainerRamProvisionerSimple ( ConstantsExamples . VM_RAM [ vmType ] ) , new ContainerBwProvisionerSimple ( ConstantsExamples . VM_BW ) , peList , ConstantsExamples . SCHEDULING_INTERVAL ) ) ; } return containerVms ; }
public static void addPortUse ( Map < StoragePort , Integer > portUseCounts , StoragePort port ) { if ( ! portUseCounts . containsKey ( port ) ) { portUseCounts . put ( port , _NUM ) ; } else { Integer newCount = portUseCounts . get ( port ) + _NUM ; portUseCounts . put ( port , newCount ) ; } }
public void popElemAttributeSet ( ) { m_attrSetStack . pop ( ) ; }
private byte [ ] createPreviewBuffer ( Size previewSize ) { int bitsPerPixel = ImageFormat . getBitsPerPixel ( ImageFormat . NV21 ) ; long sizeInBits = previewSize . getHeight ( ) * previewSize . getWidth ( ) * bitsPerPixel ; int bufferSize = ( int ) Math . ceil ( sizeInBits / _NUM ) + _NUM ; byte [ ] byteArray = new byte [ bufferSize ] ; ByteBuffer buffer = ByteBuffer . wrap ( byteArray ) ; if ( ! buffer . hasArray ( ) || ( buffer . array ( ) != byteArray ) ) { throw new IllegalStateException ( _STR ) ; } mBytesToByteBuffer . put ( byteArray , buffer ) ; return byteArray ; }
@ Override public synchronized CacheObject < V > put ( K key , CacheObject < V > value ) { if ( cache . size ( ) >= maxSize ) { if ( removeExpired ( ) <= _NUM ) { if ( cacheFullRemoveType instanceof RemoveTypeNotRemove ) { return null ; } if ( fullRemoveOne ( ) == null ) { return null ; } } } value . setEnterTime ( System . currentTimeMillis ( ) ) ; cache . put ( key , value ) ; return value ; }
public Criteria createCriteria ( ) { Criteria criteria = createCriteriaInternal ( ) ; if ( oredCriteria . size ( ) == _NUM ) { oredCriteria . add ( criteria ) ; } return criteria ; }
public void removeModelChange ( String tableName , ModelValidator listener ) { if ( tableName == null || listener == null ) return ; String propertyName = m_globalValidators . contains ( listener ) ? tableName + _STR : tableName + listener . getAD_Client_ID ( ) ; ArrayList < ModelValidator > list = m_modelChangeListeners . get ( propertyName ) ; if ( list == null ) return ; list . remove ( listener ) ; if ( list . size ( ) == _NUM ) m_modelChangeListeners . remove ( propertyName ) ; }
protected void fireChangeEvent ( ) { Iterator iter = m_listeners . iterator ( ) ; ChangeEvent evt = new ChangeEvent ( this ) ; while ( iter . hasNext ( ) ) { ChangeListener cl = ( ChangeListener ) iter . next ( ) ; cl . stateChanged ( evt ) ; } }
private String createConnectionName ( ) { StringBuilder nameBuffer = new StringBuilder ( ) ; nameBuffer . append ( getConnectionType ( ) ) ; nameBuffer . append ( _STR ) ; nameBuffer . append ( _host ) ; nameBuffer . append ( _STR ) ; nameBuffer . append ( _port ) ; return nameBuffer . toString ( ) ; }
public Query execute ( PageContext pc , SQL sql , int maxrows , int fetchsize , TimeSpan timeout ) throws PageException { Stopwatch stopwatch = new Stopwatch ( Stopwatch . UNIT_NANO ) ; stopwatch . start ( ) ; String prettySQL = null ; Selects selects = null ; try { SelectParser parser = new SelectParser ( ) ; selects = parser . parse ( sql . getSQLString ( ) ) ; Query q = qoq . execute ( pc , sql , selects , maxrows ) ; q . setExecutionTime ( stopwatch . time ( ) ) ; return q ; } catch ( SQLParserException spe ) { prettySQL = SQLPrettyfier . prettyfie ( sql . getSQLString ( ) ) ; try { Query query = executer . execute ( pc , sql , prettySQL , maxrows ) ; query . setExecutionTime ( stopwatch . time ( ) ) ; return query ; } catch ( PageException ex ) { } } catch ( PageException e ) { } try { boolean isUnion = _BOOL ; Set < String > tables = null ; if ( selects != null ) { HSQLUtil2 hsql2 = new HSQLUtil2 ( selects ) ; isUnion = hsql2 . isUnion ( ) ; tables = hsql2 . getInvokedTables ( ) ; } else { if ( prettySQL == null ) prettySQL = SQLPrettyfier . prettyfie ( sql . getSQLString ( ) ) ; HSQLUtil hsql = new HSQLUtil ( prettySQL ) ; tables = hsql . getInvokedTables ( ) ; isUnion = hsql . isUnion ( ) ; } String strSQL = StringUtil . replace ( sql . getSQLString ( ) , _STR , _STR , _BOOL ) ; strSQL = StringUtil . replace ( strSQL , _STR , _STR , _BOOL ) ; sql . setSQLString ( strSQL ) ; return _execute ( pc , sql , maxrows , fetchsize , timeout , stopwatch , tables , isUnion ) ; } catch ( ParseException e ) { throw new DatabaseException ( e . getMessage ( ) , null , sql , null ) ; } }
@ POST @ Produces ( { MediaType . APPLICATION_XML , MediaType . APPLICATION_JSON } ) @ Path ( _STR ) @ CheckPermission ( roles = { Role . TENANT_ADMIN } ) public TaskResourceRep discoverHost ( @ PathParam ( _STR ) URI id ) { ArgValidator . checkFieldUriType ( id , Host . class , _STR ) ; Host host = queryObject ( Host . class , id , _BOOL ) ; return doDiscoverHost ( host ) ; }
public static final void readFully ( InputStream i , byte b [ ] , int off , int len ) throws IOException { if ( len < _NUM ) { throw new IndexOutOfBoundsException ( ) ; } int n = _NUM ; while ( n < len ) { int count = i . read ( b , off + n , len - n ) ; if ( count < _NUM ) { throw new EOFException ( ) ; } n += count ; } }
private void drawLines ( Canvas canvas ) { for ( int i = _NUM ; i < connectionOrder . size ( ) - _NUM ; i ++ ) { drawLine ( canvas , circles [ connectionOrder . get ( i ) ] , circles [ connectionOrder . get ( i + _NUM ) ] ) ; } }
private void addOrUpdateNode ( AStarNode newNode ) { boolean found = _BOOL ; for ( AStarNode toUpdate : closedNodes ) { if ( newNode . equals ( toUpdate ) ) { toUpdate . updateDistance ( newNode . getG ( ) , newNode . parent ) ; found = _BOOL ; break ; } } if ( ! found ) { openQueue . offer ( newNode ) ; } }
public static File toFile ( JavaFileObject javaFileObject ) { return new File ( javaFileObject . getName ( ) ) ; }
private void signalNotEmpty ( ) { final ReentrantLock takeLock = this . takeLock ; takeLock . lock ( ) ; try { notEmpty . signal ( ) ; } finally { takeLock . unlock ( ) ; } }
public WritableRaster createCompatibleWritableRaster ( int w , int h ) { int [ ] bOffs = { _NUM , _NUM , _NUM } ; return Raster . createInterleavedRaster ( DataBuffer . TYPE_BYTE , w , h , w * _NUM , _NUM , bOffs , null ) ; }
public static MultiSegmentPowerLawBipartiteGraph buildRandomMultiSegmentBipartiteGraph ( int maxNumSegments , int maxNumEdgesPerSegment , int leftSize , int rightSize , double edgeProbability , Random random ) { MultiSegmentPowerLawBipartiteGraph multiSegmentPowerLawBipartiteGraph = new MultiSegmentPowerLawBipartiteGraph ( maxNumSegments , maxNumEdgesPerSegment , leftSize / _NUM , ( int ) ( rightSize * edgeProbability / _NUM ) , _NUM , rightSize / _NUM , ( int ) ( leftSize * edgeProbability / _NUM ) , _NUM , new IdentityEdgeTypeMask ( ) , new NullStatsReceiver ( ) ) ; for ( int i = _NUM ; i < leftSize ; i ++ ) { for ( int j = _NUM ; j < rightSize ; j ++ ) { if ( random . nextDouble ( ) < edgeProbability ) { multiSegmentPowerLawBipartiteGraph . addEdge ( i , j , ( byte ) _NUM ) ; } } } return multiSegmentPowerLawBipartiteGraph ; }
public static String execute ( String command ) { return SubprocessUttility . execute ( command ) ; }
public synchronized void updateProgress ( final int value ) { final Thread t = Thread . currentThread ( ) ; final MyInteger v = mIndividualThreadProgress . get ( t ) ; if ( v == null ) { mIndividualThreadProgress . put ( t , new MyInteger ( value ) ) ; } else { v . setValue ( value ) ; } if ( value > mLastReportedProgress ) { int min = Integer . MAX_VALUE ; for ( final MyInteger m : mIndividualThreadProgress . values ( ) ) { if ( m . getValue ( ) < min ) { min = m . getValue ( ) ; } } if ( min > mLastReportedProgress ) { mLastReportedProgress = min ; Diagnostic . progress ( _STR + min + _STR + mName ) ; } } }
private ContextHandler createContextHandler ( String directory , boolean isInJar , File installRootDirectory , int expiresInSeconds ) { final ContextHandler contextHandler = new ContextHandler ( ) ; final ResourceHandler resourceHandler = new ExpiresResourceHandler ( expiresInSeconds ) ; final String directoryWithSlash = _STR + directory ; contextHandler . setContextPath ( directoryWithSlash ) ; Resource directoryResource = getDirectoryResource ( directory , isInJar , installRootDirectory ) ; directoryResource = new JsMinifyingResource ( directoryResource ) ; if ( isInJar ) { directoryResource = new CachingResource ( directoryResource , directoryWithSlash ) ; } resourceHandler . setBaseResource ( directoryResource ) ; if ( ! isInJar ) { resourceHandler . setMinMemoryMappedContentLength ( _NUM ) ; } contextHandler . setHandler ( resourceHandler ) ; return contextHandler ; }
public boolean startsWith ( java . lang . CharSequence prefix ) { return startsWith ( prefix , _NUM ) ; }
private List < ContainerInitializer > jspInitializers ( ) { JettyJasperInitializer sci = new JettyJasperInitializer ( ) ; ContainerInitializer initializer = new ContainerInitializer ( sci , null ) ; List < ContainerInitializer > initializers = new ArrayList < ContainerInitializer > ( ) ; initializers . add ( initializer ) ; return initializers ; }
public static TempPath createDirectory ( ) throws IOException { return wrap ( Files . createTempDirectory ( PREFIX ) ) ; }
public static String toString ( int partition [ ] [ ] ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( _STR ) ; for ( int i = _NUM ; i < partition . length ; i ++ ) { sb . append ( _STR + Arrays . toString ( partition [ i ] ) ) ; } sb . append ( _STR ) ; return sb . toString ( ) ; }
public static boolean isCategoryChildOf ( ServletRequest request , String parentProductCategoryId , String productCategoryId ) { return isCategoryChildOf ( ( Delegator ) request . getAttribute ( _STR ) , ( LocalDispatcher ) request . getAttribute ( _STR ) , parentProductCategoryId , productCategoryId ) ; }
@ Override public boolean input ( Instance instance ) { if ( getInputFormat ( ) == null ) { throw new IllegalStateException ( _STR ) ; } if ( m_NewBatch ) { resetQueue ( ) ; m_NewBatch = _BOOL ; } push ( ( Instance ) instance . copy ( ) ) ; return _BOOL ; }
public Collection < String > listColumns ( String table ) throws DatabaseException { Collection < String > result = new ArrayList < String > ( ) ; ResultSet rs = null ; try { DatabaseMetaData dbm = connection . getMetaData ( ) ; rs = dbm . getColumns ( null , null , table , null ) ; while ( rs . next ( ) ) { result . add ( rs . getString ( _STR ) ) ; } } catch ( SQLException e ) { throw new DatabaseException ( e ) ; } finally { if ( rs != null ) { try { rs . close ( ) ; } catch ( SQLException e ) { } } } return result ; }
public void addCreatedResource ( Location location , Resource resource ) { resourceList . add ( resource ) ; locationToResourceMap . put ( location , resource ) ; }
public void signalEvent ( ) { Collection < Semaphore > semaphores = _semaphores . values ( ) ; for ( Semaphore semaphore : semaphores ) { semaphore . release ( ) ; semaphores . remove ( semaphore ) ; } }
@ Override public boolean equals ( Object obj ) { if ( obj == this ) { return _BOOL ; } if ( ! ( obj instanceof KeyedObjects ) ) { return _BOOL ; } KeyedObjects that = ( KeyedObjects ) obj ; int count = getItemCount ( ) ; if ( count != that . getItemCount ( ) ) { return _BOOL ; } for ( int i = _NUM ; i < count ; i ++ ) { Comparable k1 = getKey ( i ) ; Comparable k2 = that . getKey ( i ) ; if ( ! k1 . equals ( k2 ) ) { return _BOOL ; } Object o1 = getObject ( i ) ; Object o2 = that . getObject ( i ) ; if ( o1 == null ) { if ( o2 != null ) { return _BOOL ; } } else { if ( ! o1 . equals ( o2 ) ) { return _BOOL ; } } } return _BOOL ; }
protected boolean isQuorumMaintained ( ) { if ( nodeCount == _NUM ) { log . info ( _STR ) ; return _BOOL ; } int quorumNodeCnt = nodeCount / _NUM + _NUM ; CoordinatorClient coordinatorClient = coordinator . getCoordinatorClient ( ) ; List < Service > allActiveDbsvcs = coordinatorClient . locateAllSvcsAllVers ( Constants . DBSVC_NAME ) ; List < String > otherActiveDbsvcIds = new ArrayList < > ( ) ; String mySvcId = coordinator . getMySvcId ( ) ; String localDbSvcId = _STR + mySvcId . substring ( mySvcId . lastIndexOf ( _STR ) ) ; for ( Service activeDbsvc : allActiveDbsvcs ) { if ( ! localDbSvcId . equals ( activeDbsvc . getId ( ) ) ) { otherActiveDbsvcIds . add ( activeDbsvc . getId ( ) ) ; } } log . info ( _STR , otherActiveDbsvcIds , quorumNodeCnt ) ; boolean isMaintained = otherActiveDbsvcIds . size ( ) >= quorumNodeCnt ; if ( ! isMaintained ) { log . info ( _STR ) ; } return isMaintained ; }
public static void scheduleNextAlarm ( Context context ) { scheduleNextAlarm ( context , AlertUtils . createAlarmManager ( context ) , REMINDER_QUERY_BATCH_SIZE , System . currentTimeMillis ( ) ) ; }
public void requestStop ( ) { stopRequested . set ( _BOOL ) ; }
public void test_engineCreateSSLEngine_02 ( ) { int [ ] invalid_port = { Integer . MIN_VALUE , - _NUM , - _NUM , _NUM , Integer . MAX_VALUE } ; SSLContextSpiImpl ssl = new SSLContextSpiImpl ( ) ; try { SSLEngine sleng = ssl . engineCreateSSLEngine ( _STR , _NUM ) ; fail ( _STR ) ; } catch ( RuntimeException re ) { String str = re . getMessage ( ) ; if ( ! str . equals ( _STR ) ) fail ( _STR + str ) ; } catch ( Exception e ) { fail ( _STR + e + _STR ) ; } for ( int i = _NUM ; i < invalid_port . length ; i ++ ) { try { SSLEngine sleng = ssl . engineCreateSSLEngine ( _STR , invalid_port [ i ] ) ; fail ( _STR ) ; } catch ( IllegalArgumentException iae ) { } } }
@ SafeVarargs public static < T > T [ ] join ( IntFunction < T [ ] > arrayFunction , T [ ] ... arrays ) { if ( arrays . length == _NUM ) { return arrayFunction . apply ( _NUM ) ; } if ( arrays . length == _NUM ) { return arrays [ _NUM ] ; } if ( arrays . length == _NUM ) { return join ( arrayFunction , arrays [ _NUM ] , arrays [ _NUM ] ) ; } T [ ] notNull = null ; int finalSize = _NUM ; int nullArrays = _NUM ; List < T > list = new ArrayList < > ( arrays . length * _NUM ) ; for ( T [ ] array : arrays ) { if ( ( array == null ) || ( array . length == _NUM ) ) { nullArrays ++ ; } else { notNull = array ; finalSize += array . length ; Collections . addAll ( list , array ) ; } } if ( nullArrays == arrays . length ) { return arrayFunction . apply ( _NUM ) ; } if ( nullArrays == ( arrays . length - _NUM ) ) { return notNull ; } return list . toArray ( arrayFunction . apply ( list . size ( ) ) ) ; }
private static Set < String > splitPath ( RelaxedURL url ) { Set < String > results = new HashSet < String > ( ) ; Set < String > queries = normalizeQuery ( url . getQuery ( ) ) ; results . add ( _STR ) ; for ( String q : queries ) { results . add ( _STR + q ) ; } Set < String > paths = splitPath ( url . getPath ( ) ) ; results . addAll ( paths ) ; for ( String p : paths ) { for ( String q : queries ) { results . add ( p + _STR + q ) ; } } return results ; }
public ActionForward initBestSellingReport ( ActionMapping mapping , ActionForm form , HttpServletRequest request , HttpServletResponse response ) throws ApplicationException , OperationException { ActionForward fwd = init ( mapping , form , request , response ) ; if ( fwd != null ) return fwd ; SellingItemForm reportForm = ( SellingItemForm ) form ; String timePeriod = ReportDateManager . TODAY ; String dateRange = Constants . FIXED_DATE_RANGE ; reportForm . setTimePeriod ( timePeriod ) ; reportForm . setDateRange ( dateRange ) ; reportForm . setFromDate ( _STR ) ; reportForm . setToDate ( _STR ) ; reportForm . validate ( mapping , request ) ; return mapping . findForward ( INIT_BEST_SELLING_REPORT ) ; }
@ Override public void transactionBegin ( ) { for ( BigdataGraphListener listener : listeners ) { listener . transactionBegin ( ) ; } }
public synchronized void add ( Job job ) { boolean canRunImmediately = dagManager . addJob ( job ) ; if ( canRunImmediately ) { LOG . debug ( _STR + job + _STR ) ; jobsToRun . add ( job ) ; } incrementSubmittedJobCount ( ) ; }
public void reset ( String latex ) { parseString = new StringBuffer ( latex ) ; len = parseString . length ( ) ; formula . root = null ; pos = _NUM ; spos = _NUM ; line = _NUM ; col = _NUM ; group = _NUM ; insertion = _BOOL ; atIsLetter = _NUM ; arrayMode = _BOOL ; ignoreWhiteSpace = _BOOL ; firstpass ( ) ; }
public void addConstant ( ConstantPoolEntry entry ) { if ( entry instanceof Utf8Constant ) { Utf8Constant utf8 = ( Utf8Constant ) entry ; _utf8Map . put ( utf8 . getValue ( ) , utf8 ) ; } _entries . add ( entry ) ; }
public void addData ( ArrayList < ChartSet > data ) { this . data = data ; }
public final double infoGain ( ) { return m_infoGain ; }
static void writeRule ( ZoneOffsetTransitionRule rule , DataOutput out ) throws IOException { int month = rule . month ; byte dom = rule . dom ; int dow = rule . dow ; LocalTime time = rule . time ; boolean timeEndOfDay = rule . timeEndOfDay ; TimeDefinition timeDefinition = rule . timeDefinition ; ZoneOffset standardOffset = rule . standardOffset ; ZoneOffset offsetBefore = rule . offsetBefore ; ZoneOffset offsetAfter = rule . offsetAfter ; int timeSecs = ( timeEndOfDay ? _NUM : time . toSecondOfDay ( ) ) ; int stdOffset = standardOffset . getTotalSeconds ( ) ; int beforeDiff = offsetBefore . getTotalSeconds ( ) - stdOffset ; int afterDiff = offsetAfter . getTotalSeconds ( ) - stdOffset ; int timeByte = ( timeSecs % _NUM == _NUM ? ( timeEndOfDay ? _NUM : time . getHour ( ) ) : _NUM ) ; int stdOffsetByte = ( stdOffset % _NUM == _NUM ? stdOffset / _NUM + _NUM : _NUM ) ; int beforeByte = ( beforeDiff == _NUM || beforeDiff == _NUM || beforeDiff == _NUM ? beforeDiff / _NUM : _NUM ) ; int afterByte = ( afterDiff == _NUM || afterDiff == _NUM || afterDiff == _NUM ? afterDiff / _NUM : _NUM ) ; int dowByte = ( dow == - _NUM ? _NUM : dow ) ; int b = ( month << _NUM ) + ( ( dom + _NUM ) << _NUM ) + ( dowByte << _NUM ) + ( timeByte << _NUM ) + ( timeDefinition . ordinal ( ) << _NUM ) + ( stdOffsetByte << _NUM ) + ( beforeByte << _NUM ) + afterByte ; out . writeInt ( b ) ; if ( timeByte == _NUM ) { out . writeInt ( timeSecs ) ; } if ( stdOffsetByte == _NUM ) { out . writeInt ( stdOffset ) ; } if ( beforeByte == _NUM ) { out . writeInt ( offsetBefore . getTotalSeconds ( ) ) ; } if ( afterByte == _NUM ) { out . writeInt ( offsetAfter . getTotalSeconds ( ) ) ; } }
boolean cancel ( int propertyConstant ) { if ( ( mPropertyMask & propertyConstant ) != _NUM && mNameValuesHolder != null ) { int count = mNameValuesHolder . size ( ) ; for ( int i = _NUM ; i < count ; ++ i ) { NameValuesHolder nameValuesHolder = mNameValuesHolder . get ( i ) ; if ( nameValuesHolder . mNameConstant == propertyConstant ) { mNameValuesHolder . remove ( i ) ; mPropertyMask &= ~ propertyConstant ; return _BOOL ; } } } return _BOOL ; }
@ SuppressWarnings ( _STR ) public static < T > TypeSerializer < T > deserialize ( byte [ ] bytes ) throws IOException { ByteArrayInputStream bis = new ByteArrayInputStream ( bytes ) ; ObjectInput in = null ; try { in = new ObjectInputStream ( bis ) ; return ( TypeSerializer < T > ) in . readObject ( ) ; } catch ( ClassNotFoundException e ) { throw new IOException ( _STR ) ; } finally { try { bis . close ( ) ; } catch ( IOException ex ) { } try { if ( in != null ) { in . close ( ) ; } } catch ( IOException ex ) { } } }
public void testRemainderKnuthMultiDigitsByOneDigit ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , - _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM } ; byte bBytes [ ] = { _NUM , - _NUM , - _NUM , - _NUM } ; int aSign = _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { _NUM , - _NUM , - _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . remainder ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public void showSelectedNeuronProperties ( ) { NeuronDialog dialog = NeuronDialog . createNeuronDialog ( getSelectedNeurons ( ) ) ; dialog . setModalityType ( Dialog . ModalityType . MODELESS ) ; dialog . pack ( ) ; dialog . setLocationRelativeTo ( null ) ; dialog . setVisible ( _BOOL ) ; }
public void encrypt ( byte [ ] in , int length ) { int pos = _NUM ; while ( pos < in . length && pos < length ) { encryptBlock ( in , pos , length ) ; pos += blockSize ; } }
private static boolean hasChangesOfChildren ( long last , PageContext pc , Class clazz ) { java . lang . reflect . Method [ ] methods = clazz . getMethods ( ) ; java . lang . reflect . Method method ; Class [ ] params ; for ( int i = _NUM ; i < methods . length ; i ++ ) { method = methods [ i ] ; if ( method . getDeclaringClass ( ) == clazz ) { if ( _hasChangesOfChildren ( pc , last , method . getReturnType ( ) ) ) return _BOOL ; params = method . getParameterTypes ( ) ; for ( int y = _NUM ; y < params . length ; y ++ ) { if ( _hasChangesOfChildren ( pc , last , params [ y ] ) ) return _BOOL ; } } } return _BOOL ; }
private WindowStuffHelper ( ) { }
public static String removeSpecialChar ( String tempStr ) { if ( tempStr != null ) { tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; while ( tempStr . indexOf ( _STR ) > _NUM ) { tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; } tempStr = replace ( tempStr , _STR , _STR , _BOOL , _BOOL ) ; } return tempStr ; }
public RunScriptAction ( NetworkPanel networkPanel ) { super ( _STR ) ; putValue ( SMALL_ICON , ResourceManager . getImageIcon ( _STR ) ) ; putValue ( SHORT_DESCRIPTION , _STR ) ; this . networkPanel = networkPanel ; }
public T webImage ( String url ) { return webImage ( url , _BOOL , _BOOL , _NUM ) ; }
private Map < Installment , List < Receipt > > consolidateTuplesInstallmentWise ( final List < InstallmentReceiptTuple > tuples ) { final Map < Installment , List < Receipt > > consolidated = new HashMap < Installment , List < Receipt > > ( ) ; for ( final InstallmentReceiptTuple t : tuples ) { List < Receipt > receiptsForInstallment = consolidated . get ( t . installment ) ; if ( receiptsForInstallment == null ) { receiptsForInstallment = new ArrayList < Receipt > ( ) ; consolidated . put ( t . installment , receiptsForInstallment ) ; } if ( ! receiptsForInstallment . contains ( t . receipt ) ) receiptsForInstallment . add ( t . receipt ) ; } LOGGER . info ( _STR + consolidated ) ; return consolidated ; }
public static boolean isValidEmail ( String email ) { final String emailPattern = _STR ; Matcher matcher ; Pattern pattern = Pattern . compile ( emailPattern ) ; matcher = pattern . matcher ( email ) ; if ( matcher != null ) return matcher . matches ( ) ; else return _BOOL ; }
public void add ( LineMergeDirectedEdge directedEdge ) { directedEdges . add ( directedEdge ) ; }
public static ApplicationXml parseApplicationXmlFromFile ( File file , EntityResolver entityResolver ) throws IOException , JDOMException { InputStream in = null ; try { in = new FileInputStream ( file ) ; return parseApplicationXml ( in , entityResolver ) ; } finally { if ( in != null ) { try { in . close ( ) ; } catch ( IOException ioe ) { } } } }
public ChannelEntry newConnection ( ReadSelectorThread readHandler , SelectionKey key ) { SocketChannel channel = ( SocketChannel ) key . channel ( ) ; WriteSelectorThread writeHandler = _selectorManager . getWriteHandler ( key . channel ( ) ) ; Socket socket = channel . socket ( ) ; InetSocketAddress socketAddress = ( InetSocketAddress ) ( socket == null ? null : socket . getRemoteSocketAddress ( ) ) ; ChannelEntry channelEntry = new ChannelEntry ( writeHandler , readHandler , key , socketAddress , this ) ; m_Channels . put ( channel , channelEntry ) ; if ( socketAddress != null ) { _clientToChannel . put ( socketAddress , channelEntry ) ; } if ( _logger . isLoggable ( Level . FINE ) ) _logger . log ( Level . FINE , _STR + channelEntry . getClientEndPointAddress ( ) + _STR ) ; return channelEntry ; }
public static boolean isExtension ( String filename , String extension ) { if ( filename == null ) { return _BOOL ; } if ( extension == null || extension . length ( ) == _NUM ) { return indexOfExtension ( filename ) == - _NUM ; } String fileExt = getExtension ( filename ) ; return fileExt . equals ( extension ) ; }
public String report ( ) { StringBuffer report = new StringBuffer ( ) ; intHashTable = new int [ table . tableSize ] ; calculateSlotUsage ( ) ; int max = maxCollisions ( ) ; int [ ] slotUsageCount = new int [ max + _NUM ] ; for ( int i : intHashTable ) { slotUsageCount [ i ] ++ ; } report . append ( _STR + numEntries + _STR ) ; report . append ( _STR + ( numEntries / ( _NUM * table . tableSize ) + _STR ) ) ; float weightedAvg = _NUM ; int numNonEmpty = _NUM ; report . append ( _STR ) ; for ( int j = _NUM ; j <= max ; j ++ ) { if ( slotUsageCount [ j ] != _NUM ) { report . append ( j + _STR + slotUsageCount [ j ] + _STR ) ; if ( j != _NUM ) { weightedAvg += slotUsageCount [ j ] * j ; numNonEmpty += slotUsageCount [ j ] ; } } } weightedAvg /= numNonEmpty ; report . append ( _STR + minCollisions ( ) + _STR + max + _STR + weightedAvg ) ; return report . toString ( ) ; }
public void addSubscriptionToStore ( final String topic , final String clientId ) { final ClientTopicCouple subscription = new ClientTopicCouple ( clientId , topic ) ; if ( ! topics . contains ( subscription ) ) { logger . debug ( _STR + topic + _STR + clientId + _STR ) ; subscriptionsStore . add ( subscription ) ; topics . add ( topic ) ; } }
public boolean zip ( String zipLocation , String toBeZippedName ) { boolean ret = _BOOL ; if ( verbose ) Debug . put ( _STR ) ; File toBeZipped = new File ( toBeZippedName ) ; if ( toBeZipped . exists ( ) ) { try { FileUtils . saveZipFile ( zipLocation , toBeZipped ) ; ret = _BOOL ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return ret ; }
private HashMap < Integer , Boolean > generateExpandedStateMap ( ) { HashMap < Integer , Boolean > parentListItemHashMap = new HashMap < > ( ) ; int childCount = _NUM ; Object listItem ; ParentWrapper parentWrapper ; int listItemCount = mItemList . size ( ) ; for ( int i = _NUM ; i < listItemCount ; i ++ ) { if ( mItemList . get ( i ) != null ) { listItem = getListItem ( i ) ; if ( listItem instanceof ParentWrapper ) { parentWrapper = ( ParentWrapper ) listItem ; parentListItemHashMap . put ( i - childCount , parentWrapper . isExpanded ( ) ) ; } else { childCount ++ ; } } } return parentListItemHashMap ; }
public void addAudioPacketListener ( Listener < AudioPacket > listener ) { mAudioPacketBroadcaster . addListener ( listener ) ; }
public static boolean decodeToFile ( String dataToDecode , String filename ) { boolean success = _BOOL ; Base64 . OutputStream bos = null ; try { bos = new Base64 . OutputStream ( new java . io . FileOutputStream ( filename ) , Base64 . DECODE ) ; bos . write ( dataToDecode . getBytes ( PREFERRED_ENCODING ) ) ; success = _BOOL ; } catch ( java . io . IOException e ) { success = _BOOL ; } finally { try { bos . close ( ) ; } catch ( Exception e ) { } } return success ; }
public DeltaCRLIndicatorExtension ( Boolean critical , Object value ) throws IOException { super ( PKIXExtensions . DeltaCRLIndicator_Id , critical . booleanValue ( ) , value , NAME , LABEL ) ; }
public JavaEnvironment ( File javaPath ) { Objects . requireNonNull ( javaPath ) ; this . javaPath = javaPath ; }
private String printOFormat ( final long x ) { String sx = null ; if ( x == Long . MIN_VALUE ) { sx = _STR ; } else if ( x < _NUM ) { final String t = Long . toString ( ( ~ ( - x - _NUM ) ) ^ Long . MIN_VALUE , _NUM ) ; switch ( t . length ( ) ) { case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; case _NUM : sx = _STR + t ; break ; } } else { sx = Long . toString ( x , _NUM ) ; } return printOFormat ( sx ) ; }
void addCallback ( JSObject source , String method , JSFunction callback , boolean async ) { String key = source . toJSPointer ( ) + _STR + method ; callbacks . put ( key , callback ) ; String id = JSObject . ID_KEY ; String self = source . toJSPointer ( ) ; String js = self + _STR + method + _STR + _STR + self + _STR + method + _STR + _STR + _STR + _STR + _STR + id + _STR + _STR + jsLookupTable + _STR + jsLookupTable + _STR + id + _STR + jsLookupTable + _STR + jsLookupTable + _STR + id + _STR + _STR + _STR + jsLookupTable + _STR + _STR + _STR + _STR + _STR + _STR ; exec ( js , async ) ; }
public void removeAllBlocksFromSection ( ) { for ( int i = mBlockEntries . size ( ) ; i > _NUM ; i -- ) { Block b = mBlockEntries . get ( i - _NUM ) ; if ( b != null ) { b . removePropertyChangeListener ( mBlockListeners . get ( i - _NUM ) ) ; } mBlockListeners . remove ( i - _NUM ) ; mBlockEntries . remove ( i - _NUM ) ; } for ( int i = mForwardEntryPoints . size ( ) ; i > _NUM ; i -- ) { mForwardEntryPoints . remove ( i - _NUM ) ; } for ( int i = mReverseEntryPoints . size ( ) ; i > _NUM ; i -- ) { mReverseEntryPoints . remove ( i - _NUM ) ; } initializationNeeded = _BOOL ; }
public static void writeStringToFile ( Path file , String text ) throws IOException { byte [ ] buf = text . getBytes ( StandardCharsets . UTF_8 ) ; Files . write ( file , buf ) ; }
private static boolean isOperatorVariableAccess ( final INaviOperandTreeNode node ) { final List < INaviOperandTreeNode > children = node . getChildren ( ) ; if ( children . size ( ) == _NUM ) { final INaviOperandTreeNode child0 = children . get ( _NUM ) ; final INaviOperandTreeNode child1 = children . get ( _NUM ) ; return isVariable ( child0 ) ^ isVariable ( child1 ) ; } else { return _BOOL ; } }
@ Override public void onValueSelected ( int pickerIndex , int newValue , boolean autoAdvance ) { if ( pickerIndex == HOUR_INDEX ) { setHour ( newValue , _BOOL ) ; String announcement = String . format ( _STR , newValue ) ; if ( mAllowAutoAdvance && autoAdvance ) { setCurrentItemShowing ( MINUTE_INDEX , _BOOL , _BOOL , _BOOL ) ; announcement += _STR + mSelectMinutes ; } else { mTimePicker . setContentDescription ( mHourPickerDescription + _STR + newValue ) ; } Utils . tryAccessibilityAnnounce ( mTimePicker , announcement ) ; } else if ( pickerIndex == MINUTE_INDEX ) { setMinute ( newValue ) ; mTimePicker . setContentDescription ( mMinutePickerDescription + _STR + newValue ) ; } else if ( pickerIndex == HALF_DAY_INDEX ) { updateHalfDay ( newValue ) ; } else if ( pickerIndex == ENABLE_PICKER_INDEX ) { if ( ! isTypedTimeFullyLegal ( ) ) { mTypedTimes . clear ( ) ; } finishKbMode ( _BOOL ) ; } }
public static final List < Geo > segmentNearPoly ( Geo s1 , Geo s2 , GeoArray r , double near ) { int rlen = r . getSize ( ) ; Geo pl0 = r . get ( rlen - _NUM , new Geo ( ) ) ; Geo pl1 = new Geo ( ) ; List < Geo > list = null ; Geo check = new Geo ( ) ; for ( int j = _NUM ; j < rlen ; j ++ ) { r . get ( j , pl1 ) ; Geo ret = segmentsIntersectOrNear ( s1 , s2 , pl0 , pl1 , near , check ) ; if ( ret != null ) { if ( list == null ) { list = new LinkedList < Geo > ( ) ; } list . add ( ret ) ; check = new Geo ( ) ; } pl0 . initialize ( pl1 ) ; } return list ; }
public void addAction ( UpdateAction action ) { actionList . add ( action ) ; for ( UpdateManagerListener listener : listeners ) { listener . actionAdded ( action ) ; } }
public void load ( DataInput rafIn ) throws IOException , MaryConfigurationException { int numIdx = rafIn . readInt ( ) ; idxInterval = rafIn . readInt ( ) ; if ( idxInterval <= _NUM ) { throw new MaryConfigurationException ( _STR ) ; } bytePtrs = new long [ numIdx ] ; timePtrs = new long [ numIdx ] ; int numBytesToRead = _NUM * numIdx + _NUM ; byte [ ] data = new byte [ numBytesToRead ] ; rafIn . readFully ( data ) ; DataInput bufIn = new DataInputStream ( new ByteArrayInputStream ( data ) ) ; for ( int i = _NUM ; i < numIdx ; i ++ ) { bytePtrs [ i ] = bufIn . readLong ( ) ; timePtrs [ i ] = bufIn . readLong ( ) ; if ( i > _NUM ) { if ( bytePtrs [ i ] < bytePtrs [ i - _NUM ] || timePtrs [ i ] < timePtrs [ i - _NUM ] ) { throw new MaryConfigurationException ( _STR ) ; } } } bufIn . readLong ( ) ; bufIn . readLong ( ) ; }
public URL find ( String classname ) { String jarname = _STR + classname . replace ( _STR , _STR ) + _STR ; return thisClass . getResource ( jarname ) ; }
public void signoff ( String uniqueID ) { Debug . message ( _STR , _STR + uniqueID + _STR ) ; caches . remove ( uniqueID ) ; viewAttributeLists . remove ( uniqueID ) ; timestamps . remove ( uniqueID ) ; }
private String createNonCGSrdfPairStepsOnEmptyGroup ( List < VolumeDescriptor > sourceDescriptors , List < VolumeDescriptor > targetDescriptors , RemoteDirectorGroup group , Map < URI , Volume > uriVolumeMap , String waitFor , Workflow workflow ) { StorageSystem system = dbClient . queryObject ( StorageSystem . class , group . getSourceStorageSystemUri ( ) ) ; URI vpoolChangeUri = getVirtualPoolChangeVolume ( sourceDescriptors ) ; log . info ( _STR , vpoolChangeUri ) ; List < URI > sourceURIs = VolumeDescriptor . getVolumeURIs ( sourceDescriptors ) ; List < URI > targetURIs = new ArrayList < > ( ) ; for ( URI sourceURI : sourceURIs ) { Volume source = uriVolumeMap . get ( sourceURI ) ; StringSet srdfTargets = source . getSrdfTargets ( ) ; for ( String targetStr : srdfTargets ) { URI targetURI = URI . create ( targetStr ) ; targetURIs . add ( targetURI ) ; } } Method createListMethod = createListReplicasMethod ( system . getId ( ) , sourceURIs , targetURIs , vpoolChangeUri , _BOOL ) ; Method rollbackMethod = rollbackSRDFLinksMethod ( system . getId ( ) , sourceURIs , targetURIs , _BOOL ) ; String stepId = workflow . createStep ( CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_GROUP , CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_DESC , waitFor , system . getId ( ) , system . getSystemType ( ) , getClass ( ) , createListMethod , rollbackMethod , null ) ; return stepId ; }
public static Long downsamplerTimestamp ( Long millitimestamp , long windowSize ) { return millitimestamp - ( millitimestamp % windowSize ) ; }
public boolean isNavigationAtBottom ( ) { return ( mSmallestWidthDp >= _NUM || mInPortrait ) ; }
@ Override public String toString ( ) { if ( points == null || points . length ( ) == _NUM ) { return idx + _STR ; } StringBuffer bf = new StringBuffer ( ) ; try { bf . append ( idx + _STR ) ; ListNode temp ; for ( int i = _NUM ; i < points . size ( ) ; i ++ ) { temp = points . get ( i ) ; if ( i == _NUM ) { bf . append ( _STR + temp . idx ) ; } else { bf . append ( _STR + temp . idx ) ; } } } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return bf . toString ( ) ; }
public void error ( org . xml . sax . SAXParseException e ) throws org . xml . sax . SAXException { String formattedMsg = e . getMessage ( ) ; SAXSourceLocator locator = getLocator ( ) ; ErrorListener handler = m_stylesheetProcessor . getErrorListener ( ) ; try { handler . error ( new TransformerException ( formattedMsg , locator ) ) ; } catch ( TransformerException te ) { throw new org . xml . sax . SAXException ( te ) ; } }
private void putHead ( String key , TemplateSubPatternAssociation assoc ) { if ( key . equals ( PsuedoNames . PSEUDONAME_TEXT ) ) m_textPatterns = assoc ; else if ( key . equals ( PsuedoNames . PSEUDONAME_ROOT ) ) m_docPatterns = assoc ; else if ( key . equals ( PsuedoNames . PSEUDONAME_COMMENT ) ) m_commentPatterns = assoc ; m_patternTable . put ( key , assoc ) ; }
public UnionPathIterator ( Compiler compiler , int opPos ) throws javax . xml . transform . TransformerException { super ( ) ; opPos = OpMap . getFirstChildPos ( opPos ) ; loadLocationPaths ( compiler , opPos , _NUM ) ; }
public IStatus run ( IProgressMonitor monitor ) throws InvocationTargetException { ZipFile zipFile = null ; FileOutputStream fos = null ; BufferedOutputStream dest = null ; BufferedInputStream is = null ; jobStatus = Status . OK_STATUS ; try { zipFile = new ZipFile ( archive ) ; monitor . beginTask ( _STR + archive . getName ( ) , zipFile . size ( ) ) ; Enumeration < ? extends ZipEntry > entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { ZipEntry zipEntry = entries . nextElement ( ) ; String currentEntry = zipEntry . getName ( ) ; File destFile = new File ( targetDir , currentEntry ) ; File destinationParent = destFile . getParentFile ( ) ; if ( ! zipEntry . isDirectory ( ) ) { destinationParent . mkdirs ( ) ; is = new BufferedInputStream ( zipFile . getInputStream ( zipEntry ) ) ; int numBytesRead ; byte bytes [ ] = new byte [ BUFSIZE ] ; fos = new FileOutputStream ( destFile ) ; dest = new BufferedOutputStream ( fos , BUFSIZE ) ; while ( ( numBytesRead = is . read ( bytes , _NUM , BUFSIZE ) ) != - _NUM ) { dest . write ( bytes , _NUM , numBytesRead ) ; } dest . flush ( ) ; } else { destFile . mkdirs ( ) ; } monitor . worked ( _NUM ) ; if ( monitor . isCanceled ( ) ) { jobStatus = Status . CANCEL_STATUS ; break ; } } if ( ! monitor . isCanceled ( ) ) { jobStatus = Status . OK_STATUS ; } } catch ( ZipException ze ) { String errormsg = errorMessage ( _STR ) ; jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , errormsg ) ; CorePluginLog . logError ( ze , errormsg ) ; } catch ( IOException ioe ) { String errormsg = errorMessage ( ) ; jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , errormsg ) ; CorePluginLog . logError ( ioe , errormsg ) ; } finally { try { if ( zipFile != null ) { zipFile . close ( ) ; } if ( is != null ) { is . close ( ) ; } if ( dest != null ) { dest . close ( ) ; } } catch ( IOException ioe ) { String errormsg = errorMessage ( ) ; jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , errormsg ) ; CorePluginLog . logError ( ioe , errormsg ) ; } } return jobStatus ; }
public int read ( String table , String key , Set < String > fields , HashMap < String , ByteIterator > result ) { long st = System . nanoTime ( ) ; int res = _db . read ( table , key , fields , result ) ; long en = System . nanoTime ( ) ; _measurements . measure ( _STR , ( int ) ( ( en - st ) / _NUM ) ) ; _measurements . reportReturnCode ( _STR , res ) ; return res ; }
protected void errorMessage ( String msg ) throws IOException { String str = msg + _STR + m_Tokenizer . toString ( ) ; if ( m_Lines > _NUM ) { int line = Integer . parseInt ( str . replaceAll ( _STR , _STR ) ) ; str = str . replaceAll ( _STR , _STR + ( m_Lines + line - _NUM ) ) ; } throw new IOException ( str ) ; }
public static void spooky4 ( final BitVector bv , final long prefixLength , final long seed , final long [ ] state , final long [ ] tuple ) { long h0 , h1 , h2 , h3 ; h0 = seed ; h1 = seed ; h2 = ARBITRARY_BITS ; h3 = ARBITRARY_BITS ; long pos ; if ( prefixLength >= _NUM * Long . SIZE ) { final int p = _NUM * ( int ) ( ( prefixLength - _NUM * Long . SIZE ) / ( _NUM * Long . SIZE ) ) ; h0 = state [ p + _NUM ] ; h1 = state [ p + _NUM ] ; h2 = state [ p + _NUM ] ; h3 = state [ p + _NUM ] ; pos = p * Long . SIZE + _NUM * Long . SIZE ; } else pos = _NUM ; long remaining = prefixLength - pos ; if ( remaining >= Long . SIZE * _NUM ) { h0 += bv . getLong ( pos + _NUM * Long . SIZE , pos + _NUM * Long . SIZE ) ; h1 += bv . getLong ( pos + _NUM * Long . SIZE , pos + _NUM * Long . SIZE ) ; remaining -= _NUM * Long . SIZE ; pos += _NUM * Long . SIZE ; } if ( remaining > Long . SIZE ) { h2 += bv . getLong ( pos + _NUM * Long . SIZE , pos + _NUM * Long . SIZE ) ; h3 += bv . getLong ( pos + _NUM * Long . SIZE , prefixLength ) ; } else if ( remaining > _NUM ) { h2 += bv . getLong ( pos , prefixLength ) ; } else { h2 += ARBITRARY_BITS ; h3 += ARBITRARY_BITS ; } h0 += prefixLength ; h3 ^= h2 ; h2 = Long . rotateLeft ( h2 , _NUM ) ; h3 += h2 ; h0 ^= h3 ; h3 = Long . rotateLeft ( h3 , _NUM ) ; h0 += h3 ; h1 ^= h0 ; h0 = Long . rotateLeft ( h0 , _NUM ) ; h1 += h0 ; h2 ^= h1 ; h1 = Long . rotateLeft ( h1 , _NUM ) ; h2 += h1 ; h3 ^= h2 ; h2 = Long . rotateLeft ( h2 , _NUM ) ; h3 += h2 ; h0 ^= h3 ; h3 = Long . rotateLeft ( h3 , _NUM ) ; h0 += h3 ; h1 ^= h0 ; h0 = Long . rotateLeft ( h0 , _NUM ) ; h1 += h0 ; h2 ^= h1 ; h1 = Long . rotateLeft ( h1 , _NUM ) ; h2 += h1 ; h3 ^= h2 ; h2 = Long . rotateLeft ( h2 , _NUM ) ; h3 += h2 ; h0 ^= h3 ; h3 = Long . rotateLeft ( h3 , _NUM ) ; h0 += h3 ; h1 ^= h0 ; h0 = Long . rotateLeft ( h0 , _NUM ) ; h1 += h0 ; switch ( tuple . length ) { case _NUM : tuple [ _NUM ] = h3 ; case _NUM : tuple [ _NUM ] = h2 ; case _NUM : tuple [ _NUM ] = h1 ; case _NUM : tuple [ _NUM ] = h0 ; } }
public boolean hasNext ( ) { if ( deal > _NUM ) { sc . close ( ) ; } return ( deal <= _NUM ) ; }
public void addIssuer ( X500Principal issuer ) { if ( issuer == null ) { throw new NullPointerException ( _STR ) ; } if ( issuerNames == null ) { issuerNames = new ArrayList < String > ( ) ; } String name = issuer . getName ( X500Principal . CANONICAL ) ; if ( ! issuerNames . contains ( name ) ) { issuerNames . add ( name ) ; } if ( issuerPrincipals == null ) { issuerPrincipals = new ArrayList < X500Principal > ( issuerNames . size ( ) ) ; } int size = issuerNames . size ( ) - _NUM ; for ( int i = issuerPrincipals . size ( ) ; i < size ; i ++ ) { issuerPrincipals . add ( new X500Principal ( issuerNames . get ( i ) ) ) ; } issuerPrincipals . add ( issuer ) ; }
static String buildKeySelection ( int selectionCount ) { String [ ] list = new String [ selectionCount ] ; Arrays . fill ( list , _STR ) ; return KEY_COLUMN + _STR + TextUtils . join ( _STR , list ) + _STR ; }
private void filterNodeMap ( ConcurrentMap < String , Collection < ClusterNode > > map , final ClusterNode exclNode ) { for ( String cacheName : registeredCaches . keySet ( ) ) { String maskedName = maskNull ( cacheName ) ; while ( _BOOL ) { Collection < ClusterNode > oldNodes = map . get ( maskedName ) ; if ( oldNodes == null || oldNodes . isEmpty ( ) ) break ; Collection < ClusterNode > newNodes = new ArrayList < > ( oldNodes ) ; if ( ! newNodes . remove ( exclNode ) ) break ; if ( map . replace ( maskedName , oldNodes , newNodes ) ) break ; } } }
public void storeDevice ( Device d ) { if ( ! isMaster ) return ; if ( d == null ) return ; long now = System . nanoTime ( ) ; writeUpdatedDeviceToStorage ( d ) ; lastWriteTimes . put ( d . getDeviceKey ( ) , now ) ; }
public void testCreateElementNS1 ( ) throws Throwable { String namespaceURI = _STR ; String malformedName = _STR ; Document doc ; doc = ( Document ) load ( _STR , builder ) ; { boolean success = _BOOL ; try { doc . createElementNS ( namespaceURI , malformedName ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . NAMESPACE_ERR ) ; } assertTrue ( _STR , success ) ; } }
private static void adjustAbs ( double [ ] array , int lower , int upper ) { int j , k ; double temp ; j = lower ; k = lower * _NUM ; while ( k <= upper ) { if ( ( k < upper ) && ( Math . abs ( array [ k - _NUM ] ) < Math . abs ( array [ k ] ) ) ) { k += _NUM ; } if ( Math . abs ( array [ j - _NUM ] ) < Math . abs ( array [ k - _NUM ] ) ) { temp = array [ j - _NUM ] ; array [ j - _NUM ] = array [ k - _NUM ] ; array [ k - _NUM ] = temp ; } j = k ; k *= _NUM ; } }
public synchronized IAudioProcessor remove ( int index ) { IAudioProcessor processor = processors . remove ( index ) ; buildFinalProcessor ( ) ; return processor ; }
LinkedList < TrieNode < T > > makeSuffixChain ( TrieNode < T > root , String suffix , T value ) { LinkedList < TrieNode < T > > result = new LinkedList < > ( ) ; String rootPrefix = root . getPrefix ( ) ; for ( int i = _NUM , suffixSize = suffix . length ( ) ; i <= suffixSize ; i ++ ) { String newPrefix = rootPrefix + suffix . substring ( _NUM , i ) ; TrieNode < T > newNode = TrieNode . makeNode ( newPrefix ) ; result . add ( newNode ) ; root . addChild ( newNode ) ; root = newNode ; } root . setValue ( value ) ; return result ; }
private static By byFromLocator ( String locator ) { if ( locator . startsWith ( _STR ) ) { return By . xpath ( locator ) ; } if ( locator . startsWith ( _STR ) ) { return By . id ( locator . replaceFirst ( _STR , _STR ) ) ; } if ( locator . startsWith ( _STR ) ) { return By . cssSelector ( locator . replaceFirst ( _STR , _STR ) ) ; } if ( locator . startsWith ( _STR ) ) { return By . xpath ( locator . replaceFirst ( _STR , _STR ) ) ; } if ( locator . startsWith ( _STR ) ) { return By . name ( locator . replaceFirst ( _STR , _STR ) ) ; } if ( locator . startsWith ( _STR ) ) { return By . linkText ( locator . replaceFirst ( _STR , _STR ) ) ; } if ( locator . startsWith ( _STR ) ) { return By . partialLinkText ( locator . replaceFirst ( _STR , _STR ) ) ; } throw new IllegalArgumentException ( _STR + locator ) ; }
private static void taskStarted ( ProgressThread task ) { for ( ProgressThreadStateListener l : listener . getListeners ( ProgressThreadStateListener . class ) ) { l . progressThreadStarted ( task ) ; } }
public static final void isCommentWF ( DOMErrorHandler errorHandler , DOMErrorImpl error , DOMLocatorImpl locator , String datavalue , boolean isXML11Version ) { if ( datavalue == null || ( datavalue . length ( ) == _NUM ) ) { return ; } char [ ] dataarray = datavalue . toCharArray ( ) ; int datalength = dataarray . length ; if ( isXML11Version ) { int i = _NUM ; while ( i < datalength ) { char c = dataarray [ i ++ ] ; if ( XML11Char . isXML11Invalid ( c ) ) { if ( XMLChar . isHighSurrogate ( c ) && i < datalength ) { char c2 = dataarray [ i ++ ] ; if ( XMLChar . isLowSurrogate ( c2 ) && XMLChar . isSupplemental ( XMLChar . supplemental ( c , c2 ) ) ) { continue ; } } String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , _STR , new Object [ ] { Integer . toString ( dataarray [ i - _NUM ] , _NUM ) } ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , _STR ) ; } else if ( c == _STR && i < datalength && dataarray [ i ] == _STR ) { String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , _STR , null ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , _STR ) ; } } } else { int i = _NUM ; while ( i < datalength ) { char c = dataarray [ i ++ ] ; if ( XMLChar . isInvalid ( c ) ) { if ( XMLChar . isHighSurrogate ( c ) && i < datalength ) { char c2 = dataarray [ i ++ ] ; if ( XMLChar . isLowSurrogate ( c2 ) && XMLChar . isSupplemental ( XMLChar . supplemental ( c , c2 ) ) ) { continue ; } } String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , _STR , new Object [ ] { Integer . toString ( dataarray [ i - _NUM ] , _NUM ) } ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , _STR ) ; } else if ( c == _STR && i < datalength && dataarray [ i ] == _STR ) { String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , _STR , null ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , _STR ) ; } } } }
private void throwExceptionIfDestroyed ( String method ) throws DeepstreamRecordDestroyedException { if ( this . isDestroyed ) { throw new DeepstreamRecordDestroyedException ( method ) ; } }
public void upload ( final InputStream in , String artifact , String version , String fileName , Properties props ) throws IOException { props . put ( FILE_NAME_PROPERTY , fileName ) ; props . put ( VERSION_PROPERTY , version ) ; props . put ( ARTIFACT_PROPERTY , artifact ) ; storeProperties ( artifact , version , props ) ; try ( OutputStream out = newOutputStream ( getArtifact ( artifact , version , fileName ) ) ) { IOUtils . copyLarge ( in , out ) ; } finally { in . close ( ) ; } }
static String escapeBytes ( final ByteString input ) { final StringBuilder builder = new StringBuilder ( input . size ( ) ) ; for ( int i = _NUM ; i < input . size ( ) ; i ++ ) { final byte b = input . byteAt ( i ) ; switch ( b ) { case _NUM : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _NUM : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; case _STR : builder . append ( _STR ) ; break ; default : if ( b >= _NUM ) { builder . append ( ( char ) b ) ; } else { builder . append ( _STR ) ; builder . append ( ( char ) ( _STR + ( ( b > > > _NUM ) & _NUM ) ) ) ; builder . append ( ( char ) ( _STR + ( ( b > > > _NUM ) & _NUM ) ) ) ; builder . append ( ( char ) ( _STR + ( b & _NUM ) ) ) ; } break ; } } return builder . toString ( ) ; }
public void load ( ) throws IOException { if ( magicNumber == _NUM ) { try ( InputReaderLittleEndian ins = new InputReaderLittleEndian ( new FileInputStreamAdapter ( fileName ) ) ) { magicNumber = ins . readLong ( ) ; if ( magicNumber != MAGIC_NUMBER ) throw new IOException ( _STR ) ; version = ins . readLong ( ) ; if ( version > DAA_VERSION ) throw new IOException ( _STR ) ; diamondBuild = ins . readLong ( ) ; dbSeqs = ins . readLong ( ) ; dbSeqsUsed = ins . readLong ( ) ; dbLetters = ins . readLong ( ) ; flags = ins . readLong ( ) ; queryRecords = ins . readLong ( ) ; modeRank = ins . readInt ( ) ; gapOpen = ins . readInt ( ) ; gapExtend = ins . readInt ( ) ; reward = ins . readInt ( ) ; penalty = ins . readInt ( ) ; reserved1 = ins . readInt ( ) ; reserved2 = ins . readInt ( ) ; reserved3 = ins . readInt ( ) ; k = ins . readDouble ( ) ; lambda = ins . readDouble ( ) ; reserved4 = ins . readDouble ( ) ; reserved5 = ins . readDouble ( ) ; for ( int i = _NUM ; i < scoreMatrix . length ; i ++ ) { scoreMatrix [ i ] = ( byte ) ins . read ( ) ; } scoreMatrixName = Basic . toString ( scoreMatrix ) ; for ( int i = _NUM ; i < blockSize . length ; i ++ ) blockSize [ i ] = ins . readLong ( ) ; if ( blockSize [ _NUM ] == _NUM ) throw new IOException ( _STR ) ; for ( int i = _NUM ; i < blockTypeRank . length ; i ++ ) { blockTypeRank [ i ] = ( byte ) ins . read ( ) ; switch ( BlockType . value ( blockTypeRank [ i ] ) ) { case ref_names : if ( refNamesBlockIndex != - _NUM ) throw new IOException ( _STR ) ; refNamesBlockIndex = i ; break ; case ref_lengths : if ( refLengthsBlockIndex != - _NUM ) throw new IOException ( _STR ) ; refLengthsBlockIndex = i ; break ; case alignments : if ( alignmentsBlockIndex != - _NUM ) throw new IOException ( _STR ) ; alignmentsBlockIndex = i ; break ; } } if ( refNamesBlockIndex == - _NUM ) throw new IOException ( _STR ) ; if ( refLengthsBlockIndex == - _NUM ) throw new IOException ( _STR ) ; if ( alignmentsBlockIndex == - _NUM ) throw new IOException ( _STR ) ; if ( refLengthsBlockIndex < refNamesBlockIndex ) throw new IOException ( _STR ) ; headerSize = ins . getPosition ( ) ; lnK = Math . log ( k ) ; } } }
private static Class < ? > [ ] types ( Object ... values ) { if ( values == null ) { return new Class [ _NUM ] ; } Class < ? > [ ] result = new Class [ values . length ] ; for ( int i = _NUM ; i < values . length ; i ++ ) { Object value = values [ i ] ; result [ i ] = value == null ? NULL . class : value . getClass ( ) ; } return result ; }
private final void countAll ( ) throws IOException { MultiDocValues . OrdinalMap ordinalMap ; if ( dv instanceof MultiDocValues . MultiSortedSetDocValues ) { ordinalMap = ( ( MultiSortedSetDocValues ) dv ) . mapping ; } else { ordinalMap = null ; } IndexReader origReader = state . getOrigReader ( ) ; for ( LeafReaderContext context : origReader . leaves ( ) ) { LeafReader reader = context . reader ( ) ; SortedSetDocValues segValues = reader . getSortedSetDocValues ( field ) ; if ( segValues == null ) { continue ; } Bits liveDocs = reader . getLiveDocs ( ) ; if ( ordinalMap != null ) { final LongValues ordMap = ordinalMap . getGlobalOrds ( context . ord ) ; int numSegOrds = ( int ) segValues . getValueCount ( ) ; final int [ ] segCounts = new int [ numSegOrds ] ; int docID ; while ( ( docID = segValues . nextDoc ( ) ) != DocIdSetIterator . NO_MORE_DOCS ) { if ( liveDocs == null || liveDocs . get ( docID ) ) { int term = ( int ) segValues . nextOrd ( ) ; while ( term != SortedSetDocValues . NO_MORE_ORDS ) { segCounts [ term ] ++ ; term = ( int ) segValues . nextOrd ( ) ; } } } for ( int ord = _NUM ; ord < numSegOrds ; ord ++ ) { int count = segCounts [ ord ] ; if ( count != _NUM ) { counts [ ( int ) ordMap . get ( ord ) ] += count ; } } } else { int docID ; while ( ( docID = segValues . nextDoc ( ) ) != DocIdSetIterator . NO_MORE_DOCS ) { if ( liveDocs == null || liveDocs . get ( docID ) ) { int term = ( int ) segValues . nextOrd ( ) ; while ( term != SortedSetDocValues . NO_MORE_ORDS ) { counts [ term ] ++ ; term = ( int ) segValues . nextOrd ( ) ; } } } } } }
public void addToParent ( Element headerE ) throws Exception { Document doc = headerE . getOwnerDocument ( ) ; Element securityE = doc . createElementNS ( wsseNS , WSSEConstants . TAG_WSSE + _STR + WSSEConstants . TAG_SECURITYT ) ; securityE . setAttributeNS ( SOAPBindingConstants . NS_XML , WSSEConstants . TAG_XML_WSSE , wsseNS ) ; headerE . appendChild ( securityE ) ; Document binaryTokenD = XMLUtils . toDOMDocument ( toString ( ) , debug ) ; Element binaryTokenE = binaryTokenD . getDocumentElement ( ) ; securityE . appendChild ( doc . importNode ( binaryTokenE , _BOOL ) ) ; }
public final static int skipSpaces ( final String in , final int start ) { int pos = start ; while ( pos < in . length ( ) && ( in . charAt ( pos ) == _STR || in . charAt ( pos ) == _STR ) ) { pos ++ ; } return pos < in . length ( ) ? pos : - _NUM ; }
public void update ( ) { if ( amplitude > _NUM ) { long elapsed = System . currentTimeMillis ( ) - timestamp ; double delta = amplitude * Math . exp ( - elapsed / timeConstant ) ; if ( Math . abs ( delta ) > _NUM ) { viewpointNode . drag ( lastDx * delta , lastDy * delta ) ; } else { amplitude = _NUM ; updateLookAt ( ) ; } } }
@ Override public Assignment sample ( ) { if ( ! samples . isEmpty ( ) ) { int selection = sampler . nextInt ( samples . size ( ) ) ; Assignment selected = samples . get ( selection ) ; return selected ; } else { log . warning ( _STR ) ; return new Assignment ( ) ; } }
@ SneakyThrows public static X509Certificate readCertificate ( InputStream is ) { return ( X509Certificate ) CERT_FACTORY . generateCertificate ( is ) ; }
public GuacamoleHTTPTunnelMap ( ) { executor . scheduleAtFixedRate ( new TunnelTimeoutTask ( TUNNEL_TIMEOUT * _NUM ) , TUNNEL_TIMEOUT , TUNNEL_TIMEOUT , TimeUnit . SECONDS ) ; }
default B with ( String key , Class < ? > value ) { return with ( key , value != null ? value . getName ( ) : null ) ; }
private void rename ( Table table ) { if ( renameDefinitions != null ) { for ( Column col : table . getAllColumns ( ) ) { String newColName = renameDefinitions . getNewColumnName ( table . getSchema ( ) , table . getName ( ) , col . getName ( ) ) ; if ( newColName != null ) col . setName ( newColName ) ; } String newTableName = renameDefinitions . getNewTableName ( table . getSchema ( ) , table . getName ( ) ) ; String newSchemaName = renameDefinitions . getNewSchemaName ( table . getSchema ( ) , table . getName ( ) ) ; if ( newTableName != null ) table . setTable ( newTableName ) ; if ( newSchemaName != null ) table . setSchema ( newSchemaName ) ; } }
private void handleReadLastConfirmedError ( int rc ) { if ( BKException . Code . NoSuchLedgerExistsException == rc ) { if ( bkcNoLedgerExceptionsOnReadLAC . incrementAndGet ( ) > noLedgerExceptionOnReadLACThreshold ) { LOG . info ( _STR , new Object [ ] { fullyQualifiedName , currentLH , conf . getReadAheadNoSuchLedgerExceptionOnReadLACErrorThresholdMillis ( ) } ) ; bkcNoLedgerExceptionsOnReadLAC . set ( _NUM ) ; if ( closeCurrentLedgerHandle ( ) ) { next . process ( BKException . Code . OK ) ; } return ; } else { if ( LOG . isTraceEnabled ( ) ) { LOG . info ( _STR , new Object [ ] { fullyQualifiedName , currentLH , conf . getReadAheadWaitTime ( ) } ) ; } schedule ( ReadAheadWorker . this , conf . getReadAheadWaitTime ( ) ) ; return ; } } else if ( BKException . Code . OK != rc ) { handleException ( ReadAheadPhase . READ_LAST_CONFIRMED , rc ) ; return ; } }
public synchronized boolean put ( long fp ) { int index = ( int ) ( fp & this . mask ) ; long [ ] list = this . table [ index ] ; if ( list != null ) { int listlen = list . length ; for ( int i = _NUM ; i < listlen ; i ++ ) { if ( list [ i ] == fp ) return _BOOL ; } } if ( count >= threshold ) { rehash ( ) ; index = ( int ) ( fp & this . mask ) ; list = this . table [ index ] ; } int len = ( list == null ? _NUM : list . length ) ; long [ ] newList = new long [ len + _NUM ] ; if ( list != null ) System . arraycopy ( list , _NUM , newList , _NUM , len ) ; newList [ len ] = fp ; this . table [ index ] = newList ; this . count ++ ; return _BOOL ; }
public boolean isEmpty ( ) { return extOrdering . isEmpty ( ) ; }
public void applyLayout ( ) { layout . setInitialLocation ( getPosition ( ) ) ; layout . layoutNeurons ( getNeuronList ( ) ) ; }
public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
public int nice ( ) { return Integer . parseInt ( fields [ _NUM ] ) ; }
float layerSize ( int p_76490_1_ ) { if ( ( float ) p_76490_1_ < ( float ) this . heightLimit * _NUM ) { return - _NUM ; } else { float f = ( float ) this . heightLimit / _NUM ; float f1 = f - ( float ) p_76490_1_ ; float f2 = MathHelper . sqrt_float ( f * f - f1 * f1 ) ; if ( f1 == _NUM ) { f2 = f ; } else if ( Math . abs ( f1 ) >= f ) { return _NUM ; } return f2 * _NUM ; } }
public static Method findStaticMethod ( Class < ? > type , String name , Class < ? > ... args ) throws NoSuchMethodException { Method method = findMethod ( type , name , args ) ; if ( ! Modifier . isStatic ( method . getModifiers ( ) ) ) { throw new NoSuchMethodException ( _STR + name + _STR ) ; } return method ; }
private void fetchSearchServiceCardsFromServer ( String keyword , String categoryId ) { final Map < String , String > params = new HashMap < String , String > ( _NUM ) ; params . put ( HttpConstants . LATITUDE , SharedPreferenceHelper . getString ( R . string . pref_latitude ) ) ; params . put ( HttpConstants . LONGITUDE , SharedPreferenceHelper . getString ( R . string . pref_longitude ) ) ; params . put ( HttpConstants . TYPE , HttpConstants . SearchType . SERVICE_CARD ) ; params . put ( HttpConstants . GROUP_ID , categoryId ) ; params . put ( HttpConstants . PER , _STR ) ; params . put ( HttpConstants . RADIUS , _STR ) ; params . put ( HttpConstants . TITLE , keyword ) ; RetroCallback retroCallback ; retroCallback = new RetroCallback ( this ) ; retroCallback . setRequestId ( HttpConstants . ApiResponseCodes . SEARCH_SERVICES ) ; retroCallbackList . add ( retroCallback ) ; params . put ( HttpConstants . PAGE , _STR ) ; mYeloApi . getServiceCards ( params , retroCallback ) ; mSwipeRefreshLayout . setRefreshing ( _BOOL ) ; }
public void addPhonenumber ( String aPhonenumber ) { if ( mPhoneNumbers . indexOf ( aPhonenumber ) < _NUM ) { mPhoneNumbers . add ( aPhonenumber ) ; } }
public static final String digitsAndPlusOnly ( Matcher matcher ) { StringBuilder buffer = new StringBuilder ( ) ; String matchingRegion = matcher . group ( ) ; for ( int i = _NUM , size = matchingRegion . length ( ) ; i < size ; i ++ ) { char character = matchingRegion . charAt ( i ) ; if ( character == _STR || Character . isDigit ( character ) ) { buffer . append ( character ) ; } } return buffer . toString ( ) ; }
boolean compareMethods ( Method a , Method b ) { if ( ( a == null ) != ( b == null ) ) { return _BOOL ; } if ( a != null && b != null ) { if ( ! a . equals ( b ) ) { return _BOOL ; } } return _BOOL ; }
MarkerSegment findMarkerSegment ( int tag ) { Iterator iter = markerSequence . iterator ( ) ; while ( iter . hasNext ( ) ) { MarkerSegment seg = ( MarkerSegment ) iter . next ( ) ; if ( seg . tag == tag ) { return seg ; } } return null ; }
private static Reader openInput ( String from ) { try { return CliUtils . reader ( from ) ; } catch ( IOException e ) { log . error ( _STR , e ) ; System . exit ( _NUM ) ; return null ; } }
public PublisherConcatArray < T > concatAdditionalSourceFirst ( Publisher < ? extends T > source ) { int n = array . length ; @ SuppressWarnings ( _STR ) Publisher < ? extends T > [ ] newArray = new Publisher [ n + _NUM ] ; System . arraycopy ( array , _NUM , newArray , _NUM , n ) ; newArray [ _NUM ] = source ; return new PublisherConcatArray < > ( delayError , newArray ) ; }
protected void doPublish ( String tenantId , List < T > items , String subscriber , int retryCount , long delay ) throws Exception { String data = mapper . writeValueAsString ( items ) ; TextMessage tm = session . createTextMessage ( data ) ; if ( tenantId != null ) { tm . setStringProperty ( _STR , tenantId ) ; } if ( subscriber != null ) { tm . setStringProperty ( _STR , subscriber ) ; } tm . setIntProperty ( _STR , retryCount ) ; if ( delay > _NUM ) { tm . setLongProperty ( _STR , System . currentTimeMillis ( ) + delay ) ; } if ( log . isLoggable ( Level . FINEST ) ) { log . finest ( _STR + tm ) ; } producer . send ( tm ) ; }
@ Override public boolean eIsSet ( int featureID ) { switch ( featureID ) { case MappingPackage . ATTRIBUTE__NAME : return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT . equals ( name ) ; case MappingPackage . ATTRIBUTE__VALUE : return VALUE_EDEFAULT == null ? value != null : ! VALUE_EDEFAULT . equals ( value ) ; } return super . eIsSet ( featureID ) ; }
protected void checkValid ( ) throws URIException { if ( ! ( equals ( _scheme , DEFAULT_SCHEME ) || _scheme == null ) ) { throw new URIException ( URIException . PARSING , _STR ) ; } }
public PrivateKeyUsageExtension ( Boolean critical , Object value ) throws CertificateException , IOException { this . extensionId = PKIXExtensions . PrivateKeyUsage_Id ; this . critical = critical . booleanValue ( ) ; this . extensionValue = ( byte [ ] ) value ; DerInputStream str = new DerInputStream ( this . extensionValue ) ; DerValue [ ] seq = str . getSequence ( _NUM ) ; for ( int i = _NUM ; i < seq . length ; i ++ ) { DerValue opt = seq [ i ] ; if ( opt . isContextSpecific ( TAG_BEFORE ) && ! opt . isConstructed ( ) ) { if ( notBefore != null ) { throw new CertificateParsingException ( _STR ) ; } opt . resetTag ( DerValue . tag_GeneralizedTime ) ; str = new DerInputStream ( opt . toByteArray ( ) ) ; notBefore = str . getGeneralizedTime ( ) ; } else if ( opt . isContextSpecific ( TAG_AFTER ) && ! opt . isConstructed ( ) ) { if ( notAfter != null ) { throw new CertificateParsingException ( _STR ) ; } opt . resetTag ( DerValue . tag_GeneralizedTime ) ; str = new DerInputStream ( opt . toByteArray ( ) ) ; notAfter = str . getGeneralizedTime ( ) ; } else throw new IOException ( _STR + _STR ) ; } }
@ Override public List < Period > generatePeriods ( DateTimeUnit dateTimeUnit ) { Calendar cal = getCalendar ( ) ; dateTimeUnit . setMonth ( _NUM ) ; dateTimeUnit . setDay ( _NUM ) ; List < Period > periods = Lists . newArrayList ( ) ; int year = dateTimeUnit . getYear ( ) ; while ( dateTimeUnit . getYear ( ) == year ) { periods . add ( createPeriod ( dateTimeUnit , cal ) ) ; dateTimeUnit = cal . plusMonths ( dateTimeUnit , _NUM ) ; } return periods ; }
public static SecretKey createAESKey ( ) { try { final KeyGenerator kgen = KeyGenerator . getInstance ( _STR ) ; final int keySize = _NUM ; kgen . init ( keySize ) ; return kgen . generateKey ( ) ; } catch ( final NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return null ; }
@ Override public void valueChange ( ValueChangeEvent e ) { String name = e . getPropertyName ( ) ; Object value = e . getNewValue ( ) ; log . config ( name + _STR + value ) ; if ( value == null ) return ; }
@ Deprecated public static JSONObject parseJson ( String response ) throws JSONException , FacebookError { if ( response . equals ( _STR ) ) { throw new FacebookError ( _STR ) ; } if ( response . equals ( _STR ) ) { response = _STR ; } JSONObject json = new JSONObject ( response ) ; if ( json . has ( _STR ) ) { JSONObject error = json . getJSONObject ( _STR ) ; throw new FacebookError ( error . getString ( _STR ) , error . getString ( _STR ) , _NUM ) ; } if ( json . has ( _STR ) && json . has ( _STR ) ) { throw new FacebookError ( json . getString ( _STR ) , _STR , Integer . parseInt ( json . getString ( _STR ) ) ) ; } if ( json . has ( _STR ) ) { throw new FacebookError ( _STR , _STR , Integer . parseInt ( json . getString ( _STR ) ) ) ; } if ( json . has ( _STR ) ) { throw new FacebookError ( json . getString ( _STR ) ) ; } if ( json . has ( _STR ) ) { throw new FacebookError ( json . getString ( _STR ) ) ; } return json ; }
public SpyVersions loadVersions ( ) throws XMLException { setLoading ( _BOOL ) ; final String urlString = propertyLoader . getProperty ( BasePropertyNames . VERSION_INFO_URL ) + _STR + currentRelease ; try { final URL url = new URL ( urlString ) ; final String xml = IOUtils . toString ( url . openStream ( ) ) ; versions = ( SpyVersions ) loadFromString ( xml ) ; } catch ( IOException | NullPointerException e ) { throw new XMLException ( _STR + urlString , e ) ; } setLoading ( _BOOL ) ; return versions ; }
@ RequestMapping ( value = _STR , method = POST , produces = APPLICATION_JSON_VALUE ) public ResponseEntity < PageResponse < UserDTO > > findAll ( @ RequestBody PageRequestByExample < UserDTO > prbe ) throws URISyntaxException { PageResponse < UserDTO > pageResponse = userDTOService . findAll ( prbe ) ; return new ResponseEntity < > ( pageResponse , new HttpHeaders ( ) , HttpStatus . OK ) ; }
public void addFooterView ( View view ) { mFooterViews . add ( view ) ; notifyDataSetChanged ( ) ; }
public void addFirst ( String seq ) { queue = seq + queue . substring ( pos ) ; pos = _NUM ; }
public boolean isReadOnly ( boolean useSessionStatus ) throws SQLException { if ( useSessionStatus && ! this . isClosed && versionMeetsMinimum ( _NUM , _NUM , _NUM ) && ! getUseLocalSessionState ( ) && getReadOnlyPropagatesToServer ( ) ) { java . sql . Statement stmt = null ; java . sql . ResultSet rs = null ; try { try { stmt = getMetadataSafeStatement ( ) ; rs = stmt . executeQuery ( _STR ) ; if ( rs . next ( ) ) { return rs . getInt ( _NUM ) != _NUM ; } } catch ( SQLException ex1 ) { if ( ex1 . getErrorCode ( ) != MysqlErrorNumbers . ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords ( ) ) { throw SQLError . createSQLException ( _STR , SQLError . SQL_STATE_GENERAL_ERROR , ex1 , getExceptionInterceptor ( ) ) ; } } } finally { if ( rs != null ) { try { rs . close ( ) ; } catch ( Exception ex ) { } rs = null ; } if ( stmt != null ) { try { stmt . close ( ) ; } catch ( Exception ex ) { } stmt = null ; } } } return this . readOnly ; }
public void testConsume ( ) { AtomicInteger sum = new AtomicInteger ( ) ; SubmissionPublisher < Integer > p = basicPublisher ( ) ; CompletableFuture < Void > f = p . consume ( null ) ; int n = _NUM ; for ( int i = _NUM ; i <= n ; ++ i ) p . submit ( i ) ; p . close ( ) ; f . join ( ) ; assertEquals ( ( n * ( n + _NUM ) ) / _NUM , sum . get ( ) ) ; }
public void exprSetParent ( ExpressionNode n ) { super . exprSetParent ( n ) ; int nArgs = m_argVec . size ( ) ; for ( int i = _NUM ; i < nArgs ; i ++ ) { Expression arg = ( Expression ) m_argVec . elementAt ( i ) ; arg . exprSetParent ( n ) ; } }
public static void cleanDirectory ( File directory ) throws IOException { if ( ! directory . exists ( ) ) { String message = directory + _STR ; throw new IllegalArgumentException ( message ) ; } if ( ! directory . isDirectory ( ) ) { String message = directory + _STR ; throw new IllegalArgumentException ( message ) ; } File [ ] files = directory . listFiles ( ) ; if ( files == null ) { throw new IOException ( _STR + directory ) ; } IOException exception = null ; for ( File file : files ) { try { forceDelete ( file ) ; } catch ( IOException ioe ) { exception = ioe ; } } if ( null != exception ) { throw exception ; } }
public final boolean isRegistered ( ) { return ! canonicalName . startsWith ( _STR ) && ! canonicalName . startsWith ( _STR ) ; }
private static DownscaleQuality addConstant ( String type ) { init ( ) ; if ( constList . containsKey ( type ) ) { throw new RuntimeException ( _STR + type + _STR ) ; } DownscaleQuality q = new DownscaleQuality ( type ) ; constList . put ( type , q ) ; return q ; }
public void bail ( String message , boolean printUsageStatement ) { Debug . output ( message ) ; if ( printUsageStatement ) printUsage ( ) ; System . exit ( _NUM ) ; }
private void assertTimestampsEqualWithEpsilon ( long expected , long actual , int epsilon , String desc ) { assertTrue ( _STR + desc + _STR + epsilon + _STR + expected + _STR + actual , Math . abs ( actual - expected ) < epsilon ) ; }
public SpiderSitemapXMLParser ( SpiderParam params ) { super ( ) ; if ( params == null ) { throw new IllegalArgumentException ( _STR ) ; } this . params = params ; }
public boolean flush ( boolean deaccelerated ) ;
public void addHop ( int id ) { if ( entities == null ) { return ; } hopsNumber ++ ; entities . add ( Integer . valueOf ( id ) ) ; }
protected boolean [ ] datasetIntegrity ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , boolean predictorMissing , boolean classMissing ) { print ( _STR ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( _STR ) ; int numTrain = getNumInstances ( ) , numClasses = _NUM , missingLevel = _NUM ; boolean [ ] result = new boolean [ _NUM ] ; Instances train = null ; Associator associator = null ; try { train = makeTestDataset ( _NUM , numTrain , nominalPredictor ? getNumNominal ( ) : _NUM , numericPredictor ? getNumNumeric ( ) : _NUM , stringPredictor ? getNumString ( ) : _NUM , datePredictor ? getNumDate ( ) : _NUM , relationalPredictor ? getNumRelational ( ) : _NUM , numClasses , classType , multiInstance ) ; if ( missingLevel > _NUM ) { addMissing ( train , missingLevel , predictorMissing , classMissing ) ; } associator = AbstractAssociator . makeCopies ( getAssociator ( ) , _NUM ) [ _NUM ] ; } catch ( Exception ex ) { throw new Error ( _STR + ex . getMessage ( ) ) ; } try { Instances trainCopy = new Instances ( train ) ; associator . buildAssociations ( trainCopy ) ; compareDatasets ( train , trainCopy ) ; println ( _STR ) ; result [ _NUM ] = _BOOL ; } catch ( Exception ex ) { println ( _STR ) ; result [ _NUM ] = _BOOL ; if ( m_Debug ) { println ( _STR ) ; print ( _STR ) ; println ( _STR + ex . getMessage ( ) + _STR ) ; println ( _STR ) ; println ( _STR + train . toString ( ) + _STR ) ; } } return result ; }
public boolean isEmpty ( ) { return mEventQueue . isEmpty ( ) ; }
public static void testPrimitiveInstantiation ( ) { testPrimitiveInstantiation ( _BOOL ) ; }
public void readEntries ( TableKelp table , InSegment reader , SegmentEntryCallback cb ) { TempBuffer tBuf = TempBuffer . createLarge ( ) ; byte [ ] buffer = tBuf . buffer ( ) ; InStore sIn = reader . getStoreRead ( ) ; byte [ ] tableKey = new byte [ TableKelp . TABLE_KEY_SIZE ] ; for ( int ptr = length ( ) - BLOCK_SIZE ; ptr > _NUM ; ptr -= BLOCK_SIZE ) { sIn . read ( getAddress ( ) + ptr , buffer , _NUM , buffer . length ) ; int index = _NUM ; long seq = BitsUtil . readLong ( buffer , index ) ; index += _NUM ; if ( seq != getSequence ( ) ) { log . warning ( L . l ( _STR , seq , getSequence ( ) , Long . toHexString ( getAddress ( ) + ptr ) ) ) ; break ; } System . arraycopy ( buffer , index , tableKey , _NUM , tableKey . length ) ; index += tableKey . length ; if ( ! Arrays . equals ( tableKey , _tableKey ) ) { log . warning ( L . l ( _STR , Hex . toShortHex ( tableKey ) , Hex . toShortHex ( _tableKey ) , Long . toHexString ( getAddress ( ) + ptr ) ) ) ; break ; } int head = index ; while ( head < BLOCK_SIZE && buffer [ head ] != _NUM ) { head = readEntry ( table , buffer , head , cb , getAddress ( ) ) ; } boolean isCont = buffer [ head + _NUM ] != _NUM ; if ( ! isCont ) { break ; } } tBuf . free ( ) ; }
static int numberOfHosts ( Map < URI , List < Initiator > > net2InitiatorsMap ) { Set < URI > hostSet = new HashSet < URI > ( ) ; for ( List < Initiator > initiators : net2InitiatorsMap . values ( ) ) { for ( Initiator init : initiators ) { hostSet . add ( init . getHost ( ) ) ; } } return hostSet . size ( ) ; }
public void addCertificates ( Store certStore ) throws CMSException { certs . addAll ( CMSUtils . getCertificatesFromStore ( certStore ) ) ; }
protected void processLob ( LobMetadata lob , DatabaseMapping mapping , MetadataClass referenceClass , boolean isForMapKey ) { lob . process ( mapping , this , referenceClass , isForMapKey ) ; }
protected AttributesImpl startPrefixMapping ( Element element , NamespaceStack namespaceStack ) throws SAXException { AttributesImpl namespaceAttributes = null ; Namespace elementNamespace = element . getNamespace ( ) ; if ( ( elementNamespace != null ) && ! isIgnoreableNamespace ( elementNamespace , namespaceStack ) ) { namespaceStack . push ( elementNamespace ) ; contentHandler . startPrefixMapping ( elementNamespace . getPrefix ( ) , elementNamespace . getURI ( ) ) ; namespaceAttributes = addNamespaceAttribute ( namespaceAttributes , elementNamespace ) ; } List < Namespace > declaredNamespaces = element . declaredNamespaces ( ) ; for ( Namespace namespace : declaredNamespaces ) { if ( ! isIgnoreableNamespace ( namespace , namespaceStack ) ) { namespaceStack . push ( namespace ) ; contentHandler . startPrefixMapping ( namespace . getPrefix ( ) , namespace . getURI ( ) ) ; namespaceAttributes = addNamespaceAttribute ( namespaceAttributes , namespace ) ; } } return namespaceAttributes ; }
private float clampMag ( float value , float absMin , float absMax ) { final float absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
public void printStackTrace ( java . io . PrintWriter pw ) { if ( rootCause != null ) { String superString = super . toString ( ) ; synchronized ( pw ) { pw . print ( superString + ( superString . endsWith ( _STR ) ? _STR : _STR ) + _STR ) ; rootCause . printStackTrace ( pw ) ; } } else { super . printStackTrace ( pw ) ; } }
private static DataFlavor [ ] convertToArray ( List < DataFlavor > dataFlavourList ) { DataFlavor [ ] array = new DataFlavor [ dataFlavourList . size ( ) ] ; dataFlavourList . toArray ( array ) ; return array ; }
public void testChoiceEmptyIconErrorHandling ( ) { String xml = _STR ; xml += createStartMissionXml ( _STR , _STR ) ; xml += createStartChoiceMomentXml ( _STR , _NUM , _STR , _STR ) ; xml += createChoiceXml ( _STR , _STR , _STR , _BOOL , _BOOL , _STR ) ; xml += createChoiceXml ( _STR , _STR , _STR , _BOOL , _BOOL , _STR ) ; xml += createEndChoiceMomentXml ( ) ; xml += createEndChoiceMomentXml ( ) ; xml += createEndMissionXml ( ) ; Utils . logDebug ( TAG , xml ) ; InputStream momentInputStream = new ByteArrayInputStream ( xml . getBytes ( ) ) ; mMission = new Mission ( mMissionData ) ; boolean didMissionParseFail = _BOOL ; try { mMission . readMoments ( momentInputStream ) ; } catch ( MissionParseException e ) { e . printStackTrace ( ) ; didMissionParseFail = _BOOL ; } Assert . assertEquals ( _BOOL , didMissionParseFail ) ; }
public static String translateAttribute ( String attributes ) throws IOException { short [ ] flags = strAttrToBooleanFlags ( attributes ) ; StringBuilder sb = new StringBuilder ( ) ; if ( flags [ READ_ONLY ] == YES ) sb . append ( _STR ) ; else if ( flags [ READ_ONLY ] == NO ) sb . append ( _STR ) ; if ( flags [ HIDDEN ] == YES ) sb . append ( _STR ) ; else if ( flags [ HIDDEN ] == NO ) sb . append ( _STR ) ; if ( flags [ SYSTEM ] == YES ) sb . append ( _STR ) ; else if ( flags [ SYSTEM ] == NO ) sb . append ( _STR ) ; if ( flags [ ARCHIVE ] == YES ) sb . append ( _STR ) ; else if ( flags [ ARCHIVE ] == NO ) sb . append ( _STR ) ; return sb . toString ( ) ; }
public static int nextIndexId ( ) { return msgIdx . getAndIncrement ( ) ; }
private void fillFieldValues ( ) { if ( isCreationPanel ) { phrase . setText ( _STR + Hearing . DEFAULT_PHRASE ) ; outputAmount . setText ( _STR + Hearing . DEFAULT_OUTPUT_AMOUNT ) ; } else { phrase . setText ( _STR + hearingSensor . getPhrase ( ) ) ; outputAmount . setText ( _STR + hearingSensor . getOutputAmount ( ) ) ; } }
public static boolean checkSecurityInfos ( String endpoint , Identity clientIdentity , List < SecurityInfo > securityInfos ) { if ( clientIdentity . isSecure ( ) ) { if ( securityInfos == null || securityInfos . isEmpty ( ) ) { LOG . warn ( _STR , endpoint ) ; return _BOOL ; } else { for ( SecurityInfo securityInfo : securityInfos ) { if ( checkSecurityInfo ( endpoint , clientIdentity , securityInfo ) ) { return _BOOL ; } } return _BOOL ; } } else if ( securityInfos != null && ! securityInfos . isEmpty ( ) ) { LOG . warn ( _STR , endpoint ) ; return _BOOL ; } return _BOOL ; }
public boolean retainAll ( AbstractIntList other ) { if ( other . size ( ) == _NUM ) { if ( size == _NUM ) return _BOOL ; setSize ( _NUM ) ; return _BOOL ; } int limit = other . size ( ) - _NUM ; int j = _NUM ; for ( int i = _NUM ; i < size ; i ++ ) { if ( other . indexOfFromTo ( getQuick ( i ) , _NUM , limit ) >= _NUM ) setQuick ( j ++ , getQuick ( i ) ) ; } boolean modified = ( j != size ) ; setSize ( j ) ; return modified ; }
public static ArrayList < ByteString > byteArraysToStrings ( ArrayList < byte [ ] > byteArrays ) { if ( byteArrays == null ) { return null ; } ArrayList < ByteString > byteStrings = new ArrayList < ByteString > ( ) ; for ( byte [ ] bytes : byteArrays ) { byteStrings . add ( ByteString . of ( bytes ) ) ; } return byteStrings ; }
void addIndex ( IndexType type , List < String > columnNames ) { IndexDefinition index = new IndexDefinition ( ) ; index . indexName = tableName + _STR + indexes . size ( ) ; index . columnNames = New . arrayList ( columnNames ) ; index . type = type ; indexes . add ( index ) ; }
public Builder withKeyStoreKeyPassword ( String keyStoreKeyPassword ) { properties . setProperty ( NettyOptions . SSL_KEY_STORE_KEY_PASSWORD , Assert . notNull ( keyStoreKeyPassword , _STR ) ) ; return this ; }
public ZookeeperStateMachineEnsemble ( CuratorFramework curatorClient , String basePath ) { this ( curatorClient , basePath , _BOOL , DEFAULT_LOGSIZE ) ; }
public static CustomShortcutSet createShortcut ( char ch ) { Character mnemonic = Character . valueOf ( ch ) ; String shortcut = SystemInfo . isMac && SystemInfo . isJavaVersionAtLeast ( _STR ) ? _STR + mnemonic : _STR + mnemonic ; return CustomShortcutSet . fromString ( shortcut ) ; }
public void gc ( ) { System . gc ( ) ; }
private Node deleteMin ( Node x ) { if ( x . left == null ) return x . right ; x . left = deleteMin ( x . left ) ; x . size = _NUM + size ( x . left ) + size ( x . right ) ; x . height = _NUM + Math . max ( height ( x . left ) , height ( x . right ) ) ; return balance ( x ) ; }
public static void resetCounters ( ) { errors = _NUM ; warnings = _NUM ; }
public void write ( CeylonConfig config , File source , OutputStream out ) throws IOException { if ( source . isFile ( ) ) { InputStream in = null ; try { in = new FileInputStream ( source ) ; write ( config , in , out ) ; } finally { if ( in != null ) { try { in . close ( ) ; } catch ( IOException e ) { } } } } else { throw new FileNotFoundException ( _STR ) ; } }
protected Map < TargetClass , List < Attribute . TypeCompound > > sift ( final Iterable < Attribute . TypeCompound > typeCompounds ) { final Map < TargetClass , List < Attribute . TypeCompound > > targetClassToCompound = new EnumMap < > ( TargetClass . class ) ; for ( TargetClass targetClass : TargetClass . values ( ) ) { targetClassToCompound . put ( targetClass , new ArrayList < TypeCompound > ( ) ) ; } for ( final Attribute . TypeCompound typeCompound : typeCompounds ) { final TargetType typeCompoundTarget = typeCompound . position . type ; final List < Attribute . TypeCompound > destList ; if ( ElementAnnotationUtil . contains ( typeCompoundTarget , annotatedTargets ( ) ) ) { destList = targetClassToCompound . get ( TargetClass . TARGETED ) ; } else if ( ElementAnnotationUtil . contains ( typeCompoundTarget , validTargets ( ) ) ) { destList = targetClassToCompound . get ( TargetClass . VALID ) ; } else { destList = targetClassToCompound . get ( TargetClass . INVALID ) ; } destList . add ( typeCompound ) ; } return targetClassToCompound ; }
protected synchronized void updateLocation ( Point newLocn ) { prev = locn ; locn = newLocn ; if ( Math . abs ( locn . x - prev . x ) > hysteresis || Math . abs ( locn . y - prev . y ) > hysteresis ) { if ( timer . isRunning ( ) ) timer . stop ( ) ; } else { if ( ! timer . isRunning ( ) ) timer . start ( ) ; } }
@ Override public int compareTo ( Value o ) { if ( o instanceof StringVal ) { return str . compareTo ( ( ( StringVal ) o ) . str ) ; } else { return _NUM ; } }
public void bind ( IntegerProperty property , int value ) { if ( isAchieved ( ) ) return ; bind ( property . greaterThanOrEqualTo ( value ) ) ; BooleanBinding bb = property . greaterThanOrEqualTo ( value / _NUM ) ; progressListener = null ; bb . addListener ( progressListener ) ; }
public void removeColumn ( Column c ) { int idx = m_columns . indexOf ( c ) ; if ( idx < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } removeColumn ( idx ) ; }
public synchronized void write ( String logData ) { if ( logEnabled ) { histData . append ( logData ) ; histData . revalidate ( ) ; synchronized ( histData ) { histData . notify ( ) ; } } }
public void closeConnection ( ) { try { if ( m_connection != null ) { m_connection . close ( ) ; } } catch ( final SQLException exception ) { NaviLogger . severe ( _STR , exception ) ; } m_connection = null ; }
public StructEmBayesSearchEditor ( StructEmBayesSearchRunner semBayesEstWrapper ) { this ( semBayesEstWrapper . getEstimatedBayesIm ( ) , semBayesEstWrapper . getDataSet ( ) ) ; }
public void removeActionListener ( ActionListener listener ) { forwardProjectionButton . addActionListener ( listener ) ; backProjectionButton . addActionListener ( listener ) ; }
public static void f ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_FATAL ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . wtf ( tag , msg ) ; }
boolean isLiteral ( int index ) { if ( isValidMask ( ) && index < string . length ( ) ) { return literalMask . get ( index ) ; } return _BOOL ; }
protected Granularity generateGranularity ( String granularity , GranularityParser granularityParser ) throws BadApiRequestException { try { return granularityParser . parseGranularity ( granularity ) ; } catch ( GranularityParseException e ) { LOG . error ( UNKNOWN_GRANULARITY . logFormat ( granularity ) , granularity ) ; throw new BadApiRequestException ( e . getMessage ( ) ) ; } }
public WordIterator ( ) { this ( Locale . getDefault ( ) ) ; }
@ Override public void close ( ) { if ( leaf != null ) { leaf . close ( ) ; leaf = null ; } ccMgr . releaseIndexLocks ( ) ; dirsMayBeUpdated = null ; }
public void pushFile ( String local , String remote , ISyncProgressMonitor monitor ) throws SyncException , IOException , TimeoutException { File f = new File ( local ) ; if ( ! f . exists ( ) ) { throw new SyncException ( SyncError . NO_LOCAL_FILE ) ; } if ( f . isDirectory ( ) ) { throw new SyncException ( SyncError . LOCAL_IS_DIRECTORY ) ; } monitor . start ( ( int ) f . length ( ) ) ; doPushFile ( local , remote , monitor ) ; monitor . stop ( ) ; }
public String process ( Item seg ) throws ProcessException { return segCodaCtype ( seg , _STR ) ; }
public void resize ( int size ) { if ( buffer != null ) { if ( size >= _NUM && size < buffer . size ( ) ) { int oldLastIndex = buffer . size ( ) - _NUM ; int newLastIndex = size - _NUM ; for ( int i = oldLastIndex ; i > newLastIndex ; i -- ) { buffer . remove ( i ) ; } } } else { if ( size >= _NUM && size < offsets . size ( ) ) { long offset = offsets . get ( size ) ; byteCache . resize ( key , offset ) ; ArrayList < Long > newOffsets = new ArrayList < Long > ( size ) ; for ( int i = _NUM ; i < size ; i ++ ) { newOffsets . add ( offsets . get ( i ) ) ; } offsets = newOffsets ; } } }
public static byte [ ] splitUint8To2bytes ( char uint8 ) { if ( uint8 < _NUM || uint8 > _NUM ) { throw new RuntimeException ( _STR ) ; } String hexString = Integer . toHexString ( uint8 ) ; byte low ; byte high ; if ( hexString . length ( ) > _NUM ) { high = ( byte ) Integer . parseInt ( hexString . substring ( _NUM , _NUM ) , _NUM ) ; low = ( byte ) Integer . parseInt ( hexString . substring ( _NUM , _NUM ) , _NUM ) ; } else { high = _NUM ; low = ( byte ) Integer . parseInt ( hexString . substring ( _NUM , _NUM ) , _NUM ) ; } byte [ ] result = new byte [ ] { high , low } ; return result ; }
protected void sprint ( short shortField ) { sprint ( String . valueOf ( shortField ) ) ; }
protected void initFromDir ( String prefix , File dir ) { File [ ] files ; files = dir . listFiles ( new ClassFileFilter ( ) ) ; for ( File file : files ) { if ( prefix == null ) { add ( file . getName ( ) ) ; } else { add ( prefix + _STR + file . getName ( ) ) ; } } files = dir . listFiles ( new DirectoryFilter ( ) ) ; for ( File file : files ) { if ( prefix == null ) { initFromDir ( file . getName ( ) , file ) ; } else { initFromDir ( prefix + _STR + file . getName ( ) , file ) ; } } }
public void removeBandwidth ( String name ) { if ( name != null ) if ( bandwidthList != null ) { for ( int i = _NUM ; i < bandwidthList . size ( ) ; i ++ ) { Object o = bandwidthList . elementAt ( i ) ; if ( o instanceof BandwidthField ) { BandwidthField b = ( BandwidthField ) o ; try { String type = b . getType ( ) ; if ( type != null ) { if ( name . equals ( type ) ) { bandwidthList . remove ( b ) ; } } } catch ( SdpParseException e ) { } } } } }
protected static void succeed ( ) { System . exit ( _NUM ) ; }
public static long now ( ) { return System . currentTimeMillis ( ) ; }
public static String collapseNewlines ( String argStr ) { char last = argStr . charAt ( _NUM ) ; StringBuffer argBuf = new StringBuffer ( ) ; for ( int cIdx = _NUM ; cIdx < argStr . length ( ) ; cIdx ++ ) { char ch = argStr . charAt ( cIdx ) ; if ( ch != _STR || last != _STR ) { argBuf . append ( ch ) ; last = ch ; } } return argBuf . toString ( ) ; }
LinkedList < TrieNode < T > > makeSuffixChain ( TrieNode < T > root , String suffix , T value ) { LinkedList < TrieNode < T > > result = new LinkedList < > ( ) ; String rootPrefix = root . getPrefix ( ) ; for ( int i = _NUM , suffixSize = suffix . length ( ) ; i <= suffixSize ; i ++ ) { String newPrefix = rootPrefix + suffix . substring ( _NUM , i ) ; TrieNode < T > newNode = TrieNode . makeNode ( newPrefix ) ; result . add ( newNode ) ; root . addChild ( newNode ) ; root = newNode ; } root . setValue ( value ) ; return result ; }
@ Override protected String generateJavadoc ( int index ) throws Exception { throw new Exception ( _STR ) ; }
public Properties extractProperties ( Iterable < Map . Entry < String , String > > propSrc ) { Properties result = new Properties ( ) ; for ( Map . Entry < String , String > entry : propSrc ) { String name = entry . getKey ( ) ; if ( isNamespacedProperty ( name ) ) { String val = entry . getValue ( ) ; result . setProperty ( name , val ) ; } } return result ; }
public T removeLast ( ) { if ( rows . size ( ) != _NUM ) rows . remove ( rows . size ( ) - _NUM ) ; return instance ( ) ; }
public static void ensureVisible ( String componentName ) { if ( verbose ) { log ( _STR + componentName + _STR ) ; } ensureVisible ( findByName ( componentName ) ) ; }
public char next ( ) { return pos < in . length ( ) ? in . charAt ( pos ++ ) : _STR ; }
public void endRepresentation ( ) { if ( ! representationProtectionsSet ) { if ( currentRepresentationProtections != null ) { Collections . sort ( currentRepresentationProtections , this ) ; } representationProtections = currentRepresentationProtections ; representationProtectionsSet = _BOOL ; } else { if ( currentRepresentationProtections == null ) { Assertions . checkState ( representationProtections == null ) ; } else { Collections . sort ( currentRepresentationProtections , this ) ; Assertions . checkState ( currentRepresentationProtections . equals ( representationProtections ) ) ; } } currentRepresentationProtections = null ; }
public StandardPieSectionLabelGenerator ( String labelFormat ) { this ( labelFormat , NumberFormat . getNumberInstance ( ) , NumberFormat . getPercentInstance ( ) ) ; }
public static CharSequence [ ] split ( CharSequence line , int delimiter ) { CharSequence [ ] tokens0 = split ( line , delimiter , N ) ; if ( tokens0 . length < N ) { return tokens0 ; } else { CharSequence [ ] tokens1 = split ( tokens0 [ N - _NUM ] , delimiter ) ; CharSequence [ ] tokens2 = new CharSequence [ tokens0 . length + tokens1 . length - _NUM ] ; System . arraycopy ( tokens0 , _NUM , tokens2 , _NUM , tokens0 . length - _NUM ) ; System . arraycopy ( tokens1 , _NUM , tokens2 , tokens0 . length - _NUM , tokens1 . length ) ; return tokens2 ; } }
public CCTimer ( Object t , String s , float seconds ) { target = t ; selector = s ; interval = seconds ; elapsed = - _NUM ; try { Class < ? > cls = target . getClass ( ) ; invocation = cls . getMethod ( s , Float . TYPE ) ; } catch ( NoSuchMethodException e ) { e . printStackTrace ( ) ; } }
public Tuple read ( ) throws IOException { try { Map fields = jsonTupleStream . next ( ) ; if ( fields == null ) { Map m = new HashMap ( ) ; m . put ( _STR , _BOOL ) ; return new Tuple ( m ) ; } else { String msg = ( String ) fields . get ( _STR ) ; if ( msg != null ) { HandledException ioException = new HandledException ( msg ) ; throw ioException ; } if ( trace ) { fields . put ( _STR , this . baseUrl ) ; if ( slice != null ) { fields . put ( _STR , slice ) ; } } if ( fieldMappings != null ) { fields = mapFields ( fields , fieldMappings ) ; } return new Tuple ( fields ) ; } } catch ( HandledException e ) { throw new IOException ( _STR + this . baseUrl + _STR + e . getMessage ( ) ) ; } catch ( Exception e ) { throw new IOException ( _STR + this . baseUrl + _STR , e ) ; } }
private String compute ( String left , double right , boolean isInteger ) { if ( left == null && Double . isNaN ( right ) ) { return null ; } if ( isInteger && right == ( int ) right ) { return ( left == null ? _STR : left ) + ( int ) right ; } else if ( Double . isInfinite ( right ) ) { return ( left == null ? _STR : left ) + Tools . formatNumber ( right ) ; } else { return ( left == null ? _STR : left ) + ( Double . isNaN ( right ) ? _STR : right ) ; } }
public void removePropertyChangeListener ( final PropertyChangeListener listener ) { propertyChangeSupport . removePropertyChangeListener ( listener ) ; }
public void loadXML ( Node stepnode , List < DatabaseMeta > databases , Map < String , Counter > counters ) throws KettleXMLException { try { this . tabelName = XMLHandler . getTagValue ( stepnode , _STR ) ; this . outputRowSize = XMLHandler . getTagValue ( stepnode , _STR ) ; this . factDimLensString = XMLHandler . getTagValue ( stepnode , _STR ) ; this . tableName = XMLHandler . getTagValue ( stepnode , _STR ) ; this . databaseName = XMLHandler . getTagValue ( stepnode , _STR ) ; this . dimensionCount = XMLHandler . getTagValue ( stepnode , _STR ) ; this . noDictionaryDims = XMLHandler . getTagValue ( stepnode , _STR ) ; this . noDictionaryDimsMapping = XMLHandler . getTagValue ( stepnode , _STR ) ; this . complexDimensionCount = XMLHandler . getTagValue ( stepnode , _STR ) ; this . measureCount = XMLHandler . getTagValue ( stepnode , _STR ) ; this . updateMemberRequest = XMLHandler . getTagValue ( stepnode , _STR ) ; this . measureDataType = XMLHandler . getTagValue ( stepnode , _STR ) ; this . partitionID = XMLHandler . getTagValue ( stepnode , _STR ) ; this . segmentId = XMLHandler . getTagValue ( stepnode , _STR ) ; this . taskNo = XMLHandler . getTagValue ( stepnode , _STR ) ; } catch ( Exception e ) { throw new KettleXMLException ( _STR , e ) ; } }
public final int [ ] hashSignature ( final int [ ] signature ) { int [ ] hash = new int [ stages ] ; int rows = signature . length / stages ; for ( int i = _NUM ; i < signature . length ; i ++ ) { int stage = Math . min ( i / rows , stages - _NUM ) ; hash [ stage ] = ( int ) ( ( hash [ stage ] + ( long ) signature [ i ] * LARGE_PRIME ) % buckets ) ; } return hash ; }
void onConsumeFinished ( Purchase purchase , IabResult result ) ;
public void cast ( final Type from , final Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Opcodes . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Opcodes . D2L ) ; } else { mv . visitInsn ( Opcodes . D2I ) ; cast ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Opcodes . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Opcodes . F2L ) ; } else { mv . visitInsn ( Opcodes . F2I ) ; cast ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Opcodes . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Opcodes . L2F ) ; } else { mv . visitInsn ( Opcodes . L2I ) ; cast ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Opcodes . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Opcodes . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Opcodes . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Opcodes . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Opcodes . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Opcodes . I2S ) ; } } } }
private void addTriggerGroupName ( String groupName ) throws JobPersistenceException , ResourceException { addRepoListName ( groupName , TRIGGER_GROUP_NAMES_RESOURCE_PATH , _STR ) ; }
public String readString ( ) throws IOException { int firstByte = readByte ( ) ; int length = readInt ( firstByte , PREFIX_8_BITS ) ; byte [ ] encoded = new byte [ length ] ; bytesLeft -= length ; in . readFully ( encoded ) ; return new String ( encoded , _STR ) ; }
private synchronized void clearTempFiles ( ) { if ( ( tempFiles != null ) && ( tempFiles . size ( ) > _NUM ) ) { Iterator it = tempFiles . iterator ( ) ; File file = null ; while ( it . hasNext ( ) ) { file = ( File ) it . next ( ) ; file . delete ( ) ; } tempFiles . clear ( ) ; } }
private Bitmap readAndDecompressThumbnail ( File file ) { try { if ( file . length ( ) > _NUM ) { FileInputStream instream = new FileInputStream ( file ) ; ReadableByteChannel bytechan = Channels . newChannel ( instream ) ; ByteBuffer buff = ByteBuffer . allocateDirect ( ( int ) file . length ( ) ) ; if ( buff != null ) { bytechan . read ( buff ) ; instream . close ( ) ; buff . rewind ( ) ; PDQImage pthumb = DecompressionService . decompressThumbnailImage ( buff ) ; if ( pthumb != null ) { Bitmap bm = ConversionService . convertPDQImageToBitmap ( pthumb , _BOOL ) ; pthumb . close ( ) ; return bm ; } } } } catch ( IOException ex ) { ex . printStackTrace ( ) ; } return null ; }
public void testSubmitRunnable ( ) throws Throwable { ExecutorService e = new ForkJoinPool ( _NUM ) ; PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; Future < ? > future = e . submit ( new NoOpRunnable ( ) ) ; assertNull ( future . get ( ) ) ; assertTrue ( future . isDone ( ) ) ; assertFalse ( future . isCancelled ( ) ) ; } finally { if ( cleaner != null ) { cleaner . close ( ) ; } } }
public Rectangle2D shrink ( Rectangle2D area , Rectangle2D result ) { if ( result == null ) { result = new Rectangle2D . Double ( ) ; } result . setRect ( area . getX ( ) + this . left , area . getY ( ) + this . top , area . getWidth ( ) - this . left - this . right , area . getHeight ( ) - this . top - this . bottom ) ; return result ; }
public static String assertJQ ( SolrQueryRequest req , String ... tests ) throws Exception { return assertJQ ( req , JSONTestUtil . DEFAULT_DELTA , tests ) ; }
protected void buildAbsoluteStats ( String name , long value , long time ) throws InterruptedException { List < XYDataItem > stats = statsCollection . getStats ( name ) ; if ( stats == null ) { stats = statsCollection . newStats ( name , maxSeries ) ; } else { XYDataItem data = new XYDataItem ( time , value ) ; statsCollection . lockForUpdate ( ) ; try { stats . add ( data ) ; houseKeepStats ( stats ) ; } finally { statsCollection . releaseLock ( ) ; } if ( listeners != null ) { StatsCollectionEvent event = new StatsCollectionEvent ( name , data ) ; for ( StatsCollectionListener listener : listeners ) { if ( listener . isEnabled ( ) ) { listener . statsCollected ( event ) ; } } } } }
@ Override public void run ( ) { amIActive = _BOOL ; String demHeader = null ; String streamHeadsHeader = null ; String elevationModifiedHeader = null ; String correctedDemHeader = null ; List < StreamHead > streamHeadList = new ArrayList < > ( ) ; int counter = _NUM ; float progress = _NUM ; if ( args . length <= _NUM ) { showFeedback ( _STR ) ; return ; } for ( int i = _NUM ; i < args . length ; i ++ ) { if ( i == _NUM ) { demHeader = args [ i ] ; } else if ( i == _NUM ) { streamHeadsHeader = args [ i ] ; } else if ( i == _NUM ) { elevationModifiedHeader = args [ i ] ; } else if ( i == _NUM ) { correctedDemHeader = args [ i ] ; } else if ( i == _NUM ) { maxRadius = Double . parseDouble ( args [ i ] ) ; } } if ( ( demHeader == null ) || ( streamHeadsHeader == null ) || ( elevationModifiedHeader == null ) || ( correctedDemHeader == null ) ) { showFeedback ( _STR ) ; return ; } try { dem = new WhiteboxRaster ( demHeader , _STR ) ; streamHeads = new WhiteboxRaster ( streamHeadsHeader , _STR ) ; numRows = dem . getNumberRows ( ) ; numCols = dem . getNumberColumns ( ) ; noData = dem . getNoDataValue ( ) ; gridRes = dem . getCellSizeX ( ) ; elevationModified = new WhiteboxRaster ( elevationModifiedHeader , _STR , demHeader , WhiteboxRaster . DataType . FLOAT , _NUM ) ; elevationModified . setPreferredPalette ( _STR ) ; elevationModified . setDataScale ( WhiteboxRasterBase . DataScale . CONTINUOUS ) ; elevationModified . setZUnits ( _STR ) ; correctedDEM = new WhiteboxRaster ( correctedDemHeader , _STR , demHeader , WhiteboxRaster . DataType . FLOAT , _NUM ) ; correctedDEM . setPreferredPalette ( _STR ) ; correctedDEM . setDataScale ( WhiteboxRasterBase . DataScale . CONTINUOUS ) ; correctedDEM . setZUnits ( _STR ) ; if ( streamHeads . getNumberColumns ( ) != numCols || streamHeads . getNumberRows ( ) != numRows ) { showFeedback ( _STR ) ; return ; } updateProgress ( _STR , _NUM ) ; for ( int row = _NUM ; row < numRows ; row ++ ) { for ( int col = _NUM ; col < numCols ; col ++ ) { if ( dem . getValue ( row , col ) != noData ) { elevationModified . setValue ( row , col , _NUM ) ; } else { elevationModified . setValue ( row , col , noData ) ; } } if ( cancelOp ) { cancelOperation ( ) ; return ; } progress = ( float ) ( _NUM * row / ( numRows - _NUM ) ) ; updateProgress ( _STR , ( int ) progress ) ; } updateProgress ( _STR , _NUM ) ; for ( int row = _NUM ; row < numRows ; row ++ ) { for ( int col = _NUM ; col < numCols ; col ++ ) { if ( streamHeads . getValue ( row , col ) == _NUM ) { streamHeadList . add ( new StreamHead ( col , row , dem . getValue ( row , col ) ) ) ; } } if ( cancelOp ) { cancelOperation ( ) ; return ; } progress = ( float ) ( _NUM * row / ( numRows - _NUM ) ) ; updateProgress ( _STR , ( int ) progress ) ; } streamHeadList = OrderStreamHeads ( streamHeadList ) ; updateProgress ( _STR , _NUM ) ; for ( StreamHead streamHead : streamHeadList ) { CheckFlowPath ( streamHead . GetXCoord ( ) , streamHead . GetYCoord ( ) ) ; counter = counter + _NUM ; if ( cancelOp ) { cancelOperation ( ) ; return ; } progress = ( float ) ( _NUM * counter / streamHeadList . size ( ) ) ; updateProgress ( _STR , ( int ) progress ) ; } updateProgress ( _STR , _NUM ) ; for ( int row = _NUM ; row < numRows ; row ++ ) { for ( int col = _NUM ; col < numCols ; col ++ ) { if ( elevationModified . getValue ( row , col ) != noData ) { correctedDEM . setValue ( row , col , dem . getValue ( row , col ) - elevationModified . getValue ( row , col ) ) ; } else { correctedDEM . setValue ( row , col , noData ) ; } } if ( cancelOp ) { cancelOperation ( ) ; return ; } progress = ( float ) ( _NUM * row / ( numRows - _NUM ) ) ; updateProgress ( _STR , ( int ) progress ) ; } elevationModified . addMetadataEntry ( _STR + getDescriptiveName ( ) + _STR ) ; elevationModified . addMetadataEntry ( _STR + new Date ( ) ) ; correctedDEM . addMetadataEntry ( _STR + getDescriptiveName ( ) + _STR ) ; correctedDEM . addMetadataEntry ( _STR + new Date ( ) ) ; dem . close ( ) ; streamHeads . close ( ) ; elevationModified . close ( ) ; correctedDEM . close ( ) ; returnData ( correctedDemHeader ) ; } catch ( Exception e ) { showFeedback ( e . getMessage ( ) ) ; } finally { updateProgress ( _STR , _NUM ) ; amIActive = _BOOL ; myHost . pluginComplete ( ) ; } }
protected void serialize ( String filename ) { classifier . serializeClassifier ( filename ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return BEGIN_IN_BOTH ; case _NUM : return NEWINT ; case _NUM : return NEWBYTE ; case _NUM : return NEWSHORT ; case _NUM : return NEWLONG ; case _NUM : return NEWDOUBLE ; case _NUM : return NEWSTRUCT ; case _NUM : return NEWLIST ; case _NUM : return NEWSET ; case _NUM : return NEWMAP ; case _NUM : return NEWSTRING ; case _NUM : return END_IN_BOTH ; default : return null ; } }
public boolean isPartitionTag ( String field ) { if ( partitions == null || ( ! isTag ( field ) ) ) { return _BOOL ; } for ( String partition : partitions ) { if ( partition . equals ( field ) ) { return _BOOL ; } } return _BOOL ; }
protected Size2D arrangeFN ( BlockContainer container , Graphics2D g2 , RectangleConstraint constraint ) { List blocks = container . getBlocks ( ) ; Block b = ( Block ) blocks . get ( _NUM ) ; Size2D s = b . arrange ( g2 , RectangleConstraint . NONE ) ; double width = constraint . getWidth ( ) ; Rectangle2D bounds = new Rectangle2D . Double ( ( width - s . width ) / _NUM , _NUM , s . width , s . height ) ; b . setBounds ( bounds ) ; return new Size2D ( ( width - s . width ) / _NUM , s . height ) ; }
private Object processExecute ( Statement proxy , Method method , Object [ ] args ) throws Throwable { long startTime = logSlowQuery ? System . currentTimeMillis ( ) : _NUM ; try { if ( method . getName ( ) == _STR ) return newProxiedResultSet ( proxy , method , args ) ; return targetInvoke ( method , args ) ; } finally { if ( logSlowQuery ) logQuery ( proxy , args , startTime ) ; } }
int boundedIndexOf ( String string , char search , int start , int end ) { int retValue = string . indexOf ( search , start ) ; if ( retValue >= end ) { return - _NUM ; } return retValue ; }
public int incr ( T k , int delta ) { Integer i = counts . get ( k ) ; if ( i == null ) { i = _NUM ; } int next = i . intValue ( ) + delta ; if ( next < _NUM ) { throw new java . lang . ArithmeticException ( ) ; } if ( next == _NUM ) { counts . remove ( k ) ; } else { counts . put ( k , i + delta ) ; } return i ; }
public void send ( final OscPacket thePacket , final TcpClient theClient ) { theClient . send ( thePacket . getBytes ( ) ) ; }
@ Override @ SuppressWarnings ( _STR ) public void keyTyped ( KeyEvent evt ) { int modifiers = evt . getModifiers ( ) ; char c = evt . getKeyChar ( ) ; if ( c != KeyEvent . CHAR_UNDEFINED && ( modifiers & InputEvent . ALT_MASK ) == _NUM ) { if ( c >= _NUM && c != _NUM ) { KeyStroke keyStroke = KeyStroke . getKeyStroke ( Character . toUpperCase ( c ) ) ; Object o = currentBindings . get ( keyStroke ) ; if ( o instanceof Hashtable ) { currentBindings = ( Hashtable ) o ; return ; } else if ( o instanceof ActionListener ) { currentBindings = bindings ; executeAction ( ( ActionListener ) o , evt . getSource ( ) , String . valueOf ( c ) ) ; return ; } currentBindings = bindings ; if ( grabAction != null ) { handleGrabAction ( evt ) ; return ; } if ( repeat && Character . isDigit ( c ) ) { repeatCount *= _NUM ; repeatCount += ( c - _STR ) ; return ; } executeAction ( INSERT_CHAR , evt . getSource ( ) , String . valueOf ( evt . getKeyChar ( ) ) ) ; repeatCount = _NUM ; repeat = _BOOL ; } } }
public static Map < String , MappedClass > fillInTheGaps ( Map < String , MappedClass > mappedClasses , MappingMode mode ) { for ( String originalName : mappedClasses . keySet ( ) ) { mappedClasses = fillGap ( mappedClasses . get ( originalName ) , mappedClasses , mode ) ; } return mappedClasses ; }
private void readObject ( ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; if ( name == null ) { if ( types != null ) { throw new InvalidObjectException ( _STR ) ; } } else { try { check ( ) ; } catch ( RuntimeException e ) { rethrow ( e ) ; } } if ( constraints != null && constraints . isEmpty ( ) ) { throw new InvalidObjectException ( _STR ) ; } }
public static Script createMultiSigInputScriptBytes ( List < byte [ ] > signatures ) { checkArgument ( signatures . size ( ) <= _NUM ) ; ScriptBuilder builder = new ScriptBuilder ( ) ; builder . smallNum ( _NUM ) ; for ( byte [ ] signature : signatures ) builder . data ( signature ) ; return builder . build ( ) ; }
public void deleteInstances ( int [ ] rowIndices ) { int i ; Arrays . sort ( rowIndices ) ; addUndoPoint ( ) ; m_IgnoreChanges = _BOOL ; for ( i = rowIndices . length - _NUM ; i >= _NUM ; i -- ) { deleteInstanceAt ( rowIndices [ i ] , _BOOL ) ; } m_IgnoreChanges = _BOOL ; notifyListener ( new TableModelEvent ( this , rowIndices [ _NUM ] , rowIndices [ rowIndices . length - _NUM ] , TableModelEvent . ALL_COLUMNS , TableModelEvent . DELETE ) ) ; }
public synchronized < T extends EventListener > void add ( Class < T > t , T l ) { if ( l == null ) { return ; } if ( ! t . isInstance ( l ) ) { throw new IllegalArgumentException ( _STR + l + _STR + t ) ; } if ( listenerList == NULL_ARRAY ) { listenerList = new Object [ ] { t , l } ; } else { int i = listenerList . length ; Object [ ] tmp = new Object [ i + _NUM ] ; System . arraycopy ( listenerList , _NUM , tmp , _NUM , i ) ; tmp [ i ] = t ; tmp [ i + _NUM ] = l ; listenerList = tmp ; } }
public static void gc2gc ( double c1 [ ] , int m1 , double g1 , double c2 [ ] , int m2 , double g2 ) { double [ ] gc2gc_buff = Arrays . copyOf ( c1 , m1 + _NUM ) ; c2 [ _NUM ] = gc2gc_buff [ _NUM ] ; for ( int i = _NUM ; i <= m2 ; i ++ ) { double ss1 = _NUM ; double ss2 = _NUM ; int min = m1 < i ? m1 : i - _NUM ; for ( int k = _NUM ; k <= min ; k ++ ) { int mk = i - k ; double cc = gc2gc_buff [ k ] * c2 [ mk ] ; ss2 += k * cc ; ss1 += mk * cc ; } if ( i <= m1 ) c2 [ i ] = gc2gc_buff [ i ] + ( g2 * ss2 - g1 * ss1 ) / i ; else c2 [ i ] = ( g2 * ss2 - g1 * ss1 ) / i ; } }
public static boolean between ( Date baseDate , Date startDate , Date endDate ) { if ( startDate . equals ( endDate ) || endDate . before ( startDate ) ) { return _BOOL ; } if ( ( startDate . before ( baseDate ) || startDate . equals ( baseDate ) ) && ( endDate . after ( baseDate ) || endDate . equals ( baseDate ) ) ) { return _BOOL ; } return _BOOL ; }
public void addListener ( final TimeoutEventListener listener ) { final long timeout = listener . getTimeout ( ) ; if ( timeout > _NUM ) { listeners . add ( listener ) ; synchronized ( stateLock ) { pendingListenerMinDelay = Math . min ( pendingListenerMinDelay , timeout ) ; stateLock . notifyAll ( ) ; } } }
public static String [ ] convertStrings ( List < String > strings ) { String [ ] ret = new String [ strings . size ( ) ] ; for ( int i = _NUM ; i < ret . length ; i ++ ) { ret [ i ] = strings . get ( i ) ; } return ret ; }
public static String transformToolTipText ( final String description , final boolean addHTMLTags , final int lineLength , final boolean escapeSlashes , final boolean escapeHTML ) { String completeText = description . trim ( ) ; if ( escapeHTML ) { completeText = Tools . escapeHTML ( completeText ) ; } if ( escapeSlashes ) { completeText = completeText . replaceAll ( _STR , _STR ) ; } StringBuffer result = new StringBuffer ( ) ; if ( addHTMLTags ) { result . append ( _STR ) ; } completeText = Tools . transformAllLineSeparators ( completeText ) ; String [ ] lines = completeText . split ( _STR ) ; for ( String text : lines ) { boolean first = _BOOL ; while ( text . length ( ) > lineLength ) { int spaceIndex = text . indexOf ( _STR , lineLength ) ; if ( ! first ) { result . append ( _STR ) ; } first = _BOOL ; if ( spaceIndex >= _NUM ) { result . append ( text . substring ( _NUM , spaceIndex ) ) ; text = text . substring ( spaceIndex + _NUM ) ; } else { result . append ( text ) ; text = _STR ; } } if ( ! first && text . length ( ) > _NUM ) { result . append ( _STR ) ; } result . append ( text ) ; result . append ( _STR ) ; } if ( addHTMLTags ) { result . append ( _STR ) ; } return result . toString ( ) ; }
@ Override public void write ( byte [ ] buffer , int offset , int length ) { if ( isClosed ( ) || isHead ( ) ) { return ; } int byteLength = _offset ; while ( _BOOL ) { int sublen = Math . min ( length , SIZE - byteLength ) ; System . arraycopy ( buffer , offset , _buffer , byteLength , sublen ) ; offset += sublen ; length -= sublen ; byteLength += sublen ; if ( length <= _NUM ) { break ; } _offset = byteLength ; flushByteBuffer ( ) ; byteLength = _offset ; } _offset = byteLength ; }
public ClientHttpRequest ( URLConnection connection ) throws IOException { this . connection = connection ; connection . setDoOutput ( _BOOL ) ; connection . setDoInput ( _BOOL ) ; connection . setRequestProperty ( _STR , _STR + boundary ) ; }
public void characters ( String characters ) throws SAXException { final int len = characters . length ( ) ; if ( len > m_charsBuff . length ) { m_charsBuff = new char [ len * _NUM + _NUM ] ; } characters . getChars ( _NUM , len , m_charsBuff , _NUM ) ; characters ( m_charsBuff , _NUM , len ) ; }
private void appendTag ( String tagName , String value ) { xml . append ( _STR ) ; xml . append ( tagName ) ; xml . append ( _STR ) ; xml . append ( value ) ; xml . append ( _STR ) ; xml . append ( tagName ) ; xml . append ( _STR ) ; }
@ Override public CertificateTokenValidationExtraInfo extraInfo ( ) { return extraInfo ; }
public void addTopLevelContents ( Collection < ContentElement > contents ) { topLevelContents . addAll ( contents ) ; }
public static void withInstance ( Map < String , Object > args , Closure c ) throws SQLException , ClassNotFoundException { Sql sql = null ; try { sql = newInstance ( args ) ; c . call ( sql ) ; } finally { if ( sql != null ) sql . close ( ) ; } }
public void write ( byte [ ] buffer , int offset , int length , boolean isEnd ) throws IOException { throw new UnsupportedOperationException ( String . valueOf ( this ) ) ; }
private boolean addIndexEntry ( ServiceType resourceType , String resourceName , String policyName ) throws PolicyException { ResourceIndex resourceIndex = ( ResourceIndex ) resourceIndices . get ( resourceType . getName ( ) ) ; if ( resourceIndex == null ) { resourceIndex = refreshResourceIndexFromDataStore ( resourceType ) ; } return resourceIndex . addIndexEntry ( resourceName , policyName ) ; }
public void ddSolve ( Set < Node > qryNodes ) { long solve_time = _NUM , prepare_time = _NUM ; if ( hasExecuted == _BOOL ) solve ( ) ; if ( ddPrepared == _BOOL || offlineProcessor == null ) { offlineProcessor = new OfflineProcessor ( this ) ; IFigureManager . cleanCache ( ) ; ddPrepared = _BOOL ; ps . println ( ) ; ps . println ( _STR ) ; } int init_size = qryNodes . size ( ) ; if ( init_size == _NUM ) { ps . println ( _STR ) ; return ; } Date prepare_begin = new Date ( ) ; offlineProcessor . init ( ) ; offlineProcessor . addUserDefPts ( qryNodes ) ; offlineProcessor . runOptimizations ( ) ; Date prepare_end = new Date ( ) ; prepare_time += prepare_end . getTime ( ) - prepare_begin . getTime ( ) ; Date begin = new Date ( ) ; prepareNextRun ( ) ; nodeGenerator . initFlowGraph ( this ) ; solveConstraints ( ) ; Date end = new Date ( ) ; solve_time += end . getTime ( ) - begin . getTime ( ) ; ps . println ( ) ; ps . printf ( _STR , ( double ) prepare_time / _NUM ) ; ps . printf ( _STR , ( double ) solve_time / _NUM ) ; }
private static void deleteFrom ( int deleteAt , int [ ] starts , int numStarts ) { while ( starts [ -- numStarts ] > deleteAt ) { starts [ numStarts ] -= _NUM ; } }
public static EventTypeMetadata createBeanType ( String name , Class clazz , boolean isPreConfiguredStatic , boolean isPreConfigured , boolean isConfigured , TypeClass typeClass ) { Set < String > secondaryNames = null ; if ( name == null ) { name = clazz . getName ( ) ; } else { if ( ! name . equals ( clazz . getName ( ) ) ) { secondaryNames = new LinkedHashSet < String > ( ) ; secondaryNames . add ( clazz . getName ( ) ) ; } } return new EventTypeMetadata ( name , secondaryNames , typeClass , isPreConfiguredStatic , isPreConfigured , isConfigured , ApplicationType . CLASS , _BOOL ) ; }
private boolean reverseIt ( ) { if ( ! isActive ( ) ) throw new IllegalStateException ( _STR ) ; MPeriod . testPeriodOpen ( getCtx ( ) , getDateTrx ( ) , MPeriodControl . DOCBASETYPE_PaymentAllocation , getAD_Org_ID ( ) ) ; setIsActive ( _BOOL ) ; if ( ! isPosted ( ) ) setPosted ( _BOOL ) ; setDocumentNo ( getDocumentNo ( ) + _STR ) ; setDocStatus ( DOCSTATUS_Reversed ) ; if ( ! save ( ) || isActive ( ) ) throw new IllegalStateException ( _STR ) ; MFactAcct . deleteEx ( MAllocationHdr . Table_ID , getC_AllocationHdr_ID ( ) , get_TrxName ( ) ) ; getLines ( _BOOL ) ; HashSet < Integer > bps = new HashSet < Integer > ( ) ; for ( int i = _NUM ; i < m_lines . length ; i ++ ) { MAllocationLine line = m_lines [ i ] ; line . setIsActive ( _BOOL ) ; line . saveEx ( ) ; bps . add ( new Integer ( line . processIt ( _BOOL ) ) ) ; } updateBP ( bps ) ; return _BOOL ; }
public static boolean useSubjectCredsOnly ( GSSCaller caller ) { if ( caller instanceof HttpCaller ) { return _BOOL ; } String propValue = AccessController . doPrivileged ( new GetPropertyAction ( _STR , _STR ) ) ; return ( ! propValue . equalsIgnoreCase ( _STR ) ) ; }
private void readEntityDeclaration ( ) throws IOException , XmlPullParserException { read ( START_ENTITY ) ; boolean generalEntity = _BOOL ; skip ( ) ; if ( peekCharacter ( ) == _STR ) { generalEntity = _BOOL ; position ++ ; skip ( ) ; } String name = readName ( ) ; skip ( ) ; int quote = peekCharacter ( ) ; String entityValue ; if ( quote == _STR || quote == _STR ) { position ++ ; entityValue = readValue ( ( char ) quote , _BOOL , _BOOL , ValueContext . ENTITY_DECLARATION ) ; if ( peekCharacter ( ) == quote ) { position ++ ; } } else if ( readExternalId ( _BOOL , _BOOL ) ) { entityValue = _STR ; skip ( ) ; if ( peekCharacter ( ) == NDATA [ _NUM ] ) { read ( NDATA ) ; skip ( ) ; readName ( ) ; } } else { throw new XmlPullParserException ( _STR , this , null ) ; } if ( generalEntity && processDocDecl ) { if ( documentEntities == null ) { documentEntities = new HashMap < String , char [ ] > ( ) ; } documentEntities . put ( name , entityValue . toCharArray ( ) ) ; } skip ( ) ; read ( _STR ) ; }
public void add ( String fieldName , String value ) { if ( fieldName == null ) throw new IllegalArgumentException ( _STR ) ; if ( value == null ) throw new IllegalArgumentException ( _STR ) ; if ( fieldName . length ( ) == _NUM || fieldName . indexOf ( _STR ) != - _NUM || value . indexOf ( _STR ) != - _NUM ) { throw new IllegalArgumentException ( _STR + fieldName + _STR + value ) ; } addLenient ( fieldName , value ) ; }
public void deleteStorage ( StorageData storageData ) throws BusinessException , IOException { StorageData local = getLocalStorageDataObject ( storageData ) ; synchronized ( local ) { if ( ( storageRecorder . isRecordingOn ( ) || storageRecorder . isRecordingScheduled ( ) ) && Objects . equals ( local , recorderStorageData ) ) { throw new BusinessException ( _STR + local + _STR , StorageErrorCodeEnum . STORAGE_ALREADY_CLOSED ) ; } if ( local . isStorageOpened ( ) ) { StorageWriter writer = openedStoragesMap . get ( local ) ; if ( writer != null ) { writer . cancel ( ) ; } openedStoragesMap . remove ( local ) ; } deleteCompleteStorageDataFromDisk ( local ) ; existingStoragesSet . remove ( local ) ; } }
public CoapResponse advanced ( Request request ) { assignClientUriIfEmpty ( request ) ; return synchronous ( request ) ; }
public void visitErrorNode ( ErrorNode node ) { ProgressIndicatorProvider . checkCanceled ( ) ; Token badToken = node . getSymbol ( ) ; boolean isConjuredToken = badToken . getTokenIndex ( ) < _NUM ; int nodeStartIndex = badToken . getStartIndex ( ) ; SyntaxError error = tokenToErrorMap . get ( nodeStartIndex ) ; if ( error != null ) { PsiBuilder . Marker errorMarker = builder . mark ( ) ; if ( badToken . getStartIndex ( ) >= _NUM && badToken . getType ( ) != Token . EOF && ! isConjuredToken ) { builder . advanceLexer ( ) ; } String message = String . format ( _STR , error . getMessage ( ) ) ; errorMarker . error ( message ) ; } else { if ( isConjuredToken ) { PsiBuilder . Marker errorMarker = builder . mark ( ) ; errorMarker . error ( badToken . getText ( ) ) ; } else { builder . advanceLexer ( ) ; } } }
public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
@ Override public boolean conditionOk ( Example example ) { boolean isOk = _BOOL ; for ( Attribute attribute : checkedAttributes ) { isOk &= ! Double . isNaN ( example . getValue ( attribute ) ) ; } return isOk ; }
private void loadBinary ( InputStream is ) throws IOException { if ( useNewIO && is instanceof FileInputStream ) { FileInputStream fis = ( FileInputStream ) is ; if ( useIndexing ) { loadBinaryIndex ( new URL ( indexName ) ) ; mapDatabase ( fis ) ; } else { loadMappedBinary ( fis ) ; } } else { DataInputStream dis = new DataInputStream ( new BufferedInputStream ( is ) ) ; loadBinary ( dis ) ; } }
public VNXeCommandJob deleteLunsFromLunGroup ( String lunGroupId , List < String > luns ) { LunGroupModifyParam param = new LunGroupModifyParam ( ) ; List < LunAddParam > lunDelete = new ArrayList < LunAddParam > ( ) ; for ( String lunId : luns ) { VNXeBase lun = new VNXeBase ( lunId ) ; LunAddParam lunAdd = new LunAddParam ( ) ; lunAdd . setLun ( lun ) ; lunDelete . add ( lunAdd ) ; } param . setLunDelete ( lunDelete ) ; LunGroupRequests req = new LunGroupRequests ( _khClient ) ; return req . modifyLunGroupAsync ( lunGroupId , param ) ; }
public void removeLocators ( LookupLocator [ ] locators ) { testSetForNull ( locators ) ; synchronized ( this ) { if ( terminated ) { throw new IllegalStateException ( _STR ) ; } HashMap groupsMap = new HashMap ( _NUM ) ; for ( int i = _NUM ; i < locators . length ; i ++ ) { LocatorReg reg = removeDiscoveredLocator ( locators [ i ] ) ; if ( reg != null ) { groupsMap . put ( reg . proxy , reg . memberGroups ) ; continue ; } reg = findReg ( locators [ i ] ) ; if ( reg != null ) { undiscoveredLocators . remove ( reg ) ; } } if ( ! groupsMap . isEmpty ( ) && ! listeners . isEmpty ( ) ) { addNotify ( ( ArrayList ) listeners . clone ( ) , groupsMap , _BOOL ) ; } } }
public boolean is_selected ( ItemSelectionChoice p_choice ) { return sel_array [ p_choice . ordinal ( ) ] ; }
private void add ( final IProgressOperation operation ) { final GridBagConstraints constraints = new GridBagConstraints ( ) ; constraints . fill = GridBagConstraints . HORIZONTAL ; constraints . gridy = counter ++ ; constraints . gridx = _NUM ; constraints . weightx = _NUM ; constraints . weighty = _NUM ; m_progressPanel . add ( operation . getProgressPanel ( ) , constraints ) ; }
public KeyStoreBuilder withProvider ( final String providerName ) { Provider provider = Security . getProvider ( providerName ) ; if ( provider == null ) { throw new IllegalArgumentException ( _STR + providerName ) ; } return withProvider ( provider ) ; }
private boolean compareAndDecrementWorkerCount ( int expect ) { return ctl . compareAndSet ( expect , expect - _NUM ) ; }
public static HttpURLConnection toHttpConnection ( Request ... requests ) { return toHttpConnection ( Arrays . asList ( requests ) ) ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
public CompositeRouteFinder ( final GameMap map , final HashMap < Match < Territory > , Integer > matches ) { m_map = map ; m_matches = matches ; s_logger . finer ( _STR ) ; }
public TCPEndpoint ( String host , int port ) { this ( host , port , null , null ) ; }
public void testBug22613 ( ) throws Exception { createTable ( _STR , _STR ) ; checkMetadataForBug22613 ( this . conn ) ; if ( versionMeetsMinimum ( _NUM , _NUM ) ) { Connection infoSchemConn = null ; try { Properties props = new Properties ( ) ; props . setProperty ( _STR , _STR ) ; infoSchemConn = getConnectionWithProps ( props ) ; checkMetadataForBug22613 ( infoSchemConn ) ; } finally { if ( infoSchemConn != null ) { infoSchemConn . close ( ) ; } } } }
public long stime ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
public ProgramRewriter ( ArrayList < HopRewriteRule > hRewrites , ArrayList < StatementBlockRewriteRule > sbRewrites ) { _dagRuleSet = new ArrayList < HopRewriteRule > ( ) ; _dagRuleSet . addAll ( hRewrites ) ; _sbRuleSet = new ArrayList < StatementBlockRewriteRule > ( ) ; _sbRuleSet . addAll ( sbRewrites ) ; }
private JMenu createSettingsMenu ( ) { final JMenu menu = new JMenu ( _STR ) ; menu . setMnemonic ( _STR ) ; menu . add ( new CActionShowSettingsDialog ( getParent ( ) ) ) ; menu . add ( new JSeparator ( ) ) ; menu . add ( new CActionInitialCallgraphSettings ( getParent ( ) ) ) ; menu . add ( new CActionInitialFlowgraphSettings ( getParent ( ) ) ) ; return menu ; }
public static void writeString ( DataOutputStream os , String s ) throws IOException { if ( s == null ) { os . writeInt ( - _NUM ) ; } else { byte array [ ] = s . getBytes ( ) ; os . writeInt ( array . length ) ; os . write ( array ) ; } }
public static boolean isJavaValidName ( String str ) { if ( str . isEmpty ( ) ) return _BOOL ; if ( javaKeys . contains ( str ) ) return _BOOL ; char first = str . charAt ( _NUM ) ; if ( isValidNameStartChar ( first ) ) { for ( int i = _NUM ; i < str . length ( ) ; ++ i ) { char c = str . charAt ( i ) ; if ( ! isValidNameChar ( c ) ) return _BOOL ; } return _BOOL ; } else { return _BOOL ; } }
private List < String > createCommands ( ) { List < String > commands = createNodeCommands ( nodejsFile , tsFile ) ; List < String > args = createNodeArgs ( ) ; if ( args != null ) { commands . addAll ( args ) ; } return commands ; }
private void parsePackages ( SensorContext sensorContext ) { for ( Directory directory : packageList ) { sensorContext . saveMeasure ( directory , CoreMetrics . DIRECTORIES , _NUM ) ; sensorContext . saveMeasure ( directory , CoreMetrics . FILES , ( double ) filesCount . get ( directory ) ) ; } }
public static Thread consumeProcessErrorStream ( Process self , Appendable error ) { Thread thread = new Thread ( new TextDumper ( self . getErrorStream ( ) , error ) ) ; thread . start ( ) ; return thread ; }
public StrBuilder deleteFirst ( final String str ) { final int len = ( str == null ? _NUM : str . length ( ) ) ; if ( len > _NUM ) { final int index = indexOf ( str , _NUM ) ; if ( index >= _NUM ) { deleteImpl ( index , index + len , len ) ; } } return this ; }
@ Reference ( authors = _STR , booktitle = _STR , title = _STR , url = _STR ) public static < V extends NumberVector > double logLikelihood ( Relation < V > relation , Clustering < ? extends MeanModel > clustering , NumberVectorDistanceFunction < ? super V > distanceFunction ) { List < ? extends Cluster < ? extends MeanModel > > clusters = clustering . getAllClusters ( ) ; final int dim = RelationUtil . dimensionality ( relation ) ; final int m = clusters . size ( ) ; int n = _NUM ; int [ ] n_i = new int [ m ] ; double d = _NUM ; double [ ] d_i = new double [ m ] ; Iterator < ? extends Cluster < ? extends MeanModel > > it = clusters . iterator ( ) ; for ( int i = _NUM ; it . hasNext ( ) ; ++ i ) { Cluster < ? extends MeanModel > cluster = it . next ( ) ; n += n_i [ i ] = cluster . size ( ) ; d += d_i [ i ] = varianceOfCluster ( cluster , distanceFunction , relation ) ; } if ( n <= m ) { return Double . NEGATIVE_INFINITY ; } final double v = d / ( n - m ) , logv = Math . log ( v ) ; double logLikelihood = _NUM ; for ( int i = _NUM ; i < m ; i ++ ) { logLikelihood += n_i [ i ] * Math . log ( n_i [ i ] ) - n_i [ i ] * _NUM * MathUtil . LOGTWOPI - n_i [ i ] * dim * _NUM * logv - ( d_i [ i ] - m ) * _NUM ; } logLikelihood -= n * Math . log ( n ) ; return logLikelihood ; }
private static Class < ? > [ ] classesForParams ( List < String > params ) { Class < ? > [ ] result = new Class < ? > [ params . size ( ) ] ; for ( int i = _NUM ; i < params . size ( ) ; i ++ ) { result [ i ] = classForParam ( params . get ( i ) ) ; } return result ; }
private boolean announce ( String [ ] groups ) { if ( dataPackets == null || ! lastLocator . equals ( myLocator ) || ! Arrays . equals ( lastGroups , groups ) ) { List < DatagramPacket > packets = new ArrayList < DatagramPacket > ( ) ; Discovery disco ; try { disco = getDiscovery ( multicastAnnouncementConstraints . chooseProtocolVersion ( ) ) ; } catch ( DiscoveryProtocolException e ) { throw new AssertionError ( e ) ; } EncodeIterator ei = disco . encodeMulticastAnnouncement ( new MulticastAnnouncement ( announcementSeqNo ++ , myLocator . getHost ( ) , myLocator . getPort ( ) , groups , myServiceID ) , multicastAnnouncementConstraints . getMulticastMaxPacketSize ( DEFAULT_MAX_PACKET_SIZE ) , multicastAnnouncementConstraints . getUnfulfilledConstraints ( ) ) ; while ( ei . hasNext ( ) ) { try { packets . addAll ( Arrays . asList ( ei . next ( ) ) ) ; } catch ( Exception e ) { logger . log ( ( e instanceof UnsupportedConstraintException ) ? Levels . HANDLED : Level . INFO , _STR + _STR , e ) ; } } lastLocator = myLocator ; lastGroups = groups ; dataPackets = packets . toArray ( new DatagramPacket [ packets . size ( ) ] ) ; } try { send ( dataPackets ) ; } catch ( InterruptedIOException e ) { return _BOOL ; } return _BOOL ; }
public static String encodeLines ( byte [ ] in , int iOff , int iLen , int lineLen , String lineSeparator ) { int blockLen = ( lineLen * _NUM ) / _NUM ; if ( blockLen <= _NUM ) throw new IllegalArgumentException ( ) ; int lines = ( iLen + blockLen - _NUM ) / blockLen ; int bufLen = ( ( iLen + _NUM ) / _NUM ) * _NUM + lines * lineSeparator . length ( ) ; StringBuilder buf = new StringBuilder ( bufLen ) ; int ip = _NUM ; while ( ip < iLen ) { int l = Math . min ( iLen - ip , blockLen ) ; buf . append ( encode ( in , iOff + ip , l ) ) ; buf . append ( lineSeparator ) ; ip += l ; } return buf . toString ( ) ; }
final public void trimToSize ( ) { for ( GazEntry ge : gaz . values ( ) ) { ge . trimToSize ( ) ; } }
public boolean containsSelectAccount ( ) { return prompts . contains ( PROMPT_SELECT_ACCOUNT ) ; }
protected static void quickSort ( Instances insts , int [ ] indices , int attidx , int left , int right ) { if ( left < right ) { int middle = partition ( insts , indices , attidx , left , right ) ; quickSort ( insts , indices , attidx , left , middle ) ; quickSort ( insts , indices , attidx , middle + _NUM , right ) ; } }
public Image flipImageHorizontally ( Image image , boolean maintainOpacity ) { int [ ] rgb = image . getRGB ( ) ; int [ ] newRGB = new int [ rgb . length ] ; int width = image . getWidth ( ) ; int height = image . getHeight ( ) ; for ( int y = _NUM ; y < height ; y ++ ) { for ( int x = _NUM ; x < width ; x ++ ) { newRGB [ ( width - x - _NUM ) + y * width ] = rgb [ x + y * width ] ; } } return EncodedImage . createFromRGB ( newRGB , width , height , ! maintainOpacity ) ; }
public static boolean audit ( ) { return audit . get ( ) == null ? _BOOL : audit . get ( ) ; }
public static boolean isTermsRequest ( SipRequest request ) { String contentType = request . getContentType ( ) ; return ( contentType != null && contentType . startsWith ( _STR ) ) ; }
private void readSegments ( ) throws IOException { for ( SegmentExtent10 extent : _segmentExtents ) { try ( ReadStream is = openRead ( extent . address ( ) , extent . length ( ) ) ) { is . skip ( extent . length ( ) - BLOCK_SIZE ) ; long sequence = BitsUtil . readLong ( is ) ; byte [ ] tableKey = new byte [ TABLE_KEY_SIZE ] ; is . readAll ( tableKey , _NUM , tableKey . length ) ; if ( sequence > _NUM ) { Segment10 segment = new Segment10 ( sequence , tableKey , extent ) ; _segments . add ( segment ) ; } } } }
public static double projectTimeWithin24Hours ( double time ) { double secondsInOneDay = _NUM * _NUM * _NUM ; if ( time == Double . NEGATIVE_INFINITY || time == Double . POSITIVE_INFINITY ) { DebugLib . stopSystemAndReportInconsistency ( _STR ) ; } while ( time < _NUM ) { time += secondsInOneDay ; } if ( time < secondsInOneDay ) { return time ; } else { return ( ( time / secondsInOneDay ) - ( Math . floor ( time / secondsInOneDay ) ) ) * secondsInOneDay ; } }
private byte [ ] updateMinMaxForNoDictionary ( byte [ ] valueWithLength ) { ByteBuffer buffer = ByteBuffer . wrap ( valueWithLength ) ; byte [ ] actualValue = new byte [ buffer . getShort ( ) ] ; buffer . get ( actualValue ) ; return actualValue ; }
void constructNode ( String nodeName , String prefix , String nodeNamespace , TransformerImpl transformer ) throws TransformerException { boolean shouldAddAttrs ; try { SerializationHandler rhandler = transformer . getResultTreeHandler ( ) ; if ( null == nodeName ) { shouldAddAttrs = _BOOL ; } else { if ( null != prefix ) { rhandler . startPrefixMapping ( prefix , nodeNamespace , _BOOL ) ; } rhandler . startElement ( nodeNamespace , QName . getLocalPart ( nodeName ) , nodeName ) ; super . execute ( transformer ) ; shouldAddAttrs = _BOOL ; } transformer . executeChildTemplates ( this , shouldAddAttrs ) ; if ( null != nodeName ) { rhandler . endElement ( nodeNamespace , QName . getLocalPart ( nodeName ) , nodeName ) ; if ( null != prefix ) { rhandler . endPrefixMapping ( prefix ) ; } } } catch ( SAXException se ) { throw new TransformerException ( se ) ; } }
@ SuppressWarnings ( _STR ) public static void checkType ( Map < String , Object > map , String name ) { Map < String , Object > tmap ; if ( map . get ( MetamodelGenerator . KEY_TYPE ) instanceof Map ) { tmap = ( Map < String , Object > ) map . get ( MetamodelGenerator . KEY_TYPE ) ; } else if ( map . get ( MetamodelGenerator . KEY_TYPE ) instanceof String ) { tmap = new HashMap < String , Object > ( ) ; tmap . put ( MetamodelGenerator . KEY_NAME , map . get ( MetamodelGenerator . KEY_TYPE ) ) ; } else { tmap = map ; } int join = name . indexOf ( _STR ) ; if ( join > _NUM ) { while ( join > _NUM && ! pointyBracketsEven ( name . substring ( _NUM , join ) ) ) { join = name . indexOf ( _STR , join + _NUM ) ; } if ( join > _NUM ) { Assert . assertEquals ( _STR , _STR , tmap . get ( _STR ) ) ; checkTypeParameters ( - _NUM , ( List < Map < String , Object > > ) tmap . get ( MetamodelGenerator . KEY_TYPES ) , name . substring ( _NUM , join ) ) ; checkTypeParameters ( - _NUM , ( List < Map < String , Object > > ) tmap . get ( MetamodelGenerator . KEY_TYPES ) , name . substring ( join + _NUM ) ) ; return ; } } join = name . indexOf ( _STR ) ; if ( join > _NUM ) { while ( join > _NUM && ! pointyBracketsEven ( name . substring ( _NUM , join ) ) ) { join = name . indexOf ( _STR , join + _NUM ) ; } if ( join > _NUM ) { Assert . assertEquals ( _STR , _STR , tmap . get ( _STR ) ) ; checkTypeParameters ( - _NUM , ( List < Map < String , Object > > ) tmap . get ( MetamodelGenerator . KEY_TYPES ) , name . substring ( _NUM , join ) ) ; checkTypeParameters ( - _NUM , ( List < Map < String , Object > > ) tmap . get ( MetamodelGenerator . KEY_TYPES ) , name . substring ( join + _NUM ) ) ; return ; } } int sep = name . indexOf ( _STR ) ; String typeParams = null ; if ( sep > _NUM ) { typeParams = name . substring ( sep + _NUM , name . length ( ) - _NUM ) ; name = name . substring ( _NUM , sep ) ; } if ( tmap . containsKey ( MetamodelGenerator . KEY_PACKAGE ) ) { Assert . assertEquals ( name , String . format ( _STR , packageName ( tmap ) , tmap . get ( MetamodelGenerator . KEY_NAME ) ) ) ; } else { Assert . assertEquals ( name , tmap . get ( MetamodelGenerator . KEY_NAME ) ) ; } if ( typeParams != null ) { List < Map < String , Object > > tparms = ( List < Map < String , Object > > ) tmap . get ( MetamodelGenerator . KEY_TYPE_PARAMS ) ; Assert . assertFalse ( _STR , tparms . isEmpty ( ) ) ; checkTypeParameters ( _NUM , tparms , typeParams ) ; } }
private Object _deserializeStruct ( Element elStruct ) throws ConverterException { String type = elStruct . getAttribute ( _STR ) ; Struct struct = new StructImpl ( ) ; NodeList list = elStruct . getChildNodes ( ) ; int len = list . getLength ( ) ; for ( int i = _NUM ; i < len ; i ++ ) { Node node = list . item ( i ) ; if ( node instanceof Element ) { Element var = ( Element ) node ; Element value = getChildElement ( ( Element ) node ) ; if ( value != null ) { struct . setEL ( var . getAttribute ( _STR ) , _deserialize ( value ) ) ; } } } if ( struct . size ( ) == _NUM && type != null && type . length ( ) > _NUM ) { return _STR ; } return struct ; }
public QuerierCLI ( String [ ] args ) { cliOptions = createOptions ( ) ; try { CommandLineParser parser = new GnuParser ( ) ; commandLine = parser . parse ( cliOptions , args , _BOOL ) ; if ( hasOption ( _STR ) ) { printHelp ( ) ; System . exit ( _NUM ) ; } if ( ! parseOptions ( ) ) { logger . info ( _STR ) ; printHelp ( ) ; System . exit ( _NUM ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; System . exit ( _NUM ) ; } }
private static byte [ ] concatBytes ( byte [ ] array1 , byte [ ] array2 ) { byte [ ] cBytes = new byte [ array1 . length + array2 . length ] ; try { System . arraycopy ( array1 , _NUM , cBytes , _NUM , array1 . length ) ; System . arraycopy ( array2 , _NUM , cBytes , array1 . length , array2 . length ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return cBytes ; }
public In ( File file ) { if ( file == null ) throw new NullPointerException ( _STR ) ; try { FileInputStream fis = new FileInputStream ( file ) ; scanner = new Scanner ( new BufferedInputStream ( fis ) , CHARSET_NAME ) ; scanner . useLocale ( LOCALE ) ; } catch ( IOException ioe ) { throw new IllegalArgumentException ( _STR + file ) ; } }
protected ExtendedDismaxConfiguration createConfiguration ( String qstr , SolrParams localParams , SolrParams params , SolrQueryRequest req ) { return new ExtendedDismaxConfiguration ( localParams , params , req ) ; }
void writeValueProperties ( String fullId , long dbId , String localId , JsonValue value , Connection connection ) throws SQLException { if ( cfg . hasPossibleSearchableProperties ( ) ) { Integer batchingCount = _NUM ; PreparedStatement propCreateStatement = getPreparedStatement ( connection , QueryDefinition . PROPCREATEQUERYSTR ) ; try { batchingCount = writeValueProperties ( fullId , dbId , localId , value , connection , propCreateStatement , batchingCount ) ; if ( enableBatching && batchingCount > _NUM ) { int [ ] numUpdates = propCreateStatement . executeBatch ( ) ; logger . debug ( _STR , numUpdates ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( _STR , Arrays . asList ( numUpdates ) ) ; } propCreateStatement . clearBatch ( ) ; } } finally { CleanupHelper . loggedClose ( propCreateStatement ) ; } } }
protected double computeMaxYAxisValueLogScale ( double maxValue ) { double v = _NUM ; int mantisse = _NUM ; int exponent = _NUM ; while ( v < maxValue ) { if ( mantisse < _NUM ) mantisse ++ ; else { mantisse = _NUM ; exponent ++ ; } v = mantisse * Math . pow ( _NUM , exponent ) ; } return Math . log10 ( v ) ; }
public void addFocusClearedListener ( FocusClearedListener focusClearedListener ) { mFocusClearedListeners . add ( focusClearedListener ) ; }
public void addItemListener ( ItemListener aListener ) { listenerList . add ( ItemListener . class , aListener ) ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > result ; result = new Vector < Option > ( ) ; result . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR + getDefaultNumDecimals ( ) + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; return result . elements ( ) ; }
public static MosaicLevy createMosaicLevy ( final MosaicId mosaicId ) { return new MosaicLevy ( MosaicTransferFeeType . Absolute , generateRandomAccount ( ) , mosaicId , Quantity . fromValue ( _NUM ) ) ; }
public int rankOf ( double value ) { int ret = _NUM ; if ( ! hasCapacity ( ) ) { ret = Arrays . binarySearch ( data , value ) ; if ( ret < _NUM ) { return - ret - _NUM ; } else { return ret ; } } else { for ( int i = _NUM ; i < next ; i ++ ) { if ( data [ i ] < value ) { ret ++ ; } } return ret ; } }
@ Override protected int sizeOf ( String key , BitmapDrawable value ) { final int bitmapSize = getBitmapSize ( value ) / _NUM ; return bitmapSize == _NUM ? _NUM : bitmapSize ; }
public static < T > Predicate < T > not ( Predicate < T > predicate ) { return predicate . negate ( ) ; }
private static void addMarginTopToContentChild ( View mContentChild , int statusBarHeight ) { if ( mContentChild == null ) { return ; } if ( ! TAG_MARGIN_ADDED . equals ( mContentChild . getTag ( ) ) ) { FrameLayout . LayoutParams lp = ( FrameLayout . LayoutParams ) mContentChild . getLayoutParams ( ) ; lp . topMargin += statusBarHeight ; mContentChild . setLayoutParams ( lp ) ; mContentChild . setTag ( TAG_MARGIN_ADDED ) ; } }
static byte [ ] hexStringToByteArray ( String hexString ) { String s = hexString ; int len = s . length ( ) ; if ( len % _NUM == _NUM ) { s = _STR + s ; len ++ ; } byte [ ] data = new byte [ len / _NUM ] ; for ( int i = _NUM ; i < len ; i += _NUM ) { data [ i / _NUM ] = ( byte ) ( ( Character . digit ( s . charAt ( i ) , _NUM ) << _NUM ) + Character . digit ( s . charAt ( i + _NUM ) , _NUM ) ) ; } return data ; }
public int send ( byte [ ] buffer , int offset , int count ) { checkArrayBounds ( buffer , offset , count ) ; if ( count == _NUM ) { return _NUM ; } byte [ ] data = buffer ; if ( offset > _NUM ) { data = new byte [ count ] ; System . arraycopy ( buffer , offset , data , _NUM , count ) ; } IntOut bytesSentOut = new IntOut ( ) ; try { IDevice . checkResult ( LibIMobileDevice . idevice_connection_send ( getRef ( ) , data , count , bytesSentOut ) ) ; return bytesSentOut . getValue ( ) ; } finally { bytesSentOut . delete ( ) ; } }
private void fetchSchema ( ) throws ExecutionException , RpcException , TimeoutException { Message schema = Rpc . get ( myClient . getSchema ( ) , FETCH_SCHEMA_TIMEOUT_MS , TimeUnit . MILLISECONDS ) ; LOG . info ( _STR + schema . entities . length + _STR + schema . constants . length + _STR ) ; int atoms = _NUM ; for ( Entity type : schema . entities ) { if ( AtomMetadata . find ( type ) != null ) { atoms ++ ; } Dynamic . register ( type ) ; } LOG . info ( _STR + atoms + _STR ) ; for ( ConstantSet set : schema . constants ) { ConstantSet . register ( set ) ; } }
private void append ( StringBuilder buffer , double [ ] data , String prefix , String separator , String suffix ) { buffer . append ( prefix ) ; for ( int i = _NUM ; i < data . length ; ++ i ) { if ( i > _NUM ) { buffer . append ( separator ) ; } buffer . append ( data [ i ] ) ; } buffer . append ( suffix ) ; }
public T toRealArray ( ) { return _outputArrayType . cast ( ArrayMultidimensionalizer . multidimensionalize ( _real , _dimensions ) ) ; }
private ArrayList < WritableComparable > readPartitions ( FileSystem fs , Path p , JobConf job ) throws IOException { SequenceFile . Reader reader = new SequenceFile . Reader ( fs , p , job ) ; ArrayList < WritableComparable > parts = new ArrayList < WritableComparable > ( ) ; try { DoubleWritable key = new DoubleWritable ( ) ; NullWritable value = NullWritable . get ( ) ; while ( reader . next ( key , value ) ) { parts . add ( key ) ; key = new DoubleWritable ( ) ; } } catch ( Exception e ) { throw new RuntimeException ( e ) ; } finally { IOUtilFunctions . closeSilently ( reader ) ; } reader . close ( ) ; return parts ; }
public boolean pollSeqno ( long seqno ) { return seqno <= diskLog . getMaxSeqno ( ) ; }
public void addSlide ( @ NonNull Fragment fragment ) { fragments . add ( fragment ) ; addBackgroundColor ( Color . TRANSPARENT ) ; pagerAdapter . notifyDataSetChanged ( ) ; }
private static void drawLine ( int x0 , int y0 , int x1 , int y1 , boolean [ ] [ ] pic ) { final int xres = pic . length , yres = pic [ _NUM ] . length ; y0 = ( y0 < _NUM ) ? _NUM : ( y0 >= yres ) ? ( yres - _NUM ) : y0 ; y1 = ( y1 < _NUM ) ? _NUM : ( y1 >= yres ) ? ( yres - _NUM ) : y1 ; x0 = ( x0 < _NUM ) ? _NUM : ( x0 >= xres ) ? ( xres - _NUM ) : x0 ; x1 = ( x1 < _NUM ) ? _NUM : ( x1 >= xres ) ? ( xres - _NUM ) : x1 ; final int dx = + Math . abs ( x1 - x0 ) , sx = x0 < x1 ? _NUM : - _NUM ; final int dy = - Math . abs ( y1 - y0 ) , sy = y0 < y1 ? _NUM : - _NUM ; int err = dx + dy ; for ( ; ; ) { pic [ x0 ] [ y0 ] = _BOOL ; if ( x0 == x1 && y0 == y1 ) { break ; } final int e2 = err << _NUM ; if ( e2 > dy ) { err += dy ; x0 += sx ; } if ( e2 < dx ) { err += dx ; y0 += sy ; } } }
public String process ( Item item ) throws ProcessException { int count = _NUM ; Item inPhrase = SUB_PHRASE_PATH . findItem ( item ) ; for ( Item p = inPhrase ; p != null ; p = p . getPrevious ( ) ) { count ++ ; } return Integer . toString ( rail ( count ) ) ; }
public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
public E push ( E value ) { elements . add ( value ) ; return value ; }
public long cardinality ( final int tailIndex ) { return rangeCount ( tailIndex ) ; }
public static void createResponse ( HttpServletRequest request , HttpServletResponse response , HttpServlet servlet , Properties cookieProperties , WebDoc doc , boolean debug ) throws IOException { response . setHeader ( _STR , _STR ) ; response . setContentType ( _STR ) ; if ( cookieProperties != null ) { Cookie cookie = new Cookie ( WebEnv . COOKIE_INFO , propertiesEncode ( cookieProperties ) ) ; cookie . setComment ( _STR ) ; cookie . setSecure ( _BOOL ) ; cookie . setPath ( _STR ) ; if ( cookieProperties . size ( ) == _NUM ) cookie . setMaxAge ( _NUM ) ; else cookie . setMaxAge ( _NUM ) ; response . addCookie ( cookie ) ; } if ( debug && WebEnv . DEBUG ) { WebEnv . addFooter ( request , response , servlet , doc . getBody ( ) ) ; } PrintWriter out = response . getWriter ( ) ; doc . output ( out ) ; out . flush ( ) ; if ( out . checkError ( ) ) log . log ( Level . SEVERE , _STR ) ; out . close ( ) ; }
public static Long toLong ( Object o ) throws PageException { if ( o instanceof Long ) return ( Long ) o ; return Long . valueOf ( toLongValue ( o ) ) ; }
private int clampMag ( int value , int absMin , int absMax ) { final int absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
protected void finishGridRow ( ) { GridBagConstraints constraints = new GridBagConstraints ( ) ; constraints . gridwidth = GridBagConstraints . REMAINDER ; constraints . weightx = _NUM ; final JLabel icon ; if ( param . isOptional ( ) ) { if ( param . isDefined ( ) && param . tookDefaultValue ( ) && ! ( param instanceof Flag ) ) { icon = new JLabel ( StockIcon . getStockIcon ( StockIcon . DIALOG_INFORMATION ) ) ; icon . setToolTipText ( _STR + param . getDefaultValueAsString ( ) ) ; } else { icon = new JLabel ( ) ; icon . setMinimumSize ( new Dimension ( _NUM , _NUM ) ) ; } } else { if ( ! param . isDefined ( ) ) { icon = new JLabel ( StockIcon . getStockIcon ( StockIcon . DIALOG_ERROR ) ) ; icon . setToolTipText ( _STR ) ; } else { icon = new JLabel ( ) ; icon . setMinimumSize ( new Dimension ( _NUM , _NUM ) ) ; } } parent . add ( icon , constraints ) ; }
public final void testIsStatePreserved1 ( ) { byte [ ] encodedKey = new byte [ ] { ( byte ) _NUM , ( byte ) _NUM , ( byte ) _NUM , ( byte ) _NUM } ; byte [ ] encodedKeyCopy = encodedKey . clone ( ) ; X509EncodedKeySpec meks = new X509EncodedKeySpec ( encodedKeyCopy ) ; encodedKeyCopy [ _NUM ] = ( byte ) _NUM ; byte [ ] ek = meks . getEncoded ( ) ; assertTrue ( Arrays . equals ( encodedKey , ek ) ) ; }
@ Override public void shutdown ( ) { if ( ! shouldKeepAdbAlive ) { AndroidDebugBridge . disconnectBridge ( ) ; AndroidDebugBridge . terminate ( ) ; } logger . info ( _STR ) ; }
public void pingReceived ( Ping pong ) { long now = System . currentTimeMillis ( ) ; long previousReceived = ( int ) ( lastPingSent . get ( ) & _NUM ) ; log . debug ( _STR , new Object [ ] { getId ( ) , now , pong . getValue2 ( ) , previousReceived } ) ; if ( pong . getValue2 ( ) == previousReceived ) { lastPingTime . set ( ( int ) ( now & _NUM ) - pong . getValue2 ( ) ) ; } lastPongReceived . set ( now ) ; }
public static int findObjectLiteral ( Object literal ) { synchronized ( objectLiterals ) { Integer result = objectLiterals . get ( literal ) ; return result == null ? _NUM : result . intValue ( ) ; } }
@ Override public void resetViewableArea ( ) { throw new RuntimeException ( _STR ) ; }
public static Lexicon buildWumpusLex ( ) { Lexicon l = new Lexicon ( ) ; ArrayList < LexWord > list = new ArrayList < LexWord > ( ) ; list . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; list . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; list . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; list . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; list . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; list . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; list . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; list . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; list . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; l . put ( _STR , list ) ; ArrayList < LexWord > verbList = new ArrayList < LexWord > ( ) ; verbList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; verbList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; verbList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; verbList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; verbList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; verbList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; verbList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; verbList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; verbList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; l . put ( _STR , verbList ) ; ArrayList < LexWord > adjList = new ArrayList < LexWord > ( ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; adjList . add ( new LexWord ( _STR , ( float ) _NUM ) ) ; l . put ( _STR , adjList ) ; l . addLexWords ( _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR ) ; l . addLexWords ( _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR ) ; l . addLexWords ( _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR ) ; l . addLexWords ( buildNameLexicon ( ) ) ; l . addLexWords ( _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR ) ; l . addLexWords ( _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR ) ; l . addLexWords ( _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR ) ; l . addLexWords ( _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR , _STR ) ; return l ; }
private void testTransferRate ( ) { Assert . assertNotNull ( mExpectedTransferRateOps ) ; Assert . assertNotNull ( mExpectedTransferRateBps ) ; Assert . assertTrue ( mExpectedTransferRateBps . intValue ( ) > _NUM ) ; Assert . assertTrue ( mExpectedTransferRateOps . intValue ( ) > _NUM ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . replaceData ( _NUM , _NUM , _STR ) ; childData = child . getData ( ) ; assertEquals ( _STR , _STR , childData ) ; }
public void add ( X509TrustManager mgr ) { if ( mgr instanceof X509Extensions ) { managers . add ( ( X509Extensions ) mgr ) ; } else { managers . add ( new X509ExtensionsWrapper ( mgr ) ) ; } }
public Iterator < TreeNode > findChildren ( ) { List < TreeNode > nodes ; if ( children == null ) nodes = Collections . emptyList ( ) ; else nodes = children ; return nodes . iterator ( ) ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
private int createFolder ( ) { if ( mNewDirectoryName != null && mSelectedDir != null && mSelectedDir . canWrite ( ) ) { File newDir = new File ( mSelectedDir , mNewDirectoryName ) ; if ( ! newDir . exists ( ) ) { boolean result = newDir . mkdir ( ) ; if ( result ) { changeDirectory ( newDir ) ; return R . string . create_folder_success ; } else { return R . string . create_folder_error ; } } else { return R . string . create_folder_error_already_exists ; } } else if ( mSelectedDir != null && ! mSelectedDir . canWrite ( ) ) { return R . string . create_folder_error_no_write_access ; } else { return R . string . create_folder_error ; } }
public static double I ( double P [ ] [ ] , int j , int k ) { double I = _NUM ; double p_x = P [ j ] [ j ] ; double p_y = P [ k ] [ k ] ; double p_xy = P [ j ] [ k ] ; I += p_xy * Math . log ( p_xy / ( p_x * p_y ) ) ; I += ( _NUM - p_xy ) * Math . log ( ( _NUM - p_xy ) / ( ( _NUM - p_x ) * ( _NUM - p_y ) ) ) ; return I ; }
public Result doComparisonTest ( Properties properties ) throws Exception { final long timeout = Long . parseLong ( properties . getProperty ( TestOptions . TIMEOUT ) ) ; final int nclients = Integer . parseInt ( properties . getProperty ( TestOptions . NCLIENTS ) ) ; final int ntrials = Integer . parseInt ( properties . getProperty ( TestOptions . NTRIALS ) ) ; final int keyLen = Integer . parseInt ( properties . getProperty ( TestOptions . KEYLEN ) ) ; final int nops = Integer . parseInt ( properties . getProperty ( TestOptions . NOPS ) ) ; final double insertRate = Integer . parseInt ( properties . getProperty ( TestOptions . INSERT_RATE ) ) ; final int nindices = Integer . parseInt ( properties . getProperty ( TestOptions . NINDICES ) ) ; final boolean testCorrectness = Boolean . parseBoolean ( properties . getProperty ( TestOptions . TEST_CORRECTNESS ) ) ; Result result = doConcurrentClientTest ( client , nclients , timeout , ntrials , keyLen , nops , insertRate , nindices , testCorrectness ) ; return result ; }
public void testGetScale ( ) throws SQLException { try { int scale = _NUM ; String createTable = _STR + _STR + scale + _STR ; String insert = _STR ; String select = _STR ; Statement st = conn . createStatement ( ) ; st . executeUpdate ( createTable ) ; st . executeUpdate ( insert ) ; rs = st . executeQuery ( select ) ; ResultSetMetaData rsmd2 = rs . getMetaData ( ) ; assertNotNull ( rsmd2 ) ; assertEquals ( scale , rsmd2 . getScale ( _NUM ) ) ; assertTrue ( rsmd2 . getScale ( _NUM ) > _NUM ) ; assertTrue ( rsmd2 . getScale ( _NUM ) > _NUM ) ; try { rsmd . getScale ( _NUM ) ; fail ( _STR ) ; } catch ( SQLException e ) { } try { rsmd . getScale ( _NUM ) ; fail ( _STR ) ; } catch ( SQLException e ) { } try { conn . close ( ) ; rsmd . getScale ( _NUM ) ; fail ( _STR ) ; } catch ( SQLException e ) { } } finally { st . cancel ( ) ; } }
static String valueToString ( Object value , int indentFactor , int indent ) { if ( value == null || value . equals ( null ) ) { return _STR ; } try { if ( value instanceof String ) { return quote ( ( String ) value ) ; } } catch ( Exception e ) { } if ( value instanceof Float || value instanceof Double || value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long ) { return numberToString ( value ) ; } if ( value instanceof Boolean ) { return value . toString ( ) ; } if ( value instanceof Map ) { return print ( ( Map ) value , indentFactor , indent ) ; } if ( value instanceof List ) { return print ( ( List ) value , indentFactor , indent ) ; } return quote ( value . toString ( ) ) ; }
public static boolean isRetainedAtRuntime ( Class < ? extends Annotation > annotationType ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
public void testProcessMsg5 ( ) { byte [ ] pdu = createPDU ( _NUM ) ; int headerLen = pdu . length - ( mGsmHeader . length + mUserDataHeader . length + mMessageBody . length ) ; int pduType = _NUM ; int tranId = _NUM ; String originalPackageName = mPackageName ; String originalClassName = mClassName ; try { mClassName = _STR ; IWapPushManager iwapman = getInterface ( ) ; iwapman . addPackage ( Integer . toString ( mAppIdValue ) , Integer . toString ( mContentTypeValue ) , mPackageName , mClassName , WapPushManagerParams . APP_TYPE_ACTIVITY , _BOOL , _BOOL ) ; assertTrue ( ( iwapman . processMessage ( Integer . toString ( mAppIdValue ) , Integer . toString ( mContentTypeValue ) , createIntent ( pduType , tranId ) ) & WapPushManagerParams . MESSAGE_HANDLED ) == WapPushManagerParams . MESSAGE_HANDLED ) ; iwapman . deletePackage ( Integer . toString ( mAppIdValue ) , Integer . toString ( mContentTypeValue ) , mPackageName , mClassName ) ; } catch ( RemoteException e ) { assertTrue ( _BOOL ) ; } mPackageName = originalPackageName ; mClassName = originalClassName ; }
public void addClassPath ( String classpath ) { char sep = CauchoUtil . getPathSeparatorChar ( ) ; int head = _NUM ; int tail = _NUM ; while ( head < classpath . length ( ) ) { tail = classpath . indexOf ( sep , head ) ; String segment = null ; if ( tail < _NUM ) { segment = classpath . substring ( head ) ; head = classpath . length ( ) ; } else { segment = classpath . substring ( head , tail ) ; head = tail + _NUM ; } if ( segment . equals ( _STR ) ) continue ; else if ( segment . endsWith ( _STR ) || segment . endsWith ( _STR ) ) addMergePath ( JarPath . create ( VfsOld . lookup ( segment ) ) ) ; else addMergePath ( VfsOld . lookup ( segment ) ) ; } }
@ Singleton public static synchronized void loadDirectories ( String firstOption ) throws InvalidConfigException { if ( userIdDirectories == null ) { userIdDirectories = new TreeMap < String , String > ( ) ; userIdDirectories . put ( _STR , ( firstOption == null ) ? _STR : firstOption ) ; Properties properties = directoriesProperties ( ) ; for ( Map . Entry < Object , Object > entry : properties . entrySet ( ) ) { String key = StringUtils . trim ( ( String ) entry . getKey ( ) ) ; String value = StringUtils . trim ( ( String ) entry . getValue ( ) ) ; if ( key != null && value != null ) { userIdDirectories . put ( key , value ) ; } else { String error = DIRECTORIES_PROPFILE_PATH + _STR ; LOG . error ( error ) ; throw new InvalidConfigException ( InvalidConfigException . TYPE . INVALID_PROPERTIES_FILE , error ) ; } } if ( ( userIdDirectories . size ( ) - _NUM ) == _NUM ) { String error = _STR + DIRECTORIES_PROPFILE_PATH + _STR ; LOG . error ( error ) ; throw new InvalidConfigException ( InvalidConfigException . TYPE . INVALID_PROPERTIES_FILE , error ) ; } } }
public static Individuum nullIndividuum ( int dim ) { short [ ] gene = new short [ dim ] ; Arrays . fill ( gene , DONT_CARE ) ; return new Individuum ( _NUM , gene ) ; }
public List < Class < ? > > findAllClasses ( String uri ) throws IOException , ClassNotFoundException { List < Class < ? > > classes = new ArrayList < > ( ) ; List < String > strings = findAllStrings ( uri ) ; for ( String className : strings ) { Class < ? > clazz = _classLoader . loadClass ( className ) ; classes . add ( clazz ) ; } return classes ; }
private boolean isSlavoGermanic ( String value ) { return value . indexOf ( _STR ) > - _NUM || value . indexOf ( _STR ) > - _NUM || value . indexOf ( _STR ) > - _NUM || value . indexOf ( _STR ) > - _NUM ; }
public void shuffleInventory ( @ Nonnull IInventory inv , @ Nonnull Random random ) { final List < ItemStack > list = getInventoryList ( inv ) ; Collections . shuffle ( list , random ) ; for ( int i = _NUM ; i < inv . getSizeInventory ( ) ; ++ i ) { inv . setInventorySlotContents ( i , list . get ( i ) ) ; } }
protected ChromeAnimation < ? > createUpdateDiscardAnimatorSet ( StackTab [ ] tabs , int spacing , float warpSize , float discardRange ) { ChromeAnimation < Animatable < ? > > set = new ChromeAnimation < Animatable < ? > > ( ) ; int dyingTabsCount = _NUM ; float firstDyingTabOffset = _NUM ; for ( int i = _NUM ; i < tabs . length ; ++ i ) { StackTab tab = tabs [ i ] ; addTiltScrollAnimation ( set , tab . getLayoutTab ( ) , _NUM , UNDISCARD_ANIMATION_DURATION , _NUM ) ; if ( tab . isDying ( ) ) { dyingTabsCount ++ ; if ( dyingTabsCount == _NUM ) { firstDyingTabOffset = getScreenPositionInScrollDirection ( tab ) ; } } } Interpolator interpolator = BakedBezierInterpolator . FADE_OUT_CURVE ; int newIndex = _NUM ; for ( int i = _NUM ; i < tabs . length ; ++ i ) { StackTab tab = tabs [ i ] ; long startTime = ( long ) Math . max ( _NUM , TAB_REORDER_START_SPAN / getScreenSizeInScrollDirection ( ) * ( getScreenPositionInScrollDirection ( tab ) - firstDyingTabOffset ) ) ; if ( tab . isDying ( ) ) { float discard = tab . getDiscardAmount ( ) ; if ( discard == _NUM ) discard = isDefaultDiscardDirectionPositive ( ) ? _NUM : - _NUM ; float s = Math . copySign ( _NUM , discard ) ; long duration = ( long ) ( DISCARD_ANIMATION_DURATION * ( _NUM - Math . abs ( discard / discardRange ) ) ) ; addAnimation ( set , tab , DISCARD_AMOUNT , discard , discardRange * s , duration , startTime , _BOOL , interpolator ) ; } else { if ( tab . getDiscardAmount ( ) != _NUM ) { addAnimation ( set , tab , DISCARD_AMOUNT , tab . getDiscardAmount ( ) , _NUM , UNDISCARD_ANIMATION_DURATION , _NUM ) ; } float newScrollOffset = StackTab . screenToScroll ( spacing * newIndex , warpSize ) ; if ( tab . getDiscardAmount ( ) >= discardRange ) { tab . setScrollOffset ( newScrollOffset ) ; tab . setScale ( SCALE_AMOUNT ) ; } else { float start = tab . getScrollOffset ( ) ; if ( start != newScrollOffset ) { addAnimation ( set , tab , SCROLL_OFFSET , start , newScrollOffset , TAB_REORDER_DURATION , startTime ) ; } } newIndex ++ ; } } return set ; }
@ Override public String format ( double value , int formatNumber ) { if ( formatNumber % _NUM == _NUM ) { return format . format ( value ) ; } else { return null ; } }
public static String toLowerCase ( String string ) { boolean changed = _BOOL ; char [ ] chars = string . toCharArray ( ) ; for ( int i = _NUM ; i != chars . length ; i ++ ) { char ch = chars [ i ] ; if ( _STR <= ch && _STR >= ch ) { changed = _BOOL ; chars [ i ] = ( char ) ( ch - _STR + _STR ) ; } } if ( changed ) { return new String ( chars ) ; } return string ; }
public void runAsserts ( List < Step > list , int size , Boolean needAssignee ) { assertEquals ( size , list . size ( ) ) ; for ( int i = _NUM ; i < size ; i ++ ) { runAsserts ( list . get ( i ) , i , needAssignee ) ; } }
protected void onException ( final WroRuntimeException e ) { throw e ; }
public static boolean registerTransform ( final String transformURI ) { final boolean added = transforms . add ( transformURI ) ; return added ; }
public synchronized void co_exit ( int thisCoroutine ) { m_activeIDs . clear ( thisCoroutine ) ; m_nextCoroutine = NOBODY ; notify ( ) ; }
public void shrink ( ) { if ( c . length == length ) { return ; } char [ ] newc = new char [ length ] ; System . arraycopy ( c , _NUM , newc , _NUM , length ) ; c = newc ; }
public ANDCondition ( Condition ... conditions ) { Reject . ifNull ( conditions ) ; this . conditions = Arrays . asList ( conditions ) ; }
private void dropDownstreamTo ( long absolutePosition ) { int relativePosition = ( int ) ( absolutePosition - totalBytesDropped ) ; int allocationIndex = relativePosition / allocationLength ; for ( int i = _NUM ; i < allocationIndex ; i ++ ) { allocator . release ( dataQueue . remove ( ) ) ; totalBytesDropped += allocationLength ; } }
public HopImpl ( String hostName , int portNumber , String trans ) { host = hostName ; if ( host . indexOf ( _STR ) >= _NUM ) if ( host . indexOf ( _STR ) < _NUM ) host = _STR + host + _STR ; port = portNumber ; transport = trans ; }
private void updateControls ( ) { Spinner difficulty = ( Spinner ) findViewById ( R . id . spinner_difficultyLevel ) ; difficulty . setSelection ( GameActivity . getDifficultyIndex ( ) ) ; Button resume = ( Button ) findViewById ( R . id . button_resumeGame ) ; resume . setEnabled ( GameActivity . canResumeFromSave ( ) ) ; CheckBox neverLoseBall = ( CheckBox ) findViewById ( R . id . checkbox_neverLoseBall ) ; neverLoseBall . setChecked ( GameActivity . getNeverLoseBall ( ) ) ; CheckBox soundEffectsEnabled = ( CheckBox ) findViewById ( R . id . checkbox_soundEffectsEnabled ) ; soundEffectsEnabled . setChecked ( GameActivity . getSoundEffectsEnabled ( ) ) ; TextView highScore = ( TextView ) findViewById ( R . id . text_highScore ) ; highScore . setText ( String . valueOf ( mHighScore ) ) ; }
public static void write ( OutputStream out , int c ) { if ( out == null ) { throw new IllegalArgumentException ( _STR ) ; } try { out . write ( c ) ; } catch ( IOException e ) { throw new RuntimeException ( e . getMessage ( ) , e ) ; } }
public void message ( LocoNetMessage m ) { if ( m . getNumDataElements ( ) != _NUM ) { return ; } int b1 = m . getElement ( _NUM ) & _NUM ; int b2 = m . getElement ( _NUM ) & _NUM ; int b3 = m . getElement ( _NUM ) & _NUM ; int b4 = m . getElement ( _NUM ) & _NUM ; if ( ( b1 == _NUM ) && ( ( b2 == _NUM ) || ( b2 == _NUM ) || ( b2 == _NUM ) ) && ( b3 == _NUM ) ) { idBox . setSelectedIndex ( b4 + _NUM ) ; } }
public Void call ( ) throws Exception { byte [ ] [ ] keys = new byte [ nops ] [ ] ; byte [ ] [ ] vals = new byte [ nops ] [ ] ; if ( r . nextDouble ( ) <= insertRate ) { for ( int i = _NUM ; i < nops ; i ++ ) { keys [ i ] = nextKey ( ) ; vals [ i ] = new byte [ _NUM ] ; r . nextBytes ( vals [ i ] ) ; } lock . lock ( ) ; try { ndx . submit ( _NUM , nops , keys , vals , BatchInsertConstructor . RETURN_NO_VALUES , null ) ; if ( groundTruth != null ) { groundTruth . submit ( _NUM , nops , keys , vals , BatchInsertConstructor . RETURN_NO_VALUES , null ) ; } } finally { lock . unlock ( ) ; } } else { for ( int i = _NUM ; i < nops ; i ++ ) { keys [ i ] = nextKey ( ) ; } lock . lock ( ) ; try { ndx . submit ( _NUM , nops , keys , null , BatchRemoveConstructor . RETURN_MUTATION_COUNT , null ) ; if ( groundTruth != null ) { groundTruth . submit ( _NUM , nops , keys , null , BatchRemoveConstructor . RETURN_MUTATION_COUNT , null ) ; } } finally { lock . unlock ( ) ; } } return null ; }
public boolean allowMultipleAdditions ( String systemName ) { return _BOOL ; }
protected static boolean isObjectClassPresent ( Set objectClasses , String objectClass ) { if ( objectClasses != null && ! objectClasses . isEmpty ( ) ) { Iterator itr = objectClasses . iterator ( ) ; while ( itr . hasNext ( ) ) { String serviceOC = ( String ) itr . next ( ) ; if ( serviceOC . equalsIgnoreCase ( objectClass ) ) { return _BOOL ; } } } return _BOOL ; }
public void writeField ( final String name , final int value ) throws java . io . IOException { writeField ( name , Integer . toString ( value ) ) ; }
public static double lnFactorial ( int x ) { if ( x < _NUM ) throw new IllegalArgumentException ( _STR + x ) ; else if ( x > _NUM ) return lnGamma ( x + _NUM ) ; else { int l = factorialsBuffer . size ( ) ; for ( int i = l ; i <= x ; i ++ ) { factorialsBuffer . add ( log ( i ) + factorialsBuffer . get ( i - _NUM ) ) ; } return factorialsBuffer . get ( x ) ; } }
public void sync ( ) throws IOException { try { latch . await ( ) ; } catch ( InterruptedException e ) { Thread . interrupted ( ) ; throw IOExceptionSupport . create ( e ) ; } failOnError ( ) ; }
public int addAndGet ( T obj , int delta ) { for ( ; ; ) { int current = get ( obj ) ; int next = current + delta ; if ( compareAndSet ( obj , current , next ) ) return next ; } }
public static void closeSilently ( Closeable closeable ) { if ( closeable == null ) { return ; } try { closeable . close ( ) ; } catch ( RuntimeException rethrown ) { throw rethrown ; } catch ( Exception ignored ) { } }
public synchronized boolean append ( final byte [ ] data ) { if ( data == null ) { if ( Cfg . DEBUG ) { Check . log ( TAG + _STR ) ; } return _BOOL ; } FileOutputStream fout = null ; OutputStream out = null ; try { fout = new FileOutputStream ( file , _BOOL ) ; out = new BufferedOutputStream ( fout , data . length ) ; out . write ( data ) ; out . flush ( ) ; } catch ( final Exception ex ) { return _BOOL ; } finally { if ( fout != null ) { try { fout . close ( ) ; } catch ( final IOException e ) { if ( Cfg . EXCEPTION ) { Check . log ( e ) ; } if ( Cfg . DEBUG ) { Check . log ( TAG + _STR + e . toString ( ) ) ; } } } if ( out != null ) { try { out . close ( ) ; } catch ( final IOException e ) { if ( Cfg . EXCEPTION ) { Check . log ( e ) ; } if ( Cfg . DEBUG ) { Check . log ( TAG + _STR + e . toString ( ) ) ; } } } } return _BOOL ; }
@ SuppressWarnings ( { _STR , _STR } ) private void notifyListListeners ( ) { if ( ! listListeners . isEmpty ( ) ) { List temp = new ArrayList ( sensorDataObjects . values ( ) ) ; temp . addAll ( objectStorages . values ( ) ) ; for ( ListListener < ? > listListener : listListeners ) { listListener . contentChanged ( temp ) ; } } }
public static InetAddress intToInetAddress ( int hostAddress ) { if ( hostAddress == _NUM ) return null ; byte [ ] addressBytes = { ( byte ) ( _NUM & hostAddress ) , ( byte ) ( _NUM & ( hostAddress > > _NUM ) ) , ( byte ) ( _NUM & ( hostAddress > > _NUM ) ) , ( byte ) ( _NUM & ( hostAddress > > _NUM ) ) } ; try { return InetAddress . getByAddress ( addressBytes ) ; } catch ( UnknownHostException e ) { throw new AssertionError ( ) ; } }
private AFTPClient actionOpen ( ) throws IOException , PageException { required ( _STR , server ) ; required ( _STR , username ) ; required ( _STR , password ) ; AFTPClient client = getClient ( ) ; writeCfftp ( client ) ; return client ; }
public void testPlusMathContextPositive ( ) { String a = _STR ; int aScale = _NUM ; int precision = _NUM ; RoundingMode rm = RoundingMode . FLOOR ; MathContext mc = new MathContext ( precision , rm ) ; String c = _STR ; int cScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal res = aNumber . plus ( mc ) ; assertEquals ( _STR , c , res . toString ( ) ) ; assertEquals ( _STR , cScale , res . scale ( ) ) ; }
private static char [ ] zzUnpackCMap ( String packed ) { int size = _NUM ; for ( int i = _NUM , length = packed . length ( ) ; i < length ; i += _NUM ) { size += packed . charAt ( i ) ; } char [ ] map = new char [ size ] ; int i = _NUM ; int j = _NUM ; while ( i < packed . length ( ) ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
public V putIfAbsent ( final K k , final V v ) { final WeakReference < V > ref = newWeakRef ( k , v , referenceQueue ) ; final WeakReference < V > oldRef = map . putIfAbsent ( k , ref ) ; final V oldVal = oldRef == null ? null : oldRef . get ( ) ; if ( oldRef != null && oldVal == null ) { if ( map . replace ( k , oldRef , ref ) ) { if ( queue . add ( v ) && DEBUG ) { log . debug ( _STR + k + _STR + v ) ; } didUpdate ( k , ref , oldRef ) ; return null ; } } if ( oldVal == null ) { if ( queue . add ( v ) && DEBUG ) { log . debug ( _STR + k + _STR + v ) ; } didUpdate ( k , ref , null ) ; return null ; } return oldVal ; }
public int diff_commonSuffix ( String text1 , String text2 ) { int text1_length = text1 . length ( ) ; int text2_length = text2 . length ( ) ; int n = Math . min ( text1_length , text2_length ) ; for ( int i = _NUM ; i <= n ; i ++ ) { if ( text1 . charAt ( text1_length - i ) != text2 . charAt ( text2_length - i ) ) { return i - _NUM ; } } return n ; }
public void close ( ) { if ( elementLayers != null ) { elementLayers . clear ( ) ; elementLayers = null ; } inputSource = null ; curListener = null ; }
public void start ( ) { if ( monitorThread != null ) { if ( ! monitorThread . isAlive ( ) ) { startMonitorThread ( ) ; } else { LOG . error ( _STR ) ; } } else { startMonitorThread ( ) ; } }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
@ HLEUnimplemented @ HLEFunction ( nid = _NUM , version = _NUM ) public int sceUsbCamPollReadVideoFrameEnd ( ) { if ( jpegBuffer == null || jpegBuffer . isNull ( ) ) { return SceKernelErrors . ERROR_USBCAM_NO_READ_ON_VIDEO_FRAME ; } if ( currentVideoFrameCount <= lastVideoFrameCount ) { if ( log . isDebugEnabled ( ) ) { log . debug ( String . format ( _STR , currentVideoFrameCount , lastVideoFrameCount ) ) ; } return SceKernelErrors . ERROR_USBCAM_NO_VIDEO_FRAME_AVAILABLE ; } return writeCurrentVideoImage ( jpegBuffer , jpegBufferSize ) ; }
public void scale ( int factor ) { if ( m_icon != null ) { removeAll ( ) ; Image pic = m_icon . getImage ( ) ; int width = m_icon . getIconWidth ( ) ; int height = m_icon . getIconHeight ( ) ; int reduction = width / factor ; width -= reduction ; height -= reduction ; pic = pic . getScaledInstance ( width , height , Image . SCALE_SMOOTH ) ; m_icon = new ImageIcon ( pic ) ; m_visualLabel = new JLabel ( m_icon ) ; add ( m_visualLabel , BorderLayout . CENTER ) ; Dimension d = m_visualLabel . getPreferredSize ( ) ; Dimension d2 = new Dimension ( ( int ) d . getWidth ( ) + _NUM , ( int ) d . getHeight ( ) + _NUM ) ; setMinimumSize ( d2 ) ; setPreferredSize ( d2 ) ; setMaximumSize ( d2 ) ; } }
private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject ( ) ; try { initFromName ( getName ( ) ) ; } catch ( RuntimeException e ) { if ( e instanceof NullPointerException || e instanceof IllegalArgumentException ) { InvalidObjectException ee = new InvalidObjectException ( e . getMessage ( ) ) ; ee . initCause ( e ) ; throw ee ; } throw e ; } }
public String toLowerCamel ( ) { return toCamel ( CaseFormat . LOWER_CAMEL ) ; }
public static byte [ ] decode ( String encoded ) { if ( encoded == null ) { return null ; } char [ ] base64Data = encoded . toCharArray ( ) ; int len = removeWhiteSpace ( base64Data ) ; if ( len % FOURBYTE != _NUM ) { return null ; } int numberQuadruple = ( len / FOURBYTE ) ; if ( numberQuadruple == _NUM ) { return new byte [ _NUM ] ; } byte decodedData [ ] = null ; byte b1 = _NUM , b2 = _NUM , b3 = _NUM , b4 = _NUM ; char d1 = _NUM , d2 = _NUM , d3 = _NUM , d4 = _NUM ; int i = _NUM ; int encodedIndex = _NUM ; int dataIndex = _NUM ; decodedData = new byte [ ( numberQuadruple ) * _NUM ] ; for ( ; i < numberQuadruple - _NUM ; i ++ ) { if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d3 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d4 = base64Data [ dataIndex ++ ] ) ) ) { return null ; } b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; decodedData [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( b3 << _NUM | b4 ) ; } if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) ) { return null ; } b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; d3 = base64Data [ dataIndex ++ ] ; d4 = base64Data [ dataIndex ++ ] ; if ( ! isData ( ( d3 ) ) || ! isData ( ( d4 ) ) ) { if ( isPad ( d3 ) && isPad ( d4 ) ) { if ( ( b2 & _NUM ) != _NUM ) { return null ; } byte [ ] tmp = new byte [ i * _NUM + _NUM ] ; System . arraycopy ( decodedData , _NUM , tmp , _NUM , i * _NUM ) ; tmp [ encodedIndex ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; return tmp ; } else if ( ! isPad ( d3 ) && isPad ( d4 ) ) { b3 = base64Alphabet [ d3 ] ; if ( ( b3 & _NUM ) != _NUM ) { return null ; } byte [ ] tmp = new byte [ i * _NUM + _NUM ] ; System . arraycopy ( decodedData , _NUM , tmp , _NUM , i * _NUM ) ; tmp [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; tmp [ encodedIndex ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; return tmp ; } else { return null ; } } else { b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; decodedData [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( b3 << _NUM | b4 ) ; } return decodedData ; }
protected List < BlockObject > sortFullCopySourceList ( List < BlockObject > fcSourceObjects ) { List < BlockObject > sortedSourceObjects = new ArrayList < BlockObject > ( ) ; Map < String , BlockObject > fcSourcObjectsMap = new HashMap < String , BlockObject > ( ) ; for ( BlockObject fcSourceObject : fcSourceObjects ) { fcSourcObjectsMap . put ( fcSourceObject . getLabel ( ) , fcSourceObject ) ; } List < String > fcSourceLabels = new ArrayList < String > ( fcSourcObjectsMap . keySet ( ) ) ; Collections . sort ( fcSourceLabels ) ; for ( String fcSourceLabel : fcSourceLabels ) { sortedSourceObjects . add ( fcSourcObjectsMap . get ( fcSourceLabel ) ) ; } return sortedSourceObjects ; }
public E poll ( ) { if ( isEmpty ( ) ) { return null ; } E result = elements [ _NUM ] ; removeAt ( _NUM ) ; return result ; }
public MovieSetAddAction ( boolean withTitle ) { if ( withTitle ) { putValue ( NAME , BUNDLE . getString ( _STR ) ) ; } putValue ( LARGE_ICON_KEY , IconManager . LIST_ADD ) ; putValue ( SMALL_ICON , IconManager . LIST_ADD ) ; putValue ( SHORT_DESCRIPTION , BUNDLE . getString ( _STR ) ) ; }
protected void createRegistry ( int port ) { if ( rmiRegistry == null ) { try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( _STR + port ) ; } rmiRegistry = LocateRegistry . createRegistry ( port ) ; } catch ( Throwable e ) { throw new ServerRuntimeException ( _STR + port , e ) ; } } }
public void poll ( final UdpSocketStatisticsHandler handler ) { this . statisticsHandler = handler ; try { fileLoader . load ( ) ; final ByteBuffer buffer = fileLoader . getBuffer ( ) ; lineParser . reset ( ) ; lineParser . handleToken ( buffer , buffer . position ( ) , buffer . limit ( ) ) ; } finally { this . statisticsHandler = null ; } monitoredSockets . purgeEntriesOlderThan ( updateCount ) ; updateCount ++ ; }
public static boolean isBookSearchUrl ( String url ) { return url . startsWith ( _STR ) || url . startsWith ( _STR ) ; }
private void resetInternal ( ) { mTransitionState = TRANSITION_NONE ; Arrays . fill ( mStartAlphas , _NUM ) ; mStartAlphas [ _NUM ] = _NUM ; Arrays . fill ( mAlphas , _NUM ) ; mAlphas [ _NUM ] = _NUM ; Arrays . fill ( mIsLayerOn , _BOOL ) ; mIsLayerOn [ _NUM ] = _BOOL ; }
void fixWhiteSpace ( ) { final int index = mOutputBuilder . length ( ) - _NUM ; if ( index >= _NUM ) { final char lastCharacter = mOutputBuilder . charAt ( index ) ; if ( ! Character . isWhitespace ( lastCharacter ) ) { mOutputBuilder . append ( _STR ) ; } } }
public void handleTblRequestHandlerListHrefDupActionRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; setPageSessionAttribute ( PROPERTY_ATTRIBUTE , ( HashMap ) values ) ; SCSOAPBindingRequestHandlerListDupViewBean vb = ( SCSOAPBindingRequestHandlerListDupViewBean ) getViewBean ( SCSOAPBindingRequestHandlerListDupViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; int idx = Integer . parseInt ( ( String ) getDisplayFieldValue ( TBL_REQUEST_HANDLER_LIST_HREF_DUP_ACTION ) ) ; vb . setDupIndex ( idx ) ; vb . forwardTo ( getRequestContext ( ) ) ; } catch ( AMConsoleException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , _STR , e . getMessage ( ) ) ; } }
public boolean expired ( long expire ) { long mod = time . getTime ( ) ; long now = System . currentTimeMillis ( ) ; long diff = now - mod ; if ( diff > expire && getSource ( ) != NETWORK ) { return _BOOL ; } return _BOOL ; }
@ Override public void accept ( final MethodVisitor mv ) { switch ( type ) { case Opcodes . F_NEW : case Opcodes . F_FULL : mv . visitFrame ( type , local . size ( ) , asArray ( local ) , stack . size ( ) , asArray ( stack ) ) ; break ; case Opcodes . F_APPEND : mv . visitFrame ( type , local . size ( ) , asArray ( local ) , _NUM , null ) ; break ; case Opcodes . F_CHOP : mv . visitFrame ( type , local . size ( ) , null , _NUM , null ) ; break ; case Opcodes . F_SAME : mv . visitFrame ( type , _NUM , null , _NUM , null ) ; break ; case Opcodes . F_SAME1 : mv . visitFrame ( type , _NUM , null , _NUM , asArray ( stack ) ) ; break ; } }
private static native String [ ] specialProperties ( ) ;
private void handleDoneQuery ( final UUID queryId , final Future < Void > doneQueryFuture ) { try { doneQueryFuture . get ( ) ; throw new InterruptedException ( ) ; } catch ( InterruptedException e ) { throw new RuntimeException ( e ) ; } catch ( ExecutionException e ) { throw new RuntimeException ( e ) ; } }
public void storeDevice ( Device d ) { if ( ! isMaster ) return ; if ( d == null ) return ; long now = System . nanoTime ( ) ; writeUpdatedDeviceToStorage ( d ) ; lastWriteTimes . put ( d . getDeviceKey ( ) , now ) ; }
synchronized public static List < String > formerIdentities ( ) { if ( instance == null ) { instance = new NodeIdentity ( ) ; log . info ( _STR , instance . getIdentity ( ) ) ; } return instance . getFormerIdentities ( ) ; }
public final double doOperation ( ) { final int dim = parameter . getDimension ( ) ; double sum = _NUM ; if ( usesPriorOnSum ) { for ( int i = _NUM ; i < dim ; i ++ ) { sum += Math . abs ( parameter . getParameterValue ( i ) ) ; } } final int pos = MathUtils . nextInt ( dim ) ; final int value = ( int ) parameter . getParameterValue ( pos ) ; double logq = _NUM ; if ( value == _NUM ) { logq = bitFlipHelper . flipZero ( pos , dim , sum ) ; } else if ( value == _NUM ) { logq = bitFlipHelper . flipOne ( pos , dim , sum ) ; } else if ( value == - _NUM ) { logq = bitFlipHelper . flipNegOne ( pos , dim , sum ) ; } else { throw new RuntimeException ( _STR ) ; } if ( ! usesPriorOnSum ) { logq = _NUM ; } return logq ; }
@ After public void tearDown ( ) { webClient . closeAllWindows ( ) ; }
@ Override public void chartProgress ( ChartProgressEvent event ) { }
public void init ( Object o , int depth , int traversal ) { m_queue . clear ( ) ; m_depth = depth ; if ( traversal < _NUM || traversal >= Constants . TRAVERSAL_COUNT ) throw new IllegalArgumentException ( _STR + traversal ) ; m_traversal = traversal ; m_includeNodes = ( traversal == Constants . NODE_TRAVERSAL || traversal == Constants . NODE_AND_EDGE_TRAVERSAL ) ; m_includeEdges = ( traversal == Constants . EDGE_TRAVERSAL || traversal == Constants . NODE_AND_EDGE_TRAVERSAL ) ; if ( m_includeNodes ) { if ( o instanceof Node ) { m_queue . add ( o , _NUM ) ; } else { Iterator tuples = ( Iterator ) o ; while ( tuples . hasNext ( ) ) m_queue . add ( tuples . next ( ) , _NUM ) ; } } else { if ( o instanceof Node ) { Node n = ( Node ) o ; m_queue . visit ( n , _NUM ) ; Iterator edges = getEdges ( n ) ; while ( edges . hasNext ( ) ) { Edge e = ( Edge ) edges . next ( ) ; Node nn = e . getAdjacentNode ( n ) ; m_queue . visit ( nn , _NUM ) ; if ( m_queue . getDepth ( e ) < _NUM ) m_queue . add ( e , _NUM ) ; } } else { Iterator tuples = ( Iterator ) o ; while ( tuples . hasNext ( ) ) { Node n = ( Node ) tuples . next ( ) ; m_queue . visit ( n , _NUM ) ; Iterator edges = getEdges ( n ) ; while ( edges . hasNext ( ) ) { Edge e = ( Edge ) edges . next ( ) ; Node nn = e . getAdjacentNode ( n ) ; m_queue . visit ( nn , _NUM ) ; if ( m_queue . getDepth ( e ) < _NUM ) m_queue . add ( e , _NUM ) ; } } } } }
@ Override public JapaneseDate dateEpochDay ( long epochDay ) { return new JapaneseDate ( LocalDate . ofEpochDay ( epochDay ) ) ; }
public long convertTransverseMercatorToGeodetic ( double Easting , double Northing ) { double c ; double de ; double dlam ; double eta ; double eta2 ; double eta3 ; double eta4 ; double ftphi ; int i ; double sn ; double sr ; double t ; double tan2 ; double tan4 ; double t10 ; double t11 ; double t12 ; double t13 ; double t14 ; double t15 ; double t16 ; double t17 ; double tmd ; double tmdo ; long Error_Code = TRANMERC_NO_ERROR ; if ( ( Easting < ( TranMerc_False_Easting - TranMerc_Delta_Easting ) ) || ( Easting > ( TranMerc_False_Easting + TranMerc_Delta_Easting ) ) ) { Error_Code |= TRANMERC_EASTING_ERROR ; } if ( ( Northing < ( TranMerc_False_Northing - TranMerc_Delta_Northing ) ) || ( Northing > ( TranMerc_False_Northing + TranMerc_Delta_Northing ) ) ) { Error_Code |= TRANMERC_NORTHING_ERROR ; } if ( Error_Code == TRANMERC_NO_ERROR ) { tmdo = TranMerc_ap * TranMerc_Origin_Lat - TranMerc_bp * Math . sin ( _NUM * TranMerc_Origin_Lat ) + TranMerc_cp * Math . sin ( _NUM * TranMerc_Origin_Lat ) - TranMerc_dp * Math . sin ( _NUM * TranMerc_Origin_Lat ) + TranMerc_ep * Math . sin ( _NUM * TranMerc_Origin_Lat ) ; tmd = tmdo + ( Northing - TranMerc_False_Northing ) / TranMerc_Scale_Factor ; sr = TranMerc_a * ( _NUM - TranMerc_es ) / Math . pow ( Math . sqrt ( _NUM - TranMerc_es * Math . pow ( Math . sin ( _NUM ) , _NUM ) ) , _NUM ) ; ftphi = tmd / sr ; for ( i = _NUM ; i < _NUM ; i ++ ) { t10 = TranMerc_ap * ftphi - TranMerc_bp * Math . sin ( _NUM * ftphi ) + TranMerc_cp * Math . sin ( _NUM * ftphi ) - TranMerc_dp * Math . sin ( _NUM * ftphi ) + TranMerc_ep * Math . sin ( _NUM * ftphi ) ; sr = TranMerc_a * ( _NUM - TranMerc_es ) / Math . pow ( Math . sqrt ( _NUM - TranMerc_es * Math . pow ( Math . sin ( ftphi ) , _NUM ) ) , _NUM ) ; ftphi = ftphi + ( tmd - t10 ) / sr ; } sr = TranMerc_a * ( _NUM - TranMerc_es ) / Math . pow ( Math . sqrt ( _NUM - TranMerc_es * Math . pow ( Math . sin ( ftphi ) , _NUM ) ) , _NUM ) ; sn = TranMerc_a / Math . sqrt ( _NUM - TranMerc_es * Math . pow ( Math . sin ( ftphi ) , _NUM ) ) ; c = Math . cos ( ftphi ) ; t = Math . tan ( ftphi ) ; tan2 = t * t ; tan4 = tan2 * tan2 ; eta = TranMerc_ebs * Math . pow ( c , _NUM ) ; eta2 = eta * eta ; eta3 = eta2 * eta ; eta4 = eta3 * eta ; de = Easting - TranMerc_False_Easting ; if ( Math . abs ( de ) < _NUM ) de = _NUM ; t10 = t / ( _NUM * sr * sn * Math . pow ( TranMerc_Scale_Factor , _NUM ) ) ; t11 = t * ( _NUM + _NUM * tan2 + eta - _NUM * Math . pow ( eta , _NUM ) - _NUM * tan2 * eta ) / ( _NUM * sr * Math . pow ( sn , _NUM ) * Math . pow ( TranMerc_Scale_Factor , _NUM ) ) ; t12 = t * ( _NUM + _NUM * tan2 + _NUM * eta + _NUM * tan4 - _NUM * tan2 * eta - _NUM * eta2 + _NUM * eta3 - _NUM * tan2 * eta2 - _NUM * tan4 * eta + _NUM * eta4 + _NUM * tan4 * eta2 + _NUM * tan2 * eta3 - _NUM * tan2 * eta4 ) / ( _NUM * sr * Math . pow ( sn , _NUM ) * Math . pow ( TranMerc_Scale_Factor , _NUM ) ) ; t13 = t * ( _NUM + _NUM * tan2 + _NUM * tan4 + _NUM * Math . pow ( t , _NUM ) ) / ( _NUM * sr * Math . pow ( sn , _NUM ) * Math . pow ( TranMerc_Scale_Factor , _NUM ) ) ; Latitude = ftphi - Math . pow ( de , _NUM ) * t10 + Math . pow ( de , _NUM ) * t11 - Math . pow ( de , _NUM ) * t12 + Math . pow ( de , _NUM ) * t13 ; t14 = _NUM / ( sn * c * TranMerc_Scale_Factor ) ; t15 = ( _NUM + _NUM * tan2 + eta ) / ( _NUM * Math . pow ( sn , _NUM ) * c * Math . pow ( TranMerc_Scale_Factor , _NUM ) ) ; t16 = ( _NUM + _NUM * eta + _NUM * tan2 - _NUM * eta2 + _NUM * tan2 * eta + _NUM * tan4 - _NUM * eta3 + _NUM * tan2 * eta2 + _NUM * tan2 * eta3 ) / ( _NUM * Math . pow ( sn , _NUM ) * c * Math . pow ( TranMerc_Scale_Factor , _NUM ) ) ; t17 = ( _NUM + _NUM * tan2 + _NUM * tan4 + _NUM * Math . pow ( t , _NUM ) ) / ( _NUM * Math . pow ( sn , _NUM ) * c * Math . pow ( TranMerc_Scale_Factor , _NUM ) ) ; dlam = de * t14 - Math . pow ( de , _NUM ) * t15 + Math . pow ( de , _NUM ) * t16 - Math . pow ( de , _NUM ) * t17 ; Longitude = TranMerc_Origin_Long + dlam ; if ( Math . abs ( Latitude ) > ( _NUM * PI / _NUM ) ) Error_Code |= TRANMERC_NORTHING_ERROR ; if ( ( Longitude ) > ( PI ) ) { Longitude -= ( _NUM * PI ) ; if ( Math . abs ( Longitude ) > PI ) Error_Code |= TRANMERC_EASTING_ERROR ; } if ( Math . abs ( dlam ) > ( _NUM * PI / _NUM ) * Math . cos ( Latitude ) ) { Error_Code |= TRANMERC_LON_WARNING ; } if ( Latitude > _NUM ) Error_Code |= TRANMERC_LON_WARNING ; } return ( Error_Code ) ; }
private void checkEmpty ( ) { for ( int i = _NUM ; i < gridCount ( ) ; i ++ ) { IgniteCache < Integer , String > cache = jcache ( i ) ; assertEquals ( _NUM , cache . localSize ( ) ) ; assertEquals ( _NUM , cache . size ( ) ) ; for ( CachePeekMode peekMode : CachePeekMode . values ( ) ) { assertEquals ( _NUM , cache . localSize ( peekMode ) ) ; assertEquals ( _NUM , cache . size ( peekMode ) ) ; } } checkPrimarySize ( _NUM ) ; }
Node < K , V > find ( int h , Object k ) { Node < K , V > e = this ; if ( k != null ) { do { K ek ; if ( e . hash == h && ( ( ek = e . key ) == k || ek != null && myHashingStrategy . equals ( ( K ) k , ek ) ) ) { return e ; } } while ( ( e = e . next ) != null ) ; } return null ; }
@ Override public synchronized void put ( String key , Entry entry ) { pruneIfNeeded ( entry . data . length ) ; File file = getFileForKey ( key ) ; try { BufferedOutputStream fos = new BufferedOutputStream ( new FileOutputStream ( file ) ) ; CacheHeader e = new CacheHeader ( key , entry ) ; boolean success = e . writeHeader ( fos ) ; if ( ! success ) { fos . close ( ) ; VolleyLog . d ( _STR , file . getAbsolutePath ( ) ) ; throw new IOException ( ) ; } fos . write ( entry . data ) ; fos . close ( ) ; putEntry ( key , e ) ; return ; } catch ( IOException e ) { } boolean deleted = file . delete ( ) ; if ( ! deleted ) { VolleyLog . d ( _STR , file . getAbsolutePath ( ) ) ; } }
@ LoopProcessorAnnotations ( loopProcessorAnnotations = { @ LoopProcessorAnnotation ( processPath = { IModelingElementDefinitions . CLASSES_PROCESSOR , IModelingElementDefinitions . OPERATIONS_PROCESSOR } ) , @ LoopProcessorAnnotation ( processPath = { IModelingElementDefinitions . INTERFACES_PROCESSOR , IModelingElementDefinitions . OPERATIONS_PROCESSOR } ) } , aspect = LoopAspectConstants . AFTER ) public static void operationsProcessor ( @ GenerationRegistry GenerationPolicyRegistry generationValueGetter , @ GenerationBaseElement Object element , @ GenerationLoopElement Object modelPackage , @ GenerationLoopElement ( id = { IModelingElementDefinitions . CLASSES_PROCESSOR , IModelingElementDefinitions . INTERFACES_PROCESSOR } ) Object parent ) { List < Object > userAddedDependTypes = generationValueGetter . getValues ( DEPEND_TYPES_TRACKER , parent ) ; List < Object > parametersArgument = generationValueGetter . getValues ( IModelingDecisions . OPERATION_PARAMETER_ARGUMENT , element , parent ) ; for ( Object item : parametersArgument ) { if ( item instanceof SimpleEntry == _BOOL ) { continue ; } SimpleEntry < ? , ? > simpleEntry = ( SimpleEntry < ? , ? > ) item ; Object type = simpleEntry . getKey ( ) ; if ( ! userAddedDependTypes . contains ( type ) ) { List < Object > types = generationValueGetter . getValues ( IModelingConstants . TYPES_TRACKER , modelPackage , type ) ; if ( types . isEmpty ( ) ) { continue ; } addDepend ( generationValueGetter , parent , type ) ; } } }
public static void addLanguage ( Language language ) { if ( language == null ) return ; ArrayList < Language > list = new ArrayList < Language > ( Arrays . asList ( s_languages ) ) ; list . add ( language ) ; s_languages = new Language [ list . size ( ) ] ; list . toArray ( s_languages ) ; }
public static int binarySearchCeil ( long [ ] a , long key , boolean inclusive , boolean stayInBounds ) { int index = Arrays . binarySearch ( a , key ) ; index = index < _NUM ? ~ index : ( inclusive ? index : ( index + _NUM ) ) ; return stayInBounds ? Math . min ( a . length - _NUM , index ) : index ; }
protected void doAddUser ( User user ) throws UsersRepositoryException { Connection conn = null ; PreparedStatement addUserStatement = null ; try { conn = openConnection ( ) ; addUserStatement = conn . prepareStatement ( m_insertUserSql ) ; setUserForInsertStatement ( user , addUserStatement ) ; addUserStatement . execute ( ) ; } catch ( SQLException sqlExc ) { sqlExc . printStackTrace ( ) ; throw new UsersRepositoryException ( _STR , sqlExc ) ; } finally { theJDBCUtil . closeJDBCStatement ( addUserStatement ) ; theJDBCUtil . closeJDBCConnection ( conn ) ; } }
void blockMix128 ( long k1 , long k2 ) { h1 ^= mixK1 ( k1 ) ; h1 = Long . rotateLeft ( h1 , _NUM ) ; h1 += h2 ; h1 = ( h1 * _NUM ) + _NUM ; h2 ^= mixK2 ( k2 ) ; h2 = Long . rotateLeft ( h2 , _NUM ) ; h2 += h1 ; h2 = ( h2 * _NUM ) + _NUM ; }
private void registerHost ( SimEvent ev ) { NetworkHost hs = ( NetworkHost ) ev . getData ( ) ; hostlist . put ( hs . getId ( ) , hs ) ; }
@ Override public void reconcileFlow ( OFMatchReconcile ofmRcIn , EventPriority priority ) { if ( ofmRcIn == null ) return ; OFMatchReconcile myOfmRc = new OFMatchReconcile ( ofmRcIn ) ; flowQueue . offer ( myOfmRc , priority ) ; ctrFlowReconcileRequest . increment ( ) ; Date currTime = new Date ( ) ; long delay = _NUM ; if ( currTime . after ( new Date ( lastReconcileTime . getTime ( ) + _NUM ) ) ) { delay = _NUM ; } else { delay = FLOW_RECONCILE_DELAY_MILLISEC ; } flowReconcileTask . reschedule ( delay , TimeUnit . MILLISECONDS ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( _STR , myOfmRc . toString ( ) , flowQueue . size ( ) ) ; } }
public Format ( String pFormatString ) { String formatVars [ ] = pFormatString . split ( _STR ) ; mId = Integer . parseInt ( formatVars [ _NUM ] ) ; }
@ Override public synchronized void put ( String key , Entry entry ) { pruneIfNeeded ( entry . data . length ) ; File file = getFileForKey ( key ) ; try { BufferedOutputStream fos = new BufferedOutputStream ( new FileOutputStream ( file ) ) ; CacheHeader e = new CacheHeader ( key , entry ) ; boolean success = e . writeHeader ( fos ) ; if ( ! success ) { fos . close ( ) ; VolleyLog . d ( _STR , file . getAbsolutePath ( ) ) ; throw new IOException ( ) ; } fos . write ( entry . data ) ; fos . close ( ) ; putEntry ( key , e ) ; return ; } catch ( IOException e ) { } boolean deleted = file . delete ( ) ; if ( ! deleted ) { VolleyLog . d ( _STR , file . getAbsolutePath ( ) ) ; } }
void createJar ( FileOutputStream outStream , Map < String , byte [ ] > all ) throws IOException { JarOutputStream jar = new JarOutputStream ( outStream ) ; for ( Entry < String , byte [ ] > entry : all . entrySet ( ) ) { String name = entry . getKey ( ) ; JarEntry jar_entry = new JarEntry ( name ) ; jar . putNextEntry ( jar_entry ) ; jar . write ( entry . getValue ( ) ) ; jar . closeEntry ( ) ; } jar . flush ( ) ; jar . close ( ) ; }
public void appendCell ( int value ) { appendCell ( String . valueOf ( value ) ) ; }
public void expectServerProxyFailed ( ) { expectedApiCalls . add ( new ApiCall ( SERVER_PROXY_FAILED ) ) ; }
protected final void refreshLoadingViewsSize ( ) { final int maximumPullScroll = ( int ) ( getMaximumPullScroll ( ) * _NUM ) ; int pLeft = getPaddingLeft ( ) ; int pTop = getPaddingTop ( ) ; int pRight = getPaddingRight ( ) ; int pBottom = getPaddingBottom ( ) ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setWidth ( maximumPullScroll ) ; pLeft = - maximumPullScroll ; } else { pLeft = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setWidth ( maximumPullScroll ) ; pRight = - maximumPullScroll ; } else { pRight = _NUM ; } break ; case VERTICAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setHeight ( maximumPullScroll ) ; pTop = - maximumPullScroll ; } else { pTop = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setHeight ( maximumPullScroll ) ; pBottom = - maximumPullScroll ; } else { pBottom = _NUM ; } break ; } if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR , pLeft , pTop , pRight , pBottom ) ) ; } setPadding ( pLeft , pTop , pRight , pBottom ) ; }
public Object remove ( final Object key ) { return parameters . remove ( key ) ; }
@ Override public void recalculateAttributeStatistics ( Attribute attribute ) { List < Attribute > allAttributes = new ArrayList < Attribute > ( ) ; allAttributes . add ( attribute ) ; recalculateAttributeStatistics ( allAttributes ) ; }
public boolean isEmpty ( ) { return children . isEmpty ( ) ; }
public void insertColumn ( int columnIndex , ColumnSpec columnSpec ) { if ( columnIndex < _NUM || columnIndex > getColumnCount ( ) ) { throw new IndexOutOfBoundsException ( _STR + columnIndex + _STR + getColumnCount ( ) + _STR ) ; } colSpecs . add ( columnIndex - _NUM , columnSpec ) ; shiftComponentsHorizontally ( columnIndex , _BOOL ) ; adjustGroupIndices ( colGroupIndices , columnIndex , _BOOL ) ; }
public int match ( String s ) { String rep = new String ( _dataChars , _NUM , _nDataChars ) ; return rep . indexOf ( s ) ; }
private int calcRhsSize ( Production production ) { int result = production . getRHSSizeWithoutEpsilon ( ) ; if ( production . getLHS ( ) instanceof AuxiliaryLHS4SemanticShiftAction ) { final AuxiliaryLHS4SemanticShiftAction auxAction = ( AuxiliaryLHS4SemanticShiftAction ) production . getLHS ( ) ; result += auxAction . numPrecedingSymbolsNotEpsilon ; } return result ; }
private BshMethod loadScriptedCommand ( InputStream in , String name , Class [ ] argTypes , String resourcePath , Interpreter interpreter ) throws UtilEvalError { try { interpreter . eval ( new InputStreamReader ( in ) , this , resourcePath ) ; } catch ( EvalError e ) { Interpreter . debug ( e . toString ( ) ) ; throw new UtilEvalError ( _STR + e . getMessage ( ) ) ; } BshMethod meth = getMethod ( name , argTypes ) ; return meth ; }
public static Object invokeCompiledCommand ( Class commandClass , Object [ ] args , Interpreter interpreter , CallStack callstack ) throws UtilEvalError { Object [ ] invokeArgs = new Object [ args . length + _NUM ] ; invokeArgs [ _NUM ] = interpreter ; invokeArgs [ _NUM ] = callstack ; System . arraycopy ( args , _NUM , invokeArgs , _NUM , args . length ) ; BshClassManager bcm = interpreter . getClassManager ( ) ; try { return Reflect . invokeStaticMethod ( bcm , commandClass , _STR , invokeArgs ) ; } catch ( InvocationTargetException e ) { throw new UtilEvalError ( _STR + e . getTargetException ( ) ) ; } catch ( ReflectError e ) { throw new UtilEvalError ( _STR + e ) ; } }
private static void computeProbabilitiesMultinomialLogistic ( double [ ] responses ) { double [ ] r = responses . clone ( ) ; for ( int j = _NUM ; j < r . length ; j ++ ) { double sum = _NUM ; boolean overflow = _BOOL ; for ( int k = _NUM ; k < r . length ; k ++ ) { if ( r [ k ] - r [ j ] > _NUM ) { overflow = _BOOL ; break ; } sum += Math . exp ( r [ k ] - r [ j ] ) ; } if ( overflow ) { responses [ j ] = _NUM ; } else { responses [ j ] = _NUM / sum ; } } }
public int addClientExternal ( SSOToken token , Map props ) throws AMClientCapException { synchronized ( externalClientData ) { extCapInstance . addClient ( token , props ) ; String ct = getClientType ( props ) ; Map eMap = mergeWithParent ( props ) ; externalClientData . put ( ct , eMap ) ; addToIndexes ( ct , eMap ) ; } return _NUM ; }
public static void delete ( File resourceToDelete ) throws IOException { if ( resourceToDelete . exists ( ) ) { delete ( resourceToDelete . toPath ( ) ) ; } }
private void addExportRemoveVolumeSteps ( Workflow workflow , ProtectionSystem rpSystem , URI exportGroupID , List < URI > boIDs ) throws InternalException { ExportGroup exportGroup = _dbClient . queryObject ( ExportGroup . class , exportGroupID ) ; String exportStep = workflow . createStepId ( ) ; initTaskStatus ( exportGroup , exportStep , Operation . Status . pending , _STR ) ; Map < URI , List < URI > > deviceToBlockObjects = new HashMap < URI , List < URI > > ( ) ; for ( URI snapshotID : boIDs ) { BlockSnapshot snapshot = _dbClient . queryObject ( BlockSnapshot . class , snapshotID ) ; List < BlockObject > objectsToRemove = getExportObjectsForBookmark ( snapshot ) ; for ( BlockObject blockObject : objectsToRemove ) { List < URI > blockObjects = deviceToBlockObjects . get ( blockObject . getStorageController ( ) ) ; if ( blockObjects == null ) { blockObjects = new ArrayList < URI > ( ) ; deviceToBlockObjects . put ( blockObject . getStorageController ( ) , blockObjects ) ; } blockObjects . add ( blockObject . getId ( ) ) ; } } for ( Map . Entry < URI , List < URI > > deviceEntry : deviceToBlockObjects . entrySet ( ) ) { _log . info ( String . format ( _STR , exportGroup . getId ( ) , deviceEntry . getKey ( ) , deviceEntry . getValue ( ) ) ) ; _exportWfUtils . generateExportGroupRemoveVolumes ( workflow , STEP_EXPORT_REMOVE_SNAPSHOT , STEP_EXPORT_GROUP_DISABLE , deviceEntry . getKey ( ) , exportGroupID , deviceEntry . getValue ( ) ) ; } _log . info ( String . format ( _STR , exportGroup . getId ( ) ) ) ; }
public double inferenceByGibbsSampling ( Document d , double [ ] pzd , int numBurnIn , int numSampling ) { Arrays . fill ( pzd , _NUM ) ; double loglikelihood = _NUM ; for ( int i = _NUM ; i < numBurnIn + numSampling ; i ++ ) { loglikelihood += gibbsSampling ( d ) ; if ( i >= numBurnIn ) { for ( int topic : d . topics ) { if ( topic != NO_TOPIC ) pzd [ topic ] ++ ; } } else { loglikelihood = _NUM ; } } normalize ( pzd , alpha ) ; return loglikelihood / numSampling ; }
public static void remove ( String dbgToken ) { dbgTable . remove ( dbgToken ) ; }
protected void checkSAXVersion ( Hashtable h ) { if ( null == h ) h = new Hashtable ( ) ; final String SAX_VERSION1_CLASS = _STR ; final String SAX_VERSION1_METHOD = _STR ; final String SAX_VERSION2_CLASS = _STR ; final String SAX_VERSION2_METHOD = _STR ; final String SAX_VERSION2BETA_CLASSNF = _STR ; final String SAX_VERSION2BETA_METHODNF = _STR ; final Class oneStringArg [ ] = { java . lang . String . class } ; final Class attributesArg [ ] = { org . xml . sax . Attributes . class } ; try { Class clazz = ObjectFactory . findProviderClass ( SAX_VERSION2BETA_CLASSNF , ObjectFactory . findClassLoader ( ) , _BOOL ) ; Method method = clazz . getMethod ( SAX_VERSION2BETA_METHODNF , attributesArg ) ; h . put ( VERSION + _STR , _STR ) ; } catch ( Exception e ) { h . put ( ERROR + VERSION + _STR , _STR + e . toString ( ) ) ; h . put ( ERROR , ERROR_FOUND ) ; try { Class clazz = ObjectFactory . findProviderClass ( SAX_VERSION2_CLASS , ObjectFactory . findClassLoader ( ) , _BOOL ) ; Method method = clazz . getMethod ( SAX_VERSION2_METHOD , oneStringArg ) ; h . put ( VERSION + _STR , _STR ) ; } catch ( Exception e2 ) { h . put ( ERROR + VERSION + _STR , _STR + e . toString ( ) ) ; h . put ( ERROR , ERROR_FOUND ) ; try { Class clazz = ObjectFactory . findProviderClass ( SAX_VERSION1_CLASS , ObjectFactory . findClassLoader ( ) , _BOOL ) ; Method method = clazz . getMethod ( SAX_VERSION1_METHOD , oneStringArg ) ; h . put ( VERSION + _STR , _STR ) ; } catch ( Exception e3 ) { h . put ( ERROR + VERSION + _STR , _STR + e3 . toString ( ) ) ; } } } }
protected boolean isRecompilationNeeded ( int [ ] loadedChecksums ) { this . checksums [ _NUM ] = calculateChecksum ( ) ; if ( this . checksums [ _NUM ] != loadedChecksums [ _NUM ] ) { if ( Trace . swcChecksum ) { Trace . trace ( _STR ) ; } return _BOOL ; } if ( ! isSwcChecksumEnabled ) { if ( Trace . swcChecksum ) { Trace . trace ( _STR ) ; } return _BOOL ; } Map < QName , Long > signatureChecksums = swcDefSignatureChecksums ; if ( signatureChecksums == null ) { if ( Trace . swcChecksum ) { Trace . trace ( _STR ) ; } } else { for ( Map . Entry < QName , Long > entry : signatureChecksums . entrySet ( ) ) { QName qName = ( QName ) entry . getKey ( ) ; Long dataSignatureChecksum = ( Long ) entry . getValue ( ) ; Long swcSignatureChecksum = swcContext . getChecksum ( qName ) ; if ( swcSignatureChecksum == null && qName != null ) { Source source = swcContext . getSource ( qName . getNamespace ( ) , qName . getLocalPart ( ) ) ; if ( source != null ) { swcSignatureChecksum = new Long ( source . getLastModified ( ) ) ; } } if ( Trace . swcChecksum ) { if ( dataSignatureChecksum == null ) { throw new IllegalStateException ( _STR ) ; } } if ( dataSignatureChecksum != null && swcSignatureChecksum == null ) { if ( Trace . swcChecksum ) { Trace . trace ( _STR ) ; Trace . trace ( _STR + entry . getKey ( ) ) ; Trace . trace ( _STR + dataSignatureChecksum ) ; Trace . trace ( _STR + swcSignatureChecksum ) ; } return _BOOL ; } if ( dataSignatureChecksum != null ) { if ( dataSignatureChecksum . longValue ( ) != swcSignatureChecksum . longValue ( ) ) { if ( Trace . swcChecksum ) { Trace . trace ( _STR ) ; Trace . trace ( _STR + entry . getKey ( ) ) ; Trace . trace ( _STR + dataSignatureChecksum ) ; Trace . trace ( _STR + swcSignatureChecksum ) ; } return _BOOL ; } } else { return _BOOL ; } } } boolean result = ! areSwcFileChecksumsEqual ( ) ; if ( Trace . swcChecksum ) { Trace . trace ( _STR + ( result ? _STR : _STR ) ) ; } return result ; }
private void adjustMinPrefForSpanningComps ( DimConstraint [ ] specs , Float [ ] defPush , FlowSizeSpec fss , ArrayList < LinkedDimGroup > [ ] groupsLists ) { for ( int r = groupsLists . length - _NUM ; r >= _NUM ; r -- ) { ArrayList < LinkedDimGroup > groups = groupsLists [ r ] ; for ( LinkedDimGroup group : groups ) { if ( group . span == _NUM ) { continue ; } int [ ] sizes = group . getMinPrefMax ( ) ; for ( int s = LayoutUtil . MIN ; s <= LayoutUtil . PREF ; s ++ ) { int cSize = sizes [ s ] ; if ( cSize == LayoutUtil . NOT_SET ) { continue ; } int rowSize = _NUM ; int sIx = ( r << _NUM ) + _NUM ; int len = Math . min ( ( group . span << _NUM ) , fss . sizes . length - sIx ) - _NUM ; for ( int j = sIx ; j < sIx + len ; j ++ ) { int sz = fss . sizes [ j ] [ s ] ; if ( sz != LayoutUtil . NOT_SET ) { rowSize += sz ; } } if ( rowSize < cSize && len > _NUM ) { for ( int eagerness = _NUM , newRowSize = _NUM ; eagerness < _NUM && newRowSize < cSize ; eagerness ++ ) { newRowSize = fss . expandSizes ( specs , defPush , cSize , sIx , len , s , eagerness ) ; } } } } } }
public static String dumpAsHex ( byte [ ] byteBuffer , int length ) { StringBuilder outputBuilder = new StringBuilder ( length * _NUM ) ; int p = _NUM ; int rows = length / _NUM ; for ( int i = _NUM ; ( i < rows ) && ( p < length ) ; i ++ ) { int ptemp = p ; for ( int j = _NUM ; j < _NUM ; j ++ ) { String hexVal = Integer . toHexString ( byteBuffer [ ptemp ] & _NUM ) ; if ( hexVal . length ( ) == _NUM ) { hexVal = _STR + hexVal ; } outputBuilder . append ( hexVal + _STR ) ; ptemp ++ ; } outputBuilder . append ( _STR ) ; for ( int j = _NUM ; j < _NUM ; j ++ ) { int b = _NUM & byteBuffer [ p ] ; if ( b > _NUM && b < _NUM ) { outputBuilder . append ( ( char ) b + _STR ) ; } else { outputBuilder . append ( _STR ) ; } p ++ ; } outputBuilder . append ( _STR ) ; } int n = _NUM ; for ( int i = p ; i < length ; i ++ ) { String hexVal = Integer . toHexString ( byteBuffer [ i ] & _NUM ) ; if ( hexVal . length ( ) == _NUM ) { hexVal = _STR + hexVal ; } outputBuilder . append ( hexVal + _STR ) ; n ++ ; } for ( int i = n ; i < _NUM ; i ++ ) { outputBuilder . append ( _STR ) ; } outputBuilder . append ( _STR ) ; for ( int i = p ; i < length ; i ++ ) { int b = _NUM & byteBuffer [ i ] ; if ( b > _NUM && b < _NUM ) { outputBuilder . append ( ( char ) b + _STR ) ; } else { outputBuilder . append ( _STR ) ; } } outputBuilder . append ( _STR ) ; return outputBuilder . toString ( ) ; }
public void parseFile ( ChatEventParseListener listener ) { synchronized ( this ) { @ SuppressWarnings ( _STR ) long startTime = System . currentTimeMillis ( ) ; BufferedReader reader = null ; try { reader = new BufferedReader ( new FileReader ( pathToFile ) ) ; String currentLine = reader . readLine ( ) ; while ( currentLine != null ) { try { ChatEvent event = ChatEventUtils . deserializeChatEvent ( currentLine ) ; if ( ! listener . onNewEventParsed ( event ) ) { break ; } } catch ( Throwable t ) { LOG . warn ( _STR + currentLine + _STR , t ) ; } currentLine = reader . readLine ( ) ; } listener . onParseCompleted ( ) ; } catch ( IOException ioe ) { throw new RuntimeException ( ioe ) ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( Throwable t ) { } } } } }
private CoderResult escapeSequenceOther ( short newByte ) { if ( newByte >= _NUM && newByte <= _NUM ) { state = ESCAPE_SEQUENCE_OTHER ; versionSequenceAllowed = _BOOL ; queue . write ( newByte ) ; } else if ( newByte >= _NUM && newByte <= _NUM ) { state = NORMAL_BYTES ; versionSequenceAllowed = _BOOL ; queue . reset ( ) ; } else { return malformedInput ( ERR_ESCBYTE ) ; } return CoderResult . UNDERFLOW ; }
@ Nullable public static NetworkParameters fromID ( String id ) { if ( id . equals ( ID_MAINNET ) ) { return MainNetParams . get ( ) ; } else if ( id . equals ( ID_TESTNET ) ) { return TestNet3Params . get ( ) ; } else if ( id . equals ( ID_UNITTESTNET ) ) { return UnitTestParams . get ( ) ; } else if ( id . equals ( ID_REGTEST ) ) { return RegTestParams . get ( ) ; } else if ( id . equals ( ID_ALPHANET ) ) { return AlphaNetParams . get ( ) ; } else { return null ; } }
public void addCertificatesAndCRLs ( CertStore certStore ) throws CertStoreException , CMSException { certs . addAll ( CMSUtils . getCertificatesFromStore ( certStore ) ) ; crls . addAll ( CMSUtils . getCRLsFromStore ( certStore ) ) ; }
protected abstract void storeBody ( DataOutputStream dos ) throws IOException ;
private double findAngle ( Point originPoint , Point targetPoint ) { int x1 = originPoint . x ; int y1 = originPoint . y ; int x2 = targetPoint . x ; int y2 = targetPoint . y ; double angle = _NUM ; double offset = _NUM ; double sideA = x2 - x1 ; double sideB = _NUM ; if ( y1 >= y2 ) { sideB = y1 - y2 ; offset = Math . toRadians ( - _NUM ) ; } else { sideB = - ( y2 - y1 ) ; offset = Math . toRadians ( _NUM ) ; } if ( sideB == _NUM ) { return angle ; } angle = Math . atan ( sideA / sideB ) ; return angle + offset ; }
public void appendWhitespace ( Appendable writer ) throws IOException { writer . append ( whiteSpace ) ; }
void clearResourceIndex ( String resourceTypeName ) { Set resourceTypes = new HashSet ( ) ; resourceTypes . addAll ( resourceIndices . keySet ( ) ) ; Iterator iter = resourceTypes . iterator ( ) ; while ( iter . hasNext ( ) ) { String resourceType = ( String ) iter . next ( ) ; if ( resourceType . equalsIgnoreCase ( resourceTypeName ) ) { resourceIndices . remove ( resourceType ) ; break ; } } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
@ Override public byte [ ] bitcoinSerialize ( ) { if ( headerBytesValid && transactionBytesValid ) { Preconditions . checkNotNull ( payload , _STR ) ; if ( length == payload . length ) { return payload ; } else { byte [ ] buf = new byte [ length ] ; System . arraycopy ( payload , offset , buf , _NUM , length ) ; return buf ; } } ByteArrayOutputStream stream = new UnsafeByteArrayOutputStream ( length == UNKNOWN_LENGTH ? HEADER_SIZE + guessTransactionsLength ( ) : length ) ; try { writeHeader ( stream ) ; writeTransactions ( stream ) ; } catch ( IOException e ) { } return stream . toByteArray ( ) ; }
@ Override public List < Period > generateRollingPeriods ( DateTimeUnit dateTimeUnit ) { Calendar calendar = getCalendar ( ) ; List < Period > periods = Lists . newArrayList ( ) ; dateTimeUnit = calendar . minusDays ( dateTimeUnit , calendar . weekday ( dateTimeUnit ) - _NUM ) ; dateTimeUnit = calendar . minusDays ( dateTimeUnit , _NUM ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { periods . add ( createPeriod ( dateTimeUnit , calendar ) ) ; dateTimeUnit = calendar . plusWeeks ( dateTimeUnit , _NUM ) ; } return periods ; }
@ Override public Set < String > vertexMatchPatternLabels ( ) { return Collections . emptySet ( ) ; }
public boolean resetUnreadCounts ( int aSection ) { boolean retCode = _BOOL ; ArrayList < RoomSummary > summariesList = mSummaryListByGroupPosition . get ( aSection ) ; if ( null != summariesList ) { for ( int summaryIdx = _NUM ; summaryIdx < summariesList . size ( ) ; summaryIdx ++ ) { retCode |= resetUnreadCount ( aSection , summaryIdx ) ; } } else { Log . w ( DBG_CLASS_NAME , _STR + aSection + _STR ) ; } return retCode ; }
public static void addCategory ( LexiconCategory category ) { categories . add ( category ) ; }
private static int CallNonvirtualObjectMethodV ( JNIEnvironment env , int objJREF , int classJREF , int methodID , Address argAddress ) throws Exception { if ( traceJNI ) VM . sysWrite ( _STR ) ; RuntimeEntrypoints . checkJNICountDownToGC ( ) ; try { Object obj = env . getJNIRef ( objJREF ) ; Object returnObj = JNIHelpers . invokeWithVarArg ( obj , methodID , argAddress , null , _BOOL ) ; return env . pushJNIRef ( returnObj ) ; } catch ( Throwable unexpected ) { if ( traceJNI ) unexpected . printStackTrace ( System . err ) ; env . recordException ( unexpected ) ; return _NUM ; } }
private Tuple < Message , Connection > tryOtherMessages ( ) { List < Tuple < Message , Connection > > messages = new ArrayList < Tuple < Message , Connection > > ( ) ; Collection < Message > msgCollection = getMessageCollection ( ) ; for ( Connection con : getConnections ( ) ) { DTNHost other = con . getOtherNode ( getHost ( ) ) ; ProphetV2Router othRouter = ( ProphetV2Router ) other . getRouter ( ) ; if ( othRouter . isTransferring ( ) ) { continue ; } for ( Message m : msgCollection ) { if ( othRouter . hasMessage ( m . getId ( ) ) ) { continue ; } if ( ( othRouter . getPredFor ( m . getTo ( ) ) >= getPredFor ( m . getTo ( ) ) ) ) { messages . add ( new Tuple < Message , Connection > ( m , con ) ) ; } } } if ( messages . size ( ) == _NUM ) { return null ; } Collections . sort ( messages , new TupleComparator ( ) ) ; return tryMessagesForConnected ( messages ) ; }
protected int makePressColor ( ) { int r = ( this . backgroundColor > > _NUM ) & _NUM ; int g = ( this . backgroundColor > > _NUM ) & _NUM ; int b = ( this . backgroundColor > > _NUM ) & _NUM ; r = ( r - _NUM < _NUM ) ? _NUM : r - _NUM ; g = ( g - _NUM < _NUM ) ? _NUM : g - _NUM ; b = ( b - _NUM < _NUM ) ? _NUM : b - _NUM ; return Color . rgb ( r , g , b ) ; }
private void testStreamsFromValues ( ) { Stream < String > movieNames = Stream . of ( _STR , _STR , _STR ) ; movieNames . forEach ( null ) ; String [ ] movieNames2 = { _STR , _STR } ; Stream < String > mNames2 = Stream . of ( movieNames2 ) ; mNames2 . forEach ( null ) ; List < String > moviesList = new ArrayList < > ( ) ; moviesList . add ( _STR ) ; moviesList . add ( _STR ) ; Stream < List < String > > fromList = Stream . of ( moviesList ) ; fromList . forEach ( null ) ; }
public static void cacheClientUserId ( ConsumerBean consumerBean , Long internalId , String clientId ) { cacheClientUserId ( consumerBean . getShort_name ( ) , internalId , clientId ) ; }
protected void processEntity ( IXMLReader reader , IXMLEntityResolver entityResolver ) throws Exception { if ( ! XMLUtil . checkLiteral ( reader , _STR ) ) { XMLUtil . skipTag ( reader ) ; return ; } XMLUtil . skipWhitespace ( reader , null ) ; char ch = XMLUtil . readChar ( reader , _STR ) ; if ( ch == _STR ) { XMLUtil . skipWhitespace ( reader , null ) ; entityResolver = this . parameterEntityResolver ; } else { reader . unread ( ch ) ; } String key = XMLUtil . scanIdentifier ( reader ) ; XMLUtil . skipWhitespace ( reader , null ) ; ch = XMLUtil . readChar ( reader , _STR ) ; String systemID = null ; String publicID = null ; switch ( ch ) { case _STR : if ( ! XMLUtil . checkLiteral ( reader , _STR ) ) { XMLUtil . skipTag ( reader ) ; return ; } XMLUtil . skipWhitespace ( reader , null ) ; publicID = XMLUtil . scanString ( reader , _STR , this . parameterEntityResolver ) ; XMLUtil . skipWhitespace ( reader , null ) ; systemID = XMLUtil . scanString ( reader , _STR , this . parameterEntityResolver ) ; XMLUtil . skipWhitespace ( reader , null ) ; XMLUtil . readChar ( reader , _STR ) ; break ; case _STR : if ( ! XMLUtil . checkLiteral ( reader , _STR ) ) { XMLUtil . skipTag ( reader ) ; return ; } XMLUtil . skipWhitespace ( reader , null ) ; systemID = XMLUtil . scanString ( reader , _STR , this . parameterEntityResolver ) ; XMLUtil . skipWhitespace ( reader , null ) ; XMLUtil . readChar ( reader , _STR ) ; break ; case _STR : case _STR : reader . unread ( ch ) ; String value = XMLUtil . scanString ( reader , _STR , this . parameterEntityResolver ) ; entityResolver . addInternalEntity ( key , value ) ; XMLUtil . skipWhitespace ( reader , null ) ; XMLUtil . readChar ( reader , _STR ) ; break ; default : XMLUtil . skipTag ( reader ) ; } if ( systemID != null ) { entityResolver . addExternalEntity ( key , publicID , systemID ) ; } }
@ Override final Node < V > find ( int h , int k ) { for ( Node < V > e = first ; e != null ; ) { int s ; if ( ( ( s = lockState ) & ( WAITER | WRITER ) ) != _NUM ) { if ( ( e . key == k ) ) { return e ; } e = e . next ; } else if ( U . compareAndSwapInt ( this , LOCKSTATE , s , s + READER ) ) { TreeNode < V > r ; TreeNode < V > p ; try { p = ( ( r = root ) == null ? null : r . findTreeNode ( h , k ) ) ; } finally { Thread w ; if ( getAndAddInt ( this , LOCKSTATE , - READER ) == ( READER | WAITER ) && ( w = waiter ) != null ) { LockSupport . unpark ( w ) ; } } return p ; } } return null ; }
public boolean isPublic ( ) { return Modifier . isPublic ( flags ) ; }
@ Override public boolean receiveImage ( ImageToProcess img , TaskImageContainer task , boolean blockUntilImageRelease , boolean closeOnImageRelease , Optional < Runnable > runnableWhenDone ) throws InterruptedException { Set < TaskImageContainer > passTasks = new HashSet < TaskImageContainer > ( _NUM ) ; passTasks . add ( task ) ; return receiveImage ( img , passTasks , blockUntilImageRelease , closeOnImageRelease , runnableWhenDone ) ; }
protected String doIt ( ) throws Exception { log . info ( _STR + p_Selection + _STR + p_DateInvoiced + _STR + p_AD_Org_ID + _STR + p_C_BPartner_ID + _STR + p_M_InOut_ID + _STR + p_docAction + _STR + p_ConsolidateDocument ) ; String sql = null ; if ( p_Selection ) { sql = _STR + _STR + _STR + _STR + _STR ; } else { sql = _STR + _STR ; if ( p_AD_Org_ID != _NUM ) sql += _STR ; if ( p_C_BPartner_ID != _NUM ) sql += _STR ; if ( p_M_InOut_ID != _NUM ) sql += _STR ; sql += _STR + _STR + _STR ; } PreparedStatement pstmt = null ; try { pstmt = DB . prepareStatement ( sql , get_TrxName ( ) ) ; int index = _NUM ; if ( p_Selection ) { pstmt . setInt ( index , getAD_PInstance_ID ( ) ) ; } else { if ( p_AD_Org_ID != _NUM ) pstmt . setInt ( index ++ , p_AD_Org_ID ) ; if ( p_C_BPartner_ID != _NUM ) pstmt . setInt ( index ++ , p_C_BPartner_ID ) ; if ( p_M_InOut_ID != _NUM ) pstmt . setInt ( index ++ , p_M_InOut_ID ) ; } } catch ( Exception e ) { log . log ( Level . SEVERE , sql , e ) ; } return generate ( pstmt ) ; }
protected int match_bitap ( String text , String pattern , int loc ) { assert ( Match_MaxBits == _NUM || pattern . length ( ) <= Match_MaxBits ) : _STR ; Map < Character , Integer > s = match_alphabet ( pattern ) ; double score_threshold = Match_Threshold ; int best_loc = text . indexOf ( pattern , loc ) ; if ( best_loc != - _NUM ) { score_threshold = Math . min ( match_bitapScore ( _NUM , best_loc , loc , pattern ) , score_threshold ) ; best_loc = text . lastIndexOf ( pattern , loc + pattern . length ( ) ) ; if ( best_loc != - _NUM ) { score_threshold = Math . min ( match_bitapScore ( _NUM , best_loc , loc , pattern ) , score_threshold ) ; } } int matchmask = _NUM << ( pattern . length ( ) - _NUM ) ; best_loc = - _NUM ; int bin_min , bin_mid ; int bin_max = pattern . length ( ) + text . length ( ) ; int [ ] last_rd = new int [ _NUM ] ; for ( int d = _NUM ; d < pattern . length ( ) ; d ++ ) { bin_min = _NUM ; bin_mid = bin_max ; while ( bin_min < bin_mid ) { if ( match_bitapScore ( d , loc + bin_mid , loc , pattern ) <= score_threshold ) { bin_min = bin_mid ; } else { bin_max = bin_mid ; } bin_mid = ( bin_max - bin_min ) / _NUM + bin_min ; } bin_max = bin_mid ; int start = Math . max ( _NUM , loc - bin_mid + _NUM ) ; int finish = Math . min ( loc + bin_mid , text . length ( ) ) + pattern . length ( ) ; int [ ] rd = new int [ finish + _NUM ] ; rd [ finish + _NUM ] = ( _NUM << d ) - _NUM ; for ( int j = finish ; j >= start ; j -- ) { int charMatch ; if ( text . length ( ) <= j - _NUM || ! s . containsKey ( text . charAt ( j - _NUM ) ) ) { charMatch = _NUM ; } else { charMatch = s . get ( text . charAt ( j - _NUM ) ) ; } if ( d == _NUM ) { rd [ j ] = ( ( rd [ j + _NUM ] << _NUM ) | _NUM ) & charMatch ; } else { rd [ j ] = ( ( ( rd [ j + _NUM ] << _NUM ) | _NUM ) & charMatch ) | ( ( ( last_rd [ j + _NUM ] | last_rd [ j ] ) << _NUM ) | _NUM ) | last_rd [ j + _NUM ] ; } if ( ( rd [ j ] & matchmask ) != _NUM ) { double score = match_bitapScore ( d , j - _NUM , loc , pattern ) ; if ( score <= score_threshold ) { score_threshold = score ; best_loc = j - _NUM ; if ( best_loc > loc ) { start = Math . max ( _NUM , _NUM * loc - best_loc ) ; } else { break ; } } } } if ( match_bitapScore ( d + _NUM , loc , loc , pattern ) > score_threshold ) { break ; } last_rd = rd ; } return best_loc ; }
public static S2CellId fromFaceIJ ( int face , int i , int j ) { long n [ ] = { _NUM , face << ( POS_BITS - _NUM ) } ; int bits = ( face & SWAP_MASK ) ; for ( int k = _NUM ; k >= _NUM ; -- k ) { bits = getBits ( n , i , j , k , bits ) ; } S2CellId s = new S2CellId ( ( ( ( n [ _NUM ] << _NUM ) + n [ _NUM ] ) << _NUM ) + _NUM ) ; return s ; }
private static boolean hasResponseBody ( int requestMethod , int responseCode ) { return requestMethod != Request . Method . HEAD && ! ( HttpStatus . SC_CONTINUE <= responseCode && responseCode < HttpStatus . SC_OK ) && responseCode != HttpStatus . SC_NO_CONTENT && responseCode != HttpStatus . SC_NOT_MODIFIED ; }
private void updateActions ( final INaviProject project ) { m_loadProjectAction . setEnabled ( ! project . isLoaded ( ) ) ; if ( m_addAddressSpaceAction != null ) { m_addAddressSpaceAction . setEnabled ( project . isLoaded ( ) ) ; } m_searchViewAction . setEnabled ( project . isLoaded ( ) ) ; m_forwardAction . setEnabled ( project . isLoaded ( ) ) ; }
void close ( ) throws IOException { stream . close ( ) ; }
public boolean truncateTooLongNumber ( PhoneNumber number ) { if ( isValidNumber ( number ) ) { return _BOOL ; } PhoneNumber numberCopy = new PhoneNumber ( ) ; numberCopy . mergeFrom ( number ) ; long nationalNumber = number . getNationalNumber ( ) ; do { nationalNumber /= _NUM ; numberCopy . setNationalNumber ( nationalNumber ) ; if ( isPossibleNumberWithReason ( numberCopy ) == ValidationResult . TOO_SHORT || nationalNumber == _NUM ) { return _BOOL ; } } while ( ! isValidNumber ( numberCopy ) ) ; number . setNationalNumber ( nationalNumber ) ; return _BOOL ; }
public static boolean isWithinTimeComparisonEpsilon ( long timeMicros ) { long now = Utils . getSystemNowMicrosUtc ( ) ; return Math . abs ( timeMicros - now ) < timeComparisonEpsilon ; }
public Optional < Histogram > histogram ( ) { return Optional . empty ( ) ; }
private JLabel createWeekday ( String title ) { JLabel label = new JLabel ( title ) ; label . setHorizontalAlignment ( SwingConstants . CENTER ) ; label . setHorizontalTextPosition ( SwingConstants . CENTER ) ; label . setRequestFocusEnabled ( _BOOL ) ; label . setBackground ( AdempierePLAF . getPrimary1 ( ) ) ; label . setForeground ( Color . white ) ; label . setOpaque ( _BOOL ) ; return label ; }
default Path append ( String relPath ) { return append ( Path . parse ( relPath ) ) ; }
public static int indexOf ( String value , String substring ) { return value != null && substring != null ? value . indexOf ( substring ) : - _NUM ; }
public void testSubmitNullCallable ( ) { ExecutorService e = new ForkJoinPool ( _NUM ) ; PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; try { @ SuppressWarnings ( _STR ) Future < String > future = e . submit ( ( Callable < String > ) null ) ; shouldThrow ( ) ; } catch ( NullPointerException success ) { } } finally { if ( cleaner != null ) { cleaner . close ( ) ; } } }
public int readSI32 ( ) throws IOException { synchBits ( ) ; int b0 = in . read ( ) ; if ( b0 < _NUM ) { throw new IOException ( _STR ) ; } int b1 = in . read ( ) ; if ( b1 < _NUM ) { throw new IOException ( _STR ) ; } int b2 = in . read ( ) ; if ( b2 < _NUM ) { throw new IOException ( _STR ) ; } byte [ ] aByte = new byte [ _NUM ] ; int count = in . read ( aByte ) ; if ( count < _NUM ) { throw new IOException ( _STR ) ; } bytesRead += _NUM ; return ( int ) ( ( aByte [ _NUM ] * _NUM * _NUM * _NUM ) + ( b2 * _NUM * _NUM ) + ( b1 * _NUM ) + b0 ) ; }
public boolean isLocked ( ) { return ! queue . isEmpty ( ) ; }
public void addPreprocessorDirective ( String directive ) { if ( mPreprocessorDirectives == null ) mPreprocessorDirectives = new ArrayList < String > ( ) ; mPreprocessorDirectives . add ( directive ) ; }
public void format ( long inDate , StringBuilder buffer ) { buffer . append ( format ( inDate ) ) ; }
public Profiler clearResults ( ) { lapped . clear ( ) ; return this ; }
@ Override public GraphQuery has ( final String key , final Object value ) { criteria . add ( new Has ( key , value ) ) ; return this ; }
public void addAttributeValue ( Principal principal , Guid guid , String name , String value ) throws UMSException { modifyAttributeValue ( ModificationType . ADD , principal , guid , name , value ) ; }
public static void copyStream ( InputStream inputStream , OutputStream outputStream ) { if ( inputStream != null && outputStream != null ) { try { int length = - _NUM ; byte [ ] buffer = new byte [ Constant . Capacity . BYTES_PER_MB ] ; while ( ( length = inputStream . read ( buffer , _NUM , buffer . length ) ) != - _NUM ) { outputStream . write ( buffer , _NUM , length ) ; outputStream . flush ( ) ; } } catch ( Exception e ) { throw new FileUtilException ( e ) ; } } }
private void printTypeMembers ( List < ? extends Element > members , List < TypeElement > innerClass ) { for ( Element element : members ) { if ( isPublicOrProtected ( element ) ) { printMember ( element , innerClass ) ; } } }
private void initializeBasicVariables ( final int startColumn ) { basicVariables = new int [ getWidth ( ) - _NUM ] ; basicRows = new int [ getHeight ( ) ] ; Arrays . fill ( basicVariables , - _NUM ) ; for ( int i = startColumn ; i < getWidth ( ) - _NUM ; i ++ ) { Integer row = findBasicRow ( i ) ; if ( row != null ) { basicVariables [ i ] = row ; basicRows [ row ] = i ; } } }
public void mouseReleased ( MouseEvent e ) { }
long freeSpaceWindows ( String path , long timeout ) throws IOException { path = FilenameUtils . normalize ( path , _BOOL ) ; if ( path . length ( ) > _NUM && path . charAt ( _NUM ) != _STR ) { path = _STR + path + _STR ; } String [ ] cmdAttribs = new String [ ] { _STR , _STR , _STR + path } ; List < String > lines = performCommand ( cmdAttribs , Integer . MAX_VALUE , timeout ) ; for ( int i = lines . size ( ) - _NUM ; i >= _NUM ; i -- ) { String line = lines . get ( i ) ; if ( line . length ( ) > _NUM ) { return parseDir ( line , path ) ; } } throw new IOException ( _STR + _STR + path + _STR ) ; }
private void attachHeader ( SIPHeader h ) { if ( h == null ) throw new IllegalArgumentException ( _STR ) ; try { if ( h instanceof SIPHeaderList ) { SIPHeaderList < ? > hl = ( SIPHeaderList < ? > ) h ; if ( hl . isEmpty ( ) ) { return ; } } attachHeader ( h , _BOOL , _BOOL ) ; } catch ( SIPDuplicateHeaderException ex ) { } }
public String phonemise ( String text , String pos , StringBuilder g2pMethod ) { String result = userdictLookup ( text , pos ) ; if ( result != null ) { g2pMethod . append ( _STR ) ; return result ; } result = lexiconLookup ( text , pos ) ; if ( result != null ) { g2pMethod . append ( _STR ) ; return result ; } String normalised = MaryUtils . normaliseUnicodeLetters ( text , getLocale ( ) ) ; if ( ! normalised . equals ( text ) ) { result = userdictLookup ( normalised , pos ) ; if ( result != null ) { g2pMethod . append ( _STR ) ; return result ; } result = lexiconLookup ( normalised , pos ) ; if ( result != null ) { g2pMethod . append ( _STR ) ; return result ; } } String phones = lts . predictPronunciation ( text ) ; result = lts . syllabify ( phones ) ; if ( result != null ) { g2pMethod . append ( _STR ) ; return result ; } return null ; }
public static void stop ( int exit_code ) { System . exit ( exit_code ) ; }
private FieldODEStateAndDerivative < Decimal64 > state ( double t ) { return new FieldODEStateAndDerivative < > ( zero . add ( t ) , new Decimal64 [ _NUM ] , new Decimal64 [ _NUM ] ) ; }
public static int hash ( Object object ) { return object == null ? _NUM : object . hashCode ( ) ; }
public void putAll ( Map < ? extends K , ? extends V > m ) { for ( Map . Entry < ? extends K , ? extends V > e : m . entrySet ( ) ) put ( e . getKey ( ) , e . getValue ( ) ) ; }
private void assertPivot ( String field , Object value , int count , PivotField actual ) { assertEquals ( _STR + actual . toString ( ) , field , actual . getField ( ) ) ; assertEquals ( _STR + actual . toString ( ) , value , actual . getValue ( ) ) ; assertEquals ( _STR + actual . toString ( ) , count , actual . getCount ( ) ) ; }
public String toXMLString ( ) throws FSMsgException { return toXMLString ( _BOOL , _BOOL ) ; }
public static final void writeStringArrayXml ( String [ ] val , String name , XmlSerializer out ) throws XmlPullParserException , java . io . IOException { if ( val == null ) { out . startTag ( null , _STR ) ; out . endTag ( null , _STR ) ; return ; } out . startTag ( null , _STR ) ; if ( name != null ) { out . attribute ( null , _STR , name ) ; } final int n = val . length ; out . attribute ( null , _STR , Integer . toString ( n ) ) ; for ( int i = _NUM ; i < n ; i ++ ) { if ( val [ i ] == null ) { out . startTag ( null , _STR ) ; out . endTag ( null , _STR ) ; } else { out . startTag ( null , _STR ) ; out . attribute ( null , _STR , val [ i ] ) ; out . endTag ( null , _STR ) ; } } out . endTag ( null , _STR ) ; }
public static void walkFileTree ( File directory , FileTreeVisitor visitor ) { visitor . preVisitDirectory ( directory ) ; File [ ] files = directory . listFiles ( ) ; if ( files != null ) { for ( File file : files ) { if ( file . isDirectory ( ) ) { walkFileTree ( file , visitor ) ; } else { visitor . visitFile ( file ) ; } } } visitor . postVisitDirectory ( directory ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
private Spannable highlightHashtags ( Spannable text ) { if ( text == null ) { return null ; } final Matcher matcher = PATTERN_HASHTAGS . matcher ( text ) ; while ( matcher . find ( ) ) { final int start = matcher . start ( _NUM ) ; final int end = matcher . end ( _NUM ) ; text . setSpan ( new ForegroundColorSpan ( mHighlightColor ) , start , end , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE ) ; text . setSpan ( new StyleSpan ( android . graphics . Typeface . BOLD ) , start , end , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } return text ; }
protected int readBlock ( ) { blockSize = read ( ) ; int n = _NUM ; if ( blockSize > _NUM ) { try { int count ; while ( n < blockSize ) { count = blockSize - n ; rawData . get ( block , n , count ) ; n += count ; } } catch ( final Exception e ) { Log . w ( TAG , _STR , e ) ; status = STATUS_FORMAT_ERROR ; } } return n ; }
public int processBlock ( byte [ ] in , int inOff , byte [ ] out , int outOff ) throws DataLengthException , IllegalStateException { if ( ( inOff + blockSize ) > in . length ) { throw new DataLengthException ( _STR ) ; } if ( ( outOff + blockSize ) > out . length ) { throw new DataLengthException ( _STR ) ; } cipher . processBlock ( ofbV , _NUM , ofbOutV , _NUM ) ; for ( int i = _NUM ; i < blockSize ; i ++ ) { out [ outOff + i ] = ( byte ) ( ofbOutV [ i ] ^ in [ inOff + i ] ) ; } System . arraycopy ( ofbV , blockSize , ofbV , _NUM , ofbV . length - blockSize ) ; System . arraycopy ( ofbOutV , _NUM , ofbV , ofbV . length - blockSize , blockSize ) ; return blockSize ; }
public String commandTopic ( String command ) { if ( command == null ) { command = _STR ; } return cmdTopic . replace ( _STR , command ) ; }
private static void checkForNullElement ( Object [ ] arg , String argName ) { if ( ( arg == null ) || ( arg . length == _NUM ) ) { throw new IllegalArgumentException ( _STR + argName + _STR ) ; } for ( int i = _NUM ; i < arg . length ; i ++ ) { if ( arg [ i ] == null ) { throw new IllegalArgumentException ( _STR + argName + _STR + i + _STR ) ; } } }
public InputStream executeDownload ( String url , String cookie ) throws IOException { String [ ] [ ] headerParams = new String [ ] [ ] { { _STR , cookie } , { _STR , _STR } } ; HttpEntity httpEntity = executeGet ( url , null , headerParams ) ; return httpEntity . getContent ( ) ; }
public final void testSetSeedbyteArray02 ( ) throws NoSuchFieldException , SecurityException , IllegalAccessException { byte [ ] seed = new byte [ LENGTH ] ; byte [ ] bytes1 = new byte [ LENGTH ] ; byte [ ] bytes2 = new byte [ LENGTH ] ; boolean b ; for ( int i = _NUM ; i < seed . length ; i ++ ) { seed [ i ] = ( byte ) i ; } sr . setSeed ( seed ) ; sr . setSeed ( seed ) ; sr2 . setSeed ( seed ) ; sr . nextBytes ( bytes1 ) ; sr2 . nextBytes ( bytes2 ) ; b = _BOOL ; for ( int j = _NUM ; j < bytes1 . length ; j ++ ) { b &= bytes1 [ j ] == bytes2 [ j ] ; } assertFalse ( _STR , b ) ; }
public Image flipImageVertically ( Image image , boolean maintainOpacity ) { int [ ] rgb = image . getRGB ( ) ; int [ ] newRGB = new int [ rgb . length ] ; int width = image . getWidth ( ) ; int height = image . getHeight ( ) ; for ( int y = _NUM ; y < height ; y ++ ) { for ( int x = _NUM ; x < width ; x ++ ) { newRGB [ x + ( height - y - _NUM ) * width ] = rgb [ x + y * width ] ; } } return EncodedImage . createFromRGB ( newRGB , width , height , ! maintainOpacity ) ; }
public MorfologikFilterFactory ( Map < String , String > args ) { super ( args ) ; final String DICTIONARY_RESOURCE_ATTRIBUTE = _STR ; String dictionaryResource = get ( args , DICTIONARY_RESOURCE_ATTRIBUTE ) ; if ( dictionaryResource != null && ! dictionaryResource . isEmpty ( ) ) { throw new IllegalArgumentException ( _STR + DICTIONARY_RESOURCE_ATTRIBUTE + _STR + _STR + DICTIONARY_ATTRIBUTE + _STR ) ; } resourceName = get ( args , DICTIONARY_ATTRIBUTE ) ; if ( ! args . isEmpty ( ) ) { throw new IllegalArgumentException ( _STR + args ) ; } }
public static < T > T wrapThrow ( Callable < T > callable , Code _finally ) { try { return callable . call ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } finally { wrapThrow ( _finally ) ; } }
public static String padLeft ( String str , int totalChars ) { if ( str == null ) str = _STR ; StringBuffer sb = new StringBuffer ( ) ; for ( int i = _NUM ; i < totalChars - str . length ( ) ; i ++ ) { sb . append ( _STR ) ; } sb . append ( str ) ; return sb . toString ( ) ; }
protected void decodeImageData ( ) { int NullCode = - _NUM ; int npix = iw * ih ; int available , clear , code_mask , code_size , end_of_information , in_code , old_code , bits , code , count , i , datum , data_size , first , top , bi , pi ; if ( ( pixels == null ) || ( pixels . length < npix ) ) { pixels = new byte [ npix ] ; } if ( prefix == null ) prefix = new short [ MaxStackSize ] ; if ( suffix == null ) suffix = new byte [ MaxStackSize ] ; if ( pixelStack == null ) pixelStack = new byte [ MaxStackSize + _NUM ] ; data_size = read ( ) ; clear = _NUM << data_size ; end_of_information = clear + _NUM ; available = clear + _NUM ; old_code = NullCode ; code_size = data_size + _NUM ; code_mask = ( _NUM << code_size ) - _NUM ; for ( code = _NUM ; code < clear ; code ++ ) { prefix [ code ] = _NUM ; suffix [ code ] = ( byte ) code ; } datum = bits = count = first = top = pi = bi = _NUM ; for ( i = _NUM ; i < npix ; ) { if ( top == _NUM ) { if ( bits < code_size ) { if ( count == _NUM ) { count = readBlock ( ) ; if ( count <= _NUM ) break ; bi = _NUM ; } datum += ( ( ( int ) block [ bi ] ) & _NUM ) << bits ; bits += _NUM ; bi ++ ; count -- ; continue ; } code = datum & code_mask ; datum >>= code_size ; bits -= code_size ; if ( ( code > available ) || ( code == end_of_information ) ) break ; if ( code == clear ) { code_size = data_size + _NUM ; code_mask = ( _NUM << code_size ) - _NUM ; available = clear + _NUM ; old_code = NullCode ; continue ; } if ( old_code == NullCode ) { pixelStack [ top ++ ] = suffix [ code ] ; old_code = code ; first = code ; continue ; } in_code = code ; if ( code == available ) { pixelStack [ top ++ ] = ( byte ) first ; code = old_code ; } while ( code > clear ) { pixelStack [ top ++ ] = suffix [ code ] ; code = prefix [ code ] ; } first = ( ( int ) suffix [ code ] ) & _NUM ; if ( available >= MaxStackSize ) break ; pixelStack [ top ++ ] = ( byte ) first ; prefix [ available ] = ( short ) old_code ; suffix [ available ] = ( byte ) first ; available ++ ; if ( ( ( available & code_mask ) == _NUM ) && ( available < MaxStackSize ) ) { code_size ++ ; code_mask += available ; } old_code = in_code ; } top -- ; pixels [ pi ++ ] = pixelStack [ top ] ; i ++ ; } for ( i = pi ; i < npix ; i ++ ) { pixels [ i ] = _NUM ; } }
public int hashCode ( ) { int myhash = _NUM + policyIdentifier . hashCode ( ) ; myhash = _NUM * myhash + policyQualifiers . hashCode ( ) ; return myhash ; }
public UnixTerminal ( ) throws IOException { this ( System . in , System . out , Charset . defaultCharset ( ) ) ; }
public static void v ( String tag , String s , Object ... args ) { if ( LOG . VERBOSE >= LOGLEVEL ) Log . v ( tag , String . format ( s , args ) ) ; }
@ Override public boolean isCellEditable ( int rowIndex , int columnIndex ) { ProcessFunctionParameterValue value = valueList . get ( rowIndex ) ; switch ( columnIndex ) { case COL_OPTIONAL : return value . optional ; case COL_VALUE : if ( value . optional ) { return value . included ; } else { return _BOOL ; } case COL_PARAMETER : case COL_TYPE : default : return _BOOL ; } }
private void checkStreams ( ) { if ( ( System . currentTimeMillis ( ) - lastChecked ) / _NUM < CHECK_DELAY ) { return ; } lastChecked = System . currentTimeMillis ( ) ; Set < StreamInfo > remove = new HashSet < > ( ) ; for ( StreamInfo info : data ) { if ( ! info . isValid ( ) || ! info . getOnline ( ) ) { remove . add ( info ) ; } } for ( StreamInfo info : remove ) { data . remove ( info ) ; itemRemoved ( info ) ; } if ( remove . isEmpty ( ) ) { listDataChanged ( ) ; } }
@ Override public void addFocusables ( ArrayList < View > views , int direction , int focusableMode ) { final int focusableCount = views . size ( ) ; final int descendantFocusability = getDescendantFocusability ( ) ; if ( descendantFocusability != FOCUS_BLOCK_DESCENDANTS ) { for ( int i = _NUM ; i < getChildCount ( ) ; i ++ ) { final View child = getChildAt ( i ) ; if ( child . getVisibility ( ) == VISIBLE ) { ItemInfo ii = infoForChild ( child ) ; if ( ii != null && ii . position == mCurItem ) { child . addFocusables ( views , direction , focusableMode ) ; } } } } if ( descendantFocusability != FOCUS_AFTER_DESCENDANTS || ( focusableCount == views . size ( ) ) ) { if ( ! isFocusable ( ) ) { return ; } if ( ( focusableMode & FOCUSABLES_TOUCH_MODE ) == FOCUSABLES_TOUCH_MODE && isInTouchMode ( ) && ! isFocusableInTouchMode ( ) ) { return ; } if ( views != null ) { views . add ( this ) ; } } }
public void addPriorityPackage ( String pkg ) { if ( _priorityPackages == null ) _priorityPackages = new String [ _NUM ] ; int oldLength = _priorityPackages . length ; String [ ] newPkgs = new String [ oldLength + _NUM ] ; System . arraycopy ( _priorityPackages , _NUM , newPkgs , _NUM , oldLength ) ; if ( ! pkg . endsWith ( _STR ) ) pkg = pkg + _STR ; newPkgs [ oldLength ] = pkg ; _priorityPackages = newPkgs ; }
@ Override public void actionPerformed ( ActionEvent ev ) { final megan . remote . RemoteServiceBrowser remoteServiceBrowser = ( megan . remote . RemoteServiceBrowser ) getViewer ( ) ; if ( remoteServiceBrowser != null ) { String url = remoteServiceBrowser . getURL ( ) ; String user = remoteServiceBrowser . getUser ( ) ; String password = remoteServiceBrowser . getPasswd ( ) ; String command = _STR + url + _STR ; if ( user . length ( ) > _NUM ) command += _STR + user + _STR ; if ( password . length ( ) > _NUM ) { synchronized ( syncObject ) { OpenRemoteServerCommand . hiddenPassword = password ; } command += _STR + HIDDEN_PASSWORD + _STR ; } command += _STR ; if ( url . length ( ) > _NUM ) { execute ( command ) ; } } }
public static String verifyCertificate ( X509Certificate cert , Collection < CRL > crls , Calendar calendar ) { if ( SignUtils . hasUnsupportedCriticalExtension ( cert ) ) return _STR ; try { cert . checkValidity ( calendar . getTime ( ) ) ; } catch ( Exception e ) { return e . getMessage ( ) ; } if ( crls != null ) { for ( CRL crl : crls ) { if ( crl . isRevoked ( cert ) ) return _STR ; } } return null ; }
public static void expand ( ) { String [ ] st = new String [ L ] ; int i ; for ( i = _NUM ; i < R ; i ++ ) st [ i ] = _STR + ( char ) i ; st [ i ++ ] = _STR ; int codeword = BinaryStdIn . readInt ( W ) ; if ( codeword == R ) return ; String val = st [ codeword ] ; while ( _BOOL ) { BinaryStdOut . write ( val ) ; codeword = BinaryStdIn . readInt ( W ) ; if ( codeword == R ) break ; String s = st [ codeword ] ; if ( i == codeword ) s = val + val . charAt ( _NUM ) ; if ( i < L ) st [ i ++ ] = val + s . charAt ( _NUM ) ; val = s ; } BinaryStdOut . close ( ) ; }
AudioCapabilities ( int [ ] supportedEncodings , int maxChannelCount ) { if ( supportedEncodings != null ) { this . supportedEncodings = Arrays . copyOf ( supportedEncodings , supportedEncodings . length ) ; Arrays . sort ( this . supportedEncodings ) ; } else { this . supportedEncodings = new int [ _NUM ] ; } this . maxChannelCount = maxChannelCount ; }
@ Override public boolean isRotateEdgeLabels ( ) { return graphCreator . isRotatingEdgeLabels ( ) ; }
public static ResponseCode createExtension ( String name ) { StringBuffer buffer = new StringBuffer ( name . length ( ) + _NUM ) ; if ( ! name . startsWith ( _STR ) ) { buffer . append ( _STR ) ; } buffer . append ( name ) ; return new ResponseCode ( buffer . toString ( ) ) ; }
@ Override public double [ ] makeInverseCumulativeTestValues ( ) { double [ ] points = makeCumulativeTestPoints ( ) ; double [ ] points2 = new double [ points . length - _NUM ] ; System . arraycopy ( points , _NUM , points2 , _NUM , points2 . length ) ; return points2 ; }
public java . lang . StringBuilder append ( boolean b ) { if ( b ) { return append ( _STR ) ; } return append ( _STR ) ; }
public void deleteServers ( Set servers ) throws AMConsoleException { if ( servers . contains ( SystemProperties . getServerInstanceName ( ) ) ) { throw new AMConsoleException ( getLocalizedString ( _STR ) ) ; } String serverName = null ; try { if ( ( servers != null ) && ! servers . isEmpty ( ) ) { SSOToken token = getUserSSOToken ( ) ; for ( Iterator i = servers . iterator ( ) ; i . hasNext ( ) ; ) { serverName = ( String ) i . next ( ) ; String [ ] param = { serverName } ; logEvent ( _STR , param ) ; ServerConfiguration . deleteServerInstance ( token , serverName ) ; logEvent ( _STR , param ) ; } } } catch ( SMSException e ) { String [ ] params = { serverName , e . getMessage ( ) } ; logEvent ( _STR , params ) ; throw new AMConsoleException ( getErrorString ( e ) ) ; } catch ( SSOException e ) { String [ ] params = { serverName , e . getMessage ( ) } ; logEvent ( _STR , params ) ; throw new AMConsoleException ( getErrorString ( e ) ) ; } }
protected void arraycopy ( byte [ ] buf , int pos , int length ) { mMessage . write ( buf , pos , length ) ; mPosition = mPosition + length ; }
static void sort ( float [ ] a , int left , int right , float [ ] work , int workBase , int workLen ) { while ( left <= right && Float . isNaN ( a [ right ] ) ) { -- right ; } for ( int k = right ; -- k >= left ; ) { float ak = a [ k ] ; if ( ak != ak ) { a [ k ] = a [ right ] ; a [ right ] = ak ; -- right ; } } doSort ( a , left , right , work , workBase , workLen ) ; int hi = right ; while ( left < hi ) { int middle = ( left + hi ) > > > _NUM ; float middleValue = a [ middle ] ; if ( middleValue < _NUM ) { left = middle + _NUM ; } else { hi = middle ; } } while ( left <= right && Float . floatToRawIntBits ( a [ left ] ) < _NUM ) { ++ left ; } for ( int k = left , p = left - _NUM ; ++ k <= right ; ) { float ak = a [ k ] ; if ( ak != _NUM ) { break ; } if ( Float . floatToRawIntBits ( ak ) < _NUM ) { a [ k ] = _NUM ; a [ ++ p ] = - _NUM ; } } }
public void fatalError ( org . xml . sax . SAXParseException e ) throws org . xml . sax . SAXException { String formattedMsg = e . getMessage ( ) ; SAXSourceLocator locator = getLocator ( ) ; ErrorListener handler = m_stylesheetProcessor . getErrorListener ( ) ; try { handler . fatalError ( new TransformerException ( formattedMsg , locator ) ) ; } catch ( TransformerException te ) { throw new org . xml . sax . SAXException ( te ) ; } }
public boolean add ( terminal sym ) throws internal_error { boolean result ; not_null ( sym ) ; result = _elements . get ( sym . index ( ) ) ; if ( ! result ) _elements . set ( sym . index ( ) ) ; return result ; }
private void createRecursivly ( String path ) throws KeeperException , InterruptedException { try { if ( zk . exists ( path , _BOOL ) == null && path . length ( ) > _NUM ) { String temp = path . substring ( _NUM , path . lastIndexOf ( File . separator ) ) ; createRecursivly ( temp ) ; zk . create ( path , null , Ids . OPEN_ACL_UNSAFE , CreateMode . PERSISTENT ) ; } else { return ; } } catch ( KeeperException e ) { throw e ; } catch ( InterruptedException e ) { throw e ; } }
public void stopRecording ( ) { mHandler . sendMessage ( mHandler . obtainMessage ( MSG_STOP_RECORDING ) ) ; mHandler . sendMessage ( mHandler . obtainMessage ( MSG_QUIT ) ) ; }
private void writeTag ( String name , Tag tag ) throws IOException { TagType type = tag . getType ( ) ; byte [ ] nameBytes = name . getBytes ( StandardCharsets . UTF_8 ) ; if ( type == TagType . END ) { throw new IOException ( _STR ) ; } os . writeByte ( type . getId ( ) ) ; os . writeShort ( nameBytes . length ) ; os . write ( nameBytes ) ; writeTagPayload ( tag ) ; }
public int hashCode ( ) { if ( myhash == - _NUM ) { if ( timestamp == null ) { myhash = signerCertPath . hashCode ( ) ; } else { myhash = signerCertPath . hashCode ( ) + timestamp . hashCode ( ) ; } } return myhash ; }
public TypeVariableBV typeVariable ( ) { int id = typeVariableList . size ( ) ; typeVariableList . add ( null ) ; TypeVariableBV result = new TypeVariableBV ( id , this ) ; typeVariableList . set ( id , result ) ; return result ; }
public int process ( Callback [ ] callbacks , int state ) throws AuthLoginException { initAuthConfig ( ) ; X509Certificate [ ] allCerts = null ; try { HttpServletRequest servletRequest = getHttpServletRequest ( ) ; if ( servletRequest != null ) { allCerts = ( X509Certificate [ ] ) servletRequest . getAttribute ( _STR ) ; if ( allCerts == null || allCerts . length == _NUM ) { debug . message ( _STR ) ; if ( ! portal_gw_cert_auth_enabled ) { debug . error ( _STR + _STR ) ; throw new AuthLoginException ( amAuthCert , _STR , null ) ; } thecert = getPortalStyleCert ( servletRequest ) ; allCerts = new X509Certificate [ ] { thecert } ; } else { if ( portal_gw_cert_auth_enabled && portal_gw_cert_preferred ) { thecert = getPortalStyleCert ( servletRequest ) ; allCerts = new X509Certificate [ ] { thecert } ; } else { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR , allCerts . length ) ; } thecert = allCerts [ _NUM ] ; } } } else { thecert = sendCallback ( ) ; } if ( thecert == null ) { debug . message ( _STR ) ; throw new AuthLoginException ( amAuthCert , _STR , null ) ; } getTokenFromCert ( thecert ) ; storeUsernamePasswd ( userTokenId , null ) ; if ( debug . messageEnabled ( ) ) { debug . message ( _STR + userTokenId + _STR ) ; } } catch ( AuthLoginException e ) { setFailureID ( userTokenId ) ; debug . error ( _STR , e ) ; throw new AuthLoginException ( amAuthCert , _STR , null ) ; } if ( debug . messageEnabled ( ) ) { debug . message ( _STR + thecert . toString ( ) ) ; } if ( amAuthCert_chkCertInLDAP . equalsIgnoreCase ( _STR ) && amAuthCert_chkCRL . equalsIgnoreCase ( _STR ) && ! ocspEnabled ) { return ISAuthConstants . LOGIN_SUCCEED ; } if ( ldapParam == null ) { setLdapStoreParam ( ) ; } if ( amAuthCert_chkCertInLDAP . equalsIgnoreCase ( _STR ) ) { X509Certificate ldapcert = AMCertStore . getRegisteredCertificate ( ldapParam , thecert , amAuthCert_chkAttrCertInLDAP ) ; if ( ldapcert == null ) { debug . error ( _STR ) ; setFailureID ( userTokenId ) ; throw new AuthLoginException ( amAuthCert , _STR , null ) ; } } int ret = doJCERevocationValidation ( allCerts ) ; if ( ret != ISAuthConstants . LOGIN_SUCCEED ) { debug . error ( _STR ) ; setFailureID ( userTokenId ) ; throw new AuthLoginException ( amAuthCert , _STR , null ) ; } return ISAuthConstants . LOGIN_SUCCEED ; }
public static void downto ( Number self , Number to , @ ClosureParams ( FirstParam . class ) Closure closure ) { int self1 = self . intValue ( ) ; int to1 = to . intValue ( ) ; if ( self1 >= to1 ) { for ( int i = self1 ; i >= to1 ; i -- ) { closure . call ( i ) ; } } else throw new GroovyRuntimeException ( _STR + to + _STR + self + _STR ) ; }
public void add ( SelectClauseElementRaw element ) { selectClauseElements . add ( element ) ; }
public synchronized void removePvChangeListener ( PvChangeListener l ) { log . debug ( _STR + String . valueOf ( this ) + _STR + String . valueOf ( l ) ) ; PvChangeListeners . remove ( l ) ; }
public static boolean isNormal ( GeoTimeSerie gts , int buckets , double pcterror , boolean bessel ) { if ( _NUM == gts . values ) { return _BOOL ; } if ( TYPE . DOUBLE != gts . type && TYPE . LONG != gts . type ) { return _BOOL ; } double [ ] musigma = musigma ( gts , bessel ) ; double mu = musigma [ _NUM ] ; double sigma = musigma [ _NUM ] ; if ( _NUM == sigma ) { return _BOOL ; } double [ ] bounds = SAXUtils . getBounds ( buckets ) ; int [ ] counts = new int [ bounds . length + _NUM ] ; for ( int i = _NUM ; i < gts . values ; i ++ ) { double v = ( ( double ) GTSHelper . valueAtIndex ( gts , i ) - mu ) / sigma ; int insertion = Arrays . binarySearch ( bounds , v ) ; if ( insertion >= _NUM ) { counts [ insertion ] ++ ; } else { counts [ - ( _NUM + insertion ) ] ++ ; } } double mean = gts . values / counts . length ; for ( int i = _NUM ; i < counts . length ; i ++ ) { if ( Math . abs ( _NUM - ( counts [ i ] / mean ) ) > pcterror ) { return _BOOL ; } } return _BOOL ; }
public void loadFromProperties ( Properties properties ) { projected = StringUtil . getBooleanValue ( properties , _STR , _BOOL , _BOOL ) ; tiePoint = StringUtil . getDoubleArray ( properties , _STR , null , _BOOL ) ; scale = StringUtil . getDoubleArray ( properties , _STR , null , _BOOL ) ; globe = StringUtil . getStringValue ( properties , _STR , null , _BOOL ) ; rasterWidth = StringUtil . getIntegerValue ( properties , _STR , _BOOL , _NUM , _BOOL ) ; rasterLength = StringUtil . getIntegerValue ( properties , _STR , _BOOL , _NUM , _BOOL ) ; datumCode = StringUtil . getIntegerValue ( properties , _STR , _BOOL , _NUM , _BOOL ) ; ellipsoidCode = StringUtil . getIntegerValue ( properties , _STR , _BOOL , _NUM , _BOOL ) ; semiMajorAxis = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; semiMinorAxis = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; inverseFlattening = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; gcsPrimeMeridianLon = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; projCode = StringUtil . getIntegerValue ( properties , _STR , _BOOL , _NUM , _BOOL ) ; pcsCode = StringUtil . getIntegerValue ( properties , _STR , _BOOL , _NUM , _BOOL ) ; coordTransformCode = StringUtil . getIntegerValue ( properties , _STR , _BOOL , _NUM , _BOOL ) ; stdParallel1 = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; poleLat = ( int ) ( Math . signum ( stdParallel1 ) * _NUM ) ; stdParallel2 = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; naturalOriginLon = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; naturalOriginLat = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; falseOriginLon = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; falseOriginLat = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; falseEasting = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; falseNorthing = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; centerEasting = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; centerNorthing = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; centerLon = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; centerLat = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; scaleAtNaturalOrigin = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; scaleAtCenter = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; azimuth = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; straightVertPoleLon = StringUtil . getDoubleValue ( properties , _STR , _BOOL , Double . NaN , _BOOL ) ; gcsCitation = StringUtil . getStringValue ( properties , _STR , null , _BOOL ) ; pcsCitation = StringUtil . getStringValue ( properties , _STR , null , _BOOL ) ; projLinearUnits = StringUtil . getStringValue ( properties , _STR , _STR , _BOOL ) ; if ( coordTransformCode == GeoKey . Code_Undefined ) { String citation = ( pcsCitation == null ? _STR : pcsCitation . toLowerCase ( ) ) ; if ( citation . contains ( _STR ) && ( citation . contains ( _STR ) || citation . contains ( _STR ) || citation . contains ( _STR ) ) ) { coordTransformCode = GeoKey . Code_CT_Mercator ; if ( Double . isNaN ( naturalOriginLon ) ) naturalOriginLon = _NUM ; if ( Double . isNaN ( falseEasting ) ) falseEasting = _NUM ; if ( Double . isNaN ( falseNorthing ) ) falseNorthing = _NUM ; if ( citation . contains ( _STR ) && citation . contains ( _STR ) ) { if ( ! Double . isNaN ( semiMajorAxis ) ) semiMinorAxis = semiMajorAxis ; else { semiMajorAxis = SEMI_MAJOR_AXIS [ _NUM ] ; semiMinorAxis = SEMI_MINOR_AXIS [ _NUM ] ; } } } } }
public static double gamma ( double x ) { double P [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; double Q [ ] = { - _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; double p , z ; double q = Math . abs ( x ) ; if ( q > _NUM ) { if ( x < _NUM ) { p = Math . floor ( q ) ; if ( p == q ) { throw new ArithmeticException ( _STR ) ; } z = q - p ; if ( z > _NUM ) { p += _NUM ; z = q - p ; } z = q * Math . sin ( Math . PI * z ) ; if ( z == _NUM ) { throw new ArithmeticException ( _STR ) ; } z = Math . abs ( z ) ; z = Math . PI / ( z * stirlingFormula ( q ) ) ; return - z ; } else { return stirlingFormula ( x ) ; } } z = _NUM ; while ( x >= _NUM ) { x -= _NUM ; z *= x ; } while ( x < _NUM ) { if ( x == _NUM ) { throw new ArithmeticException ( _STR ) ; } else if ( x > - _NUM ) { return ( z / ( ( _NUM + _NUM * x ) * x ) ) ; } z /= x ; x += _NUM ; } while ( x < _NUM ) { if ( x == _NUM ) { throw new ArithmeticException ( _STR ) ; } else if ( x < _NUM ) { return ( z / ( ( _NUM + _NUM * x ) * x ) ) ; } z /= x ; x += _NUM ; } if ( ( x == _NUM ) || ( x == _NUM ) ) { return z ; } x -= _NUM ; p = polevl ( x , P , _NUM ) ; q = polevl ( x , Q , _NUM ) ; return z * p / q ; }
public ShowProgress ( ) { start = last = System . currentTimeMillis ( ) ; }
public static RepositoryExpression parseRepositoryExpression ( String toParse ) throws ParseError { StreamTokenizer t = Parser . tokenize ( toParse ) ; Term creator = Parser . parseTerm ( t ) ; List < Operation > operations = Parser . parseOperationList ( t ) ; RepositoryExpression ex = new RepositoryExpression ( creator ) ; if ( ! operations . isEmpty ( ) ) { throw new ParseError ( _STR ) ; } return ex ; }
@ Override public synchronized void close ( ) throws IOException { buffer = null ; notifyAll ( ) ; }
public void addSection ( SourceSection section ) { sections . add ( section ) ; }
public static GenomeRelationships load ( BufferedReader reader ) throws IOException { final GenomeRelationships ped = new GenomeRelationships ( ) ; String line ; while ( ( line = reader . readLine ( ) ) != null ) { line = line . trim ( ) ; if ( line . startsWith ( _STR ) || line . matches ( _STR ) ) { continue ; } if ( line . matches ( _STR ) ) { parseGenomeLine ( ped , line ) ; continue ; } if ( line . matches ( _STR ) ) { parseRelationshipLine ( ped , line ) ; continue ; } throw new NoTalkbackSlimException ( _STR + line + _STR ) ; } return ped ; }
private int [ ] versionParts ( String version ) { String [ ] parts = version . split ( _STR ) ; int [ ] p = new int [ _NUM ] ; for ( int i = _NUM ; i < _NUM ; i ++ ) { int pi ; if ( i < parts . length ) { p [ i ] = Integer . parseInt ( parts [ i ] ) ; } else { p [ i ] = - _NUM ; } } return p ; }
private FgsRunner . Type computeType ( ) { Object model = getDataModel ( ) ; if ( model == null && getSourceGraph ( ) != null ) { model = getSourceGraph ( ) ; } if ( model == null ) { throw new RuntimeException ( _STR + _STR + _STR + _STR ) ; } if ( model instanceof Graph ) { type = FgsRunner . Type . GRAPH ; } else if ( model instanceof DataSet ) { DataSet dataSet = ( DataSet ) model ; if ( dataSet . isContinuous ( ) ) { type = FgsRunner . Type . CONTINUOUS ; } else if ( dataSet . isDiscrete ( ) ) { type = FgsRunner . Type . DISCRETE ; } else { throw new IllegalStateException ( _STR ) ; } } else if ( model instanceof ICovarianceMatrix ) { type = FgsRunner . Type . CONTINUOUS ; } else if ( model instanceof DataModelList ) { DataModelList list = ( DataModelList ) model ; if ( allContinuous ( list ) ) { type = FgsRunner . Type . CONTINUOUS ; } else if ( allDiscrete ( list ) ) { type = FgsRunner . Type . DISCRETE ; } else { throw new IllegalArgumentException ( _STR ) ; } } return type ; }
public static boolean approxEquals ( final double a , final double b , final double tolerance ) { if ( Double . isNaN ( a ) || Double . isNaN ( b ) ) { return _BOOL ; } if ( a == b ) { return _BOOL ; } if ( Double . isInfinite ( a ) || Double . isInfinite ( b ) ) { return _BOOL ; } if ( a >= ( b - tolerance ) && a <= ( b + tolerance ) ) { return _BOOL ; } return _BOOL ; }
public static Map < String , Object > loadJsonModel ( File jsFile ) { try { Map < String , Object > model = JavaScriptResolver . readJsonModel ( jsFile ) ; if ( model == null ) { throw new CompilerErrorException ( _STR + jsFile . getAbsolutePath ( ) ) ; } if ( ! model . containsKey ( _STR ) ) { throw new CeylonRunJsException ( _STR + jsFile + _STR ) ; } return model ; } catch ( IOException ex ) { throw new CompilerErrorException ( _STR + jsFile ) ; } }
static String [ ] splitLine ( final String line ) { final int ix0 = line . indexOf ( _STR ) ; final int ix = ix0 == - _NUM ? line . length ( ) : ix0 ; final String lessComment = line . substring ( _NUM , ix ) ; if ( lessComment . matches ( _STR ) ) { return null ; } return lessComment . split ( _STR ) ; }
private List < Volume > createVolumeData ( String name , int numVolumes ) { List < Volume > volumes = new ArrayList < Volume > ( ) ; URI cgUri = createBlockConsistencyGroup ( name + _STR ) ; for ( int i = _NUM ; i <= numVolumes ; i ++ ) { Volume volume = new Volume ( ) ; URI volumeURI = URIUtil . createId ( Volume . class ) ; testVolumeURIs . add ( volumeURI ) ; volume . setId ( volumeURI ) ; volume . setLabel ( name + i ) ; volume . setConsistencyGroup ( cgUri ) ; _dbClient . createObject ( volume ) ; } return volumes ; }
private static < T > T hashMapToObject ( LinkedHashMap map , Class < T > type ) { try { return stringToObject ( mapper . writeValueAsString ( map ) , type ) ; } catch ( IOException e ) { log . warn ( _STR + type . getName ( ) + _STR + map . toString ( ) + _STR + e . getMessage ( ) ) ; return null ; } }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return SUCCESS ; default : return null ; } }
private void deleteSMS ( String cmd , String search ) { int nbDeleted = - _NUM ; if ( cmd . equals ( _STR ) ) { nbDeleted = mSmsManager . deleteAllSms ( ) ; } else if ( cmd . equals ( _STR ) ) { nbDeleted = mSmsManager . deleteSentSms ( ) ; } else if ( cmd . startsWith ( _STR ) ) { Integer number = Tools . parseInt ( search ) ; if ( number == null ) { number = _NUM ; } if ( cmd . equals ( _STR ) ) { nbDeleted = mSmsManager . deleteLastSms ( number ) ; } else if ( cmd . equals ( _STR ) ) { nbDeleted = mSmsManager . deleteLastInSms ( number ) ; } else if ( cmd . equals ( _STR ) ) { nbDeleted = mSmsManager . deleteLastOutSms ( number ) ; } else { send ( R . string . chat_del_sms_error ) ; } } else if ( cmd . equals ( _STR ) && search != null ) { ArrayList < Contact > contacts = ContactsManager . getMatchingContacts ( sContext , search ) ; if ( contacts . size ( ) > _NUM ) { StringBuilder sb = new StringBuilder ( getString ( R . string . chat_specify_details ) ) ; sb . append ( Tools . LineSep ) ; for ( Contact contact : contacts ) { sb . append ( contact . name ) ; sb . append ( Tools . LineSep ) ; } send ( sb . toString ( ) ) ; } else if ( contacts . size ( ) == _NUM ) { Contact contact = contacts . get ( _NUM ) ; send ( R . string . chat_del_sms_from , contact . name ) ; nbDeleted = mSmsManager . deleteSmsByContact ( contact . rawIds ) ; } else { send ( R . string . chat_no_match_for , search ) ; } } else if ( cmd . equals ( _STR ) && search != null ) { send ( R . string . chat_del_sms_from , search ) ; nbDeleted = mSmsManager . deleteSmsByNumber ( search ) ; if ( nbDeleted <= _NUM ) { send ( R . string . chat_no_match_for , search ) ; } } else { send ( R . string . chat_del_sms_syntax ) ; } if ( nbDeleted >= _NUM ) { send ( R . string . chat_del_sms_nb , nbDeleted ) ; } else if ( nbDeleted == - _NUM ) { send ( R . string . chat_del_sms_error ) ; } }
private static BlocksRemoveInfo isStartBlock ( BlockNode remBlock , BlockNode startBlock ) { List < InsnNode > remInsns = remBlock . getInstructions ( ) ; List < InsnNode > startInsns = startBlock . getInstructions ( ) ; if ( remInsns . size ( ) < startInsns . size ( ) ) { return null ; } int startPos = remInsns . size ( ) - startInsns . size ( ) ; int endPos = _NUM ; if ( ! checkInsns ( remInsns , startInsns , startPos , null ) ) { if ( checkInsns ( remInsns , startInsns , _NUM , null ) ) { startPos = _NUM ; endPos = startInsns . size ( ) ; } else { boolean found = _BOOL ; for ( int i = _NUM ; i < startPos ; i ++ ) { if ( checkInsns ( remInsns , startInsns , i , null ) ) { startPos = i ; endPos = startInsns . size ( ) + i ; found = _BOOL ; break ; } } if ( ! found ) { return null ; } } } BlocksPair startPair = new BlocksPair ( remBlock , startBlock ) ; BlocksRemoveInfo removeInfo = new BlocksRemoveInfo ( startPair ) ; removeInfo . setStartSplitIndex ( startPos ) ; removeInfo . setEndSplitIndex ( endPos ) ; if ( endPos != _NUM ) { removeInfo . setEnd ( startPair ) ; } if ( ! checkInsns ( remInsns , startInsns , startPos , removeInfo ) ) { return null ; } return removeInfo ; }
public boolean checkError ( ) { return pw . checkError ( ) ; }
public List < PdfDocument > splitBySize ( long size ) { List < PageRange > splitRanges = new ArrayList < > ( ) ; int currentPage = _NUM ; int numOfPages = pdfDocument . getNumberOfPages ( ) ; while ( currentPage <= numOfPages ) { PageRange nextRange = getNextRange ( currentPage , numOfPages , size ) ; splitRanges . add ( nextRange ) ; List < Integer > allPages = nextRange . getAllPages ( ) ; currentPage = ( int ) allPages . get ( allPages . size ( ) - _NUM ) + _NUM ; } return extractPageRanges ( splitRanges ) ; }
private boolean validateAuthSchemes ( Set authSchemeSet ) throws PolicyException { if ( authSchemeSet . isEmpty ( ) ) { String args [ ] = { AUTH_SCHEME } ; throw new PolicyException ( ResBundleUtils . rbName , _STR , args , null ) ; } Iterator authSchemeSetIter = authSchemeSet . iterator ( ) ; authSchemes . clear ( ) ; while ( authSchemeSetIter . hasNext ( ) ) { try { String authScheme = ( String ) authSchemeSetIter . next ( ) ; authSchemes . add ( authScheme ) ; } catch ( ClassCastException e ) { String args [ ] = { AUTH_SCHEME } ; throw new PolicyException ( ResBundleUtils . rbName , _STR , args , null ) ; } } return _BOOL ; }
public static UUID fromUUIDAsURNStringToUUID ( String UUIDasURN ) { if ( ! UUIDasURN . startsWith ( UUIDHelper . UUID_as_a_URN_PREFIX ) ) { IMFErrorLogger imfErrorLogger = new IMFErrorLoggerImpl ( ) ; imfErrorLogger . addError ( IMFErrorLogger . IMFErrors . ErrorCodes . UUID_ERROR , IMFErrorLogger . IMFErrors . ErrorLevels . FATAL , String . format ( _STR + _STR , UUIDasURN , UUIDHelper . UUID_as_a_URN_PREFIX ) ) ; throw new IMFException ( String . format ( _STR , UUIDasURN , UUIDHelper . UUID_as_a_URN_PREFIX ) , imfErrorLogger ) ; } return UUID . fromString ( UUIDasURN . split ( UUIDHelper . UUID_as_a_URN_PREFIX ) [ _NUM ] ) ; }
public String readLine ( ) { String line ; try { line = scanner . nextLine ( ) ; } catch ( NoSuchElementException e ) { line = null ; } return line ; }
public static byte [ ] decode ( final String s ) { return Base64 . decode ( s , Base64 . NO_OPTIONS ) ; }
public static GradientPaint makeRedPaint ( final double width , final double height ) { return new GradientPaint ( _NUM , _NUM , new Color ( _NUM , _NUM , _NUM ) , ( float ) width / _NUM , ( float ) height / _NUM , new Color ( _NUM , _NUM , _NUM ) , _BOOL ) ; }
public static List < String > matchNumbers ( String text ) { String pattern = _STR ; Pattern pat = Pattern . compile ( pattern ) ; Matcher m = pat . matcher ( text ) ; List < String > matches = new ArrayList < String > ( ) ; while ( m . find ( ) ) { matches . add ( m . group ( ) ) ; } return matches ; }
private boolean deleteStorage ( TrackerServer trackerServer , String groupName , String storageIpAddr ) throws IOException { byte [ ] header ; byte [ ] bGroupName ; byte [ ] bs ; int len ; Socket trackerSocket ; trackerSocket = trackerServer . getSocket ( ) ; OutputStream out = trackerSocket . getOutputStream ( ) ; bs = groupName . getBytes ( ClientGlobal . g_charset ) ; bGroupName = new byte [ ProtoCommon . FDFS_GROUP_NAME_MAX_LEN ] ; if ( bs . length <= ProtoCommon . FDFS_GROUP_NAME_MAX_LEN ) { len = bs . length ; } else { len = ProtoCommon . FDFS_GROUP_NAME_MAX_LEN ; } Arrays . fill ( bGroupName , ( byte ) _NUM ) ; System . arraycopy ( bs , _NUM , bGroupName , _NUM , len ) ; int ipAddrLen ; byte [ ] bIpAddr = storageIpAddr . getBytes ( ClientGlobal . g_charset ) ; if ( bIpAddr . length < ProtoCommon . FDFS_IPADDR_SIZE ) { ipAddrLen = bIpAddr . length ; } else { ipAddrLen = ProtoCommon . FDFS_IPADDR_SIZE - _NUM ; } header = ProtoCommon . packHeader ( ProtoCommon . TRACKER_PROTO_CMD_SERVER_DELETE_STORAGE , ProtoCommon . FDFS_GROUP_NAME_MAX_LEN + ipAddrLen , ( byte ) _NUM ) ; byte [ ] wholePkg = new byte [ header . length + bGroupName . length + ipAddrLen ] ; System . arraycopy ( header , _NUM , wholePkg , _NUM , header . length ) ; System . arraycopy ( bGroupName , _NUM , wholePkg , header . length , bGroupName . length ) ; System . arraycopy ( bIpAddr , _NUM , wholePkg , header . length + bGroupName . length , ipAddrLen ) ; out . write ( wholePkg ) ; ProtoCommon . RecvPackageInfo pkgInfo = ProtoCommon . recvPackage ( trackerSocket . getInputStream ( ) , ProtoCommon . TRACKER_PROTO_CMD_RESP , _NUM ) ; this . errno = pkgInfo . errno ; return pkgInfo . errno == _NUM ; }
@ Override public UUID createEntryNode ( UUID parentNode ) { UUID uuid = UUID . randomUUID ( ) ; graphServer . addVertex ( uuid ) ; graphServer . addEdge ( uuid , parentNode ) ; return uuid ; }
protected void assertDeliveryStates ( final Collection < CustomerOrderDelivery > deliveries , final Map < String , String > expectedState ) { for ( CustomerOrderDelivery delivery : deliveries ) { assertEquals ( _STR + delivery . getDeliveryGroup ( ) + _STR + delivery . getDeliveryNum ( ) , expectedState . get ( delivery . getDeliveryGroup ( ) ) , delivery . getDeliveryStatus ( ) ) ; } }
@ Nullable private CompileScope createFacetsCompileScope ( @ NotNull final CompilerManager compilerManager , @ NotNull final VirtualFile [ ] files ) { final Set < Module > modules = New . set ( ) ; boolean facetsFound = _BOOL ; for ( final VirtualFile file : files ) { final Module module = ModuleUtilCore . findModuleForFile ( file , project ) ; if ( module != null ) { modules . add ( module ) ; if ( ! facetsFound ) { facetsFound = hasFacets ( module ) ; } } } if ( facetsFound ) { return compilerManager . createModulesCompileScope ( modules . toArray ( Module . EMPTY_ARRAY ) , _BOOL , _BOOL ) ; } return null ; }
@ Nullable @ WorkerThread static File writeBitmapToFile ( @ NonNull Bitmap bitmap , @ NonNull File file ) { FileOutputStream fileStream = null ; try { ByteArrayOutputStream byteStream = new ByteArrayOutputStream ( ) ; bitmap . compress ( Bitmap . CompressFormat . PNG , _NUM , byteStream ) ; fileStream = new FileOutputStream ( file ) ; fileStream . write ( byteStream . toByteArray ( ) ) ; return file ; } catch ( IOException e ) { Log . e ( TAG , e . getMessage ( ) , e ) ; } finally { if ( fileStream != null ) { try { fileStream . close ( ) ; } catch ( IOException e ) { Log . e ( TAG , e . getMessage ( ) , e ) ; } } } return null ; }
public static Sentence parse ( final String text , final ConversationContext ctx ) { String txt ; if ( text == null ) { txt = _STR ; } else { if ( ( ctx != null ) && ctx . isForMatching ( ) ) { final ExpressionMatcher matcher = new ExpressionMatcher ( ) ; txt = matcher . readMatchingFlags ( text ) ; if ( matcher . isAnyFlagSet ( ) ) { return matcher . parseSentence ( txt , ctx ) ; } } else { txt = text ; } } txt = txt . trim ( ) ; final SentenceImplementation sentence = new SentenceImplementation ( ctx , txt ) ; try { final ConversationParser parser = new ConversationParser ( sentence ) ; sentence . parse ( parser ) ; sentence . classifyWords ( parser ) ; if ( ( ctx != null ) && ctx . getMergeExpressions ( ) ) { sentence . evaluateSentenceType ( ) ; sentence . mergeWords ( ) ; if ( ! ctx . isForMatching ( ) ) { sentence . standardizeSentenceType ( ) ; sentence . performaAliasing ( ) ; } } sentence . setError ( parser . getErrorString ( ) ) ; } catch ( final Exception e ) { LOGGER . error ( _STR + text + _STR ) ; sentence . setError ( e . getMessage ( ) ) ; e . printStackTrace ( ) ; } return sentence ; }
public ElemTemplateElement replaceChild ( ElemTemplateElement newChildElem , ElemTemplateElement oldChildElem ) { if ( oldChildElem == null || oldChildElem . getParentElem ( ) != this ) return null ; ElemTemplateElement prev = oldChildElem . getPreviousSiblingElem ( ) ; if ( null != prev ) prev . m_nextSibling = newChildElem ; if ( m_firstChild == oldChildElem ) m_firstChild = newChildElem ; newChildElem . m_parentNode = this ; oldChildElem . m_parentNode = null ; newChildElem . m_nextSibling = oldChildElem . m_nextSibling ; oldChildElem . m_nextSibling = null ; return newChildElem ; }
protected int hash ( Object key1 , Object key2 , Object key3 ) { int h = _NUM ; if ( key1 != null ) { h ^= key1 . hashCode ( ) ; } if ( key2 != null ) { h ^= key2 . hashCode ( ) ; } if ( key3 != null ) { h ^= key3 . hashCode ( ) ; } h += ~ ( h << _NUM ) ; h ^= ( h > > > _NUM ) ; h += ( h << _NUM ) ; h ^= ( h > > > _NUM ) ; return h ; }
public void flush ( ) throws IOException { flushBuffer ( ) ; _outputStream . flush ( ) ; }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( _STR ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
private void addEntryToInfoList ( Entry entry , List < EntryInfo > entryInfoList ) { if ( entryInfoList != null ) { String typeToAdd = entry . getType ( ) ; if ( typeToAdd . equals ( DbLogic . Constants . quotation ) ) { typeToAdd = DbLogic . Constants . note ; } entryInfoList . add ( new EntryInfo ( entry . getId ( ) , entry . getNoteOrTitle ( _STR ) , entry . getQuotation ( _STR ) , entry . getIsPublic ( ) , entry . hasFirstChildId ( ) , entry . hasParentId ( ) , typeToAdd ) ) ; } }
private void updateSliding ( float newPositionNormalized ) { currentSlide = newPositionNormalized ; state = currentSlide == _NUM ? EXPANDED : currentSlide == _NUM ? COLLAPSED : SLIDING ; float slideY = Math . abs ( ( currentSlide * maxSlide ) - maxSlide ) ; slidableView . setY ( slideY ) ; invalidate ( ) ; notifyListeners ( currentSlide ) ; }
void flush ( VcfWriter writer ) throws IOException { if ( mPrevRecord != null ) { if ( ! mPrevDense ) { writeCount ( writer , mPrevRecord ) ; } else { mVcfFilterStatistics . increment ( Stat . DENSITY_WINDOW_COUNT ) ; } } mPrevRecord = null ; mPrevDense = _BOOL ; }
public VideoStream ( String streamStr ) { String [ ] args = streamStr . split ( _STR ) ; Map < String , String > argMap = new HashMap < String , String > ( ) ; for ( String arg : args ) { String [ ] argsValues = arg . split ( _STR ) ; if ( argsValues != null ) { if ( argsValues . length >= _NUM ) { argMap . put ( argsValues [ _NUM ] , argsValues [ _NUM ] ) ; } } } mUrl = argMap . get ( _STR ) ; }
public boolean equals ( String str ) { if ( str == null ) return _BOOL ; if ( _length != str . length ( ) ) return _BOOL ; for ( int i = _length , j = _offset + _length ; -- i >= _NUM ; ) { if ( _array [ -- j ] != str . charAt ( i ) ) return _BOOL ; } return _BOOL ; }
protected void flush ( ) { stream . flush ( ) ; }
private ServerStarter startServers ( ) throws Exception { ServerStarter srvStarter = new ServerStarter ( ) ; Thread t = new Thread ( srvStarter ) ; t . setDaemon ( _BOOL ) ; t . setName ( _STR ) ; t . start ( ) ; srvStarter . waitForServerStart ( ) ; return srvStarter ; }
public Pagination evaluate ( final Class entityClass ) { Paginate paginate = entityClass != null ? ( Paginate ) entityClass . getAnnotation ( Paginate . class ) : null ; int defaultLimit = paginate != null ? paginate . defaultLimit ( ) : DEFAULT_PAGE_LIMIT ; int maxLimit = paginate != null ? paginate . maxLimit ( ) : MAX_PAGE_LIMIT ; evaluate ( defaultLimit , maxLimit ) ; generateTotals = generateTotals && ( paginate == null || paginate . countable ( ) ) ; return this ; }
public RuntimeCollector ( Algorithm algorithm , int frequency , ResultFileWriter writer ) { super ( algorithm , frequency , FrequencyType . EVALUATIONS ) ; this . writer = writer ; startTime = System . nanoTime ( ) ; }
public boolean deregisterServiceProvider ( Object provider ) { Object oprovider = map . get ( provider . getClass ( ) ) ; if ( provider == oprovider ) { map . remove ( provider . getClass ( ) ) ; poset . remove ( provider ) ; if ( provider instanceof RegisterableService ) { RegisterableService rs = ( RegisterableService ) provider ; rs . onDeregistration ( registry , category ) ; } return _BOOL ; } return _BOOL ; }
public NewestFirstComparator ( Date now ) { Preconditions . checkNotNull ( now ) ; mNow = new Date ( now . getTime ( ) + MILLIS_IN_DAY ) ; }
protected void update ( Comparable x , Object y ) { int index = indexOf ( x ) ; if ( index < _NUM ) { throw new SeriesException ( _STR + x ) ; } else { ComparableObjectItem item = getDataItem ( index ) ; item . setObject ( y ) ; fireSeriesChanged ( ) ; } }
public void writeField ( String name , float value ) throws java . io . IOException { writeField ( name , Float . toString ( value ) ) ; }
public byte [ ] decodeData ( byte [ ] data , int numErrorCorrectionBytes ) throws ReedSolomonException , DataTooLargeException { if ( data == null || data . length == _NUM ) { return null ; } if ( data . length > _NUM ) { throw new DataTooLargeException ( _STR ) ; } int [ ] dataInts = new int [ data . length ] ; for ( int i = _NUM ; i < data . length ; i ++ ) { dataInts [ i ] = data [ i ] & _NUM ; } int totalBytes = data . length - numErrorCorrectionBytes ; decoder . decode ( dataInts , numErrorCorrectionBytes ) ; ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; for ( int i = _NUM ; i < totalBytes && i < dataInts . length ; i ++ ) { bos . write ( dataInts [ i ] ) ; } return bos . toByteArray ( ) ; }
public static ArrayList < String > stringToArrayList ( String string ) { return new ArrayList < > ( Arrays . asList ( string . split ( _STR ) ) ) ; }
public Shape createScrollButtonApart ( int x , int y , int w , int h ) { path . reset ( ) ; path . moveTo ( x , y ) ; path . lineTo ( x , y + h ) ; path . lineTo ( x + w , y + h ) ; addScrollGapPath ( x , y , w , h , _BOOL ) ; path . closePath ( ) ; return path ; }
void removeAllViewsFromAdapter ( ViewPager pager ) { mViews . clear ( ) ; pager . removeAllViews ( ) ; mIsViewPagerInIntentionallyInconsistentState = _BOOL ; }
public static boolean isValidMobile ( @ NonNull String mobile ) { if ( ! TextUtils . isEmpty ( mobile ) && mobile . length ( ) == _NUM ) { if ( mobile . startsWith ( _STR ) || mobile . startsWith ( _STR ) || mobile . startsWith ( _STR ) ) { return _BOOL ; } } return _BOOL ; }
public String convertError ( String filename , int line , int column , String message ) { String srcFilename = null ; int destLine = _NUM ; int srcLine = _NUM ; for ( int i = _NUM ; i < _lines . size ( ) ; i ++ ) { Line map = _lines . get ( i ) ; if ( filename != null && ! filename . endsWith ( _dstFilename ) ) { } else if ( map . _dstLine <= line && line <= map . getLastDestinationLine ( ) ) { srcFilename = map . _srcFilename ; srcLine = map . getSourceLine ( line ) ; } } if ( srcFilename != null ) return srcFilename + _STR + srcLine + _STR + message ; else return filename + _STR + line + _STR + message ; }
public static Number sinh ( Number a ) { return Math . sinh ( a . doubleValue ( ) ) ; }
public void addNotification ( @ NotNull Notification notification ) { NotificationItem item = new NotificationItem ( resources , notification , delegate , panel ) ; notificationWidget . add ( notification ) ; }
protected boolean isAttributesModified ( ) { if ( attributes != null ) { return ( attributes . isEmpty ( ) ) ? _BOOL : _BOOL ; } return _BOOL ; }
public IOUtils ( ) { super ( ) ; }
@ Nullable public static IgnoreDescriptor forMethod ( Class cls , Method mthd ) { if ( mthd . isAnnotationPresent ( IgniteIgnore . class ) ) { IgniteIgnore ignore = mthd . getAnnotation ( IgniteIgnore . class ) ; String reason = ignore . value ( ) ; if ( F . isEmpty ( reason ) ) throw new IllegalArgumentException ( _STR + cls . getName ( ) + _STR + mthd . getName ( ) + _STR ) ; return new IgnoreDescriptor ( reason , ignore . forceFailure ( ) ) ; } else return null ; }
protected void runFullImport ( String dataConfig , Map < String , String > extraParams ) throws Exception { HashMap < String , String > params = new HashMap < > ( ) ; params . put ( _STR , _STR ) ; params . put ( _STR , _STR ) ; params . put ( _STR , dataConfig ) ; params . put ( _STR , _STR ) ; params . put ( _STR , _STR ) ; params . putAll ( extraParams ) ; NamedList l = new NamedList ( ) ; for ( Map . Entry < String , String > e : params . entrySet ( ) ) { l . add ( e . getKey ( ) , e . getValue ( ) ) ; } LocalSolrQueryRequest request = new LocalSolrQueryRequest ( h . getCore ( ) , l ) ; h . query ( _STR , request ) ; }
public static ModifiableDBIDs randomSample ( DBIDs source , int k , Random random ) { if ( k < _NUM || k > source . size ( ) ) { throw new IllegalArgumentException ( _STR + k + _STR + source . size ( ) + _STR ) ; } if ( random == null ) { random = new FastNonThreadsafeRandom ( ) ; } if ( k < source . size ( ) > > _NUM ) { ArrayDBIDs aids = DBIDUtil . ensureArray ( source ) ; DBIDArrayIter iter = aids . iter ( ) ; HashSetModifiableDBIDs sample = DBIDUtil . newHashSet ( k ) ; while ( sample . size ( ) < k ) { iter . seek ( random . nextInt ( aids . size ( ) ) ) ; sample . add ( iter ) ; } return sample ; } else { ArrayModifiableDBIDs sample = DBIDUtil . newArray ( source ) ; randomShuffle ( sample , random , k ) ; for ( int i = sample . size ( ) - _NUM ; i >= k ; i -- ) { sample . remove ( i ) ; } return sample ; } }
protected int drawMessageSize ( ) { int sizeDiff = sizeRange [ _NUM ] == sizeRange [ _NUM ] ? _NUM : rng . nextInt ( sizeRange [ _NUM ] - sizeRange [ _NUM ] ) ; return sizeRange [ _NUM ] + sizeDiff ; }
public static String [ ] grabArgs ( String signature ) { Matcher matcher = sigRE . matcher ( signature ) ; boolean b = matcher . matches ( ) ; if ( ! b && matcher . groupCount ( ) != _NUM ) logger . error ( _STR , signature ) ; String args = matcher . group ( _NUM ) ; if ( args . isEmpty ( ) ) return new String [ _NUM ] ; return args . split ( _STR ) ; }
public void removeSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { return ; } mListeners . remove ( listener ) ; }
public void test_engineCreateSSLEngine_01 ( ) { SSLContextSpiImpl ssl = new SSLContextSpiImpl ( ) ; try { SSLEngine sleng = ssl . engineCreateSSLEngine ( ) ; fail ( _STR ) ; } catch ( RuntimeException re ) { String str = re . getMessage ( ) ; if ( ! str . equals ( _STR ) ) fail ( _STR + str ) ; } catch ( Exception e ) { fail ( _STR + e + _STR ) ; } }
public void processDispatch ( UniformPair < EventBean [ ] > events ) { if ( ! forClauseDelivery ) { dispatchInternal ( events ) ; return ; } if ( ( groupDeliveryExpressions == null ) || ( groupDeliveryExpressions . length == _NUM ) ) { UniformPair < EventBean [ ] > todeliver = new UniformPair < EventBean [ ] > ( null , null ) ; if ( events != null ) { if ( events . getFirst ( ) != null ) { for ( EventBean theEvent : events . getFirst ( ) ) { todeliver . setFirst ( new EventBean [ ] { theEvent } ) ; dispatchInternal ( todeliver ) ; } todeliver . setFirst ( null ) ; } if ( events . getSecond ( ) != null ) { for ( EventBean theEvent : events . getSecond ( ) ) { todeliver . setSecond ( new EventBean [ ] { theEvent } ) ; dispatchInternal ( todeliver ) ; } todeliver . setSecond ( null ) ; } } return ; } Map < Object , UniformPair < EventBean [ ] > > groups ; try { groups = getGroupedResults ( events ) ; } catch ( RuntimeException ex ) { log . error ( _STR + ex . getMessage ( ) + _STR , ex ) ; dispatchInternal ( events ) ; return ; } for ( Map . Entry < Object , UniformPair < EventBean [ ] > > group : groups . entrySet ( ) ) { dispatchInternal ( group . getValue ( ) ) ; } }
public V put ( K key , V value ) { final int hash ; int index ; if ( key == null ) { hash = _NUM ; index = indexOfNull ( ) ; } else { hash = key . hashCode ( ) ; index = indexOf ( key , hash ) ; } if ( index >= _NUM ) { index = ( index << _NUM ) + _NUM ; final V old = ( V ) mArray [ index ] ; mArray [ index ] = value ; return old ; } index = ~ index ; if ( mSize >= mHashes . length ) { final int n = mSize >= ( BASE_SIZE * _NUM ) ? ( mSize + ( mSize > > _NUM ) ) : ( mSize >= BASE_SIZE ? ( BASE_SIZE * _NUM ) : BASE_SIZE ) ; final int [ ] ohashes = mHashes ; final Object [ ] oarray = mArray ; allocArrays ( n ) ; if ( mHashes . length > _NUM ) { System . arraycopy ( ohashes , _NUM , mHashes , _NUM , ohashes . length ) ; System . arraycopy ( oarray , _NUM , mArray , _NUM , oarray . length ) ; } freeArrays ( ohashes , oarray , mSize ) ; } if ( index < mSize ) { System . arraycopy ( mHashes , index , mHashes , index + _NUM , mSize - index ) ; System . arraycopy ( mArray , index << _NUM , mArray , ( index + _NUM ) << _NUM , ( mSize - index ) << _NUM ) ; } mHashes [ index ] = hash ; mArray [ index << _NUM ] = key ; mArray [ ( index << _NUM ) + _NUM ] = value ; mSize ++ ; return null ; }
protected void reset ( ) { Arrays . fill ( m_isCandidate , _BOOL ) ; }
protected void redefine ( int nodetype , String namespace , String localName ) { this . nodetype = nodetype ; this . namespace = namespace ; this . localName = localName ; this . hash = nodetype + namespace . hashCode ( ) + localName . hashCode ( ) ; }
public void putLong ( long pos , long val ) { unsafe . putLong ( pos + addr , val ) ; }
public void lineTo ( float x , float y ) { mPoints . add ( PathPoint . lineTo ( x , y ) ) ; }
public boolean deleteRSetStep ( URI rpSystemId , List < URI > volumeIds , String token ) throws InternalException { List < String > replicationSetNames = new ArrayList < String > ( ) ; try { List < RecoverPointVolumeProtectionInfo > volumeProtectionInfoList = new ArrayList < RecoverPointVolumeProtectionInfo > ( ) ; ProtectionSystem rpSystem = _dbClient . queryObject ( ProtectionSystem . class , rpSystemId ) ; RecoverPointClient rp = RPHelper . getRecoverPointClient ( rpSystem ) ; for ( URI volumeId : volumeIds ) { Volume volume = _dbClient . queryObject ( Volume . class , volumeId ) ; RecoverPointVolumeProtectionInfo volumeProtectionInfo = rp . getProtectionInfoForVolume ( RPHelper . getRPWWn ( volume . getId ( ) , _dbClient ) ) ; Volume sourceVolume = RPHelper . getRPSourceVolume ( _dbClient , volume ) ; VirtualPool virtualPool = _dbClient . queryObject ( VirtualPool . class , sourceVolume . getVirtualPool ( ) ) ; volumeProtectionInfo . setMetroPoint ( VirtualPool . vPoolSpecifiesMetroPoint ( virtualPool ) ) ; volumeProtectionInfoList . add ( volumeProtectionInfo ) ; replicationSetNames . add ( volume . getRSetName ( ) ) ; } if ( ! volumeProtectionInfoList . isEmpty ( ) ) { rp . deleteReplicationSets ( volumeProtectionInfoList ) ; } WorkflowStepCompleter . stepSucceded ( token ) ; } catch ( Exception e ) { _log . error ( String . format ( _STR , replicationSetNames . toString ( ) ) ) ; return stepFailed ( token , e , _STR ) ; } return _BOOL ; }
private void moveToNext ( ) { checkMainThread ( ) ; scheduled . set ( _BOOL ) ; Bitmap next = pending . poll ( ) ; if ( next != null ) { if ( current != null && ! finished . offer ( current ) ) throw new RuntimeException ( _STR ) ; current = next ; invalidateSelf ( ) ; ensureScheduled ( ) ; frameAvailableSubject . onNext ( null ) ; fpsCounter . update ( ) ; } }
public void addChangingListener ( OnWheelChangedListener listener ) { changingListeners . add ( listener ) ; }
public String rma ( Properties ctx , int WindowNo , GridTab mTab , GridField mField , Object value ) { Integer M_RMA_ID = ( Integer ) value ; if ( M_RMA_ID == null || M_RMA_ID . intValue ( ) == _NUM ) return _STR ; if ( isCalloutActive ( ) ) return _STR ; MRMA rma = new MRMA ( ctx , M_RMA_ID . intValue ( ) , null ) ; MInOut originalReceipt = rma . getShipment ( ) ; if ( rma . get_ID ( ) != _NUM ) { mTab . setValue ( _STR , originalReceipt . getDateOrdered ( ) ) ; mTab . setValue ( _STR , originalReceipt . getPOReference ( ) ) ; mTab . setValue ( _STR , new Integer ( originalReceipt . getAD_Org_ID ( ) ) ) ; mTab . setValue ( _STR , new Integer ( originalReceipt . getAD_OrgTrx_ID ( ) ) ) ; mTab . setValue ( _STR , new Integer ( originalReceipt . getC_Activity_ID ( ) ) ) ; mTab . setValue ( _STR , new Integer ( originalReceipt . getC_Campaign_ID ( ) ) ) ; mTab . setValue ( _STR , new Integer ( originalReceipt . getC_Project_ID ( ) ) ) ; mTab . setValue ( _STR , new Integer ( originalReceipt . getUser1_ID ( ) ) ) ; mTab . setValue ( _STR , new Integer ( originalReceipt . getUser2_ID ( ) ) ) ; mTab . setValue ( _STR , new Integer ( originalReceipt . getM_Warehouse_ID ( ) ) ) ; mTab . setValue ( _STR , originalReceipt . getDeliveryRule ( ) ) ; mTab . setValue ( _STR , originalReceipt . getDeliveryViaRule ( ) ) ; mTab . setValue ( _STR , new Integer ( originalReceipt . getM_Shipper_ID ( ) ) ) ; mTab . setValue ( _STR , originalReceipt . getFreightCostRule ( ) ) ; mTab . setValue ( _STR , originalReceipt . getFreightAmt ( ) ) ; mTab . setValue ( _STR , new Integer ( originalReceipt . getC_BPartner_ID ( ) ) ) ; mTab . setValue ( _STR , new Integer ( originalReceipt . getC_BPartner_Location_ID ( ) ) ) ; if ( originalReceipt . getAD_User_ID ( ) > _NUM ) mTab . setValue ( _STR , new Integer ( originalReceipt . getAD_User_ID ( ) ) ) ; else mTab . setValue ( _STR , null ) ; } return _STR ; }
public final long readLong ( ) throws java . io . IOException { readFully ( scratch , _NUM , _NUM ) ; int h = ( ( scratch [ _NUM ] & _NUM ) << _NUM ) | ( ( scratch [ _NUM ] & _NUM ) << _NUM ) | ( ( scratch [ _NUM ] & _NUM ) << _NUM ) | ( ( scratch [ _NUM ] & _NUM ) << _NUM ) ; int l = ( ( scratch [ _NUM ] & _NUM ) << _NUM ) | ( ( scratch [ _NUM ] & _NUM ) << _NUM ) | ( ( scratch [ _NUM ] & _NUM ) << _NUM ) | ( ( scratch [ _NUM ] & _NUM ) << _NUM ) ; return ( ( ( long ) h ) << _NUM ) | ( ( long ) l ) & _NUM ; }
public void testGetColumnsMetaData ( ) throws Exception { DatabaseMetaData dmd = con . getMetaData ( ) ; ResultSet rs = dmd . getColumns ( null , null , _STR , null ) ; assertNotNull ( rs ) ; ResultSetMetaData rsmd = rs . getMetaData ( ) ; assertNotNull ( rsmd . getCatalogName ( _NUM ) ) ; assertNotNull ( rsmd . getColumnClassName ( _NUM ) ) ; rsmd . getColumnCount ( ) ; assertTrue ( _NUM != rsmd . getColumnDisplaySize ( _NUM ) ) ; assertNotNull ( rsmd . getColumnLabel ( _NUM ) ) ; assertNotNull ( rsmd . getColumnName ( _NUM ) ) ; rsmd . getColumnType ( _NUM ) ; assertNotNull ( rsmd . getColumnTypeName ( _NUM ) ) ; rsmd . getPrecision ( _NUM ) ; rsmd . getScale ( _NUM ) ; assertNotNull ( rsmd . getSchemaName ( _NUM ) ) ; assertNotNull ( rsmd . getTableName ( _NUM ) ) ; rsmd . isAutoIncrement ( _NUM ) ; rsmd . isCaseSensitive ( _NUM ) ; rsmd . isCurrency ( _NUM ) ; rsmd . isDefinitelyWritable ( _NUM ) ; rsmd . isNullable ( _NUM ) ; rsmd . isReadOnly ( _NUM ) ; rsmd . isSearchable ( _NUM ) ; rsmd . isSigned ( _NUM ) ; rsmd . isWritable ( _NUM ) ; rs . close ( ) ; }
private Log discoverLogImplementation ( String logCategory ) throws LogConfigurationException { if ( isDiagnosticsEnabled ( ) ) { logDiagnostic ( _STR ) ; } initConfiguration ( ) ; Log result = null ; String specifiedLogClassName = findUserSpecifiedLogClassName ( ) ; if ( specifiedLogClassName != null ) { if ( isDiagnosticsEnabled ( ) ) { logDiagnostic ( _STR + specifiedLogClassName + _STR ) ; } result = createLogFromClass ( specifiedLogClassName , logCategory , _BOOL ) ; if ( result == null ) { StringBuffer messageBuffer = new StringBuffer ( _STR ) ; messageBuffer . append ( specifiedLogClassName ) ; messageBuffer . append ( _STR ) ; if ( specifiedLogClassName != null ) { informUponSimilarName ( messageBuffer , specifiedLogClassName , LOGGING_IMPL_LOG4J_LOGGER ) ; informUponSimilarName ( messageBuffer , specifiedLogClassName , LOGGING_IMPL_JDK14_LOGGER ) ; informUponSimilarName ( messageBuffer , specifiedLogClassName , LOGGING_IMPL_LUMBERJACK_LOGGER ) ; informUponSimilarName ( messageBuffer , specifiedLogClassName , LOGGING_IMPL_SIMPLE_LOGGER ) ; } throw new LogConfigurationException ( messageBuffer . toString ( ) ) ; } return result ; } if ( isDiagnosticsEnabled ( ) ) { logDiagnostic ( _STR + _STR ) ; } for ( int i = _NUM ; ( i < classesToDiscover . length ) && ( result == null ) ; ++ i ) { result = createLogFromClass ( classesToDiscover [ i ] , logCategory , _BOOL ) ; } if ( result == null ) { throw new LogConfigurationException ( _STR ) ; } return result ; }
public NSData ( File file ) throws IOException { bytes = new byte [ ( int ) file . length ( ) ] ; RandomAccessFile raf = new RandomAccessFile ( file , _STR ) ; raf . read ( bytes ) ; raf . close ( ) ; }
public ViaHeader createViaHeader ( String host , int port , String transport , String branch ) throws ParseException , InvalidArgumentException { if ( host == null || transport == null ) throw new NullPointerException ( _STR ) ; Via via = new Via ( ) ; if ( branch != null ) via . setBranch ( branch ) ; if ( host . indexOf ( _STR ) >= _NUM && host . indexOf ( _STR ) < _NUM ) { if ( stripAddressScopeZones ) { int zoneStart = host . indexOf ( _STR ) ; if ( zoneStart != - _NUM ) host = host . substring ( _NUM , zoneStart ) ; } host = _STR + host + _STR ; } via . setHost ( host ) ; via . setPort ( port ) ; via . setTransport ( transport ) ; return via ; }
public String toString ( ) { return super . toString ( ) + _STR + recordMap . size ( ) + _STR + firstOffset + _STR + releaseBuffer + _STR + prefixWrites + _STR + useChecksum + _STR + bytesWritten ( ) + _STR + remaining ( ) + _STR + m_removed + _STR ; }
public void dispose ( ) { logDebug ( _STR ) ; mSetupDone = _BOOL ; if ( mServiceConn != null ) { logDebug ( _STR ) ; if ( mContext != null ) mContext . unbindService ( mServiceConn ) ; } mDisposed = _BOOL ; mContext = null ; mServiceConn = null ; mService = null ; mPurchaseListener = null ; }
public int find ( String string ) { if ( string == null ) { return - _NUM ; } for ( int i = _NUM ; i != m_stringOffsets . length ; ++ i ) { int offset = m_stringOffsets [ i ] ; int length = getShort ( m_strings , offset ) ; if ( length != string . length ( ) ) { continue ; } int j = _NUM ; for ( ; j != length ; ++ j ) { offset += _NUM ; if ( string . charAt ( j ) != getShort ( m_strings , offset ) ) { break ; } } if ( j == length ) { return i ; } } return - _NUM ; }
private void handleJsonCreateAccount ( RequestAndResponse requestAndResponse ) throws IOException , ServletException { requestAndResponse . setResponseContentTypeJson ( ) ; String userName , password , password2 , email ; boolean mayContact = _BOOL ; String csrft ; try { final JsonNodeHelper json = getJsonNode ( requestAndResponse ) ; userName = json . getString ( _STR ) ; password = json . getString ( _STR ) ; password2 = json . getString ( _STR ) ; email = json . getString ( _STR ) ; mayContact = json . getBoolean ( _STR ) ; csrft = json . getString ( _STR ) ; } catch ( final IOException e ) { returnJson400 ( requestAndResponse , servletText . errorJson ( ) ) ; return ; } if ( userName != null ) { userName = userName . toLowerCase ( ) ; } if ( isTheCsrftWrong ( requestAndResponse , csrft ) ) { returnJson400 ( requestAndResponse , servletText . errorWrongCsrft ( ) ) ; return ; } if ( ! allowSelfSignUp ) { returnJson400 ( requestAndResponse , servletText . errorSelfSignUpNotAllowed ( ) ) ; return ; } if ( userName == null || userName . isEmpty ( ) ) { returnJson400 ( requestAndResponse , servletText . errorUsernameMustNotBeBlank ( ) ) ; return ; } if ( password == null || password . isEmpty ( ) ) { returnJson400 ( requestAndResponse , servletText . errorFirstPasswordMustBeSet ( _BOOL , null ) ) ; return ; } if ( password == null || password2 . isEmpty ( ) ) { returnJson400 ( requestAndResponse , servletText . errorSecondPasswordMustBeSet ( _BOOL , null ) ) ; return ; } if ( ! password2 . equals ( password ) ) { returnJson400 ( requestAndResponse , servletText . errorPasswordsMustMatch ( ) ) ; return ; } if ( ! AccountAttributeValidator . isUserNameValid ( userName ) ) { returnJson400 ( requestAndResponse , servletText . errorUserNameIsNotValid ( ) ) ; return ; } if ( ! AccountAttributeValidator . isPasswordValid ( password ) ) { returnJson400 ( requestAndResponse , servletText . errorPasswordIsNotValid ( ) ) ; return ; } if ( email != null && email . isEmpty ( ) ) { email = null ; } if ( email != null && ! AccountAttributeValidator . isEmailValid ( email ) ) { returnJson400 ( requestAndResponse , servletText . errorEmailIsNotValid ( ) ) ; return ; } try { User user = dbLogic . getUserByUserName ( userName ) ; if ( user != null ) { returnJson400 ( requestAndResponse , servletText . errorUserNameIsAlreadyTaken ( ) ) ; return ; } user = dbLogic . createUser ( userName ) ; if ( user == null ) { returnJson400 ( requestAndResponse , servletText . errorCouldNotCreateAccount ( ) ) ; return ; } user . setPassword ( DigestUtils . sha1Hex ( password ) ) ; user . setEmail ( email ) ; user . setMayContact ( mayContact ) ; mapSessionToUser ( requestAndResponse , user . getId ( ) ) ; dbLogic . commit ( ) ; returnJson200 ( requestAndResponse ) ; } catch ( final PersistenceException e ) { logger . log ( Level . INFO , _STR , e ) ; returnJson500 ( requestAndResponse , servletText . errorInternalDatabase ( ) ) ; } }
private Object [ ] resolveParameters ( Executable executable , Optional < Object > target , Object outerInstance , ExtensionContext extensionContext , ExtensionRegistry extensionRegistry ) { Preconditions . notNull ( target , _STR ) ; Parameter [ ] parameters = executable . getParameters ( ) ; Object [ ] values = new Object [ parameters . length ] ; int start = _NUM ; if ( outerInstance != null ) { values [ _NUM ] = outerInstance ; start = _NUM ; } for ( int i = start ; i < parameters . length ; i ++ ) { ParameterContext parameterContext = new DefaultParameterContext ( parameters [ i ] , i , target ) ; values [ i ] = resolveParameter ( parameterContext , executable , extensionContext , extensionRegistry ) ; } return values ; }
public static boolean isValidNameChar ( char c ) { return isValidNameStartChar ( c ) || ( c >= _STR && c <= _STR ) ; }
public void supportTlsIntolerantServer ( SSLSocket socket ) { socket . setEnabledProtocols ( new String [ ] { _STR } ) ; }
protected static boolean id_start_char ( int ch ) { return ( ch >= _STR && ch <= _STR ) || ( ch >= _STR && ch <= _STR ) || ( ch == _STR ) ; }
public int hashCode ( ) { int fhash = ( family != null ) ? family . hashCode ( ) : _NUM ; return fhash ^ style ^ size ; }
private CommandHandlerEnum ( final Command command1 ) { this . command = command1 ; }
public static boolean isFloat ( String desc ) { return desc . endsWith ( _STR ) ; }
public void componentResized ( ComponentEvent e ) { JScrollBar bar = getVerticalScrollBar ( ) ; int incr = ( int ) ( getSize ( ) . getHeight ( ) - ( bar . getUnitIncrement ( _NUM ) * _NUM ) ) ; getVerticalScrollBar ( ) . setBlockIncrement ( incr ) ; }
public Arg ( String aName , String desc , int expectedNumberOfArguments , boolean expectDashedArguments ) { name = aName ; description = desc ; numExpectedValues = expectedNumberOfArguments ; c = name . charAt ( _NUM ) ; dashedArguments = expectDashedArguments ; }
private boolean remove ( Object o , Object [ ] snapshot , int index ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { Object [ ] current = getArray ( ) ; int len = current . length ; if ( snapshot != current ) findIndex : { int prefix = Math . min ( index , len ) ; for ( int i = _NUM ; i < prefix ; i ++ ) { if ( current [ i ] != snapshot [ i ] && eq ( o , current [ i ] ) ) { index = i ; break findIndex ; } } if ( index >= len ) return _BOOL ; if ( current [ index ] == o ) break findIndex ; index = indexOf ( o , current , index , len ) ; if ( index < _NUM ) return _BOOL ; } Object [ ] newElements = new Object [ len - _NUM ] ; System . arraycopy ( current , _NUM , newElements , _NUM , index ) ; System . arraycopy ( current , index + _NUM , newElements , index , len - index - _NUM ) ; setArray ( newElements ) ; return _BOOL ; } finally { lock . unlock ( ) ; } }
public void removeModel ( Model model ) { models . remove ( model ) ; }
public void readMap ( int map_Number ) { InputStream map_file ; try { map_file = new FileInputStream ( _STR + map_Number + _STR ) ; try { byte [ ] data = new byte [ map_file . available ( ) ] ; map_file . read ( data ) ; map_file . close ( ) ; String load_data = new String ( data , _STR ) ; makeMap ( load_data ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } catch ( FileNotFoundException e1 ) { e1 . printStackTrace ( ) ; } }
public static double hoeffdingLn ( double trials , double observed , double prob ) { return - _NUM * Math . pow ( trials * prob - observed , _NUM ) / trials ; }
private void translateMatrixAfterRotate ( int axis , float trans , float prevImageSize , float imageSize , int prevViewSize , int viewSize , int drawableSize ) { if ( imageSize < viewSize ) { m [ axis ] = ( viewSize - ( drawableSize * m [ Matrix . MSCALE_X ] ) ) * _NUM ; } else if ( trans > _NUM ) { m [ axis ] = - ( ( imageSize - viewSize ) * _NUM ) ; } else { float percentage = ( Math . abs ( trans ) + ( _NUM * prevViewSize ) ) / prevImageSize ; m [ axis ] = - ( ( percentage * imageSize ) - ( viewSize * _NUM ) ) ; } }
public void run ( ) { RandomAccessFile reader = null ; try { long last = _NUM ; long position = _NUM ; while ( run && reader == null ) { try { reader = new RandomAccessFile ( file , RAF_MODE ) ; } catch ( FileNotFoundException e ) { listener . fileNotFound ( ) ; } if ( reader == null ) { try { Thread . sleep ( delayMillis ) ; } catch ( InterruptedException e ) { } } else { position = end ? file . length ( ) : _NUM ; last = System . currentTimeMillis ( ) ; reader . seek ( position ) ; } } while ( run ) { boolean newer = FileUtils . isFileNewer ( file , last ) ; long length = file . length ( ) ; if ( length < position ) { listener . fileRotated ( ) ; try { RandomAccessFile save = reader ; reader = new RandomAccessFile ( file , RAF_MODE ) ; position = _NUM ; IOUtils . closeQuietly ( save ) ; } catch ( FileNotFoundException e ) { listener . fileNotFound ( ) ; } continue ; } else { if ( length > position ) { position = readLines ( reader ) ; last = System . currentTimeMillis ( ) ; } else if ( newer ) { position = _NUM ; reader . seek ( position ) ; position = readLines ( reader ) ; last = System . currentTimeMillis ( ) ; } } if ( reOpen ) { IOUtils . closeQuietly ( reader ) ; } try { Thread . sleep ( delayMillis ) ; } catch ( InterruptedException e ) { } if ( run && reOpen ) { reader = new RandomAccessFile ( file , RAF_MODE ) ; reader . seek ( position ) ; } } } catch ( Exception e ) { listener . handle ( e ) ; } finally { IOUtils . closeQuietly ( reader ) ; } }
@ Override public void onNestedPreScroll ( View target , int dx , int dy , int [ ] consumed ) { if ( ( ! mPullRefreshEnable && ! mPullLoadEnable ) ) { return ; } if ( Math . abs ( dy ) > _NUM ) { return ; } if ( ! isConfirm ) { if ( dy < _NUM && ! canChildScrollUp ( ) ) { mCurrentAction = PULL_REFRESH ; isConfirm = _BOOL ; } else if ( dy > _NUM && ! canChildScrollDown ( ) ) { mCurrentAction = LOAD_MORE ; isConfirm = _BOOL ; } } if ( moveSpinner ( - dy ) ) { consumed [ _NUM ] += dy ; } }
public void testLocalInstances_deterministic ( ) { MatsimRandom . reset ( ) ; Random local1a = MatsimRandom . getLocalInstance ( ) ; Random local1b = MatsimRandom . getLocalInstance ( ) ; MatsimRandom . reset ( ) ; Random local2a = MatsimRandom . getLocalInstance ( ) ; Random local2b = MatsimRandom . getLocalInstance ( ) ; assertEqualRandomNumberGenerators ( local1a , local2a ) ; assertEqualRandomNumberGenerators ( local1b , local2b ) ; }
public void add ( Match match , AppliedRegion appliedRegion ) { add ( match , appliedRegion , _BOOL ) ; }
public void reset ( ) { techTree . checkSubTree ( techTree . getPathForRow ( _NUM ) , _BOOL ) ; }
@ SuppressWarnings ( _STR ) private static < T > void assertThrows ( final Consumer < Void > consumer , final Class < T > exceptionClass , final Consumer < T > assertExceptionProperties , final String message ) { final String normalizedMessage = null == message ? _STR : String . format ( _STR , message ) ; try { consumer . accept ( null ) ; } catch ( final Exception ex ) { if ( exceptionClass . isAssignableFrom ( ex . getClass ( ) ) ) { assertExceptionProperties . accept ( ( T ) ex ) ; return ; } Assert . fail ( String . format ( _STR , normalizedMessage , ex . getClass ( ) , ex . getMessage ( ) ) ) ; } Assert . fail ( String . format ( _STR , normalizedMessage , exceptionClass ) ) ; }
public boolean isEmpty ( ) { return nodes . isEmpty ( ) && ways . isEmpty ( ) && relations . isEmpty ( ) ; }
public static void assertBool ( boolean b ) { if ( verbose ) { log ( _STR + b + _STR ) ; } if ( ! b ) { throw new RuntimeException ( ) ; } }
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
public TagKeyValueMapConverter ( boolean nullIfEmpty , String idKey ) { Objects . requireNonNull ( idKey ) ; this . nullIfEmpty = nullIfEmpty ; this . addId = _BOOL ; this . idKey = idKey ; }
private static void postInit ( ) { debugAll = dbgTable . containsKey ( debugAllToken ) ; }
private static void attemptRetryOnException ( String logPrefix , Request < ? > request , VolleyError exception ) throws VolleyError { RetryPolicy retryPolicy = request . getRetryPolicy ( ) ; int oldTimeout = request . getTimeoutMs ( ) ; try { retryPolicy . retry ( exception ) ; } catch ( VolleyError e ) { request . addMarker ( String . format ( _STR , logPrefix , oldTimeout ) ) ; throw e ; } request . addMarker ( String . format ( _STR , logPrefix , oldTimeout ) ) ; }
public static List < File > sortInBatch ( File file , Comparator < String > cmp ) throws IOException { return sortInBatch ( file , cmp , DEFAULTMAXTEMPFILES ) ; }
public void addDirectorySet ( Context context , String path ) { TinyDB tinydb = new TinyDB ( context ) ; ArrayList < String > file = tinydb . getListString ( _STR ) ; file . add ( path ) ; tinydb . putListString ( _STR , file ) ; }
private FastConcurrentSkipListMap . Node < K , V > hiNode ( ) { if ( hi == null ) return m . findLast ( ) ; else if ( hiInclusive ) return m . findNear ( hi , m . LT | m . EQ ) ; else return m . findNear ( hi , m . LT ) ; }
protected void processEventProperties ( Properties eventProps ) { int status ; Node node ; Line line ; String cmd = eventProps . getProperty ( COMMAND_FIELD ) ; int index = PropUtils . intFromProperties ( eventProps , INDEX_FIELD , ERROR_VALUE_INT ) ; if ( cmd . equals ( NODE_OBJECT ) ) { int shape = PropUtils . intFromProperties ( eventProps , SHAPE_FIELD , ERROR_VALUE_INT ) ; if ( index == ERROR_VALUE_INT ) { Debug . error ( _STR ) ; return ; } node = nodeList . get ( index ) ; if ( shape == _NUM ) { String icon = eventProps . getProperty ( ICON_FIELD ) ; if ( DEBUG ) Debug . output ( _STR + icon ) ; } if ( shape == NODE_DELETE ) { if ( node != null ) { lineList . del ( node ) ; nodeList . del ( node ) ; } } else if ( shape == NODE_MOVE && node != null ) { setNodePositionFromEventProps ( node , eventProps ) ; lineList . move ( node ) ; node . setTime ( Double . parseDouble ( eventProps . getProperty ( TIME_FIELD , _STR ) ) ) ; } else { status = PropUtils . intFromProperties ( eventProps , STATUS_FIELD , _NUM ) ; int menu = PropUtils . intFromProperties ( eventProps , MENU_FIELD , _NUM ) ; String label = eventProps . getProperty ( LABEL_FIELD ) ; if ( label == null ) { label = eventProps . getProperty ( INDEX_FIELD ) ; } String ip = eventProps . getProperty ( IP_FIELD ) ; boolean isLocalhost = _BOOL ; if ( ip != null && localhostIP != null ) { isLocalhost = localhostIP . equals ( ip ) ; if ( DEBUG ) { Debug . output ( _STR + localhostIP ) ; } } if ( DEBUG ) { Debug . output ( _STR + label + _STR ) ; } try { if ( shape != ERROR_VALUE_INT ) { node = nodeList . add ( label , index , shape , menu , status ) ; node . setLocalhost ( isLocalhost ) ; } } catch ( Exception e ) { Debug . error ( _STR ) ; } setNodePositionFromEventProps ( node , eventProps ) ; } } else if ( cmd . equals ( NODE_OBJECT_STATUS ) ) { if ( index == ERROR_VALUE_INT ) { Debug . error ( _STR ) ; return ; } node = nodeList . get ( index ) ; if ( node != null ) { status = PropUtils . intFromProperties ( eventProps , STATUS_FIELD , ERROR_VALUE_INT ) ; if ( status != ERROR_VALUE_INT ) { node . setStatus ( status ) ; } } } else if ( cmd . equals ( LINK_OBJECT_STATUS ) ) { if ( index == ERROR_VALUE_INT ) { Debug . error ( _STR ) ; return ; } line = lineList . get ( index ) ; if ( line != null ) { status = PropUtils . intFromProperties ( eventProps , STATUS_FIELD , ERROR_VALUE_INT ) ; if ( status != ERROR_VALUE_INT ) { line . setStatus ( status ) ; } } } else if ( cmd . equals ( LINK_OBJECT ) ) { if ( index == ERROR_VALUE_INT ) { Debug . error ( _STR ) ; return ; } line = lineList . get ( index ) ; int shape = PropUtils . intFromProperties ( eventProps , SHAPE_FIELD , ERROR_VALUE_INT ) ; if ( shape == NODE_DELETE ) { lineList . del ( index ) ; } else { status = PropUtils . intFromProperties ( eventProps , STATUS_FIELD , _NUM ) ; int node1 = PropUtils . intFromProperties ( eventProps , LINK_NODE1_FIELD , ERROR_VALUE_INT ) ; int node2 = PropUtils . intFromProperties ( eventProps , LINK_NODE2_FIELD , ERROR_VALUE_INT ) ; if ( node1 == ERROR_VALUE_INT || node2 == ERROR_VALUE_INT ) { Debug . error ( _STR ) ; return ; } Node n1 = nodeList . get ( node1 ) ; Node n2 = nodeList . get ( node2 ) ; if ( n1 != null && n2 != null ) { lineList . add ( String . valueOf ( index ) , index , shape , status , n1 , n2 ) ; } else { if ( DEBUG ) { Debug . output ( _STR ) ; } } } } else if ( cmd . equals ( REFRESH ) || cmd . equals ( UPDATE ) ) { } else if ( cmd . equals ( CLEAR ) ) { if ( nodeList != null ) { nodeList . flush ( ) ; } if ( lineList != null ) { lineList . flush ( ) ; } } else { if ( DEBUG ) { Debug . output ( _STR + eventProps . toString ( ) ) ; } } manageGraphics ( ) ; }
protected static void addIdRepoAMSDKPlugin ( SSOToken token , String orgName ) throws SMSException , SSOException { ServiceConfigManager scm = new ServiceConfigManager ( ServiceManager . REALM_SERVICE , token ) ; ServiceConfig sc = scm . getOrganizationConfig ( orgName , null ) ; Map attributes = new HashMap ( ) ; Set values = new HashSet ( ) ; values . add ( _STR ) ; attributes . put ( _STR , values ) ; values = new HashSet ( ) ; values . add ( DNMapper . realmNameToAMSDKName ( DNMapper . orgNameToDN ( orgName ) ) ) ; attributes . put ( _STR , values ) ; sc . addSubConfig ( _STR , _STR , _NUM , attributes ) ; }
@ Override public synchronized void initialize ( ) { if ( ! mRootDirectory . exists ( ) ) { if ( ! mRootDirectory . mkdirs ( ) ) { VolleyLog . e ( _STR , mRootDirectory . getAbsolutePath ( ) ) ; } return ; } File [ ] files = mRootDirectory . listFiles ( ) ; if ( files == null ) { return ; } for ( File file : files ) { FileInputStream fis = null ; try { fis = new FileInputStream ( file ) ; CacheHeader entry = CacheHeader . readHeader ( fis ) ; entry . size = file . length ( ) ; putEntry ( entry . key , entry ) ; } catch ( IOException e ) { if ( file != null ) { file . delete ( ) ; } } finally { try { if ( fis != null ) { fis . close ( ) ; } } catch ( IOException ignored ) { } } } }
public static String onKeyPress ( String key ) { pin = pin . concat ( key ) ; return pin ; }
public boolean isHierachic ( String string ) { int index = string . indexOf ( m_Seperator ) ; if ( ( index == ( string . length ( ) - _NUM ) ) || ( index == - _NUM ) ) { return _BOOL ; } return _BOOL ; }
public Shape paintLayer ( Graphics g , int offs0 , int offs1 , Shape bounds , JTextComponent c , View view ) { Color base = getColor ( ) ; Color color = base != null ? new Color ( base . getRed ( ) , base . getGreen ( ) , base . getBlue ( ) , _NUM ) : null ; if ( color == null ) { g . setColor ( c . getSelectionColor ( ) ) ; } else { g . setColor ( color ) ; } if ( offs0 == view . getStartOffset ( ) && offs1 == view . getEndOffset ( ) ) { Rectangle alloc ; if ( bounds instanceof Rectangle ) { alloc = ( Rectangle ) bounds ; } else { alloc = bounds . getBounds ( ) ; } g . fillRect ( alloc . x , alloc . y , c . getWidth ( ) - alloc . x , alloc . height ) ; } else { try { Shape shape = view . modelToView ( offs0 , Position . Bias . Forward , offs1 , Position . Bias . Backward , bounds ) ; Rectangle r = ( shape instanceof Rectangle ) ? ( Rectangle ) shape : shape . getBounds ( ) ; g . fillRect ( _NUM , r . y , c . getWidth ( ) , r . height ) ; return r ; } catch ( BadLocationException e ) { } } return null ; }
synchronized void receive ( char oneChar ) throws IOException { if ( buffer == null ) { throw new IOException ( _STR ) ; } if ( lastReader != null && ! lastReader . isAlive ( ) ) { throw new IOException ( _STR ) ; } lastWriter = Thread . currentThread ( ) ; try { while ( buffer != null && out == in ) { notifyAll ( ) ; wait ( _NUM ) ; if ( lastReader != null && ! lastReader . isAlive ( ) ) { throw new IOException ( _STR ) ; } } } catch ( InterruptedException e ) { throw new InterruptedIOException ( ) ; } if ( buffer == null ) { throw new IOException ( _STR ) ; } if ( in == - _NUM ) { in = _NUM ; } buffer [ in ++ ] = oneChar ; if ( in == buffer . length ) { in = _NUM ; } }
public static final ByteBuffer bufferToByteBuffer ( final byte [ ] buffer , final ByteOrder order ) { final ByteBuffer retBuff = ByteBuffer . wrap ( buffer ) ; retBuff . order ( order ) ; return retBuff ; }
public static void writeSingleByte ( OutputStream out , int b ) throws IOException { byte [ ] buffer = new byte [ _NUM ] ; buffer [ _NUM ] = ( byte ) ( b & _NUM ) ; out . write ( buffer ) ; }
private URI processLocalFiles ( URI uri ) { String uriStr = uri . toString ( ) ; if ( uriStr . startsWith ( _STR ) ) { uriStr = _STR + System . getProperty ( _STR ) + _STR + uriStr . substring ( _NUM ) ; URL url ; try { url = new URL ( uriStr ) ; return url . toURI ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } return uri ; }
private String generateScreenOnOrOffUtternace ( int feedbackIndex ) { int resourceId = ( feedbackIndex == INDEX_SCREEN_ON ) ? R . string . template_screen_on : R . string . template_screen_off ; String template = mContext . getString ( resourceId ) ; int currentRingerVolume = mAudioManager . getStreamVolume ( AudioManager . STREAM_RING ) ; int maxRingerVolume = mAudioManager . getStreamMaxVolume ( AudioManager . STREAM_RING ) ; int volumePercent = ( _NUM / maxRingerVolume ) * currentRingerVolume ; int adjustment = volumePercent % _NUM ; if ( adjustment < _NUM ) { volumePercent -= adjustment ; } else if ( adjustment > _NUM ) { volumePercent += ( _NUM - adjustment ) ; } return String . format ( template , volumePercent ) ; }
private void updateBaseMatrix ( Drawable d ) { ImageView imageView = getImageView ( ) ; if ( null == imageView || null == d ) { return ; } final float viewWidth = imageView . getWidth ( ) ; final float viewHeight = imageView . getHeight ( ) ; final int drawableWidth = d . getIntrinsicWidth ( ) ; final int drawableHeight = d . getIntrinsicHeight ( ) ; mBaseMatrix . reset ( ) ; final float widthScale = viewWidth / drawableWidth ; final float heightScale = viewHeight / drawableHeight ; if ( mScaleType == ScaleType . CENTER ) { mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth ) / _NUM , ( viewHeight - drawableHeight ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_CROP ) { float scale = Math . max ( widthScale , heightScale ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_INSIDE ) { float scale = Math . min ( _NUM , Math . min ( widthScale , heightScale ) ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else { RectF mTempSrc = new RectF ( _NUM , _NUM , drawableWidth , drawableHeight ) ; RectF mTempDst = new RectF ( _NUM , _NUM , viewWidth , viewHeight ) ; switch ( mScaleType ) { case FIT_CENTER : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . CENTER ) ; break ; case FIT_START : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . START ) ; break ; case FIT_END : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . END ) ; break ; case FIT_XY : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . FILL ) ; break ; default : break ; } } resetMatrix ( ) ; }
public void reset ( ) { count = _NUM ; startTime = System . currentTimeMillis ( ) ; }
public int readInt ( ) throws IOException { length += _NUM ; int k1 = in . read ( ) ; if ( k1 < _NUM ) return _NUM ; int k2 = in . read ( ) << _NUM ; int k3 = in . read ( ) << _NUM ; return k1 + k2 + k3 + ( in . read ( ) << _NUM ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . insertData ( _NUM , _STR ) ; childData = child . getData ( ) ; assertEquals ( _STR , _STR , childData ) ; }
public Enumeration listOptions ( ) { Vector newVector = new Vector ( _NUM ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; return newVector . elements ( ) ; }
public void testAddIssuerLjavax_security_auth_x500_X500Principal02 ( ) { X509CRLSelector selector = new X509CRLSelector ( ) ; X500Principal iss1 = new X500Principal ( _STR ) ; X500Principal iss2 = new X500Principal ( _STR ) ; CRL crl1 = new TestCRL ( iss1 ) ; CRL crl2 = new TestCRL ( iss2 ) ; selector . addIssuer ( iss1 ) ; assertTrue ( _STR , selector . match ( crl1 ) ) ; assertFalse ( _STR , selector . match ( crl2 ) ) ; selector . addIssuer ( iss2 ) ; assertTrue ( _STR , selector . match ( crl2 ) ) ; }
public void addTransformation ( TagTransformation tagTransformation ) { if ( tagTransformation != null ) { mappings . put ( tagTransformation . getSourceTag ( ) , tagTransformation ) ; } }
@ Override public boolean isFileModified ( long fileTimeStamp , long endOffset ) { boolean isFileModified = _BOOL ; if ( getLastModifiedTime ( ) > fileTimeStamp || getSize ( ) > endOffset ) { isFileModified = _BOOL ; } return isFileModified ; }
public String nextString ( ) { nextClean ( _STR ) ; StringBuilder sb = new StringBuilder ( ) ; for ( ; ; ) { char c = next ( ) ; switch ( c ) { case _NUM : case _STR : case _STR : throw syntaxError ( _STR ) ; case _STR : c = next ( ) ; switch ( c ) { case _STR : sb . append ( _STR ) ; break ; case _STR : sb . append ( _STR ) ; break ; case _STR : sb . append ( _STR ) ; break ; case _STR : sb . append ( _STR ) ; break ; case _STR : sb . append ( _STR ) ; break ; case _STR : sb . append ( ( char ) Integer . parseInt ( next ( _NUM ) , _NUM ) ) ; break ; default : sb . append ( c ) ; } break ; case _STR : return sb . toString ( ) ; default : if ( c < _STR ) { throw syntaxError ( _STR + ( ( int ) c ) + _STR ) ; } sb . append ( c ) ; break ; } } }
private void readLyrics3Tag ( File file , RandomAccessFile newFile , int loadOptions ) throws IOException { }
public double evaluate ( VectorInstance x , VectorInstance y ) throws Exception { double dotProd = x . dotProduct ( y ) ; return Math . pow ( m_gamma * dotProd + m_coef0 , m_degree ) ; }
private boolean isDbConfigurationPresent ( ) { return StringUtils . isNotBlank ( selectColumn ) && StringUtils . isNotBlank ( tableName ) ; }
public boolean isIncompleteNumericalRun ( String pin ) { final int len = pin . length ( ) ; int consecutive = _NUM ; char last = pin . charAt ( _NUM ) ; for ( int i = _NUM ; i < len ; i ++ ) { final char c = pin . charAt ( i ) ; if ( last == c ) { consecutive ++ ; } else { consecutive = _NUM ; } last = c ; if ( consecutive >= _NUM ) { return _BOOL ; } } return _BOOL ; }
private static void generateJavaScriptLogAlertCloseWindow ( Writer writer , String message ) throws IOException { writer . write ( _STR + message + _STR ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
public Tree < String > extractBestMaxRuleParse1 ( int start , int end , int state , List < String > sentence ) { int cState = maxcChild [ start ] [ end ] [ state ] ; if ( cState == - _NUM ) { return extractBestMaxRuleParse2 ( start , end , state , sentence ) ; } else { List < Tree < String > > child = new ArrayList < Tree < String > > ( ) ; child . add ( extractBestMaxRuleParse2 ( start , end , cState , sentence ) ) ; String stateStr = ( String ) tagNumberer . object ( state ) ; if ( stateStr . endsWith ( _STR ) ) stateStr = stateStr . substring ( _NUM , stateStr . length ( ) - _NUM ) ; int intermediateNode = grammar . getUnaryIntermediate ( ( short ) state , ( short ) cState ) ; if ( intermediateNode == _NUM ) { } if ( intermediateNode > _NUM ) { List < Tree < String > > restoredChild = new ArrayList < Tree < String > > ( ) ; String stateStr2 = ( String ) tagNumberer . object ( intermediateNode ) ; if ( stateStr2 . endsWith ( _STR ) ) stateStr2 = stateStr2 . substring ( _NUM , stateStr2 . length ( ) - _NUM ) ; restoredChild . add ( new Tree < String > ( stateStr2 , child ) ) ; return new Tree < String > ( stateStr , restoredChild ) ; } return new Tree < String > ( stateStr , child ) ; } }
protected void parseDOMAttributes ( Element element ) throws SAML2Exception { super . parseDOMAttributes ( element ) ; }
private static double distance ( double x1 , double y1 , double x2 , double y2 ) { return Math . sqrt ( ( y2 - y1 ) * ( y2 - y1 ) + ( x2 - x1 ) * ( x2 - x1 ) ) ; }
protected void drawCenterText ( Canvas c ) { SpannableString centerText = mChart . getCenterText ( ) ; if ( mChart . isDrawCenterTextEnabled ( ) && centerText != null ) { PointF center = mChart . getCenterCircleBox ( ) ; float innerRadius = mChart . isDrawHoleEnabled ( ) && mChart . isHoleTransparent ( ) ? mChart . getRadius ( ) * ( mChart . getHoleRadius ( ) / _NUM ) : mChart . getRadius ( ) ; RectF holeRect = mRectBuffer [ _NUM ] ; holeRect . left = center . x - innerRadius ; holeRect . top = center . y - innerRadius ; holeRect . right = center . x + innerRadius ; holeRect . bottom = center . y + innerRadius ; RectF boundingRect = mRectBuffer [ _NUM ] ; boundingRect . set ( holeRect ) ; float radiusPercent = mChart . getCenterTextRadiusPercent ( ) ; if ( radiusPercent > _NUM ) { boundingRect . inset ( ( boundingRect . width ( ) - boundingRect . width ( ) * radiusPercent ) / _NUM , ( boundingRect . height ( ) - boundingRect . height ( ) * radiusPercent ) / _NUM ) ; } if ( ! centerText . equals ( mCenterTextLastValue ) || ! boundingRect . equals ( mCenterTextLastBounds ) ) { mCenterTextLastBounds . set ( boundingRect ) ; mCenterTextLastValue = centerText ; float width = mCenterTextLastBounds . width ( ) ; mCenterTextLayout = new StaticLayout ( centerText , _NUM , centerText . length ( ) , mCenterTextPaint , ( int ) Math . max ( Math . ceil ( width ) , _NUM ) , Layout . Alignment . ALIGN_CENTER , _NUM , _NUM , _BOOL ) ; } float layoutHeight = mCenterTextLayout . getHeight ( ) ; c . save ( ) ; c . translate ( boundingRect . left , boundingRect . top + ( boundingRect . height ( ) - layoutHeight ) / _NUM ) ; mCenterTextLayout . draw ( c ) ; c . restore ( ) ; } }
public void start ( int conditions ) throws IOException { print ( _STR , new String [ ] { Integer . toBinaryString ( conditions ) } ) ; printer . flush ( ) ; }
public String pad ( String value , int places , String padCharacter ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( value ) ; while ( sb . length ( ) < places ) { sb . append ( padCharacter ) ; } return sb . toString ( ) ; }
private static ResultCode registerErrorResultCode ( final int intValue , final LocalizableMessage name , final Enum resultCodeEnum ) { final ResultCode t = new ResultCode ( intValue , name , _BOOL , resultCodeEnum ) ; ELEMENTS . put ( intValue , t ) ; return t ; }
public void addAll ( ExceptionSet other ) { exceptionSet . or ( other . exceptionSet ) ; explicitSet . or ( other . explicitSet ) ; size = countBits ( exceptionSet ) ; commonSupertype = null ; }
@ HLEUnimplemented @ HLEFunction ( nid = _NUM , version = _NUM ) public int sceUsbCamStartVideo ( ) { if ( ! setupVideo ( ) ) { log . warn ( String . format ( _STR ) ) ; } return _NUM ; }
protected ResourceLoaderLicenseLocator ( final Charset charset , final String ... licenseFiles ) { if ( licenseFiles == null || licenseFiles . length == _NUM ) { throw new IllegalArgumentException ( _STR ) ; } if ( charset == null ) { throw new NullPointerException ( _STR ) ; } this . licenseFiles = new ArrayList < String > ( Arrays . asList ( licenseFiles ) ) ; this . charset = charset ; }
private static boolean isIntendedException ( Exception e , Class < ? > clazz ) { final String message = e . getMessage ( ) ; return ( ! TextUtils . isEmpty ( message ) && message . startsWith ( clazz . getName ( ) ) ) ; }
@ Inject public ProjectTypeRegistry ( Set < ProjectTypeDef > types ) { projectTypes = new HashMap < > ( ) ; validatedData = new HashMap < > ( ) ; validate ( types ) ; for ( ProjectTypeDef type : validatedData . values ( ) ) { try { init ( type ) ; } catch ( ProjectTypeConstraintException e ) { LOG . error ( e . getMessage ( ) ) ; } } }
static public void addNotificationListener ( JMXConnector jmxConnector , Class < ? > mbeanInterface , String mbeanName , NotificationListener notificationListener , boolean ignored ) throws InstanceNotFoundException , Exception { MBeanServerConnection mbsc = jmxConnector . getMBeanServerConnection ( ) ; ObjectName objectName = generateMBeanObjectName ( mbeanInterface . getName ( ) , mbeanName ) ; mbsc . addNotificationListener ( objectName , notificationListener , null , null ) ; }
public void testCase16 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . subtract ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _NUM , result . signum ( ) ) ; }
private void consume ( ) { consumer . subscribe ( topics ) ; while ( running . get ( ) ) { try { ConsumerRecords records = consumer . poll ( pollIntervalMs ) ; if ( records == null ) { continue ; } Iterator < ConsumerRecord < String , String > > iterator = records . iterator ( ) ; while ( iterator . hasNext ( ) ) { sendMessage ( iterator . next ( ) ) ; } } catch ( Exception ex ) { String error = _STR ; logger . error ( error , ex ) ; bus . send ( ConfigConstants . CONSUMER_ERROR_TOPIC , getErrorString ( error , ex . getMessage ( ) ) ) ; } } }
private byte [ ] readRawBytesSlowPath ( final int size ) throws IOException { if ( size <= _NUM ) { if ( size == _NUM ) { return Internal . EMPTY_BYTE_ARRAY ; } else { throw InvalidProtocolBufferException . negativeSize ( ) ; } } if ( totalBytesRetired + bufferPos + size > currentLimit ) { skipRawBytes ( currentLimit - totalBytesRetired - bufferPos ) ; throw InvalidProtocolBufferException . truncatedMessage ( ) ; } if ( size < BUFFER_SIZE ) { final byte [ ] bytes = new byte [ size ] ; int pos = bufferSize - bufferPos ; System . arraycopy ( buffer , bufferPos , bytes , _NUM , pos ) ; bufferPos = bufferSize ; ensureAvailable ( size - pos ) ; System . arraycopy ( buffer , _NUM , bytes , pos , size - pos ) ; bufferPos = size - pos ; return bytes ; } else { final int originalBufferPos = bufferPos ; final int originalBufferSize = bufferSize ; totalBytesRetired += bufferSize ; bufferPos = _NUM ; bufferSize = _NUM ; int sizeLeft = size - ( originalBufferSize - originalBufferPos ) ; final List < byte [ ] > chunks = new ArrayList < byte [ ] > ( ) ; while ( sizeLeft > _NUM ) { final byte [ ] chunk = new byte [ Math . min ( sizeLeft , BUFFER_SIZE ) ] ; int pos = _NUM ; while ( pos < chunk . length ) { final int n = ( input == null ) ? - _NUM : input . read ( chunk , pos , chunk . length - pos ) ; if ( n == - _NUM ) { throw InvalidProtocolBufferException . truncatedMessage ( ) ; } totalBytesRetired += n ; pos += n ; } sizeLeft -= chunk . length ; chunks . add ( chunk ) ; } final byte [ ] bytes = new byte [ size ] ; int pos = originalBufferSize - originalBufferPos ; System . arraycopy ( buffer , originalBufferPos , bytes , _NUM , pos ) ; for ( final byte [ ] chunk : chunks ) { System . arraycopy ( chunk , _NUM , bytes , pos , chunk . length ) ; pos += chunk . length ; } return bytes ; } }
private void deleteAttrs ( SvcReg reg , EntryRep entry , boolean checkDups ) { EntryClass eclass = entry . eclass ; deleteInstance ( eclass ) ; Object [ ] fields = entry . fields ; if ( fields . length == _NUM ) { ArrayList regs = serviceByEmptyAttr . get ( eclass ) ; if ( regs == null || ( checkDups && hasEmptyAttr ( reg , eclass ) ) ) return ; int idx = regs . indexOf ( reg ) ; if ( idx >= _NUM ) { regs . remove ( idx ) ; if ( regs . isEmpty ( ) ) serviceByEmptyAttr . remove ( eclass ) ; } return ; } for ( int fldidx = fields . length ; -- fldidx >= _NUM ; ) { eclass = getDefiningClass ( eclass , fldidx ) ; HashMap [ ] attrMaps = serviceByAttr . get ( eclass ) ; if ( attrMaps == null || attrMaps [ fldidx ] == null || ( checkDups && hasAttr ( reg , eclass , fldidx , fields [ fldidx ] ) ) ) continue ; HashMap map = attrMaps [ fldidx ] ; Object value = fields [ fldidx ] ; ArrayList regs = ( ArrayList ) map . get ( value ) ; if ( regs == null ) continue ; int idx = regs . indexOf ( reg ) ; if ( idx < _NUM ) continue ; regs . remove ( idx ) ; if ( ! regs . isEmpty ( ) ) continue ; map . remove ( value ) ; if ( ! map . isEmpty ( ) ) continue ; attrMaps [ fldidx ] = null ; if ( allNull ( attrMaps ) ) serviceByAttr . remove ( eclass ) ; } }
public void testDSAProvider ( ) throws Exception { AlgorithmParameters params = AlgorithmParameters . getInstance ( _STR ) ; assertEquals ( _STR , _STR , params . getAlgorithm ( ) ) ; BigInteger p = BigInteger . ONE ; BigInteger q = BigInteger . TEN ; BigInteger g = BigInteger . ZERO ; params . init ( new DSAParameterSpec ( p , q , g ) ) ; byte [ ] enc = params . getEncoded ( ) ; assertNotNull ( enc ) ; assertNotNull ( params . getEncoded ( _STR ) ) ; DSAParameterSpec spec = params . getParameterSpec ( DSAParameterSpec . class ) ; assertEquals ( _STR , p , spec . getP ( ) ) ; assertEquals ( _STR , q , spec . getQ ( ) ) ; assertEquals ( _STR , g , spec . getG ( ) ) ; params = AlgorithmParameters . getInstance ( _STR ) ; params . init ( enc ) ; assertTrue ( _STR , Arrays . equals ( enc , params . getEncoded ( ) ) ) ; params = AlgorithmParameters . getInstance ( _STR ) ; params . init ( enc , _STR ) ; assertTrue ( _STR , Arrays . equals ( enc , params . getEncoded ( ) ) ) ; params = AlgorithmParameters . getInstance ( _STR ) ; try { params . init ( enc , _STR ) ; fail ( _STR ) ; } catch ( IOException e ) { } }
public static boolean isClassLiteralPossible ( ClassNode classNode ) { return Modifier . isPublic ( classNode . getModifiers ( ) ) ; }
private Properties loadLogFile ( License license , boolean create ) { Properties log = new Properties ( ) ; File logFile = getLogFile ( license ) ; try { if ( create && logFile . createNewFile ( ) ) { logger . fine ( _STR + logFile . getAbsolutePath ( ) ) ; } final InputStream in = new FileInputStream ( logFile ) ; try { log . load ( in ) ; } finally { in . close ( ) ; } } catch ( FileNotFoundException ex ) { if ( create ) { logger . log ( Level . SEVERE , _STR + logFile . getAbsolutePath ( ) , ex ) ; } else { logger . fine ( _STR ) ; } } catch ( IOException ex ) { logger . log ( Level . WARNING , _STR + logFile . getAbsolutePath ( ) , ex ) ; } return log ; }
public HTMLStripCharFilterFactory ( Map < String , String > args ) { super ( args ) ; escapedTags = getSet ( args , _STR ) ; if ( ! args . isEmpty ( ) ) { throw new IllegalArgumentException ( _STR + args ) ; } }
public static int update ( long id , V v ) { String passwd = ( String ) v . value ( _STR ) ; if ( ! X . isEmpty ( passwd ) ) { passwd = encrypt ( passwd ) ; v . set ( _STR , passwd , _BOOL ) ; } else { v . remove ( _STR ) ; } return Helper . update ( id , v . set ( _STR , System . currentTimeMillis ( ) ) , User . class ) ; }
public double likelihood ( String [ ] doc , String tag ) { double likelihood = _NUM ; if ( ntw . rowSum ( tag ) == _NUM ) { return likelihood ; } Counter < String > nwd = new Counter < String > ( ) ; for ( String w : doc ) { nwd . inc ( w , _NUM ) ; } double norm = _NUM ; Map < String , Double > prwd = new Hashtable < String , Double > ( ) ; for ( Entry < String , Long > e : nwd ) { double prw = prw ( e . getKey ( ) ) ; norm += prw ; prwd . put ( e . getKey ( ) , prw ) ; } for ( Entry < String , Double > e : prwd . entrySet ( ) ) { double prw = e . getValue ( ) / norm ; likelihood += ptr ( tag , e . getKey ( ) ) * prw * ( _NUM - pcm ( ) ) ; } likelihood += ptr ( tag , NOISE ) * pcm ( ) ; return likelihood ; }
@ Override public String toString ( ) { StringBuffer text = new StringBuffer ( ) ; text . append ( _STR + attributesToString ( ) + _STR ) ; text . append ( _STR + getInstNums ( ) ) ; return text . toString ( ) ; }
public boolean isSafeMode ( ) { return this . safeMode ; }
public void test_getPutByteArrayWithOffsetAndLength ( ) { final int size = _NUM ; final IDataRecord buf = new FixedByteArrayBuffer ( size ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( _NUM ) ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( size - _NUM ) ) ; final int pos = _NUM ; for ( int i = _NUM ; i < LIMIT ; i ++ ) { final byte [ ] expected = new byte [ r . nextInt ( size - _NUM ) ] ; final int off = ( expected . length / _NUM == _NUM ? _NUM : r . nextInt ( expected . length / _NUM ) ) ; final int len = ( expected . length == _NUM ? _NUM : r . nextInt ( expected . length - off ) ) ; r . nextBytes ( expected ) ; buf . put ( pos , expected , off , len ) ; assertEquals ( _NUM , BytesUtil . compareBytesWithLenAndOffset ( off , len , expected , pos , len , buf . array ( ) ) ) ; final int dstoff = r . nextInt ( _NUM ) ; final byte [ ] actual = new byte [ expected . length + dstoff ] ; buf . get ( pos , actual , dstoff , expected . length ) ; assertEquals ( _NUM , BytesUtil . compareBytesWithLenAndOffset ( off , len , expected , dstoff , len , actual ) ) ; } assertEquals ( ( byte ) _NUM , buf . getByte ( _NUM ) ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( pos + size - _NUM ) ) ; }
public void addLastItem ( M model ) { addItem ( mDatas . size ( ) , model ) ; }
static boolean hasLocalizedMessages ( ) { return GUIMediator . isEnglishLocale ( ) || ! FIRST_MESSAGE . equals ( I18n . tr ( FIRST_MESSAGE ) ) ; }
public boolean textboxKeyTyped ( char p_146201_1_ , int p_146201_2_ ) { if ( ! field_146213_o ) return _BOOL ; else switch ( p_146201_1_ ) { case _NUM : func_146202_e ( ) ; func_146199_i ( _NUM ) ; return _BOOL ; case _NUM : GuiScreen . setClipboardString ( func_146207_c ( ) ) ; return _BOOL ; case _NUM : if ( field_146226_p ) func_146191_b ( GuiScreen . getClipboardString ( ) ) ; return _BOOL ; case _NUM : GuiScreen . setClipboardString ( func_146207_c ( ) ) ; if ( field_146226_p ) func_146191_b ( _STR ) ; return _BOOL ; default : switch ( p_146201_2_ ) { case _NUM : if ( GuiScreen . isCtrlKeyDown ( ) ) { if ( field_146226_p ) func_146177_a ( - _NUM ) ; } else if ( field_146226_p ) func_146175_b ( - _NUM ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) func_146199_i ( _NUM ) ; else func_146196_d ( ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) { if ( GuiScreen . isCtrlKeyDown ( ) ) func_146199_i ( func_146183_a ( - _NUM , func_146186_n ( ) ) ) ; else func_146199_i ( func_146186_n ( ) - _NUM ) ; } else if ( GuiScreen . isCtrlKeyDown ( ) ) func_146190_e ( func_146187_c ( - _NUM ) ) ; else func_146182_d ( - _NUM ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) { if ( GuiScreen . isCtrlKeyDown ( ) ) func_146199_i ( func_146183_a ( _NUM , func_146186_n ( ) ) ) ; else func_146199_i ( func_146186_n ( ) + _NUM ) ; } else if ( GuiScreen . isCtrlKeyDown ( ) ) func_146190_e ( func_146187_c ( _NUM ) ) ; else func_146182_d ( _NUM ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) func_146199_i ( field_146216_j . length ( ) ) ; else func_146202_e ( ) ; return _BOOL ; case _NUM : if ( GuiScreen . isCtrlKeyDown ( ) ) { if ( field_146226_p ) func_146177_a ( _NUM ) ; } else if ( field_146226_p ) func_146175_b ( _NUM ) ; return _BOOL ; default : if ( ChatAllowedCharacters . isAllowedCharacter ( p_146201_1_ ) ) { if ( field_146226_p ) func_146191_b ( Character . toString ( p_146201_1_ ) ) ; return _BOOL ; } else return _BOOL ; } } }
public static DockerImage fromImageName ( String imageName ) { imageName = prepare ( imageName ) ; String [ ] parts = imageName . split ( SECTION_SEPARATOR ) ; switch ( parts . length ) { case _NUM : return fromParts ( null , null , parts [ _NUM ] ) ; case _NUM : if ( isValidNamespace ( parts [ _NUM ] ) ) { return fromParts ( null , parts [ _NUM ] , parts [ _NUM ] ) ; } else { return fromParts ( parts [ _NUM ] , null , parts [ _NUM ] ) ; } case _NUM : return fromParts ( parts [ _NUM ] , parts [ _NUM ] , parts [ _NUM ] ) ; default : throw new IllegalArgumentException ( _STR + imageName ) ; } }
public synchronized void listen ( final Set < NotificationChannel > channelNames ) { m_channels . addAll ( channelNames ) ; }
public static void deleteDirectory ( File directory ) throws IOException { if ( ! directory . exists ( ) ) { return ; } if ( ! isSymlink ( directory ) ) { cleanDirectory ( directory ) ; } if ( ! directory . delete ( ) ) { String message = _STR + directory + _STR ; throw new IOException ( message ) ; } }
private void displayNonVerbose ( ConsoleApplication app , String categoryName , String typeName , Tag tag , Set < String > propertyNames ) { if ( ! app . isScriptFriendly ( ) ) { displayPropertyOptionKey ( app ) ; app . println ( ) ; app . println ( ) ; } TableBuilder builder = new TableBuilder ( ) ; builder . appendHeading ( INFO_DSCFG_HEADING_COMPONENT_NAME . get ( ) ) ; builder . appendHeading ( INFO_DSCFG_HEADING_COMPONENT_TYPE . get ( ) ) ; builder . appendHeading ( INFO_DSCFG_HEADING_PROPERTY_NAME . get ( ) ) ; builder . appendHeading ( INFO_DSCFG_HEADING_PROPERTY_OPTIONS . get ( ) ) ; builder . appendHeading ( INFO_DSCFG_HEADING_PROPERTY_SYNTAX . get ( ) ) ; builder . addSortKey ( _NUM ) ; builder . addSortKey ( _NUM ) ; builder . addSortKey ( _NUM ) ; for ( String category : categoryMap . keySet ( ) ) { if ( categoryName != null && ! categoryName . equals ( category ) ) { continue ; } Map < String , AbstractManagedObjectDefinition < ? , ? > > subTypes = categoryMap . get ( category ) ; for ( String type : subTypes . keySet ( ) ) { if ( typeName != null && ! typeName . equals ( type ) ) { continue ; } AbstractManagedObjectDefinition < ? , ? > mod = subTypes . get ( type ) ; if ( cannotDisplay ( app , mod , tag ) ) { continue ; } Set < PropertyDefinition < ? > > pds = getPropertyDefinitions ( mod ) ; for ( PropertyDefinition < ? > pd : pds ) { if ( cannotDisplay ( app , pd , propertyNames ) ) { continue ; } builder . startRow ( ) ; builder . appendCell ( category ) ; builder . appendCell ( type ) ; builder . appendCell ( pd . getName ( ) ) ; builder . appendCell ( getPropertyOptionSummary ( pd ) ) ; PropertyDefinitionUsageBuilder v = new PropertyDefinitionUsageBuilder ( _BOOL ) ; builder . appendCell ( v . getUsage ( pd ) ) ; } } } TablePrinter printer ; if ( app . isScriptFriendly ( ) ) { printer = createScriptFriendlyTablePrinter ( app . getOutputStream ( ) ) ; } else { printer = new TextTablePrinter ( app . getOutputStream ( ) ) ; } builder . print ( printer ) ; }
public List < Long > deleteEmptyFolders ( ) { ArrayList < Long > folderIds = new ArrayList < Long > ( ) ; SQLiteDatabase db = mOpenHelper . getWritableDatabase ( ) ; db . beginTransaction ( ) ; try { String selection = LauncherSettings . Favorites . ITEM_TYPE + _STR + LauncherSettings . Favorites . ITEM_TYPE_FOLDER + _STR + LauncherSettings . Favorites . _ID + _STR + LauncherSettings . Favorites . CONTAINER + _STR + TABLE_FAVORITES + _STR ; Cursor c = db . query ( TABLE_FAVORITES , new String [ ] { LauncherSettings . Favorites . _ID } , selection , null , null , null , null ) ; while ( c . moveToNext ( ) ) { folderIds . add ( c . getLong ( _NUM ) ) ; } c . close ( ) ; if ( folderIds . size ( ) > _NUM ) { db . delete ( TABLE_FAVORITES , Utilities . createDbSelectionQuery ( LauncherSettings . Favorites . _ID , folderIds ) , null ) ; } db . setTransactionSuccessful ( ) ; } catch ( SQLException ex ) { Log . e ( TAG , ex . getMessage ( ) , ex ) ; folderIds . clear ( ) ; } finally { db . endTransaction ( ) ; } return folderIds ; }
@ Override default CompletableFuture < Integer > sumInt ( final ToIntFunction < ? super T > fn ) { return CompletableFuture . supplyAsync ( null , getExec ( ) ) ; }
public void testWrite3 ( ) throws Exception { byte [ ] data = new byte [ ] { - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; TestOutputStream tos = new TestOutputStream ( ) ; CipherOutputStream cos = new CipherOutputStream ( tos , new NullCipher ( ) ) ; for ( int i = _NUM ; i < data . length ; i ++ ) { cos . write ( data , i , _NUM ) ; } cos . flush ( ) ; byte [ ] result = tos . toByteArray ( ) ; if ( ! Arrays . equals ( result , data ) ) { fail ( _STR ) ; } }
private Document parse ( final String data ) { if ( docBuilder == null || data == null ) { return null ; } Document document = null ; try { String buf = BEGINPART + data + ENDPART ; InputSource inputSource = new InputSource ( new StringReader ( buf ) ) ; document = docBuilder . parse ( inputSource ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return document ; }
public boolean isProductionJournal ( Set < String > productionCopies , Volume volume ) { for ( String productionCopy : productionCopies ) { if ( productionCopy . equalsIgnoreCase ( volume . getRpCopyName ( ) ) ) { return _BOOL ; } } return _BOOL ; }
private void testPoundSymbolInColumnName ( ) throws SQLException { deleteDb ( _STR ) ; Connection conn = getConnection ( _STR ) ; Statement stat = conn . createStatement ( ) ; stat . execute ( _STR ) ; stat . execute ( _STR ) ; assertResult ( _STR , stat , _STR ) ; conn . close ( ) ; }
public static String decode ( final String escaped ) throws URIException { try { final byte [ ] rawdata = URLCodec . decodeUrl ( EncodingUtil . getAsciiBytes ( escaped ) ) ; return EncodingUtil . getString ( rawdata , URI . getDefaultProtocolCharset ( ) ) ; } catch ( final DecoderException e ) { throw new URIException ( e . getMessage ( ) ) ; } }
void waitBeforeNextPoll ( int pollingInterval ) throws InterruptedException { synchronized ( this ) { wait ( pollingInterval ) ; } if ( ! pollOutstanding ) { return ; } log . debug ( _STR ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { synchronized ( this ) { wait ( pollingInterval / _NUM ) ; } log . debug ( _STR ) ; if ( ! pollOutstanding ) { return ; } } }
private void shiftMappingVectorTokensLeft ( int lineNum , int startCol , int shift ) { boolean lastWasBeginTLAToken = _BOOL ; int lastBeginTLATokCol = - _NUM ; Vector line = ( Vector ) mappingVector . elementAt ( lineNum ) ; for ( int i = _NUM ; i < line . size ( ) ; i ++ ) { MappingObject obj = ( MappingObject ) line . elementAt ( i ) ; if ( obj . getType ( ) == MappingObject . BEGIN_TLATOKEN ) { MappingObject . BeginTLAToken tobj = ( MappingObject . BeginTLAToken ) obj ; int col = tobj . getColumn ( ) ; if ( col >= startCol ) { tobj . setColumn ( col - shift ) ; } lastWasBeginTLAToken = _BOOL ; lastBeginTLATokCol = tobj . getColumn ( ) ; } else { if ( obj . getType ( ) == MappingObject . END_TLATOKEN ) { MappingObject . EndTLAToken tobj = ( MappingObject . EndTLAToken ) obj ; int col = tobj . getColumn ( ) ; if ( col >= startCol ) { tobj . setColumn ( col - shift ) ; } if ( lastWasBeginTLAToken && tobj . getColumn ( ) <= lastBeginTLATokCol ) { PcalDebug . ReportBug ( _STR ) ; } } else if ( obj . getType ( ) == MappingObject . SOURCE_TOKEN ) { MappingObject . SourceToken tobj = ( MappingObject . SourceToken ) obj ; int col = tobj . getBeginColumn ( ) ; if ( col >= startCol ) { tobj . setBeginColumn ( col - shift ) ; } col = tobj . getEndColumn ( ) ; if ( col >= startCol ) { tobj . setEndColumn ( col - shift ) ; } lastWasBeginTLAToken = _BOOL ; } } } }
protected Dimension computeLengths ( String annoText ) { String [ ] lines = Util . splitLines ( annoText ) ; int lineLength = _NUM ; for ( String line : lines ) { if ( line . length ( ) > lineLength ) lineLength = line . length ( ) ; } return new Dimension ( lineLength + _NUM , lines . length + _NUM ) ; }
public static void writeImageMap ( PrintWriter writer , String name , ChartRenderingInfo info , ToolTipTagFragmentGenerator toolTipTagFragmentGenerator , URLTagFragmentGenerator urlTagFragmentGenerator ) throws IOException { writer . println ( ImageMapUtilities . getImageMap ( name , info , toolTipTagFragmentGenerator , urlTagFragmentGenerator ) ) ; }
ImportNoteBuilder addMessage ( ImportNoteMessage . Type type , String message ) { if ( ! Strings . isNullOrEmpty ( message ) ) { messages . add ( new ImportNoteMessage ( type , message ) ) ; } return this ; }
public String toXMLString ( boolean includeNS , boolean declareNS ) throws FSMsgException { return toXMLString ( includeNS , declareNS , _BOOL ) ; }
public static List < String > asStringList ( Collection < ? extends Object > objects ) { List < String > list = new ArrayList < > ( ) ; for ( Object object : objects ) { list . add ( String . valueOf ( object ) ) ; } return list ; }
public < E extends T > E min ( Iterable < E > iterable ) { Iterator < E > iterator = iterable . iterator ( ) ; E minSoFar = iterator . next ( ) ; while ( iterator . hasNext ( ) ) { minSoFar = min ( minSoFar , iterator . next ( ) ) ; } return minSoFar ; }
public synchronized int read ( byte b [ ] , int off , int len ) throws IOException { if ( len <= _NUM ) return _NUM ; int moreSpace ; synchronized ( lock ) { if ( pos >= present ) pos = present = _NUM ; else if ( pos >= waterMark ) { System . arraycopy ( buffer , pos , buffer , _NUM , present - pos ) ; present -= pos ; pos = _NUM ; } int freeSpace = buffer . length - present ; moreSpace = Math . max ( freeSpace - requested , _NUM ) ; } if ( moreSpace > _NUM ) manager . sendRequest ( info , moreSpace ) ; synchronized ( lock ) { requested += moreSpace ; while ( ( pos >= present ) && ! disconnected ) { try { lock . wait ( ) ; } catch ( InterruptedException e ) { } } if ( disconnected && pos >= present ) return - _NUM ; int available = present - pos ; if ( len < available ) { System . arraycopy ( buffer , pos , b , off , len ) ; pos += len ; return len ; } else { System . arraycopy ( buffer , pos , b , off , available ) ; pos = present = _NUM ; return available ; } } }
public final void put ( String key , int value ) { if ( ( m_firstFree + _NUM ) >= m_mapSize ) { m_mapSize += m_blocksize ; String newMap [ ] = new String [ m_mapSize ] ; System . arraycopy ( m_map , _NUM , newMap , _NUM , m_firstFree + _NUM ) ; m_map = newMap ; int newValues [ ] = new int [ m_mapSize ] ; System . arraycopy ( m_values , _NUM , newValues , _NUM , m_firstFree + _NUM ) ; m_values = newValues ; } m_map [ m_firstFree ] = key ; m_values [ m_firstFree ] = value ; m_firstFree ++ ; }
public static List < ItemStack > consolidateItemStacks ( List < ItemStack > inputStacks ) { List < ItemStack > outputStacks = new ArrayList < ItemStack > ( ) ; for ( ItemStack sourceIS : inputStacks ) { boolean bFound = _BOOL ; for ( ItemStack destIS : outputStacks ) { if ( destIS != null && sourceIS != null && itemStackIngredientsMatch ( destIS , sourceIS ) ) { bFound = _BOOL ; destIS . stackSize += sourceIS . stackSize ; } } if ( ! bFound ) outputStacks . add ( sourceIS . copy ( ) ) ; } return outputStacks ; }
public static int howManyDaysOld ( long time ) { return ( int ) ( ( System . currentTimeMillis ( ) - time ) / DateUtils . DAY_IN_MILLIS ) ; }
protected Character isWFXMLChar ( String chardata ) { Character refInvalidChar ; if ( chardata == null || ( chardata . length ( ) == _NUM ) ) { return null ; } char [ ] dataarray = chardata . toCharArray ( ) ; int datalength = dataarray . length ; if ( fIsXMLVersion11 ) { int i = _NUM ; while ( i < datalength ) { if ( XML11Char . isXML11Invalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - _NUM ] ; if ( XMLChar . isHighSurrogate ( ch ) && i < datalength ) { char ch2 = dataarray [ i ++ ] ; if ( XMLChar . isLowSurrogate ( ch2 ) && XMLChar . isSupplemental ( XMLChar . supplemental ( ch , ch2 ) ) ) { continue ; } } refInvalidChar = new Character ( ch ) ; return refInvalidChar ; } } } else { int i = _NUM ; while ( i < datalength ) { if ( XMLChar . isInvalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - _NUM ] ; if ( XMLChar . isHighSurrogate ( ch ) && i < datalength ) { char ch2 = dataarray [ i ++ ] ; if ( XMLChar . isLowSurrogate ( ch2 ) && XMLChar . isSupplemental ( XMLChar . supplemental ( ch , ch2 ) ) ) { continue ; } } refInvalidChar = new Character ( ch ) ; return refInvalidChar ; } } } return null ; }
public void testZeroZero ( ) { String numA = _STR ; String numB = _STR ; String res = _STR ; BigInteger aNumber = new BigInteger ( numA ) ; BigInteger bNumber = new BigInteger ( numB ) ; BigInteger result = aNumber . xor ( bNumber ) ; assertTrue ( res . equals ( result . toString ( ) ) ) ; }
public final ParallelFlux < T > doOnNext ( Consumer < ? super T > onNext ) { Objects . requireNonNull ( onNext , _STR ) ; return doOnSignal ( this , onNext , null , null , null , null , null , null , null ) ; }
public void test_fill$CIIC ( ) { char val = _STR ; char d [ ] = new char [ _NUM ] ; Arrays . fill ( d , _NUM , d . length , val ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) assertTrue ( _STR , ! ( d [ i ] == val ) ) ; for ( int i = _NUM ; i < d . length ; i ++ ) assertTrue ( _STR , d [ i ] == val ) ; try { Arrays . fill ( d , _NUM , _NUM , val ) ; fail ( _STR ) ; } catch ( IllegalArgumentException e ) { } try { Arrays . fill ( d , - _NUM , _NUM , val ) ; fail ( _STR ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } try { Arrays . fill ( d , _NUM , d . length + _NUM , val ) ; fail ( _STR ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } }
protected void addMissing ( Instances data , int level , boolean predictorMissing , boolean classMissing ) { int classIndex = data . classIndex ( ) ; Random random = new Random ( _NUM ) ; for ( int i = _NUM ; i < data . numInstances ( ) ; i ++ ) { Instance current = data . instance ( i ) ; for ( int j = _NUM ; j < data . numAttributes ( ) ; j ++ ) { if ( ( ( j == classIndex ) && classMissing ) || ( ( j != classIndex ) && predictorMissing ) ) { if ( Math . abs ( random . nextInt ( ) ) % _NUM < level ) current . setMissing ( j ) ; } } } }
public < T extends DataObject > void insertInBatches ( List < T > records , int partitionSize , DbClient dbClient , String type ) { List < List < T > > volume_partitions = Lists . partition ( records , partitionSize ) ; for ( List < T > partition : volume_partitions ) { try { dbClient . createObject ( partition ) ; _log . info ( _STR , partition . size ( ) , type ) ; } catch ( DatabaseException e ) { _log . error ( _STR , type , e ) ; } } }
public void modify ( SSOToken token , String objName , ModificationItem [ ] mods ) throws SMSException , SSOException { if ( ( objName == null ) || ( objName . length ( ) == _NUM ) || ( mods == null ) || ( mods . length == _NUM ) ) { throw new IllegalArgumentException ( _STR + _STR ) ; } mRWLock . readRequest ( ) ; try { if ( ! root . isExists ( mRootDir , objName ) ) { String errmsg = _STR + objName + _STR ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } } finally { mRWLock . readDone ( ) ; } mRWLock . writeRequest ( ) ; try { SMSFlatFileTreeNode node = root . getChild ( objName ) ; if ( node == null ) { String errmsg = _STR + objName + _STR ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } String filepath = node . getAttributeFilename ( mRootDir ) ; if ( filepath == null ) { String errmsg = _STR + objName + _STR ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } File filehandle = new File ( filepath ) ; if ( ! filehandle . isFile ( ) ) { String errmsg = _STR + _STR + objName + _STR ; mDebug . error ( errmsg ) ; throw new ServiceNotFoundException ( errmsg ) ; } Properties props = loadProperties ( filehandle , objName ) ; boolean hasSunXmlKeyValue = props . getProperty ( SMSEntry . ATTR_XML_KEYVAL ) != null ; for ( int i = _NUM ; i < mods . length ; i ++ ) { modifyValues ( objName , mods [ i ] , props ) ; } saveProperties ( props , filehandle , objName ) ; String newSunXMLKeyValue = props . getProperty ( SMSEntry . ATTR_XML_KEYVAL ) ; if ( newSunXMLKeyValue != null ) { Set xmlKeyVals = toValSet ( SMSEntry . ATTR_XML_KEYVAL , newSunXMLKeyValue ) ; if ( ! hasSunXmlKeyValue ) { deleteSunXmlKeyValFiles ( node ) ; } createSunXmlKeyValFiles ( node , xmlKeyVals ) ; saveDirectoryTree ( ) ; } } finally { mRWLock . writeDone ( ) ; } }
public void removeOnTabSelectedListener ( OnTabSelectedListener listener ) { if ( listener != null ) { mListeners . remove ( listener ) ; } }
public ConnectUriManager ( List < String > connectUri ) throws THLException { this . uriList = connectUri ; if ( connectUri . size ( ) == _NUM ) { throw new THLException ( _STR ) ; } }
private void addVolumesToParkingStorageGroup ( StorageSystem storage , String policyName , Set < String > volumeDeviceIds ) throws Exception { String [ ] tokens = policyName . split ( Constants . SMIS_PLUS_REGEX ) ; CIMObjectPath groupPath = _helper . getVolumeGroupBasedOnSLO ( storage , storage , tokens [ _NUM ] , tokens [ _NUM ] , tokens [ _NUM ] ) ; if ( groupPath == null ) { groupPath = _helper . createVolumeGroupBasedOnSLO ( storage , storage , tokens [ _NUM ] , tokens [ _NUM ] , tokens [ _NUM ] ) ; } CIMArgument [ ] inArgs = _helper . getAddVolumesToMaskingGroupInputArguments ( storage , groupPath , volumeDeviceIds ) ; CIMArgument [ ] outArgs = new CIMArgument [ _NUM ] ; SmisJob addVolumesToSGJob = new SmisSynchSubTaskJob ( null , storage . getId ( ) , SmisConstants . ADD_MEMBERS ) ; _helper . invokeMethodSynchronously ( storage , _cimPath . getControllerConfigSvcPath ( storage ) , _STR , inArgs , outArgs , addVolumesToSGJob ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public static InputStream toInputStream ( String input , Charset encoding ) { return new ByteArrayInputStream ( input . getBytes ( Charsets . toCharset ( encoding ) ) ) ; }
public boolean exportPkcs8 ( ) { return jrbPkcs8 . isSelected ( ) ; }
public static PublicKey generatePublicKey ( String encodedPublicKey ) { try { byte [ ] decodedKey = Base64 . decode ( encodedPublicKey ) ; KeyFactory keyFactory = KeyFactory . getInstance ( KEY_FACTORY_ALGORITHM ) ; return keyFactory . generatePublic ( new X509EncodedKeySpec ( decodedKey ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new RuntimeException ( e ) ; } catch ( InvalidKeySpecException e ) { Log . e ( TAG , _STR ) ; throw new IllegalArgumentException ( e ) ; } catch ( Base64DecoderException e ) { Log . e ( TAG , _STR ) ; throw new IllegalArgumentException ( e ) ; } }
public NumberTick ( Number number , String label , TextAnchor textAnchor , TextAnchor rotationAnchor , double angle ) { super ( number . doubleValue ( ) , label , textAnchor , rotationAnchor , angle ) ; this . number = number ; }
private boolean isStoppable ( ) { return ( isRunning ( ) && getCache ( ) != null ) ; }
private void log ( String message , String level , String levelColor , PrintStream ps ) { StringBuilder builder = new StringBuilder ( ) ; if ( ! level . equals ( _STR ) ) builder . append ( getPrefix ( level , levelColor ) ) ; builder . append ( message ) ; String ts = builder . toString ( ) ; ps . println ( ts ) ; for ( LogHandler hand : handlers ) hand . onLog ( level , message , ts , this ) ; }
public void addGossipMember ( GossipMember member ) { gossipMembers . add ( member ) ; }
public static boolean isPublic ( int mod ) { return Modifier . isPublic ( mod ) ; }
public static PublicKey generatePublicKey ( String encodedPublicKey ) { try { byte [ ] decodedKey = Base64 . decode ( encodedPublicKey ) ; KeyFactory keyFactory = KeyFactory . getInstance ( KEY_FACTORY_ALGORITHM ) ; return keyFactory . generatePublic ( new X509EncodedKeySpec ( decodedKey ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new RuntimeException ( e ) ; } catch ( InvalidKeySpecException e ) { Log . e ( TAG , _STR ) ; throw new IllegalArgumentException ( e ) ; } catch ( Base64DecoderException e ) { Log . e ( TAG , _STR ) ; throw new IllegalArgumentException ( e ) ; } }
public static Map < String , Object > createUserPrefMap ( GenericValue rec ) throws GeneralException { return addPrefToMap ( rec , new LinkedHashMap < String , Object > ( ) ) ; }
private int clampMag ( int value , int absMin , int absMax ) { final int absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
public JSONBuffer appendString ( Object cont ) { if ( stack . empty ( ) || stack . peek ( ) != Operand . ARRAY ) { throw new JSONException ( _STR ) ; } addQuotedString ( cont ) ; addSeparator ( ) ; return this ; }
public static void deleteUserFromAuthenticationInfo ( AuthenticationInfo authenticationInfo ) throws ServerRuntimeException { String username = authenticationInfo . getUsername ( ) ; String passwordFileLocation = authenticationInfo . getPasswordFileLocation ( ) ; try { PropertiesConfiguration props = new PropertiesConfiguration ( passwordFileLocation ) ; String usernameInFile = props . getString ( username ) ; if ( usernameInFile == null ) { throw new ServerRuntimeException ( MessageFormat . format ( _STR , username ) ) ; } props . clearProperty ( username ) ; props . save ( ) ; } catch ( org . apache . commons . configuration . ConfigurationException ce ) { logger . error ( _STR + authenticationInfo . getPasswordFileLocation ( ) , ce ) ; throw new ServerRuntimeException ( _STR + ce . getMessage ( ) ) ; } }
public void error ( Level level , String messageId , String data [ ] , Object session ) throws LogException { error ( level , messageId , data , session , null ) ; }
public synchronized void remove ( IAudioProcessor processor ) { processors . remove ( processor ) ; buildFinalProcessor ( ) ; }
private float clampMag ( float value , float absMin , float absMax ) { final float absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
private int endRecoverAnimation ( ViewHolder viewHolder , boolean override ) { final int recoverAnimSize = mRecoverAnimations . size ( ) ; for ( int i = recoverAnimSize - _NUM ; i >= _NUM ; i -- ) { final RecoverAnimation anim = mRecoverAnimations . get ( i ) ; if ( anim . mViewHolder == viewHolder ) { anim . mOverridden |= override ; if ( ! anim . mEnded ) { anim . cancel ( ) ; } mRecoverAnimations . remove ( i ) ; return anim . mAnimationType ; } } return _NUM ; }
public final void addElement ( String value ) { if ( ( m_firstFree + _NUM ) >= m_mapSize ) { m_mapSize += m_blocksize ; String newMap [ ] = new String [ m_mapSize ] ; System . arraycopy ( m_map , _NUM , newMap , _NUM , m_firstFree + _NUM ) ; m_map = newMap ; } m_map [ m_firstFree ] = value ; m_firstFree ++ ; }
private boolean isMethodContained ( Method m , List < Method > wrapperMethods ) { String name = m . getName ( ) ; Class < ? > [ ] paramTypes = m . getParameterTypes ( ) ; Class < ? > returnType = m . getReturnType ( ) ; for ( Method wm : wrapperMethods ) { if ( name . equals ( wm . getName ( ) ) && Arrays . equals ( paramTypes , wm . getParameterTypes ( ) ) && returnType == wm . getReturnType ( ) ) { return _BOOL ; } } return _BOOL ; }
public void deleteNode ( Node n ) { Assert . check ( nodes . contains ( n ) ) ; nodes . remove ( n ) ; notifyUpdate ( n , null ) ; }
void updatePressed ( ActionEvent e , boolean newRoute ) { String uName = _userName . getText ( ) ; Route g = checkNamesOK ( ) ; if ( g == null ) { return ; } g . setUserName ( uName ) ; g . clearOutputTurnouts ( ) ; g . clearOutputSensors ( ) ; g . clearRouteSensors ( ) ; initializeIncludedList ( ) ; setTurnoutInformation ( g ) ; setSensorInformation ( g ) ; g . setOutputScriptName ( scriptFile . getText ( ) ) ; g . setOutputSoundName ( soundFile . getText ( ) ) ; setControlInformation ( g ) ; curRoute = g ; finishUpdate ( ) ; status1 . setText ( ( newRoute ? Bundle . getMessage ( _STR ) : Bundle . getMessage ( _STR ) ) + _STR + uName + _STR + _includedTurnoutList . size ( ) + _STR + Bundle . getMessage ( _STR ) + _STR + _includedSensorList . size ( ) + _STR + Bundle . getMessage ( _STR ) + _STR ) ; }
public String toString ( ) { return m_Attributes . toString ( ) ; }
private static void checkForXStream ( ) { try { Class . forName ( _STR ) ; m_Present = _BOOL ; } catch ( Exception e ) { m_Present = _BOOL ; } }
@ TargetApi ( Build . VERSION_CODES . GINGERBREAD_MR1 ) private Response < BitmapDrawable > doParse ( NetworkResponse response ) { byte [ ] data = response . data ; BitmapFactory . Options decodeOptions = new BitmapFactory . Options ( ) ; decodeOptions . inInputShareable = _BOOL ; decodeOptions . inPurgeable = _BOOL ; decodeOptions . inPreferredConfig = mDecodeConfig ; Bitmap bitmap ; if ( mMaxWidth == _NUM && mMaxHeight == _NUM ) { bitmap = BitmapFactory . decodeByteArray ( data , _NUM , data . length , decodeOptions ) ; } else { decodeOptions . inJustDecodeBounds = _BOOL ; BitmapFactory . decodeByteArray ( data , _NUM , data . length , decodeOptions ) ; int actualWidth = decodeOptions . outWidth ; int actualHeight = decodeOptions . outHeight ; int desiredWidth = getResizedDimension ( mMaxWidth , mMaxHeight , actualWidth , actualHeight ) ; int desiredHeight = getResizedDimension ( mMaxHeight , mMaxWidth , actualHeight , actualWidth ) ; decodeOptions . inJustDecodeBounds = _BOOL ; if ( Utils . hasGingerbreadMR1 ( ) ) { decodeOptions . inPreferQualityOverSpeed = PREFER_QUALITY_OVER_SPEED ; } decodeOptions . inSampleSize = ImageUtils . findBestSampleSize ( actualWidth , actualHeight , desiredWidth , desiredHeight ) ; Bitmap tempBitmap = BitmapFactory . decodeByteArray ( data , _NUM , data . length , decodeOptions ) ; if ( tempBitmap != null && ( tempBitmap . getWidth ( ) > desiredWidth || tempBitmap . getHeight ( ) > desiredHeight ) ) { bitmap = Bitmap . createScaledBitmap ( tempBitmap , desiredWidth , desiredHeight , _BOOL ) ; tempBitmap . recycle ( ) ; } else { bitmap = tempBitmap ; } } if ( bitmap == null ) { return Response . error ( new ParseError ( response ) ) ; } else { BitmapDrawable drawable ; if ( Utils . hasHoneycomb ( ) ) { drawable = new BitmapDrawable ( mResources , bitmap ) ; } else { drawable = new RecyclingBitmapDrawable ( mResources , bitmap ) ; } return Response . success ( drawable , HttpHeaderParser . parseCacheHeaders ( response ) ) ; } }
public double evaluate ( VectorInstance x , double [ ] y ) throws Exception { VectorInstance diff = x . subtract ( y ) ; double result = - m_gamma * diff . dotProduct ( diff ) ; return Math . exp ( result ) ; }
@ Override public int batchSize ( ) { return batchSize ; }
public static final byte [ ] decodeUrl ( byte [ ] bytes ) throws DecoderException { if ( bytes == null ) { return null ; } ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; for ( int i = _NUM ; i < bytes . length ; i ++ ) { int b = bytes [ i ] ; if ( b == _STR ) { buffer . write ( _STR ) ; } else if ( b == _STR ) { try { int u = Character . digit ( ( char ) bytes [ ++ i ] , _NUM ) ; int l = Character . digit ( ( char ) bytes [ ++ i ] , _NUM ) ; if ( u == - _NUM || l == - _NUM ) { throw new DecoderException ( _STR ) ; } buffer . write ( ( char ) ( ( u << _NUM ) + l ) ) ; } catch ( ArrayIndexOutOfBoundsException e ) { throw new DecoderException ( _STR ) ; } } else { buffer . write ( b ) ; } } return buffer . toByteArray ( ) ; }
public void clear ( ) { mAttachedScrap . clear ( ) ; recycleAndClearCachedViews ( ) ; }
public void addDataSet ( T d ) { if ( d == null ) return ; mYValCount += d . getEntryCount ( ) ; mYValueSum += d . getYValueSum ( ) ; if ( mDataSets . size ( ) <= _NUM ) { mYMax = d . getYMax ( ) ; mYMin = d . getYMin ( ) ; if ( d . getAxisDependency ( ) == AxisDependency . LEFT ) { mLeftAxisMax = d . getYMax ( ) ; mLeftAxisMin = d . getYMin ( ) ; } else { mRightAxisMax = d . getYMax ( ) ; mRightAxisMin = d . getYMin ( ) ; } } else { if ( mYMax < d . getYMax ( ) ) mYMax = d . getYMax ( ) ; if ( mYMin > d . getYMin ( ) ) mYMin = d . getYMin ( ) ; if ( d . getAxisDependency ( ) == AxisDependency . LEFT ) { if ( mLeftAxisMax < d . getYMax ( ) ) mLeftAxisMax = d . getYMax ( ) ; if ( mLeftAxisMin > d . getYMin ( ) ) mLeftAxisMin = d . getYMin ( ) ; } else { if ( mRightAxisMax < d . getYMax ( ) ) mRightAxisMax = d . getYMax ( ) ; if ( mRightAxisMin > d . getYMin ( ) ) mRightAxisMin = d . getYMin ( ) ; } } mDataSets . add ( d ) ; handleEmptyAxis ( getFirstLeft ( ) , getFirstRight ( ) ) ; }
public void endElement ( String elementName ) throws SAXException { if ( m_firstTagNotEmitted ) { flush ( ) ; } m_handler . endElement ( elementName ) ; }
public LibVLC ( ArrayList < String > options ) { boolean setAout = _BOOL , setChroma = _BOOL ; if ( options != null ) { for ( String option : options ) { if ( option . startsWith ( _STR ) ) setAout = _BOOL ; if ( option . startsWith ( _STR ) ) setChroma = _BOOL ; if ( ! setAout && ! setChroma ) break ; } } if ( setAout || setChroma ) { if ( options == null ) options = new ArrayList < String > ( ) ; if ( setAout ) { final HWDecoderUtil . AudioOutput hwAout = HWDecoderUtil . getAudioOutputFromDevice ( ) ; if ( hwAout == HWDecoderUtil . AudioOutput . OPENSLES ) options . add ( _STR ) ; else options . add ( _STR ) ; } if ( setChroma ) { options . add ( _STR ) ; options . add ( _STR ) ; } } nativeNew ( options . toArray ( new String [ options . size ( ) ] ) ) ; }
public FPSTextureView addChildAt ( int location , @ NonNull DisplayBase displayBase ) { displayBase . setUp ( mFps ) ; mDisplayList . add ( location , displayBase ) ; return this ; }
private double [ ] pruneEM ( Tree tree , NodeRef node , ColourChangeMatrix mm , MetaPopulation mp ) { double [ ] p = new double [ colourCount ] ; if ( tree . isExternal ( node ) ) { p [ getColour ( node ) ] = _NUM ; } else { NodeRef leftChild = tree . getChild ( node , _NUM ) ; NodeRef rightChild = tree . getChild ( node , _NUM ) ; double [ ] left = pruneEM ( tree , leftChild , mm , mp ) ; double [ ] right = pruneEM ( tree , rightChild , mm , mp ) ; double [ ] leftBranchPartials = pruneBranchEM ( mm , left , node , leftChild , tree , mp ) ; double [ ] rightBranchPartials = pruneBranchEM ( mm , right , node , rightChild , tree , mp ) ; double maxp = _NUM ; for ( int i = _NUM ; i < colourCount ; i ++ ) { p [ i ] = leftBranchPartials [ i ] * rightBranchPartials [ i ] ; if ( useNodeBias ) { p [ i ] *= mm . getEquilibrium ( i ) / mp . getDemographic ( tree . getNodeHeight ( node ) - tinyTime , i ) ; } if ( p [ i ] > maxp ) { maxp = p [ i ] ; } } if ( maxp < _NUM ) { for ( int i = _NUM ; i < colourCount ; i ++ ) { p [ i ] *= _NUM ; } logNodePartialsRescaling -= Math . log ( _NUM ) ; } } nodePartials [ node . getNumber ( ) ] = p ; if ( debugNodePartials ) { prettyPrint ( _STR + node . getNumber ( ) + _STR , p ) ; } return p ; }
public static int minPathSum ( int [ ] [ ] grid ) { if ( grid == null || grid . length == _NUM ) return _NUM ; int m = grid . length ; int n = grid [ _NUM ] . length ; int [ ] rowSum = new int [ n ] ; rowSum [ _NUM ] = grid [ _NUM ] [ _NUM ] ; for ( int col = _NUM ; col < n ; col ++ ) rowSum [ col ] = rowSum [ col - _NUM ] + grid [ _NUM ] [ col ] ; for ( int row = _NUM ; row < m ; row ++ ) { rowSum [ _NUM ] += grid [ row ] [ _NUM ] ; for ( int col = _NUM ; col < n ; col ++ ) { rowSum [ col ] = Math . min ( rowSum [ col - _NUM ] , rowSum [ col ] ) + grid [ row ] [ col ] ; } } return rowSum [ n - _NUM ] ; }
private static void appendJSONPair ( StringBuilder json , String key , String value ) throws UnsupportedEncodingException { boolean isValueNumeric = _BOOL ; try { if ( value . equals ( _STR ) || ! value . endsWith ( _STR ) ) { Double . parseDouble ( value ) ; isValueNumeric = _BOOL ; } } catch ( NumberFormatException e ) { isValueNumeric = _BOOL ; } if ( json . charAt ( json . length ( ) - _NUM ) != _STR ) { json . append ( _STR ) ; } json . append ( escapeJSON ( key ) ) ; json . append ( _STR ) ; if ( isValueNumeric ) { json . append ( value ) ; } else { json . append ( escapeJSON ( value ) ) ; } }
public Time ( Date time ) { SimpleTimeZone tz = new SimpleTimeZone ( _NUM , _STR ) ; SimpleDateFormat dateF = new SimpleDateFormat ( _STR ) ; dateF . setTimeZone ( tz ) ; String d = dateF . format ( time ) + _STR ; int year = Integer . parseInt ( d . substring ( _NUM , _NUM ) ) ; if ( year < _NUM || year > _NUM ) { this . time = new DERGeneralizedTime ( d ) ; } else { this . time = new DERUTCTime ( d . substring ( _NUM ) ) ; } }
public DCheckUpdate ( JFrame parent ) { super ( parent , Dialog . ModalityType . DOCUMENT_MODAL ) ; initComponents ( ) ; }
public static Automaton minimizeSimple ( Automaton a ) { Set < Integer > initialSet = new HashSet < Integer > ( ) ; a = determinizeSimple ( Operations . reverse ( a , initialSet ) , initialSet ) ; initialSet . clear ( ) ; a = determinizeSimple ( Operations . reverse ( a , initialSet ) , initialSet ) ; return a ; }
@ Override public boolean equals ( Object o ) { if ( this == o ) return _BOOL ; if ( o == null || getClass ( ) != o . getClass ( ) ) return _BOOL ; AbstractItem < ? , ? > that = ( AbstractItem < ? , ? > ) o ; return mIdentifier == that . mIdentifier ; }
public void addColumn ( Column column ) { if ( column != null ) { columns . add ( column ) ; } }
public static byte [ ] decode ( String str , int flags ) { return decode ( str . getBytes ( ) , flags ) ; }
private boolean checkForNaNs ( NumberVector vec ) { for ( int i = _NUM , d = vec . getDimensionality ( ) ; i < d ; i ++ ) { double v = vec . doubleValue ( i ) ; if ( v != v ) { return _BOOL ; } } return _BOOL ; }
public static void fill ( StringBuilder strb , int offset ) { while ( strb . length ( ) < offset ) strb . append ( _STR ) ; }
public void openForWrite ( ) throws EventException { File f = new File ( ConfigUtils . getInitialPropertyExpanded ( m_address . getPathname ( ) ) ) ; try { if ( ! f . exists ( ) ) { f . createNewFile ( ) ; } else { LOGGER . info ( _STR + m_address . getPathname ( ) ) ; } } catch ( IOException ioe ) { throw new EventException ( _STR + m_address . getPathname ( ) + _STR + ioe ) ; } try { m_fos = new FileOutputStream ( f , _BOOL ) ; } catch ( FileNotFoundException fnfe ) { throw new EventException ( _STR + m_address . getPathname ( ) + _STR + fnfe ) ; } }
@ Override public double calculate_K ( int [ ] x_index , double [ ] x_att , int [ ] y_index , double [ ] y_att ) { return ( Math . exp ( gamma * norm2 ( x_index , x_att , y_index , y_att ) ) ) ; }
@ Override public void close ( ) throws IOException { Throwable thrown = null ; try { flush ( ) ; } catch ( Throwable e ) { thrown = e ; } try { out . close ( ) ; } catch ( Throwable e ) { if ( thrown == null ) { thrown = e ; } } }
public static void writeFofn ( final File destination , final List < File > files ) throws IOException { final BufferedWriter bw = new BufferedWriter ( new FileWriter ( destination ) ) ; try { for ( final File file : files ) { bw . write ( wrapArg ( file . getAbsolutePath ( ) ) ) ; bw . newLine ( ) ; } bw . flush ( ) ; } finally { bw . close ( ) ; } }
void markInternalClasses ( ) { for ( int i = mClassDefs . length - _NUM ; i >= _NUM ; i -- ) { mTypeIds [ mClassDefs [ i ] . classIdx ] . internal = _BOOL ; } for ( int i = _NUM ; i < mTypeIds . length ; i ++ ) { String className = mStrings [ mTypeIds [ i ] . descriptorIdx ] ; if ( className . length ( ) == _NUM ) { mTypeIds [ i ] . internal = _BOOL ; } else if ( className . charAt ( _NUM ) == _STR ) { mTypeIds [ i ] . internal = _BOOL ; } } }
public final double cos ( ) { return Math . cos ( this . radians ) ; }
public static double ssError ( double [ ] predictedValues , double [ ] targetAttribute ) { double ret = _NUM ; for ( int i = _NUM ; i < predictedValues . length ; i ++ ) { ret += Math . pow ( targetAttribute [ i ] - predictedValues [ i ] , _NUM ) ; } return ret ; }
public int size ( ) { return prefixes . size ( ) ; }
@ Override public Writer append ( CharSequence value ) { builder . append ( value ) ; return this ; }
public static String timestamp ( DateTime ts ) { return Long . toString ( ts . getMillis ( ) / _NUM ) ; }
public String consume ( String name , boolean required ) throws ParseException { if ( name == null ) { if ( content == null && required ) { throw new ParseException ( CoreErrorDomain . ERR . missingRequiredContent ) ; } contentConsumed = _BOOL ; return content ; } String value = attrs . get ( name ) ; if ( value == null ) { if ( required ) { ParseException pe = new ParseException ( CoreErrorDomain . ERR . missingAttribute ) ; pe . setInternalReason ( _STR + name + _STR ) ; throw pe ; } return null ; } attrs . remove ( name ) ; return value ; }
public int copy ( byte [ ] bytes , int at ) { System . arraycopy ( this . bytes , _NUM , bytes , at , this . length ) ; return at + this . length ; }
public void importKey ( ECKey key ) { lock . lock ( ) ; try { checkKeyEncryptionStateMatches ( key ) ; if ( hasKey ( key ) ) return ; importKeyLocked ( key ) ; queueOnKeysAdded ( ImmutableList . of ( key ) ) ; } finally { lock . unlock ( ) ; } }
public ConnectionGroupTree ( UserContext userContext , ConnectionGroup root , List < ObjectPermission . Type > permissions ) throws GuacamoleException { this . rootAPIGroup = new APIConnectionGroup ( root ) ; retrievedGroups . put ( root . getIdentifier ( ) , this . rootAPIGroup ) ; User self = userContext . self ( ) ; this . connectionPermissions = self . getConnectionPermissions ( ) ; this . sharingProfilePermissions = self . getSharingProfilePermissions ( ) ; this . connectionDirectory = userContext . getConnectionDirectory ( ) ; this . connectionGroupDirectory = userContext . getConnectionGroupDirectory ( ) ; this . sharingProfileDirectory = userContext . getSharingProfileDirectory ( ) ; addConnectionGroupDescendants ( Collections . singleton ( root ) , permissions ) ; }
private boolean containsSingleMetric ( BufferedReader reader ) throws FormatParseException { try { reader . mark ( _NUM ) ; char firstChar = ( char ) reader . read ( ) ; reader . reset ( ) ; return firstChar == _STR ; } catch ( IOException e ) { throw new FormatParseException ( _STR , e ) ; } }
public void addButtonPressedListener ( FieldConfigStringButtonInterface listener ) { if ( buttonPressedListenerList == null ) { buttonPressedListenerList = new ArrayList < FieldConfigStringButtonInterface > ( ) ; } buttonPressedListenerList . add ( listener ) ; }
private String separeMetaTagsContent ( String content ) { String result = Utils . pregMatch ( content , Constants . METATAG_CONTENT_PATTERN , _NUM ) ; return htmlDecode ( result ) ; }
@ Override public void removeColumns ( Column ... columns ) { for ( Column c : columns ) { columnList . remove ( c ) ; } }
private void readServiceConfig ( ) throws SSOException , SMSException { if ( debug . messageEnabled ( ) ) { debug . message ( _STR ) ; } SSOToken internalToken = ( SSOToken ) AccessController . doPrivileged ( AdminTokenAction . getInstance ( ) ) ; serviceSchemaManager = new ServiceSchemaManager ( G11N_SETTINGS_SERVICE_NAME , internalToken ) ; ServiceSchema gsc = serviceSchemaManager . getGlobalSchema ( ) ; rawServiceData = gsc . getAttributeDefaults ( ) ; }
public void refreshPreferences ( Context context ) { if ( mEnabledResId != _NUM ) { final SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( context ) ; if ( ! prefs . getBoolean ( context . getString ( mEnabledResId ) , mEnabledDefault ) ) { setTriggerKeys ( Collections . < Long > emptySet ( ) ) ; return ; } } setTriggerKeys ( KeyComboPreference . getKeyCodesForPreference ( context , mAssignedKeysResId ) ) ; }
void addInheritedTypes ( TypeMirror typeMirror , Types typesUtils ) { if ( ! CompilerUtils . typeMirrorInCollection ( inheritedTypes , typeMirror , typesUtils ) ) { inheritedTypes . add ( typeMirror ) ; } }
public static Histogram multiply ( Histogram x , double y ) { return x . modifyEventCounters ( null ) ; }
public void paint ( Graphics g ) { if ( m_from == null || m_to == null ) return ; Polygon arrow = new Polygon ( ) ; Point from = null ; Point to = null ; if ( isRightTop ( ) ) { from = addPoint ( arrow , m_from , SwingConstants . RIGHT , _BOOL ) ; to = addPoint ( arrow , m_to , SwingConstants . TOP , _BOOL ) ; } else if ( isBottomTop ( ) ) { from = addPoint ( arrow , m_from , SwingConstants . BOTTOM , _BOOL ) ; to = addPoint ( arrow , m_to , SwingConstants . TOP , _BOOL ) ; } else if ( isTopBottom ( ) ) { from = addPoint ( arrow , m_from , SwingConstants . TOP , _BOOL ) ; to = addPoint ( arrow , m_to , SwingConstants . BOTTOM , _BOOL ) ; } else if ( isLeftRight ( ) ) { from = addPoint ( arrow , m_from , SwingConstants . LEFT , _BOOL ) ; to = addPoint ( arrow , m_to , SwingConstants . RIGHT , _BOOL ) ; } else { from = addPoint ( arrow , m_from , SwingConstants . RIGHT , _BOOL ) ; to = addPoint ( arrow , m_to , SwingConstants . LEFT , _BOOL ) ; } if ( ! m_next . isUnconditional ( ) ) { g . setColor ( Color . red ) ; g . fillPolygon ( arrow ) ; } if ( m_visited ) g . setColor ( Color . green ) ; else g . setColor ( Color . black ) ; g . drawPolygon ( arrow ) ; if ( m_next . isFromSplitAnd ( ) ) { g . setColor ( Color . magenta ) ; g . fillOval ( from . x - _NUM , from . y - _NUM , _NUM , _NUM ) ; } if ( m_next . isToJoinAnd ( ) ) { g . setColor ( Color . magenta ) ; g . fillOval ( to . x - _NUM , to . y - _NUM , _NUM , _NUM ) ; } if ( m_description != null ) { Graphics2D g2D = ( Graphics2D ) g ; Font font = new Font ( _STR , Font . PLAIN , _NUM ) ; if ( m_next . isUnconditional ( ) ) g2D . setColor ( Color . black ) ; else g2D . setColor ( Color . red ) ; TextLayout layout = new TextLayout ( m_description , font , g2D . getFontRenderContext ( ) ) ; int x = _NUM ; if ( from . x < to . x ) x = from . x + ( ( to . x - from . x ) / _NUM ) ; else x = to . x + ( ( from . x - to . x ) / _NUM ) ; int y = _NUM ; if ( from . y < to . y ) y = from . y + ( ( to . y - from . y ) / _NUM ) ; else y = to . y + ( ( from . y - to . y ) / _NUM ) ; y -= ( layout . getAscent ( ) - _NUM ) ; x -= ( layout . getAdvance ( ) / _NUM ) ; if ( x < _NUM ) x = _NUM ; layout . draw ( g2D , x , y ) ; } }
public void addCacheParticipants ( Map < UUID , IgniteUuid > allParticipants , Map < UUID , IgniteUuid > addedParticipants ) { verStore . addParticipants ( allParticipants , addedParticipants ) ; }
public static String toJSONString ( Map map ) { final StringWriter writer = new StringWriter ( ) ; try { writeJSONString ( map , writer ) ; return writer . toString ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
public void printContext ( PrintStream out ) { out . println ( getMessage ( ) ) ; out . print ( context ) ; }
public int size ( ) { return methods . size ( ) ; }
private void storeRequestId ( String requestId , String key ) { requestIds . put ( requestId , key ) ; }
private void savepostMni ( String mnipostLocation , String mnipostRespLocation , List manageNameIdList , com . sun . identity . saml2 . jaxb . metadata . ObjectFactory objFact ) throws JAXBException { if ( mnipostLocation != null && mnipostLocation . length ( ) > _NUM ) { ManageNameIDServiceElement slsElemPost = objFact . createManageNameIDServiceElement ( ) ; slsElemPost . setBinding ( httpPostBinding ) ; slsElemPost . setLocation ( mnipostLocation ) ; slsElemPost . setResponseLocation ( mnipostRespLocation ) ; manageNameIdList . add ( slsElemPost ) ; } }
public static boolean goToUpdatePage ( Context context ) { final Uri playStoreUri = Uri . parse ( _STR + context . getPackageName ( ) ) ; FreshAirLog . i ( _STR + playStoreUri . toString ( ) ) ; final Intent playStoreIntent = new Intent ( Intent . ACTION_VIEW , playStoreUri ) ; final PackageManager packageManager = context . getPackageManager ( ) ; for ( ResolveInfo resolveInfo : packageManager . queryIntentActivities ( playStoreIntent , _NUM ) ) { final ActivityInfo resolveActivity = resolveInfo . activityInfo ; final String resolvePackageName = resolveActivity . packageName ; if ( resolvePackageName . equals ( _STR ) ) { FreshAirLog . i ( _STR ) ; playStoreIntent . setComponent ( new ComponentName ( resolvePackageName , resolveActivity . name ) ) ; context . startActivity ( playStoreIntent ) ; return _BOOL ; } } FreshAirLog . e ( _STR + playStoreUri . toString ( ) ) ; return _BOOL ; }
public IJavaElement createElement ( ClassScope scope , ICompilationUnit unit , HashSet existingElements , HashMap knownScopes ) { return createElement ( scope , scope . referenceContext . sourceStart , unit , existingElements , knownScopes ) ; }
public static List < String > toRelativeFiles ( @ NotNull VirtualFile root , @ NotNull final Collection < VirtualFile > files ) { ArrayList < String > rc = new ArrayList < String > ( files . size ( ) ) ; for ( VirtualFile file : files ) { rc . add ( relativePath ( root , file ) ) ; } return rc ; }
synchronized static void ensureSecurityManager ( ) { if ( System . getSecurityManager ( ) == null ) { System . setSecurityManager ( new RMISecurityManager ( ) ) ; } }
public static BigDecimal rate ( int p_C_CurrencyFrom_ID , int p_C_CurrencyTo_ID , Timestamp p_ConversionDate , int p_C_ConversionType_ID , int p_AD_Client_ID , int p_AD_Org_ID ) throws SQLException { if ( p_C_CurrencyFrom_ID == p_C_CurrencyTo_ID ) return Adempiere . ONE ; Timestamp ConversionDate = p_ConversionDate ; if ( ConversionDate == null ) ConversionDate = new Timestamp ( System . currentTimeMillis ( ) ) ; ConversionDate = Adempiere . trunc ( ConversionDate ) ; int C_ConversionType_ID = p_C_ConversionType_ID ; if ( C_ConversionType_ID == _NUM ) { String sql = _STR + _STR + _STR + _STR + _STR ; C_ConversionType_ID = Adempiere . getSQLValue ( sql , p_AD_Client_ID ) ; } BigDecimal rate = null ; String sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR ; PreparedStatement pstmt = Adempiere . prepareStatement ( sql ) ; pstmt . setInt ( _NUM , p_C_CurrencyFrom_ID ) ; pstmt . setInt ( _NUM , p_C_CurrencyTo_ID ) ; pstmt . setInt ( _NUM , C_ConversionType_ID ) ; pstmt . setTimestamp ( _NUM , ConversionDate ) ; pstmt . setTimestamp ( _NUM , ConversionDate ) ; pstmt . setInt ( _NUM , p_AD_Client_ID ) ; pstmt . setInt ( _NUM , p_AD_Org_ID ) ; ResultSet rs = pstmt . executeQuery ( ) ; if ( rs . next ( ) ) { rate = rs . getBigDecimal ( _NUM ) ; } rs . close ( ) ; pstmt . close ( ) ; if ( rate == null ) return null ; return rate ; }
public static Socket doInteraction ( final HttpsURLConnection clientConnection , final ServerSocket serverSocket , final int responseCode , final boolean doAuthentication ) throws Throwable { clientConnection . setDoInput ( _BOOL ) ; clientConnection . setConnectTimeout ( TIMEOUT ) ; clientConnection . setReadTimeout ( TIMEOUT ) ; ServerWork server = new ServerWork ( serverSocket , responseCode , doAuthentication ) ; ClientConnectionWork client = new ClientConnectionWork ( clientConnection ) ; ExecutorService executorService = Executors . newFixedThreadPool ( _NUM ) ; try { Future < Void > serverFuture = executorService . submit ( server ) ; Future < Void > clientFuture = executorService . submit ( client ) ; Throwable t = null ; try { serverFuture . get ( _NUM , TimeUnit . SECONDS ) ; } catch ( ExecutionException e ) { t = e . getCause ( ) ; } try { clientFuture . get ( _NUM , TimeUnit . SECONDS ) ; } catch ( ExecutionException e ) { if ( t != null ) { t . printStackTrace ( ) ; } t = e . getCause ( ) ; } if ( t != null ) { throw t ; } } catch ( ExecutionException e ) { throw e . getCause ( ) ; } finally { executorService . shutdown ( ) ; } return server . peerSocket ; }
public static SnmpEngineId createEngineId ( int port ) throws UnknownHostException { int suniana = _NUM ; InetAddress address = null ; address = InetAddress . getLocalHost ( ) ; return createEngineId ( address , port , suniana ) ; }
public static List < Rule > parseReferential ( String path ) { Ruleset ruleset = DelphiRulesUtils . buildRuleSetFromXml ( DelphiRulesUtils . getConfigurationFromFile ( path ) ) ; List < Rule > rulesRepository = new ArrayList < Rule > ( ) ; for ( DelphiRule fRule : ruleset . getRules ( ) ) { rulesRepository . add ( createRepositoryRule ( fRule ) ) ; } return rulesRepository ; }
public void dispose ( ) { logDebug ( _STR ) ; mSetupDone = _BOOL ; if ( mServiceConn != null ) { logDebug ( _STR ) ; if ( mContext != null ) mContext . unbindService ( mServiceConn ) ; } mDisposed = _BOOL ; mContext = null ; mServiceConn = null ; mService = null ; mPurchaseListener = null ; }
public org . w3c . dom . Document encryptAndReplaceWSSElements ( org . w3c . dom . Document doc , java . util . Map elmMap , java . lang . String encDataEncAlg , int encDataEncAlgStrength , String certAlias , int kekStrength , java . lang . String tokenType , java . lang . String providerID ) throws EncryptionException { return null ; }
public void addIssue ( int reason , EObject obj , int featureId ) { issues . add ( new TransformationIssue ( reason , obj , featureId , null ) ) ; }
public void insertChild ( Node node , int index ) { node . detachFromParent ( ) ; node . parentNode = this ; try { initChildNodes ( node ) ; childNodes . add ( index , node ) ; } catch ( IndexOutOfBoundsException ignore ) { throw new LagartoDOMException ( _STR + index ) ; } reindexChildren ( ) ; }
private static byte [ ] ntlmHash ( final String password ) throws AuthenticationException { try { final byte [ ] unicodePassword = password . getBytes ( _STR ) ; final MD4 md4 = new MD4 ( ) ; md4 . update ( unicodePassword ) ; return md4 . getOutput ( ) ; } catch ( UnsupportedEncodingException e ) { throw new AuthenticationException ( _STR + e . getMessage ( ) , e ) ; } }
private boolean betweenZeroAndOne ( final String paramName , final double val ) { if ( ( val < _NUM ) || ( val > _NUM ) ) { JOptionPane . showMessageDialog ( null , paramName + _STR , _STR , JOptionPane . WARNING_MESSAGE ) ; return _BOOL ; } return _BOOL ; }
public abstract String substituteMacros ( String parameterValue , MacroHandler mh ) throws UndefinedParameterError ;
public void powEquals ( double exp ) { for ( int i = _NUM ; i < A . length ; i ++ ) for ( int j = _NUM ; j < A [ i ] . length ; j ++ ) A [ i ] [ j ] = Math . pow ( A [ i ] [ j ] , exp ) ; }
private static List < String > splitCamelCase ( String className ) { String remaining = className ; List < String > result = new ArrayList < String > ( ) ; while ( ! remaining . isEmpty ( ) ) { boolean found = _BOOL ; for ( int i = _NUM ; i < remaining . length ( ) ; i ++ ) { if ( Character . isUpperCase ( remaining . charAt ( i ) ) ) { result . add ( remaining . substring ( _NUM , i ) ) ; remaining = remaining . substring ( i ) ; found = _BOOL ; break ; } } if ( ! found ) { result . add ( remaining ) ; remaining = _STR ; } } return result ; }
public static NodeList selectNodeList ( Node doc , String str , NamespaceContext nsctx ) throws XPathException { XPathFactory xpf = xpathFactoryCache . getInstanceForCurrentThread ( ) ; XPath xpath = xpf . newXPath ( ) ; xpath . setNamespaceContext ( nsctx ) ; XPathExpression expr = xpath . compile ( str ) ; return ( NodeList ) expr . evaluate ( doc , XPathConstants . NODESET ) ; }
public ResultEntry ( NondominatedPopulation population , TypedProperties properties ) { this ( population , properties == null ? null : properties . getProperties ( ) ) ; }
private void generateDiscovery ( ) throws SAXException { handler . startElement ( _STR , LOCATORS , LOCATORS , EMPTY ) ; generateLocators ( ) ; handler . endElement ( _STR , LOCATORS , LOCATORS ) ; }
protected BasicType ( Class < T > type , int sqlType ) { super ( type , sqlType ) ; checkNull = ! type . isPrimitive ( ) ; }
@ Override public void actionPerformed ( ActionEvent e ) { }
public void applyProperties ( ) { for ( ParameterType type : allParameterTypes ) { String value = allParameterValues . getProperty ( type . getKey ( ) ) ; ParameterService . setParameterValue ( type , value ) ; } }
private void rotateLeft ( Node < K , V > root ) { Node < K , V > left = root . left ; Node < K , V > pivot = root . right ; Node < K , V > pivotLeft = pivot . left ; Node < K , V > pivotRight = pivot . right ; root . right = pivotLeft ; if ( pivotLeft != null ) { pivotLeft . parent = root ; } replaceInParent ( root , pivot ) ; pivot . left = root ; root . parent = pivot ; root . height = Math . max ( left != null ? left . height : _NUM , pivotLeft != null ? pivotLeft . height : _NUM ) + _NUM ; pivot . height = Math . max ( root . height , pivotRight != null ? pivotRight . height : _NUM ) + _NUM ; }
public void add ( ClusterNode newNode ) { if ( node != null ) { nodes = new ArrayList < > ( _NUM ) ; nodes . add ( node ) ; node = null ; } nodes . add ( newNode ) ; }
public boolean checkIfBackupSetExists ( String setName ) { validateNotNullOrEmpty ( setName ) ; try { File file = new File ( getBackupRoot ( ) , setName ) ; if ( file . exists ( ) ) { return _BOOL ; } } catch ( Exception e ) { log . error ( _STR ) ; } return _BOOL ; }
public static String [ ] toQuotedAndCommaSeparatedArray ( String str ) throws IOException { LinkedList < String > values = new LinkedList < String > ( ) ; StreamTokenizer tt = new StreamTokenizer ( new StringReader ( str ) ) ; tt . wordChars ( _STR , _STR ) ; tt . wordChars ( _STR , _STR ) ; tt . wordChars ( _NUM + _NUM , _NUM ) ; tt . whitespaceChars ( _NUM , _STR ) ; tt . quoteChar ( _STR ) ; tt . quoteChar ( _STR ) ; while ( tt . nextToken ( ) != StreamTokenizer . TT_EOF ) { switch ( tt . ttype ) { case StreamTokenizer . TT_WORD : case _STR : case _STR : values . add ( tt . sval ) ; break ; } } return values . toArray ( new String [ values . size ( ) ] ) ; }
public void writeStringNoCompression ( String str ) throws IOException { if ( str == null ) { writeInt ( _NUM ) ; } else { writeInt ( str . length ( ) ) ; for ( int i = _NUM ; i < str . length ( ) ; i ++ ) io . write ( ( byte ) str . charAt ( i ) ) ; } }
public SmartThresholds parse ( final Resource thresholdFileResource ) throws IOException { final SmartThresholds holder = new SmartThresholds ( ) ; BufferedReader reader = null ; try { reader = new BufferedReader ( new InputStreamReader ( thresholdFileResource . getInputStream ( ) ) ) ; String line ; while ( ( line = reader . readLine ( ) ) != null ) { if ( line . startsWith ( _STR ) ) { String [ ] lineInput = line . split ( _STR ) ; holder . addThreshold ( new SmartThreshold ( lineInput ) ) ; } } } finally { if ( reader != null ) { reader . close ( ) ; } } return holder ; }
public void shutdown ( ) { ExecutorService executor = Executors . newScheduledThreadPool ( _NUM ) ; executor . submit ( createShutdown ( _NUM ) ) ; }
@ Override public Point drawingToView ( Point2D . Double p ) { return new Point ( ( int ) ( p . x * scaleFactor ) - translation . x , ( int ) ( p . y * scaleFactor ) - translation . y ) ; }
protected void onConnect ( ) { }
public void addDescriptor ( final SetupDescriptor desc ) { descriptors . add ( desc ) ; }
public static boolean containIP ( int cidrPrefix , int cidrMaskBits , int ip ) { boolean matched = _BOOL ; int bitsToShift = _NUM - cidrMaskBits ; if ( bitsToShift > _NUM ) { cidrPrefix = cidrPrefix > > bitsToShift ; ip = ip > > bitsToShift ; cidrPrefix = cidrPrefix << bitsToShift ; ip = ip << bitsToShift ; } if ( cidrPrefix != ip ) { matched = _BOOL ; } return matched ; }
public static String compileProgressSuccessAction ( String progressSuccessAction ) throws TemplateModelException { Environment env = CommonFtlUtil . getCurrentEnvironment ( ) ; return compileProgressSuccessAction ( progressSuccessAction , ContextFtlUtil . getRequest ( env ) , ContextFtlUtil . getResponse ( env ) ) ; }
public static String join ( String separator , float ... elements ) { if ( elements == null || elements . length == _NUM ) { return _STR ; } List < Number > list = new ArrayList < Number > ( elements . length ) ; for ( Float elem : elements ) { list . add ( elem ) ; } return join ( separator , list ) ; }
public static void putUnsignedByte ( ByteBuffer bb , short v ) { bb . put ( ( byte ) ( v & _NUM ) ) ; }
public static int numOfParameters ( String desc ) { int n = _NUM ; int i = _NUM ; for ( ; ; ) { char c = desc . charAt ( i ) ; if ( c == _STR ) break ; while ( c == _STR ) c = desc . charAt ( ++ i ) ; if ( c == _STR ) { i = desc . indexOf ( _STR , i ) + _NUM ; if ( i <= _NUM ) throw new IndexOutOfBoundsException ( _STR ) ; } else ++ i ; ++ n ; } return n ; }
@ Override public Trie optimize ( Trie orig ) { List < CharSequence > cmds = orig . cmds ; List < Row > rows = new ArrayList < > ( ) ; List < Row > orows = orig . rows ; int remap [ ] = new int [ orows . size ( ) ] ; for ( int j = orows . size ( ) - _NUM ; j >= _NUM ; j -- ) { Row now = new Remap ( orows . get ( j ) , remap ) ; boolean merged = _BOOL ; for ( int i = _NUM ; i < rows . size ( ) ; i ++ ) { Row q = merge ( now , rows . get ( i ) ) ; if ( q != null ) { rows . set ( i , q ) ; merged = _BOOL ; remap [ j ] = i ; break ; } } if ( merged == _BOOL ) { remap [ j ] = rows . size ( ) ; rows . add ( now ) ; } } int root = remap [ orig . root ] ; Arrays . fill ( remap , - _NUM ) ; rows = removeGaps ( root , rows , new ArrayList < Row > ( ) , remap ) ; return new Trie ( orig . forward , remap [ root ] , cmds , rows ) ; }
public boolean isAllDenied ( ) { int count = _NUM ; for ( int i = _NUM ; i < mPerms . size ( ) ; i ++ ) { if ( mPerms . get ( mUserPermission . get ( i ) ) == PackageManager . PERMISSION_DENIED ) count ++ ; } return count == mPerms . size ( ) ; }
public String toStringKey ( ) { String result ; int i ; result = _STR + _STR ; for ( i = _NUM ; i < getColCount ( ) ; i ++ ) { if ( getColHidden ( i ) ) continue ; result += _STR + _STR + ( i + _NUM ) + _STR + _STR + removeFilterName ( m_ColNames [ i ] ) + _STR + _STR ; } result += _STR ; return result ; }
private DateTimeFormatter toFormatter ( Locale locale , ResolverStyle resolverStyle , Chronology chrono ) { Objects . requireNonNull ( locale , _STR ) ; while ( active . parent != null ) { optionalEnd ( ) ; } CompositePrinterParser pp = new CompositePrinterParser ( printerParsers , _BOOL ) ; return new DateTimeFormatter ( pp , locale , DecimalStyle . STANDARD , resolverStyle , null , chrono , null ) ; }
protected void waitForExternalStoreMount ( ) throws Exception { String extStorageState = Environment . getExternalStorageState ( ) ; int currentWaitTime = _NUM ; while ( ! extStorageState . equals ( Environment . MEDIA_MOUNTED ) ) { Log . i ( LOG_TAG , _STR ) ; currentWaitTime = timeoutWait ( currentWaitTime , DEFAULT_WAIT_POLL_TIME , DEFAULT_MAX_WAIT_TIME , _STR ) ; extStorageState = Environment . getExternalStorageState ( ) ; } }
public final void push ( Node value ) { int ff = m_firstFree ; if ( ( ff + _NUM ) >= m_mapSize ) { if ( null == m_map ) { m_map = new Node [ m_blocksize ] ; m_mapSize = m_blocksize ; } else { m_mapSize += m_blocksize ; Node newMap [ ] = new Node [ m_mapSize ] ; System . arraycopy ( m_map , _NUM , newMap , _NUM , ff + _NUM ) ; m_map = newMap ; } } m_map [ ff ] = value ; ff ++ ; m_firstFree = ff ; }
public boolean uploadAndInstallApk ( @ NotNull IDevice device , @ NotNull String packageName , @ NotNull File localFile , @ NotNull LaunchStatus launchStatus ) { if ( ! needsInstall ( device , localFile , packageName ) ) { return _BOOL ; } String remotePath = _STR + packageName ; myPrinter . stdout ( _STR + localFile + _STR + remotePath ) ; try { device . pushFile ( localFile . getPath ( ) , remotePath ) ; boolean installed = installApp ( device , remotePath , packageName , launchStatus ) ; if ( installed ) { myInstalledApkCache . setInstalled ( device , localFile , packageName ) ; } return installed ; } catch ( Exception e ) { myPrinter . stderr ( e . toString ( ) ) ; return _BOOL ; } }
public static ByteArrayList readAsBytes ( InputStream is ) throws IOException { ByteArrayList buf = new ByteArrayList ( ) ; byte [ ] b = new byte [ _NUM ] ; int nread = - _NUM ; while ( ( nread = is . read ( b ) ) >= _NUM ) { buf . add ( b , _NUM , nread ) ; } return buf ; }
public static int uninstallSilent ( Context context , String packageName ) { return uninstallSilent ( context , packageName , _BOOL ) ; }
public void open ( final long [ ] list , final int position ) { launchPlayerActivity = _BOOL ; synchronized ( this ) { if ( mShuffleMode == SHUFFLE_AUTO ) { mShuffleMode = SHUFFLE_NORMAL ; } final long oldId = getAudioId ( ) ; final int listlength = list . length ; boolean newlist = _BOOL ; if ( mPlayListLen == listlength ) { newlist = _BOOL ; for ( int i = _NUM ; i < listlength ; i ++ ) { if ( list [ i ] != mPlayList [ i ] ) { newlist = _BOOL ; break ; } } } if ( newlist ) { addToPlayList ( list , - _NUM ) ; notifyChange ( QUEUE_CHANGED ) ; } if ( position >= _NUM ) { mPlayPos = position ; } else { mPlayPos = mShuffler . nextInt ( mPlayListLen ) ; } mHistory . clear ( ) ; openCurrentAndNext ( ) ; if ( oldId != getAudioId ( ) ) { notifyChange ( META_CHANGED ) ; } } }
public Builder names ( final String ... names ) { return names ( Arrays . asList ( names ) ) ; }
public void scheduleAtFixedRate ( TimerTask task , Date when , long period ) { if ( period <= _NUM || when . getTime ( ) < _NUM ) { throw new IllegalArgumentException ( ) ; } long delay = when . getTime ( ) - System . currentTimeMillis ( ) ; scheduleImpl ( task , delay , period , _BOOL ) ; }
public void testNegativeReverseStepByOneWithClosure ( ) { final List callLog = new ArrayList ( ) ; final Closure closure = new RecordingClosure ( callLog ) ; final Range range = createRange ( _NUM , _NUM ) ; range . step ( - _NUM , closure ) ; assertEquals ( _STR , _NUM , callLog . size ( ) ) ; final Iterator iter = callLog . iterator ( ) ; for ( int i = _NUM ; i <= _NUM ; i ++ ) { assertEquals ( _STR , createValue ( i ) , iter . next ( ) ) ; } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public static BigDecimal normalizeDecimalValue ( BigDecimal bigDecimal , int allowedPrecision ) { if ( bigDecimal . precision ( ) > allowedPrecision ) { return null ; } return bigDecimal ; }
protected static Node deserializeString ( String doc ) { try { StringReader reader = new StringReader ( doc ) ; StreamSource source = new StreamSource ( reader ) ; DOMResult result = new DOMResult ( ) ; TransformerFactory tf = TransformerFactory . newInstance ( ) ; Transformer transformer = tf . newTransformer ( ) ; transformer . setOutputProperty ( OutputKeys . ENCODING , DEFAULT_ENCODING ) ; transformer . setOutputProperty ( OutputKeys . INDENT , DEFAULT_INDENT ) ; transformer . transform ( source , result ) ; return result . getNode ( ) ; } catch ( Throwable e ) { log . log ( Level . SEVERE , _STR , e ) ; } return null ; }
public static String append ( final CharSequence url , final Object ... params ) { final String baseUrl = url . toString ( ) ; if ( params == null || params . length == _NUM ) return baseUrl ; if ( params . length % _NUM != _NUM ) throw new IllegalArgumentException ( _STR ) ; final StringBuilder result = new StringBuilder ( baseUrl ) ; addPathSeparator ( baseUrl , result ) ; addParamPrefix ( baseUrl , result ) ; Object value ; result . append ( params [ _NUM ] ) ; result . append ( _STR ) ; value = params [ _NUM ] ; if ( value != null ) result . append ( value ) ; for ( int i = _NUM ; i < params . length ; i += _NUM ) { result . append ( _STR ) ; result . append ( params [ i ] ) ; result . append ( _STR ) ; value = params [ i + _NUM ] ; if ( value != null ) result . append ( value ) ; } return result . toString ( ) ; }
public void sendEventToAgent ( final String event ) { synchronized ( eventSocket ) { eventWriter . print ( event ) ; eventWriter . flush ( ) ; } }
private void applyJMSObjects ( HashMap < String , String > filters ) { StringWriter writer = new StringWriter ( ) ; PrintWriter printWriter = new PrintWriter ( writer ) ; printWriter . println ( ) ; for ( String str : getQueueList ( ) ) { printWriter . println ( _STR + str + _STR ) ; } for ( String str : getTopicList ( ) ) { printWriter . println ( _STR + str + _STR ) ; } filters . put ( _STR , writer . toString ( ) ) ; }
@ Override public Revision next ( ) { try { int revCount , articleID ; revCount = result . getInt ( _NUM ) ; articleID = result . getInt ( _NUM ) ; if ( articleID != this . currentArticleID ) { this . currentRevCounter = _NUM ; this . currentArticleID = articleID ; } if ( revCount - _NUM != this . currentRevCounter ) { logger . error ( _STR + _STR + articleID + _STR + result . getInt ( _NUM ) + _STR + result . getInt ( _NUM ) + _STR + ( this . currentRevCounter + _NUM ) ) ; this . currentRevCounter = revCount ; this . previousRevision = null ; return null ; } this . currentRevCounter = revCount ; this . primaryKey = result . getInt ( _NUM ) ; Revision revision = new Revision ( revCount ) ; revision . setPrimaryKey ( this . primaryKey ) ; if ( ! shouldLoadRevisionText ) { String currentRevision ; Diff diff ; RevisionDecoder decoder = new RevisionDecoder ( config . getCharacterSet ( ) ) ; if ( binaryData ) { decoder . setInput ( result . getBinaryStream ( _NUM ) , _BOOL ) ; } else { decoder . setInput ( result . getString ( _NUM ) ) ; } diff = decoder . decode ( ) ; try { currentRevision = diff . buildRevision ( previousRevision ) ; } catch ( Exception e ) { this . previousRevision = null ; logger . error ( _STR + _STR + result . getInt ( _NUM ) + _STR + result . getInt ( _NUM ) + _STR + result . getInt ( _NUM ) + _STR ) ; return null ; } previousRevision = currentRevision ; revision . setRevisionText ( currentRevision ) ; } else { if ( revApi == null ) { revApi = new RevisionApi ( config ) ; } revision . setRevisionApi ( revApi ) ; } revision . setRevisionID ( result . getInt ( _NUM ) ) ; revision . setArticleID ( articleID ) ; revision . setTimeStamp ( new Timestamp ( result . getLong ( _NUM ) ) ) ; revision . setFullRevisionID ( result . getInt ( _NUM ) ) ; revision . setContributorName ( result . getString ( _NUM ) ) ; revision . setContributorId ( result . getInt ( _NUM ) ) ; revision . setComment ( result . getString ( _NUM ) ) ; revision . setMinor ( result . getBoolean ( _NUM ) ) ; revision . setContributorIsRegistered ( result . getBoolean ( _NUM ) ) ; return revision ; } catch ( DecodingException e ) { throw new RuntimeException ( e ) ; } catch ( SQLException e ) { throw new RuntimeException ( e ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } catch ( WikiApiException e ) { throw new RuntimeException ( e ) ; } }
public void addSelectionColumn ( GridField mField ) { log . config ( mField . getHeader ( ) ) ; int displayLength = mField . getDisplayLength ( ) ; if ( displayLength <= _NUM || displayLength > FIELDLENGTH ) mField . setDisplayLength ( FIELDLENGTH ) ; else displayLength = _NUM ; WEditor editor = null ; Label label = null ; Row panel = new Row ( ) ; contentSimpleRows . appendChild ( panel ) ; if ( mField . isRange ( ) ) { Hbox box = new Hbox ( ) ; editor = WebEditorFactory . getEditor ( mField , _BOOL ) ; label = editor . getLabel ( ) ; editor . setMandatory ( _BOOL ) ; editor . setReadWrite ( _BOOL ) ; editor . dynamicDisplay ( ) ; Component fieldLabel = editor . getComponent ( ) ; box . appendChild ( editor . getComponent ( ) ) ; rangeFirstEditor . add ( mField . getColumnName ( ) ) ; WEditor toRangeEditor = WebEditorFactory . getEditor ( mField , _BOOL ) ; toRangeEditor . setMandatory ( _BOOL ) ; toRangeEditor . setReadWrite ( _BOOL ) ; toRangeEditor . dynamicDisplay ( ) ; m_sEditors2 . add ( toRangeEditor ) ; Label separator = new Label ( _STR ) ; box . appendChild ( separator ) ; Component fieldLabel1 = toRangeEditor . getComponent ( ) ; box . appendChild ( toRangeEditor . getComponent ( ) ) ; if ( displayLength > _NUM ) mField . setDisplayLength ( displayLength ) ; if ( isTwoColumns ) { if ( ! isPair ) panel = new Row ( ) ; } else panel = new Row ( ) ; panel . appendChild ( LayoutUtils . makeRightAlign ( label ) ) ; panel . appendChild ( box ) ; fieldLabel . addEventListener ( Events . ON_OK , this ) ; fieldLabel1 . addEventListener ( Events . ON_OK , this ) ; } else { editor = WebEditorFactory . getEditor ( mField , _BOOL ) ; label = editor . getLabel ( ) ; editor . setMandatory ( _BOOL ) ; editor . setReadWrite ( _BOOL ) ; editor . dynamicDisplay ( ) ; Component fieldLabel = editor . getComponent ( ) ; if ( displayLength > _NUM ) mField . setDisplayLength ( displayLength ) ; panel . appendChild ( LayoutUtils . makeRightAlign ( label ) ) ; panel . appendChild ( fieldLabel ) ; fieldLabel . addEventListener ( Events . ON_OK , this ) ; m_sEditors2 . add ( null ) ; } m_sEditors . add ( editor ) ; }
public void index ( Iterator tuples , String field ) { while ( tuples . hasNext ( ) ) { Tuple t = ( Tuple ) tuples . next ( ) ; index ( t , field ) ; } }
public final static void closeEL ( final OutputStream os ) { try { if ( os != null ) os . close ( ) ; } catch ( final Throwable e ) { } }
public void addSearchListener ( SearchListener l ) { m_SearchListeners . add ( l ) ; }
public boolean isSingleAttributeContainer ( ) { return _BOOL ; }
public Process executeAsync ( final CommandLine command , Map < String , String > environment ) throws IOException { if ( workingDirectory != null && ! workingDirectory . exists ( ) ) { throw new IOException ( workingDirectory + _STR ) ; } return executeInternal ( command , environment , workingDirectory , streamHandler , null ) ; }
public CacheSpan touch ( ) { long now = System . currentTimeMillis ( ) ; File newCacheFile = getCacheFileName ( file . getParentFile ( ) , key , position , now ) ; file . renameTo ( newCacheFile ) ; return CacheSpan . createCacheEntry ( key , position , now , newCacheFile ) ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
public void open ( File file ) throws IOException { checkAWTPermission ( ) ; checkExec ( ) ; checkActionSupport ( Action . OPEN ) ; checkFileValidation ( file ) ; peer . open ( file ) ; }
public static String convertISO8601DurationToNormalTime ( String isoTime ) { String formattedTime = new String ( ) ; if ( isoTime . contains ( _STR ) && isoTime . contains ( _STR ) && isoTime . contains ( _STR ) ) { String hours = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; String minutes = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; String seconds = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; formattedTime = hours + _STR + formatTo2Digits ( minutes ) + _STR + formatTo2Digits ( seconds ) ; } else if ( ! isoTime . contains ( _STR ) && isoTime . contains ( _STR ) && isoTime . contains ( _STR ) ) { String minutes = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; String seconds = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; formattedTime = minutes + _STR + formatTo2Digits ( seconds ) ; } else if ( isoTime . contains ( _STR ) && ! isoTime . contains ( _STR ) && isoTime . contains ( _STR ) ) { String hours = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; String seconds = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; formattedTime = hours + _STR + formatTo2Digits ( seconds ) ; } else if ( isoTime . contains ( _STR ) && isoTime . contains ( _STR ) && ! isoTime . contains ( _STR ) ) { String hours = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; String minutes = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; formattedTime = hours + _STR + formatTo2Digits ( minutes ) + _STR ; } else if ( ! isoTime . contains ( _STR ) && ! isoTime . contains ( _STR ) && isoTime . contains ( _STR ) ) { String seconds = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; formattedTime = _STR + formatTo2Digits ( seconds ) ; } else if ( ! isoTime . contains ( _STR ) && isoTime . contains ( _STR ) && ! isoTime . contains ( _STR ) ) { String minutes = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; formattedTime = minutes + _STR ; } else if ( isoTime . contains ( _STR ) && ! isoTime . contains ( _STR ) && ! isoTime . contains ( _STR ) ) { String hours = isoTime . substring ( isoTime . indexOf ( _STR ) + _NUM , isoTime . indexOf ( _STR ) ) ; formattedTime = hours + _STR ; } return formattedTime ; }
@ Override public void toggleSelection ( T photo ) { if ( selectedPhotos . contains ( photo ) ) { selectedPhotos . remove ( photo ) ; } else { selectedPhotos . add ( photo ) ; } }
protected void preTick ( ) { }
public byte map ( byte src ) { char c = map ( ( char ) src ) ; if ( c < Byte . MIN_VALUE || c > Byte . MAX_VALUE ) { return _NUM ; } return ( byte ) c ; }
private void translateMatrixAfterRotate ( int axis , float trans , float prevImageSize , float imageSize , int prevViewSize , int viewSize , int drawableSize ) { if ( imageSize < viewSize ) { m [ axis ] = ( viewSize - ( drawableSize * m [ Matrix . MSCALE_X ] ) ) * _NUM ; } else if ( trans > _NUM ) { m [ axis ] = - ( ( imageSize - viewSize ) * _NUM ) ; } else { float percentage = ( Math . abs ( trans ) + ( _NUM * prevViewSize ) ) / prevImageSize ; m [ axis ] = - ( ( percentage * imageSize ) - ( viewSize * _NUM ) ) ; } }
public Object produceEvent ( ) throws InvocationTargetException { if ( ! valid ) { throw new IllegalStateException ( toString ( ) + _STR ) ; } try { return method . invoke ( target ) ; } catch ( IllegalAccessException e ) { throw new AssertionError ( e ) ; } catch ( InvocationTargetException e ) { if ( e . getCause ( ) instanceof Error ) { throw ( Error ) e . getCause ( ) ; } throw e ; } }
public String wrapIfKeywordOrBuiltIn ( String name ) { if ( KEYWORD_BUILT_IN_SET . contains ( name ) ) { return name + _STR ; } return name ; }
public IssueMatcher add ( ) { IssueMatcher issueMatcher = new IssueMatcher ( ) ; issueMatchers . add ( issueMatcher ) ; return issueMatcher ; }
private < T > InjectScope < T > findScope ( AnnotatedElement annElement ) { for ( Annotation ann : annElement . getAnnotations ( ) ) { Class < ? extends Annotation > annType = ann . annotationType ( ) ; if ( annType . isAnnotationPresent ( Scope . class ) ) { Supplier < InjectScope < T > > scopeGen = ( Supplier ) _scopeMap . get ( annType ) ; if ( scopeGen != null ) { return scopeGen . get ( ) ; } else { log . fine ( L . l ( _STR , annType . getSimpleName ( ) ) ) ; } } } return new InjectScopeFactory < > ( ) ; }
private static native int [ ] RegOpenKey ( int hKey , byte [ ] subKey , int securityMask ) ;
public void removePropertyChangeListener ( IPropertyChangeListener listener ) { listeners . remove ( listener ) ; }
@ Override public int previous ( ) { CharacterIterator text = getText ( ) ; if ( current ( ) == text . getBeginIndex ( ) ) { return BreakIterator . DONE ; } int start = current ( ) ; int lastResult = cachedLastKnownBreak ; if ( lastResult >= start || lastResult <= BreakIterator . DONE ) { getPrevious ( ) ; lastResult = handlePrevious ( ) ; } else { text . setIndex ( lastResult ) ; } int result = lastResult ; while ( result != BreakIterator . DONE && result < start ) { lastResult = result ; result = handleNext ( ) ; } text . setIndex ( lastResult ) ; cachedLastKnownBreak = lastResult ; return lastResult ; }
public DeferredImageReplacedElement ( ImageResource imageResource , RepaintListener repaintListener , int w , int h ) { this . _imageResource = imageResource ; _loaded = _BOOL ; this . repaintListener = repaintListener ; if ( w == - _NUM && h == - _NUM ) { _doScaleImage = _BOOL ; _targetHeight = _NUM ; _targetWidth = _NUM ; } else { _doScaleImage = _BOOL ; _targetHeight = Math . max ( _NUM , h ) ; _targetWidth = Math . max ( _NUM , w ) ; } _image = ImageUtil . createCompatibleBufferedImage ( _targetWidth , _targetHeight ) ; }
public boolean startsWith ( Name n ) { if ( n instanceof CompoundName ) { return ( impl . startsWith ( n . size ( ) , n . getAll ( ) ) ) ; } else { return _BOOL ; } }
public ParameterizedGenericMethodBinding ( MethodBinding originalMethod , TypeBinding [ ] typeArguments , LookupEnvironment environment ) { this . environment = environment ; this . modifiers = originalMethod . modifiers ; this . selector = originalMethod . selector ; this . declaringClass = originalMethod . declaringClass ; this . typeVariables = Binding . NO_TYPE_VARIABLES ; this . typeArguments = typeArguments ; this . isRaw = _BOOL ; this . tagBits = originalMethod . tagBits ; this . originalMethod = originalMethod ; this . parameters = Scope . substitute ( this , originalMethod . parameters ) ; this . returnType = Scope . substitute ( this , originalMethod . returnType ) ; this . thrownExceptions = Scope . substitute ( this , originalMethod . thrownExceptions ) ; if ( this . thrownExceptions == null ) this . thrownExceptions = Binding . NO_EXCEPTIONS ; checkMissingType : { if ( ( this . tagBits & TagBits . HasMissingType ) != _NUM ) break checkMissingType ; if ( ( this . returnType . tagBits & TagBits . HasMissingType ) != _NUM ) { this . tagBits |= TagBits . HasMissingType ; break checkMissingType ; } for ( int i = _NUM , max = this . parameters . length ; i < max ; i ++ ) { if ( ( this . parameters [ i ] . tagBits & TagBits . HasMissingType ) != _NUM ) { this . tagBits |= TagBits . HasMissingType ; break checkMissingType ; } } for ( int i = _NUM , max = this . thrownExceptions . length ; i < max ; i ++ ) { if ( ( this . thrownExceptions [ i ] . tagBits & TagBits . HasMissingType ) != _NUM ) { this . tagBits |= TagBits . HasMissingType ; break checkMissingType ; } } } this . wasInferred = _BOOL ; }
public void testInvokeAll5 ( ) throws Throwable { ExecutorService e = new ForkJoinPool ( _NUM ) ; PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; List < Callable < String > > l = new ArrayList < Callable < String > > ( ) ; l . add ( new StringTask ( ) ) ; l . add ( new StringTask ( ) ) ; List < Future < String > > futures = e . invokeAll ( l ) ; assertEquals ( _NUM , futures . size ( ) ) ; for ( Future < String > future : futures ) assertSame ( TEST_STRING , future . get ( ) ) ; } finally { if ( cleaner != null ) { cleaner . close ( ) ; } } }
public InternalListener ( final ConfigManager configFile ) { this . configFile = configFile ; }
public byte [ ] sign ( byte [ ] hash ) { ECDSASigner signer = new ECDSASigner ( new HMacDSAKCalculator ( new SHA256Digest ( ) ) ) ; signer . init ( _BOOL , new ECPrivateKeyParameters ( priv , domain ) ) ; BigInteger [ ] signature = signer . generateSignature ( hash ) ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; try { DERSequenceGenerator seq = new DERSequenceGenerator ( baos ) ; seq . addObject ( new ASN1Integer ( signature [ _NUM ] ) ) ; seq . addObject ( new ASN1Integer ( toCanonicalS ( signature [ _NUM ] ) ) ) ; seq . close ( ) ; return baos . toByteArray ( ) ; } catch ( IOException e ) { } return null ; }
public TimePeriod ( Date startTime , Date endTime ) { if ( startTime != null && endTime != null && ! endTime . after ( startTime ) ) { throw new IllegalArgumentException ( _STR + endTime + _STR + startTime ) ; } this . startTime = startTime ; this . endTime = endTime ; }
JMenu createEditMenu ( ) { JMenu editMenu = new JMenu ( _STR ) ; editMenu . add ( actionManager . getCutAction ( ) ) ; editMenu . add ( actionManager . getCopyAction ( ) ) ; editMenu . add ( actionManager . getPasteAction ( ) ) ; editMenu . add ( actionManager . getDeleteAction ( ) ) ; editMenu . addSeparator ( ) ; editMenu . add ( actionManager . getClearSourceNeuronsAction ( ) ) ; editMenu . add ( actionManager . getSetSourceNeuronsAction ( ) ) ; editMenu . add ( actionManager . getConnectionMenu ( ) ) ; editMenu . add ( actionManager . getAddSynapseGroupAction ( ) ) ; editMenu . addSeparator ( ) ; editMenu . add ( actionManager . getRandomizeObjectsAction ( ) ) ; editMenu . add ( actionManager . getShowAdjustSynapsesDialog ( ) ) ; editMenu . addSeparator ( ) ; editMenu . add ( actionManager . getLayoutMenu ( ) ) ; editMenu . add ( actionManager . getGroupMenu ( ) ) ; editMenu . addSeparator ( ) ; editMenu . add ( createAlignMenu ( ) ) ; editMenu . add ( createSpacingMenu ( ) ) ; editMenu . addSeparator ( ) ; editMenu . add ( actionManager . getSetNeuronPropertiesAction ( ) ) ; editMenu . add ( actionManager . getSetSynapsePropertiesAction ( ) ) ; editMenu . addSeparator ( ) ; editMenu . add ( createSelectionMenu ( ) ) ; return editMenu ; }
public void removeHistoryChangedListener ( HistoryChangedListener l ) { m_HistoryChangedListeners . remove ( l ) ; }
public void currentState ( long state , Model currentModel ) { currentState = state ; if ( loggers != null ) { for ( Logger logger : loggers ) { logger . log ( state ) ; } } }
public boolean isBOM ( ) { return m_isBOM ; }
public boolean isSigned ( ) { return signed ; }
public Object parseText ( String text ) { if ( text == null || text . length ( ) == _NUM ) { throw new IllegalArgumentException ( _STR ) ; } return parse ( new LineColumnReader ( new StringReader ( text ) ) ) ; }
public int size ( ) { return parts . size ( ) ; }
protected < T > Database makeSimpleDatabase ( String filename , int expectedSize , ListParameterization params , Class < ? > [ ] filters ) { try ( InputStream is = open ( filename ) ) { List < ObjectFilter > filterlist = new ArrayList < > ( ) ; filterlist . add ( new FixedDBIDsFilter ( _NUM ) ) ; if ( filters != null ) { for ( Class < ? > filtercls : filters ) { ObjectFilter filter = ClassGenericsUtil . parameterizeOrAbort ( filtercls , params ) ; filterlist . add ( filter ) ; } } NumberVectorLabelParser < DoubleVector > parser = new NumberVectorLabelParser < > ( DoubleVector . FACTORY ) ; InputStreamDatabaseConnection dbc = new InputStreamDatabaseConnection ( is , filterlist , parser ) ; params . addParameter ( AbstractDatabase . Parameterizer . DATABASE_CONNECTION_ID , dbc ) ; Database db = ClassGenericsUtil . parameterizeOrAbort ( StaticArrayDatabase . class , params ) ; testParameterizationOk ( params ) ; db . initialize ( ) ; Relation < ? > rel = db . getRelation ( TypeUtil . ANY ) ; assertEquals ( _STR , expectedSize , rel . size ( ) ) ; return db ; } catch ( IOException e ) { fail ( _STR + filename + _STR ) ; return null ; } }
protected void addChooserFilters ( JFileChooser chooser ) { javax . swing . filechooser . FileNameExtensionFilter filter ; chooser . addChoosableFileFilter ( filter = new javax . swing . filechooser . FileNameExtensionFilter ( _STR , _STR ) ) ; chooser . setFileFilter ( filter ) ; }
public void onStop ( ) { if ( null != mService ) { if ( null != mContext ) { mContext . unbindService ( mServiceConnection ) ; } mServiceConnection = null ; mService = null ; } }
public String peek ( ) { String result = null ; if ( isEmpty ( ) ) { return null ; } else { int cachedCurrentIndex = currentIndex ; if ( isEatingBlocksOfDelimiters ) { trimStartingDelimiters ( ) ; } int nearestDelimeter = - _NUM ; for ( int i = _NUM ; i < delimiters . length ( ) ; i ++ ) { int delimiter = source . indexOf ( delimiters . charAt ( i ) , currentIndex ) ; if ( nearestDelimeter == - _NUM || delimiter != - _NUM && delimiter < nearestDelimeter ) { nearestDelimeter = delimiter ; } } if ( nearestDelimeter == - _NUM ) { result = source . substring ( currentIndex ) ; } else { result = source . substring ( currentIndex , nearestDelimeter ) ; } currentIndex = cachedCurrentIndex ; } return result ; }
private void eliminarUsuariosOrgano ( GestionOrganizacionBI organizacionBI , OrganizacionVO organizacionVO ) { organizacionBI . eliminarUsuariosOrgano ( organizacionVO . getId ( ) ) ; }
private static void addPreviousLayer ( List < List < Neuron > > layers , List < Neuron > sourceLayer , List < Neuron > layerToCheck ) { final int MAXLAYERS = _NUM ; Set < Neuron > newLayerTemp = new HashSet < Neuron > ( ) ; boolean theNextLayerIsTheSourceLayer = _BOOL ; for ( Neuron neuron : layerToCheck ) { for ( Synapse synapse : neuron . getFanIn ( ) ) { Neuron sourceNeuron = synapse . getSource ( ) ; if ( sourceLayer . contains ( sourceNeuron ) ) { theNextLayerIsTheSourceLayer = _BOOL ; } if ( sourceNeuron == neuron ) { continue ; } newLayerTemp . add ( synapse . getSource ( ) ) ; } } if ( ( theNextLayerIsTheSourceLayer ) || ( newLayerTemp . size ( ) == _NUM ) || ( layers . size ( ) > MAXLAYERS ) ) { layers . add ( sourceLayer ) ; } else { List < Neuron > newLayer = new ArrayList < Neuron > ( newLayerTemp ) ; Collections . sort ( newLayer , OrientationComparator . X_ORDER ) ; layers . add ( newLayer ) ; addPreviousLayer ( layers , sourceLayer , newLayer ) ; } }
public void testShiftRight2 ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = _NUM ; int number = - _NUM ; byte rBytes [ ] = { _NUM , _NUM , - _NUM , _NUM , - _NUM , - _NUM , - _NUM , _NUM , - _NUM , _NUM , - _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . shiftRight ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
public static void ignorm ( double c1 [ ] , double c2 [ ] , int m , double ng ) { if ( ng != _NUM ) { double k = Math . pow ( c1 [ _NUM ] , ng ) ; for ( int i = m ; i >= _NUM ; i -- ) c2 [ i ] = k * c1 [ i ] ; c2 [ _NUM ] = ( k - _NUM ) / ng ; } else { System . arraycopy ( c1 , _NUM , c2 , _NUM , m - _NUM ) ; c2 [ _NUM ] = Math . log ( c1 [ _NUM ] ) ; } }
public static int findNonwhitespaceCharacter ( String s , int index ) { int sLength = s . length ( ) ; while ( index < sLength && Character . isWhitespace ( s . charAt ( index ) ) ) { index ++ ; } return index ; }
public void readContent ( ) throws IOException { if ( offset + length > buffer . length ) { throw new ASN1Exception ( _STR ) ; } if ( in == null ) { offset += length ; } else { int bytesRead = in . read ( buffer , offset , length ) ; if ( bytesRead != length ) { int c = bytesRead ; do { if ( c < _NUM || bytesRead > length ) { throw new ASN1Exception ( _STR ) ; } c = in . read ( buffer , offset + bytesRead , length - bytesRead ) ; bytesRead += c ; } while ( bytesRead != length ) ; } offset += length ; } }
public Primitive ( Object value ) { this . value = value ; type = ( value != null ) ? Utilities . getPrimitiveType ( value . getClass ( ) ) : null ; if ( type == null ) { throw new IllegalArgumentException ( _STR + value ) ; } }
public void createCashBasedJournalEntriesAndReversalsForSavingsTax ( final Office office , final String currencyCode , final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeDebited , final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeCredited , final Long savingsProductId , final Long paymentTypeId , final Long savingsId , final String transactionId , final Date transactionDate , final BigDecimal amount , final Boolean isReversal , final List < TaxPaymentDTO > taxDetails ) { for ( TaxPaymentDTO taxPaymentDTO : taxDetails ) { if ( taxPaymentDTO . getAmount ( ) != null ) { if ( taxPaymentDTO . getCreditAccountId ( ) == null ) { createCashBasedCreditJournalEntriesAndReversalsForSavings ( office , currencyCode , accountTypeToBeCredited . getValue ( ) , savingsProductId , paymentTypeId , savingsId , transactionId , transactionDate , taxPaymentDTO . getAmount ( ) , isReversal ) ; } else { createCashBasedCreditJournalEntriesAndReversalsForSavings ( office , currencyCode , taxPaymentDTO . getCreditAccountId ( ) , savingsId , transactionId , transactionDate , taxPaymentDTO . getAmount ( ) , isReversal ) ; } } } createCashBasedDebitJournalEntriesAndReversalsForSavings ( office , currencyCode , accountTypeToBeDebited . getValue ( ) , savingsProductId , paymentTypeId , savingsId , transactionId , transactionDate , amount , isReversal ) ; }
public int read ( ByteBuf dst , int dstStart , int dstLength ) throws IOException { final int remaining = ( int ) Math . min ( this . length - this . position , Integer . MAX_VALUE ) ; final int read = Math . min ( remaining , dstLength ) ; final int bufferPosition = checkOffset ( position , read ) ; final long srcAddress = PlatformDependent . directBufferAddress ( lastMapped ) + bufferPosition ; if ( dst . hasMemoryAddress ( ) ) { final long dstAddress = dst . memoryAddress ( ) + dstStart ; PlatformDependent . copyMemory ( srcAddress , dstAddress , read ) ; } else if ( dst . hasArray ( ) ) { final byte [ ] dstArray = dst . array ( ) ; PlatformDependent . copyMemory ( srcAddress , dstArray , dstStart , read ) ; } else { throw new IllegalArgumentException ( _STR ) ; } position += read ; return read ; }
public static Calendar clearTime ( final Calendar self ) { clearTimeCommon ( self ) ; return self ; }
public double pdf ( int k ) { return Math . exp ( k * Math . log ( this . mean ) - Arithmetic . logFactorial ( k ) - this . mean ) ; }
public static void appendUnpaddedInteger ( StringBuffer buf , long value ) { int intValue = ( int ) value ; if ( intValue == value ) { appendUnpaddedInteger ( buf , intValue ) ; } else { buf . append ( Long . toString ( value ) ) ; } }
private void drawTextElements ( Canvas canvas , float textSize , Typeface typeface , ColorStateList textColor , String [ ] texts , float [ ] textX , float [ ] textY , Paint paint , int alpha , boolean showActivated , int activatedDegrees , boolean activatedOnly ) { paint . setTextSize ( textSize ) ; paint . setTypeface ( typeface ) ; final float activatedIndex = activatedDegrees / ( _NUM / NUM_POSITIONS ) ; final int activatedFloor = ( int ) activatedIndex ; final int activatedCeil = ( ( int ) Math . ceil ( activatedIndex ) ) % NUM_POSITIONS ; for ( int i = _NUM ; i < _NUM ; i ++ ) { final boolean activated = ( activatedFloor == i || activatedCeil == i ) ; if ( activatedOnly && ! activated ) { continue ; } final int [ ] stateMask = new int [ ] { android . R . attr . state_enabled , ( showActivated && activated ? android . R . attr . state_selected : _NUM ) } ; final int color = textColor . getColorForState ( stateMask , _NUM ) ; paint . setColor ( color ) ; paint . setAlpha ( getMultipliedAlpha ( color , alpha ) ) ; canvas . drawText ( texts [ i ] , textX [ i ] , textY [ i ] , paint ) ; } }
public void testFindSpringActiveDirectoryWithLimit ( ) { LdapProxy proxy = getLdapAD ( ) ; List result = null ; int limit = _NUM ; try { result = proxy . find ( getLdapSearchVO ( _STR , limit , _STR , _STR , null , LdapScopeConstants . SCOPE_SUBTREE ) ) ; } catch ( Exception e ) { } assertNotNull ( result ) ; if ( result != null ) { assertEquals ( limit , result . size ( ) ) ; } }
@ Override public void handleKey ( int virtualKeyCode , int transitionState , char keyChar ) { switchControlKeys ( virtualKeyCode , transitionState ) ; inputBuffer . add ( new GlobalKeyEvent ( this , virtualKeyCode , transitionState , keyChar , menuPressed , shiftPressed , controlPressed , extendedKey ) ) ; }
public int hashCode ( ) { return alignment ^ leader ^ Math . round ( position ) ; }
public static String stripLeadingPeriod ( String s ) { if ( null != s && s . startsWith ( _STR ) ) return s . substring ( Math . min ( _NUM , s . length ( ) ) , s . length ( ) ) ; return s ; }
public static boolean isRequiredConfigDirectory ( final String directory ) { return requiredConfigDirectories . contains ( directory ) ; }
protected ConnectionStateSSLv3 ( SSLSessionImpl session ) { try { CipherSuite cipherSuite = session . cipherSuite ; boolean is_exportabe = cipherSuite . isExportable ( ) ; hash_size = cipherSuite . getMACLength ( ) ; int key_size = ( is_exportabe ) ? cipherSuite . keyMaterial : cipherSuite . expandedKeyMaterial ; int iv_size = cipherSuite . ivSize ; block_size = cipherSuite . getBlockSize ( ) ; String algName = cipherSuite . getBulkEncryptionAlgorithm ( ) ; String hashName = cipherSuite . getHashName ( ) ; if ( logger != null ) { logger . println ( _STR ) ; logger . println ( _STR + session . getCipherSuite ( ) ) ; logger . println ( _STR + algName ) ; logger . println ( _STR + hashName ) ; logger . println ( _STR + hash_size ) ; logger . println ( _STR + block_size ) ; logger . println ( _STR + iv_size ) ; logger . println ( _STR + key_size ) ; } byte [ ] clientRandom = session . clientRandom ; byte [ ] serverRandom = session . serverRandom ; byte [ ] key_block = new byte [ _NUM * hash_size + _NUM * key_size + _NUM * iv_size ] ; byte [ ] seed = new byte [ clientRandom . length + serverRandom . length ] ; System . arraycopy ( serverRandom , _NUM , seed , _NUM , serverRandom . length ) ; System . arraycopy ( clientRandom , _NUM , seed , serverRandom . length , clientRandom . length ) ; PRF . computePRF_SSLv3 ( key_block , session . master_secret , seed ) ; byte [ ] client_mac_secret = new byte [ hash_size ] ; byte [ ] server_mac_secret = new byte [ hash_size ] ; byte [ ] client_key = new byte [ key_size ] ; byte [ ] server_key = new byte [ key_size ] ; boolean is_client = ! session . isServer ; System . arraycopy ( key_block , _NUM , client_mac_secret , _NUM , hash_size ) ; System . arraycopy ( key_block , hash_size , server_mac_secret , _NUM , hash_size ) ; System . arraycopy ( key_block , _NUM * hash_size , client_key , _NUM , key_size ) ; System . arraycopy ( key_block , _NUM * hash_size + key_size , server_key , _NUM , key_size ) ; IvParameterSpec clientIV = null ; IvParameterSpec serverIV = null ; if ( is_exportabe ) { if ( logger != null ) { logger . println ( _STR ) ; } MessageDigest md5 = MessageDigest . getInstance ( _STR ) ; md5 . update ( client_key ) ; md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; client_key = md5 . digest ( ) ; md5 . update ( server_key ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; server_key = md5 . digest ( ) ; key_size = cipherSuite . expandedKeyMaterial ; if ( block_size != _NUM ) { md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; clientIV = new IvParameterSpec ( md5 . digest ( ) , _NUM , iv_size ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; serverIV = new IvParameterSpec ( md5 . digest ( ) , _NUM , iv_size ) ; } } else if ( block_size != _NUM ) { clientIV = new IvParameterSpec ( key_block , _NUM * hash_size + _NUM * key_size , iv_size ) ; serverIV = new IvParameterSpec ( key_block , _NUM * hash_size + _NUM * key_size + iv_size , iv_size ) ; } if ( logger != null ) { logger . println ( _STR + is_exportabe ) ; logger . println ( _STR ) ; logger . print ( session . master_secret ) ; logger . println ( _STR ) ; logger . print ( clientRandom ) ; logger . println ( _STR ) ; logger . print ( serverRandom ) ; logger . println ( _STR ) ; logger . print ( client_mac_secret ) ; logger . println ( _STR ) ; logger . print ( server_mac_secret ) ; logger . println ( _STR ) ; logger . print ( client_key , _NUM , key_size ) ; logger . println ( _STR ) ; logger . print ( server_key , _NUM , key_size ) ; if ( clientIV != null ) { logger . println ( _STR ) ; logger . print ( clientIV . getIV ( ) ) ; logger . println ( _STR ) ; logger . print ( serverIV . getIV ( ) ) ; } else { logger . println ( _STR ) ; } } if ( algName == null ) { encCipher = new NullCipher ( ) ; decCipher = new NullCipher ( ) ; } else { encCipher = Cipher . getInstance ( algName ) ; decCipher = Cipher . getInstance ( algName ) ; if ( is_client ) { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( client_key , _NUM , key_size , algName ) , clientIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( server_key , _NUM , key_size , algName ) , serverIV ) ; } else { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( server_key , _NUM , key_size , algName ) , serverIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( client_key , _NUM , key_size , algName ) , clientIV ) ; } } messageDigest = MessageDigest . getInstance ( hashName ) ; if ( is_client ) { mac_write_secret = client_mac_secret ; mac_read_secret = server_mac_secret ; } else { mac_write_secret = server_mac_secret ; mac_read_secret = client_mac_secret ; } if ( hashName . equals ( _STR ) ) { pad_1 = SSLv3Constants . MD5pad1 ; pad_2 = SSLv3Constants . MD5pad2 ; } else { pad_1 = SSLv3Constants . SHApad1 ; pad_2 = SSLv3Constants . SHApad2 ; } } catch ( Exception e ) { e . printStackTrace ( ) ; throw new AlertException ( AlertProtocol . INTERNAL_ERROR , new SSLProtocolException ( _STR ) ) ; } }
private void updateBaseMatrix ( Drawable d ) { ImageView imageView = getImageView ( ) ; if ( null == imageView || null == d ) { return ; } final float viewWidth = getImageViewWidth ( imageView ) ; final float viewHeight = getImageViewHeight ( imageView ) ; final int drawableWidth = d . getIntrinsicWidth ( ) ; final int drawableHeight = d . getIntrinsicHeight ( ) ; mBaseMatrix . reset ( ) ; final float widthScale = viewWidth / drawableWidth ; final float heightScale = viewHeight / drawableHeight ; if ( mScaleType == ScaleType . CENTER ) { mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth ) / _NUM , ( viewHeight - drawableHeight ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_CROP ) { float scale = Math . max ( widthScale , heightScale ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_INSIDE ) { float scale = Math . min ( _NUM , Math . min ( widthScale , heightScale ) ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else { RectF mTempSrc = new RectF ( _NUM , _NUM , drawableWidth , drawableHeight ) ; RectF mTempDst = new RectF ( _NUM , _NUM , viewWidth , viewHeight ) ; switch ( mScaleType ) { case FIT_CENTER : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . CENTER ) ; break ; case FIT_START : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . START ) ; break ; case FIT_END : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . END ) ; break ; case FIT_XY : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . FILL ) ; break ; default : break ; } } resetMatrix ( ) ; }
private void cleanUpLabels ( ) { int id = _NUM ; for ( Iterator < Label > i = labels . iterator ( ) ; i . hasNext ( ) ; ) { Label label = i . next ( ) ; if ( label . isEmpty ( ) ) { i . remove ( ) ; } else { label . compact ( ) ; label . id = id ++ ; } } }
void zrot ( double theta ) { theta *= ( pi / _NUM ) ; double ct = Math . cos ( theta ) ; double st = Math . sin ( theta ) ; float Nyx = ( float ) ( yx * ct + xx * st ) ; float Nyy = ( float ) ( yy * ct + xy * st ) ; float Nyz = ( float ) ( yz * ct + xz * st ) ; float Nyo = ( float ) ( yo * ct + xo * st ) ; float Nxx = ( float ) ( xx * ct - yx * st ) ; float Nxy = ( float ) ( xy * ct - yy * st ) ; float Nxz = ( float ) ( xz * ct - yz * st ) ; float Nxo = ( float ) ( xo * ct - yo * st ) ; yo = Nyo ; yx = Nyx ; yy = Nyy ; yz = Nyz ; xo = Nxo ; xx = Nxx ; xy = Nxy ; xz = Nxz ; }
public static long nanosFromDate ( long ms ) { Calendar cal = getCalendar ( ) ; cal . setTimeInMillis ( ms ) ; return nanosFromCalendar ( cal ) ; }
@ Override default CompletableFuture < OptionalLong > maxLong ( final ToLongFunction < ? super T > fn ) { return CompletableFuture . supplyAsync ( null , getExec ( ) ) ; }
protected BalancedWebResource createHttpsClient ( final String username , final String password , List < String > hosts ) throws NoSuchAlgorithmException { return createHttpsClient ( username , password , hosts , _BOOL ) ; }
public static char [ ] createArraySignature ( char [ ] typeSignature , int arrayCount ) { if ( arrayCount == _NUM ) return typeSignature ; int sigLength = typeSignature . length ; char [ ] result = new char [ arrayCount + sigLength ] ; for ( int i = _NUM ; i < arrayCount ; i ++ ) { result [ i ] = C_ARRAY ; } System . arraycopy ( typeSignature , _NUM , result , arrayCount , sigLength ) ; return result ; }
public void println ( ) throws IOException { writer . write ( format . getLineSeparator ( ) ) ; }
protected void increaseBufferSize ( int minSize ) { int newLength = buf . length ; while ( newLength < minSize ) newLength *= _NUM ; double [ ] newBuf = new double [ newLength ] ; int avail = currentlyInBuffer ( ) ; System . arraycopy ( buf , readPos , newBuf , _NUM , avail ) ; buf = newBuf ; readPos = _NUM ; writePos = avail ; }
private void handleEnumeratedAttribute ( Instances trainInstances ) throws Exception { Instance instance ; m_distribution = new Distribution ( m_complexityIndex , trainInstances . numClasses ( ) ) ; Enumeration < Instance > enu = trainInstances . enumerateInstances ( ) ; while ( enu . hasMoreElements ( ) ) { instance = enu . nextElement ( ) ; if ( ! instance . isMissing ( m_attIndex ) ) { m_distribution . add ( ( int ) instance . value ( m_attIndex ) , instance ) ; } } if ( m_distribution . check ( m_minNoObj ) ) { m_numSubsets = m_complexityIndex ; m_infoGain = infoGainCrit . splitCritValue ( m_distribution , m_sumOfWeights ) ; m_gainRatio = gainRatioCrit . splitCritValue ( m_distribution , m_sumOfWeights , m_infoGain ) ; } }
private boolean isLoadMore ( ) { return mNextLoadEnable && pageSize != - _NUM && mRequestLoadMoreListener != null && mData . size ( ) >= pageSize ; }
private void addWorkerIfNecessary ( ) { if ( idleWorkers . get ( ) == _NUM ) { synchronized ( workers ) { if ( workers . isEmpty ( ) || ( idleWorkers . get ( ) == _NUM ) ) { addWorker ( ) ; } } } }
@ Override protected Node removeFromFrontier ( ) { Node result = frontier . remove ( ) ; frontierNodeLookup . remove ( result . getState ( ) ) ; explored . add ( result . getState ( ) ) ; updateMetrics ( frontier . size ( ) ) ; return result ; }
public static String encode ( byte [ ] data ) { int start = _NUM ; int len = data . length ; StringBuffer buf = new StringBuffer ( data . length * _NUM / _NUM ) ; int end = len - _NUM ; int i = start ; int n = _NUM ; while ( i <= end ) { int d = ( ( ( ( int ) data [ i ] ) & _NUM ) << _NUM ) | ( ( ( ( int ) data [ i + _NUM ] ) & _NUM ) << _NUM ) | ( ( ( int ) data [ i + _NUM ] ) & _NUM ) ; buf . append ( legalChars [ ( d > > _NUM ) & _NUM ] ) ; buf . append ( legalChars [ ( d > > _NUM ) & _NUM ] ) ; buf . append ( legalChars [ ( d > > _NUM ) & _NUM ] ) ; buf . append ( legalChars [ d & _NUM ] ) ; i += _NUM ; if ( n ++ >= _NUM ) { n = _NUM ; } } if ( i == start + len - _NUM ) { int d = ( ( ( ( int ) data [ i ] ) & _NUM ) << _NUM ) | ( ( ( ( int ) data [ i + _NUM ] ) & _NUM ) << _NUM ) ; buf . append ( legalChars [ ( d > > _NUM ) & _NUM ] ) ; buf . append ( legalChars [ ( d > > _NUM ) & _NUM ] ) ; buf . append ( legalChars [ ( d > > _NUM ) & _NUM ] ) ; buf . append ( _STR ) ; } else if ( i == start + len - _NUM ) { int d = ( ( ( int ) data [ i ] ) & _NUM ) << _NUM ; buf . append ( legalChars [ ( d > > _NUM ) & _NUM ] ) ; buf . append ( legalChars [ ( d > > _NUM ) & _NUM ] ) ; buf . append ( _STR ) ; } return buf . toString ( ) ; }
public static Font createBitmapFont ( String name , Image bitmap , int [ ] cutOffsets , int [ ] charWidth , String charsets ) { Font f = createBitmapFont ( bitmap , cutOffsets , charWidth , charsets ) ; bitmapCache . put ( name , f ) ; return f ; }
static boolean isTenured ( MemoryPoolMXBean memoryPoolMXBean ) { if ( memoryPoolMXBean . getType ( ) != MemoryType . HEAP ) { return _BOOL ; } String name = memoryPoolMXBean . getName ( ) ; return name . equals ( _STR ) || name . equals ( _STR ) || name . equals ( _STR ) || name . equals ( _STR ) || name . equals ( _STR ) || name . equals ( _STR ) || name . equals ( _STR ) || ( HEAP_POOL != null && name . equals ( HEAP_POOL ) ) ; }
public String toSimpleString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( _STR + ( mLabel == null ? _STR : mLabel ) + _STR + mYVals . size ( ) + _STR ) ; return buffer . toString ( ) ; }
public static < T > T interpreterOnly ( Callable < T > callable ) throws Exception { return callable . call ( ) ; }
public static List < String > tokenize ( String arguments , boolean stringify ) { LinkedList < String > argList = new LinkedList < String > ( ) ; StringBuilder currArg = new StringBuilder ( ) ; boolean escaped = _BOOL ; int state = NO_TOKEN_STATE ; int len = arguments . length ( ) ; for ( int i = _NUM ; i < len ; i ++ ) { char c = arguments . charAt ( i ) ; if ( escaped ) { escaped = _BOOL ; currArg . append ( c ) ; } else { switch ( state ) { case SINGLE_QUOTE_STATE : if ( c == _STR ) { state = NORMAL_TOKEN_STATE ; } else { currArg . append ( c ) ; } break ; case DOUBLE_QUOTE_STATE : if ( c == _STR ) { state = NORMAL_TOKEN_STATE ; } else if ( c == _STR ) { i ++ ; char next = arguments . charAt ( i ) ; if ( next == _STR || next == _STR ) { currArg . append ( next ) ; } else { currArg . append ( c ) ; currArg . append ( next ) ; } } else { currArg . append ( c ) ; } break ; case NO_TOKEN_STATE : case NORMAL_TOKEN_STATE : switch ( c ) { case _STR : escaped = _BOOL ; state = NORMAL_TOKEN_STATE ; break ; case _STR : state = SINGLE_QUOTE_STATE ; break ; case _STR : state = DOUBLE_QUOTE_STATE ; break ; default : if ( ! Character . isWhitespace ( c ) ) { currArg . append ( c ) ; state = NORMAL_TOKEN_STATE ; } else if ( state == NORMAL_TOKEN_STATE ) { argList . add ( currArg . toString ( ) ) ; currArg = new StringBuilder ( ) ; state = NO_TOKEN_STATE ; } } break ; default : throw new IllegalStateException ( _STR + state + _STR ) ; } } } if ( escaped ) { currArg . append ( _STR ) ; argList . add ( currArg . toString ( ) ) ; } else if ( state != NO_TOKEN_STATE ) { argList . add ( currArg . toString ( ) ) ; } if ( stringify ) { for ( int i = _NUM ; i < argList . size ( ) ; i ++ ) { argList . set ( i , _STR + _escapeQuotesAndBackslashes ( argList . get ( i ) ) + _STR ) ; } } return argList ; }
private void addSelectorForProtocol ( Properties settings , String protocol , ProtocolDispatchSelector ps ) { String proxy = settings . getProperty ( protocol ) ; if ( proxy != null ) { FixedProxySelector protocolSelector = ProxyUtil . parseProxySettings ( proxy ) ; ps . setSelector ( protocol , protocolSelector ) ; } }
public void addHeader ( String name , String value ) { header . put ( name , value ) ; }
public static void readSkel ( BufferedReader reader ) throws IOException { List < String > lines = new ArrayList < String > ( ) ; StringBuilder section = new StringBuilder ( ) ; String ln ; while ( ( ln = reader . readLine ( ) ) != null ) { if ( ln . startsWith ( _STR ) ) { lines . add ( section . toString ( ) ) ; section . setLength ( _NUM ) ; } else { section . append ( ln ) ; section . append ( NL ) ; } } if ( section . length ( ) > _NUM ) lines . add ( section . toString ( ) ) ; if ( lines . size ( ) != size ) { Out . error ( ErrorMessages . WRONG_SKELETON ) ; throw new GeneratorException ( ) ; } line = new String [ size ] ; for ( int i = _NUM ; i < size ; i ++ ) line [ i ] = lines . get ( i ) ; }
public static Set < String > nonMonogamousSamples ( Collection < Family > families ) { final LinkedHashSet < String > ret = new LinkedHashSet < > ( ) ; final HashSet < String > parents = new HashSet < > ( ) ; for ( Family f : families ) { if ( ! parents . add ( f . getFather ( ) ) ) { ret . add ( f . getFather ( ) ) ; } if ( ! parents . add ( f . getMother ( ) ) ) { ret . add ( f . getMother ( ) ) ; } } return ret ; }
private void createSceneVao ( ) { int vao = glGenVertexArrays ( ) ; int vbo = glGenBuffers ( ) ; glBindVertexArray ( vao ) ; glBindBuffer ( GL_ARRAY_BUFFER , vbo ) ; ByteBuffer bb = BufferUtils . createByteBuffer ( boxes . length * _NUM * ( _NUM + _NUM ) * _NUM * _NUM ) ; FloatBuffer fv = bb . asFloatBuffer ( ) ; for ( int i = _NUM ; i < boxes . length ; i += _NUM ) { DemoUtils . triangulateBox ( boxes [ i ] , boxes [ i + _NUM ] , fv ) ; } glBufferData ( GL_ARRAY_BUFFER , bb , GL_STATIC_DRAW ) ; glEnableVertexAttribArray ( _NUM ) ; glVertexAttribPointer ( _NUM , _NUM , GL_FLOAT , _BOOL , _NUM * ( _NUM + _NUM ) , _NUM ) ; glEnableVertexAttribArray ( _NUM ) ; glVertexAttribPointer ( _NUM , _NUM , GL_FLOAT , _BOOL , _NUM * ( _NUM + _NUM ) , _NUM * _NUM ) ; glBindBuffer ( GL_ARRAY_BUFFER , _NUM ) ; glBindVertexArray ( _NUM ) ; this . vaoScene = vao ; }
public boolean contains ( File file , String fileContent ) { if ( exists ( file ) ) { String content = readFileContent ( file ) ; return content != null && content . equals ( fileContent ) ; } return _BOOL ; }
public static boolean [ ] [ ] loadImage ( File file , char offChar ) throws FileNotFoundException , RuntimeException { ArrayList < String > rows = loadImagePad ( file , offChar ) ; String s = rows . get ( _NUM ) ; boolean [ ] [ ] img = new boolean [ rows . size ( ) ] [ s . length ( ) ] ; for ( int i = _NUM ; i < rows . size ( ) ; i ++ ) { s = rows . get ( i ) ; for ( int j = _NUM ; j < s . length ( ) ; j ++ ) { char c = s . charAt ( j ) ; if ( c == offChar ) { img [ i ] [ j ] = _BOOL ; } else { img [ i ] [ j ] = _BOOL ; } } } return img ; }
protected void updateReceiptStatusWhenCancelled ( final String receiptNumber ) { final List < EgdmCollectedReceipt > egdmCollectedReceipts = demandGenericDAO . getAllEgdmCollectedReceipts ( receiptNumber ) ; if ( egdmCollectedReceipts != null && ! egdmCollectedReceipts . isEmpty ( ) ) for ( final EgdmCollectedReceipt egDmCollectedReceipt : egdmCollectedReceipts ) { egDmCollectedReceipt . setStatus ( DemandConstants . CANCELLED_RECEIPT ) ; egDmCollectedReceipt . setUpdatedTime ( new Date ( ) ) ; egdmCollectedReceiptDAO . update ( egDmCollectedReceipt ) ; } }
public void addAnimation ( int id , Animation ... animations ) { if ( mAnimations . get ( id ) == null ) { mAnimations . put ( id , new ArrayList < Animation > ( animations . length ) ) ; if ( id != Animation . FULL_PAGE ) { mAnimatedViews . add ( id ) ; } } ArrayList < Animation > anims = mAnimations . get ( id ) ; Collections . addAll ( anims , animations ) ; }
private void cleanupDiscovery ( StorageSystem system ) { try { system . setReachableStatus ( _BOOL ) ; _dbClient . persistObject ( system ) ; } catch ( DatabaseException e ) { _logger . error ( _STR , e ) ; } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
@ Override public SSLEngineResult wrap ( ByteBuffer [ ] srcs , int offset , int len , ByteBuffer dst ) throws SSLException { if ( engine_was_shutteddown ) { return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , _NUM , _NUM ) ; } if ( ( srcs == null ) || ( dst == null ) ) { throw new IllegalStateException ( _STR ) ; } if ( dst . isReadOnly ( ) ) { throw new ReadOnlyBufferException ( ) ; } if ( ! handshake_started ) { beginHandshake ( ) ; } SSLEngineResult . HandshakeStatus handshakeStatus = getHandshakeStatus ( ) ; if ( ( session == null || engine_was_closed ) && ( handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_UNWRAP ) || handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_TASK ) ) ) { return new SSLEngineResult ( getEngineStatus ( ) , handshakeStatus , _NUM , _NUM ) ; } int capacity = dst . remaining ( ) ; int produced = _NUM ; if ( alertProtocol . hasAlert ( ) ) { if ( capacity < recordProtocol . getRecordSize ( _NUM ) ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } byte [ ] alert_data = alertProtocol . wrap ( ) ; dst . put ( alert_data ) ; if ( alertProtocol . isFatalAlert ( ) ) { alertProtocol . setProcessed ( ) ; if ( session != null ) { session . invalidate ( ) ; } shutdown ( ) ; return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , _NUM , alert_data . length ) ; } else { alertProtocol . setProcessed ( ) ; if ( close_notify_was_sent && close_notify_was_received ) { shutdown ( ) ; return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , _NUM , alert_data . length ) ; } return new SSLEngineResult ( getEngineStatus ( ) , getHandshakeStatus ( ) , _NUM , alert_data . length ) ; } } if ( capacity < recordProtocol . getMinRecordSize ( ) ) { if ( logger != null ) { logger . println ( _STR + capacity + _STR + recordProtocol . getMinRecordSize ( ) + _STR ) ; } return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } try { if ( ! handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_WRAP ) ) { dataStream . setSourceBuffers ( srcs , offset , len ) ; if ( ( capacity < SSLRecordProtocol . MAX_SSL_PACKET_SIZE ) && ( capacity < recordProtocol . getRecordSize ( dataStream . available ( ) ) ) ) { if ( logger != null ) { logger . println ( _STR + capacity + _STR + recordProtocol . getRecordSize ( dataStream . available ( ) ) + _STR ) ; } return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } if ( remaining_wrapped_data == null ) { remaining_wrapped_data = recordProtocol . wrap ( ContentType . APPLICATION_DATA , dataStream ) ; } if ( capacity < remaining_wrapped_data . length ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , dataStream . consumed ( ) , _NUM ) ; } else { dst . put ( remaining_wrapped_data ) ; produced = remaining_wrapped_data . length ; remaining_wrapped_data = null ; return new SSLEngineResult ( getEngineStatus ( ) , handshakeStatus , dataStream . consumed ( ) , produced ) ; } } else { if ( remaining_hsh_data == null ) { remaining_hsh_data = handshakeProtocol . wrap ( ) ; } if ( capacity < remaining_hsh_data . length ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } else { dst . put ( remaining_hsh_data ) ; produced = remaining_hsh_data . length ; remaining_hsh_data = null ; handshakeStatus = handshakeProtocol . getStatus ( ) ; if ( handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . FINISHED ) ) { session = recordProtocol . getSession ( ) ; } } return new SSLEngineResult ( getEngineStatus ( ) , getHandshakeStatus ( ) , _NUM , produced ) ; } } catch ( AlertException e ) { alertProtocol . alert ( AlertProtocol . FATAL , e . getDescriptionCode ( ) ) ; engine_was_closed = _BOOL ; if ( session != null ) { session . invalidate ( ) ; } throw e . getReason ( ) ; } }
@ Override protected void initialize ( ) { List < String > words ; super . initialize ( ) ; m_Words = new HashSet < String > ( ) ; words = read ( ) ; for ( String word : words ) { if ( ! word . startsWith ( _STR ) ) m_Words . add ( word ) ; } }
protected boolean existsInRange ( String x , int minLength , int maxLength ) { x = StringUtils . trimToNull ( x ) ; return x != null && x . length ( ) >= minLength && x . length ( ) <= maxLength ; }
public synchronized void unwatch ( String pathName ) throws IOException { unregisterAll ( Paths . get ( pathName ) ) ; }
public Criteria addProperty ( String name , String value , Operator operator ) { properties . add ( new PropertyCriteria ( name , value , operator ) ) ; return this ; }
public void removeColumn ( final String columnName ) { if ( columnName == null ) { return ; } final List < String > cols = Arrays . asList ( getInfo ( ) . headers ) ; final int colIndex = cols . indexOf ( columnName ) ; removeColumn ( colIndex ) ; }
public static UnManagedProtectionSet checkUnManagedProtectionSetExistsInDB ( DbClient dbClient , String nativeGuid ) throws IOException { List < UnManagedProtectionSet > cgs = CustomQueryUtility . getUnManagedProtectionSetByNativeGuid ( dbClient , nativeGuid ) ; Iterator < UnManagedProtectionSet > cgsItr = cgs . iterator ( ) ; if ( cgsItr . hasNext ( ) ) { return cgsItr . next ( ) ; } return null ; }
public static void putString2bytes ( byte [ ] destbytes , String srcString , int destOffset , int srcOffset , int count ) { for ( int i = _NUM ; i < count ; i ++ ) { destbytes [ count + i ] = srcString . getBytes ( ) [ i ] ; } }
private void checkQuery ( String expRes , String qry ) throws Exception { assertEquals ( _NUM , executeHiveQuery ( _STR ) ) ; assertEquals ( _NUM , executeHiveQuery ( _STR + _STR + _STR + _STR + qry ) ) ; IgfsInputStream in = igfs . open ( new IgfsPath ( _STR ) ) ; byte [ ] buf = new byte [ ( int ) in . length ( ) ] ; in . read ( buf ) ; assertEquals ( expRes , new String ( buf ) ) ; }
public final V updateAndGet ( UnaryOperator < V > updateFunction ) { V prev , next ; do { prev = get ( ) ; next = updateFunction . apply ( prev ) ; } while ( ! compareAndSet ( prev , next ) ) ; return next ; }
public void close ( ) { stopTimers ( ) ; closed = _BOOL ; window . dispose ( ) ; if ( listener != null ) { listener . notificationRemoved ( this ) ; } if ( activityListener != null ) { ActivityTracker . removeActivityListener ( activityListener ) ; } }
protected boolean shouldMove ( final ILoadBalancerService loadBalancerService ) { if ( loadBalancerService == null ) throw new IllegalArgumentException ( ) ; final boolean highlyUtilizedService ; try { final UUID serviceUUID = resourceManager . getDataServiceUUID ( ) ; highlyUtilizedService = loadBalancerService . isHighlyUtilizedDataService ( serviceUUID ) ; } catch ( Exception ex ) { log . warn ( _STR ) ; return _BOOL ; } if ( ! highlyUtilizedService ) { if ( log . isInfoEnabled ( ) ) log . info ( _STR ) ; return _BOOL ; } final ResourceScores resourceScores = resourceManager . getResourceScores ( ) ; final boolean shouldMove = ( resourceScores . percentCPUTime >= resourceManager . movePercentCpuTimeThreshold ) || ( resourceScores . majorPageFaultsPerSec > _NUM ) || ( resourceScores . dataDirBytesFree < Bytes . gigabyte * _NUM ) || ( resourceScores . dataDirBytesFree < Bytes . gigabyte * _NUM ) ; return shouldMove ; }
public static PublicKey generatePublicKey ( String encodedPublicKey ) { try { byte [ ] decodedKey = Base64 . decode ( encodedPublicKey ) ; KeyFactory keyFactory = KeyFactory . getInstance ( KEY_FACTORY_ALGORITHM ) ; return keyFactory . generatePublic ( new X509EncodedKeySpec ( decodedKey ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new RuntimeException ( e ) ; } catch ( InvalidKeySpecException e ) { Log . e ( TAG , _STR ) ; throw new IllegalArgumentException ( e ) ; } catch ( Base64DecoderException e ) { Log . e ( TAG , _STR ) ; throw new IllegalArgumentException ( e ) ; } }
private static Object [ ] convertThrowableMessages ( final Object [ ] args ) { if ( args != null ) { for ( int i = _NUM ; i < args . length ; i ++ ) { if ( args [ i ] instanceof Throwable ) { Throwable t = ( Throwable ) args [ i ] ; if ( t . getMessage ( ) != null ) { args [ i ] = t . getMessage ( ) ; } } } } return args ; }
protected void wrapContent ( ) { if ( ! DO_WRAP ) { return ; } if ( mText == null ) { return ; } Canvas c = new Canvas ( ) ; c . setFont ( mFont ) ; FontMetrics fm = c . getFontMetrics ( mFont ) ; String string = getText ( ) ; if ( mToUpperCase ) { string = string . toUpperCase ( ) ; } int tw = fm . stringWidth ( string ) + _NUM * ( mHorizontalPadding + mHorizontalMargin ) ; int th = fm . getMaxAscent ( ) + _NUM * fm . getMaxDescent ( ) + _NUM * ( mVerticalPadding + mVerticalMargin ) ; mWidget . setWrapWidth ( tw ) ; mWidget . setWrapHeight ( th ) ; if ( tw > mWidget . getMinWidth ( ) ) { mWidget . setMinWidth ( tw ) ; } if ( th > mWidget . getMinHeight ( ) ) { mWidget . setMinHeight ( th ) ; } if ( mWidget . getHorizontalDimensionBehaviour ( ) == ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) { mWidget . setWidth ( tw ) ; } if ( mWidget . getVerticalDimensionBehaviour ( ) == ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) { mWidget . setHeight ( th ) ; } if ( mWidget . getHorizontalDimensionBehaviour ( ) == ConstraintWidget . DimensionBehaviour . FIXED ) { if ( mWidget . getWidth ( ) <= mWidget . getMinWidth ( ) ) { mWidget . setHorizontalDimensionBehaviour ( ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) ; } } if ( mWidget . getVerticalDimensionBehaviour ( ) == ConstraintWidget . DimensionBehaviour . FIXED ) { if ( mWidget . getHeight ( ) <= mWidget . getMinHeight ( ) ) { mWidget . setVerticalDimensionBehaviour ( ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) ; } } int baseline = fm . getAscent ( ) + fm . getMaxDescent ( ) + mVerticalPadding + mVerticalMargin ; mWidget . setBaselineDistance ( baseline ) ; }
public RAFDirectory ( Path path , LockFactory lockFactory ) throws IOException { super ( path , lockFactory ) ; path . toFile ( ) ; }
public static void addMinutesToList ( Context context , ArrayList < Integer > values , ArrayList < String > labels , int minutes ) { int index = values . indexOf ( minutes ) ; if ( index != - _NUM ) { return ; } String label = constructReminderLabel ( context , minutes , _BOOL ) ; int len = values . size ( ) ; for ( int i = _NUM ; i < len ; i ++ ) { if ( minutes < values . get ( i ) ) { values . add ( i , minutes ) ; labels . add ( i , label ) ; return ; } } values . add ( minutes ) ; labels . add ( len , label ) ; }
void recomposeVariables ( ElemVariable elemVar ) { if ( getVariableOrParamComposed ( elemVar . getName ( ) ) == null ) { elemVar . setIsTopLevel ( _BOOL ) ; elemVar . setIndex ( m_variables . size ( ) ) ; m_variables . addElement ( elemVar ) ; } }
public void propertyChange ( PropertyChangeEvent e ) { String propertyName = e . getPropertyName ( ) ; if ( propertyName == _STR ) { if ( e . getOldValue ( ) == Boolean . FALSE && e . getNewValue ( ) == Boolean . TRUE ) { handlePopupIsVisibleEvent ( _BOOL ) ; } else if ( e . getOldValue ( ) == Boolean . TRUE && e . getNewValue ( ) == Boolean . FALSE ) { handlePopupIsVisibleEvent ( _BOOL ) ; } } }
private static int [ ] maybeSort ( int [ ] values ) { if ( ! isSorted ( values , _NUM , _BOOL ) ) { values = values . clone ( ) ; Arrays . sort ( values ) ; } return values ; }
public int executeUpdate ( String sql ) throws GenericDataSourceException { Statement stmt = null ; try { stmt = _connection . createStatement ( ) ; return stmt . executeUpdate ( sql ) ; } catch ( SQLException sqle ) { throw new GenericDataSourceException ( _STR + _sql , sqle ) ; } finally { if ( stmt != null ) { try { stmt . close ( ) ; } catch ( SQLException sqle ) { Debug . logWarning ( _STR + sqle . getMessage ( ) , module ) ; } } } }
private void doTextNormal ( final PDFPage cmds , final String text ) { final PointF zero = new PointF ( ) ; final Matrix scale = new Matrix ( ) ; Utils . setMatValues ( scale , fsize , _NUM , _NUM , fsize * th , _NUM , tr ) ; final Matrix at = new Matrix ( ) ; final List < PDFGlyph > l = ( List < PDFGlyph > ) font . getGlyphs ( text ) ; for ( final PDFGlyph glyph : l ) { at . set ( cur ) ; at . preConcat ( scale ) ; final PointF advance = glyph . addCommands ( cmds , at , tm ) ; float advanceX = ( advance . x * fsize ) + tc ; if ( glyph . getChar ( ) == _STR ) { advanceX += tw ; } advanceX *= th ; cur . preTranslate ( advanceX , advance . y ) ; } final float [ ] src = { zero . x , zero . y } ; final float [ ] dst = new float [ src . length ] ; cur . mapPoints ( dst , src ) ; prevEnd . set ( dst [ _NUM ] , dst [ _NUM ] ) ; }
public synchronized static void initialize ( Connection conn ) throws SQLException { if ( logHadoopIdPatterns != null && logLineagePatterns != null ) { return ; } loadLineagePatterns ( conn ) ; loadHadoopIdPatterns ( conn ) ; }
public void addIndices ( Collection < IIndex > indices ) { for ( Iterator < IIndex > it = indices . iterator ( ) ; it . hasNext ( ) ; ) { addIndex ( ( IIndex ) it . next ( ) ) ; } }
public static boolean isCookieSecure ( ) { return secureCookie ; }
public static List < ObjectModel > loadJsonStream ( InputStream input ) { List < ObjectModel > models = new ArrayList < > ( ) ; Reader reader = new InputStreamReader ( input ) ; ObjectModel [ ] objectModels = GSON . fromJson ( reader , ObjectModel [ ] . class ) ; for ( ObjectModel objectModel : objectModels ) { models . add ( objectModel ) ; } return models ; }
protected MultistepExprHolder createMultistepExprList ( Vector paths ) { MultistepExprHolder first = null ; int n = paths . size ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { ExpressionOwner eo = ( ExpressionOwner ) paths . elementAt ( i ) ; if ( null == eo ) continue ; LocPathIterator lpi = ( LocPathIterator ) eo . getExpression ( ) ; int numPaths = countSteps ( lpi ) ; if ( numPaths > _NUM ) { if ( null == first ) first = new MultistepExprHolder ( eo , numPaths , null ) ; else first = first . addInSortedOrder ( eo , numPaths ) ; } } if ( ( null == first ) || ( first . getLength ( ) <= _NUM ) ) return null ; else return first ; }
private int addWordlenWeights ( Channel chan , int weightIdx ) { int [ ] weigthsTab = atrac3p_wl_weights [ chan . chNum * _NUM + weightIdx - _NUM ] ; for ( int i = _NUM ; i < ctx . numQuantUnits ; i ++ ) { chan . quWordlen [ i ] += weigthsTab [ i ] ; if ( chan . quWordlen [ i ] < _NUM || chan . quWordlen [ i ] > _NUM ) { log . error ( String . format ( _STR , i , chan . quWordlen [ i ] ) ) ; return AT3P_ERROR ; } } return _NUM ; }
public void testUpdate3 ( ) throws SQLException { DatabaseCreator . fillFKStrictTable ( conn ) ; statement . execute ( _STR + DatabaseCreator . FKSTRICT_TABLE + _STR ) ; statement . execute ( _STR + DatabaseCreator . PARENT_TABLE + _STR ) ; }
final void pruneExceptionalOut ( IR ir ) { int n = getNumberOfExceptionalOut ( ) ; if ( n > _NUM ) { ComputedBBEnum handlers = new ComputedBBEnum ( n ) ; Enumeration < Instruction > e = forwardRealInstrEnumerator ( ) ; while ( e . hasMoreElements ( ) ) { Instruction x = e . nextElement ( ) ; Enumeration < BasicBlock > bbs = getApplicableExceptionalOut ( x ) ; while ( bbs . hasMoreElements ( ) ) { BasicBlock bb = bbs . nextElement ( ) ; handlers . addPossiblyDuplicateElement ( bb ) ; } } deleteExceptionalOut ( ) ; for ( int i = _NUM ; handlers . hasMoreElements ( ) ; i ++ ) { ExceptionHandlerBasicBlock b = ( ExceptionHandlerBasicBlock ) handlers . nextElement ( ) ; insertOut ( b ) ; } } recomputeNormalOut ( ir ) ; }
private Pair < DBIDVar , Double > singleIteration ( Relation < V > relationx , Relation < ? extends NumberVector > relationy ) { final int dim = RelationUtil . dimensionality ( relationx ) ; final int dimy = RelationUtil . dimensionality ( relationy ) ; assert ( dim == _NUM ) ; KNNQuery < V > knnQuery = QueryUtil . getKNNQuery ( relationx , getDistanceFunction ( ) , k + _NUM ) ; ArrayModifiableDBIDs ids = DBIDUtil . newArray ( relationx . getDBIDs ( ) ) ; ids . sort ( ) ; double [ ] [ ] X = new double [ ids . size ( ) ] [ _NUM ] ; double [ ] [ ] F = new double [ ids . size ( ) ] [ ids . size ( ) ] ; double [ ] [ ] Y = new double [ ids . size ( ) ] [ dimy ] ; { int i = _NUM ; for ( DBIDIter id = ids . iter ( ) ; id . valid ( ) ; id . advance ( ) , i ++ ) { { V vec = relationx . get ( id ) ; double la = vec . doubleValue ( _NUM ) ; double lo = vec . doubleValue ( _NUM ) ; X [ i ] [ _NUM ] = _NUM ; X [ i ] [ _NUM ] = la ; X [ i ] [ _NUM ] = lo ; X [ i ] [ _NUM ] = la * lo ; X [ i ] [ _NUM ] = la * la ; X [ i ] [ _NUM ] = lo * lo ; } { final NumberVector vecy = relationy . get ( id ) ; for ( int d = _NUM ; d < dimy ; d ++ ) { double idy = vecy . doubleValue ( d ) ; Y [ i ] [ d ] = idy ; } } { KNNList neighbors = knnQuery . getKNNForDBID ( id , k + _NUM ) ; ModifiableDBIDs neighborhood = DBIDUtil . newArray ( neighbors . size ( ) ) ; for ( DBIDIter neighbor = neighbors . iter ( ) ; neighbor . valid ( ) ; neighbor . advance ( ) ) { if ( DBIDUtil . equal ( id , neighbor ) ) { continue ; } neighborhood . add ( neighbor ) ; } F [ i ] [ i ] = _NUM ; final int nweight = - _NUM / neighborhood . size ( ) ; for ( DBIDIter iter = neighborhood . iter ( ) ; iter . valid ( ) ; iter . advance ( ) ) { int pos = ids . binarySearch ( iter ) ; assert ( pos >= _NUM ) ; F [ pos ] [ i ] = nweight ; } } } } double [ ] [ ] common = times ( transposeTimesTranspose ( X , F ) , F ) ; double [ ] [ ] b = times ( inverse ( times ( common , X ) ) , times ( common , Y ) ) ; double [ ] [ ] sigmaMat = times ( F , minusEquals ( times ( X , b ) , times ( F , Y ) ) ) ; final double sigma_sum_square = normF ( sigmaMat ) / ( relationx . size ( ) - _NUM - _NUM ) ; final double norm = _NUM / Math . sqrt ( sigma_sum_square ) ; double [ ] [ ] E = timesEquals ( times ( F , minus ( Y , times ( X , b ) ) ) , norm ) ; DBIDVar worstid = DBIDUtil . newVar ( ) ; double worstscore = Double . NEGATIVE_INFINITY ; int i = _NUM ; for ( DBIDIter id = ids . iter ( ) ; id . valid ( ) ; id . advance ( ) , i ++ ) { double err = squareSum ( getRow ( E , i ) ) ; if ( err > worstscore ) { worstscore = err ; worstid . set ( id ) ; } } return new Pair < > ( worstid , Math . sqrt ( worstscore ) ) ; }
public final CharSequence yytext ( ) { return zzBuffer . subSequence ( zzStartRead , zzMarkedPos ) ; }
private void cleanupMinidumpFile ( ) { if ( ! CrashFileManager . tryMarkAsUploaded ( mFileToUpload ) ) { Log . w ( TAG , _STR + mFileToUpload + _STR ) ; if ( ! mFileToUpload . delete ( ) ) { Log . w ( TAG , _STR + mFileToUpload ) ; } } }
public String toSpacedString ( ) { final String original = toString ( ) ; final StringBuilder builder = new StringBuilder ( ) ; for ( int i = _NUM ; i < original . length ( ) ; i ++ ) { if ( i > _NUM && ( i % _NUM ) == _NUM ) builder . append ( _STR ) ; builder . append ( original . charAt ( i ) ) ; } return builder . toString ( ) ; }
private int parseContentType ( final byte [ ] b , final int off ) throws ParseException { contentTypeVal_ = PrimitivesParser . parseByte ( b , off ) ; if ( ContentType . deserialize ( contentTypeVal_ ) == null ) { throw new BadCiphertextException ( _STR ) ; } return _NUM ; }
@ Benchmark public void nonCaching ( ) { run ( ) ; }
public int decode ( String data , OutputStream out ) throws IOException { byte b1 , b2 , b3 , b4 ; int length = _NUM ; int end = data . length ( ) ; while ( end > _NUM ) { if ( ! ignore ( data . charAt ( end - _NUM ) ) ) { break ; } end -- ; } int i = _NUM ; int finish = end - _NUM ; i = nextI ( data , i , finish ) ; while ( i < finish ) { b1 = decodingTable [ data . charAt ( i ++ ) ] ; i = nextI ( data , i , finish ) ; b2 = decodingTable [ data . charAt ( i ++ ) ] ; i = nextI ( data , i , finish ) ; b3 = decodingTable [ data . charAt ( i ++ ) ] ; i = nextI ( data , i , finish ) ; b4 = decodingTable [ data . charAt ( i ++ ) ] ; if ( ( b1 | b2 | b3 | b4 ) < _NUM ) { throw new IOException ( _STR ) ; } out . write ( ( b1 << _NUM ) | ( b2 > > _NUM ) ) ; out . write ( ( b2 << _NUM ) | ( b3 > > _NUM ) ) ; out . write ( ( b3 << _NUM ) | b4 ) ; length += _NUM ; i = nextI ( data , i , finish ) ; } length += decodeLastBlock ( out , data . charAt ( end - _NUM ) , data . charAt ( end - _NUM ) , data . charAt ( end - _NUM ) , data . charAt ( end - _NUM ) ) ; return length ; }
private void rLineTo ( float dx , float dy ) { if ( isEmpty ( ) ) { mPath . moveTo ( mLastX = _NUM , mLastY = _NUM ) ; } dx += mLastX ; dy += mLastY ; mPath . lineTo ( mLastX = dx , mLastY = dy ) ; }
@ Override public ConflictResults parseOutput ( final String stdout , final String stderr ) { final List < String > contentConflicts = new ArrayList < String > ( ) ; final List < String > renameConflicts = new ArrayList < String > ( ) ; final List < String > bothConflicts = new ArrayList < String > ( ) ; final String [ ] lines = getLines ( stderr ) ; for ( final String line : lines ) { final int index = line . lastIndexOf ( _STR ) ; if ( index != - _NUM ) { if ( StringUtils . endsWith ( line , BOTH_CONFLICTS_SUFFIX ) ) { bothConflicts . add ( line . substring ( _NUM , index ) ) ; } else if ( StringUtils . endsWith ( line , RENAME_CONFLICT_SUFFIX ) ) { renameConflicts . add ( line . substring ( _NUM , index ) ) ; } else { contentConflicts . add ( line . substring ( _NUM , index ) ) ; } } } return new ConflictResults ( contentConflicts , renameConflicts , bothConflicts ) ; }
protected void sendStart ( final OutputStream out ) throws IOException { LOG . trace ( _STR ) ; out . write ( EXTRA_BYTES ) ; out . write ( getPartBoundary ( ) ) ; out . write ( CRLF_BYTES ) ; }
public void addActualQty ( BigDecimal add ) { m_actualQty = m_actualQty . add ( add ) ; }
protected static boolean isVowel ( final char c ) { final char l = Character . toLowerCase ( c ) ; return ( ( l == _STR ) || ( l == _STR ) || ( l == _STR ) || ( l == _STR ) || ( l == _STR ) ) ; }
private byte [ ] createPreviewBuffer ( Size previewSize ) { int bitsPerPixel = ImageFormat . getBitsPerPixel ( ImageFormat . NV21 ) ; long sizeInBits = previewSize . getHeight ( ) * previewSize . getWidth ( ) * bitsPerPixel ; int bufferSize = ( int ) Math . ceil ( sizeInBits / _NUM ) + _NUM ; byte [ ] byteArray = new byte [ bufferSize ] ; ByteBuffer buffer = ByteBuffer . wrap ( byteArray ) ; if ( ! buffer . hasArray ( ) || ( buffer . array ( ) != byteArray ) ) { throw new IllegalStateException ( _STR ) ; } mBytesToByteBuffer . put ( byteArray , buffer ) ; return byteArray ; }
void submit ( ProcessAndDisplayImageTask task ) { initExecutorsIfNeed ( ) ; taskExecutorForCachedImages . execute ( task ) ; }
public static void printStackTrace ( SQLException e , PrintWriter pw ) { SQLException next = e ; while ( next != null ) { next . printStackTrace ( pw ) ; next = next . getNextException ( ) ; if ( next != null ) { pw . println ( _STR ) ; } } }
protected void initializeWorld ( ) { Body ground = new SimulationBody ( ) ; { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; ground . addFixture ( bf ) ; } ground . translate ( new Vector2 ( _NUM , - _NUM ) ) ; ground . setMass ( MassType . INFINITE ) ; world . addBody ( ground ) ; Body head = new SimulationBody ( ) ; { Convex c = Geometry . createCircle ( _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; head . addFixture ( bf ) ; } head . setMass ( MassType . NORMAL ) ; world . addBody ( head ) ; Body torso = new SimulationBody ( ) ; { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; torso . addFixture ( bf ) ; } { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; c . translate ( new Vector2 ( _NUM , _NUM ) ) ; BodyFixture bf = new BodyFixture ( c ) ; torso . addFixture ( bf ) ; } torso . translate ( new Vector2 ( _NUM , - _NUM ) ) ; torso . setMass ( MassType . NORMAL ) ; world . addBody ( torso ) ; Body rightHumerus = new SimulationBody ( ) ; { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; rightHumerus . addFixture ( bf ) ; } rightHumerus . translate ( new Vector2 ( _NUM , - _NUM ) ) ; rightHumerus . setMass ( MassType . NORMAL ) ; world . addBody ( rightHumerus ) ; Body rightUlna = new SimulationBody ( ) ; { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; rightUlna . addFixture ( bf ) ; } rightUlna . translate ( new Vector2 ( _NUM , - _NUM ) ) ; rightUlna . setMass ( MassType . NORMAL ) ; world . addBody ( rightUlna ) ; Body neck = new SimulationBody ( ) ; { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; neck . addFixture ( bf ) ; } neck . translate ( new Vector2 ( _NUM , - _NUM ) ) ; neck . setMass ( MassType . NORMAL ) ; world . addBody ( neck ) ; Body leftHumerus = new SimulationBody ( ) ; { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; leftHumerus . addFixture ( bf ) ; } leftHumerus . translate ( new Vector2 ( - _NUM , - _NUM ) ) ; leftHumerus . setMass ( MassType . NORMAL ) ; world . addBody ( leftHumerus ) ; Body leftUlna = new SimulationBody ( ) ; { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; leftUlna . addFixture ( bf ) ; } leftUlna . translate ( new Vector2 ( - _NUM , - _NUM ) ) ; leftUlna . setMass ( MassType . NORMAL ) ; world . addBody ( leftUlna ) ; Body rightFemur = new SimulationBody ( ) ; { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; rightFemur . addFixture ( bf ) ; } rightFemur . translate ( new Vector2 ( _NUM , - _NUM ) ) ; rightFemur . setMass ( MassType . NORMAL ) ; world . addBody ( rightFemur ) ; Body leftFemur = new SimulationBody ( ) ; { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; leftFemur . addFixture ( bf ) ; } leftFemur . translate ( new Vector2 ( - _NUM , - _NUM ) ) ; leftFemur . setMass ( MassType . NORMAL ) ; world . addBody ( leftFemur ) ; Body rightTibia = new SimulationBody ( ) ; { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; rightTibia . addFixture ( bf ) ; } rightTibia . translate ( new Vector2 ( _NUM , - _NUM ) ) ; rightTibia . setMass ( MassType . NORMAL ) ; world . addBody ( rightTibia ) ; Body leftTibia = new SimulationBody ( ) ; { Convex c = Geometry . createRectangle ( _NUM , _NUM ) ; BodyFixture bf = new BodyFixture ( c ) ; leftTibia . addFixture ( bf ) ; } leftTibia . translate ( new Vector2 ( - _NUM , - _NUM ) ) ; leftTibia . setMass ( MassType . NORMAL ) ; world . addBody ( leftTibia ) ; RevoluteJoint headToNeck = new RevoluteJoint ( head , neck , new Vector2 ( _NUM , - _NUM ) ) ; headToNeck . setLimitEnabled ( _BOOL ) ; headToNeck . setLimits ( Math . toRadians ( _NUM ) , Math . toRadians ( _NUM ) ) ; headToNeck . setReferenceAngle ( Math . toRadians ( _NUM ) ) ; headToNeck . setMotorEnabled ( _BOOL ) ; headToNeck . setMotorSpeed ( Math . toRadians ( _NUM ) ) ; headToNeck . setMaximumMotorTorque ( _NUM ) ; headToNeck . setCollisionAllowed ( _BOOL ) ; world . addJoint ( headToNeck ) ; RevoluteJoint neckToTorso = new RevoluteJoint ( neck , torso , new Vector2 ( _NUM , - _NUM ) ) ; neckToTorso . setLimitEnabled ( _BOOL ) ; neckToTorso . setLimits ( Math . toRadians ( _NUM ) , Math . toRadians ( _NUM ) ) ; neckToTorso . setReferenceAngle ( Math . toRadians ( _NUM ) ) ; neckToTorso . setMotorEnabled ( _BOOL ) ; neckToTorso . setMotorSpeed ( Math . toRadians ( _NUM ) ) ; neckToTorso . setMaximumMotorTorque ( _NUM ) ; neckToTorso . setCollisionAllowed ( _BOOL ) ; world . addJoint ( neckToTorso ) ; RevoluteJoint torsoToLeftHumerus = new RevoluteJoint ( torso , leftHumerus , new Vector2 ( - _NUM , - _NUM ) ) ; torsoToLeftHumerus . setLimitEnabled ( _BOOL ) ; torsoToLeftHumerus . setLimits ( Math . toRadians ( _NUM ) , Math . toRadians ( _NUM ) ) ; torsoToLeftHumerus . setReferenceAngle ( Math . toRadians ( _NUM ) ) ; torsoToLeftHumerus . setMotorEnabled ( _BOOL ) ; torsoToLeftHumerus . setMotorSpeed ( Math . toRadians ( _NUM ) ) ; torsoToLeftHumerus . setMaximumMotorTorque ( _NUM ) ; torsoToLeftHumerus . setCollisionAllowed ( _BOOL ) ; world . addJoint ( torsoToLeftHumerus ) ; RevoluteJoint torsoToRightHumerus = new RevoluteJoint ( torso , rightHumerus , new Vector2 ( _NUM , - _NUM ) ) ; torsoToRightHumerus . setLimitEnabled ( _BOOL ) ; torsoToRightHumerus . setLimits ( Math . toRadians ( _NUM ) , Math . toRadians ( _NUM ) ) ; torsoToRightHumerus . setReferenceAngle ( Math . toRadians ( _NUM ) ) ; torsoToRightHumerus . setMotorEnabled ( _BOOL ) ; torsoToRightHumerus . setMotorSpeed ( Math . toRadians ( _NUM ) ) ; torsoToRightHumerus . setMaximumMotorTorque ( _NUM ) ; torsoToRightHumerus . setCollisionAllowed ( _BOOL ) ; world . addJoint ( torsoToRightHumerus ) ; RevoluteJoint rightHumerusToRightUlna = new RevoluteJoint ( rightHumerus , rightUlna , new Vector2 ( _NUM , - _NUM ) ) ; rightHumerusToRightUlna . setLimitEnabled ( _BOOL ) ; rightHumerusToRightUlna . setLimits ( Math . toRadians ( _NUM ) , Math . toRadians ( _NUM ) ) ; rightHumerusToRightUlna . setReferenceAngle ( Math . toRadians ( _NUM ) ) ; rightHumerusToRightUlna . setMotorEnabled ( _BOOL ) ; rightHumerusToRightUlna . setMotorSpeed ( Math . toRadians ( _NUM ) ) ; rightHumerusToRightUlna . setMaximumMotorTorque ( _NUM ) ; rightHumerusToRightUlna . setCollisionAllowed ( _BOOL ) ; world . addJoint ( rightHumerusToRightUlna ) ; RevoluteJoint leftHumerusToLeftUlna = new RevoluteJoint ( leftHumerus , leftUlna , new Vector2 ( - _NUM , - _NUM ) ) ; leftHumerusToLeftUlna . setLimitEnabled ( _BOOL ) ; leftHumerusToLeftUlna . setLimits ( Math . toRadians ( _NUM ) , Math . toRadians ( _NUM ) ) ; leftHumerusToLeftUlna . setReferenceAngle ( Math . toRadians ( _NUM ) ) ; leftHumerusToLeftUlna . setMotorEnabled ( _BOOL ) ; leftHumerusToLeftUlna . setMotorSpeed ( Math . toRadians ( _NUM ) ) ; leftHumerusToLeftUlna . setMaximumMotorTorque ( _NUM ) ; leftHumerusToLeftUlna . setCollisionAllowed ( _BOOL ) ; world . addJoint ( leftHumerusToLeftUlna ) ; RevoluteJoint torsoToRightFemur = new RevoluteJoint ( torso , rightFemur , new Vector2 ( _NUM , - _NUM ) ) ; torsoToRightFemur . setLimitEnabled ( _BOOL ) ; torsoToRightFemur . setLimits ( Math . toRadians ( _NUM ) , Math . toRadians ( _NUM ) ) ; torsoToRightFemur . setReferenceAngle ( Math . toRadians ( _NUM ) ) ; torsoToRightFemur . setMotorEnabled ( _BOOL ) ; torsoToRightFemur . setMotorSpeed ( Math . toRadians ( _NUM ) ) ; torsoToRightFemur . setMaximumMotorTorque ( _NUM ) ; torsoToRightFemur . setCollisionAllowed ( _BOOL ) ; world . addJoint ( torsoToRightFemur ) ; RevoluteJoint torsoToLeftFemur = new RevoluteJoint ( torso , leftFemur , new Vector2 ( - _NUM , - _NUM ) ) ; torsoToLeftFemur . setLimitEnabled ( _BOOL ) ; torsoToLeftFemur . setLimits ( Math . toRadians ( _NUM ) , Math . toRadians ( _NUM ) ) ; torsoToLeftFemur . setReferenceAngle ( Math . toRadians ( _NUM ) ) ; torsoToLeftFemur . setMotorEnabled ( _BOOL ) ; torsoToLeftFemur . setMotorSpeed ( Math . toRadians ( _NUM ) ) ; torsoToLeftFemur . setMaximumMotorTorque ( _NUM ) ; torsoToLeftFemur . setCollisionAllowed ( _BOOL ) ; world . addJoint ( torsoToLeftFemur ) ; RevoluteJoint rightFemurToRightTibia = new RevoluteJoint ( rightFemur , rightTibia , new Vector2 ( _NUM , - _NUM ) ) ; rightFemurToRightTibia . setLimitEnabled ( _BOOL ) ; rightFemurToRightTibia . setLimits ( Math . toRadians ( _NUM ) , Math . toRadians ( _NUM ) ) ; rightFemurToRightTibia . setReferenceAngle ( Math . toRadians ( _NUM ) ) ; rightFemurToRightTibia . setMotorEnabled ( _BOOL ) ; rightFemurToRightTibia . setMotorSpeed ( Math . toRadians ( _NUM ) ) ; rightFemurToRightTibia . setMaximumMotorTorque ( _NUM ) ; rightFemurToRightTibia . setCollisionAllowed ( _BOOL ) ; world . addJoint ( rightFemurToRightTibia ) ; RevoluteJoint leftFemurToLeftTibia = new RevoluteJoint ( leftFemur , leftTibia , new Vector2 ( - _NUM , - _NUM ) ) ; leftFemurToLeftTibia . setLimitEnabled ( _BOOL ) ; leftFemurToLeftTibia . setLimits ( Math . toRadians ( _NUM ) , Math . toRadians ( _NUM ) ) ; leftFemurToLeftTibia . setReferenceAngle ( Math . toRadians ( _NUM ) ) ; leftFemurToLeftTibia . setMotorEnabled ( _BOOL ) ; leftFemurToLeftTibia . setMotorSpeed ( Math . toRadians ( _NUM ) ) ; leftFemurToLeftTibia . setMaximumMotorTorque ( _NUM ) ; leftFemurToLeftTibia . setCollisionAllowed ( _BOOL ) ; world . addJoint ( leftFemurToLeftTibia ) ; }
public void readData ( DataInput din ) throws IOException { byteCount = din . readByte ( ) ; status = din . readUnsignedShort ( ) ; eventCount = din . readUnsignedShort ( ) ; messageCount = din . readUnsignedShort ( ) ; events = new byte [ byteCount - _NUM ] ; if ( events . length > _NUM ) { din . readFully ( events , _NUM , events . length ) ; } }
public E remove ( int index ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { Object [ ] elements = getArray ( ) ; int len = elements . length ; E oldValue = get ( elements , index ) ; int numMoved = len - index - _NUM ; if ( numMoved == _NUM ) setArray ( Arrays . copyOf ( elements , len - _NUM ) ) ; else { Object [ ] newElements = new Object [ len - _NUM ] ; System . arraycopy ( elements , _NUM , newElements , _NUM , index ) ; System . arraycopy ( elements , index + _NUM , newElements , index , numMoved ) ; setArray ( newElements ) ; } return oldValue ; } finally { lock . unlock ( ) ; } }
void createEdges ( Number [ ] v ) { graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; graph . addEdge ( new Double ( Math . random ( ) ) , v [ _NUM ] , v [ _NUM ] , EdgeType . DIRECTED ) ; }
@ SuppressWarnings ( _STR ) public DataResponse paginateList ( Map < String , String > requestParams , PaginateRequest paginateRequest , Object query , String defaultSort , Map properties ) { if ( paginateRequest == null ) { paginateRequest = new PaginateRequest ( ) ; } if ( paginateRequest . getStart ( ) == null ) { paginateRequest . setStart ( RequestUtil . getInteger ( requestParams , _STR , _NUM ) ) ; } if ( paginateRequest . getSize ( ) == null ) { paginateRequest . setSize ( RequestUtil . getInteger ( requestParams , _STR , _NUM ) ) ; } if ( paginateRequest . getOrder ( ) == null ) { paginateRequest . setOrder ( requestParams . get ( _STR ) ) ; } if ( paginateRequest . getSort ( ) == null ) { paginateRequest . setSort ( requestParams . get ( _STR ) ) ; } Integer start = paginateRequest . getStart ( ) ; if ( start == null || start < _NUM ) { start = _NUM ; } Integer size = paginateRequest . getSize ( ) ; if ( size == null || size < _NUM ) { size = _NUM ; } String sort = paginateRequest . getSort ( ) ; if ( sort == null ) { sort = defaultSort ; } String order = paginateRequest . getOrder ( ) ; if ( order == null ) { order = _STR ; } if ( sort != null && ! properties . isEmpty ( ) ) { Object qp = properties . get ( sort ) ; if ( qp == null ) { throw new ActivitiIllegalArgumentException ( _STR + sort + _STR ) ; } if ( query instanceof AbstractQuery ) { AbstractQuery queryObject = ( AbstractQuery ) query ; QueryProperty queryProperty = ( QueryProperty ) qp ; queryObject . orderBy ( queryProperty ) ; if ( order . equals ( _STR ) ) { queryObject . asc ( ) ; } else if ( order . equals ( _STR ) ) { queryObject . desc ( ) ; } else { throw new ActivitiIllegalArgumentException ( _STR + order + _STR ) ; } } else if ( query instanceof org . activiti . idm . engine . impl . AbstractQuery ) { org . activiti . idm . engine . impl . AbstractQuery queryObject = ( org . activiti . idm . engine . impl . AbstractQuery ) query ; org . activiti . idm . api . QueryProperty queryProperty = ( org . activiti . idm . api . QueryProperty ) qp ; queryObject . orderBy ( queryProperty ) ; if ( order . equals ( _STR ) ) { queryObject . asc ( ) ; } else if ( order . equals ( _STR ) ) { queryObject . desc ( ) ; } else { throw new ActivitiIllegalArgumentException ( _STR + order + _STR ) ; } } } DataResponse response = new DataResponse ( ) ; response . setStart ( start ) ; response . setSort ( sort ) ; response . setOrder ( order ) ; if ( query instanceof AbstractQuery ) { AbstractQuery queryObject = ( AbstractQuery ) query ; List list = processList ( queryObject . listPage ( start , size ) ) ; response . setTotal ( queryObject . count ( ) ) ; response . setSize ( list . size ( ) ) ; response . setData ( list ) ; } else if ( query instanceof org . activiti . idm . engine . impl . AbstractQuery ) { org . activiti . idm . engine . impl . AbstractQuery queryObject = ( org . activiti . idm . engine . impl . AbstractQuery ) query ; List list = processList ( queryObject . listPage ( start , size ) ) ; response . setTotal ( queryObject . count ( ) ) ; response . setSize ( list . size ( ) ) ; response . setData ( list ) ; } return response ; }
private static < T extends Component > T buildRow ( final JPanel panel , final String labelText , final String hint , final T component , final boolean isLast ) { component . setPreferredSize ( new Dimension ( COLORPANEL_WIDTH , COLORPANEL_HEIGHT ) ) ; final JPanel rowPanel = new JPanel ( new BorderLayout ( ) ) ; rowPanel . setBorder ( new EmptyBorder ( _NUM , _NUM , isLast ? _NUM : _NUM , _NUM ) ) ; rowPanel . add ( new JLabel ( labelText ) , BorderLayout . CENTER ) ; rowPanel . add ( CHintCreator . createHintPanel ( component , hint ) , BorderLayout . EAST ) ; panel . add ( rowPanel ) ; return component ; }
public Builder addTargetElements ( Element ... additionalTargets ) { for ( int i = _NUM ; i < additionalTargets . length ; i ++ ) { targetElements . add ( additionalTargets [ i ] ) ; } return this ; }
public void curveTo ( double x1 , double y1 , double x2 , double y2 , double x3 , double y3 ) { if ( size ( ) == _NUM ) { throw new IllegalPathStateException ( _STR ) ; } Node lastPoint = get ( size ( ) - _NUM ) ; lastPoint . mask |= C2_MASK ; lastPoint . x [ _NUM ] = x1 ; lastPoint . y [ _NUM ] = y1 ; if ( ( lastPoint . mask & C1C2_MASK ) == C1C2_MASK ) { lastPoint . keepColinear = Math . abs ( Geom . angle ( lastPoint . x [ _NUM ] , lastPoint . y [ _NUM ] , lastPoint . x [ _NUM ] , lastPoint . y [ _NUM ] ) - Geom . angle ( lastPoint . x [ _NUM ] , lastPoint . y [ _NUM ] , lastPoint . x [ _NUM ] , lastPoint . y [ _NUM ] ) ) < _NUM ; } add ( new Node ( C1_MASK , x3 , y3 , x2 , y2 , x3 , y3 ) ) ; }
public void testDivideRoundUpNeg ( ) { String a = _STR ; int aScale = - _NUM ; String b = _STR ; int bScale = _NUM ; String c = _STR ; int resScale = - _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_UP ) ; assertEquals ( _STR , c , result . toString ( ) ) ; assertEquals ( _STR , resScale , result . scale ( ) ) ; }
private void writeMetaBits ( ) throws IOException { final byte buf [ ] = genMetabitsData ( ) ; final long addr = m_metaBitsAddr < _NUM ? physicalAddress ( m_metaBitsAddr ) : ( ( long ) m_metaBitsAddr ) << ALLOCATION_SCALEUP ; if ( addr == _NUM ) { throw new IllegalStateException ( _STR + m_metaBitsAddr ) ; } assert addr > _NUM ; try { if ( log . isDebugEnabled ( ) ) log . debug ( _STR + addr ) ; m_writeCacheService . write ( addr , ByteBuffer . wrap ( buf ) , _NUM , _BOOL , m_metaBitsAddr < _NUM ? m_metaBitsAddr : _NUM ) ; } catch ( InterruptedException e ) { throw new RuntimeException ( e ) ; } }
private void openCounterDataInputStream ( ) throws DataFallbackException { if ( dInput == null ) { if ( LOG . isDebugEnabled ( ) ) LOG . debug ( _STR + counterFile . getName ( ) + _STR ) ; try { dInput = new BufferedReader ( new FileReader ( counterFile ) ) ; } catch ( IOException e ) { throw new DataFallbackException ( e . getMessage ( ) ) ; } } }
public CompositePredicate ( Predicate p1 , Predicate p2 ) { m_clauses . add ( p1 ) ; m_clauses . add ( p2 ) ; }
public String readNextWord ( ) { if ( tokenizer . hasMoreTokens ( ) ) { return tokenizer . nextToken ( ) ; } else { return null ; } }
public static final void toString ( StringBuffer output , String str ) { if ( str == null ) { output . append ( _STR ) ; return ; } output . append ( toString ( str ) ) ; }
public static boolean testFileExists ( String name ) { boolean status ; if ( ( testSaveLocationExists ( ) ) && ( ! name . equals ( _STR ) ) ) { File path = Environment . getExternalStorageDirectory ( ) ; File newPath = constructFilePaths ( path . toString ( ) , name ) ; status = newPath . exists ( ) ; } else { status = _BOOL ; } return status ; }
@ Override public void buildAssociations ( Instances data ) throws Exception { buildAssociations ( ( Object ) data ) ; return ; }
public void testFloatValueNeg ( ) { String a = _STR ; BigDecimal aNumber = new BigDecimal ( a ) ; float result = - _NUM ; assertTrue ( _STR , aNumber . floatValue ( ) == result ) ; }
public static String replaceFirst ( String s , String sub , String with ) { int i = s . indexOf ( sub ) ; if ( i == - _NUM ) { return s ; } return s . substring ( _NUM , i ) + with + s . substring ( i + sub . length ( ) ) ; }
private LocationHelper ( ) { }
public void addObject ( String s ) throws Exception { inspect ( Class . forName ( s ) ) ; }
public static Element firstChildElement ( Element element , Set < String > childElementNames ) { if ( element == null ) return null ; Node node = element . getFirstChild ( ) ; if ( node != null ) { do { if ( node . getNodeType ( ) == Node . ELEMENT_NODE && childElementNames . contains ( node . getNodeName ( ) ) ) { Element childElement = ( Element ) node ; return childElement ; } } while ( ( node = node . getNextSibling ( ) ) != null ) ; } return null ; }
public static void main ( String [ ] args ) throws Exception { final JFrame frame = new HTMLTest ( args ) ; frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; frame . pack ( ) ; frame . setVisible ( _BOOL ) ; }
@ Override public int hashCode ( ) { return rawString . hashCode ( ) ; }
public final void testAddAllHelperTextColorsFromArray ( ) { int helperTextColor1 = Color . BLACK ; int helperTextColor2 = Color . GRAY ; int [ ] helperTextColors1 = new int [ _NUM ] ; helperTextColors1 [ _NUM ] = helperTextColor1 ; helperTextColors1 [ _NUM ] = helperTextColor2 ; PasswordEditText passwordEditText = new PasswordEditText ( getContext ( ) ) ; passwordEditText . addAllHelperTextColors ( helperTextColors1 ) ; passwordEditText . addAllHelperTextColors ( helperTextColors1 ) ; Collection < Integer > helperTextColors2 = passwordEditText . getHelperTextColors ( ) ; assertEquals ( helperTextColors1 . length , helperTextColors2 . size ( ) ) ; Iterator < Integer > iterator = helperTextColors2 . iterator ( ) ; assertEquals ( helperTextColor1 , ( int ) iterator . next ( ) ) ; assertEquals ( helperTextColor2 , ( int ) iterator . next ( ) ) ; }
private void normalize ( double [ ] in ) { double max = _NUM ; for ( double d : in ) { max = Math . max ( max , d ) ; } for ( int i = _NUM ; i < in . length ; i ++ ) { in [ i ] = in [ i ] / max ; } }
public void add ( T graphic ) { synchronized ( mLock ) { mGraphics . add ( graphic ) ; } postInvalidate ( ) ; }
public static boolean writeToFile ( String filename , String message , boolean append ) { boolean result ; BufferedWriter writer ; try { writer = new BufferedWriter ( new FileWriter ( filename , append ) ) ; writer . write ( message ) ; writer . newLine ( ) ; writer . flush ( ) ; writer . close ( ) ; result = _BOOL ; } catch ( Exception e ) { result = _BOOL ; } return result ; }
public int hashCode ( ) { return ( _NUM * colorModel . hashCode ( ) ) + ( _NUM * sampleModel . hashCode ( ) ) ; }
static public final float random ( float start , float end ) { return start + random . nextFloat ( ) * ( end - start ) ; }
public void writeFile ( String name , String mimeType , String fileName , byte [ ] data ) throws IOException { if ( data == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( fileName == null || fileName . isEmpty ( ) ) { throw new IllegalArgumentException ( _STR ) ; } out . writeBytes ( PREFIX ) ; out . writeBytes ( boundary ) ; out . writeBytes ( NEWLINE ) ; out . writeBytes ( _STR + name + _STR + fileName + _STR ) ; out . writeBytes ( NEWLINE ) ; if ( mimeType != null ) { out . writeBytes ( _STR + mimeType ) ; out . writeBytes ( NEWLINE ) ; } out . writeBytes ( NEWLINE ) ; out . write ( data , _NUM , data . length ) ; out . writeBytes ( NEWLINE ) ; out . flush ( ) ; }
@ TargetApi ( Build . VERSION_CODES . ICE_CREAM_SANDWICH_MR1 ) private void onConfigurationChanged ( Configuration newConfig ) { final Locale newLocale = newConfig . locale ; if ( newLocale . equals ( mSystemLocale ) ) { return ; } mSystemLocale = newLocale ; ensureSupportedLocale ( ) ; }
private static Boolean findConvexPolygon ( final PlanetModel planetModel , final Edge currentEdge , final GeoCompositePolygon rval , final EdgeBuffer edgeBuffer , final List < GeoPolygon > holes , final GeoPoint testPoint ) { final Set < Edge > includedEdges = new HashSet < > ( ) ; includedEdges . add ( currentEdge ) ; Edge firstEdge = currentEdge ; Edge lastEdge = currentEdge ; while ( _BOOL ) { if ( firstEdge . startPoint == lastEdge . endPoint ) { break ; } final Edge newLastEdge = edgeBuffer . getNext ( lastEdge ) ; if ( isWithin ( newLastEdge . endPoint , includedEdges ) ) { final SidedPlane returnBoundary ; if ( firstEdge . startPoint != newLastEdge . endPoint ) { returnBoundary = new SidedPlane ( firstEdge . endPoint , firstEdge . startPoint , newLastEdge . endPoint ) ; } else { returnBoundary = null ; } boolean foundPointInside = _BOOL ; final Iterator < Edge > edgeIterator = edgeBuffer . iterator ( ) ; while ( edgeIterator . hasNext ( ) ) { final Edge edge = edgeIterator . next ( ) ; if ( ! includedEdges . contains ( edge ) && edge != newLastEdge ) { if ( edge . startPoint != newLastEdge . endPoint ) { if ( isWithin ( edge . startPoint , includedEdges , newLastEdge , returnBoundary ) ) { foundPointInside = _BOOL ; break ; } } if ( edge . endPoint != firstEdge . startPoint ) { if ( isWithin ( edge . endPoint , includedEdges , newLastEdge , returnBoundary ) ) { foundPointInside = _BOOL ; break ; } } } } if ( ! foundPointInside ) { includedEdges . add ( newLastEdge ) ; lastEdge = newLastEdge ; continue ; } } break ; } while ( _BOOL ) { if ( firstEdge . startPoint == lastEdge . endPoint ) { break ; } final Edge newFirstEdge = edgeBuffer . getPrevious ( firstEdge ) ; if ( isWithin ( newFirstEdge . startPoint , includedEdges ) ) { final SidedPlane returnBoundary ; if ( newFirstEdge . startPoint != lastEdge . endPoint ) { returnBoundary = new SidedPlane ( lastEdge . startPoint , lastEdge . endPoint , newFirstEdge . startPoint ) ; } else { returnBoundary = null ; } boolean foundPointInside = _BOOL ; final Iterator < Edge > edgeIterator = edgeBuffer . iterator ( ) ; while ( edgeIterator . hasNext ( ) ) { final Edge edge = edgeIterator . next ( ) ; if ( ! includedEdges . contains ( edge ) && edge != newFirstEdge ) { if ( edge . startPoint != lastEdge . endPoint ) { if ( isWithin ( edge . startPoint , includedEdges , newFirstEdge , returnBoundary ) ) { foundPointInside = _BOOL ; break ; } } if ( edge . endPoint != newFirstEdge . startPoint ) { if ( isWithin ( edge . endPoint , includedEdges , newFirstEdge , returnBoundary ) ) { foundPointInside = _BOOL ; break ; } } } } if ( ! foundPointInside ) { includedEdges . add ( newFirstEdge ) ; firstEdge = newFirstEdge ; continue ; } } break ; } if ( includedEdges . size ( ) < _NUM ) { return _BOOL ; } final List < GeoPoint > points = new ArrayList < GeoPoint > ( includedEdges . size ( ) + _NUM ) ; final BitSet internalEdges = new BitSet ( includedEdges . size ( ) ) ; final boolean returnIsInternal ; if ( firstEdge . startPoint == lastEdge . endPoint ) { if ( includedEdges . size ( ) < _NUM ) { return _BOOL ; } Edge edge = firstEdge ; points . add ( edge . startPoint ) ; int k = _NUM ; while ( _BOOL ) { if ( edge == lastEdge ) { break ; } points . add ( edge . endPoint ) ; internalEdges . set ( k ++ , edge . isInternal ) ; edge = edgeBuffer . getNext ( edge ) ; } returnIsInternal = lastEdge . isInternal ; for ( int i = _NUM ; i < points . size ( ) ; i ++ ) { final GeoPoint start = points . get ( i ) ; final GeoPoint end = points . get ( getLegalIndex ( i + _NUM , points . size ( ) ) ) ; final Plane planeToFind = new Plane ( start , end ) ; int endPointIndex = - _NUM ; for ( int j = _NUM ; j < points . size ( ) ; j ++ ) { final int index = getLegalIndex ( j + i + _NUM , points . size ( ) ) ; if ( ! planeToFind . evaluateIsZero ( points . get ( index ) ) ) { endPointIndex = index ; break ; } } if ( endPointIndex == - _NUM ) { return _BOOL ; } } edgeBuffer . clear ( ) ; } else { final SidedPlane returnSidedPlane = new SidedPlane ( firstEdge . endPoint , _BOOL , firstEdge . startPoint , lastEdge . endPoint ) ; final Edge returnEdge = new Edge ( firstEdge . startPoint , lastEdge . endPoint , returnSidedPlane , _BOOL ) ; final List < Edge > edges = new ArrayList < Edge > ( includedEdges . size ( ) ) ; returnIsInternal = _BOOL ; Edge edge = firstEdge ; points . add ( edge . startPoint ) ; int k = _NUM ; while ( _BOOL ) { points . add ( edge . endPoint ) ; internalEdges . set ( k ++ , edge . isInternal ) ; edges . add ( edge ) ; if ( edge == lastEdge ) { break ; } edge = edgeBuffer . getNext ( edge ) ; } for ( int i = _NUM ; i < points . size ( ) ; i ++ ) { final GeoPoint start = points . get ( i ) ; final GeoPoint end = points . get ( getLegalIndex ( i + _NUM , points . size ( ) ) ) ; final Plane planeToFind = new Plane ( start , end ) ; int endPointIndex = - _NUM ; for ( int j = _NUM ; j < points . size ( ) ; j ++ ) { final int index = getLegalIndex ( j + i + _NUM , points . size ( ) ) ; if ( ! planeToFind . evaluateIsZero ( points . get ( index ) ) ) { endPointIndex = index ; break ; } } if ( endPointIndex == - _NUM ) { return _BOOL ; } } edgeBuffer . replace ( edges , returnEdge ) ; } if ( testPoint != null && holes != null && holes . size ( ) > _NUM ) { final GeoPolygon testPolygon = new GeoConvexPolygon ( planetModel , points , null , internalEdges , returnIsInternal ) ; if ( testPolygon . isWithin ( testPoint ) ) { return null ; } } final GeoPolygon realPolygon = new GeoConvexPolygon ( planetModel , points , holes , internalEdges , returnIsInternal ) ; if ( testPoint != null && ( holes == null || holes . size ( ) == _NUM ) ) { if ( realPolygon . isWithin ( testPoint ) ) { return null ; } } rval . addShape ( realPolygon ) ; return _BOOL ; }
public static Keymap fromKey ( final String key ) { if ( key == null || key . isEmpty ( ) ) { return null ; } final Keymap searchResult = instances . get ( key ) ; return searchResult ; }
private static boolean isGMTish ( String name ) { if ( name . length ( ) < _NUM ) { return _BOOL ; } char c1 = name . charAt ( _NUM ) ; char c2 = name . charAt ( _NUM ) ; char c3 = name . charAt ( _NUM ) ; if ( ! ( ( c1 == _STR || c1 == _STR ) && ( c2 == _STR || c2 == _STR ) && ( c3 == _STR || c3 == _STR ) ) && ! ( ( c1 == _STR || c1 == _STR ) && ( c2 == _STR || c2 == _STR ) && ( c3 == _STR || c3 == _STR ) ) && ! ( ( c1 == _STR || c1 == _STR ) && ( c2 == _STR || c2 == _STR ) && ( c3 == _STR ) ) ) { return _BOOL ; } if ( name . length ( ) == _NUM ) { return _BOOL ; } String offset = name . substring ( _NUM ) ; if ( offset . startsWith ( _STR ) ) { return offset . equals ( _STR ) || offset . equals ( _STR ) || offset . equals ( _STR ) ; } else { return offset . equals ( _STR ) || offset . equals ( _STR ) || offset . equals ( _STR ) ; } }
private static String massageURI ( String uri ) { uri = uri . trim ( ) ; int protocolEnd = uri . indexOf ( _STR ) ; if ( protocolEnd < _NUM || isColonFollowedByPortNumber ( uri , protocolEnd ) ) { uri = _STR + uri ; } return uri ; }
public void delete ( int key ) { int i = binarySearch ( mKeys , _NUM , mSize , key ) ; if ( i >= _NUM ) { System . arraycopy ( mKeys , i + _NUM , mKeys , i , mSize - ( i + _NUM ) ) ; System . arraycopy ( mValues , i + _NUM , mValues , i , mSize - ( i + _NUM ) ) ; mSize -- ; } }
protected void addWholeMatch ( StringBuilder sb , String surface , String analyzed ) { sb . append ( _STR ) ; sb . append ( surface ) ; sb . append ( _STR ) ; }
public void start ( ) { stopAt = System . currentTimeMillis ( ) + MAX_PROCESSING_TIME ; }
private Object [ ] singleRow ( int row ) { Object [ ] res = new Object [ this . nFields ] ; for ( int i = _NUM ; i < this . nFields ; i += _NUM ) { if ( this . isNull == null || ! this . isNull [ row * this . nFields + i ] ) { res [ i ] = ArrayFuncs . newInstance ( this . types [ i ] , _NUM ) ; System . arraycopy ( this . data [ i ] , row , res [ i ] , _NUM , _NUM ) ; } } return res ; }
public static String removeChars ( String src , String chars ) { int i = src . length ( ) ; StringBuilder sb = new StringBuilder ( i ) ; for ( int j = _NUM ; j < i ; j ++ ) { char c = src . charAt ( j ) ; if ( chars . indexOf ( c ) == - _NUM ) { sb . append ( c ) ; } } return sb . toString ( ) ; }
private void addAllColumns ( ) throws SQLException { DatabaseMetaData metaData = getDatabaseMetaData ( ) ; List < String > columns = new ArrayList < > ( ) ; try ( ResultSet rs = metaData . getColumns ( null , null , normalizeObjectName ( statementModel . getTableName ( ) ) , null ) ) { while ( rs . next ( ) ) { columns . add ( quoteObjectName ( rs . getString ( IDX_COLUMN_NAME ) ) ) ; } } columnNames = columns . toArray ( new String [ _NUM ] ) ; addReturningClause ( ) ; }
public void loadHamNSpam ( Connection conn ) throws java . sql . SQLException { PreparedStatement pstmt = null ; ResultSet rs = null ; try { pstmt = conn . prepareStatement ( sqlQueries . getSqlString ( _STR , _BOOL ) ) ; rs = pstmt . executeQuery ( ) ; Map < String , Integer > ham = getHamTokenCounts ( ) ; while ( rs . next ( ) ) { String token = rs . getString ( _NUM ) ; int count = rs . getInt ( _NUM ) ; if ( count > _NUM ) { ham . put ( token , count ) ; } } log ( _STR + ham . size ( ) ) ; rs . close ( ) ; pstmt . close ( ) ; pstmt = conn . prepareStatement ( sqlQueries . getSqlString ( _STR , _BOOL ) ) ; rs = pstmt . executeQuery ( ) ; Map < String , Integer > spam = getSpamTokenCounts ( ) ; while ( rs . next ( ) ) { String token = rs . getString ( _NUM ) ; int count = rs . getInt ( _NUM ) ; if ( count > _NUM ) { spam . put ( token , count ) ; } } log ( _STR + spam . size ( ) ) ; rs . close ( ) ; pstmt . close ( ) ; pstmt = conn . prepareStatement ( sqlQueries . getSqlString ( _STR , _BOOL ) ) ; rs = pstmt . executeQuery ( ) ; if ( rs . next ( ) ) { setHamMessageCount ( rs . getInt ( _NUM ) ) ; setSpamMessageCount ( rs . getInt ( _NUM ) ) ; } rs . close ( ) ; pstmt . close ( ) ; } finally { if ( rs != null ) { try { rs . close ( ) ; } catch ( java . sql . SQLException se ) { log ( _STR , se ) ; } rs = null ; } if ( pstmt != null ) { try { pstmt . close ( ) ; } catch ( java . sql . SQLException se ) { log ( _STR , se ) ; } pstmt = null ; } } }
static private void copyStream ( final InputStream content , final OutputStream outstr ) throws IOException { final byte [ ] buf = new byte [ GZIP_BUFFER ] ; while ( _BOOL ) { final int rdlen = content . read ( buf ) ; if ( rdlen <= _NUM ) { break ; } outstr . write ( buf , _NUM , rdlen ) ; } }
public void checkAndSetupStreamsDrawer ( ) { setupListViewAdapter ( ) ; }
public void testFpTypeOverrideSimple ( ) throws Exception { ObjectMapper m = new ObjectMapper ( ) ; m . enable ( DeserializationConfig . Feature . USE_BIG_DECIMAL_FOR_FLOATS ) ; BigDecimal dec = new BigDecimal ( _STR ) ; Number result = m . readValue ( dec . toString ( ) , Number . class ) ; assertEquals ( BigDecimal . class , result . getClass ( ) ) ; assertEquals ( dec , result ) ; Object value = m . readValue ( dec . toString ( ) , Object . class ) ; assertEquals ( BigDecimal . class , result . getClass ( ) ) ; assertEquals ( dec , value ) ; }
private com . codename1 . ui . Component copyComponent ( com . codename1 . ui . Component cmp ) { com . codename1 . ui . Container cnt = builder . createContainer ( res , copiedResourceName ) ; com . codename1 . ui . Component dest = builder . findByName ( cmp . getName ( ) , cnt ) ; if ( dest != null && dest . getParent ( ) != null ) { removeComponentSync ( dest . getParent ( ) , dest ) ; } return dest ; }
static double zetastatic ( long st , long n , double theta , double initialsum ) { double sum = initialsum ; for ( long i = st ; i < n ; i ++ ) { sum += _NUM / ( Math . pow ( i + _NUM , theta ) ) ; } return sum ; }
@ Override public BigDecimal calculateTotalPendingAdvance ( final BigDecimal totalAdvancePaid , final Date billDate , final WorkOrderEstimate workOrderEstimate , final Long billId ) { final CChartOfAccounts advanceCOA = contractorAdvanceService . getContractorAdvanceAccountcodeForWOE ( workOrderEstimate . getId ( ) ) ; BigDecimal totalPendingBalance = BigDecimal . ZERO ; BigDecimal totalAdvanceAdjusted = BigDecimal . ZERO ; if ( advanceCOA != null && totalAdvancePaid != null && totalAdvancePaid . compareTo ( BigDecimal . ZERO ) > _NUM ) { totalAdvanceAdjusted = getTotalAdvanceAdjustedForWOE ( billDate , workOrderEstimate . getId ( ) , advanceCOA . getId ( ) , billId ) ; if ( totalAdvanceAdjusted != null && totalAdvanceAdjusted . compareTo ( BigDecimal . ZERO ) > _NUM && totalAdvanceAdjusted . compareTo ( BigDecimal . ZERO ) > _NUM ) totalPendingBalance = totalAdvanceAdjusted . subtract ( totalAdvanceAdjusted ) ; else totalPendingBalance = totalAdvancePaid ; } return totalPendingBalance ; }
private void loadProfile ( String userId , String name ) { final Intent userProfileIntent = new Intent ( getActivity ( ) , UserProfileActivity . class ) ; userProfileIntent . putExtra ( AppConstants . Keys . USER_ID , userId ) ; userProfileIntent . putExtra ( AppConstants . Keys . USER_NAME , name ) ; userProfileIntent . putExtra ( AppConstants . Keys . SERVICE_SCREEN_TYPE , AppConstants . ServiceScreenType . PROFILE ) ; startActivity ( userProfileIntent ) ; }
private void scrollBy ( final int increment ) { index += increment ; if ( index < _NUM ) { index = _NUM ; } if ( index >= items . size ( ) ) { index = items . size ( ) - _NUM ; } redraw ( ) ; }
private static byte [ ] generateSeed ( ) { try { ByteArrayOutputStream seedBuffer = new ByteArrayOutputStream ( ) ; DataOutputStream seedBufferOut = new DataOutputStream ( seedBuffer ) ; seedBufferOut . writeLong ( System . currentTimeMillis ( ) ) ; seedBufferOut . writeLong ( System . nanoTime ( ) ) ; seedBufferOut . writeInt ( Process . myPid ( ) ) ; seedBufferOut . writeInt ( Process . myUid ( ) ) ; seedBufferOut . write ( BUILD_FINGERPRINT_AND_DEVICE_SERIAL ) ; seedBufferOut . close ( ) ; return seedBuffer . toByteArray ( ) ; } catch ( IOException e ) { throw new SecurityException ( _STR , e ) ; } }
public static boolean symbolNeedsQuoting ( CharSequence symbol , boolean quoteOperators ) { int length = symbol . length ( ) ; if ( length == _NUM ) { throw new EmptySymbolException ( ) ; } if ( ! isIdentifierKeyword ( symbol ) ) { char c = symbol . charAt ( _NUM ) ; if ( ! quoteOperators && isOperatorPart ( c ) ) { for ( int ii = _NUM ; ii < length ; ii ++ ) { c = symbol . charAt ( ii ) ; if ( ! isOperatorPart ( c ) ) { return _BOOL ; } } return _BOOL ; } else if ( isIdentifierStart ( c ) ) { for ( int ii = _NUM ; ii < length ; ii ++ ) { c = symbol . charAt ( ii ) ; if ( ( c == _STR || c < _NUM || c > _NUM ) || ! isIdentifierPart ( c ) ) { return _BOOL ; } } return _BOOL ; } } return _BOOL ; }
public static long parseCommitCounterFile ( final String name , final String ext ) throws NumberFormatException { if ( name == null ) throw new IllegalArgumentException ( ) ; if ( ext == null ) throw new IllegalArgumentException ( ) ; final int len = name . length ( ) - ext . length ( ) ; final String fileBaseName = name . substring ( _NUM , len ) ; final long commitCounter = Long . parseLong ( fileBaseName ) ; return commitCounter ; }
public static Document loadDocument ( File file ) throws Exception { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; return builder . parse ( file ) ; }
private Node newFloatingComment ( ) { Node c = new Node ( Token . EMPTY ) ; linkCommentToNode ( c ) ; return c ; }
public Boolean isHod ( final Long assignId ) { final List < HeadOfDepartments > hodList = employeeDepartmentRepository . getAllHodDepartments ( assignId ) ; return ! hodList . isEmpty ( ) ; }
public Munger singleLabelMode ( String ... languages ) { return singleLabelMode ( Arrays . asList ( languages ) ) ; }
public StatValue [ ] matchSpec ( StatSpec spec ) { if ( spec . getCombineType ( ) == StatSpec . GLOBAL ) { StatValue [ ] allValues = matchSpec ( new RawStatSpec ( spec ) ) ; if ( allValues . length == _NUM ) { return allValues ; } else { ComboValue cv = new ComboValue ( allValues ) ; return new StatValue [ ] { cv } ; } } else { List l = new ArrayList ( ) ; StatArchiveReader . StatArchiveFile [ ] archives = getArchives ( ) ; for ( int i = _NUM ; i < archives . length ; i ++ ) { StatArchiveFile f = archives [ i ] ; if ( spec . archiveMatches ( f . getFile ( ) ) ) { f . matchSpec ( spec , l ) ; } } StatValue [ ] result = new StatValue [ l . size ( ) ] ; return ( StatValue [ ] ) l . toArray ( result ) ; } }
private void assignClusterNums ( int [ ] cl_num ) throws Exception { if ( m_children != null && m_children . size ( ) < _NUM ) { throw new Exception ( _STR ) ; } m_clusterNum = cl_num [ _NUM ] ; cl_num [ _NUM ] ++ ; if ( m_children != null ) { for ( int i = _NUM ; i < m_children . size ( ) ; i ++ ) { CNode child = m_children . get ( i ) ; child . assignClusterNums ( cl_num ) ; } } }
protected void closeSubpath ( ) { mPSStream . println ( CLOSEPATH_STR ) ; mPenX = mStartPathX ; mPenY = mStartPathY ; }
public TvShowEpisodeScrapeTask ( List < TvShowEpisode > episodes , MediaScraper mediaScraper ) { super ( BUNDLE . getString ( _STR ) , episodes . size ( ) , TaskType . BACKGROUND_TASK ) ; this . episodes = episodes ; this . mediaScraper = mediaScraper ; this . scrapeThumb = _BOOL ; }
public void saveSelection ( IMiniTable miniTable ) { log . info ( _STR ) ; ArrayList < Integer > results = new ArrayList < Integer > ( ) ; setSelection ( null ) ; int rows = miniTable . getRowCount ( ) ; for ( int i = _NUM ; i < rows ; i ++ ) { IDColumn id = ( IDColumn ) miniTable . getValueAt ( i , _NUM ) ; if ( id != null && id . isSelected ( ) ) results . add ( id . getRecord_ID ( ) ) ; } if ( results . size ( ) == _NUM ) return ; log . config ( _STR + results . size ( ) ) ; setSelection ( results ) ; }
public ModelMBeanNotificationInfo ( String [ ] notifTypes , String name , String description ) { this ( notifTypes , name , description , null ) ; }
public void cleanBuildTask ( long id ) throws NotFoundException { FutureBuildTask task = tasks . remove ( id ) ; if ( task == null ) { throw new NotFoundException ( String . format ( _STR , id ) ) ; } task . cancel ( _BOOL ) ; cleanup ( task ) ; }
public static File createTempDir ( File parent ) { File temp = new File ( parent , Integer . toString ( Math . abs ( UNSEEDED_RANDOM . nextInt ( ) ) % _NUM ) ) ; temp . delete ( ) ; temp . mkdir ( ) ; temp . deleteOnExit ( ) ; return temp ; }
public String toURI ( ) { CharArrayBuffer buffer = new CharArrayBuffer ( _NUM ) ; buffer . append ( this . schemeName ) ; buffer . append ( _STR ) ; buffer . append ( this . hostname ) ; if ( this . port != - _NUM ) { buffer . append ( _STR ) ; buffer . append ( Integer . toString ( this . port ) ) ; } return buffer . toString ( ) ; }
public void moveTo ( final int lonCenter , final int latCenter ) { double mLatCenter = GeoMath . latE7ToMercator ( latCenter ) ; double mTop = GeoMath . latE7ToMercator ( top ) ; int newBottom = GeoMath . mercatorToLatE7 ( mLatCenter - ( mTop - bottomMercator ) / _NUM ) ; try { translate ( ( lonCenter - left - ( int ) ( width / _NUM ) ) , newBottom - bottom ) ; } catch ( OsmException e ) { e . printStackTrace ( ) ; } }
public void sendEvent ( final String name , final Map < String , String > properties ) { final String eventName = String . format ( TfsTelemetryConstants . PLUGIN_ACTION_EVENT_NAME_FORMAT , name ) ; final PropertyMapBuilder builder = new PropertyMapBuilder ( properties ) ; logger . debug ( String . format ( _STR , name , builder . toString ( ) ) ) ; if ( telemetryClient != null ) { telemetryClient . trackEvent ( eventName , builder . build ( ) , null ) ; } }
public void handleHeaderColumnPressed ( Point p ) { JTableHeader th = TABLE . getTableHeader ( ) ; int col = th . columnAtPoint ( p ) ; int c = TABLE . convertColumnIndexToModel ( col ) ; if ( c != - _NUM ) { TABLE . setPressedColumnIndex ( c ) ; th . repaint ( th . getHeaderRect ( col ) ) ; } }
private static List < FixedRecord > createFixedRecords ( int count ) { List < FixedRecord > records = new ArrayList < > ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { records . add ( new FixedRecord ( i ) ) ; } return records ; }
public TrackedEntityInstanceQueryParams addAttributesIfNotExist ( List < QueryItem > attrs ) { for ( QueryItem attr : attrs ) { if ( attributes != null && ! attributes . contains ( attr ) ) { attributes . add ( attr ) ; } } return this ; }
void recomposeAttributeSets ( ElemAttributeSet attrSet ) { ArrayList attrSetList = ( ArrayList ) m_attrSets . get ( attrSet . getName ( ) ) ; if ( null == attrSetList ) { attrSetList = new ArrayList ( ) ; m_attrSets . put ( attrSet . getName ( ) , attrSetList ) ; } attrSetList . add ( attrSet ) ; }
public static List split ( String str , String regex ) { return ( Arrays . asList ( str . split ( regex ) ) ) ; }
protected final void deleteDBFFDCFiles ( String directoryToDelete ) throws AdeException { try { final File dirToDelete = new File ( directoryToDelete ) ; String [ ] fileList = dirToDelete . list ( ) ; if ( fileList . length == _NUM ) { dirToDelete . delete ( ) ; } else { for ( int i = _NUM ; i < fileList . length ; i ++ ) { final File f = new File ( dirToDelete , fileList [ i ] ) ; if ( f . isDirectory ( ) ) { final String filePath = f . getPath ( ) ; deleteDBFFDCFiles ( filePath ) ; continue ; } f . delete ( ) ; } fileList = dirToDelete . list ( ) ; if ( fileList . length == _NUM ) { dirToDelete . delete ( ) ; } } } catch ( Exception e ) { throw new AdeInternalException ( _STR , e ) ; } }
Node < K , V > findLast ( ) { Index < K , V > q = head ; for ( ; ; ) { Index < K , V > d , r ; if ( ( r = q . right ) != null ) { if ( r . indexesDeletedNode ( ) ) { q . unlink ( r ) ; q = head ; } else q = r ; } else if ( ( d = q . down ) != null ) { q = d ; } else { Node < K , V > b = q . node ; Node < K , V > n = b . next ; for ( ; ; ) { if ( n == null ) return b . isBaseHeader ( ) ? null : b ; Node < K , V > f = n . next ; if ( n != b . next ) break ; Object v = n . value ; if ( v == null ) { n . helpDelete ( b , f ) ; break ; } if ( v == n || b . value == null ) break ; b = n ; n = f ; } q = head ; } } }
public void appendToNalUnit ( byte [ ] data , int offset , int limit ) { if ( ! isFilling ) { return ; } int readLength = limit - offset ; if ( nalData . length < nalLength + readLength ) { nalData = Arrays . copyOf ( nalData , ( nalLength + readLength ) * _NUM ) ; } System . arraycopy ( data , offset , nalData , nalLength , readLength ) ; nalLength += readLength ; }
public static long sizeOfDirectory ( File directory ) { checkDirectory ( directory ) ; final File [ ] files = directory . listFiles ( ) ; if ( files == null ) { return _NUM ; } long size = _NUM ; for ( final File file : files ) { try { if ( ! isSymlink ( file ) ) { size += sizeOf ( file ) ; if ( size < _NUM ) { break ; } } } catch ( IOException ioe ) { } } return size ; }
public synchronized void panAbs ( double dx , double dy ) { damageReport ( ) ; m_transform . translate ( dx , dy ) ; try { m_itransform = m_transform . createInverse ( ) ; } catch ( Exception e ) { } }
public static void checkSerializedEquality ( Object object ) { Object object2 = serializeAndRecover ( object ) ; Assert . assertEquals ( _STR , object , object2 ) ; Assert . assertEquals ( _STR , object . hashCode ( ) , object2 . hashCode ( ) ) ; }
public String documentationReferenceGuideUrl ( ) { return properties . getProperty ( _STR ) ; }
public void onConsumeFinished ( Purchase purchase , IabResult result ) ;
public static double mean ( final List < Double > list ) { double sum = _NUM ; for ( Double number : list ) { sum += number ; } return sum / list . size ( ) ; }
public static String toHex ( byte [ ] data ) { try { return new String ( Hex . encode ( data ) , _STR ) ; } catch ( UnsupportedEncodingException e ) { } return null ; }
public In ( URL url ) { if ( url == null ) throw new NullPointerException ( _STR ) ; try { URLConnection site = url . openConnection ( ) ; InputStream is = site . getInputStream ( ) ; scanner = new Scanner ( new BufferedInputStream ( is ) , CHARSET_NAME ) ; scanner . useLocale ( LOCALE ) ; } catch ( IOException ioe ) { throw new IllegalArgumentException ( _STR + url ) ; } }
@ VisibleForTesting public void processEnableFullscreenRunnableForTest ( ) { if ( mHandler . hasMessages ( MSG_ID_ENABLE_FULLSCREEN_AFTER_LOAD ) ) { mHandler . removeMessages ( MSG_ID_ENABLE_FULLSCREEN_AFTER_LOAD ) ; enableFullscreenAfterLoad ( ) ; } }
private static String fromHtmlEntity ( String str ) { Character ch = map . get ( str ) ; return ( ch != null ) ? ch . toString ( ) : str ; }
public void write ( byte [ ] vector ) { check ( vector . length ) ; System . arraycopy ( vector , _NUM , buffer , write_pos , vector . length ) ; write_pos += vector . length ; }
public void unlockUI ( ProcessInfo pi ) { boolean notPrint = pi != null && pi . getAD_Process_ID ( ) != m_curTab . getAD_Process_ID ( ) && pi . isReportingProcess ( ) == _BOOL ; setBusy ( _BOOL , notPrint ) ; if ( notPrint ) { m_curTab . dataRefresh ( ) ; if ( pi . isTimeout ( ) ) Env . setContext ( m_ctx , m_curWindowNo , _STR , _STR ) ; m_curGC . dynamicDisplay ( _NUM ) ; setStatusLine ( pi . getSummary ( ) , pi . isError ( ) ) ; if ( pi . isError ( ) ) ADialog . error ( m_curWindowNo , this , null , pi . getSummary ( ) ) ; ProcessInfoUtil . setLogFromDB ( pi ) ; String logInfo = pi . getLogInfo ( ) ; if ( logInfo . length ( ) > _NUM ) ADialog . info ( m_curWindowNo , this , Env . getHeader ( m_ctx , m_curWindowNo ) , pi . getTitle ( ) , logInfo ) ; } else { setStatusLine ( pi . getSummary ( ) , pi . isError ( ) ) ; if ( pi . isError ( ) ) ADialog . error ( m_curWindowNo , this , null , pi . getSummary ( ) ) ; } }
private Map < URI , StorageSystem > buildArrayMap ( StorageSystem vplexSystem , List < VolumeDescriptor > descriptors , VolumeDescriptor . Type [ ] types ) { Map < URI , StorageSystem > arrayMap = new HashMap < URI , StorageSystem > ( ) ; if ( types != null ) { descriptors = VolumeDescriptor . filterByType ( descriptors , types , new VolumeDescriptor . Type [ ] { } ) ; } for ( VolumeDescriptor desc : descriptors ) { if ( arrayMap . containsKey ( desc . getDeviceURI ( ) ) == _BOOL ) { if ( vplexSystem == null ) { StorageSystem array = getDataObject ( StorageSystem . class , desc . getDeviceURI ( ) , _dbClient ) ; arrayMap . put ( desc . getDeviceURI ( ) , array ) ; } else { Set < URI > connectedSystems = ConnectivityUtil . getStorageSystemAssociationsByNetwork ( _dbClient , vplexSystem . getId ( ) , StoragePort . PortType . backend ) ; if ( connectedSystems . contains ( desc . getDeviceURI ( ) ) ) { StorageSystem array = getDataObject ( StorageSystem . class , desc . getDeviceURI ( ) , _dbClient ) ; arrayMap . put ( desc . getDeviceURI ( ) , array ) ; } } } } return arrayMap ; }
public byte [ ] encrypt ( byte [ ] plainTextAsBytes , CharSequence password ) throws KeyCrypterException { try { byte [ ] salt = new byte [ SALT_LENGTH ] ; secureRandom . nextBytes ( salt ) ; ParametersWithIV key = ( ParametersWithIV ) getAESPasswordKey ( password , salt ) ; BufferedBlockCipher cipher = new PaddedBufferedBlockCipher ( new CBCBlockCipher ( new AESFastEngine ( ) ) ) ; cipher . init ( _BOOL , key ) ; byte [ ] encryptedBytes = new byte [ cipher . getOutputSize ( plainTextAsBytes . length ) ] ; final int processLength = cipher . processBytes ( plainTextAsBytes , _NUM , plainTextAsBytes . length , encryptedBytes , _NUM ) ; final int doFinalLength = cipher . doFinal ( encryptedBytes , processLength ) ; return concat ( salt , Arrays . copyOf ( encryptedBytes , processLength + doFinalLength ) ) ; } catch ( Exception e ) { throw new KeyCrypterException ( _STR + Utils . bytesToHexString ( plainTextAsBytes ) + _STR , e ) ; } }
public final ArrayList < WifiRecord > loadWifisByBssid ( final String bssid , final Integer session ) { final ArrayList < WifiRecord > wifis = new ArrayList < > ( ) ; String selectSql ; if ( session != null ) { selectSql = Schema . COL_BSSID + _STR + bssid + _STR + Schema . COL_SESSION_ID + _STR + session + _STR ; } else { selectSql = Schema . COL_BSSID + _STR + bssid + _STR ; } final Cursor cursor = contentResolver . query ( ContentProvider . CONTENT_URI_WIFI , null , selectSql , null , null ) ; final int columnIndex = cursor . getColumnIndex ( Schema . COL_BSSID ) ; final int columnIndex2 = cursor . getColumnIndex ( Schema . COL_SSID ) ; final int columnIndex3 = cursor . getColumnIndex ( Schema . COL_CAPABILITIES ) ; final int columnIndex4 = cursor . getColumnIndex ( Schema . COL_FREQUENCY ) ; final int columnIndex5 = cursor . getColumnIndex ( Schema . COL_LEVEL ) ; final int columnIndex6 = cursor . getColumnIndex ( Schema . COL_TIMESTAMP ) ; final int columnIndex7 = cursor . getColumnIndex ( Schema . COL_BEGIN_POSITION_ID ) ; final int columnIndex8 = cursor . getColumnIndex ( Schema . COL_END_POSITION_ID ) ; final int columnIndex9 = cursor . getColumnIndex ( Schema . COL_KNOWN_WIFI ) ; while ( cursor . moveToNext ( ) ) { final WifiRecord wifi = new WifiRecord ( ) ; wifi . setBssid ( cursor . getString ( columnIndex ) ) ; wifi . setSsid ( cursor . getString ( columnIndex2 ) ) ; wifi . setCapabilities ( cursor . getString ( columnIndex3 ) ) ; wifi . setFrequency ( cursor . getInt ( columnIndex4 ) ) ; wifi . setLevel ( cursor . getInt ( columnIndex5 ) ) ; wifi . setOpenBmapTimestamp ( cursor . getLong ( columnIndex6 ) ) ; wifi . setBeginPosition ( loadPositionById ( cursor . getString ( columnIndex7 ) ) ) ; wifi . setEndPosition ( loadPositionById ( cursor . getString ( columnIndex8 ) ) ) ; wifi . setCatalogStatus ( CatalogStatus . values ( ) [ cursor . getInt ( columnIndex9 ) ] ) ; wifis . add ( wifi ) ; } cursor . close ( ) ; return wifis ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return AFTER_ID ; case _NUM : return MAX_JOBS ; default : return null ; } }
@ Override public void deinstall ( JEditorPane editor ) { super . deinstall ( editor ) ; editor . removeKeyListener ( this ) ; }
private void pullEvent ( ) { final int newScrollValue ; final int itemDimension ; final float initialMotionValue , lastMotionValue ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : initialMotionValue = mInitialMotionX ; lastMotionValue = mLastMotionX ; break ; case VERTICAL : default : initialMotionValue = mInitialMotionY ; lastMotionValue = mLastMotionY ; break ; } switch ( mCurrentMode ) { case PULL_FROM_END : newScrollValue = Math . round ( Math . max ( initialMotionValue - lastMotionValue , _NUM ) / FRICTION ) ; itemDimension = getFooterSize ( ) ; break ; case PULL_FROM_START : default : newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , _NUM ) / FRICTION ) ; itemDimension = getHeaderSize ( ) ; break ; } setHeaderScroll ( newScrollValue ) ; if ( newScrollValue != _NUM && ! isRefreshing ( ) ) { float scale = Math . abs ( newScrollValue ) / ( float ) itemDimension ; switch ( mCurrentMode ) { case PULL_FROM_END : mFooterLayout . onPull ( scale ) ; break ; case PULL_FROM_START : default : mHeaderLayout . onPull ( scale ) ; break ; } if ( mState != State . PULL_TO_REFRESH && itemDimension >= Math . abs ( newScrollValue ) ) { setState ( State . PULL_TO_REFRESH ) ; } else if ( mState == State . PULL_TO_REFRESH && itemDimension < Math . abs ( newScrollValue ) ) { setState ( State . RELEASE_TO_REFRESH ) ; } } }
public boolean isSecure ( ) { return mTlsCipher != null && ! mTlsCipher . isEmpty ( ) ; }
public void sample ( Record rec ) { totalRecs ++ ; if ( samples . size ( ) < MAX_SAMPLES ) { samples . add ( new Sample ( rec , schema ) ) ; updateNewValueInterval ( rec ) ; } else { double flip = random . nextDouble ( ) ; if ( flip < ( double ) MAX_SAMPLES / totalRecs ) { samples . set ( random . nextInt ( MAX_SAMPLES ) , new Sample ( rec , schema ) ) ; updateNewValueInterval ( rec ) ; } } }
public TenantCreateParam prepareTenantParam ( KeystoneTenant tenant ) { TenantCreateParam param = new TenantCreateParam ( CinderConstants . TENANT_NAME_PREFIX + _STR + tenant . getName ( ) , prepareUserMappings ( tenant . getId ( ) ) ) ; param . setDescription ( getProperTenantDescription ( tenant . getDescription ( ) ) ) ; return param ; }
private void forceInternalError ( ) { throw new InternalError ( _STR ) ; }
@ Override public void drawHighlight ( Graphics g , int w , int h ) { g . setColor ( Color . black ) ; FontMetrics fm = g . getFontMetrics ( ) ; int l = ( int ) ( m_x * w ) - fm . stringWidth ( m_id ) / _NUM ; int t = ( int ) ( m_y * h ) - fm . getHeight ( ) / _NUM ; g . fillRect ( l - _NUM , t - _NUM , fm . stringWidth ( m_id ) + _NUM , fm . getHeight ( ) + fm . getDescent ( ) + _NUM ) ; drawNode ( g , w , h ) ; }
public static ImageEncoder newInstance ( String format ) { ImageEncoder imageEncoder = null ; String className = ( String ) encoders . get ( format ) ; if ( className == null ) { throw new IllegalArgumentException ( _STR + format ) ; } try { Class imageEncoderClass = Class . forName ( className ) ; imageEncoder = ( ImageEncoder ) imageEncoderClass . newInstance ( ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( e . toString ( ) ) ; } return imageEncoder ; }
public static void applyPinchZoomImage ( ImageView mImageView ) { mImageView . setOnTouchListener ( new PinchZoom ( ) ) ; }
public double empiricalHSICincompleteCholesky ( TetradMatrix Gy , TetradMatrix Gx , TetradMatrix Gz , int m ) { int ky = Gy . columns ( ) ; int kx = Gx . columns ( ) ; int kz = Gz . columns ( ) ; TetradMatrix H = KernelUtils . constructH ( m ) ; TetradMatrix Gcy = H . times ( Gy ) ; TetradMatrix Gcx = H . times ( Gx ) ; TetradMatrix Gcz = H . times ( Gz ) ; TetradMatrix A = new TetradMatrix ( ky , kx ) ; TetradMatrix Gcyt = Gcy . transpose ( ) ; A = Gcyt . times ( Gcx ) ; TetradMatrix B = Gcy . times ( A ) ; TetradMatrix Kyx = new TetradMatrix ( m , m ) ; TetradMatrix Gcxt = new TetradMatrix ( kx , m ) ; Gcxt = Gcx . transpose ( ) ; Kyx = B . times ( Gcxt ) ; double empHSIC = _NUM ; double xy = _NUM ; for ( int i = _NUM ; i < m ; i ++ ) { empHSIC += matrixProductEntry ( B , Gcxt , i , i ) ; } TetradMatrix Gytz = Gcyt . times ( Gcz ) ; TetradMatrix Gczt = Gcz . transpose ( ) ; TetradMatrix Gztx = Gczt . times ( Gcx ) ; TetradMatrix Gztz = Gczt . times ( Gcz ) ; TetradMatrix Gztzr = Gztz . copy ( ) ; for ( int i = _NUM ; i < kz ; i ++ ) { Gztzr . set ( i , i , Gztz . get ( i , i ) + this . regularizer ) ; } TetradMatrix ZI = Gztzr . inverse ( ) ; TetradMatrix ZIzt = ZI . times ( Gczt ) ; TetradMatrix Gzr = Gcz . copy ( ) ; for ( int i = _NUM ; i < m ; i ++ ) { for ( int j = _NUM ; j < kz ; j ++ ) { Gzr . set ( i , j , Gcz . get ( i , j ) * ( - _NUM / this . regularizer ) ) ; } } TetradMatrix Zinv = Gzr . times ( ZIzt ) ; for ( int i = _NUM ; i < m ; i ++ ) { Zinv . set ( i , i , Zinv . get ( i , i ) + ( _NUM / this . regularizer ) ) ; } TetradMatrix Gztzinv = Gczt . times ( Zinv ) ; TetradMatrix Gzinvz = Zinv . times ( Gcz ) ; TetradMatrix Gztinv2z = Gztzinv . times ( Gzinvz ) ; TetradMatrix Gytzztzinv2z = Gytz . times ( Gztinv2z ) ; TetradMatrix Gytzztzinv2zztx = Gytzztzinv2z . times ( Gztx ) ; TetradMatrix Gyytzztzinv2zztx = Gcy . times ( Gytzztzinv2zztx ) ; double second = _NUM ; for ( int i = _NUM ; i < m ; i ++ ) { second += matrixProductEntry ( Gyytzztzinv2zztx , Gcxt , i , i ) ; } empHSIC -= _NUM * second ; TetradMatrix Gxtz = Gcxt . times ( Gcz ) ; TetradMatrix Gxtzztinv2z = Gxtz . times ( Gztinv2z ) ; TetradMatrix Gyytzztzinv2zztxxtzztinv2z = Gyytzztzinv2zztx . times ( Gxtzztinv2z ) ; for ( int i = _NUM ; i < m ; i ++ ) { empHSIC += matrixProductEntry ( Gyytzztzinv2zztxxtzztinv2z , Gczt , i , i ) ; } double betaz = _NUM ; for ( int i = _NUM ; i < ( m - _NUM ) ; i ++ ) { for ( int j = ( i + _NUM ) ; j < m ; j ++ ) { betaz += Math . pow ( matrixProductEntry ( Gcz , Gczt , i , j ) , _NUM ) ; betaz += Math . pow ( matrixProductEntry ( Gcz , Gczt , j , i ) , _NUM ) ; } } empHSIC *= ( m / ( betaz * ( m - _NUM ) ) ) ; return empHSIC ; }
public static File parse ( String [ ] options , String option , File defValue ) throws Exception { String value = Utils . getOption ( option , options ) ; if ( value . isEmpty ( ) ) return defValue ; else return new File ( value ) ; }
public boolean isAcctBalanced ( ) { if ( m_lines . size ( ) == _NUM ) return _BOOL ; BigDecimal balance = getAcctBalance ( ) ; boolean retValue = balance . signum ( ) == _NUM ; if ( retValue ) log . finer ( toString ( ) ) ; else log . warning ( _STR + balance + _STR + toString ( ) ) ; return retValue ; }
public void ensureCapacity ( int minCapacity ) { int oldCapacity = capacity ; if ( minCapacity > oldCapacity ) { int newCapacity = ( oldCapacity * _NUM ) / _NUM + _NUM ; if ( newCapacity < minCapacity ) newCapacity = minCapacity ; BitVector vector = toBitVector ( ) ; vector . setSize ( newCapacity * bitsPerElement ) ; this . bits = vector . elements ( ) ; this . capacity = newCapacity ; } }
private String detailBase ( final Method method ) { final Class < ? > clazz = method . getDeclaringClass ( ) ; final String detailBase = MessageUtils . bundleNameForClass ( clazz ) ; if ( isBlank ( detailBase ) ) { throw new IllegalStateException ( _STR + clazz ) ; } return detailBase ; }
public void finished ( ) throws IOException { outputStream . close ( ) ; }
public final void lock ( ) { SunToolkit . awtLock ( ) ; }
@ Override public Object createStatement ( Object proxy , Method method , Object [ ] args , Object statement , long time ) { try { Object result = null ; String name = method . getName ( ) ; String sql = null ; Constructor < ? > constructor = null ; if ( compare ( CREATE_STATEMENT , name ) ) { constructor = getConstructor ( CREATE_STATEMENT_IDX , Statement . class ) ; } else if ( compare ( PREPARE_STATEMENT , name ) ) { sql = ( String ) args [ _NUM ] ; constructor = getConstructor ( PREPARE_STATEMENT_IDX , PreparedStatement . class ) ; if ( sql != null ) { prepareStatement ( sql , time ) ; } } else if ( compare ( PREPARE_CALL , name ) ) { sql = ( String ) args [ _NUM ] ; constructor = getConstructor ( PREPARE_CALL_IDX , CallableStatement . class ) ; prepareCall ( sql , time ) ; } else { return statement ; } result = constructor . newInstance ( new Object [ ] { new StatementProxy ( statement , sql ) } ) ; return result ; } catch ( Exception x ) { log . warn ( _STR , x ) ; } return statement ; }
public UpdateResponse remove ( long id ) throws IOException , SolrServerException { UpdateResponse res = solrClient . deleteById ( String . valueOf ( id ) ) ; solrClient . commit ( _BOOL , _BOOL , _BOOL ) ; return res ; }
public void switchSetup ( ) { int retVal ; retVal = m_SetupFileChooser . showOpenDialog ( this ) ; if ( retVal != JFileChooser . APPROVE_OPTION ) { return ; } m_DbUtils . initialize ( m_SetupFileChooser . getSelectedFile ( ) ) ; m_URL = m_DbUtils . getDatabaseURL ( ) ; m_User = m_DbUtils . getUsername ( ) ; m_Password = m_DbUtils . getPassword ( ) ; m_TextURL . setText ( m_URL ) ; }
private ClientDetailsEntity loadClientObject ( final OIDCAuthorizationRequestContext authorizationRequest ) { log . debug ( _STR , authorizationRequest . getClientId ( ) ) ; return clientService . loadClientByClientId ( authorizationRequest . getClientId ( ) ) ; }
public void addFieldProperty ( String name , String accessorField ) { fieldProperties . add ( new LegacyFieldPropDesc ( name , accessorField ) ) ; }
private void parseNoWildCards ( ) { this . fSegments = new String [ _NUM ] ; this . fSegments [ _NUM ] = this . fPattern ; this . fBound = this . fLength ; }
public Map < String , String > environment ( ) { String base64 = toStringBase64 ( ) ; if ( base64 == null || base64 . length ( ) == _NUM ) { return Collections . emptyMap ( ) ; } Map < String , String > environment = Maps . newHashMap ( ) ; environment . put ( BaggageUtils . BAGGAGE_ENVIRONMENT_VARIABLE , base64 ) ; return environment ; }
@ Override public void drawSeries ( Canvas canvas , Paint paint , List < Float > points , List < Double > values , XYSeriesRenderer seriesRenderer , SupportSeriesRender supportSeriesRender , float yAxisValue , int seriesIndex , int startIndex ) { int seriesNr = mDataset . getSeriesCount ( ) ; int length = points . size ( ) ; paint . setColor ( seriesRenderer . getColor ( ) ) ; paint . setStyle ( Style . FILL ) ; float halfDiffX = getHalfDiffX ( points , length , seriesNr ) ; for ( int i = _NUM ; i < length ; i += _NUM ) { float x = points . get ( i ) ; float y = points . get ( i + _NUM ) ; drawBar ( canvas , x , yAxisValue , x , y , halfDiffX , seriesNr , seriesIndex , paint ) ; } paint . setColor ( seriesRenderer . getColor ( ) ) ; }
public void listenModLog ( String username , String token ) { if ( ! hasServer ( ) ) { return ; } if ( modLogListen . containsKey ( username ) ) { return ; } this . token = token ; long userId = getUserId ( username ) ; modLogListen . put ( username , userId ) ; LOGGER . info ( _STR + username + _STR + userId ) ; if ( userId != - _NUM ) { sendListenModLog ( userId , _BOOL ) ; } }
public static boolean isValidClassName ( String className ) { if ( className . indexOf ( _STR ) >= _NUM ) { return _BOOL ; } return _BOOL ; }
@ SuppressWarnings ( _STR ) public void newMinute ( ) { if ( ! inSyncWithInternalFastClock ) { return ; } if ( correctFastClock || synchronizeWithInternalClock ) { Date now = clock . getTime ( ) ; if ( now . getMinutes ( ) != _NUM ) { curDays = now . getDate ( ) ; curHours = now . getHours ( ) ; curMinutes = now . getMinutes ( ) ; long millis = now . getTime ( ) ; long elapsedMS = millis % MSECPERMINUTE ; double frac_min = elapsedMS / ( double ) MSECPERMINUTE ; curFractionalMinutes = ( int ) CORRECTION - ( int ) ( CORRECTION * frac_min ) ; setClock ( ) ; } } else if ( setInternal && ! correctFastClock && ! synchronizeWithInternalClock ) { inSyncWithInternalFastClock = _BOOL ; initiateRead ( ) ; } }
private < T extends DiscoveredSystemObject > boolean isDataCollectionScanJobSchedulingNeeded ( long lastScanTime , boolean inProgress ) { long systemTime = System . currentTimeMillis ( ) ; long refreshInterval = getRefreshInterval ( ControllerServiceImpl . SCANNER ) ; if ( inProgress ) { return _BOOL ; } if ( lastScanTime > _NUM && ( systemTime - lastScanTime < refreshInterval * _NUM ) ) { _logger . info ( _STR ) ; return _BOOL ; } return _BOOL ; }
private void removeBreakpoints ( final Set < BreakpointAddress > breakpointAddressSet , final BreakpointStorage storage ) { if ( breakpointAddressSet . size ( ) != _NUM ) { final Set < Breakpoint > breakpoints = storage . getBreakPointsByAddress ( breakpointAddressSet ) ; storage . removeBreakpoints ( breakpointAddressSet ) ; for ( final BreakpointManagerListener listener : listeners ) { try { listener . breakpointsRemoved ( breakpoints ) ; } catch ( final Exception e ) { CUtilityFunctions . logException ( e ) ; } } } }
public void replaceCreationTemplate ( Guid guid , String templateName , AttrSet attrSet ) throws ConfigManagerException { if ( guid == null ) { guid = new Guid ( _rootDN ) ; } DN dn = DN . valueOf ( guid . getDn ( ) ) ; String org = _STR ; List < RDN > rdns = new ArrayList < > ( ) ; for ( RDN rdn : dn ) { rdns . add ( _NUM , rdn ) ; } for ( RDN rdn : rdns ) { org = org + _STR + LDAPUtils . rdnValue ( rdn ) ; } String service = CREATIONPATH + _STR + templateName ; Map map = convertToMap ( attrSet ) ; try { replaceServiceAttributes ( org , service , map ) ; } catch ( SMSException e ) { String args [ ] = new String [ _NUM ] ; args [ _NUM ] = e . toString ( ) ; throw new ConfigManagerException ( i18n . getString ( IUMSConstants . ERROR_CM , args ) ) ; } catch ( SSOException se ) { String args [ ] = new String [ _NUM ] ; args [ _NUM ] = se . toString ( ) ; throw new ConfigManagerException ( i18n . getString ( IUMSConstants . ERROR_CM , args ) ) ; } }
private void readObject ( ObjectInputStream stream ) throws IOException , ClassNotFoundException { stream . defaultReadObject ( ) ; MarshalledInstance mi = ( MarshalledInstance ) stream . readObject ( ) ; try { listener = ( RemoteEventListener ) mi . get ( _BOOL ) ; } catch ( Throwable e ) { if ( e instanceof Error && ThrowableConstants . retryable ( e ) == ThrowableConstants . BAD_OBJECT ) { throw ( Error ) e ; } logger . log ( Level . WARNING , _STR , e ) ; } }
public void add ( T item ) { if ( set . add ( item ) ) { fireContentsChanged ( this , _NUM , getSize ( ) - _NUM ) ; } }
private String byteArrayToHexString ( byte [ ] bytes ) { StringBuilder sb = new StringBuilder ( bytes . length * _NUM ) ; for ( byte element : bytes ) { int v = element & _NUM ; if ( v < _NUM ) { sb . append ( _STR ) ; } sb . append ( Integer . toHexString ( v ) ) ; } return sb . toString ( ) ; }
public ScServer createClusterServer ( String ssn , String clusterName , String osId ) throws StorageCenterAPIException { Parameters params = new Parameters ( ) ; params . add ( _STR , clusterName ) ; params . add ( _STR , ssn ) ; params . add ( _STR , NOTES_STRING ) ; params . add ( _STR , osId ) ; RestResult rr = restClient . post ( _STR , params . toJson ( ) ) ; if ( ! checkResults ( rr ) ) { String error = String . format ( _STR , clusterName , rr . getErrorMsg ( ) ) ; throw new StorageCenterAPIException ( error ) ; } return gson . fromJson ( rr . getResult ( ) , ScServer . class ) ; }
public void testConstructorSignBytesPositive4 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , - _NUM } ; int aSign = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , aNumber . signum ( ) ) ; }
public void testMinimalCompletionStage ( ) { CompletableFuture < Integer > f = new CompletableFuture < > ( ) ; CompletionStage < Integer > g = f . minimalCompletionStage ( ) ; AtomicInteger x = new AtomicInteger ( _NUM ) ; AtomicReference < Throwable > r = new AtomicReference < Throwable > ( ) ; checkIncomplete ( f ) ; g . whenComplete ( null ) ; f . complete ( _NUM ) ; checkCompletedNormally ( f , _NUM ) ; assertEquals ( x . get ( ) , _NUM ) ; assertNull ( r . get ( ) ) ; }
private void writeDirectoryPostResource ( Element postResourceEl , String path ) { postResourceEl . setAttribute ( _STR , DIR_RESOURCE_SET ) ; postResourceEl . setAttribute ( _STR , path . replace ( _STR , _STR ) ) ; }
private static int [ ] trimArray ( int [ ] array , int size ) { if ( size < _NUM ) { throw new IllegalArgumentException ( ) ; } if ( size == _NUM ) { return NO_ERRORS ; } int [ ] a = new int [ size ] ; System . arraycopy ( array , _NUM , a , _NUM , size ) ; return a ; }
static PotionType fromName ( String name ) { for ( PotionTypeTable table : values ( ) ) { if ( name . equalsIgnoreCase ( table . name ) ) return table . type ; } return PotionType . valueOf ( name . toUpperCase ( ) ) ; }
public synchronized void removeCurlMesh ( CurlMesh mesh ) { while ( mCurlMeshes . remove ( mesh ) ) ; }
private List < Datum > sampleNbestList ( int sourceId , Sequence < IString > source , SentenceLevelMetric < IString , String > scoreMetric , List < RichTranslation < IString , String > > translations , List < Sequence < IString > > references ) { int [ ] sourceIds = new int [ _NUM ] ; sourceIds [ _NUM ] = sourceId ; List < Sequence < IString > > sources = new ArrayList < > ( _NUM ) ; sources . add ( source ) ; List < List < RichTranslation < IString , String > > > translationList = new ArrayList < List < RichTranslation < IString , String > > > ( _NUM ) ; translationList . add ( translations ) ; List < List < Sequence < IString > > > referenceList = new ArrayList < List < Sequence < IString > > > ( _NUM ) ; referenceList . add ( references ) ; return sampleNbestLists ( sourceIds , sources , scoreMetric , translationList , referenceList ) ; }
protected void postRunnable ( Runnable runnable ) { if ( runnable != null ) { handler . post ( runnable ) ; } }
public boolean isClosed ( ) { return map . isClosed ( ) ; }
public void insertThinkTime ( ) { ScriptStep thinkTimeScriptStep = ScriptStepFactory . createThinkTime ( getMinThinkTime ( ) , getMaxThinkTime ( ) ) ; steps . add ( getInsertIndex ( ) , thinkTimeScriptStep ) ; minThinkTime = _STR ; maxThinkTime = _STR ; reindexScriptSteps ( ) ; }
public static boolean copyStream ( InputStream is , OutputStream os , CopyListener listener , int bufferSize ) throws IOException { int current = _NUM ; int total = is . available ( ) ; if ( total <= _NUM ) { total = DEFAULT_IMAGE_TOTAL_SIZE ; } final byte [ ] bytes = new byte [ bufferSize ] ; int count ; if ( shouldStopLoading ( listener , current , total ) ) return _BOOL ; while ( ( count = is . read ( bytes , _NUM , bufferSize ) ) != - _NUM ) { os . write ( bytes , _NUM , count ) ; current += count ; if ( shouldStopLoading ( listener , current , total ) ) return _BOOL ; } os . flush ( ) ; return _BOOL ; }
public void addNode ( final Instruction instruction ) { instructions . add ( instruction ) ; if ( prevInstruction != null ) { addEdge ( prevInstruction , instruction ) ; } prevInstruction = instruction ; }
public void ensureCapacity ( int minimumCapacity ) { if ( minimumCapacity <= _capacity ) return ; if ( minimumCapacity > _NUM ) { _capacity = ( minimumCapacity + _NUM ) & ~ _NUM ; } else { while ( _capacity < minimumCapacity ) { _capacity += _capacity ; } } byte [ ] bytes = new byte [ _capacity ] ; System . arraycopy ( _buffer , _NUM , bytes , _NUM , _length ) ; _buffer = bytes ; }
public Builder removeName ( final String name ) { names . remove ( name ) ; return this ; }
public < T > JSONAPIDocument < List < T > > readDocumentCollection ( InputStream dataStream , Class < T > clazz ) { try { resourceCache . init ( ) ; JsonNode rootNode = objectMapper . readTree ( dataStream ) ; ValidationUtils . ensureNotError ( objectMapper , rootNode ) ; ValidationUtils . ensureCollection ( rootNode ) ; resourceCache . cache ( parseIncluded ( rootNode ) ) ; List < T > resourceList = new ArrayList < > ( ) ; for ( JsonNode element : rootNode . get ( DATA ) ) { T pojo = readObject ( element , clazz , _BOOL ) ; resourceList . add ( pojo ) ; } JSONAPIDocument < List < T > > result = new JSONAPIDocument < > ( resourceList , objectMapper ) ; if ( rootNode . has ( META ) ) { result . setMeta ( mapMeta ( rootNode . get ( META ) ) ) ; } if ( rootNode . has ( LINKS ) ) { result . setLinks ( new Links ( mapLinks ( rootNode . get ( LINKS ) ) ) ) ; } return result ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } finally { resourceCache . clear ( ) ; } }
public void addTargetedBySwarm ( int entityId , int weaponId ) { hitBySwarmsEntity . addElement ( new Integer ( entityId ) ) ; hitBySwarmsWeapon . addElement ( new Integer ( weaponId ) ) ; }
private boolean isCheckpointExists ( Connection conn , String key ) throws SQLException { PreparedStatement st = null ; ResultSet rs = null ; try { st = conn . prepareStatement ( chkExistsSql ) ; st . setString ( _NUM , key ) ; rs = st . executeQuery ( ) ; return rs . next ( ) ; } finally { U . close ( rs , log ) ; U . close ( st , log ) ; } }
public OMScalingRaster ( double ullat , double ullon , double lrlat , double lrlon , ImageIcon ii ) { this ( ullat , ullon , lrlat , lrlon , ii . getImage ( ) ) ; }
private static ResultPoint [ ] findVertices ( BitMatrix matrix , boolean tryHarder ) { int height = matrix . getHeight ( ) ; int width = matrix . getWidth ( ) ; ResultPoint [ ] result = new ResultPoint [ _NUM ] ; boolean found = _BOOL ; int [ ] counters = new int [ START_PATTERN . length ] ; int rowStep = Math . max ( _NUM , height > > ( tryHarder ? _NUM : _NUM ) ) ; for ( int i = _NUM ; i < height ; i += rowStep ) { int [ ] loc = findGuardPattern ( matrix , _NUM , i , width , _BOOL , START_PATTERN , counters ) ; if ( loc != null ) { result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; found = _BOOL ; break ; } } if ( found ) { found = _BOOL ; for ( int i = height - _NUM ; i > _NUM ; i -= rowStep ) { int [ ] loc = findGuardPattern ( matrix , _NUM , i , width , _BOOL , START_PATTERN , counters ) ; if ( loc != null ) { result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; found = _BOOL ; break ; } } } counters = new int [ STOP_PATTERN . length ] ; if ( found ) { found = _BOOL ; for ( int i = _NUM ; i < height ; i += rowStep ) { int [ ] loc = findGuardPattern ( matrix , _NUM , i , width , _BOOL , STOP_PATTERN , counters ) ; if ( loc != null ) { result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; found = _BOOL ; break ; } } } if ( found ) { found = _BOOL ; for ( int i = height - _NUM ; i > _NUM ; i -= rowStep ) { int [ ] loc = findGuardPattern ( matrix , _NUM , i , width , _BOOL , STOP_PATTERN , counters ) ; if ( loc != null ) { result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; found = _BOOL ; break ; } } } return found ? result : null ; }
public static void copyStream ( InputStream is , OutputStream os , byte [ ] buffer , int bufferSize , String confid , double fileSize , Context context ) throws IOException { double downloaded = _NUM ; int [ ] update = new int [ _NUM ] ; try { for ( ; ; ) { int count = is . read ( buffer , _NUM , bufferSize ) ; downloaded += count ; if ( count == - _NUM ) { if ( context != null ) { } break ; } os . write ( buffer , _NUM , count ) ; if ( context != null ) { update [ _NUM ] = ( int ) downloaded ; update [ _NUM ] = ( int ) fileSize ; update [ _NUM ] = ( int ) ( ( downloaded / fileSize ) * _NUM ) ; } } } catch ( IOException e ) { throw e ; } }
@ Override public void writeHeader ( ) throws IOException { os = new PDFWriter ( new BufferedOutputStream ( ros ) , PDF_VERSION ) ; delayImageQueue = new PDFImageDelayQueue ( os ) ; delayPaintQueue = new PDFPaintDelayQueue ( os , delayImageQueue ) ; fontTable = new PDFFontTable ( os ) ; PDFDocInfo info = os . openDocInfo ( _STR ) ; info . setTitle ( getProperty ( TITLE ) ) ; info . setAuthor ( getProperty ( AUTHOR ) ) ; info . setSubject ( getProperty ( SUBJECT ) ) ; info . setKeywords ( getProperty ( KEYWORDS ) ) ; info . setCreator ( getCreator ( ) ) ; info . setProducer ( producer == null ? _STR : producer ) ; if ( ! isDeviceIndependent ( ) ) { Calendar now = Calendar . getInstance ( ) ; info . setCreationDate ( now ) ; info . setModificationDate ( now ) ; } info . setTrapped ( _STR ) ; os . close ( info ) ; PDFCatalog catalog = os . openCatalog ( _STR , _STR ) ; catalog . setOutlines ( _STR ) ; catalog . setPageMode ( _STR ) ; catalog . setViewerPreferences ( _STR ) ; catalog . setOpenAction ( new Object [ ] { os . ref ( _STR ) , os . name ( _STR ) } ) ; os . close ( catalog ) ; PDFViewerPreferences prefs = os . openViewerPreferences ( _STR ) ; prefs . setFitWindow ( _BOOL ) ; prefs . setCenterWindow ( _BOOL ) ; os . close ( prefs ) ; alphaIndex = _NUM ; extGStates = new HashMap < Float , String > ( ) ; if ( ! isMultiPage ( ) ) { openPage ( getSize ( ) , null ) ; } }
protected String parseString ( int closingCharacter ) throws IOException , RDFParseException { StringBuilder sb = getBuilder ( ) ; while ( _BOOL ) { int c = readCodePoint ( ) ; if ( c == closingCharacter ) { break ; } else if ( c == - _NUM ) { throwEOFException ( ) ; } appendCodepoint ( sb , c ) ; if ( c == _STR ) { c = readCodePoint ( ) ; if ( c == - _NUM ) { throwEOFException ( ) ; } appendCodepoint ( sb , c ) ; } } return sb . toString ( ) ; }
private void codeUnwrapReturnValue ( Class < ? > type , DataOutputStream out ) throws IOException { if ( type . isPrimitive ( ) ) { PrimitiveTypeInfo prim = PrimitiveTypeInfo . get ( type ) ; out . writeByte ( opc_checkcast ) ; out . writeShort ( cp . getClass ( prim . wrapperClassName ) ) ; out . writeByte ( opc_invokevirtual ) ; out . writeShort ( cp . getMethodRef ( prim . wrapperClassName , prim . unwrapMethodName , prim . unwrapMethodDesc ) ) ; if ( type == int . class || type == boolean . class || type == byte . class || type == char . class || type == short . class ) { out . writeByte ( opc_ireturn ) ; } else if ( type == long . class ) { out . writeByte ( opc_lreturn ) ; } else if ( type == float . class ) { out . writeByte ( opc_freturn ) ; } else if ( type == double . class ) { out . writeByte ( opc_dreturn ) ; } else { throw new AssertionError ( ) ; } } else { out . writeByte ( opc_checkcast ) ; out . writeShort ( cp . getClass ( dotToSlash ( type . getName ( ) ) ) ) ; out . writeByte ( opc_areturn ) ; } }
private String formatLink ( String [ ] parts ) { String anchor , text ; if ( parts . length < _NUM ) { anchor = _STR ; text = _STR ; } else { anchor = parts [ _NUM ] ; text = parts [ _NUM ] ; } return String . format ( _STR , anchor , text ) ; }
public JSONException ( Throwable cause ) { super ( cause . getMessage ( ) ) ; this . cause = cause ; }
public boolean fixUtils ( String [ ] utils ) throws Exception { for ( String util : utils ) { if ( ! checkUtil ( util ) ) { if ( checkUtil ( _STR ) ) { if ( hasUtil ( util , _STR ) ) { fixUtil ( util , RootTools . utilPath ) ; } } else { if ( checkUtil ( _STR ) ) { if ( hasUtil ( util , _STR ) ) { fixUtil ( util , RootTools . utilPath ) ; } } else { return _BOOL ; } } } } return _BOOL ; }
@ Override protected void initialize ( ) { List < String > patterns ; super . initialize ( ) ; m_Patterns = new ArrayList < Pattern > ( ) ; patterns = read ( ) ; for ( String pattern : patterns ) { m_Patterns . add ( Pattern . compile ( pattern ) ) ; } }
public static String [ ] lsDirectories ( String directory ) throws Exception { String [ ] tmp = ls ( directory ) ; ArrayList < String > files = new ArrayList < > ( ) ; for ( String s : tmp ) { if ( isDirectory ( directory + File . separator + s ) ) files . add ( s ) ; } return files . toArray ( new String [ files . size ( ) ] ) ; }
private void toStringWithChildren ( StringBuffer buffer , int indent ) { internalToString ( buffer , indent ) ; if ( fChildren != null ) { for ( Iterator < TextEdit > iterator = fChildren . iterator ( ) ; iterator . hasNext ( ) ; ) { TextEdit child = iterator . next ( ) ; buffer . append ( _STR ) ; child . toStringWithChildren ( buffer , indent + _NUM ) ; } } }
public static void encode ( Appendable out , int value ) throws IOException { value = toVLQSigned ( value ) ; do { int digit = value & VLQ_BASE_MASK ; value >>>= VLQ_BASE_SHIFT ; if ( value > _NUM ) { digit |= VLQ_CONTINUATION_BIT ; } out . append ( Base64 . toBase64 ( digit ) ) ; } while ( value > _NUM ) ; }
public mxICellOverlay removeCellOverlay ( Object cell , mxICellOverlay overlay ) { if ( overlay == null ) { removeCellOverlays ( cell ) ; } else { mxICellOverlay [ ] arr = getCellOverlays ( cell ) ; if ( arr != null ) { List < mxICellOverlay > list = Arrays . asList ( arr ) ; if ( list . remove ( overlay ) ) { removeCellOverlayComponent ( overlay , cell ) ; } arr = ( mxICellOverlay [ ] ) list . toArray ( ) ; overlays . put ( cell , arr ) ; } } return overlay ; }
public void removeForeignKey ( int idx ) { foreignKeys . remove ( idx ) ; }
public java . lang . StringBuffer insert ( int offset , int i ) { internal . insert ( offset , i ) ; return this ; }
public void addGefaehrdungsUmsetzung ( GefaehrdungsUmsetzung gefaehrdung ) { if ( ! allGefaehrdungsUmsetzungen . contains ( gefaehrdung ) ) { allGefaehrdungsUmsetzungen . add ( gefaehrdung ) ; } }
String normalizeClassPath ( String classPath , boolean generateRelative ) { char sep = CauchoUtil . getPathSeparatorChar ( ) ; int head = _NUM ; int tail = _NUM ; CharBuffer cb = CharBuffer . allocate ( ) ; while ( head < classPath . length ( ) ) { tail = classPath . indexOf ( sep , head ) ; if ( tail < _NUM ) tail = classPath . length ( ) ; if ( tail > head ) { String segment = classPath . substring ( head , tail ) ; segment = normalizePath ( segment , generateRelative ) ; if ( segment != null ) { if ( cb . length ( ) != _NUM ) cb . append ( sep ) ; cb . append ( segment ) ; } } head = tail + _NUM ; } return cb . close ( ) ; }
protected ASN1Sequence ( ASN1Encodable obj ) { seq . addElement ( obj ) ; }
public static double pow ( final double x , final double y ) { if ( y == _NUM ) { return _NUM ; } else { final long yBits = Double . doubleToRawLongBits ( y ) ; final int yRawExp = ( int ) ( ( yBits & MASK_DOUBLE_EXPONENT ) > > _NUM ) ; final long yRawMantissa = yBits & MASK_DOUBLE_MANTISSA ; final long xBits = Double . doubleToRawLongBits ( x ) ; final int xRawExp = ( int ) ( ( xBits & MASK_DOUBLE_EXPONENT ) > > _NUM ) ; final long xRawMantissa = xBits & MASK_DOUBLE_MANTISSA ; if ( yRawExp > _NUM ) { if ( ( yRawExp == _NUM && yRawMantissa != _NUM ) || ( xRawExp == _NUM && xRawMantissa != _NUM ) ) { return Double . NaN ; } else if ( xRawExp == _NUM && xRawMantissa == _NUM ) { if ( yRawExp == _NUM ) { return Double . NaN ; } else { return _NUM ; } } else { if ( ( y > _NUM ) ^ ( xRawExp < _NUM ) ) { return Double . POSITIVE_INFINITY ; } else { return + _NUM ; } } } else { if ( yRawExp >= _NUM ) { final long yFullMantissa = IMPLICIT_HIGH_BIT | yRawMantissa ; if ( yRawExp < _NUM ) { final long integralMask = ( - _NUM ) << ( _NUM - yRawExp ) ; if ( ( yFullMantissa & integralMask ) == yFullMantissa ) { final long l = yFullMantissa > > ( _NUM - yRawExp ) ; return FastMath . pow ( x , ( y < _NUM ) ? - l : l ) ; } } else { final long l = yFullMantissa << ( yRawExp - _NUM ) ; return FastMath . pow ( x , ( y < _NUM ) ? - l : l ) ; } } if ( x == _NUM ) { return y < _NUM ? Double . POSITIVE_INFINITY : + _NUM ; } else if ( xRawExp == _NUM ) { if ( xRawMantissa == _NUM ) { return ( y < _NUM ) ? + _NUM : Double . POSITIVE_INFINITY ; } else { return Double . NaN ; } } else if ( x < _NUM ) { return Double . NaN ; } else { final double tmp = y * HEX_40000000 ; final double ya = ( y + tmp ) - tmp ; final double yb = y - ya ; final double lns [ ] = new double [ _NUM ] ; final double lores = log ( x , lns ) ; if ( Double . isInfinite ( lores ) ) { return lores ; } double lna = lns [ _NUM ] ; double lnb = lns [ _NUM ] ; final double tmp1 = lna * HEX_40000000 ; final double tmp2 = ( lna + tmp1 ) - tmp1 ; lnb += lna - tmp2 ; lna = tmp2 ; final double aa = lna * ya ; final double ab = lna * yb + lnb * ya + lnb * yb ; lna = aa + ab ; lnb = - ( lna - aa - ab ) ; double z = _NUM / _NUM ; z = z * lnb + ( _NUM / _NUM ) ; z = z * lnb + ( _NUM / _NUM ) ; z = z * lnb + _NUM ; z = z * lnb + _NUM ; z *= lnb ; final double result = exp ( lna , z , null ) ; return result ; } } } }
public final void push ( int value ) { int ff = m_firstFree ; if ( ( ff + _NUM ) >= m_mapSize ) { if ( null == m_map ) { m_map = new int [ m_blocksize ] ; m_mapSize = m_blocksize ; } else { m_mapSize += m_blocksize ; int newMap [ ] = new int [ m_mapSize ] ; System . arraycopy ( m_map , _NUM , newMap , _NUM , ff + _NUM ) ; m_map = newMap ; } } m_map [ ff ] = value ; ff ++ ; m_firstFree = ff ; }
protected Node stringConversion ( Node node ) { TypeElement stringElement = elements . getTypeElement ( _STR ) ; if ( ! TypesUtils . isString ( node . getType ( ) ) ) { Node converted = new StringConversionNode ( node . getTree ( ) , node , stringElement . asType ( ) ) ; addToConvertedLookupMap ( converted ) ; insertNodeAfter ( converted , node ) ; return converted ; } else { return node ; } }
@ KnownFailure ( _STR ) public void testUpdate7 ( ) throws SQLException { DatabaseCreator . fillFKStrictTable ( conn ) ; statement . executeUpdate ( _STR + DatabaseCreator . FKSTRICT_TABLE + _STR + DatabaseCreator . PARENT_TABLE + _STR ) ; ResultSet r = statement . executeQuery ( _STR + DatabaseCreator . FKSTRICT_TABLE + _STR ) ; r . next ( ) ; assertEquals ( _STR , _NUM , r . getInt ( _NUM ) ) ; r . close ( ) ; }
CompletableFuture < HistoryReadResponse > historyRead ( HistoryReadDetails historyReadDetails , TimestampsToReturn timestampsToReturn , boolean releaseContinuationPoints , List < HistoryReadValueId > nodesToRead ) ;
private void validate ( ) throws URISyntaxException { String s = getScheme ( ) ; if ( ( s != null ) && ( s . compareTo ( _STR ) == _NUM ) ) { return ; } if ( getLocalVmId ( ) == - _NUM ) { throw new URISyntaxException ( uri . toString ( ) , _STR ) ; } }
public synchronized void finishWriting ( ) { doneWriting = _BOOL ; notifyAll ( ) ; }
private long offset2PhysicalAddress ( final long offset ) { return offset + headerSize ; }
@ Override public void internalEntityDecl ( String name , XMLString text , XMLString nonNormalizedText , Augmentations augs ) throws XNIException { try { if ( fDeclHandler != null ) { fDeclHandler . internalEntityDecl ( name , text . toString ( ) ) ; } } catch ( SAXException e ) { throw new XNIException ( e ) ; } }
public static boolean isAuthorized ( String logName , String operation , Object credential ) { return authorizer . isAuthorized ( logName , operation , credential ) ; }
public Object next ( ) { if ( pos < size ) return Array . get ( array , pos ++ ) ; throw new NoSuchElementException ( _STR + pos + _STR + size ) ; }
public void addMessages ( List < ? extends Message > messages ) { if ( SHOW_LOGS ) Logger . v ( TAG , _STR + messages ) ; mQueueLock . lock ( TAG ) ; mPlayerMessagesQueue . addAll ( messages ) ; mQueueLock . notify ( TAG ) ; if ( SHOW_LOGS ) Logger . v ( TAG , _STR + messages ) ; mQueueLock . unlock ( TAG ) ; }
public PermissionRequestObject onRational ( Func3 rationalFunc ) { mRationalFunc = rationalFunc ; return this ; }
public GenericPrincipal ( String userName , String password , List < String > roles , Map < String , List < GenericPrincipal . Attribute > > writeEntries , Map < String , List < GenericPrincipal . Attribute > > readEntries , Map < String , List < GenericPrincipal . Attribute > > executeTasks ) { this . userName = userName ; this . password = password ; this . writeEntries = writeEntries ; this . readEntries = readEntries ; this . executeTasks = executeTasks ; if ( roles != null ) { this . roles = new String [ roles . size ( ) ] ; this . roles = roles . toArray ( this . roles ) ; if ( this . roles . length > _NUM ) Arrays . sort ( this . roles ) ; } writeMatchObjects = new HashMap < String , MatchObject > ( ) ; readMatchObjects = new HashMap < String , MatchObject > ( ) ; executeMatchObjects = new HashMap < String , MatchObject > ( ) ; userDefinedRoles = new ArrayList < String > ( ) ; }
public boolean equals ( Object other ) { if ( other == this ) { return _BOOL ; } if ( ! ( other instanceof X509CRLEntry ) ) { return _BOOL ; } X509CRLEntry obj = ( X509CRLEntry ) other ; try { return Arrays . equals ( getEncoded ( ) , obj . getEncoded ( ) ) ; } catch ( CRLException e ) { return _BOOL ; } }
public static int roll1D6 ( ) { return rand . nextInt ( _NUM ) + _NUM ; }
static byte [ ] septetStream2octetStream ( byte [ ] septets ) { int octetLength = ( int ) Math . ceil ( ( ( septets . length * _NUM ) ) / _NUM ) ; byte [ ] octets = new byte [ octetLength ] ; for ( int i = _NUM ; i < septets . length ; i ++ ) { for ( int j = _NUM ; j < _NUM ; j ++ ) { if ( ( septets [ i ] & ( _NUM << j ) ) != _NUM ) { int bitIndex = ( i * _NUM ) + j ; octets [ bitIndex > > > _NUM ] |= _NUM << ( bitIndex & _NUM ) ; } } } return octets ; }
public CTaggingPanel ( final JFrame parent , final ZyGraph graph , final ITagManager manager ) { super ( new BorderLayout ( ) ) ; m_tagsTree = new CTagsTree ( parent , graph , manager ) ; final JScrollPane pane = new JScrollPane ( m_tagsTree ) ; pane . setVerticalScrollBarPolicy ( ScrollPaneConstants . VERTICAL_SCROLLBAR_AS_NEEDED ) ; pane . setHorizontalScrollBarPolicy ( ScrollPaneConstants . HORIZONTAL_SCROLLBAR_AS_NEEDED ) ; add ( pane ) ; setBorder ( new TitledBorder ( new LineBorder ( Color . LIGHT_GRAY , _NUM , _BOOL ) , _STR ) ) ; setDoubleBuffered ( _BOOL ) ; }
@ Override public double height ( final int markerIndex ) { MathUtils . checkRangeInclusive ( markerIndex , _NUM , markerArray . length - _NUM ) ; return markerArray [ markerIndex ] . markerHeight ; }
public < K , V > void consume ( String groupId , String clientId , OffsetResetStrategy autoOffsetReset , Deserializer < K > keyDeserializer , Deserializer < V > valueDeserializer , BooleanSupplier continuation , OffsetCommitCallback offsetCommitCallback , Runnable completion , Collection < String > topics , java . util . function . Consumer < ConsumerRecord < K , V > > consumerFunction ) { Properties props = getConsumerProperties ( groupId , clientId , autoOffsetReset ) ; Thread t = new Thread ( null ) ; t . setName ( clientId + _STR ) ; t . start ( ) ; }
public double distance ( Instance first , Instance second , PerformanceStats stats ) { return Math . sqrt ( distance ( first , second , Double . POSITIVE_INFINITY , stats ) ) ; }
private boolean journalRebuildRequired ( ) { final int redundantOpCompactThreshold = _NUM ; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries . size ( ) ; }
public void findSameAsChaining ( Resource subj , Set < Resource > currentSameAs , Resource [ ] contxts ) throws InferenceEngineException { try { CloseableIteration < Statement , QueryEvaluationException > subjIter = RyaDAOHelper . query ( ryaDAO , subj , OWL . SAMEAS , null , conf , contxts ) ; while ( subjIter . hasNext ( ) ) { Statement st = subjIter . next ( ) ; if ( ! currentSameAs . contains ( st . getObject ( ) ) ) { Resource castedObj = ( Resource ) st . getObject ( ) ; currentSameAs . add ( castedObj ) ; findSameAsChaining ( castedObj , currentSameAs , contxts ) ; } } subjIter . close ( ) ; CloseableIteration < Statement , QueryEvaluationException > objIter = RyaDAOHelper . query ( ryaDAO , null , OWL . SAMEAS , subj , conf , contxts ) ; while ( objIter . hasNext ( ) ) { Statement st = objIter . next ( ) ; if ( ! currentSameAs . contains ( st . getSubject ( ) ) ) { Resource sameAsSubj = st . getSubject ( ) ; currentSameAs . add ( sameAsSubj ) ; findSameAsChaining ( sameAsSubj , currentSameAs , contxts ) ; } } objIter . close ( ) ; } catch ( QueryEvaluationException e ) { throw new InferenceEngineException ( e ) ; } }
public static void reindex ( Connection conn ) throws SQLException { init ( conn ) ; removeAllTriggers ( conn , TRIGGER_PREFIX ) ; removeIndexFiles ( conn ) ; Statement stat = conn . createStatement ( ) ; ResultSet rs = stat . executeQuery ( _STR + SCHEMA + _STR ) ; while ( rs . next ( ) ) { String schema = rs . getString ( _STR ) ; String table = rs . getString ( _STR ) ; createTrigger ( conn , schema , table ) ; indexExistingRows ( conn , schema , table ) ; } }
String toDot ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( Type t : inferenceContext . undetvars ) { UndetVar uv = ( UndetVar ) t ; buf . append ( String . format ( _STR , uv . qtype , uv . getBounds ( InferenceBound . UPPER ) , uv . getBounds ( InferenceBound . LOWER ) , uv . getBounds ( InferenceBound . EQ ) ) ) ; } return GraphUtils . toDot ( nodes , _STR + hashCode ( ) , buf . toString ( ) ) ; }
private void resizeTables ( ) { if ( mObjectDataUsed > mObjectData . length - MAX_DATA_SIZE ) { mObjectData = Arrays . copyOf ( mObjectData , mObjectData . length * _NUM ) ; } if ( mObjectCount < mTypes . length ) { return ; } mObjectOffset = Arrays . copyOf ( mObjectOffset , mObjectOffset . length * _NUM ) ; mTypes = Arrays . copyOf ( mTypes , mTypes . length * _NUM ) ; mObjects = Arrays . copyOf ( mObjects , mObjects . length * _NUM ) ; mRect = Arrays . copyOf ( mRect , mRect . length * _NUM ) ; }
private boolean hasNextInetSocketAddress ( ) { return nextInetSocketAddressIndex < inetSocketAddresses . size ( ) ; }
protected static double convertPercentileToX ( double percentileLevelIteratedTo ) { double x = _NUM / ( _NUM - ( percentileLevelIteratedTo / _NUM ) ) ; return Math . log10 ( x ) ; }
public static String queueNameFromDBName ( String dbName ) { String [ ] tokens = dbName . split ( _STR , _NUM ) ; return tokens [ _NUM ] ; }
public String UseThis ( int type , String id , String context ) { int i = FindSym ( type , id , context ) ; if ( i == symtab . size ( ) ) return id ; else return ( ( SymTabEntry ) symtab . elementAt ( i ) ) . useThis ; }
private float angle ( TouchState s ) { return ( float ) Math . toDegrees ( Math . atan2 ( s . yDown - s . yCurrent , s . xDown - s . xCurrent ) ) ; }
private int uint16FromData ( int offset ) { return twoBytesToInt ( Arrays . copyOfRange ( data ( ) , offset , offset + _NUM ) , Constants . CC2540_BYTE_ORDER ) ; }
protected static Pair < String , String > asrRegister ( final long offset , final ITranslationEnvironment environment , final List < ReilInstruction > instructions , final String registerNodeValue1 , final String registerNodeValue2 ) { final String shifterOperand = environment . getNextVariableString ( ) ; final String shifterCarryOut = environment . getNextVariableString ( ) ; final String isZeroCondition = environment . getNextVariableString ( ) ; final String isLessCondition = environment . getNextVariableString ( ) ; final String isGtEqCondition = environment . getNextVariableString ( ) ; final String shifterCarryOutTmp1 = environment . getNextVariableString ( ) ; final String shifterCarryOutTmp2 = environment . getNextVariableString ( ) ; final String shifterCarryOutTmp3 = environment . getNextVariableString ( ) ; final String shifterCarryOutTmp4 = environment . getNextVariableString ( ) ; final String shifterOperandTmp1 = environment . getNextVariableString ( ) ; final String shifterOperandTmp2 = environment . getNextVariableString ( ) ; final String shifterOperandTmp3 = environment . getNextVariableString ( ) ; final String shifterOperandTmp4 = environment . getNextVariableString ( ) ; final String tmpRsRegister = environment . getNextVariableString ( ) ; final String negativeTmpRsRegister = environment . getNextVariableString ( ) ; final String tmpVar1 = environment . getNextVariableString ( ) ; final String tmpVar2 = environment . getNextVariableString ( ) ; final String tmpVar3 = environment . getNextVariableString ( ) ; final String tmpVar4 = environment . getNextVariableString ( ) ; final String tmpVar5 = environment . getNextVariableString ( ) ; final String tmpVar6 = environment . getNextVariableString ( ) ; final String tmpVar7 = environment . getNextVariableString ( ) ; final String tmpVar8 = environment . getNextVariableString ( ) ; final String tmpVar9 = environment . getNextVariableString ( ) ; final String tmpVar10 = environment . getNextVariableString ( ) ; final String tmpVar11 = environment . getNextVariableString ( ) ; long baseOffset = offset ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , registerNodeValue2 , dWordSize , String . valueOf ( _NUM ) , dWordSize , tmpRsRegister ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , dWordSize , tmpRsRegister , dWordSize , negativeTmpRsRegister ) ) ; instructions . add ( ReilHelpers . createBisz ( baseOffset ++ , dWordSize , tmpRsRegister , byteSize , isZeroCondition ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , byteSize , _STR , byteSize , isZeroCondition , byteSize , shifterCarryOutTmp1 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , String . valueOf ( _NUM ) , byteSize , isZeroCondition , dWordSize , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , tmpVar1 , dWordSize , registerNodeValue2 , dWordSize , shifterOperandTmp1 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , tmpRsRegister , dWordSize , String . valueOf ( _NUM ) , dWordSize , tmpVar2 ) ) ; instructions . add ( ReilHelpers . createBisz ( baseOffset ++ , dWordSize , tmpVar2 , byteSize , isLessCondition ) ) ; instructions . add ( ReilHelpers . createAdd ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , bitMaskHighestBitSet , dWordSize , tmpVar3 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , tmpVar3 , dWordSize , negativeTmpRsRegister , dWordSize , tmpVar4 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , bitMaskHighestBitSet , dWordSize , negativeTmpRsRegister , dWordSize , tmpVar5 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , tmpVar4 , dWordSize , tmpVar5 , dWordSize , tmpVar6 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , byteSize , isLessCondition , dWordSize , tmpVar7 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , tmpVar6 , dWordSize , tmpVar7 , dWordSize , shifterOperandTmp2 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , tmpRsRegister , byteSize , oneSet , dWordSize , tmpVar8 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , dWordSize , tmpVar8 , dWordSize , tmpVar8 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpVar8 , dWordSize , tmpVar9 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , tmpVar9 , byteSize , isLessCondition , byteSize , shifterCarryOutTmp2 ) ) ; instructions . add ( ReilHelpers . createOr ( baseOffset ++ , byteSize , isZeroCondition , byteSize , isLessCondition , byteSize , tmpVar10 ) ) ; instructions . add ( ReilHelpers . createBisz ( baseOffset ++ , byteSize , tmpVar10 , byteSize , isGtEqCondition ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , minusThirtyOneSet , byteSize , tmpVar11 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , byteSize , zeroSet , byteSize , isGtEqCondition , dWordSize , shifterOperandTmp3 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , byteSize , tmpVar11 , byteSize , isGtEqCondition , byteSize , shifterCarryOutTmp3 ) ) ; instructions . add ( ReilHelpers . createOr ( baseOffset ++ , byteSize , shifterCarryOutTmp1 , byteSize , shifterCarryOutTmp2 , byteSize , shifterCarryOutTmp4 ) ) ; instructions . add ( ReilHelpers . createOr ( baseOffset ++ , byteSize , shifterCarryOutTmp3 , byteSize , shifterCarryOutTmp4 , byteSize , shifterCarryOut ) ) ; instructions . add ( ReilHelpers . createOr ( baseOffset ++ , dWordSize , shifterOperandTmp1 , dWordSize , shifterOperandTmp2 , dWordSize , shifterOperandTmp4 ) ) ; instructions . add ( ReilHelpers . createOr ( baseOffset ++ , dWordSize , shifterOperandTmp3 , dWordSize , shifterOperandTmp4 , dWordSize , shifterOperand ) ) ; return new Pair < String , String > ( shifterOperand , shifterCarryOut ) ; }
private static String removeQuotesEncolosingOption ( String fileName , String option ) throws Exception { String option1 = removeQuoteCharactersIfNecessary ( fileName , option , _STR ) ; if ( ! option1 . equals ( option ) ) { return option1 ; } return removeQuoteCharactersIfNecessary ( fileName , option , _STR ) ; }
@ Override public String generateLabel ( XYDataset dataset , int series ) { ParamChecks . nullNotPermitted ( dataset , _STR ) ; String label = MessageFormat . format ( this . formatPattern , createItemArray ( dataset , series ) ) ; return label ; }
private boolean matchStrings ( String pattern , String str , Map < String , String > uriTemplateVariables ) { AntPathStringMatcher matcher = new AntPathStringMatcher ( pattern , str , uriTemplateVariables ) ; return matcher . matchStrings ( ) ; }
@ Nullable public Dimension adjust ( @ NotNull Dimension newPreferredSize , @ Nullable Dimension oldPreferredSize , @ NotNull EditorImpl editor ) { if ( oldPreferredSize == null || mySkip ) { return newPreferredSize ; } if ( newPreferredSize . height != oldPreferredSize . height ) { return newPreferredSize ; } stripTimings ( ) ; myTimings . add ( System . currentTimeMillis ( ) ) ; if ( myTimings . size ( ) < FREQUENT_SIZE_CHANGES_NUMBER ) { return newPreferredSize ; } boolean increaseWidth = newPreferredSize . width > oldPreferredSize . width ; Dimension result ; if ( increaseWidth ) { final int spaceWidth = EditorUtil . getSpaceWidth ( Font . PLAIN , editor ) ; newPreferredSize . width += myReserveColumns * spaceWidth ; myReserveColumns += _NUM ; result = newPreferredSize ; } else { result = oldPreferredSize ; } scheduleSizeUpdate ( editor ) ; return result ; }
public RVMField findDeclaredField ( Atom fieldName , Atom fieldDescriptor ) { for ( RVMField field : declaredFields ) { if ( field . getName ( ) == fieldName && field . getDescriptor ( ) == fieldDescriptor ) { return field ; } } return null ; }
public Quarter ( Date time , TimeZone zone ) { this ( time , zone , Locale . getDefault ( ) ) ; }
private Util ( ) { }
default B withDefault ( String key , float value ) { return withDefault ( key , Float . toString ( value ) ) ; }
public static boolean readBoolean ( final JSONArray jsonArray , final int index , final boolean required , final boolean notNull ) throws JSONException { if ( required ) { return jsonArray . getBoolean ( index ) ; } if ( notNull && jsonArray . isNull ( index ) ) { throw new JSONException ( String . format ( Locale . US , NULL_VALUE_FORMAT_ARRAY , index ) ) ; } boolean value = _BOOL ; if ( ! jsonArray . isNull ( index ) ) { value = jsonArray . getBoolean ( index ) ; } return value ; }
protected static void autoBoxing ( MethodVisitor mv , Type fieldType ) { switch ( fieldType . getSort ( ) ) { case Type . BOOLEAN : mv . visitMethodInsn ( INVOKESTATIC , _STR , _STR , _STR ) ; break ; case Type . BYTE : mv . visitMethodInsn ( INVOKESTATIC , _STR , _STR , _STR ) ; break ; case Type . CHAR : mv . visitMethodInsn ( INVOKESTATIC , _STR , _STR , _STR ) ; break ; case Type . SHORT : mv . visitMethodInsn ( INVOKESTATIC , _STR , _STR , _STR ) ; break ; case Type . INT : mv . visitMethodInsn ( INVOKESTATIC , _STR , _STR , _STR ) ; break ; case Type . FLOAT : mv . visitMethodInsn ( INVOKESTATIC , _STR , _STR , _STR ) ; break ; case Type . LONG : mv . visitMethodInsn ( INVOKESTATIC , _STR , _STR , _STR ) ; break ; case Type . DOUBLE : mv . visitMethodInsn ( INVOKESTATIC , _STR , _STR , _STR ) ; break ; } }
public final void openPdfFile ( final byte [ ] data ) throws PdfException { final RandomAccessBuffer pdf_datafile ; try { if ( PdfFileReader . alwaysCacheInMemory == - _NUM || data . length < PdfFileReader . alwaysCacheInMemory ) { pdf_datafile = new RandomAccessDataBuffer ( data ) ; } else { try { final File file = File . createTempFile ( _STR , _STR , new File ( ObjectStore . temp_dir ) ) ; tempFileName = file . getAbsolutePath ( ) ; final java . io . FileOutputStream a = new java . io . FileOutputStream ( file ) ; a . write ( data ) ; a . flush ( ) ; a . close ( ) ; pdf_datafile = new RandomAccessFileBuffer ( tempFileName , _STR ) ; } catch ( final Exception e ) { throw new RuntimeException ( _STR + ObjectStore . temp_dir + _STR + e ) ; } } objectReader . init ( pdf_datafile ) ; } catch ( final Exception e ) { LogWriter . writeLog ( _STR + e + _STR ) ; throw new PdfException ( _STR + e + _STR ) ; } }
public static void main ( String [ ] args ) { if ( args . length < _NUM ) { LOGGER . error ( _STR ) ; return ; } int lastIndex = args . length - _NUM ; Path [ ] files = getFiles ( args ) ; Main main = new Main ( ) ; main . generate ( files [ lastIndex ] , Arrays . copyOf ( files , lastIndex ) ) ; }
@ Nullable E awaitMatch ( int start ) { for ( int step = _NUM , totalSpins = _NUM ; ( step < ARENA_LENGTH ) && ( totalSpins < SPINS ) ; step ++ ) { int index = ( start + step ) & ARENA_MASK ; AtomicReference < Object > slot = arena [ index ] ; Object found = slot . get ( ) ; if ( found == FREE ) { if ( slot . compareAndSet ( FREE , WAITER ) ) { int slotSpins = _NUM ; for ( ; ; ) { found = slot . get ( ) ; if ( ( found != WAITER ) && slot . compareAndSet ( found , FREE ) ) { @ SuppressWarnings ( _STR ) E e = ( E ) found ; return e ; } else if ( ( slotSpins >= SPINS_PER_STEP ) && ( found == WAITER ) && ( slot . compareAndSet ( WAITER , FREE ) ) ) { totalSpins += slotSpins ; break ; } slotSpins ++ ; } } } else if ( ( found != WAITER ) && slot . compareAndSet ( found , FREE ) ) { @ SuppressWarnings ( _STR ) E e = ( E ) found ; return e ; } } return null ; }
private ArrayList < Signature > constructOneSignatures ( SetDBIDs [ ] [ ] partitions , final long [ ] [ ] markers ) { final int dim = partitions . length ; ArrayList < Signature > signatures = new ArrayList < > ( ) ; for ( int d = _NUM ; d < dim ; d ++ ) { final DBIDs [ ] parts = partitions [ d ] ; if ( parts == null ) { continue ; } final long [ ] marked = markers [ d ] ; for ( int start = BitsUtil . nextSetBit ( marked , _NUM ) ; start >= _NUM ; ) { int end = BitsUtil . nextClearBit ( marked , start + _NUM ) ; end = ( end == - _NUM ) ? dim : end ; int [ ] signature = new int [ dim << _NUM ] ; Arrays . fill ( signature , - _NUM ) ; signature [ d << _NUM ] = start ; signature [ ( d << _NUM ) + _NUM ] = end - _NUM ; HashSetModifiableDBIDs sids = unionDBIDs ( parts , start , end ) ; if ( LOG . isDebugging ( ) ) { LOG . debug ( _STR + d + _STR + start + _STR + ( end - _NUM ) ) ; } signatures . add ( new Signature ( signature , sids ) ) ; start = ( end < dim ) ? BitsUtil . nextSetBit ( marked , end + _NUM ) : - _NUM ; } } return signatures ; }
public void testTestBitPositive1 ( ) { byte aBytes [ ] = { - _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = _NUM ; int number = _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; assertTrue ( ! aNumber . testBit ( number ) ) ; }
public static int findEndTrimNewlineChars ( CharSequence s ) { for ( int i = s . length ( ) ; i > _NUM ; ) { if ( s . charAt ( i - _NUM ) != _STR ) { return i ; } i -- ; if ( i > _NUM && s . charAt ( i - _NUM ) == _STR ) { i -- ; } } return _NUM ; }
public static String assertJQ ( SolrQueryRequest req , String ... tests ) throws Exception { return assertJQ ( req , JSONTestUtil . DEFAULT_DELTA , tests ) ; }
public void popElemAttributeSet ( ) { m_attrSetStack . pop ( ) ; }
private void calcCoordinates ( final float x , final float [ ] [ ] Trm , float charSpacing ) { final float [ ] [ ] trm = new float [ _NUM ] [ _NUM ] ; for ( int xx = _NUM ; xx < _NUM ; xx ++ ) { System . arraycopy ( Trm [ xx ] , _NUM , trm [ xx ] , _NUM , _NUM ) ; } x1 = x ; x2 = trm [ _NUM ] [ _NUM ] - ( charSpacing * trm [ _NUM ] [ _NUM ] ) ; if ( glyphData . isHorizontal ( ) ) { if ( trm [ _NUM ] [ _NUM ] < _NUM ) { x1 = x + trm [ _NUM ] [ _NUM ] - ( charSpacing * trm [ _NUM ] [ _NUM ] ) ; x2 = trm [ _NUM ] [ _NUM ] ; } else if ( trm [ _NUM ] [ _NUM ] > _NUM ) { x1 = x ; x2 = trm [ _NUM ] [ _NUM ] ; } } else if ( trm [ _NUM ] [ _NUM ] > _NUM ) { x1 = trm [ _NUM ] [ _NUM ] ; x2 = x + trm [ _NUM ] [ _NUM ] - ( charSpacing * trm [ _NUM ] [ _NUM ] ) ; } else if ( trm [ _NUM ] [ _NUM ] < _NUM ) { x2 = trm [ _NUM ] [ _NUM ] ; x1 = x + trm [ _NUM ] [ _NUM ] - ( charSpacing * trm [ _NUM ] [ _NUM ] ) ; } }
public void printEntry ( Writer w ) { try { String indent = _STR ; int indentWidth = indent . length ( ) ; HardcopyWriter ww = ( HardcopyWriter ) w ; int textSpace = ww . getCharactersPerLine ( ) - indentWidth - _NUM ; String newLine = _STR ; w . write ( newLine , _NUM , _NUM ) ; String s = _STR + _id ; w . write ( s , _NUM , s . length ( ) ) ; if ( ! ( _consistNumber . equals ( _STR ) ) ) { w . write ( newLine , _NUM , _NUM ) ; s = _STR + _consistNumber ; w . write ( s , _NUM , s . length ( ) ) ; } if ( ! ( _roadName . equals ( _STR ) ) ) { w . write ( newLine , _NUM , _NUM ) ; s = _STR + _roadName ; w . write ( s , _NUM , s . length ( ) ) ; } if ( ! ( _roadNumber . equals ( _STR ) ) ) { w . write ( newLine , _NUM , _NUM ) ; s = _STR + _roadNumber ; w . write ( s , _NUM , s . length ( ) ) ; } if ( ! ( _model . equals ( _STR ) ) ) { w . write ( newLine , _NUM , _NUM ) ; s = _STR + _model ; w . write ( s , _NUM , s . length ( ) ) ; } if ( ! ( _loco1DccAddress . equals ( _STR ) ) ) { w . write ( newLine , _NUM , _NUM ) ; s = _STR + _loco1DccAddress + _STR + _loco1Direction ; w . write ( s , _NUM , s . length ( ) ) ; } if ( ! ( _loco2DccAddress . equals ( _STR ) ) ) { w . write ( newLine , _NUM , _NUM ) ; s = _STR + _loco2DccAddress + _STR + _loco2Direction ; w . write ( s , _NUM , s . length ( ) ) ; } if ( ! ( _loco3DccAddress . equals ( _STR ) ) ) { w . write ( newLine , _NUM , _NUM ) ; s = _STR + _loco3DccAddress + _STR + _loco3Direction ; w . write ( s , _NUM , s . length ( ) ) ; } if ( ! ( _loco4DccAddress . equals ( _STR ) ) ) { w . write ( newLine , _NUM , _NUM ) ; s = _STR + _loco4DccAddress + _STR + _loco4Direction ; w . write ( s , _NUM , s . length ( ) ) ; } if ( ! ( _loco5DccAddress . equals ( _STR ) ) ) { w . write ( newLine , _NUM , _NUM ) ; s = _STR + _loco5DccAddress + _STR + _loco5Direction ; w . write ( s , _NUM , s . length ( ) ) ; } if ( ! ( _loco6DccAddress . equals ( _STR ) ) ) { w . write ( newLine , _NUM , _NUM ) ; s = _STR + _loco6DccAddress + _STR + _loco6Direction ; w . write ( s , _NUM , s . length ( ) ) ; } if ( ! ( _comment . equals ( _STR ) ) ) { Vector < String > commentVector = wrapComment ( _comment , textSpace ) ; int k = _NUM ; w . write ( newLine , _NUM , _NUM ) ; s = _STR + commentVector . elementAt ( k ) ; w . write ( s , _NUM , s . length ( ) ) ; k ++ ; while ( k < commentVector . size ( ) ) { String token = commentVector . elementAt ( k ) ; if ( ! token . equals ( _STR ) ) { s = indent + token ; } else { s = token ; } w . write ( s , _NUM , s . length ( ) ) ; k ++ ; } } w . write ( newLine , _NUM , _NUM ) ; } catch ( IOException e ) { log . error ( _STR + e ) ; } }
protected java . util . Date fromJulian ( int julian ) { YMD ymd = new YMD ( julian ) ; GregorianCalendar cal = new GregorianCalendar ( ymd . year , ymd . month - _NUM , ymd . day ) ; return cal . getTime ( ) ; }
public synchronized boolean removeLast ( K obj ) { if ( peekLast ( ) != obj ) { return _BOOL ; } array = Arrays . copyOf ( array , array . length - _NUM ) ; return _BOOL ; }
private boolean serializeCompactRDFStructProp ( XMPNode node , int indent , boolean hasRDFResourceQual ) throws XMPException , IOException { boolean hasAttrFields = _BOOL ; boolean hasElemFields = _BOOL ; boolean emitEndTag = _BOOL ; for ( Iterator ic = node . iterateChildren ( ) ; ic . hasNext ( ) ; ) { XMPNode field = ( XMPNode ) ic . next ( ) ; if ( canBeRDFAttrProp ( field ) ) { hasAttrFields = _BOOL ; } else { hasElemFields = _BOOL ; } if ( hasAttrFields && hasElemFields ) { break ; } } if ( hasRDFResourceQual && hasElemFields ) { throw new XMPException ( _STR , XMPError . BADRDF ) ; } if ( ! node . hasChildren ( ) ) { write ( _STR ) ; writeNewline ( ) ; emitEndTag = _BOOL ; } else if ( ! hasElemFields ) { serializeCompactRDFAttrProps ( node , indent + _NUM ) ; write ( _STR ) ; writeNewline ( ) ; emitEndTag = _BOOL ; } else if ( ! hasAttrFields ) { write ( _STR ) ; writeNewline ( ) ; serializeCompactRDFElementProps ( node , indent + _NUM ) ; } else { write ( _STR ) ; writeNewline ( ) ; writeIndent ( indent + _NUM ) ; write ( RDF_STRUCT_START ) ; serializeCompactRDFAttrProps ( node , indent + _NUM ) ; write ( _STR ) ; writeNewline ( ) ; serializeCompactRDFElementProps ( node , indent + _NUM ) ; writeIndent ( indent + _NUM ) ; write ( RDF_STRUCT_END ) ; writeNewline ( ) ; } return emitEndTag ; }
public default UtilityTable queryUtil ( BNetwork network , String queryVar , Assignment evidence ) { return queryUtil ( new Query . UtilQuery ( network , Arrays . asList ( queryVar ) , evidence ) ) ; }
public static float [ ] stringListToNumeric ( List < String > scoreList ) throws NumberFormatException { float [ ] scores = new float [ scoreList . size ( ) ] ; int scoreId = _NUM ; for ( String score : scoreList ) { float floatScore = ( float ) Double . parseDouble ( score ) ; if ( Float . isNaN ( floatScore ) ) { throw new NumberFormatException ( _STR + score ) ; } scores [ scoreId ++ ] = floatScore ; } return scores ; }
@ Override public void next ( ) { currentImage = Optional . of ( addIndexAndGetImageByOffset ( + _NUM ) ) ; eventBus . post ( new SourceHasPendingUpdateEvent ( this ) ) ; }
protected void parse ( DataInputStream stream ) throws Exception { int size = stream . readInt ( ) ; int ret , read = _NUM ; data = new byte [ size ] ; while ( size > _NUM ) { ret = stream . read ( data , read , size ) ; size -= ret ; read += ret ; } }
private List < Activity > findBestInsertion ( List < Activity > partialRoute , boolean allowAsMajor ) { int startIndex = _NUM ; int endIndex = partialRoute . size ( ) - _NUM ; if ( allowAsMajor ) { startIndex = _NUM ; endIndex = partialRoute . size ( ) ; } List < Activity > newList = partialRoute ; double best = Double . POSITIVE_INFINITY ; List < Activity > bestList = null ; for ( int i = startIndex ; i <= endIndex ; i ++ ) { List < Activity > tmpList = new ArrayList < > ( newList ) ; Activity tmpActivity = getRelocationActivity ( ) ; tmpList . add ( i , tmpActivity ) ; double tmp = evaluateList ( tmpList ) ; if ( tmp < best ) { if ( i == _NUM ) { tmpActivity . setType ( _STR ) ; tmpActivity . setEndTime ( Time . parseTime ( _STR ) ) ; } else if ( i == partialRoute . size ( ) ) { tmpActivity . setType ( _STR ) ; } else { tmpActivity . setType ( _STR ) ; tmpActivity . setMaximumDuration ( Time . parseTime ( _STR ) ) ; } best = tmp ; bestList = tmpList ; } } return bestList ; }
Calendar toCalendar ( String value , String pattern , Locale locale ) { Calendar calendar = null ; try { DateFormat format = ( locale == null ) ? new SimpleDateFormat ( pattern ) : new SimpleDateFormat ( pattern , locale ) ; format . setLenient ( _BOOL ) ; format . parse ( value ) ; calendar = format . getCalendar ( ) ; } catch ( Exception e ) { fail ( _STR + value + _STR + pattern + _STR + e . toString ( ) ) ; } return calendar ; }
public void writeShort ( int value ) throws IOException { checkWritePrimitiveTypes ( ) ; primitiveTypes . writeShort ( value ) ; }
private boolean isInitialized ( ) { return poolNames != null && ! poolNames . isEmpty ( ) ; }
public void onRegisterClick ( View view ) { Intent register = new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . welcome_link_url ) ) ) ; setResult ( RESULT_CANCELED ) ; startActivity ( register ) ; }
private void registerExtraValidSubject ( String subject ) { extraValidSubjects . add ( subject ) ; restoredStatements . addAll ( unknownSubjects . removeAll ( subject ) ) ; }
public static String trimLine ( String line ) { int idx = line . indexOf ( _STR ) ; if ( idx != - _NUM ) { line = line . substring ( _NUM , idx ) ; } return line . trim ( ) ; }
public double distance2 ( double p1 , double p2 ) { return ( p1 - p2 ) * ( p1 - p2 ) ; }
public static void appendInstruction ( OFFlowMod . Builder fmb , OFInstruction inst ) { List < OFInstruction > newIl = new ArrayList < OFInstruction > ( ) ; List < OFInstruction > oldIl = fmb . getInstructions ( ) ; if ( oldIl != null ) { newIl . addAll ( fmb . getInstructions ( ) ) ; } for ( OFInstruction i : newIl ) { if ( i . getType ( ) == inst . getType ( ) ) { newIl . remove ( i ) ; } } newIl . add ( inst ) ; fmb . setInstructions ( newIl ) ; }
public Iterator < T > iterator ( ) { return orderList . iterator ( ) ; }
private void verifyDomainsIsNotInUse ( StringSet domains ) { checkForActiveTenantsUsingDomains ( domains ) ; checkForVdcRolesUsingDomains ( domains ) ; checkForTenantRolesUsingDomains ( domains ) ; checkForUserGroupsUsingDomains ( domains ) ; }
private Hashtable < IPoint , List < ICircle > > filter ( Hashtable < IPoint , ICircle [ ] > circleIntersections ) { Hashtable < IPoint , List < ICircle > > real = new Hashtable < IPoint , List < ICircle > > ( ) ; for ( IPoint pt : circleIntersections . keySet ( ) ) { ICircle [ ] circs = circleIntersections . get ( pt ) ; for ( int i = _NUM ; i < circs . length - _NUM ; i ++ ) { for ( int j = i + _NUM ; j < circs . length ; j ++ ) { IPoint [ ] pts = intersects ( circs [ i ] , circs [ j ] ) ; if ( pts != null ) { for ( IPoint p : pts ) { report ( real , p , circs [ i ] , circs [ j ] ) ; } } } } } return real ; }
public void initWithoutJUnitForFixture ( Class fixture , Method method ) { this . testClass = fixture ; this . testMethodName = method . getName ( ) ; }
public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = _BOOL ; }
public long sigignore ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
protected JavaType findSerializationType ( Annotated a , boolean useStaticTyping , JavaType declaredType ) { Class < ? > serClass = _annotationIntrospector . findSerializationType ( a ) ; if ( serClass != null ) { Class < ? > rawDeclared = declaredType . getRawClass ( ) ; if ( serClass . isAssignableFrom ( rawDeclared ) ) { declaredType = declaredType . widenBy ( serClass ) ; } else { if ( ! rawDeclared . isAssignableFrom ( serClass ) ) { throw new IllegalArgumentException ( _STR + a . getName ( ) + _STR + serClass . getName ( ) + _STR + rawDeclared . getName ( ) ) ; } declaredType = _config . constructSpecializedType ( declaredType , serClass ) ; } useStaticTyping = _BOOL ; } JavaType secondary = BeanSerializerFactory . modifySecondaryTypesByAnnotation ( _config , a , declaredType ) ; if ( secondary != declaredType ) { useStaticTyping = _BOOL ; declaredType = secondary ; } if ( ! useStaticTyping ) { JsonSerialize . Typing typing = _annotationIntrospector . findSerializationTyping ( a ) ; if ( typing != null ) { useStaticTyping = ( typing == JsonSerialize . Typing . STATIC ) ; } } return useStaticTyping ? declaredType : null ; }
private static void convert ( AScene scene , InputStream in , OutputStream out ) throws IOException , DefException , ParseException { IndexUnit iu = JavaParser . parse ( in ) ; extractScene ( iu , scene ) ; try ( Writer w = new BufferedWriter ( new OutputStreamWriter ( out ) ) ) { IndexFileWriter . write ( scene , w ) ; } }
public static < K , V > Map < K , V > of ( K k1 , V v1 , K k2 , V v2 ) { Map map = of ( ) ; map . put ( k1 , v1 ) ; map . put ( k2 , v2 ) ; return map ; }
@ Override public void write ( char [ ] chr ) throws IOException { out . write ( chr ) ; }
public boolean boundScroll ( ) { float curScroll = getStackScroll ( ) ; float newScroll = getBoundedStackScroll ( curScroll ) ; if ( Float . compare ( newScroll , curScroll ) != _NUM ) { setStackScroll ( newScroll ) ; return _BOOL ; } return _BOOL ; }
public static void load ( marytts . modules . synthesis . Voice maryVoice ) throws NoSuchPropertyException { if ( mary2freettsVoices == null ) mary2freettsVoices = new HashMap < marytts . modules . synthesis . Voice , com . sun . speech . freetts . Voice > ( ) ; if ( freetts2maryVoices == null ) freetts2maryVoices = new HashMap < com . sun . speech . freetts . Voice , marytts . modules . synthesis . Voice > ( ) ; if ( mary2freettsVoices . containsKey ( maryVoice ) ) return ; load ( maryVoice , createFreeTTSVoice ( maryVoice ) ) ; }
public void append ( int key , double value ) { if ( mSize != _NUM && key <= mKeys [ mSize - _NUM ] ) { put ( key , value ) ; return ; } int pos = mSize ; if ( pos >= mKeys . length ) { int n = ArrayUtils . idealIntArraySize ( pos + _NUM ) ; int [ ] nkeys = new int [ n ] ; double [ ] nvalues = new double [ n ] ; System . arraycopy ( mKeys , _NUM , nkeys , _NUM , mKeys . length ) ; System . arraycopy ( mValues , _NUM , nvalues , _NUM , mValues . length ) ; mKeys = nkeys ; mValues = nvalues ; } mKeys [ pos ] = key ; mValues [ pos ] = value ; mSize = pos + _NUM ; }
public synchronized void addIncrementalClassifierListener ( IncrementalClassifierListener cl ) { m_incrementalClassifierListeners . add ( cl ) ; }
public float readR4 ( ) throws java . io . IOException { return Float . intBitsToFloat ( ( int ) readDWORD ( ) ) ; }
public Collection engineGenerateCertificates ( InputStream inStream ) throws CertificateException { java . security . cert . Certificate cert ; List certs = new ArrayList ( ) ; while ( ( cert = engineGenerateCertificate ( inStream ) ) != null ) { certs . add ( cert ) ; } return certs ; }
public static boolean filesExistOnDestButNotSrc ( Configuration conf , Path src , Path dest , Optional < PathFilter > filter ) throws IOException { Set < FileStatus > srcFileStatuses = getFileStatusesRecursive ( conf , src , filter ) ; Set < FileStatus > destFileStatuses = getFileStatusesRecursive ( conf , dest , filter ) ; Map < String , Long > srcFileSizes = null ; Map < String , Long > destFileSizes = null ; try { srcFileSizes = getRelPathToSizes ( src , srcFileStatuses ) ; destFileSizes = getRelPathToSizes ( dest , destFileStatuses ) ; } catch ( ArgumentException e ) { throw new IOException ( _STR , e ) ; } for ( String file : destFileSizes . keySet ( ) ) { if ( ! srcFileSizes . containsKey ( file ) ) { LOG . warn ( String . format ( _STR , file , dest , src ) ) ; return _BOOL ; } } return _BOOL ; }
protected void convertOrder ( SqlSelect select , Blackboard bb , RelCollation collation , List < SqlNode > orderExprList , SqlNode offset , SqlNode fetch ) { if ( select . getOrderList ( ) == null || select . getOrderList ( ) . getList ( ) . isEmpty ( ) ) { assert collation . getFieldCollations ( ) . isEmpty ( ) ; if ( ( offset == null || ( ( SqlLiteral ) offset ) . bigDecimalValue ( ) . equals ( BigDecimal . ZERO ) ) && fetch == null ) { return ; } } bb . setRoot ( LogicalSort . create ( bb . root , collation , offset == null ? null : convertExpression ( offset ) , fetch == null ? null : convertExpression ( fetch ) ) , _BOOL ) ; if ( orderExprList . size ( ) > _NUM && ! bb . top ) { final List < RexNode > exprs = new ArrayList < > ( ) ; final RelDataType rowType = bb . root . getRowType ( ) ; final int fieldCount = rowType . getFieldCount ( ) - orderExprList . size ( ) ; for ( int i = _NUM ; i < fieldCount ; i ++ ) { exprs . add ( rexBuilder . makeInputRef ( bb . root , i ) ) ; } bb . setRoot ( LogicalProject . create ( bb . root , exprs , rowType . getFieldNames ( ) . subList ( _NUM , fieldCount ) ) , _BOOL ) ; } }
public void tickBlock ( BlockPos pos ) { List < BlockPos > validCoords = new ArrayList < > ( ) ; for ( int xOffset = - TICK_RANGE ; xOffset <= TICK_RANGE ; xOffset ++ ) { for ( int zOffset = - TICK_RANGE ; zOffset <= TICK_RANGE ; zOffset ++ ) { if ( xOffset == _NUM && zOffset == _NUM ) continue ; if ( isValidSwapPosition ( pos . add ( xOffset , _NUM , zOffset ) ) ) validCoords . add ( pos . add ( xOffset , _NUM , zOffset ) ) ; } } if ( ! validCoords . isEmpty ( ) && ! world . isRemote ) { BlockPos toSwap = validCoords . get ( rand . nextInt ( validCoords . size ( ) ) ) ; world . setBlockState ( toSwap , stateToSet , _NUM | _NUM ) ; } }
public synchronized int updatePurchase ( String orderId , String productId , PurchaseState purchaseState , long purchaseTime , String developerPayload ) { insertOrder ( orderId , productId , purchaseState , purchaseTime , developerPayload ) ; Cursor cursor = mDb . query ( PURCHASE_HISTORY_TABLE_NAME , HISTORY_COLUMNS , HISTORY_PRODUCT_ID_COL + _STR , new String [ ] { productId } , null , null , null , null ) ; if ( cursor == null ) { return _NUM ; } int quantity = _NUM ; try { while ( cursor . moveToNext ( ) ) { int stateIndex = cursor . getInt ( _NUM ) ; PurchaseState state = PurchaseState . valueOf ( stateIndex ) ; if ( state == PurchaseState . PURCHASED || state == PurchaseState . REFUNDED ) { quantity += _NUM ; } } updatePurchasedItem ( productId , quantity ) ; } finally { if ( cursor != null ) { cursor . close ( ) ; } } return quantity ; }
private void configureMessageLabel ( JLabel label ) { Color color = ( Color ) DefaultLookup . get ( optionPane , this , _STR ) ; if ( color != null ) { label . setForeground ( color ) ; } Font messageFont = ( Font ) DefaultLookup . get ( optionPane , this , _STR ) ; if ( messageFont != null ) { label . setFont ( messageFont ) ; } }
public void removeAllLimitLines ( ) { mLimitLines . clear ( ) ; }
private boolean linkFirst ( Node < E > node ) { if ( count >= capacity ) return _BOOL ; Node < E > f = first ; node . next = f ; first = node ; if ( last == null ) last = node ; else f . prev = node ; ++ count ; notEmpty . signal ( ) ; return _BOOL ; }
default Filterable < T > removeAll ( final Stream < ? extends T > stream ) { final Set < T > set = stream . collect ( Collectors . toSet ( ) ) ; return filterNot ( null ) ; }
public void drawLine ( List < mxPoint > pts , Map < String , Object > style ) { Color penColor = mxUtils . getStyleStrokeColor ( style , Color . BLACK ) ; float penWidth = mxUtils . getStyleStrokeWidth ( style , ( float ) _NUM ) ; if ( penColor != null && penWidth > _NUM ) { String shape = mxUtils . getString ( style , mxConstants . STYLE_SHAPE , _STR ) ; if ( shape . equals ( mxConstants . SHAPE_ARROW ) ) { setStroke ( penWidth , style ) ; mxPoint p0 = pts . get ( _NUM ) ; mxPoint pe = pts . get ( pts . size ( ) - _NUM ) ; Rectangle bounds = new Rectangle ( p0 . getPoint ( ) ) ; bounds . add ( pe . getPoint ( ) ) ; Color fillColor = mxUtils . getStyleFillColor ( style ) ; Paint fillPaint = getFillPaint ( bounds , fillColor , style ) ; boolean shadow = mxUtils . isTrue ( style , mxConstants . STYLE_SHADOW , _BOOL ) ; drawArrow ( pts , fillColor , fillPaint , penColor , shadow ) ; } else { Object startMarker = style . get ( mxConstants . STYLE_STARTARROW ) ; Object endMarker = style . get ( mxConstants . STYLE_ENDARROW ) ; float startSize = ( float ) ( mxUtils . getFloat ( style , mxConstants . STYLE_STARTSIZE , mxConstants . DEFAULT_MARKERSIZE ) ) ; float endSize = ( float ) ( mxUtils . getFloat ( style , mxConstants . STYLE_ENDSIZE , mxConstants . DEFAULT_MARKERSIZE ) ) ; boolean rounded = mxUtils . isTrue ( style , mxConstants . STYLE_ROUNDED , _BOOL ) ; drawConnector ( pts , penWidth , penColor , startMarker , startSize , endMarker , endSize , rounded , style ) ; } } }
private static MeteringRectangle [ ] regionsForNormalizedCoord ( float nx , float ny , float fraction , final Rect cropRegion , int sensorOrientation ) { int minCropEdge = Math . min ( cropRegion . width ( ) , cropRegion . height ( ) ) ; int halfSideLength = ( int ) ( _NUM * fraction * minCropEdge ) ; PointF nsc = CameraUtil . normalizedSensorCoordsForNormalizedDisplayCoords ( nx , ny , sensorOrientation ) ; int xCenterSensor = ( int ) ( cropRegion . left + nsc . x * cropRegion . width ( ) ) ; int yCenterSensor = ( int ) ( cropRegion . top + nsc . y * cropRegion . height ( ) ) ; Rect meteringRegion = new Rect ( xCenterSensor - halfSideLength , yCenterSensor - halfSideLength , xCenterSensor + halfSideLength , yCenterSensor + halfSideLength ) ; meteringRegion . left = CameraUtil . clamp ( meteringRegion . left , cropRegion . left , cropRegion . right ) ; meteringRegion . top = CameraUtil . clamp ( meteringRegion . top , cropRegion . top , cropRegion . bottom ) ; meteringRegion . right = CameraUtil . clamp ( meteringRegion . right , cropRegion . left , cropRegion . right ) ; meteringRegion . bottom = CameraUtil . clamp ( meteringRegion . bottom , cropRegion . top , cropRegion . bottom ) ; return new MeteringRectangle [ ] { new MeteringRectangle ( meteringRegion , CAMERA2_REGION_WEIGHT ) } ; }
@ Override public void flush ( ) throws IOException { flushBuffer ( ) ; _outputStream . flush ( ) ; }
public Vector ( double comp [ ] ) throws NegativeArraySizeException { int n = comp . length ; if ( n <= _NUM ) throw new NegativeArraySizeException ( _STR ) ; components = new double [ n ] ; System . arraycopy ( comp , _NUM , components , _NUM , n ) ; }
@ Override public void visitInnerClass ( final String aname , final String outerName , final String innerName , final int attr_access ) { if ( ( name != null ) && name . equals ( aname ) ) { this . access = attr_access ; } super . visitInnerClass ( aname , outerName , innerName , attr_access ) ; }
public long lonToPixel ( double lon ) { return ( long ) ( ( lon + _NUM ) / _NUM * Math . pow ( _NUM , zoom ) * _NUM ) ; }
public static boolean worldFileValuesAppearGeographic ( AVList values ) { double xLocation ; double yLocation ; double xPixelSize ; double yPixelSize ; Object o = values . getValue ( WORLD_FILE_X_LOCATION ) ; if ( o != null && o instanceof Double ) xLocation = ( Double ) o ; else return _BOOL ; o = values . getValue ( WORLD_FILE_Y_LOCATION ) ; if ( o != null && o instanceof Double ) yLocation = ( Double ) o ; else return _BOOL ; o = values . getValue ( WORLD_FILE_X_PIXEL_SIZE ) ; if ( o != null && o instanceof Double ) xPixelSize = ( Double ) o ; else return _BOOL ; o = values . getValue ( WORLD_FILE_Y_PIXEL_SIZE ) ; if ( o != null && o instanceof Double ) yPixelSize = ( Double ) o ; else return _BOOL ; return ( Angle . isValidLongitude ( xPixelSize ) && Angle . isValidLatitude ( yPixelSize ) && Angle . isValidLongitude ( xLocation ) && Angle . isValidLatitude ( yLocation ) ) ; }
public void storeInRegister ( int registerNumber ) throws IOException { print ( _STR , new String [ ] { Integer . toString ( registerNumber ) } ) ; }
public void remove ( SessionID sessionID ) { remoteSessionSet . remove ( sessionID ) ; }
@ Override public synchronized String toString ( ) { if ( elementCount == _NUM ) { return _STR ; } int length = elementCount - _NUM ; StringBuilder buffer = new StringBuilder ( elementCount * _NUM ) ; buffer . append ( _STR ) ; for ( int i = _NUM ; i < length ; i ++ ) { if ( elementData [ i ] == this ) { buffer . append ( _STR ) ; } else { buffer . append ( elementData [ i ] ) ; } buffer . append ( _STR ) ; } if ( elementData [ length ] == this ) { buffer . append ( _STR ) ; } else { buffer . append ( elementData [ length ] ) ; } buffer . append ( _STR ) ; return buffer . toString ( ) ; }
public Iterator < AbstractPage > childIterator ( final boolean dirtyNodesOnly ) { if ( dirtyNodesOnly ) { return new DirtyChildIterator ( this ) ; } else { return new ChildIterator ( ) ; } }
public void enable ( ) throws IOException { synchronized ( optOutLock ) { if ( isOptOut ( ) ) { configuration . set ( _STR , _BOOL ) ; configuration . save ( configurationFile ) ; } if ( task == null ) { start ( ) ; } } }
public HMACT64 ( byte [ ] key ) { super ( _STR ) ; int length = Math . min ( key . length , BLOCK_LENGTH ) ; for ( int i = _NUM ; i < length ; i ++ ) { ipad [ i ] = ( byte ) ( key [ i ] ^ IPAD ) ; opad [ i ] = ( byte ) ( key [ i ] ^ OPAD ) ; } for ( int i = length ; i < BLOCK_LENGTH ; i ++ ) { ipad [ i ] = IPAD ; opad [ i ] = OPAD ; } try { md5 = MessageDigest . getInstance ( _STR ) ; } catch ( Exception ex ) { throw new IllegalStateException ( ex . getMessage ( ) ) ; } engineReset ( ) ; }
public boolean startsWith ( String string ) { if ( string == null ) return _BOOL ; int strlen = string . length ( ) ; if ( _length < strlen ) return _BOOL ; char [ ] buffer = _buffer ; int offset = _offset ; while ( -- strlen >= _NUM ) { if ( buffer [ offset + strlen ] != string . charAt ( strlen ) ) return _BOOL ; } return _BOOL ; }
private void writeRawBytesInternal ( final ByteBuffer value ) throws IOException { int length = value . remaining ( ) ; if ( limit - position >= length ) { value . get ( buffer , position , length ) ; position += length ; totalBytesWritten += length ; } else { final int bytesWritten = limit - position ; value . get ( buffer , position , bytesWritten ) ; length -= bytesWritten ; position = limit ; totalBytesWritten += bytesWritten ; refreshBuffer ( ) ; while ( length > limit ) { value . get ( buffer , _NUM , limit ) ; output . write ( buffer , _NUM , limit ) ; length -= limit ; totalBytesWritten += limit ; } value . get ( buffer , _NUM , length ) ; position = length ; totalBytesWritten += length ; } }
public boolean isSrcClass ( SootClass clz ) { return srcClasses . contains ( clz . getName ( ) ) ; }
private void processLDIF ( Connection conn , String path ) throws UpgradeException { ChangeRecordReader reader = null ; try { if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + path ) ; } Map < String , String > tags = new HashMap < String , String > ( _NUM ) ; tags . put ( _STR , baseDN ) ; tags . put ( _STR , _STR ) ; String content = AMSetupServlet . readFile ( path ) ; String tagSwapped = StringUtils . tagSwap ( content , tags ) ; reader = new LDIFChangeRecordReader ( new ByteArrayInputStream ( tagSwapped . getBytes ( Charset . forName ( _STR ) ) ) ) ; ChangeRecordWriter writer = new ConnectionChangeRecordWriter ( conn ) ; while ( reader . hasNext ( ) ) { writer . writeChangeRecord ( reader . readChangeRecord ( ) ) ; } } catch ( IOException ioe ) { DEBUG . error ( _STR + path , ioe ) ; throw new UpgradeException ( ioe ) ; } finally { IOUtils . closeIfNotNull ( reader ) ; } }
private void printProgress ( long row , long rowFrom , long rowTill ) { long rowsProcessed = row + chunkSize - rowFrom ; if ( rowsProcessed > ( rowTill - rowFrom ) ) rowsProcessed = ( rowTill - rowFrom ) ; print ( String . format ( _STR , ( int ) ( ( ( double ) ( rowsProcessed ) / ( double ) ( rowTill - rowFrom ) ) * _NUM ) ) ) ; }
void postRemoteReleaseLock ( Object objectName ) throws InterruptedException { if ( ! acquireDestroyReadLock ( _NUM ) ) { return ; } try { checkDestroyed ( ) ; drainPermittedRequests ( ) ; grantLock ( objectName ) ; } catch ( LockServiceDestroyedException e ) { } catch ( LockGrantorDestroyedException e ) { } finally { releaseDestroyReadLock ( ) ; } }
public final ArrayList < PositionRecord > loadPositions ( final int session , final Double minLat , final Double maxLat , final Double minLon , final Double maxLon ) { final ArrayList < PositionRecord > positions = new ArrayList < > ( ) ; String selection = Schema . COL_SESSION_ID + _STR ; Cursor cursor = null ; List < String > selectionArgs = null ; if ( minLat != null & maxLat != null && minLon != null && maxLon != null ) { selectionArgs = new ArrayList < > ( ) ; selectionArgs . add ( String . valueOf ( session ) ) ; selectionArgs . add ( String . valueOf ( minLat ) ) ; selectionArgs . add ( String . valueOf ( maxLat ) ) ; selectionArgs . add ( String . valueOf ( minLon ) ) ; selectionArgs . add ( String . valueOf ( maxLon ) ) ; selection += _STR + Schema . COL_LATITUDE + _STR + Schema . COL_LATITUDE + _STR + Schema . COL_LONGITUDE + _STR + Schema . COL_LONGITUDE + _STR ; cursor = contentResolver . query ( ContentProvider . CONTENT_URI_POSITION , null , selection , selectionArgs . toArray ( new String [ _NUM ] ) , Schema . COL_TIMESTAMP ) ; } else { Log . v ( TAG , _STR ) ; cursor = contentResolver . query ( ContentProvider . CONTENT_URI_POSITION , null , null , null , Schema . COL_TIMESTAMP ) ; } while ( cursor . moveToNext ( ) ) { positions . add ( positionFromCursor ( cursor ) ) ; } cursor . close ( ) ; return positions ; }
public static CheckBox createToggle ( String text , Image icon ) { CheckBox cb = new CheckBox ( text , icon ) ; cb . setToggle ( _BOOL ) ; return cb ; }
public long addCompletedBatch ( RequestBatch requestBatch ) { long completedBatchId = insertBatchAsCompleted ( requestBatch ) ; for ( Request request : requestBatch . getRequests ( ) ) { request . setBatchId ( completedBatchId ) ; File file = new File ( request . getDestinationPath ( ) ) ; long length = file . exists ( ) ? file . length ( ) : _NUM ; insertRequestAsCompletedDownload ( request . getDestinationPath ( ) , length , request ) ; } return completedBatchId ; }
@ TargetApi ( Build . VERSION_CODES . JELLY_BEAN ) private void dequeueOutputBuffer ( MediaCodec codec , ByteBuffer [ ] outputBuffers , int index , MediaCodec . BufferInfo info ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN ) { ByteBuffer buffer = outputBuffers [ index ] ; Log . i ( _STR + info . size + _STR + buffer . remaining ( ) ) ; if ( info . size <= buffer . remaining ( ) ) { final byte [ ] bufferCopied = new byte [ info . size ] ; buffer . get ( bufferCopied ) ; codec . releaseOutputBuffer ( index , _BOOL ) ; addEncoded ( bufferCopied ) ; if ( Log . DEBUG ) { AudioUtils . showSomeBytes ( _STR , bufferCopied ) ; } } else { Log . e ( _STR ) ; codec . releaseOutputBuffer ( index , _BOOL ) ; } } }
public static DefaultJobDefinition retryableFixedDelayJobDefinition ( final String jobType , final String jobName , final String description , final Duration fixedDelay , final int restarts , final int retries , final Optional < Duration > retryDelay , final Optional < Duration > maxAge ) { return new DefaultJobDefinition ( jobType , jobName , description , maxAge , Optional . of ( fixedDelay ) , Optional . empty ( ) , restarts , retries , retryDelay ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return MESSAGE ; default : return null ; } }
public static void putLong ( long addr , long val ) { if ( UNALIGNED ) UNSAFE . putLong ( addr , val ) ; else putLongByByte ( addr , val , BIG_ENDIAN ) ; }
public static File createMinimalSplit ( String inputFolder , int numFolds , int numAvailableJCas , boolean isSequence ) throws Exception { File outputFolder = new File ( inputFolder , _STR ) ; int splitNum = ( int ) Math . ceil ( numFolds / ( double ) numAvailableJCas ) ; CollectionReaderDescription createReader = CollectionReaderFactory . createReaderDescription ( BinaryCasReader . class , BinaryCasReader . PARAM_SOURCE_LOCATION , inputFolder , BinaryCasReader . PARAM_PATTERNS , _STR ) ; AnalysisEngineDescription multiplier = AnalysisEngineFactory . createEngineDescription ( FoldClassificationUnitCasMultiplier . class , FoldClassificationUnitCasMultiplier . PARAM_REQUESTED_SPLITS , splitNum , FoldClassificationUnitCasMultiplier . PARAM_USE_SEQUENCES , isSequence ) ; AnalysisEngineDescription xmiWriter = AnalysisEngineFactory . createEngineDescription ( BinaryCasWriter . class , BinaryCasWriter . PARAM_TARGET_LOCATION , outputFolder . getAbsolutePath ( ) , BinaryCasWriter . PARAM_FORMAT , _STR ) ; AnalysisEngineDescription both = AnalysisEngineFactory . createEngineDescription ( multiplier , xmiWriter ) ; SimplePipeline . runPipeline ( createReader , both ) ; isNumberOfCasCreatedLargerEqualNumFolds ( outputFolder , numFolds ) ; return outputFolder ; }
public org . w3c . dom . Element signXML ( org . w3c . dom . Document doc , java . lang . String certAlias ) throws XMLSignatureException { return signXML ( doc , certAlias , null ) ; }
public boolean displayPopup ( ) { if ( m_popupClass == null ) return _BOOL ; try { Window win = SwingUtilities . getWindowAncestor ( this ) ; CFieldPopup popup = null ; if ( win instanceof Dialog ) { Constructor < ? > constructor = m_popupClass . getConstructor ( new Class < ? > [ ] { Dialog . class , String . class , Boolean . class } ) ; popup = ( CFieldPopup ) constructor . newInstance ( new Object [ ] { ( Dialog ) win , m_title , new Boolean ( _BOOL ) } ) ; } else if ( win instanceof Frame ) { Constructor < ? > constructor = m_popupClass . getConstructor ( new Class [ ] { Frame . class , String . class , Boolean . class } ) ; popup = ( CFieldPopup ) constructor . newInstance ( new Object [ ] { ( Frame ) win , m_title , new Boolean ( _BOOL ) } ) ; } if ( popup == null ) return _BOOL ; popup . setValue ( m_editor . getItem ( ) ) ; popup . setFormat ( m_editor . getFormat ( ) ) ; popup . show ( ) ; m_editor . setItem ( popup . getValue ( ) ) ; popup = null ; } catch ( Exception e ) { notifyUser ( e ) ; } return _BOOL ; }
public AbstractSdfWriter ( final PrereadType prereadType , final boolean hasQuality , boolean hasNames , boolean compressed , final SequenceType type ) { mPrereadType = prereadType ; mPrereadArm = PrereadArm . UNKNOWN ; mSdfId = new SdfId ( ) ; mNameHandler = new SequenceNameHandler ( ) ; mSequenceType = type ; mFirstValid = mSequenceType . firstValid ( ) ; mResidueCounts = new long [ mSequenceType . numberKnownCodes ( ) + mSequenceType . firstValid ( ) ] ; mNHistogram = new long [ MAX_HISTOGRAM ] ; mPosHistogram = new long [ MAX_HISTOGRAM ] ; mQSAveragePerPos = new double [ MAX_HISTOGRAM ] ; mPositionCounts = new long [ MAX_HISTOGRAM ] ; mGlobalQSAverage = _NUM ; mDataHashFunction = new PrereadHashFunction ( ) ; mQualityHashFunction = new PrereadHashFunction ( ) ; mNameHashFunction = new PrereadHashFunction ( ) ; mNameSuffixHashFunction = new PrereadHashFunction ( ) ; mHasQuality = hasQuality ; mHasNames = hasNames ; mCompressed = compressed ; mSeqDataChecksum = new CRC32 ( ) ; mQualDataChecksum = new CRC32 ( ) ; }
FiringPlan guessBestFiringPlanUnderHeat ( Entity shooter , @ Nullable EntityState shooterState , Targetable target , @ Nullable EntityState targetState , int maxHeat , IGame game ) { if ( maxHeat < _NUM ) { maxHeat = _NUM ; } FiringPlan alphaStrike = guessFullFiringPlan ( shooter , shooterState , target , targetState , game ) ; if ( alphaStrike . getHeat ( ) <= maxHeat && ! ( shooter instanceof Infantry ) && ! ( shooter instanceof BattleArmor ) ) { return alphaStrike ; } FiringPlan heatPlans [ ] = calcFiringPlansUnderHeat ( shooter , alphaStrike ) ; Arrays . sort ( heatPlans ) ; if ( heatPlans . length > _NUM ) { return heatPlans [ _NUM ] ; } else { return new FiringPlan ( target ) ; } }
public static VolumeGroupRestRep map ( VolumeGroup from ) { if ( from == null ) { return null ; } VolumeGroupRestRep rep = new VolumeGroupRestRep ( ) ; mapDataObjectFields ( from , rep ) ; rep . setDescription ( from . getDescription ( ) ) ; rep . setRoles ( from . getRoles ( ) ) ; rep . setParent ( toRelatedResource ( ResourceTypeEnum . VOLUME_GROUP , from . getParent ( ) ) ) ; rep . setMigrationGroupBy ( from . getMigrationGroupBy ( ) ) ; rep . setMigrationType ( from . getMigrationType ( ) ) ; return rep ; }
public int postFiles ( String [ ] args , int startIndexInArgs , OutputStream out , String type ) { reset ( ) ; int filesPosted = _NUM ; for ( int j = startIndexInArgs ; j < args . length ; j ++ ) { File srcFile = new File ( args [ j ] ) ; if ( srcFile . isDirectory ( ) && srcFile . canRead ( ) ) { filesPosted += postDirectory ( srcFile , out , type ) ; } else if ( srcFile . isFile ( ) && srcFile . canRead ( ) ) { filesPosted += postFiles ( new File [ ] { srcFile } , out , type ) ; } else { File parent = srcFile . getParentFile ( ) ; if ( parent == null ) parent = new File ( _STR ) ; String fileGlob = srcFile . getName ( ) ; GlobFileFilter ff = new GlobFileFilter ( fileGlob , _BOOL ) ; File [ ] files = parent . listFiles ( ff ) ; if ( files == null || files . length == _NUM ) { warn ( _STR + srcFile ) ; continue ; } filesPosted += postFiles ( parent . listFiles ( ff ) , out , type ) ; } } return filesPosted ; }
@ Override public final String toString ( ) { if ( stringRep == null ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( this . name ) ; buffer . append ( _STR ) ; buffer . append ( Integer . toString ( this . defaultPort ) ) ; stringRep = buffer . toString ( ) ; } return stringRep ; }
public void clearSearchable ( ) { searchables . clear ( ) ; }
public void addActionListener ( ActionListener newListener ) { m_listeners . add ( newListener ) ; }
@ Deprecated public ShapelessRecipe addIngredient ( int count , Material ingredient , int rawdata ) { Validate . isTrue ( ingredients . size ( ) + count <= _NUM , _STR ) ; if ( rawdata == - _NUM ) { rawdata = Short . MAX_VALUE ; } while ( count -- > _NUM ) { ingredients . add ( new ItemStack ( ingredient , _NUM , ( short ) rawdata ) ) ; } return this ; }
public BatchedImageRequest ( Request < ? > request , ImageContainer container ) { mRequest = request ; mContainers . add ( container ) ; }
public String order ( ) { return mOrderBy . length ( ) > _NUM ? mOrderBy . toString ( ) : null ; }
static AxesWalker findClone ( AxesWalker key , Vector cloneList ) { if ( null != cloneList ) { int n = cloneList . size ( ) ; for ( int i = _NUM ; i < n ; i += _NUM ) { if ( key == cloneList . elementAt ( i ) ) return ( AxesWalker ) cloneList . elementAt ( i + _NUM ) ; } } return null ; }
public static byte [ ] encodingToBytes ( final String str , final String encoding ) { if ( str == null ) { return null ; } try { return str . getBytes ( encoding ) ; } catch ( final UnsupportedEncodingException e ) { throw new Error ( encoding + _STR + e ) ; } }
public static boolean looksLikeABGRepeat ( String val ) { return BACKGROUND_REPEATS . indexOf ( val ) >= _NUM ; }
public void before ( ) throws Throwable { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ) { ProcessBuilder processBuilder = new ProcessBuilder ( ) ; processBuilder . command ( _STR , _STR ) ; processBuilder . redirectErrorStream ( ) ; Process process = processBuilder . start ( ) ; process . waitFor ( ) ; if ( process . exitValue ( ) != _NUM ) { Log . e ( LOG_TAG , _STR + process . exitValue ( ) ) ; } } }
public void addMeta ( char meta , String replacement ) { metaCharacterSet . set ( meta ) ; replacementMap . put ( new String ( new char [ ] { meta } ) , replacement ) ; }
private Matches lookupDo ( Template tmpl , int maxMatches ) { if ( maxMatches < _NUM ) throw new IllegalArgumentException ( _STR ) ; int totalMatches = _NUM ; ArrayList matches = null ; ItemIter iter = matchingItems ( tmpl ) ; if ( maxMatches > _NUM || iter . dupsPossible ) matches = new ArrayList ( ) ; if ( iter . dupsPossible ) { while ( iter . hasNext ( ) ) { Item item = iter . next ( ) ; if ( ! matches . contains ( item ) ) matches . add ( item ) ; } totalMatches = matches . size ( ) ; if ( maxMatches > _NUM ) { for ( int i = matches . size ( ) ; -- i >= maxMatches ; ) matches . remove ( i ) ; for ( int i = matches . size ( ) ; -- i >= _NUM ; ) { matches . set ( i , copyItem ( ( Item ) matches . get ( i ) ) ) ; } } else { matches = null ; } } else { while ( iter . hasNext ( ) ) { Item item = iter . next ( ) ; totalMatches ++ ; if ( -- maxMatches >= _NUM ) matches . add ( copyItem ( item ) ) ; } } return new Matches ( matches , totalMatches ) ; }
public static List < History > findHistoryByJob ( EntityManager em , JPAEntity job , BigInteger limit ) { requireArgument ( em != null , _STR ) ; requireArgument ( job != null , _STR ) ; TypedQuery < History > query = em . createNamedQuery ( _STR , History . class ) ; if ( limit != null ) { query . setMaxResults ( limit . intValue ( ) ) ; } try { query . setParameter ( _STR , job ) ; return query . getResultList ( ) ; } catch ( NoResultException ex ) { return new ArrayList < History > ( _NUM ) ; } }
protected Character isWFXMLChar ( String chardata ) { Character refInvalidChar ; if ( chardata == null || ( chardata . length ( ) == _NUM ) ) { return null ; } char [ ] dataarray = chardata . toCharArray ( ) ; int datalength = dataarray . length ; if ( fIsXMLVersion11 ) { int i = _NUM ; while ( i < datalength ) { if ( XML11Char . isXML11Invalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - _NUM ] ; if ( XMLChar . isHighSurrogate ( ch ) && i < datalength ) { char ch2 = dataarray [ i ++ ] ; if ( XMLChar . isLowSurrogate ( ch2 ) && XMLChar . isSupplemental ( XMLChar . supplemental ( ch , ch2 ) ) ) { continue ; } } refInvalidChar = new Character ( ch ) ; return refInvalidChar ; } } } else { int i = _NUM ; while ( i < datalength ) { if ( XMLChar . isInvalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - _NUM ] ; if ( XMLChar . isHighSurrogate ( ch ) && i < datalength ) { char ch2 = dataarray [ i ++ ] ; if ( XMLChar . isLowSurrogate ( ch2 ) && XMLChar . isSupplemental ( XMLChar . supplemental ( ch , ch2 ) ) ) { continue ; } } refInvalidChar = new Character ( ch ) ; return refInvalidChar ; } } } return null ; }
public static String quote ( char ch ) { switch ( ch ) { case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; default : return ( isPrintableAscii ( ch ) ) ? String . valueOf ( ch ) : String . format ( _STR , ( int ) ch ) ; } }
private void updatePendingNodes ( final int newLandmarkIndex , final RouterPriorityQueue < Node > pendingNodes ) { final List < Double > newEstRemTravCosts = new ArrayList < > ( ) ; final List < Node > nodesToBeUpdated = new ArrayList < > ( ) ; final InternalLandmarkData landmarkData = new InternalLandmarkData ( ) ; for ( Node node : pendingNodes ) { final AStarNodeData role = getData ( node ) ; final PreProcessLandmarks . LandmarksData ppRole = preprocess . getNodeData ( node ) ; landmarkData . setDelegate ( ppRole ) ; final double newEstRemTravCost = estimateRemainingTravelCost ( landmarkData , newLandmarkIndex ) ; if ( newEstRemTravCost > role . getExpectedRemainingCost ( ) ) { nodesToBeUpdated . add ( node ) ; newEstRemTravCosts . add ( newEstRemTravCost ) ; } } for ( Node node : nodesToBeUpdated ) { pendingNodes . remove ( node ) ; } for ( int i = _NUM ; i < nodesToBeUpdated . size ( ) ; i ++ ) { final Node node = nodesToBeUpdated . get ( i ) ; final AStarNodeData data = getData ( node ) ; data . setExpectedRemainingCost ( newEstRemTravCosts . get ( i ) ) ; pendingNodes . add ( node , getPriority ( data ) ) ; } }
@ Override public String toString ( ) { StringBuffer buff = new StringBuffer ( ) ; if ( m_correlations == null ) { buff . append ( _STR ) ; } else { buff . append ( _STR ) ; if ( m_detailedOutput && m_detailedOutputBuff . length ( ) > _NUM ) { buff . append ( _STR ) ; buff . append ( m_detailedOutputBuff ) ; } } return buff . toString ( ) ; }
private void drawOverflowIndicator ( final Graphics g , int maxX ) { int width = _NUM ; int height = _NUM ; int xOffset = _NUM ; int stepSize = width / _NUM ; int dotSize = _NUM ; int x = maxX - width - xOffset ; int y = button . getSize ( ) . height - height ; g . setColor ( LIGHTER_GRAY ) ; g . fillRect ( x , y , width , width ) ; g . setColor ( Color . GRAY ) ; g . drawRoundRect ( x , y , width , width , _NUM , _NUM ) ; g . setColor ( Color . BLACK ) ; g . fillOval ( x + stepSize , y + _NUM , dotSize , dotSize ) ; g . fillOval ( x + stepSize * _NUM , y + _NUM , dotSize , dotSize ) ; g . fillOval ( x + stepSize * _NUM , y + _NUM , dotSize , dotSize ) ; g . dispose ( ) ; }
public void writeLine ( long time , float [ ] column ) { String str = Long . toString ( time ) ; for ( int i = _NUM ; i < column . length ; ++ i ) { str += _STR + column [ i ] ; } writer . println ( str ) ; }
public static boolean isPEM ( InputStream is ) { try { String startPEM = _STR ; int headerLength = _NUM ; byte [ ] preamble = new byte [ headerLength ] ; if ( is . read ( preamble , _NUM , headerLength ) > _NUM ) { String startArray = new String ( preamble ) ; return startArray . startsWith ( startPEM ) ; } return _BOOL ; } catch ( Exception e ) { throw new DSSException ( _STR ) ; } }
public CloseListener ( Object resource ) { _resource = resource ; }
@ Override public IndexRequest routing ( String routing ) { if ( routing != null && routing . length ( ) == _NUM ) { this . routing = null ; } else { this . routing = routing ; } return this ; }
public byte [ ] receive ( ) throws NetworkException { try { packet . setLength ( DatagramConnection . DEFAULT_DATAGRAM_SIZE ) ; connection . receive ( packet ) ; int packetLength = packet . getLength ( ) ; byte [ ] data = new byte [ packetLength ] ; System . arraycopy ( packet . getData ( ) , _NUM , data , _NUM , packetLength ) ; return data ; } catch ( IOException e ) { throw new NetworkException ( _STR , e ) ; } }
@ Override protected void forceDeleteAttributeAt ( int position ) { double [ ] newValues = new double [ m_AttValues . length - _NUM ] ; System . arraycopy ( m_AttValues , _NUM , newValues , _NUM , position ) ; if ( position < m_AttValues . length - _NUM ) { System . arraycopy ( m_AttValues , position + _NUM , newValues , position , m_AttValues . length - ( position + _NUM ) ) ; } m_AttValues = newValues ; }
public synchronized AlphabeticIndex addLabels ( Locale locale ) { addLabels ( peer , locale . toString ( ) ) ; return this ; }
protected byte [ ] engineWrap ( Key key ) throws IllegalBlockSizeException , InvalidKeyException { throw new UnsupportedOperationException ( ) ; }
@ Deprecated public JavaPluginLoader ( Server instance ) { Validate . notNull ( instance , _STR ) ; server = instance ; }
public void addSeparator ( ) { if ( log . isLoggable ( PlatformLogger . Level . FINER ) ) { log . finer ( _STR ) ; } }
public static boolean testSaveLocationExists ( ) { String sDCardStatus = Environment . getExternalStorageState ( ) ; boolean status ; if ( sDCardStatus . equals ( Environment . MEDIA_MOUNTED ) ) { status = _BOOL ; } else { status = _BOOL ; } return status ; }
private static Class < ? > loadClass ( URL [ ] urls , String name ) throws ClassNotFoundException { ClassLoader parent = getRMIContextClassLoader ( ) ; if ( loaderLog . isLoggable ( Log . VERBOSE ) ) { loaderLog . log ( Log . VERBOSE , _STR + parent + _STR ) ; } SecurityManager sm = System . getSecurityManager ( ) ; if ( sm == null ) { try { Class < ? > c = Class . forName ( name , _BOOL , parent ) ; if ( loaderLog . isLoggable ( Log . VERBOSE ) ) { loaderLog . log ( Log . VERBOSE , _STR + name + _STR + _STR + _STR + _STR + c . getClassLoader ( ) ) ; } return c ; } catch ( ClassNotFoundException e ) { if ( loaderLog . isLoggable ( Log . BRIEF ) ) { loaderLog . log ( Log . BRIEF , _STR + name + _STR + _STR + _STR , e ) ; } throw new ClassNotFoundException ( e . getMessage ( ) + _STR , e . getException ( ) ) ; } } Loader loader = lookupLoader ( urls , parent ) ; try { if ( loader != null ) { loader . checkPermissions ( ) ; } } catch ( SecurityException e ) { try { Class < ? > c = loadClassForName ( name , _BOOL , parent ) ; if ( loaderLog . isLoggable ( Log . VERBOSE ) ) { loaderLog . log ( Log . VERBOSE , _STR + name + _STR + _STR + _STR + _STR + c . getClassLoader ( ) ) ; } return c ; } catch ( ClassNotFoundException unimportant ) { if ( loaderLog . isLoggable ( Log . BRIEF ) ) { loaderLog . log ( Log . BRIEF , _STR + name + _STR + _STR + _STR , e ) ; } throw new ClassNotFoundException ( _STR , e ) ; } } try { Class < ? > c = loadClassForName ( name , _BOOL , loader ) ; if ( loaderLog . isLoggable ( Log . VERBOSE ) ) { loaderLog . log ( Log . VERBOSE , _STR + name + _STR + _STR + _STR + c . getClassLoader ( ) ) ; } return c ; } catch ( ClassNotFoundException e ) { if ( loaderLog . isLoggable ( Log . BRIEF ) ) { loaderLog . log ( Log . BRIEF , _STR + name + _STR , e ) ; } throw e ; } }
public static final List < INaviRawModule > loadRawModules ( final AbstractSQLProvider provider ) throws CouldntLoadDataException { Preconditions . checkNotNull ( provider , _STR ) ; final CConnection connection = provider . getConnection ( ) ; final List < INaviRawModule > modules = new ArrayList < INaviRawModule > ( ) ; if ( ! PostgreSQLHelpers . hasTable ( connection , CTableNames . RAW_MODULES_TABLE ) ) { return modules ; } final String query = _STR + CTableNames . RAW_MODULES_TABLE + _STR ; try ( ResultSet resultSet = connection . executeQuery ( query , _BOOL ) ) { while ( resultSet . next ( ) ) { final int rawModuleId = resultSet . getInt ( _STR ) ; final String name = PostgreSQLHelpers . readString ( resultSet , _STR ) ; final boolean isComplete = PostgreSQLDatabaseFunctions . checkRawModulesTables ( provider . getConnection ( ) , PostgreSQLHelpers . getDatabaseName ( provider . getConnection ( ) ) , rawModuleId ) ; final int functionCount = isComplete ? PostgreSQLDatabaseFunctions . getRawModuleFunctionCount ( connection , rawModuleId ) : _NUM ; final CRawModule module = new CRawModule ( rawModuleId , name , functionCount , isComplete , provider ) ; modules . add ( module ) ; } } catch ( final SQLException e ) { throw new CouldntLoadDataException ( e ) ; } return modules ; }
void write ( ImageOutputStream ios ) throws IOException { length = _NUM + data . length ; writeTag ( ios ) ; ios . write ( data ) ; }
public static int probRound ( double value , Random rand ) { if ( value >= _NUM ) { double lower = Math . floor ( value ) ; double prob = value - lower ; if ( rand . nextDouble ( ) < prob ) { return ( int ) lower + _NUM ; } else { return ( int ) lower ; } } else { double lower = Math . floor ( Math . abs ( value ) ) ; double prob = Math . abs ( value ) - lower ; if ( rand . nextDouble ( ) < prob ) { return - ( ( int ) lower + _NUM ) ; } else { return - ( int ) lower ; } } }
Map < String , TypeName > convertPropertiesToTypes ( Map < String , ExecutableElement > properties ) { Map < String , TypeName > types = new LinkedHashMap < String , TypeName > ( ) ; for ( Map . Entry < String , ExecutableElement > entry : properties . entrySet ( ) ) { ExecutableElement el = entry . getValue ( ) ; types . put ( entry . getKey ( ) , TypeName . get ( el . getReturnType ( ) ) ) ; } return types ; }
private static List < RegisterDescription > parseRegisterInformation ( final Node node ) throws MessageParserException { final List < RegisterDescription > registers = new ArrayList < > ( ) ; final NodeList nodes = node . getChildNodes ( ) ; for ( int i = _NUM ; i < nodes . getLength ( ) ; ++ i ) { final Node child = nodes . item ( i ) ; final String registerName = getAttribute ( child , _STR ) ; final String registerSize = getAttribute ( child , _STR ) ; final String registerEditable = getAttribute ( child , _STR ) ; registers . add ( new RegisterDescription ( registerName , Integer . valueOf ( registerSize ) , Boolean . valueOf ( registerEditable ) ) ) ; } return registers ; }
public NamedThreadFactory ( String namePrefix ) { this . namePrefix = Objects . requireNonNull ( namePrefix ) ; group = getThreadGroup ( ) ; daemon = _BOOL ; }
public void test_metric_cpu_num_uint16 ( ) { final IGangliaMetadataMessage decl = new GangliaMetadataMessage ( _STR , _STR , _BOOL , GangliaMessageTypeEnum . UINT16 , _STR , _STR , GangliaSlopeEnum . zero , _NUM , _NUM , AbstractMetrics . getMap ( IGangliaAttributes . GROUP_CPU , _STR , _STR ) ) ; assertEncodeDecode ( null , decl ) ; final IGangliaMetricMessage expected = new GangliaMetricMessage ( GangliaMessageTypeEnum . UINT16 , _STR , _STR , _BOOL , _STR , Integer . valueOf ( _NUM ) ) ; final byte [ ] actualData = assertEncodeDecode ( decl , expected ) ; final byte [ ] expectedData = new byte [ ] { _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; if ( ! Arrays . equals ( expectedData , actualData ) ) { fail ( _STR + Arrays . toString ( expectedData ) + _STR + Arrays . toString ( actualData ) ) ; } }
String formatNumberList ( TransformerImpl transformer , long [ ] list , int contextNode ) throws TransformerException { String numStr ; FastStringBuffer formattedNumber = StringBufferPool . get ( ) ; try { int nNumbers = list . length , numberWidth = _NUM ; char numberType = _STR ; String formatToken , lastSepString = null , formatTokenString = null ; String lastSep = _STR ; boolean isFirstToken = _BOOL ; String formatValue = ( null != m_format_avt ) ? m_format_avt . evaluate ( transformer . getXPathContext ( ) , contextNode , this ) : null ; if ( null == formatValue ) formatValue = _STR ; NumberFormatStringTokenizer formatTokenizer = new NumberFormatStringTokenizer ( formatValue ) ; for ( int i = _NUM ; i < nNumbers ; i ++ ) { if ( formatTokenizer . hasMoreTokens ( ) ) { formatToken = formatTokenizer . nextToken ( ) ; if ( Character . isLetterOrDigit ( formatToken . charAt ( formatToken . length ( ) - _NUM ) ) ) { numberWidth = formatToken . length ( ) ; numberType = formatToken . charAt ( numberWidth - _NUM ) ; } else if ( formatTokenizer . isLetterOrDigitAhead ( ) ) { formatTokenString = formatToken ; while ( formatTokenizer . nextIsSep ( ) ) { formatToken = formatTokenizer . nextToken ( ) ; formatTokenString += formatToken ; } if ( ! isFirstToken ) lastSep = formatTokenString ; formatToken = formatTokenizer . nextToken ( ) ; numberWidth = formatToken . length ( ) ; numberType = formatToken . charAt ( numberWidth - _NUM ) ; } else { lastSepString = formatToken ; while ( formatTokenizer . hasMoreTokens ( ) ) { formatToken = formatTokenizer . nextToken ( ) ; lastSepString += formatToken ; } } } if ( null != formatTokenString && isFirstToken ) { formattedNumber . append ( formatTokenString ) ; } else if ( null != lastSep && ! isFirstToken ) formattedNumber . append ( lastSep ) ; getFormattedNumber ( transformer , contextNode , numberType , numberWidth , list [ i ] , formattedNumber ) ; isFirstToken = _BOOL ; } while ( formatTokenizer . isLetterOrDigitAhead ( ) ) { formatTokenizer . nextToken ( ) ; } if ( lastSepString != null ) formattedNumber . append ( lastSepString ) ; while ( formatTokenizer . hasMoreTokens ( ) ) { formatToken = formatTokenizer . nextToken ( ) ; formattedNumber . append ( formatToken ) ; } numStr = formattedNumber . toString ( ) ; } finally { StringBufferPool . free ( formattedNumber ) ; } return numStr ; }
public int addColumn ( Object newCol , int length ) throws FitsException { if ( this . nFields > _NUM && Array . getLength ( newCol ) != this . nRows ) { throw new FitsException ( _STR ) ; } if ( this . nFields == _NUM ) { this . nRows = Array . getLength ( newCol ) ; } Object [ ] newData = new Object [ this . nFields + _NUM ] ; int [ ] newOffsets = new int [ this . nFields + _NUM ] ; int [ ] newLengths = new int [ this . nFields + _NUM ] ; Class < ? > [ ] newTypes = new Class [ this . nFields + _NUM ] ; String [ ] newNulls = new String [ this . nFields + _NUM ] ; System . arraycopy ( this . data , _NUM , newData , _NUM , this . nFields ) ; System . arraycopy ( this . offsets , _NUM , newOffsets , _NUM , this . nFields ) ; System . arraycopy ( this . lengths , _NUM , newLengths , _NUM , this . nFields ) ; System . arraycopy ( this . types , _NUM , newTypes , _NUM , this . nFields ) ; System . arraycopy ( this . nulls , _NUM , newNulls , _NUM , this . nFields ) ; this . data = newData ; this . offsets = newOffsets ; this . lengths = newLengths ; this . types = newTypes ; this . nulls = newNulls ; newData [ this . nFields ] = newCol ; this . offsets [ this . nFields ] = this . rowLen + _NUM ; this . lengths [ this . nFields ] = length ; this . types [ this . nFields ] = ArrayFuncs . getBaseClass ( newCol ) ; this . rowLen += length + _NUM ; if ( this . isNull != null ) { boolean [ ] newIsNull = new boolean [ this . nRows * ( this . nFields + _NUM ) ] ; int add = _NUM ; for ( int i = _NUM ; i < this . isNull . length ; i += _NUM ) { if ( i % this . nFields == _NUM ) { add += _NUM ; } if ( this . isNull [ i ] ) { newIsNull [ i + add ] = _BOOL ; } } this . isNull = newIsNull ; } this . nFields += _NUM ; this . buffer = null ; return this . nFields ; }
Deque < Block > schedule ( Block entry ) { Deque < Block > code = dfs ( entry ) ; Deque < Block > scheduled = new ArrayDeque < Block > ( ) ; SetMap < Block , Edge > pred = preds ( code ) ; Map < Block , Block > idom = idoms ( code , pred ) ; EdgeMap < Block > loops = findLoops ( code , idom , pred ) ; if ( ! loops . isEmpty ( ) ) verboseStatus ( _STR + loops ) ; for ( Block b : code ) { if ( ! scheduled . contains ( b ) ) scheduled . add ( b ) ; if ( loops . containsKey ( b ) ) schedule_loop ( b , loops , scheduled ) ; } Deque < Block > branch_analysis = new ArrayDeque < Block > ( ) ; branch_analysis . addAll ( scheduled ) ; Set < Block > already_seen = new HashSet < Block > ( ) ; while ( branch_analysis . size ( ) > _NUM ) { Block b = branch_analysis . removeFirst ( ) ; Expr last = b . last ( ) ; Block next = branch_analysis . peekFirst ( ) ; if ( isBranch ( last ) && last . succ [ _NUM ] . to != next && last . succ [ _NUM ] . to == next ) invert ( last ) ; already_seen . add ( b ) ; b . is_backwards_branch_target = _BOOL ; for ( Edge s : b . succ ( ) ) { s . to . is_backwards_branch_target |= s . is_backwards_branch = already_seen . contains ( s . to ) ; } } if ( verbose_mode ) for ( Block b : code ) if ( b . is_backwards_branch_target ) verboseStatus ( _STR + b ) ; return scheduled ; }
public void addTransaction ( SIPServerTransaction serverTransaction ) throws IOException { if ( logger . isLoggingEnabled ( LogWriter . TRACE_DEBUG ) ) logger . logDebug ( _STR + serverTransaction ) ; serverTransaction . map ( ) ; addTransactionHash ( serverTransaction ) ; }
private void delayRetry ( int multiplier ) { debug ( _STR ) ; try { Thread . sleep ( _NUM * multiplier ) ; } catch ( InterruptedException e ) { warn ( e , _STR ) ; } }
public void testSplitAndJoinSemicolonNestedInPipeProperties ( ) { Properties outer = PropertyUtils . splitPropertiesOnPipe ( ONE_THEN_TWO_OUTER_A ) ; assertEquals ( ONE_SEMI_TWO , outer . getProperty ( _STR ) ) ; assertEquals ( _NUM , outer . size ( ) ) ; try { assertEquals ( ONE_THEN_TWO_OUTER_A , PropertyUtils . joinOnPipe ( PropertyUtils . toMap ( outer ) ) ) ; return ; } catch ( ComparisonFailure deviation1 ) { } try { assertEquals ( TWO_THEN_ONE_OUTER_A , PropertyUtils . joinOnPipe ( PropertyUtils . toMap ( outer ) ) ) ; return ; } catch ( ComparisonFailure deviation2 ) { } try { assertEquals ( ONE_THEN_TWO_OUTER_B , PropertyUtils . joinOnPipe ( PropertyUtils . toMap ( outer ) ) ) ; return ; } catch ( ComparisonFailure deviation3 ) { } try { assertEquals ( TWO_THEN_ONE_OUTER_B , PropertyUtils . joinOnPipe ( PropertyUtils . toMap ( outer ) ) ) ; return ; } catch ( ComparisonFailure deviation4 ) { } assertEquals ( TWO_THEN_ONE_OUTER_A , PropertyUtils . joinOnPipe ( PropertyUtils . toMap ( outer ) ) ) ; }
public void testIntBooleanMap ( ) throws Exception { ObjectMapper mapper = new ObjectMapper ( ) ; String JSON = _STR ; Map < String , Integer > result = mapper . readValue ( JSON , new TypeReference < HashMap < Integer , Boolean > > ( ) { } ) ; assertNotNull ( result ) ; assertEquals ( HashMap . class , result . getClass ( ) ) ; assertEquals ( _NUM , result . size ( ) ) ; assertEquals ( Boolean . TRUE , result . get ( Integer . valueOf ( _NUM ) ) ) ; assertEquals ( Boolean . FALSE , result . get ( Integer . valueOf ( - _NUM ) ) ) ; assertNull ( result . get ( _STR ) ) ; assertNull ( result . get ( _NUM ) ) ; }
@ Override public boolean isBusy ( ) { return _BOOL ; }
protected ByteArrayOutputStream parseBytes ( ByteArrayOutputStream bos ) throws IOException { int ch ; for ( ch = skipWhitespace ( ) ; ch >= _NUM && ch != _STR ; ch = skipWhitespace ( ) ) { int b1 = ch ; int b2 = read ( ) ; int b3 = read ( ) ; int b4 = read ( ) ; if ( b4 != _STR ) { int chunk = ( ( base64Decode [ b1 ] << _NUM ) + ( base64Decode [ b2 ] << _NUM ) + ( base64Decode [ b3 ] << _NUM ) + ( base64Decode [ b4 ] ) ) ; bos . write ( chunk > > _NUM ) ; bos . write ( chunk > > _NUM ) ; bos . write ( chunk ) ; } else if ( b3 != _STR ) { int chunk = ( ( base64Decode [ b1 ] << _NUM ) + ( base64Decode [ b2 ] << _NUM ) + ( base64Decode [ b3 ] > > _NUM ) ) ; bos . write ( chunk > > _NUM ) ; bos . write ( chunk ) ; } else { int chunk = ( ( base64Decode [ b1 ] << _NUM ) + ( base64Decode [ b2 ] > > _NUM ) ) ; bos . write ( chunk ) ; } } if ( ch == _STR ) _peek = ch ; return bos ; }
public void reset ( ) { if ( mDownloadBandwidth != null ) { mDownloadBandwidth . reset ( ) ; } mCurrentBandwidthConnectionQuality . set ( ConnectionQuality . UNKNOWN ) ; }
public void testMergeSecurityRoleIntoEmptyDocument ( ) throws Exception { String srcXml = _STR ; WebXml srcWebXml = WebXmlIo . parseWebXml ( new ByteArrayInputStream ( srcXml . getBytes ( _STR ) ) , null ) ; String mergeXml = _STR + _STR + _STR + _STR + _STR ; WebXml mergeWebXml = WebXmlIo . parseWebXml ( new ByteArrayInputStream ( mergeXml . getBytes ( _STR ) ) , null ) ; WebXmlMerger merger = new WebXmlMerger ( srcWebXml ) ; merger . merge ( mergeWebXml ) ; List < String > securityRoleNames = WebXmlUtils . getSecurityRoleNames ( srcWebXml ) ; assertEquals ( _NUM , securityRoleNames . size ( ) ) ; assertEquals ( _STR , securityRoleNames . get ( _NUM ) ) ; }
private DiffPart decodeFullRevision ( final int blockSize_L ) throws UnsupportedEncodingException , DecodingException { if ( blockSize_L < _NUM ) { throw new DecodingException ( _STR + blockSize_L ) ; } int l = r . read ( blockSize_L ) ; ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; for ( int i = _NUM ; i < l ; i ++ ) { output . write ( r . readByte ( ) ) ; } DiffPart part = new DiffPart ( DiffAction . FULL_REVISION_UNCOMPRESSED ) ; part . setText ( output . toString ( WIKIPEDIA_ENCODING ) ) ; return part ; }
private synchronized static void removeChildCharacterData ( Node node , boolean deep ) { NodeList list = node . getChildNodes ( ) ; for ( int i = list . getLength ( ) ; i >= _NUM ; i -- ) { Node n = list . item ( i ) ; if ( n == null ) continue ; if ( n instanceof CharacterData ) node . removeChild ( XMLCaster . toRawNode ( n ) ) ; else if ( deep ) removeChildCharacterData ( n , deep ) ; } }
void unlink ( Node < E > p , Node < E > trail ) { p . item = null ; trail . next = p . next ; if ( last == p ) last = trail ; if ( count . getAndDecrement ( ) == capacity ) notFull . signal ( ) ; }
private void loadCorpus ( String source , String target , String align ) throws IOException { logger . info ( _STR ) ; TimeKeeper timer = TimingUtils . start ( ) ; int numSourcePositions = _NUM ; int numTargetPositions = _NUM ; numSentences = _NUM ; ParallelCorpus corpus = new ParallelCorpus ( _NUM ) ; try ( LineNumberReader fReader = IOTools . getReaderFromFile ( source ) ) { LineNumberReader eReader = IOTools . getReaderFromFile ( target ) ; LineNumberReader aReader = IOTools . getReaderFromFile ( align ) ; for ( String fLine ; ( fLine = fReader . readLine ( ) ) != null ; ) { String eLine = eReader . readLine ( ) ; String aLine = aReader . readLine ( ) ; AlignedSentence example = corpus . getSentence ( fLine , eLine , aLine ) ; if ( example != null ) { numSourcePositions += example . sourceLength ( ) ; numTargetPositions += example . targetLength ( ) ; ++ numSentences ; } } } final int initialVocabularySize = corpus . getVocabulary ( ) . size ( ) ; timer . mark ( _STR ) ; logger . info ( _STR , numSourcePositions , numTargetPositions , numSentences ) ; final int srcLength = numSourcePositions + numSentences ; if ( srcLength < _NUM ) throw new RuntimeException ( _STR ) ; srcBitext = new int [ srcLength ] ; f2e = new int [ srcLength ] ; final int tgtLength = numTargetPositions + numSentences ; if ( tgtLength < _NUM ) throw new RuntimeException ( _STR ) ; tgtBitext = new int [ tgtLength ] ; e2f = new int [ tgtLength ] ; try ( LineNumberReader fReader = IOTools . getReaderFromFile ( source ) ) { LineNumberReader eReader = IOTools . getReaderFromFile ( target ) ; LineNumberReader aReader = IOTools . getReaderFromFile ( align ) ; int srcOffset = _NUM ; int tgtOffset = _NUM ; for ( String fLine ; ( fLine = fReader . readLine ( ) ) != null ; ) { String eLine = eReader . readLine ( ) ; String aLine = aReader . readLine ( ) ; AlignedSentence sentence = corpus . getSentence ( fLine , eLine , aLine ) ; if ( sentence == null ) { logger . info ( _STR , fReader . getLineNumber ( ) ) ; } else { System . arraycopy ( sentence . source , _NUM , srcBitext , srcOffset , sentence . sourceLength ( ) ) ; System . arraycopy ( sentence . f2e , _NUM , f2e , srcOffset , sentence . f2e . length ) ; System . arraycopy ( sentence . target , _NUM , tgtBitext , tgtOffset , sentence . targetLength ( ) ) ; System . arraycopy ( sentence . e2f , _NUM , e2f , tgtOffset , sentence . e2f . length ) ; srcOffset += sentence . sourceLength ( ) ; tgtOffset += sentence . targetLength ( ) ; srcBitext [ srcOffset ] = toSentenceOffset ( tgtOffset ) ; tgtBitext [ tgtOffset ] = toSentenceOffset ( srcOffset ) ; ++ srcOffset ; ++ tgtOffset ; } } } this . vocabulary = corpus . getVocabulary ( ) ; assert initialVocabularySize == vocabulary . size ( ) ; timer . mark ( _STR ) ; logger . info ( _STR , timer ) ; }
public static float mixFriction ( float friction1 , float friction2 ) { return MathUtils . sqrt ( friction1 * friction2 ) ; }
public String serialize ( Object obj , String contentType ) throws ApiException { if ( contentType . startsWith ( _STR ) ) { return json . serialize ( obj ) ; } else { throw new ApiException ( _NUM , _STR + contentType ) ; } }
private boolean compileSWsequenceZR ( int baseRegister , int [ ] offsets , int [ ] registers ) { for ( int i = _NUM ; i < registers . length ; i ++ ) { if ( registers [ i ] != _zr ) { return _BOOL ; } } for ( int i = _NUM ; i < offsets . length ; i ++ ) { if ( offsets [ i ] != offsets [ i - _NUM ] + _NUM ) { return _BOOL ; } } int offset = offsets [ _NUM ] ; int length = offsets . length ; do { int copyLength = Math . min ( length , FastMemory . zero . length ) ; mv . visitFieldInsn ( Opcodes . GETSTATIC , Type . getInternalName ( FastMemory . class ) , _STR , _STR ) ; loadImm ( _NUM ) ; loadMemoryInt ( ) ; prepareMemIndex ( baseRegister , offset , _BOOL , _NUM ) ; loadImm ( copyLength ) ; mv . visitMethodInsn ( Opcodes . INVOKESTATIC , Type . getInternalName ( System . class ) , _STR , arraycopyDescriptor ) ; length -= copyLength ; offset += copyLength ; } while ( length > _NUM ) ; return _BOOL ; }
private boolean isNativeVolumeExpansionSupported ( Volume vplexVolume , Long newSize ) { boolean useNativeVolumeExpansion = _BOOL ; StringSet assocVolumeIds = vplexVolume . getAssociatedVolumes ( ) ; if ( null == assocVolumeIds ) { s_logger . warn ( _STR , vplexVolume . forDisplay ( ) ) ; useNativeVolumeExpansion = _BOOL ; } else { for ( String assocVolumeId : assocVolumeIds ) { Volume assocVolume = _permissionsHelper . getObjectById ( URI . create ( assocVolumeId ) , Volume . class ) ; try { super . verifyVolumeExpansionRequest ( assocVolume , newSize ) ; } catch ( Exception e ) { useNativeVolumeExpansion = _BOOL ; break ; } } } return useNativeVolumeExpansion ; }
public void updateGUI ( RosterEntry r ) { roadName . setText ( r . getRoadName ( ) ) ; roadNumber . setText ( r . getRoadNumber ( ) ) ; mfg . setText ( r . getMfg ( ) ) ; owner . setText ( r . getOwner ( ) ) ; model . setText ( r . getModel ( ) ) ; comment . setText ( r . getComment ( ) ) ; decoderModel . setText ( r . getDecoderModel ( ) ) ; decoderFamily . setText ( r . getDecoderFamily ( ) ) ; decoderComment . setText ( r . getDecoderComment ( ) ) ; dateUpdated . setText ( r . getDateUpdated ( ) ) ; maxSpeedSpinner . setValue ( Integer . valueOf ( r . getMaxSpeedPCT ( ) ) ) ; }
public static Double oizp ( Number value ) { if ( value == null ) { return null ; } return ( value . doubleValue ( ) >= _NUM ) ? _NUM : _NUM ; }
public TerminalSize with ( TerminalSize size ) { if ( equals ( size ) ) { return this ; } return size ; }
private boolean isGzipAllowed ( final HttpServletRequest request ) { return ! DispatcherStreamLocator . isIncludedRequest ( request ) && WroUtil . isGzipSupported ( request ) ; }
public ReplayProcessor ( int bufferSize , boolean unbounded ) { if ( unbounded ) { this . buffer = new UnboundedBuffer < > ( bufferSize ) ; } else { this . buffer = new BoundedBuffer < > ( bufferSize ) ; } SUBSCRIBERS . lazySet ( this , EMPTY ) ; }
protected void onShowConversations ( @ NonNull List < C > conversations ) { if ( DEBUG ) { Log . d ( TAG , _STR + conversations . size ( ) + _STR ) ; } mView . showConversations ( new ArrayList < > ( conversations ) ) ; }
protected int read ( ) throws IOException { if ( offset == buffer . length ) { throw new ASN1Exception ( _STR ) ; } if ( in == null ) { return buffer [ offset ++ ] & _NUM ; } else { int octet = in . read ( ) ; if ( octet == - _NUM ) { throw new ASN1Exception ( _STR ) ; } buffer [ offset ++ ] = ( byte ) octet ; return octet ; } }
public void enqueueJob ( final Runnable job ) { synchronized ( mSleepSync ) { if ( hasJob ( ) ) { throw new IllegalStateException ( _STR ) ; } setJob ( job ) ; mSleepSync . notifyAll ( ) ; } }
public void testSetNull_int_int ( ) throws SQLException { PreparedStatement ps = null ; try { String query = _STR ; ps = conn . prepareStatement ( query ) ; Statement st = null ; try { ps . setNull ( _NUM , Types . INTEGER ) ; ps . execute ( ) ; } finally { try { ps . close ( ) ; } catch ( Exception ee ) { } } query = _STR ; ps = conn . prepareStatement ( query ) ; try { ps . setNull ( _NUM , Types . BIGINT ) ; ps . execute ( ) ; } finally { try { ps . close ( ) ; } catch ( Exception ee ) { } } query = _STR ; ps = conn . prepareStatement ( query ) ; try { ps . setNull ( _NUM , Types . DECIMAL ) ; ps . execute ( ) ; } finally { try { ps . close ( ) ; } catch ( Exception ee ) { } } query = _STR ; ps = conn . prepareStatement ( query ) ; try { ps . setNull ( _NUM , Types . DATE ) ; ps . execute ( ) ; } finally { try { ps . close ( ) ; } catch ( Exception ee ) { } } query = _STR ; ps = conn . prepareStatement ( query ) ; try { ps . setNull ( _NUM , Types . BLOB ) ; ps . execute ( ) ; } finally { try { ps . close ( ) ; } catch ( Exception ee ) { } } query = _STR ; ps = conn . prepareStatement ( query ) ; ps . setNull ( _NUM , Types . CHAR ) ; ps . execute ( ) ; } finally { try { ps . close ( ) ; } catch ( Exception ee ) { } } }
public void testTestBitPositive2 ( ) { byte aBytes [ ] = { - _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = _NUM ; int number = _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; assertTrue ( aNumber . testBit ( number ) ) ; }
public void startElement ( String uri , String localName , String qName , Attributes attributes ) throws org . xml . sax . SAXException { if ( qName . equals ( PrintData . XML_TAG ) ) { String name = attributes . getValue ( PrintData . XML_ATTRIBUTE_NAME ) ; if ( m_pd == null ) { m_pd = new PrintData ( m_ctx , name ) ; push ( m_pd ) ; } else { PrintData temp = new PrintData ( m_ctx , name ) ; m_curPD . addNode ( temp ) ; push ( temp ) ; } } else if ( qName . equals ( PrintData . XML_ROW_TAG ) ) { m_curPD . addRow ( _BOOL , _NUM ) ; } else if ( qName . equals ( PrintDataElement . XML_TAG ) ) { m_curPDEname = attributes . getValue ( PrintDataElement . XML_ATTRIBUTE_NAME ) ; m_curPDEvalue = new StringBuffer ( ) ; } }
public synchronized int updatePurchase ( String orderId , String productId , PurchaseState purchaseState , long purchaseTime , String developerPayload ) { insertOrder ( orderId , productId , purchaseState , purchaseTime , developerPayload ) ; Cursor cursor = mDb . query ( PURCHASE_HISTORY_TABLE_NAME , HISTORY_COLUMNS , HISTORY_PRODUCT_ID_COL + _STR , new String [ ] { productId } , null , null , null , null ) ; if ( cursor == null ) { return _NUM ; } int quantity = _NUM ; try { while ( cursor . moveToNext ( ) ) { int stateIndex = cursor . getInt ( _NUM ) ; PurchaseState state = PurchaseState . valueOf ( stateIndex ) ; if ( state == PurchaseState . PURCHASED || state == PurchaseState . REFUNDED ) { quantity += _NUM ; } } updatePurchasedItem ( productId , quantity ) ; } finally { if ( cursor != null ) { cursor . close ( ) ; } } return quantity ; }
public void drawString ( String str , int x , int y , int textDecoration ) { if ( str . length ( ) == _NUM || ( str . length ( ) == _NUM && str . charAt ( _NUM ) == _STR ) ) { return ; } Object nativeFont = null ; if ( current != null ) { nativeFont = current . getNativeFont ( ) ; } if ( current instanceof CustomFont ) { current . drawString ( this , str , x , y ) ; } else { impl . drawString ( nativeGraphics , nativeFont , str , x + xTranslate , y + yTranslate , textDecoration ) ; } }
@ Override public int read ( char [ ] array , int offset , int length ) { if ( idx >= charSequence . length ( ) ) { return - _NUM ; } if ( array == null ) { throw new NullPointerException ( _STR ) ; } if ( length < _NUM || offset < _NUM || offset + length > array . length ) { throw new IndexOutOfBoundsException ( _STR + array . length + _STR + offset + _STR + length ) ; } int count = _NUM ; for ( int i = _NUM ; i < length ; i ++ ) { int c = read ( ) ; if ( c == - _NUM ) { return count ; } array [ offset + i ] = ( char ) c ; count ++ ; } return count ; }
public void updateNonceParameters ( ) { if ( mNextNonce . equals ( mNonce ) ) { mCnonceCounter ++ ; } else { mCnonceCounter = _NUM ; mNonce = mNextNonce ; } }
@ Override public void acceptInstance ( InstanceEvent e ) { if ( e . getStatus ( ) == InstanceEvent . FORMAT_AVAILABLE ) { m_connectedFormat = e . getStructure ( ) ; m_stopRequested . set ( _BOOL ) ; try { init ( new Instances ( e . getStructure ( ) , _NUM ) ) ; } catch ( IllegalArgumentException ex ) { if ( m_log != null ) { String message = _STR ; stopWithErrorMessage ( message , ex ) ; return ; } } String buffSize = m_bufferSize ; try { buffSize = m_env . substitute ( buffSize ) ; m_bufferSizeI = Integer . parseInt ( buffSize ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } m_incrementalBuffer = new ArrayList < InstanceHolder > ( m_bufferSizeI ) ; m_bufferFiles = new ArrayList < File > ( ) ; m_streamCounter = _NUM ; return ; } m_busy = _BOOL ; if ( e . getInstance ( ) != null ) { if ( m_streamCounter == _NUM ) { if ( m_log != null ) { m_log . statusMessage ( statusMessagePrefix ( ) + _STR ) ; m_log . logMessage ( _STR + statusMessagePrefix ( ) + _STR + m_bufferSizeI ) ; } } InstanceHolder tempH = new InstanceHolder ( ) ; tempH . m_instance = e . getInstance ( ) ; tempH . m_fileNumber = - _NUM ; if ( m_stringAttIndexes != null ) { copyStringAttVals ( tempH ) ; } m_incrementalBuffer . add ( tempH ) ; m_streamCounter ++ ; } if ( e . getInstance ( ) == null || e . getStatus ( ) == InstanceEvent . BATCH_FINISHED ) { emitBufferedInstances ( ) ; return ; } else if ( m_incrementalBuffer . size ( ) == m_bufferSizeI ) { try { sortBuffer ( _BOOL ) ; } catch ( Exception ex ) { String msg = statusMessagePrefix ( ) + _STR ; stopWithErrorMessage ( msg , ex ) ; m_busy = _BOOL ; return ; } } m_busy = _BOOL ; }
private void matchVPools ( URI rpSystemId ) { List < URI > storagePoolIds = ConnectivityUtil . getRPSystemStoragePools ( _dbClient , rpSystemId ) ; StringBuffer errorMessage = new StringBuffer ( ) ; if ( storagePoolIds != null && ! storagePoolIds . isEmpty ( ) ) { List < StoragePool > storagePools = _dbClient . queryObject ( StoragePool . class , storagePoolIds ) ; ImplicitPoolMatcher . matchModifiedStoragePoolsWithAllVirtualPool ( storagePools , _dbClient , _coordinator , errorMessage ) ; } }
public static BigDecimal calculateFee ( Player player , int price ) { BigDecimal fee = BigDecimal . valueOf ( price ) ; fee = fee . multiply ( BigDecimal . valueOf ( TRADING_FEE_PERCENTAGE ) ) ; if ( player . isBadBoy ( ) ) { fee = fee . multiply ( BigDecimal . valueOf ( _NUM + TRADING_FEE_PLAYER_KILLER_PENALTY ) ) ; } BigDecimal feeBonus = BigDecimal . ONE ; feeBonus = BigDecimal . valueOf ( Math . exp ( - player . getTradescore ( ) / FEE_BONUS_CONSTANT ) ) ; fee = fee . multiply ( feeBonus ) ; return fee . max ( BigDecimal . ONE ) ; }
private static ResultPoint [ ] findVertices180 ( BitMatrix matrix , boolean tryHarder ) { int height = matrix . getHeight ( ) ; int width = matrix . getWidth ( ) ; int halfWidth = width > > _NUM ; ResultPoint [ ] result = new ResultPoint [ _NUM ] ; boolean found = _BOOL ; int [ ] counters = new int [ START_PATTERN_REVERSE . length ] ; int rowStep = Math . max ( _NUM , height > > ( tryHarder ? _NUM : _NUM ) ) ; for ( int i = height - _NUM ; i > _NUM ; i -= rowStep ) { int [ ] loc = findGuardPattern ( matrix , halfWidth , i , halfWidth , _BOOL , START_PATTERN_REVERSE , counters ) ; if ( loc != null ) { result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; found = _BOOL ; break ; } } if ( found ) { found = _BOOL ; for ( int i = _NUM ; i < height ; i += rowStep ) { int [ ] loc = findGuardPattern ( matrix , halfWidth , i , halfWidth , _BOOL , START_PATTERN_REVERSE , counters ) ; if ( loc != null ) { result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; found = _BOOL ; break ; } } } counters = new int [ STOP_PATTERN_REVERSE . length ] ; if ( found ) { found = _BOOL ; for ( int i = height - _NUM ; i > _NUM ; i -= rowStep ) { int [ ] loc = findGuardPattern ( matrix , _NUM , i , halfWidth , _BOOL , STOP_PATTERN_REVERSE , counters ) ; if ( loc != null ) { result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; found = _BOOL ; break ; } } } if ( found ) { found = _BOOL ; for ( int i = _NUM ; i < height ; i += rowStep ) { int [ ] loc = findGuardPattern ( matrix , _NUM , i , halfWidth , _BOOL , STOP_PATTERN_REVERSE , counters ) ; if ( loc != null ) { result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; result [ _NUM ] = new ResultPoint ( loc [ _NUM ] , i ) ; found = _BOOL ; break ; } } } return found ? result : null ; }
private void addSearchHistory ( ) { addSearchHistory ( tfSearchEditor . getText ( ) ) ; }
ArrayList < SourceFile > trimFileList ( ArrayList < SourceFile > files ) { HashMap < String , String > names = new HashMap < String , String > ( ) ; ArrayList < SourceFile > list = new ArrayList < SourceFile > ( ) ; int size = files . size ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { boolean addIt = _BOOL ; SourceFile fi = files . get ( i ) ; String fName = fi . getRawName ( ) ; if ( m_swfFilter == null ) { if ( names . get ( fName ) == null ) addIt = _BOOL ; } else { addIt = m_swfFilter . containsSource ( fi ) ; } if ( addIt ) { names . put ( fName , fName ) ; list . add ( fi ) ; } } return list ; }
public static String join ( double [ ] self , String separator ) { StringBuilder buffer = new StringBuilder ( ) ; boolean first = _BOOL ; if ( separator == null ) separator = _STR ; for ( double next : self ) { if ( first ) { first = _BOOL ; } else { buffer . append ( separator ) ; } buffer . append ( next ) ; } return buffer . toString ( ) ; }
protected void writeShort ( int value ) throws IOException { out . write ( value & _NUM ) ; out . write ( ( value > > _NUM ) & _NUM ) ; }
public EntityQuery orderBy ( String ... fields ) { this . orderBy = Arrays . asList ( fields ) ; return this ; }
public StemmedString ( String orig , String stemmed ) { strOrig = orig ; strStemmed = stemmed ; }
public LogNetworkStreamMerger ( LogRequest req , MediaType mediaType , LogSvcPropertiesLoader propertiesLoader ) { logger . trace ( _STR ) ; this . request = req ; this . mediaType = mediaType ; this . propertiesLoader = propertiesLoader ; List < LogNetworkReader > readers = getLogNetworkStreams ( ) ; int size = readers . size ( ) ; logHeads = new LogMessage [ size ] ; this . logStreamList = new LogNetworkReader [ size ] ; int index = _NUM ; for ( LogNetworkReader reader : readers ) { logStreamList [ index ] = reader ; logHeads [ index ] = null ; index ++ ; } }
public static String packCipherSuites ( String [ ] ciphers ) { String cipherSet = null ; if ( ciphers != null ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = _NUM ; i < ciphers . length ; i ++ ) { buf . append ( ciphers [ i ] ) ; if ( i < ciphers . length - _NUM ) { buf . append ( _STR ) ; } } cipherSet = buf . toString ( ) ; } return cipherSet ; }
public ExtensionFileFilter ( String description , String extension ) { this . description = description ; this . extensions = new HashSet < String > ( ) ; extensions . add ( extension . toLowerCase ( ) ) ; defaultExtension = extension ; }
private void ensureTupleArray ( int row ) { int nrows = Math . max ( m_table . getRowCount ( ) , row + _NUM ) ; if ( m_tuples == null ) { m_tuples = new TableTuple [ nrows ] ; } else if ( m_tuples . length < nrows ) { int capacity = Math . max ( ( _NUM * m_tuples . length ) / _NUM + _NUM , nrows ) ; TableTuple [ ] tuples = new TableTuple [ capacity ] ; System . arraycopy ( m_tuples , _NUM , tuples , _NUM , m_tuples . length ) ; m_tuples = tuples ; } }
private static boolean isAnArgument ( final String arg ) { return ( arg . startsWith ( _STR ) && ( arg . length ( ) > _NUM ) && ! Character . isDigit ( arg . charAt ( _NUM ) ) ) ; }
private synchronized static void removeChildren ( Node node , short type , boolean deep ) { NodeList list = node . getChildNodes ( ) ; for ( int i = list . getLength ( ) ; i >= _NUM ; i -- ) { Node n = list . item ( i ) ; if ( n == null ) continue ; if ( n . getNodeType ( ) == type || type == UNDEFINED_NODE ) node . removeChild ( XMLCaster . toRawNode ( n ) ) ; else if ( deep ) removeChildren ( n , type , deep ) ; } }
public final void lazySet ( V newValue ) { unsafe . putOrderedObject ( this , valueOffset , newValue ) ; }
public boolean isValidSavepoint ( Savepoint sp ) { if ( isSource ( ) ) return _BOOL ; boolean result = _BOOL ; if ( sp != null ) result = _BOOL ; return result ; }
public static void columnsFor ( ResultSet resultSet , TableEditor editor ) throws SQLException { List < Column > columns = new ArrayList < > ( ) ; columnsFor ( resultSet , null ) ; editor . setColumns ( columns ) ; }
private static void write ( Collection < String > src , File out ) throws IOException { try ( Writer writer = new BufferedWriter ( new FileWriter ( out ) ) ) { for ( String line : src ) writer . write ( line + _STR ) ; } }
public void clear ( ) { if ( mOriginalValues != null ) { synchronized ( mLock ) { mOriginalValues . clear ( ) ; } } else { mObjects . clear ( ) ; } if ( mNotifyOnChange ) notifyDataSetChanged ( ) ; }
private long resetUidValidity ( ) throws IOException { long timestamp = System . currentTimeMillis ( ) ; setUidValidity ( timestamp ) ; return timestamp ; }
public final ArrayList < Move > pseudoLegalMoves ( Position pos ) { ArrayList < Move > moveList = getMoveListObj ( ) ; final boolean wtm = pos . whiteMove ; for ( int x = _NUM ; x < _NUM ; x ++ ) { for ( int y = _NUM ; y < _NUM ; y ++ ) { int sq = Position . getSquare ( x , y ) ; int p = pos . getPiece ( sq ) ; if ( ( p == Piece . EMPTY ) || ( Piece . isWhite ( p ) != wtm ) ) { continue ; } if ( ( p == Piece . WROOK ) || ( p == Piece . BROOK ) || ( p == Piece . WQUEEN ) || ( p == Piece . BQUEEN ) ) { if ( addDirection ( moveList , pos , sq , _NUM - x , _NUM ) ) return moveList ; if ( addDirection ( moveList , pos , sq , _NUM - y , _NUM ) ) return moveList ; if ( addDirection ( moveList , pos , sq , x , - _NUM ) ) return moveList ; if ( addDirection ( moveList , pos , sq , y , - _NUM ) ) return moveList ; } if ( ( p == Piece . WBISHOP ) || ( p == Piece . BBISHOP ) || ( p == Piece . WQUEEN ) || ( p == Piece . BQUEEN ) ) { if ( addDirection ( moveList , pos , sq , Math . min ( _NUM - x , _NUM - y ) , _NUM ) ) return moveList ; if ( addDirection ( moveList , pos , sq , Math . min ( x , _NUM - y ) , _NUM ) ) return moveList ; if ( addDirection ( moveList , pos , sq , Math . min ( x , y ) , - _NUM ) ) return moveList ; if ( addDirection ( moveList , pos , sq , Math . min ( _NUM - x , y ) , - _NUM ) ) return moveList ; } if ( ( p == Piece . WKNIGHT ) || ( p == Piece . BKNIGHT ) ) { if ( x < _NUM && y < _NUM && addDirection ( moveList , pos , sq , _NUM , _NUM ) ) return moveList ; if ( x < _NUM && y < _NUM && addDirection ( moveList , pos , sq , _NUM , _NUM ) ) return moveList ; if ( x > _NUM && y < _NUM && addDirection ( moveList , pos , sq , _NUM , _NUM ) ) return moveList ; if ( x > _NUM && y < _NUM && addDirection ( moveList , pos , sq , _NUM , _NUM ) ) return moveList ; if ( x > _NUM && y > _NUM && addDirection ( moveList , pos , sq , _NUM , - _NUM ) ) return moveList ; if ( x > _NUM && y > _NUM && addDirection ( moveList , pos , sq , _NUM , - _NUM ) ) return moveList ; if ( x < _NUM && y > _NUM && addDirection ( moveList , pos , sq , _NUM , - _NUM ) ) return moveList ; if ( x < _NUM && y > _NUM && addDirection ( moveList , pos , sq , _NUM , - _NUM ) ) return moveList ; } if ( ( p == Piece . WKING ) || ( p == Piece . BKING ) ) { if ( x < _NUM && addDirection ( moveList , pos , sq , _NUM , _NUM ) ) return moveList ; if ( x < _NUM && y < _NUM && addDirection ( moveList , pos , sq , _NUM , _NUM ) ) return moveList ; if ( y < _NUM && addDirection ( moveList , pos , sq , _NUM , _NUM ) ) return moveList ; if ( x > _NUM && y < _NUM && addDirection ( moveList , pos , sq , _NUM , _NUM ) ) return moveList ; if ( x > _NUM && addDirection ( moveList , pos , sq , _NUM , - _NUM ) ) return moveList ; if ( x > _NUM && y > _NUM && addDirection ( moveList , pos , sq , _NUM , - _NUM ) ) return moveList ; if ( y > _NUM && addDirection ( moveList , pos , sq , _NUM , - _NUM ) ) return moveList ; if ( x < _NUM && y > _NUM && addDirection ( moveList , pos , sq , _NUM , - _NUM ) ) return moveList ; int k0 = wtm ? Position . getSquare ( _NUM , _NUM ) : Position . getSquare ( _NUM , _NUM ) ; if ( Position . getSquare ( x , y ) == k0 ) { int aCastle = wtm ? Position . A1_CASTLE : Position . A8_CASTLE ; int hCastle = wtm ? Position . H1_CASTLE : Position . H8_CASTLE ; int rook = wtm ? Piece . WROOK : Piece . BROOK ; if ( ( ( pos . getCastleMask ( ) & ( _NUM << hCastle ) ) != _NUM ) && ( pos . getPiece ( k0 + _NUM ) == Piece . EMPTY ) && ( pos . getPiece ( k0 + _NUM ) == Piece . EMPTY ) && ( pos . getPiece ( k0 + _NUM ) == rook ) && ! sqAttacked ( pos , k0 ) && ! sqAttacked ( pos , k0 + _NUM ) ) { moveList . add ( getMoveObj ( k0 , k0 + _NUM , Piece . EMPTY ) ) ; } if ( ( ( pos . getCastleMask ( ) & ( _NUM << aCastle ) ) != _NUM ) && ( pos . getPiece ( k0 - _NUM ) == Piece . EMPTY ) && ( pos . getPiece ( k0 - _NUM ) == Piece . EMPTY ) && ( pos . getPiece ( k0 - _NUM ) == Piece . EMPTY ) && ( pos . getPiece ( k0 - _NUM ) == rook ) && ! sqAttacked ( pos , k0 ) && ! sqAttacked ( pos , k0 - _NUM ) ) { moveList . add ( getMoveObj ( k0 , k0 - _NUM , Piece . EMPTY ) ) ; } } } if ( ( p == Piece . WPAWN ) || ( p == Piece . BPAWN ) ) { int yDir = wtm ? _NUM : - _NUM ; if ( pos . getPiece ( sq + yDir ) == Piece . EMPTY ) { addPawnMoves ( moveList , sq , sq + yDir ) ; if ( ( y == ( wtm ? _NUM : _NUM ) ) && ( pos . getPiece ( sq + _NUM * yDir ) == Piece . EMPTY ) ) { addPawnMoves ( moveList , sq , sq + yDir * _NUM ) ; } } if ( x > _NUM ) { int toSq = sq + yDir - _NUM ; int cap = pos . getPiece ( toSq ) ; if ( cap != Piece . EMPTY ) { if ( Piece . isWhite ( cap ) != wtm ) { if ( cap == ( wtm ? Piece . BKING : Piece . WKING ) ) { returnMoveList ( moveList ) ; moveList = getMoveListObj ( ) ; moveList . add ( getMoveObj ( sq , toSq , Piece . EMPTY ) ) ; return moveList ; } else { addPawnMoves ( moveList , sq , toSq ) ; } } } else if ( toSq == pos . getEpSquare ( ) ) { addPawnMoves ( moveList , sq , toSq ) ; } } if ( x < _NUM ) { int toSq = sq + yDir + _NUM ; int cap = pos . getPiece ( toSq ) ; if ( cap != Piece . EMPTY ) { if ( Piece . isWhite ( cap ) != wtm ) { if ( cap == ( wtm ? Piece . BKING : Piece . WKING ) ) { returnMoveList ( moveList ) ; moveList = getMoveListObj ( ) ; moveList . add ( getMoveObj ( sq , toSq , Piece . EMPTY ) ) ; return moveList ; } else { addPawnMoves ( moveList , sq , toSq ) ; } } } else if ( toSq == pos . getEpSquare ( ) ) { addPawnMoves ( moveList , sq , toSq ) ; } } } } } return moveList ; }
public static int writeOggPageHeader ( byte [ ] buf , int offset , int headerType , long granulepos , int streamSerialNumber , int pageCount , int packetCount , byte [ ] packetSizes ) { writeString ( buf , offset , _STR ) ; buf [ offset + _NUM ] = _NUM ; buf [ offset + _NUM ] = ( byte ) headerType ; writeLong ( buf , offset + _NUM , granulepos ) ; writeInt ( buf , offset + _NUM , streamSerialNumber ) ; writeInt ( buf , offset + _NUM , pageCount ) ; writeInt ( buf , offset + _NUM , _NUM ) ; buf [ offset + _NUM ] = ( byte ) packetCount ; System . arraycopy ( packetSizes , _NUM , buf , offset + _NUM , packetCount ) ; return packetCount + _NUM ; }
private void beforeKey ( ) throws JSONException { Scope context = peek ( ) ; if ( context == Scope . NONEMPTY_OBJECT ) { out . append ( _STR ) ; } else if ( context != Scope . EMPTY_OBJECT ) { throw new JSONException ( _STR ) ; } newline ( ) ; replaceTop ( Scope . DANGLING_KEY ) ; }
private byte [ ] createPreviewBuffer ( Size previewSize ) { int bitsPerPixel = ImageFormat . getBitsPerPixel ( ImageFormat . NV21 ) ; long sizeInBits = previewSize . getHeight ( ) * previewSize . getWidth ( ) * bitsPerPixel ; int bufferSize = ( int ) Math . ceil ( sizeInBits / _NUM ) + _NUM ; byte [ ] byteArray = new byte [ bufferSize ] ; ByteBuffer buffer = ByteBuffer . wrap ( byteArray ) ; if ( ! buffer . hasArray ( ) || ( buffer . array ( ) != byteArray ) ) { throw new IllegalStateException ( _STR ) ; } mBytesToByteBuffer . put ( byteArray , buffer ) ; return byteArray ; }
private void handleStaticSiteRequest ( StaticSiteRequest . PointRequest request , TransportNetwork transportNetwork , TaskStatistics ts ) { StaticComputer computer = new StaticComputer ( request , transportNetwork , ts ) ; if ( request . request . bucket != null ) computer . run ( ) ; else { try { PipedInputStream pis = new PipedInputStream ( ) ; PipedOutputStream pos = new PipedOutputStream ( pis ) ; finishPriorityTask ( request , pis ) ; computer . write ( pos ) ; pos . close ( ) ; } catch ( IOException e ) { LOG . error ( _STR , e ) ; } } deleteRequest ( request ) ; }
public synchronized void removeRoom ( String room ) { if ( ! Helper . validateStream ( room ) ) { return ; } room = room . toLowerCase ( ) ; if ( rooms . remove ( room ) ) { unsubRoom ( room ) ; removeEmotes ( room ) ; prevEmotesets . remove ( room ) ; } }
public static double discharge ( ItemStack itemStack , double amount ) { if ( itemStack != null ) { if ( itemStack . getItem ( ) instanceof IEnergizedItem ) { IEnergizedItem energizedItem = ( IEnergizedItem ) itemStack . getItem ( ) ; if ( energizedItem . canSend ( itemStack ) ) { double energyToUse = Math . min ( energizedItem . getMaxTransfer ( itemStack ) , Math . min ( energizedItem . getEnergy ( itemStack ) , amount ) ) ; energizedItem . setEnergy ( itemStack , energizedItem . getEnergy ( itemStack ) - energyToUse ) ; return energyToUse ; } } } return _NUM ; }
public Object [ ] toArray ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { Object [ ] a = new Object [ count ] ; int k = _NUM ; for ( Node < E > p = first ; p != null ; p = p . next ) a [ k ++ ] = p . item ; return a ; } finally { lock . unlock ( ) ; } }
public void addAll ( final Collection elements ) { adjusting = _BOOL ; Set oldSelection = new HashSet ( selection ) ; boolean rv = selection . addAll ( elements ) ; adjusting = _BOOL ; if ( rv ) { fireSelectionChanged ( oldSelection , selection ) ; } oldSelection = null ; }
public boolean hasFeature ( int feature ) { return ( ( feature >= MODE_FIRST && feature <= MODE_LAST ) || ( feature >= FEATURE_FIRST && feature <= FEATURE_LAST ) ) && ( feature == MODE_OFF || mCapabilities . get ( feature ) ) ; }
public Set < Integer > backupPartitions ( UUID nodeId ) { Set < Integer > set = backup . get ( nodeId ) ; return set == null ? Collections . < Integer > emptySet ( ) : set ; }
public java . lang . StringBuffer insert ( int offset , java . lang . String str ) { internal . insert ( offset , str ) ; return this ; }
public Loader load ( String imageUrl ) { ImageUrl = imageUrl ; return this ; }
private void generateLegalTimesTree ( ) { int k0 = KeyEvent . KEYCODE_0 ; int k1 = KeyEvent . KEYCODE_1 ; int k2 = KeyEvent . KEYCODE_2 ; int k3 = KeyEvent . KEYCODE_3 ; int k4 = KeyEvent . KEYCODE_4 ; int k5 = KeyEvent . KEYCODE_5 ; int k6 = KeyEvent . KEYCODE_6 ; int k7 = KeyEvent . KEYCODE_7 ; int k8 = KeyEvent . KEYCODE_8 ; int k9 = KeyEvent . KEYCODE_9 ; mLegalTimesTree = new Node ( ) ; if ( mIs24HourMode ) { Node minuteFirstDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; Node minuteSecondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; minuteFirstDigit . addChild ( minuteSecondDigit ) ; Node firstDigit = new Node ( k0 , k1 ) ; mLegalTimesTree . addChild ( firstDigit ) ; Node secondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; Node thirdDigit = new Node ( k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; secondDigit = new Node ( k6 , k7 , k8 , k9 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; firstDigit = new Node ( k2 ) ; mLegalTimesTree . addChild ( firstDigit ) ; secondDigit = new Node ( k0 , k1 , k2 , k3 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; secondDigit = new Node ( k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteSecondDigit ) ; firstDigit = new Node ( k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( minuteFirstDigit ) ; } else { Node ampm = new Node ( getAmOrPmKeyCode ( AM ) , getAmOrPmKeyCode ( PM ) ) ; Node firstDigit = new Node ( k1 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( ampm ) ; Node secondDigit = new Node ( k0 , k1 , k2 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( ampm ) ; Node thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; Node fourthDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; thirdDigit . addChild ( fourthDigit ) ; fourthDigit . addChild ( ampm ) ; thirdDigit = new Node ( k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; secondDigit = new Node ( k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; firstDigit = new Node ( k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( ampm ) ; secondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; } }
private void buildPTR ( ) { double [ ] temp_row ; double [ ] [ ] PTRA ; int k ; PivotTransform pt ; PTR = Matrix . identity ( n , n ) ; PTRA = PTR . getArray ( ) ; k = pivotTransformQueue . size ( ) ; while ( k -- > _NUM ) { pt = pivotTransformQueue . removeLast ( ) ; temp_row = PTRA [ pt . pos1 ] ; PTRA [ pt . pos1 ] = PTRA [ pt . pos2 ] ; PTRA [ pt . pos2 ] = temp_row ; } }
private static String byteToHex ( byte [ ] digest ) { StringBuilder builder = new StringBuilder ( ) ; for ( byte b : digest ) { String hex = Integer . toHexString ( _NUM & b ) ; if ( hex . length ( ) == _NUM ) { builder . append ( _STR ) ; } builder . append ( hex ) ; } return builder . toString ( ) ; }
public String replace ( char oldChar , char newChar ) { char [ ] buffer = value ; int _offset = offset ; int _count = count ; int idx = _offset ; int last = _offset + _count ; boolean copied = _BOOL ; while ( idx < last ) { if ( buffer [ idx ] == oldChar ) { if ( ! copied ) { char [ ] newBuffer = new char [ _count ] ; System . arraycopy ( buffer , _offset , newBuffer , _NUM , _count ) ; buffer = newBuffer ; idx -= _offset ; last -= _offset ; copied = _BOOL ; } buffer [ idx ] = newChar ; } idx ++ ; } return copied ? new String ( _NUM , count , buffer ) : this ; }
public Bidi createLineBidi ( int lineStart , int lineLimit ) { AttributedString astr = new AttributedString ( _STR ) ; Bidi newBidi = new Bidi ( astr . getIterator ( ) ) ; return bidiBase . setLine ( this , bidiBase , newBidi , newBidi . bidiBase , lineStart , lineLimit ) ; }
public boolean isCallerValidForPackage ( Context context , int authRequirements , String packageToMatch ) { assert ! TextUtils . isEmpty ( packageToMatch ) ; return isCallerValid ( context , authRequirements , packageToMatch ) ; }
public void paintInternalFrameTitlePaneBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { paintBackground ( context , g , x , y , w , h , null ) ; }
public synchronized void addGraphListener ( GraphListener cl ) { m_graphListeners . addElement ( cl ) ; }
public void restartAndInstallIfNecessary ( ) { File patchesDir = new File ( mySdkHandler . getLocation ( ) , PatchInstallerUtil . PATCHES_DIR_NAME ) ; StudioLoggerProgressIndicator progress = new StudioLoggerProgressIndicator ( PatchInstallerFactory . class ) ; if ( patchesDir . exists ( ) ) { File [ ] subDirs = patchesDir . listFiles ( null ) ; for ( File patchDir : subDirs ) { processPatch ( mySdkHandler . getLocation ( ) , progress , patchDir ) ; } } }
public static double [ ] [ ] align ( int [ ] real , double [ ] pred ) { int missing = numberOfMissingLabels ( real ) ; double [ ] _real = new double [ real . length - missing ] ; double [ ] _pred = new double [ real . length - missing ] ; int offset = _NUM ; for ( int i = _NUM ; i < real . length ; i ++ ) { if ( real [ i ] == - _NUM || pred [ i ] == - _NUM || Double . isNaN ( pred [ i ] ) ) { offset ++ ; continue ; } _real [ i - offset ] = real [ i ] ; _pred [ i - offset ] = pred [ i ] ; } double [ ] [ ] res = new double [ _NUM ] [ _NUM ] ; res [ _NUM ] = _real ; res [ _NUM ] = _pred ; return res ; }
public static boolean isCategory ( int M_Product_Category_ID , int M_Product_ID ) { if ( M_Product_ID == _NUM || M_Product_Category_ID == _NUM ) return _BOOL ; Integer product = new Integer ( M_Product_ID ) ; Integer category = ( Integer ) s_products . get ( product ) ; if ( category != null ) return category . intValue ( ) == M_Product_Category_ID ; String sql = _STR ; PreparedStatement pstmt = null ; try { pstmt = DB . prepareStatement ( sql , null ) ; pstmt . setInt ( _NUM , M_Product_ID ) ; ResultSet rs = pstmt . executeQuery ( ) ; if ( rs . next ( ) ) category = new Integer ( rs . getInt ( _NUM ) ) ; rs . close ( ) ; pstmt . close ( ) ; pstmt = null ; } catch ( Exception e ) { s_log . log ( Level . SEVERE , sql , e ) ; } try { if ( pstmt != null ) pstmt . close ( ) ; pstmt = null ; } catch ( Exception e ) { pstmt = null ; } if ( category != null ) { s_products . put ( product , category ) ; s_log . fine ( _STR + M_Product_ID + _STR + category + _STR + M_Product_Category_ID + _STR + ( category . intValue ( ) == M_Product_Category_ID ) ) ; return category . intValue ( ) == M_Product_Category_ID ; } s_log . log ( Level . SEVERE , _STR + M_Product_ID ) ; return _BOOL ; }
public AllStatsTableMulti ( DatasetGenerator datasetGenerator , Locker locker ) { ArgumentChecking . notNull ( datasetGenerator , _STR ) ; initComponents ( ) ; table . setDefaultRenderer ( JLabel . class , new Renderer ( ) ) ; table . setColumnSelectionAllowed ( _BOOL ) ; table . setRowSelectionAllowed ( _BOOL ) ; table . setGridColor ( GRID_COLOR ) ; JTableHeader header = table . getTableHeader ( ) ; header . setReorderingAllowed ( _BOOL ) ; GUIUtilities . setTableHeader ( header ) ; model = new Model ( datasetGenerator ) ; table . setModel ( model ) ; this . locker = locker ; }
private void fitImageToView ( ) { Drawable drawable = getDrawable ( ) ; if ( drawable == null || drawable . getIntrinsicWidth ( ) == _NUM || drawable . getIntrinsicHeight ( ) == _NUM ) { return ; } if ( matrix == null || prevMatrix == null ) { return ; } int drawableWidth = drawable . getIntrinsicWidth ( ) ; int drawableHeight = drawable . getIntrinsicHeight ( ) ; float scaleX = ( float ) viewWidth / drawableWidth ; float scaleY = ( float ) viewHeight / drawableHeight ; switch ( mScaleType ) { case CENTER : scaleX = scaleY = _NUM ; break ; case CENTER_CROP : scaleX = scaleY = Math . max ( scaleX , scaleY ) ; break ; case CENTER_INSIDE : scaleX = scaleY = Math . min ( _NUM , Math . min ( scaleX , scaleY ) ) ; case FIT_CENTER : scaleX = scaleY = Math . min ( scaleX , scaleY ) ; break ; case FIT_XY : break ; default : throw new UnsupportedOperationException ( _STR ) ; } float redundantXSpace = viewWidth - ( scaleX * drawableWidth ) ; float redundantYSpace = viewHeight - ( scaleY * drawableHeight ) ; matchViewWidth = viewWidth - redundantXSpace ; matchViewHeight = viewHeight - redundantYSpace ; if ( ! isZoomed ( ) && ! imageRenderedAtLeastOnce ) { matrix . setScale ( scaleX , scaleY ) ; matrix . postTranslate ( redundantXSpace / _NUM , redundantYSpace / _NUM ) ; normalizedScale = _NUM ; } else { if ( prevMatchViewWidth == _NUM || prevMatchViewHeight == _NUM ) { savePreviousImageValues ( ) ; } prevMatrix . getValues ( m ) ; m [ Matrix . MSCALE_X ] = matchViewWidth / drawableWidth * normalizedScale ; m [ Matrix . MSCALE_Y ] = matchViewHeight / drawableHeight * normalizedScale ; float transX = m [ Matrix . MTRANS_X ] ; float transY = m [ Matrix . MTRANS_Y ] ; float prevActualWidth = prevMatchViewWidth * normalizedScale ; float actualWidth = getImageWidth ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_X , transX , prevActualWidth , actualWidth , prevViewWidth , viewWidth , drawableWidth ) ; float prevActualHeight = prevMatchViewHeight * normalizedScale ; float actualHeight = getImageHeight ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_Y , transY , prevActualHeight , actualHeight , prevViewHeight , viewHeight , drawableHeight ) ; matrix . setValues ( m ) ; } fixTrans ( ) ; setImageMatrix ( matrix ) ; }
public void append ( File file , FTPDataTransferListener listener ) throws IllegalStateException , FileNotFoundException , IOException , FTPIllegalReplyException , FTPException , FTPDataTransferException , FTPAbortedException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . getAbsolutePath ( ) ) ; } InputStream inputStream = null ; try { inputStream = new FileInputStream ( file ) ; } catch ( IOException e ) { throw new FTPDataTransferException ( e ) ; } try { append ( file . getName ( ) , inputStream , _NUM , listener ) ; } catch ( IllegalStateException e ) { throw e ; } catch ( IOException e ) { throw e ; } catch ( FTPIllegalReplyException e ) { throw e ; } catch ( FTPException e ) { throw e ; } catch ( FTPDataTransferException e ) { throw e ; } catch ( FTPAbortedException e ) { throw e ; } finally { if ( inputStream != null ) { try { inputStream . close ( ) ; } catch ( Throwable t ) { ; } } } }
public List < String > provideWhiteList ( ) { LinkedList < String > whiteList = new LinkedList < > ( ) ; whiteList . add ( _STR ) ; return whiteList ; }
public static boolean isScopedName ( String name ) { return name . indexOf ( _STR ) != - _NUM ; }
public Input ( IoBuffer buf ) { super ( buf ) ; amf3_mode = _NUM ; stringReferences = new ArrayList < String > ( ) ; classReferences = new ArrayList < ClassReference > ( ) ; }
public static Properties loadConfigFile ( String path ) { Properties property = null ; File file = new File ( path ) ; if ( file . exists ( ) && file . canRead ( ) ) { try { property = new Properties ( ) ; property . load ( new FileReader ( file . getAbsolutePath ( ) ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return property ; }
protected void illegalMessageReceived ( OFMessage m ) { String msg = getSwitchStateMessage ( m , _STR ) ; throw new SwitchStateException ( msg ) ; }
protected void sprint ( boolean booleanField ) { sprint ( String . valueOf ( booleanField ) ) ; }
protected static void toEPLViews ( StringWriter writer , List < View > views ) { if ( ( views != null ) && ( views . size ( ) != _NUM ) ) { writer . write ( _STR ) ; String delimiter = _STR ; for ( View view : views ) { writer . write ( delimiter ) ; view . toEPL ( writer ) ; delimiter = _STR ; } } }
protected void removeDatabaseListeners ( ) { databaseListeners . clear ( ) ; }
private AudioMapType loadAudioMapXml ( File audioMapFile ) throws XmlParsingException , FileNotFoundException { if ( ! audioMapFile . isFile ( ) ) { throw new FileNotFoundException ( String . format ( _STR , audioMapFile . getAbsolutePath ( ) ) ) ; } return XmlParser . parse ( audioMapFile , new String [ ] { AUDIOMAP_XML_SCHEME } , AUDIOMAP_PACKAGE , AudioMapType . class ) ; }
public void addGenericAttr ( GenericAttr g ) { generic . addElement ( g ) ; }
private List < FahrzeitEvent > addFahrtInfoToFahrzeitEvents ( List < FahrtEvent > fahrtEvents , List < FahrzeitEvent > fahrzeitEvents , boolean keepFahrzeitEventsWithoutFahrtEvent ) { List < FahrzeitEvent > fahrzeitEventsOut = new LinkedList < FahrzeitEvent > ( ) ; Map < String , FahrtEvent > rblDateKursDateTimeIst2FahrtEventMap = new HashMap < String , FahrtEvent > ( ) ; Set < String > searchStrings = new TreeSet < String > ( ) ; for ( FahrtEvent fahrtEvent : fahrtEvents ) { String searchId = String . valueOf ( fahrtEvent . getRblDate ( ) ) + String . valueOf ( fahrtEvent . getKurs ( ) ) + fahrtEvent . getDepartureDateIst ( ) + fahrtEvent . getDepartureTimeIst ( ) ; if ( searchStrings . contains ( searchId ) ) { log . warn ( _STR + searchId ) ; } else { searchStrings . add ( searchId ) ; rblDateKursDateTimeIst2FahrtEventMap . put ( searchId , fahrtEvent ) ; } } int numberOfMissingFahrtEvents = _NUM ; for ( FahrzeitEvent fahrzeitEvent : fahrzeitEvents ) { String searchId = String . valueOf ( fahrzeitEvent . getRblDate ( ) ) + String . valueOf ( fahrzeitEvent . getKurs ( ) ) + fahrzeitEvent . getDepartureDateIst ( ) + fahrzeitEvent . getDepartureTimeIst ( ) ; FahrtEvent fahrtEvent = rblDateKursDateTimeIst2FahrtEventMap . get ( searchId ) ; if ( fahrtEvent == null ) { numberOfMissingFahrtEvents ++ ; if ( keepFahrzeitEventsWithoutFahrtEvent ) { fahrzeitEventsOut . add ( fahrzeitEvent ) ; } } else { fahrzeitEvent . add ( fahrtEvent ) ; fahrzeitEventsOut . add ( fahrzeitEvent ) ; } } log . info ( numberOfMissingFahrtEvents + _STR ) ; log . info ( _STR + fahrzeitEventsOut . size ( ) + _STR ) ; return fahrzeitEventsOut ; }
private static Object newInstanceNoServiceLoader ( Class < ? > providerClass ) { if ( System . getSecurityManager ( ) == null ) { return null ; } try { Method creationMethod = providerClass . getDeclaredMethod ( _STR ) ; return creationMethod . invoke ( null , ( Object [ ] ) null ) ; } catch ( NoSuchMethodException exc ) { return null ; } catch ( Exception exc ) { return null ; } }
private void checkUUID ( String uuid , int code ) { checkHash ( UUID . fromString ( uuid ) , code ) ; }
@ Override protected void prepareWrite ( WritableByteChannel channel ) throws Exception { os = Channels . newOutputStream ( channel ) ; }
public void run ( ) { try { boolean cleanRemoteSessions = _BOOL ; synchronized ( this ) { Collection < StateInfo > infos = new ArrayList < > ( ) ; infos . addAll ( servers . values ( ) ) ; infos . addAll ( sites . values ( ) ) ; for ( StateInfo info : infos ) { info . isUp = checkServerUp ( info ) ; if ( ! info . isUp ) { down . add ( info . id ) ; } else { if ( ! down . isEmpty ( ) && down . remove ( info . id ) ) { cleanRemoteSessions = _BOOL ; } } } } if ( cleanRemoteSessions ) { foreignSessionHandler . cleanUpRemoteSessions ( ) ; } } catch ( Exception ex ) { sessionDebug . error ( _STR + ex . getMessage ( ) , ex ) ; } }
private void writeObject ( java . io . ObjectOutputStream p_stream ) throws java . io . IOException { p_stream . defaultWriteObject ( ) ; p_stream . writeInt ( trace_angle_restriction . get_no ( ) ) ; }
@ SuppressWarnings ( _STR ) public LiteralExtensionIV createIV ( final Value value ) { if ( value instanceof Literal == _BOOL ) throw new IllegalArgumentException ( ) ; final Literal lit = ( Literal ) value ; final AbstractLiteralIV delegate = new PackedLongIV ( Long . parseLong ( lit . getLabel ( ) ) ) ; return new LiteralExtensionIV ( delegate , datatype . getIV ( ) ) ; }
public Builder addHeader ( String name , String value ) { headers . add ( new Header ( name , value ) ) ; return this ; }
public void add ( LeafAtom atom ) { leafChildren . add ( atom ) ; }
private boolean journalRebuildRequired ( ) { final int redundantOpCompactThreshold = _NUM ; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries . size ( ) ; }
public static double normalCDF ( double x ) { return ( _NUM * ( _NUM + ( erf ( x / ( Math . sqrt ( _NUM ) ) ) ) ) ) ; }
public void removeResult ( String name ) { StringBuffer buff = m_Results . get ( name ) ; if ( buff != null ) { m_Results . remove ( name ) ; m_Model . removeElement ( name ) ; m_Objs . remove ( name ) ; System . gc ( ) ; } }
private void addEntry ( ) { filterModel . addNewEntry ( ) ; extentModel . populate ( null ) ; removeFTCButton . setEnabled ( _BOOL ) ; addExtentButton . setEnabled ( _BOOL ) ; removeExtentButton . setEnabled ( _BOOL ) ; }
public void testCase22 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM } ; int aSign = _NUM ; int bSign = - _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; try { aNumber . mod ( bNumber ) ; fail ( _STR ) ; } catch ( ArithmeticException e ) { } }
double [ ] [ ] CalcTheoreticalSVValues ( Variogram vario , double MaximumDisplyDistanst ) { double [ ] [ ] res = new double [ _NUM * NumberOfLags + _NUM ] [ _NUM ] ; for ( int i = _NUM ; i < res . length ; i ++ ) { res [ i ] [ _NUM ] = i * MaximumDisplyDistanst / ( _NUM * NumberOfLags ) ; switch ( vario . Type ) { case EXPONENTIAL : if ( res [ i ] [ _NUM ] != _NUM ) { res [ i ] [ _NUM ] = vario . Nugget + vario . Sill * ( _NUM - Math . exp ( - res [ i ] [ _NUM ] / vario . Range ) ) ; } else { res [ i ] [ _NUM ] = vario . Nugget ; } break ; case GAUSSIAN : if ( res [ i ] [ _NUM ] != _NUM ) { res [ i ] [ _NUM ] = vario . Nugget + vario . Sill * ( _NUM - Math . exp ( - _NUM * ( Math . pow ( res [ i ] [ _NUM ] , _NUM ) ) / ( Math . pow ( vario . Range , _NUM ) ) ) ) ; } else { res [ i ] [ _NUM ] = vario . Nugget ; } break ; case SPHERICAL : if ( res [ i ] [ _NUM ] > vario . Range ) { res [ i ] [ _NUM ] = vario . Nugget + vario . Sill ; } else if ( res [ i ] [ _NUM ] > _NUM && res [ i ] [ _NUM ] <= vario . Range ) { res [ i ] [ _NUM ] = vario . Nugget + vario . Sill * ( _NUM * res [ i ] [ _NUM ] / vario . Range - _NUM * Math . pow ( ( res [ i ] [ _NUM ] / vario . Range ) , _NUM ) ) ; } else { res [ i ] [ _NUM ] = vario . Nugget ; } break ; } } return res ; }
public DExportPrivateKeyOpenSsl ( JFrame parent , String entryAlias , PasswordQualityConfig passwordQualityConfig ) { super ( parent , Dialog . ModalityType . DOCUMENT_MODAL ) ; this . entryAlias = entryAlias ; this . passwordQualityConfig = passwordQualityConfig ; initComponents ( ) ; }
public BigDecimal sum ( String sqlExpression ) { return aggregate ( sqlExpression , AGGREGATE_SUM ) ; }
private void smoothSnapToPosition ( int scrollY , int availableScrollHeight , AlphabeticalAppsList . FastScrollSectionInfo info ) { mRv . removeCallbacks ( mSmoothSnapNextFrameRunnable ) ; mRv . removeCallbacks ( mFastScrollToTargetSectionRunnable ) ; trackAllChildViews ( ) ; if ( mHasFastScrollTouchSettled ) { mCurrentFastScrollSection = info . sectionName ; mTargetFastScrollSection = null ; updateTrackedViewsFastScrollFocusState ( ) ; } else { mCurrentFastScrollSection = null ; mTargetFastScrollSection = info . sectionName ; mHasFastScrollTouchSettled = _BOOL ; updateTrackedViewsFastScrollFocusState ( ) ; mRv . postDelayed ( mFastScrollToTargetSectionRunnable , mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION ) ; } int newScrollY = Math . min ( availableScrollHeight , mRv . getPaddingTop ( ) + mRv . getTop ( info . fastScrollToItem . rowIndex ) ) ; int numFrames = mFastScrollFrames . length ; for ( int i = _NUM ; i < numFrames ; i ++ ) { mFastScrollFrames [ i ] = ( newScrollY - scrollY ) / numFrames ; } mFastScrollFrameIndex = _NUM ; mRv . postOnAnimation ( mSmoothSnapNextFrameRunnable ) ; }
@ Override public int calculateOffsetX ( ) { return ( int ) ( Math . cos ( this . angle ) * this . distance ) - this . shadowSize ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
protected void onFinish ( ) { mErrorListener = null ; }
private < T > void runTestWrite ( XmlWriter < T > writer , List < T > bundle , List < String > expected ) throws Exception { File tmpFile = tmpFolder . newFile ( _STR ) ; try ( FileOutputStream fileOutputStream = new FileOutputStream ( tmpFile ) ) { writeBundle ( writer , bundle , fileOutputStream . getChannel ( ) ) ; } List < String > lines = new ArrayList < > ( ) ; try ( BufferedReader reader = new BufferedReader ( new FileReader ( tmpFile ) ) ) { for ( ; ; ) { String line = reader . readLine ( ) ; if ( line == null ) { break ; } line = line . trim ( ) ; if ( line . length ( ) > _NUM ) { lines . add ( line ) ; } } assertEquals ( expected , lines ) ; } }
public String addDays ( Object odays , String format ) { int days = FunctionHandler . getInt ( odays ) ; Calendar now = Calendar . getInstance ( ) ; now . add ( Calendar . DAY_OF_YEAR , days ) ; DateFormat formatter = getFormatter ( format ) ; return formatter . format ( now . getTime ( ) ) ; }
private static File createTempFile ( Context context , @ Nullable String mimeType ) throws IOException { File externalCacheDir = context . getExternalCacheDir ( ) ; File internalCacheDir = context . getCacheDir ( ) ; File cacheDir ; if ( externalCacheDir == null && internalCacheDir == null ) { throw new IOException ( _STR ) ; } if ( externalCacheDir == null ) { cacheDir = internalCacheDir ; } else if ( internalCacheDir == null ) { cacheDir = externalCacheDir ; } else { cacheDir = externalCacheDir . getFreeSpace ( ) > internalCacheDir . getFreeSpace ( ) ? externalCacheDir : internalCacheDir ; } return File . createTempFile ( TEMP_FILE_PREFIX , getFileExtensionForType ( mimeType ) , cacheDir ) ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( _NUM ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; return newVector . elements ( ) ; }
public boolean removeEntry ( int xIndex , int dataSetIndex ) { if ( dataSetIndex >= mDataSets . size ( ) ) return _BOOL ; T dataSet = mDataSets . get ( dataSetIndex ) ; Entry e = dataSet . getEntryForXIndex ( xIndex ) ; return removeEntry ( e , dataSetIndex ) ; }
private void runReadTest ( byte [ ] input , CompressionMode mode ) throws IOException { runReadTest ( input , mode , mode ) ; }
public static void close ( @ Nullable Context rsrc , @ Nullable IgniteLogger log ) { if ( rsrc != null ) try { rsrc . close ( ) ; } catch ( NamingException e ) { warn ( log , _STR + e . getMessage ( ) ) ; } }
void removeEQ ( Object o ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { Object [ ] array = queue ; for ( int i = _NUM , n = size ; i < n ; i ++ ) { if ( o == array [ i ] ) { removeAt ( i ) ; break ; } } } finally { lock . unlock ( ) ; } }
public WritableRaster createCompatibleWritableRaster ( int w , int h ) { if ( w <= _NUM || h <= _NUM ) { throw new RasterFormatException ( _STR + ( ( w <= _NUM ) ? _STR : _STR ) ) ; } SampleModel sm = sampleModel . createCompatibleSampleModel ( w , h ) ; return new IntegerInterleavedRaster ( sm , new Point ( _NUM , _NUM ) ) ; }
private void updateBaseMatrix ( Drawable d ) { ImageView imageView = getImageView ( ) ; if ( null == imageView || null == d ) { return ; } final float viewWidth = getImageViewWidth ( imageView ) ; final float viewHeight = getImageViewHeight ( imageView ) ; final int drawableWidth = d . getIntrinsicWidth ( ) ; final int drawableHeight = d . getIntrinsicHeight ( ) ; mBaseMatrix . reset ( ) ; final float widthScale = viewWidth / drawableWidth ; final float heightScale = viewHeight / drawableHeight ; if ( mScaleType == ScaleType . CENTER ) { mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth ) / _NUM , ( viewHeight - drawableHeight ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_CROP ) { float scale = Math . max ( widthScale , heightScale ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_INSIDE ) { float scale = Math . min ( _NUM , Math . min ( widthScale , heightScale ) ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else { RectF mTempSrc = new RectF ( _NUM , _NUM , drawableWidth , drawableHeight ) ; RectF mTempDst = new RectF ( _NUM , _NUM , viewWidth , viewHeight ) ; switch ( mScaleType ) { case FIT_CENTER : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . CENTER ) ; break ; case FIT_START : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . START ) ; break ; case FIT_END : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . END ) ; break ; case FIT_XY : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . FILL ) ; break ; default : break ; } } resetMatrix ( ) ; }
public static String [ ] schedulerCommandArgs ( Config config , Config runtime , List < Integer > freePorts ) { if ( freePorts . size ( ) < PORTS_REQUIRED_FOR_SCHEDULER ) { throw new RuntimeException ( _STR ) ; } for ( int port : freePorts ) { if ( port == - _NUM ) { throw new RuntimeException ( _STR ) ; } } int httpPort = freePorts . get ( _NUM ) ; List < String > commands = new ArrayList < > ( ) ; commands . add ( _STR ) ; commands . add ( Context . cluster ( config ) ) ; commands . add ( _STR ) ; commands . add ( Context . role ( config ) ) ; commands . add ( _STR ) ; commands . add ( Context . environ ( config ) ) ; commands . add ( _STR ) ; commands . add ( Context . topologyName ( config ) ) ; commands . add ( _STR ) ; commands . add ( Context . topologyBinaryFile ( config ) ) ; commands . add ( _STR ) ; commands . add ( Integer . toString ( httpPort ) ) ; return commands . toArray ( new String [ _NUM ] ) ; }
public DocumentAnalysisRequest addDocument ( SolrInputDocument doc ) { documents . add ( doc ) ; return this ; }
public final Key doPhase ( Key key , boolean lastPhase ) throws InvalidKeyException , IllegalStateException { chooseFirstProvider ( ) ; return spi . engineDoPhase ( key , lastPhase ) ; }
public SimpleSystemPermissionSet ( ) { }
@ Override public final void addBezierCurveY ( final float x , final float y , final float x3 , final float y3 ) { elements . add ( new QuadCurveTo ( x , y , x3 , y3 ) ) ; currentPos [ _NUM ] = x3 ; currentPos [ _NUM ] = y3 ; }
public void readBucketsFromPrefs ( ) { SharedPreferences prefs = mContext . getSharedPreferences ( SHARED_PREFS , _NUM ) ; Set < String > buckets = prefs . getStringSet ( PREF_BUCKETS_IDS , new TreeSet < String > ( ) ) ; mBuckets . clear ( ) ; for ( String bucketId : buckets ) { AutoMixBucket bucket = restoreBucketFromId ( bucketId ) ; mBuckets . add ( bucket ) ; } }
protected int nextChar ( ) throws IOException { fReadFromBuffer = ( fBuffer . length ( ) > _NUM ) ; if ( fReadFromBuffer ) { char ch = fBuffer . charAt ( fIndex ++ ) ; if ( fIndex >= fBuffer . length ( ) ) { fBuffer . setLength ( _NUM ) ; fIndex = _NUM ; } return ch ; } int ch = fCharAfterWhiteSpace ; if ( ch == - _NUM ) { ch = fReader . read ( ) ; } if ( fSkipWhiteSpace && Character . isWhitespace ( ( char ) ch ) ) { do { ch = fReader . read ( ) ; } while ( Character . isWhitespace ( ( char ) ch ) ) ; if ( ch != - _NUM ) { fCharAfterWhiteSpace = ch ; return _STR ; } } else { fCharAfterWhiteSpace = - _NUM ; } return ch ; }
@ Override public void acceptAppOffer ( Offer offer ) { int index = getIndex ( offer , appOffers ) ; if ( index != - _NUM ) { appOffers . remove ( index ) ; appOfferStream . onNext ( offer ) ; } index = getIndex ( offer , acceptedOffers ) ; if ( index == - _NUM ) { acceptedOffers . add ( offer ) ; } }
public boolean verify ( PublicKey key , String sigProvider ) throws NoSuchAlgorithmException , NoSuchProviderException , CMSException { return verify ( key , CMSUtils . getProvider ( sigProvider ) ) ; }
private void injectDependencies ( ) { EasyMVPApplication easyMVPApplication = ( EasyMVPApplication ) getApplication ( ) ; List < Object > activityScopeModules = ( getModules ( ) != null ) ? getModules ( ) : new ArrayList < > ( ) ; activityScopeModules . add ( new ActivityModule ( this ) ) ; activityScopeGraph = easyMVPApplication . buildGraphWithAditionalModules ( activityScopeModules ) ; inject ( this ) ; }
public void writeRequest ( ) { Object lock = new Object ( ) ; synchronized ( lock ) { synchronized ( this ) { boolean goAheadWithWrite = writerLocks . size ( ) == _NUM && currentReaders == _NUM && currentWriters == _NUM ; if ( goAheadWithWrite ) { ++ currentWriters ; return ; } writerLocks . addLast ( lock ) ; } try { lock . wait ( ) ; } catch ( InterruptedException e ) { } } }
public long readLocalDate ( ) throws IOException { expectStartTag ( _STR ) ; if ( localCalendar == null ) localCalendar = Calendar . getInstance ( ) ; long value = parseDate ( localCalendar ) ; expectEndTag ( _STR ) ; return value ; }
public void removeSelectionListener ( final SelectionListener listener ) { checkWidget ( ) ; listeners . remove ( listener ) ; }
private void writeHex ( int i ) throws IOException { int cursor = _NUM ; do { hex [ -- cursor ] = HEX_DIGITS [ i & _NUM ] ; } while ( ( i >>>= _NUM ) != _NUM ) ; socketOut . write ( hex , cursor , hex . length - cursor ) ; }
private synchronized String readInputStream ( InputStreamReader inputStreamReader ) throws IOException , BadLocationException { BufferedReader bufferedReader = null ; try { bufferedReader = new BufferedReader ( inputStreamReader ) ; String newLine = _STR ; StringBuffer sb = new StringBuffer ( ) ; String line ; while ( ( line = bufferedReader . readLine ( ) ) != null ) { sb . append ( line + newLine ) ; } return sb . toString ( ) ; } finally { if ( null != bufferedReader ) bufferedReader . close ( ) ; if ( null != inputStreamReader ) inputStreamReader . close ( ) ; } }
private List < Map < String , Object > > typeParameters ( List < TypeParameter > tpl , Declaration from ) { if ( tpl != null && ! tpl . isEmpty ( ) ) { List < Map < String , Object > > l = new ArrayList < > ( tpl . size ( ) ) ; for ( TypeParameter tp : tpl ) { l . add ( typeParameterMap ( tp , from ) ) ; } return l ; } return null ; }
long freeSpaceUnix ( String path , boolean kb , boolean posix , long timeout ) throws IOException { if ( path . length ( ) == _NUM ) { throw new IllegalArgumentException ( _STR ) ; } String flags = _STR ; if ( kb ) { flags += _STR ; } if ( posix ) { flags += _STR ; } String [ ] cmdAttribs = flags . length ( ) > _NUM ? new String [ ] { DF , flags , path } : new String [ ] { DF , path } ; List < String > lines = performCommand ( cmdAttribs , _NUM , timeout ) ; if ( lines . size ( ) < _NUM ) { throw new IOException ( _STR + DF + _STR + _STR + path + _STR + lines ) ; } String line2 = lines . get ( _NUM ) ; StringTokenizer tok = new StringTokenizer ( line2 , _STR ) ; if ( tok . countTokens ( ) < _NUM ) { if ( tok . countTokens ( ) == _NUM && lines . size ( ) >= _NUM ) { String line3 = lines . get ( _NUM ) ; tok = new StringTokenizer ( line3 , _STR ) ; } else { throw new IOException ( _STR + DF + _STR + _STR + path + _STR ) ; } } else { tok . nextToken ( ) ; } tok . nextToken ( ) ; tok . nextToken ( ) ; String freeSpace = tok . nextToken ( ) ; return parseBytes ( freeSpace , path ) ; }
public static void readAndCloseStream ( InputStream is ) { final byte [ ] bytes = new byte [ DEFAULT_BUFFER_SIZE ] ; try { while ( is . read ( bytes , _NUM , DEFAULT_BUFFER_SIZE ) != - _NUM ) ; } catch ( IOException ignored ) { } finally { closeSilently ( is ) ; } }
private static boolean withinTwo ( INode n , INode goal ) { DoubleLinkedList < IMove > moves = n . validMoves ( ) ; for ( Iterator < IMove > it = moves . iterator ( ) ; it . hasNext ( ) ; ) { IMove move = it . next ( ) ; INode successor = n . copy ( ) ; move . execute ( successor ) ; if ( withinOne ( successor , goal ) ) { return _BOOL ; } } return _BOOL ; }
public PennTreebankReader ( String treebankHome , String [ ] sections , String parseViewName ) throws Exception { super ( CorpusReaderConfigurator . buildResourceManager ( PENN_TREEBANK_WSJ , treebankHome ) ) ; this . parseViewName = parseViewName ; combinedWSJHome = treebankHome ; if ( sections == null ) this . sections = IOUtils . lsDirectories ( combinedWSJHome ) ; else { this . sections = new String [ sections . length ] ; System . arraycopy ( sections , _NUM , this . sections , _NUM , sections . length ) ; } updateCurrentFiles ( ) ; }
@ Override public void unwrapSSLv2 ( byte [ ] bytes ) { unexpectedMessage ( ) ; }
@ Override public void closeWrite ( ) throws IOException { if ( _isCloseWrite ) { return ; } _isCloseWrite = _BOOL ; OutputStream os = _os ; _os = null ; boolean isShutdownOutput = _BOOL ; if ( _s instanceof SSLSocket ) { log . finer ( L . l ( _STR ) ) ; return ; } else if ( _s != null ) { try { _s . shutdownOutput ( ) ; isShutdownOutput = _BOOL ; } catch ( UnsupportedOperationException e ) { log . log ( Level . FINEST , e . toString ( ) , e ) ; } catch ( Exception e ) { log . finer ( e . toString ( ) ) ; log . log ( Level . FINEST , e . toString ( ) , e ) ; } } if ( ! isShutdownOutput && os != null ) { os . close ( ) ; } }
protected void applyRowChangeData ( RowChangeData data , List < ReplOption > options , String sourceDbmsType ) throws ReplicatorException { if ( options != null ) { try { if ( applySessionVariables ( null , options ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( _STR ) ; } executePendingBatch ( ) ; statement . executeBatch ( ) ; statement . clearBatch ( ) ; } } catch ( SQLException e ) { throw new ApplierException ( _STR , e ) ; } } List < ReplOption > rowOptions = data . getOptions ( ) ; if ( rowOptions != null ) { try { if ( applySessionVariables ( null , rowOptions ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( _STR ) ; } executePendingBatch ( ) ; statement . executeBatch ( ) ; statement . clearBatch ( ) ; } } catch ( SQLException e ) { throw new ApplierException ( _STR , e ) ; } } for ( OneRowChange row : data . getRowChanges ( ) ) { applyOneRowChangePrepared ( row , sourceDbmsType ) ; } }
public boolean writeHeader ( OutputStream os ) { try { writeInt ( os , CACHE_MAGIC ) ; writeString ( os , key ) ; writeString ( os , etag == null ? _STR : etag ) ; writeLong ( os , serverDate ) ; writeLong ( os , lastModified ) ; writeLong ( os , ttl ) ; writeLong ( os , softTtl ) ; writeStringStringMap ( responseHeaders , os ) ; os . flush ( ) ; return _BOOL ; } catch ( IOException e ) { VolleyLog . d ( _STR , e . toString ( ) ) ; return _BOOL ; } }
public NamedList normalize ( NamedList input ) { input . remove ( _STR ) ; for ( int i = _NUM ; i < input . size ( ) ; i ++ ) { Object v = input . getVal ( i ) ; if ( v instanceof NamedList ) { input . setVal ( i , normalize ( ( NamedList ) v ) ) ; } } return input ; }
public boolean isInfinite ( ) { return isInfinite ( value ) ; }
String inprogressZNodeName ( long ledgerId , long firstTxId , long logSegmentSeqNo ) { if ( DistributedLogConstants . LOGSEGMENT_NAME_VERSION == conf . getLogSegmentNameVersion ( ) ) { return String . format ( _STR , DistributedLogConstants . INPROGRESS_LOGSEGMENT_PREFIX , logSegmentSeqNo ) ; } else { return DistributedLogConstants . INPROGRESS_LOGSEGMENT_PREFIX + _STR + Long . toString ( firstTxId , _NUM ) ; } }
public synchronized void add ( double value ) { add ( mCategories . size ( ) + _STR , value ) ; }
public void receiveRedundancy ( ) { try { while ( _BOOL ) { if ( mIn . read ( mInBuffer ) <= _NUM ) return ; } } catch ( IOException e ) { } }
void outputDocTypeDecl ( String name , boolean closeDecl ) throws SAXException { if ( m_cdataTagOpen ) closeCDATA ( ) ; try { final java . io . Writer writer = m_writer ; writer . write ( _STR ) ; writer . write ( name ) ; String doctypePublic = getDoctypePublic ( ) ; if ( null != doctypePublic ) { writer . write ( _STR ) ; writer . write ( doctypePublic ) ; writer . write ( _STR ) ; } String doctypeSystem = getDoctypeSystem ( ) ; if ( null != doctypeSystem ) { if ( null == doctypePublic ) writer . write ( _STR ) ; else writer . write ( _STR ) ; writer . write ( doctypeSystem ) ; if ( closeDecl ) { writer . write ( _STR ) ; writer . write ( m_lineSep , _NUM , m_lineSepLen ) ; closeDecl = _BOOL ; } else writer . write ( _STR ) ; } } catch ( IOException e ) { throw new SAXException ( e ) ; } }
MVStore ( HashMap < String , Object > config ) { Object o = config . get ( _STR ) ; this . compressionLevel = o == null ? _NUM : ( Integer ) o ; String fileName = ( String ) config . get ( _STR ) ; o = config . get ( _STR ) ; if ( o == null ) { pageSplitSize = fileName == null ? _NUM * _NUM : _NUM * _NUM ; } else { pageSplitSize = ( Integer ) o ; } o = config . get ( _STR ) ; this . backgroundExceptionHandler = ( UncaughtExceptionHandler ) o ; meta = new MVMap < String , String > ( StringDataType . INSTANCE , StringDataType . INSTANCE ) ; HashMap < String , Object > c = New . hashMap ( ) ; c . put ( _STR , _NUM ) ; c . put ( _STR , currentVersion ) ; meta . init ( this , c ) ; fileStore = ( FileStore ) config . get ( _STR ) ; if ( fileName == null && fileStore == null ) { cache = null ; cacheChunkRef = null ; return ; } if ( fileStore == null ) { fileStoreIsProvided = _BOOL ; fileStore = new FileStore ( ) ; } else { fileStoreIsProvided = _BOOL ; } retentionTime = fileStore . getDefaultRetentionTime ( ) ; boolean readOnly = config . containsKey ( _STR ) ; o = config . get ( _STR ) ; int mb = o == null ? _NUM : ( Integer ) o ; if ( mb > _NUM ) { CacheLongKeyLIRS . Config cc = new CacheLongKeyLIRS . Config ( ) ; cc . maxMemory = mb * _NUM * _NUM ; o = config . get ( _STR ) ; if ( o != null ) { cc . segmentCount = ( Integer ) o ; } cache = new CacheLongKeyLIRS < Page > ( cc ) ; cc . maxMemory /= _NUM ; cacheChunkRef = new CacheLongKeyLIRS < PageChildren > ( cc ) ; } o = config . get ( _STR ) ; int kb = o == null ? _NUM : ( Integer ) o ; autoCommitMemory = kb * _NUM * _NUM ; o = config . get ( _STR ) ; autoCompactFillRate = o == null ? _NUM : ( Integer ) o ; char [ ] encryptionKey = ( char [ ] ) config . get ( _STR ) ; try { if ( ! fileStoreIsProvided ) { fileStore . open ( fileName , readOnly , encryptionKey ) ; } if ( fileStore . size ( ) == _NUM ) { creationTime = getTimeAbsolute ( ) ; lastCommitTime = creationTime ; storeHeader . put ( _STR , _NUM ) ; storeHeader . put ( _STR , BLOCK_SIZE ) ; storeHeader . put ( _STR , FORMAT_WRITE ) ; storeHeader . put ( _STR , creationTime ) ; writeStoreHeader ( ) ; } else { readStoreHeader ( ) ; } } catch ( IllegalStateException e ) { panic ( e ) ; } finally { if ( encryptionKey != null ) { Arrays . fill ( encryptionKey , ( char ) _NUM ) ; } } lastCommitTime = getTimeSinceCreation ( ) ; o = config . get ( _STR ) ; int delay = o == null ? _NUM : ( Integer ) o ; setAutoCommitDelay ( delay ) ; }
public static boolean isValidVector ( Vector2f vector ) { if ( vector == null ) return _BOOL ; if ( Float . isNaN ( vector . x ) || Float . isNaN ( vector . y ) ) return _BOOL ; if ( Float . isInfinite ( vector . x ) || Float . isInfinite ( vector . y ) ) return _BOOL ; return _BOOL ; }
public static URL resolveURL ( URL base , String target ) throws MalformedURLException { target = target . trim ( ) ; if ( target . startsWith ( _STR ) ) { return fixPureQueryTargets ( base , target ) ; } return new URL ( base , target ) ; }
protected int maxDepth ( Layout . Node node ) { int depth = _NUM ; for ( int i = _NUM ; i < node . numChildren ( ) ; i ++ ) { Layout . Node child = node . getChild ( i ) ; depth = Math . max ( depth , maxDepth ( child ) ) ; } return depth + _NUM ; }
private int measureShort ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) ( _NUM * mRadius + getPaddingTop ( ) + getPaddingBottom ( ) + _NUM ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
private static URL [ ] pathToURLs ( String path ) throws MalformedURLException { synchronized ( pathToURLsCache ) { Object [ ] v = ( Object [ ] ) pathToURLsCache . get ( path ) ; if ( v != null ) { return ( URL [ ] ) v [ _NUM ] ; } } StringTokenizer st = new StringTokenizer ( path ) ; URL [ ] urls = new URL [ st . countTokens ( ) ] ; for ( int i = _NUM ; st . hasMoreTokens ( ) ; i ++ ) { urls [ i ] = new URL ( st . nextToken ( ) ) ; } synchronized ( pathToURLsCache ) { pathToURLsCache . put ( path , new Object [ ] { urls , new SoftReference ( path ) } ) ; } return urls ; }
private void addFinal ( Object [ ] stacks ) { Object [ ] input = new Object [ inputSize ] , output = new Object [ outputSize ] ; for ( int i = _NUM ; i < stacks . length ; i ++ ) { if ( i < inputSize ) { input [ i ] = stacks [ i ] ; } else if ( ! ( i - inputSize > outputSize ) ) { output [ i - inputSize ] = stacks [ i ] ; } else { throw new RuntimeException ( _STR ) ; } } addRecipe ( input , output ) ; }
protected void fireConnectionClosed ( ) { ConnectionEvent evt = new ConnectionEvent ( this ) ; for ( ConnectionEventListener listener : connectionEventListeners ) { listener . connectionClosed ( evt ) ; } }
public static void putIntVolatile ( Object obj , long off , int val ) { UNSAFE . putIntVolatile ( obj , off , val ) ; }
NumberStrategy ( final int field ) { this . field = field ; }
public static URI createUriFromServerSet ( Set < InetSocketAddress > serverInetSet , String path , String protocol ) throws URISyntaxException { InetSocketAddress inetSocketAddress = ServiceUtils . selectRandomItem ( serverInetSet ) ; String address = inetSocketAddress . getHostString ( ) ; int port = inetSocketAddress . getPort ( ) ; URI uri = new URI ( protocol , null , address , port , path , null , null ) ; return uri ; }
public PlotNavigator ( Plot plot , String ... axesNames ) { this ( plot , Arrays . asList ( axesNames ) ) ; }
private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = mPool . getBuf ( ( count + i ) * _NUM ) ; System . arraycopy ( buf , _NUM , newbuf , _NUM , count ) ; mPool . returnBuf ( buf ) ; buf = newbuf ; }
public void addColumn ( Class classType , boolean readOnly , String header ) { m_modelHeaderClass . add ( classType ) ; setColumnReadOnly ( m_modelHeaderClass . size ( ) - _NUM , readOnly ) ; addColumn ( header ) ; WListItemRenderer renderer = ( WListItemRenderer ) getItemRenderer ( ) ; renderer . setColumnClass ( ( renderer . getNoColumns ( ) - _NUM ) , classType ) ; return ; }
PointComparator ( int dimension ) { this . dimension = dimension ; }
public static void addElement ( Document doc , Element rootElement , String elementName , String typeIn , String isArrayIn , String partitionerIn ) { Element element = doc . createElement ( _STR ) ; rootElement . appendChild ( element ) ; Element name = doc . createElement ( _STR ) ; name . appendChild ( doc . createTextNode ( elementName ) ) ; element . appendChild ( name ) ; Element type = doc . createElement ( _STR ) ; type . appendChild ( doc . createTextNode ( typeIn ) ) ; element . appendChild ( type ) ; if ( isArrayIn . equals ( _STR ) ) { element . appendChild ( doc . createElement ( _STR ) ) ; } if ( partitionerIn != null ) { Element partitioner = doc . createElement ( _STR ) ; partitioner . appendChild ( doc . createTextNode ( partitionerIn ) ) ; element . appendChild ( partitioner ) ; } }
public void flushBuffer ( ) throws IOException { if ( count > _NUM ) { m_os . write ( m_outputBytes , _NUM , count ) ; count = _NUM ; } }
public void addFirst ( Character c ) { addFirst ( c . toString ( ) ) ; }
public final void addInstanceOf ( String className ) { Reject . ifNull ( className ) ; String value = className . trim ( ) ; if ( ! value . matches ( CLASS_RE ) ) { throw new IllegalArgumentException ( _STR + value + _STR ) ; } instanceOfInterfaces . add ( value ) ; }
@ Override public int read ( byte [ ] b , int off , int len ) throws IOException { if ( b == null ) { throw new NullPointerException ( _STR ) ; } if ( len < _NUM || off < _NUM || ( off + len ) > b . length ) { throw new IndexOutOfBoundsException ( _STR + b . length + _STR + off + _STR + len ) ; } int read = _NUM ; if ( len == _NUM ) { return _NUM ; } while ( len > _NUM ) { if ( encoderOut . hasRemaining ( ) ) { int c = Math . min ( encoderOut . remaining ( ) , len ) ; encoderOut . get ( b , off , c ) ; off += c ; len -= c ; read += c ; } else { fillBuffer ( ) ; if ( endOfInput && ! encoderOut . hasRemaining ( ) ) { break ; } } } return read == _NUM && endOfInput ? - _NUM : read ; }
public boolean isDisplayedExpectingComponents ( ) { boolean result = _BOOL ; if ( conditions . isConditionMet ( visibilityOf ( window ) ) ) { if ( components . isEmpty ( ) ) { closeButton . click ( ) ; } else { result = _BOOL ; } } return result ; }
private void processRunStartedTag ( String identifier ) { Pattern numTestsPattern = Pattern . compile ( _STR ) ; Matcher numTests = numTestsPattern . matcher ( identifier ) ; if ( numTests . find ( ) ) { try { mNumTestsExpected = Integer . parseInt ( numTests . group ( _NUM ) ) ; } catch ( NumberFormatException e ) { Log . e ( LOG_TAG , _STR + numTests . group ( _NUM ) ) ; } } if ( mNumTestsExpected > _NUM ) { reportTestRunStarted ( ) ; mNumTestsRun = _NUM ; mTestRunInProgress = _BOOL ; } }
public StyledString insert ( char ch , int offset ) throws StringIndexOutOfBoundsException { if ( offset < _NUM || offset > builder . length ( ) ) { throw new StringIndexOutOfBoundsException ( _STR + offset + _STR ) ; } builder . insert ( offset , ch ) ; return this ; }
public void addRoot ( ProtoElement root ) { roots . add ( root ) ; }
public void expandToObjectAndSelect ( Object elementOrTreePath , int level ) { if ( checkBusy ( ) ) { return ; } Object parent = getParentElement ( elementOrTreePath ) ; if ( ( ( parent != null ) && getExpandedState ( parent ) ) || isRootElement ( elementOrTreePath ) ) { Widget w = internalGetWidgetToSelect ( elementOrTreePath ) ; if ( null != w ) { List < Object > selectionList = new ArrayList < > ( ) ; selectionList . add ( w ) ; setSelection ( selectionList ) ; objectToSelect . set ( null ) ; } else { objectToSelect . set ( elementOrTreePath ) ; } } else { objectToSelect . set ( elementOrTreePath ) ; List < Object > objectsToExpand = createObjectList ( parent , new ArrayList < > ( ) ) ; if ( ! objectsToExpand . isEmpty ( ) ) { objectsToBeExpanded . addAll ( objectsToExpand ) ; Widget w = internalExpand ( elementOrTreePath , _BOOL ) ; if ( w != null ) { internalExpandToLevel ( w , level ) ; } } else { Widget w = internalGetWidgetToSelect ( elementOrTreePath ) ; if ( null != w ) { List < Object > selectionList = new ArrayList < > ( ) ; selectionList . add ( w ) ; setSelection ( selectionList ) ; objectToSelect . set ( null ) ; } } } }
public void appendCell ( float value ) { appendCell ( String . valueOf ( value ) ) ; }
public SVNChangeSetCollector ( ISynchronizePageConfiguration configuration ) { super ( configuration ) ; }
public void ensureMaxSize ( int maxWidth , int maxHeight , boolean keepProportions ) { int width = canvas . getWidth ( ) ; int height = canvas . getHeight ( ) ; if ( keepProportions ) { if ( width > height ) { if ( width > maxWidth ) { height = Math . round ( height *= maxWidth / ( double ) width ) ; width = maxWidth ; } } else { if ( height > maxHeight ) { width = Math . round ( width *= maxHeight / ( double ) height ) ; height = maxHeight ; } } } else { width = Math . min ( width , maxWidth ) ; height = Math . min ( height , maxHeight ) ; } resize ( width , height ) ; }
public static boolean isNormalized ( CharSequence src , java . text . Normalizer . Form form , int option ) { return NormalizerBase . isNormalized ( src . toString ( ) , form , option ) ; }
@ Override public String toString ( boolean freq ) { StringBuffer result = new StringBuffer ( ) ; result . append ( m_attribute . name ( ) + _STR ) ; switch ( m_comparison ) { case EQUAL : result . append ( _STR ) ; break ; case LESS_THAN_OR_EQUAL_TO : result . append ( _STR ) ; break ; case GREATER_THAN : result . append ( _STR ) ; break ; default : break ; } result . append ( _STR + Utils . doubleToString ( m_splitPoint , _NUM ) ) ; if ( freq ) { result . append ( _STR + m_frequency ) ; } return result . toString ( ) ; }
public static String unescapeSom ( String s ) { int idx = s . indexOf ( _STR ) ; if ( idx < _NUM ) return s ; StringBuilder sb = new StringBuilder ( ) ; int last = _NUM ; while ( idx >= _NUM ) { sb . append ( s . substring ( last , idx ) ) ; last = idx + _NUM ; idx = s . indexOf ( _STR , idx + _NUM ) ; } sb . append ( s . substring ( last ) ) ; return sb . toString ( ) ; }
void saveAsync ( ColumnEntity entity , Duration ttl , Consumer < ColumnEntity > callBack ) throws ExecuteAsyncQueryException , UnsupportedOperationException ;
private static CopyState readCopyState ( DataInput in ) throws IOException { byte [ ] infosBytes = new byte [ in . readVInt ( ) ] ; in . readBytes ( infosBytes , _NUM , infosBytes . length ) ; long gen = in . readVLong ( ) ; long version = in . readVLong ( ) ; Map < String , FileMetaData > files = CopyFilesHandler . readFilesMetaData ( in ) ; int count = in . readVInt ( ) ; Set < String > completedMergeFiles = new HashSet < > ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { completedMergeFiles . add ( in . readString ( ) ) ; } long primaryGen = in . readVLong ( ) ; return new CopyState ( files , version , gen , infosBytes , completedMergeFiles , primaryGen , null ) ; }
private void beforeName ( ) throws IOException { JsonScope context = peek ( ) ; if ( context == JsonScope . NONEMPTY_OBJECT ) { out . write ( _STR ) ; } else if ( context != JsonScope . EMPTY_OBJECT ) { throw new IllegalStateException ( _STR + stack ) ; } newline ( ) ; replaceTop ( JsonScope . DANGLING_NAME ) ; }
@ Transactional public void redeem ( final String tokenNumber , final String service ) { final Token token = tokenRepository . findByTokenNumberAndService ( tokenNumber , service ) ; if ( token == null ) throw new ApplicationRuntimeException ( _STR + tokenNumber + _STR ) ; redeem ( token ) ; }
public int lightenColor ( int color , float factor ) { float r = Color . red ( color ) * factor ; float g = Color . green ( color ) * factor ; float b = Color . blue ( color ) * factor ; int ir = Math . min ( _NUM , ( int ) r ) ; int ig = Math . min ( _NUM , ( int ) g ) ; int ib = Math . min ( _NUM , ( int ) b ) ; int ia = Color . alpha ( color ) ; return ( Color . argb ( ia , ir , ig , ib ) ) ; }
private static String toDatabaseString ( final OperandSize size ) { switch ( size ) { case BYTE : return _STR ; case WORD : return _STR ; case DWORD : return _STR ; case QWORD : return _STR ; case OWORD : return _STR ; case ADDRESS : return _STR ; default : throw new IllegalArgumentException ( String . format ( _STR , size ) ) ; } }
static String fileNameOfClass ( final String className , String typeSuffix ) { return className . replace ( _STR , _STR ) + _STR + typeSuffix ; }
public void writePv ( ProcessVar pv , int recursiveDepth ) { writePv ( pv , recursiveDepth , _BOOL ) ; }
public synchronized void add ( double minValue , double maxValue ) { super . add ( minValue ) ; mMaxValues . add ( maxValue ) ; }
private static void assertQualNS ( String qualNS ) throws XMPException { if ( qualNS == null || qualNS . length ( ) == _NUM ) { throw new XMPException ( _STR , XMPError . BADSCHEMA ) ; } }
public static StringBuilder formatTo ( StringBuilder buf , float [ ] d , String sep , NumberFormat nf ) { if ( d == null ) { return buf . append ( _STR ) ; } if ( d . length == _NUM ) { return buf ; } buf . append ( nf . format ( d [ _NUM ] ) ) ; for ( int i = _NUM ; i < d . length ; i ++ ) { buf . append ( sep ) ; buf . append ( nf . format ( d [ i ] ) ) ; } return buf ; }
public static void pack ( int [ ] n , String s ) { for ( int i = _NUM ; i < n . length ; i ++ ) { n [ i ] = _NUM ; } int idx = n . length - _NUM ; for ( int i = s . length ( ) - _NUM ; i >= _NUM ; i -- ) { n [ idx -- ] = s . charAt ( i ) - _STR ; } }
public int removeViewpoints ( int [ ] indices ) { for ( int i = indices . length - _NUM ; i >= _NUM ; -- i ) viewpointList . remove ( indices [ i ] ) ; viewpointIndex = indices [ _NUM ] - _NUM ; if ( viewpointList . size ( ) == _NUM ) { viewpointIndex = - _NUM ; } else if ( viewpointIndex < _NUM ) { viewpointIndex = viewpointList . size ( ) - _NUM ; } return ( viewpointIndex ) ; }
public void clearOnPageChangeListeners ( ) { if ( mOnPageChangeListeners != null ) { mOnPageChangeListeners . clear ( ) ; } }
private void updateColor ( ) { try { BreakpointConditionParser . evaluate ( inputField . getText ( ) ) ; inputField . setBackground ( Color . WHITE ) ; } catch ( final InvalidFormulaException e ) { inputField . setBackground ( Color . RED ) ; } }
public void removeIgnoredView ( View v ) { ignoredViews . remove ( v ) ; }
public boolean writeHeader ( OutputStream os ) { try { writeInt ( os , CACHE_MAGIC ) ; writeString ( os , key ) ; writeString ( os , etag == null ? _STR : etag ) ; writeLong ( os , serverDate ) ; writeLong ( os , lastModified ) ; writeLong ( os , ttl ) ; writeLong ( os , softTtl ) ; writeStringStringMap ( responseHeaders , os ) ; os . flush ( ) ; return _BOOL ; } catch ( IOException e ) { VinciLog . d ( _STR , e . toString ( ) ) ; return _BOOL ; } }
private static boolean ensureCurrent ( LeasedResource resource ) { return resource . getExpiration ( ) > SystemTime . timeMillis ( ) ; }
public static int maxFill ( final int n , final float f ) { return Math . min ( ( int ) Math . ceil ( n * f ) , n - _NUM ) ; }
public void clear ( ) { mCategories . clear ( ) ; mTitles . clear ( ) ; mValues . clear ( ) ; }
public void toggleSectionSelected ( int sectionIndex ) { setSectionSelected ( sectionIndex , ! isSectionSelected ( sectionIndex ) ) ; }
public String combine ( List < String > files , String outFile ) throws Exception { ArrayList < String > cmd = new ArrayList < String > ( ) ; cmd . add ( soxBin ) ; for ( String file : files ) { cmd . add ( file ) ; } cmd . add ( outFile ) ; int rc = execSox ( cmd , callback ) ; if ( rc != _NUM ) { throw new Exception ( _STR + rc ) ; } return outFile ; }
void stopScrollingInstance ( ) { if ( log . isLoggable ( PlatformLogger . Level . FINER ) ) { log . finer ( _STR + this ) ; } i_scroller . stop ( ) ; }
@ edu . umd . cs . findbugs . annotations . SuppressFBWarnings ( value = _STR , justification = _STR ) protected void newInternalMinute ( ) { double origCurrent = mCurrentIntensity ; int origState = mState ; int steps = getNumberOfSteps ( ) ; if ( ( mTransitionDuration > _NUM ) && ( steps > _NUM ) ) { double stepsPerMinute = steps / mTransitionDuration ; double stepSize = _NUM / ( double ) steps ; double intensityDiffPerMinute = stepSize * stepsPerMinute ; if ( Math . abs ( mCurrentIntensity - mTransitionTargetIntensity ) != _NUM ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + mTransitionTargetIntensity + _STR + mCurrentIntensity ) ; } if ( mTransitionTargetIntensity > mCurrentIntensity ) { mCurrentIntensity = mCurrentIntensity + intensityDiffPerMinute ; if ( mCurrentIntensity >= mTransitionTargetIntensity ) { mCurrentIntensity = mTransitionTargetIntensity ; if ( mCurrentIntensity >= getMaxIntensity ( ) ) { mState = ON ; } else { mState = INTERMEDIATE ; } } } else { mCurrentIntensity = mCurrentIntensity - intensityDiffPerMinute ; if ( mCurrentIntensity <= mTransitionTargetIntensity ) { mCurrentIntensity = mTransitionTargetIntensity ; if ( mCurrentIntensity <= getMinIntensity ( ) ) { mState = OFF ; } else { mState = INTERMEDIATE ; } } } sendIntensity ( mCurrentIntensity ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + mTransitionTargetIntensity + _STR + mCurrentIntensity ) ; } } } if ( origCurrent != mCurrentIntensity ) { firePropertyChange ( _STR , Double . valueOf ( origCurrent ) , Double . valueOf ( mCurrentIntensity ) ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + origCurrent + _STR + mCurrentIntensity ) ; } } if ( origState != mState ) { firePropertyChange ( _STR , Integer . valueOf ( origState ) , Integer . valueOf ( mState ) ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + origCurrent + _STR + mCurrentIntensity ) ; } } }
public void execute2 ( KahanObject in1 , double in2 ) { if ( Double . isInfinite ( in1 . _sum ) || Double . isInfinite ( in2 ) ) { in1 . set ( Double . isInfinite ( in2 ) ? in2 : in1 . _sum , _NUM ) ; return ; } double correction = in2 + in1 . _correction ; double sum = in1 . _sum + correction ; in1 . set ( sum , correction - ( sum - in1 . _sum ) ) ; }
public static Response newFixedLengthResponse ( String msg ) { return newFixedLengthResponse ( Status . OK , NanoHTTPD . MIME_HTML , msg ) ; }
@ Override public XMLEvent peek ( ) throws XMLStreamException { log . log ( Level . FINE , _STR ) ; if ( ! hasNext ( ) ) { throw new XMLStreamException ( _STR ) ; } log . log ( Level . FINE , _STR , nextEvent ) ; return nextEvent ; }
public static String replaceEndPoint ( String url , String endPoint ) { return endPoint + url . replaceFirst ( DEFAULT_ENDPOINT , _STR ) ; }
public static double length ( double x , double y , double z ) { return Math . sqrt ( x * x + y * y + z * z ) ; }
private void makeOkPath ( ) { path1 . reset ( ) ; int w2 = getMeasuredWidth ( ) / _NUM ; int h2 = getMeasuredHeight ( ) / _NUM ; double a = Math . cos ( Math . toRadians ( _NUM ) ) * getRadius ( ) ; double c = Math . sin ( Math . toRadians ( _NUM ) ) * getRadius ( ) ; double l = Math . cos ( Math . toRadians ( _NUM ) ) * _NUM * a ; double b = Math . sin ( Math . toRadians ( _NUM ) ) * l ; double m = Math . cos ( Math . toRadians ( _NUM ) ) * l ; path1 . moveTo ( ( float ) ( w2 - a ) , ( float ) ( h2 - c ) ) ; path1 . lineTo ( ( float ) ( w2 - a + m ) , ( float ) ( h2 - c + Math . sin ( Math . toRadians ( _NUM ) ) * l ) ) ; path1 . lineTo ( ( float ) ( w2 + a ) , ( float ) ( h2 - c ) ) ; pathMeasure1 . setPath ( path1 , _BOOL ) ; mMarkOklength = pathMeasure1 . getLength ( ) ; }
private static void _trustAllHttpsCertificates ( ) { SSLContext context ; if ( _trustManagers == null ) { _trustManagers = new TrustManager [ ] { new FakeX509TrustManager ( ) } ; } try { context = SSLContext . getInstance ( _STR ) ; context . init ( null , _trustManagers , new SecureRandom ( ) ) ; } catch ( GeneralSecurityException gse ) { throw new IllegalStateException ( gse . getMessage ( ) ) ; } HttpsURLConnection . setDefaultSSLSocketFactory ( context . getSocketFactory ( ) ) ; }
public void addMemberValue ( String name , MemberValue value ) { Pair p = new Pair ( ) ; p . name = pool . addUtf8Info ( name ) ; p . value = value ; if ( members == null ) members = new LinkedHashMap ( ) ; members . put ( name , p ) ; }
public java . lang . String toString ( ) { return toString ( value ) ; }
protected List < String > addWhitespace ( List < String > list ) { List < String > whitespaceList = new ArrayList < > ( ) ; for ( String value : list ) { whitespaceList . add ( addWhitespace ( value ) ) ; } return whitespaceList ; }
public static String computeQualifiedWidgetTypeName ( Node widgetNode ) { if ( widgetNode . getNodeType ( ) != Node . ELEMENT_NODE ) { return null ; } String typeName = widgetNode . getLocalName ( ) ; if ( typeName . length ( ) == _NUM || Character . isLowerCase ( typeName . charAt ( _NUM ) ) ) { return null ; } String packageName = UiBinderUtilities . getPackageName ( widgetNode . getNamespaceURI ( ) ) ; return packageName != null ? JavaUtilities . getQualifiedTypeName ( typeName , packageName ) : null ; }
private static boolean processFtypAtom ( ParsableByteArray atomData ) { atomData . setPosition ( Atom . HEADER_SIZE ) ; int majorBrand = atomData . readInt ( ) ; if ( majorBrand == BRAND_QUICKTIME ) { return _BOOL ; } atomData . skipBytes ( _NUM ) ; while ( atomData . bytesLeft ( ) > _NUM ) { if ( atomData . readInt ( ) == BRAND_QUICKTIME ) { return _BOOL ; } } return _BOOL ; }
public Map < String , String > parse ( final String str , char separator ) { if ( str == null ) { return new HashMap < String , String > ( ) ; } return parse ( str . toCharArray ( ) , separator ) ; }
public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = _BOOL ; }
public String delete ( String url , final int expectedStatusCode ) { return delete ( url , Collections . < String , String > emptyMap ( ) , expectedStatusCode ) ; }
protected void runningSum ( Set < Map . Entry < Double , Double > > c , double value , double [ ] sums ) { double offset = CONST - Math . log ( m_Width ) ; double logFactor = Math . log ( m_Threshold ) - Math . log ( _NUM - m_Threshold ) ; double logSumOfWeights = Math . log ( m_SumOfWeights ) ; Iterator < Map . Entry < Double , Double > > itr = c . iterator ( ) ; while ( itr . hasNext ( ) ) { Map . Entry < Double , Double > entry = itr . next ( ) ; if ( entry . getValue ( ) > _NUM ) { double diff = ( entry . getKey ( ) - value ) / m_Width ; double logDensity = offset - _NUM * diff * diff ; double logWeight = Math . log ( entry . getValue ( ) ) ; sums [ _NUM ] = logOfSum ( sums [ _NUM ] , logWeight + logDensity ) ; sums [ _NUM ] = logOfSum ( sums [ _NUM ] , logWeight ) ; if ( logDensity + logSumOfWeights < logOfSum ( logFactor + sums [ _NUM ] , logDensity + sums [ _NUM ] ) ) { break ; } } } }
@ Override public CategoricalTable copy ( ) { Map < Value , Double > newTable = new HashMap < Value , Double > ( ) ; for ( Value v : table . keySet ( ) ) { newTable . put ( v , table . get ( v ) ) ; } return new CategoricalTable ( variable , newTable ) ; }
public Configuration subConfig ( String prefix , String keyPrefix ) { Configuration sub = new Configuration ( ) ; addToSubConf ( sub , prefix . length ( ) > _NUM ? prefix + _STR + keyPrefix : keyPrefix ) ; return sub ; }
public Map < String , String > mapNameToDisplayName ( Set < String > names ) throws SMSException , SSOException { final Map < String , String > map = new HashMap < > ( names . size ( ) ) ; for ( String name : names ) { if ( smsConsoleServiceConfig . isServiceVisible ( name ) ) { final ServiceSchemaManager serviceSchemaManager = serviceSchemaManagerFactory . build ( name ) ; String displayName = getLocalizedServiceName ( serviceSchemaManager , name ) ; String resourceName = serviceSchemaManager . getResourceName ( ) ; if ( ! name . equals ( displayName ) && ! StringUtils . isBlank ( resourceName ) ) { map . put ( resourceName , displayName ) ; } } } return map ; }
public IntColumn ( int nrows , int capacity , int defaultValue ) { super ( int . class , new Integer ( defaultValue ) ) ; if ( capacity < nrows ) { throw new IllegalArgumentException ( _STR ) ; } m_values = new int [ capacity ] ; Arrays . fill ( m_values , defaultValue ) ; m_size = nrows ; }
public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
@ Override public String toString ( ) { return _STR + getId ( ) ; }
public static final boolean executePotentialWork ( final Object data , final ImageView imageView ) { final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask ( imageView ) ; if ( bitmapWorkerTask != null ) { final Object bitmapData = bitmapWorkerTask . mKey ; if ( bitmapData == null || ! bitmapData . equals ( data ) ) { bitmapWorkerTask . cancel ( _BOOL ) ; } else { return _BOOL ; } } return _BOOL ; }
public static void queueBitmap ( String key , Bitmap bmp ) { mBitmapQueue . put ( key , bmp ) ; }
private static int analyze ( Compiler compiler , int stepOpCodePos , int stepIndex ) throws javax . xml . transform . TransformerException { int stepType ; int stepCount = _NUM ; int analysisResult = _NUM ; while ( OpCodes . ENDOP != ( stepType = compiler . getOp ( stepOpCodePos ) ) ) { stepCount ++ ; boolean predAnalysis = analyzePredicate ( compiler , stepOpCodePos , stepType ) ; if ( predAnalysis ) analysisResult |= BIT_PREDICATE ; switch ( stepType ) { case OpCodes . OP_VARIABLE : case OpCodes . OP_EXTFUNCTION : case OpCodes . OP_FUNCTION : case OpCodes . OP_GROUP : analysisResult |= BIT_FILTER ; break ; case OpCodes . FROM_ROOT : analysisResult |= BIT_ROOT ; break ; case OpCodes . FROM_ANCESTORS : analysisResult |= BIT_ANCESTOR ; break ; case OpCodes . FROM_ANCESTORS_OR_SELF : analysisResult |= BIT_ANCESTOR_OR_SELF ; break ; case OpCodes . FROM_ATTRIBUTES : analysisResult |= BIT_ATTRIBUTE ; break ; case OpCodes . FROM_NAMESPACE : analysisResult |= BIT_NAMESPACE ; break ; case OpCodes . FROM_CHILDREN : analysisResult |= BIT_CHILD ; break ; case OpCodes . FROM_DESCENDANTS : analysisResult |= BIT_DESCENDANT ; break ; case OpCodes . FROM_DESCENDANTS_OR_SELF : if ( _NUM == stepCount && BIT_ROOT == analysisResult ) { analysisResult |= BIT_ANY_DESCENDANT_FROM_ROOT ; } analysisResult |= BIT_DESCENDANT_OR_SELF ; break ; case OpCodes . FROM_FOLLOWING : analysisResult |= BIT_FOLLOWING ; break ; case OpCodes . FROM_FOLLOWING_SIBLINGS : analysisResult |= BIT_FOLLOWING_SIBLING ; break ; case OpCodes . FROM_PRECEDING : analysisResult |= BIT_PRECEDING ; break ; case OpCodes . FROM_PRECEDING_SIBLINGS : analysisResult |= BIT_PRECEDING_SIBLING ; break ; case OpCodes . FROM_PARENT : analysisResult |= BIT_PARENT ; break ; case OpCodes . FROM_SELF : analysisResult |= BIT_SELF ; break ; case OpCodes . MATCH_ATTRIBUTE : analysisResult |= ( BIT_MATCH_PATTERN | BIT_ATTRIBUTE ) ; break ; case OpCodes . MATCH_ANY_ANCESTOR : analysisResult |= ( BIT_MATCH_PATTERN | BIT_ANCESTOR ) ; break ; case OpCodes . MATCH_IMMEDIATE_ANCESTOR : analysisResult |= ( BIT_MATCH_PATTERN | BIT_PARENT ) ; break ; default : throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NULL_ERROR_HANDLER , new Object [ ] { Integer . toString ( stepType ) } ) ) ; } if ( OpCodes . NODETYPE_NODE == compiler . getOp ( stepOpCodePos + _NUM ) ) { analysisResult |= BIT_NODETEST_ANY ; } stepOpCodePos = compiler . getNextStepPos ( stepOpCodePos ) ; if ( stepOpCodePos < _NUM ) break ; } analysisResult |= ( stepCount & BITS_COUNT ) ; return analysisResult ; }
public void addListener ( AfterServerStartListener listener ) { _afterStartListeners . add ( listener ) ; }
public synchronized void add ( String name , long threadId ) { if ( mFinished ) { throw new IllegalStateException ( _STR ) ; } mMarkers . add ( new Marker ( name , threadId , SystemClock . elapsedRealtime ( ) ) ) ; }
private static List < SizePair > generateValidPreviewSizeList ( Camera camera ) { Camera . Parameters parameters = camera . getParameters ( ) ; List < android . hardware . Camera . Size > supportedPreviewSizes = parameters . getSupportedPreviewSizes ( ) ; List < android . hardware . Camera . Size > supportedPictureSizes = parameters . getSupportedPictureSizes ( ) ; List < SizePair > validPreviewSizes = new ArrayList < > ( ) ; for ( android . hardware . Camera . Size previewSize : supportedPreviewSizes ) { float previewAspectRatio = ( float ) previewSize . width / ( float ) previewSize . height ; for ( android . hardware . Camera . Size pictureSize : supportedPictureSizes ) { float pictureAspectRatio = ( float ) pictureSize . width / ( float ) pictureSize . height ; if ( Math . abs ( previewAspectRatio - pictureAspectRatio ) < ASPECT_RATIO_TOLERANCE ) { validPreviewSizes . add ( new SizePair ( previewSize , pictureSize ) ) ; break ; } } } if ( validPreviewSizes . size ( ) == _NUM ) { Log . w ( TAG , _STR ) ; for ( android . hardware . Camera . Size previewSize : supportedPreviewSizes ) { validPreviewSizes . add ( new SizePair ( previewSize , null ) ) ; } } return validPreviewSizes ; }
private int makeAvailable ( ) throws IOException { if ( pos != - _NUM ) { return _NUM ; } total += tail - head - pad ; System . arraycopy ( buffer , tail - pad , buffer , _NUM , pad ) ; head = _NUM ; tail = pad ; for ( ; ; ) { int bytesRead = input . read ( buffer , tail , bufSize - tail ) ; if ( bytesRead == - _NUM ) { final String msg = _STR ; throw new FileUploadException ( MalformedStreamException , msg ) ; } tail += bytesRead ; findSeparator ( ) ; int av = available ( ) ; if ( av > _NUM || pos != - _NUM ) { return av ; } } }
public RelationNotification ( String notifType , Object sourceObj , long sequence , long timeStamp , String message , String id , String typeName , ObjectName objectName , List < ObjectName > unregMBeanList ) throws IllegalArgumentException { super ( notifType , sourceObj , sequence , timeStamp , message ) ; if ( ! isValidBasicStrict ( notifType , sourceObj , id , typeName ) || ! isValidCreate ( notifType ) ) { throw new IllegalArgumentException ( _STR ) ; } relationId = id ; relationTypeName = typeName ; relationObjName = safeGetObjectName ( objectName ) ; unregisterMBeanList = safeGetObjectNameList ( unregMBeanList ) ; }
public void addDataToStore ( Object [ ] row ) throws CarbonDataWriterException { dataRows . add ( row ) ; this . entryCount ++ ; if ( this . entryCount == this . blockletSize ) { try { semaphore . acquire ( ) ; producerExecutorServiceTaskList . add ( producerExecutorService . submit ( new Producer ( blockletDataHolder , dataRows , ++ writerTaskSequenceCounter ) ) ) ; blockletProcessingCount . incrementAndGet ( ) ; processedDataCount += entryCount ; LOGGER . info ( _STR + processedDataCount ) ; dataRows = new ArrayList < > ( this . blockletSize ) ; this . entryCount = _NUM ; } catch ( InterruptedException e ) { LOGGER . error ( e , e . getMessage ( ) ) ; throw new CarbonDataWriterException ( e . getMessage ( ) ) ; } } }
public boolean localHostOrDomainIs ( String host , String domain ) { return domain . startsWith ( host ) ; }
protected double entropy ( double [ ] [ ] dataZs , double [ ] [ ] dataWs ) { double entropy = _NUM ; int numInstances = dataZs . length ; for ( int j = _NUM ; j < m_numClasses ; j ++ ) { double m = _NUM ; double sum = _NUM ; for ( int i = _NUM ; i < numInstances ; i ++ ) { m += dataZs [ i ] [ j ] * dataWs [ i ] [ j ] ; sum += dataWs [ i ] [ j ] ; } m /= sum ; for ( int i = _NUM ; i < numInstances ; i ++ ) { entropy += dataWs [ i ] [ j ] * Math . pow ( dataZs [ i ] [ j ] - m , _NUM ) ; } } return entropy ; }
protected void writeDistribution ( Parameter parameter , boolean isRef , XMLWriter writer ) { switch ( parameter . priorType ) { case UNIFORM_PRIOR : String id = parameter . taxaId + _STR ; if ( isRef ) { writer . writeIDref ( UniformDistributionModelParser . UNIFORM_DISTRIBUTION_MODEL , id ) ; } else { writer . writeOpenTag ( UniformDistributionModelParser . UNIFORM_DISTRIBUTION_MODEL , new Attribute [ ] { new Attribute . Default < String > ( XMLParser . ID , id ) } ) ; writer . writeOpenTag ( UniformDistributionModelParser . LOWER ) ; writer . writeText ( Double . toString ( parameter . uniformLower ) ) ; writer . writeCloseTag ( UniformDistributionModelParser . LOWER ) ; writer . writeOpenTag ( UniformDistributionModelParser . UPPER ) ; writer . writeText ( Double . toString ( parameter . uniformUpper ) ) ; writer . writeCloseTag ( UniformDistributionModelParser . UPPER ) ; writer . writeCloseTag ( UniformDistributionModelParser . UNIFORM_DISTRIBUTION_MODEL ) ; } break ; case EXPONENTIAL_PRIOR : writer . writeOpenTag ( ExponentialDistributionModel . EXPONENTIAL_DISTRIBUTION_MODEL ) ; writer . writeOpenTag ( DistributionModelParser . MEAN ) ; writer . writeText ( Double . toString ( parameter . mean ) ) ; writer . writeCloseTag ( DistributionModelParser . MEAN ) ; writer . writeOpenTag ( DistributionModelParser . OFFSET ) ; writer . writeText ( Double . toString ( parameter . offset ) ) ; writer . writeCloseTag ( DistributionModelParser . OFFSET ) ; writer . writeCloseTag ( ExponentialDistributionModel . EXPONENTIAL_DISTRIBUTION_MODEL ) ; break ; case NORMAL_PRIOR : writer . writeOpenTag ( NormalDistributionModelParser . NORMAL_DISTRIBUTION_MODEL ) ; writer . writeOpenTag ( NormalDistributionModelParser . MEAN ) ; writer . writeText ( Double . toString ( parameter . mean ) ) ; writer . writeCloseTag ( NormalDistributionModelParser . MEAN ) ; writer . writeOpenTag ( NormalDistributionModelParser . STDEV ) ; writer . writeText ( Double . toString ( parameter . stdev ) ) ; writer . writeCloseTag ( NormalDistributionModelParser . STDEV ) ; writer . writeCloseTag ( NormalDistributionModelParser . NORMAL_DISTRIBUTION_MODEL ) ; break ; case LOGNORMAL_PRIOR : writer . writeOpenTag ( LogNormalDistributionModelParser . LOGNORMAL_DISTRIBUTION_MODEL , new Attribute [ ] { new Attribute . Default < Boolean > ( LogNormalDistributionModelParser . MEAN_IN_REAL_SPACE , parameter . isMeanInRealSpace ( ) ) , new Attribute . Default < Boolean > ( LogNormalDistributionModelParser . STDEV_IN_REAL_SPACE , parameter . isMeanInRealSpace ( ) ) } ) ; writer . writeOpenTag ( LogNormalDistributionModelParser . MEAN ) ; writer . writeText ( Double . toString ( parameter . mean ) ) ; writer . writeCloseTag ( LogNormalDistributionModelParser . MEAN ) ; writer . writeOpenTag ( LogNormalDistributionModelParser . STDEV ) ; writer . writeText ( Double . toString ( parameter . stdev ) ) ; writer . writeCloseTag ( LogNormalDistributionModelParser . STDEV ) ; writer . writeOpenTag ( LogNormalDistributionModelParser . OFFSET ) ; writer . writeText ( Double . toString ( parameter . offset ) ) ; writer . writeCloseTag ( LogNormalDistributionModelParser . OFFSET ) ; writer . writeCloseTag ( LogNormalDistributionModelParser . LOGNORMAL_DISTRIBUTION_MODEL ) ; break ; case GAMMA_PRIOR : writer . writeOpenTag ( GammaDistributionModel . GAMMA_DISTRIBUTION_MODEL ) ; writer . writeOpenTag ( DistributionModelParser . SHAPE ) ; writer . writeText ( Double . toString ( parameter . shape ) ) ; writer . writeCloseTag ( DistributionModelParser . SHAPE ) ; writer . writeOpenTag ( DistributionModelParser . SCALE ) ; writer . writeText ( Double . toString ( parameter . scale ) ) ; writer . writeCloseTag ( DistributionModelParser . SCALE ) ; writer . writeOpenTag ( DistributionModelParser . OFFSET ) ; writer . writeText ( Double . toString ( parameter . offset ) ) ; writer . writeCloseTag ( DistributionModelParser . OFFSET ) ; writer . writeCloseTag ( GammaDistributionModel . GAMMA_DISTRIBUTION_MODEL ) ; break ; default : throw new IllegalArgumentException ( _STR + parameter . getName ( ) ) ; } }
public void saveWorkingInstancesToFileQ ( ) { if ( m_IOThread == null ) { m_FileChooser . setCapabilitiesFilter ( m_FilterEditor . getCapabilitiesFilter ( ) ) ; m_FileChooser . setAcceptAllFileFilterUsed ( _BOOL ) ; int returnVal = m_FileChooser . showSaveDialog ( this ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { Instances inst = new Instances ( m_Instances ) ; inst . setClassIndex ( m_AttVisualizePanel . getColoringIndex ( ) ) ; saveInstancesToFile ( m_FileChooser . getSaver ( ) , inst ) ; } FileFilter temp = m_FileChooser . getFileFilter ( ) ; m_FileChooser . setAcceptAllFileFilterUsed ( _BOOL ) ; m_FileChooser . setFileFilter ( temp ) ; } else { JOptionPane . showMessageDialog ( this , _STR + _STR , _STR , JOptionPane . WARNING_MESSAGE ) ; } }
private void calculateColor ( int coord ) { coord = coord - mBarPointerHaloRadius ; if ( coord < _NUM ) { coord = _NUM ; } else if ( coord > mBarLength ) { coord = mBarLength ; } mColor = Color . HSVToColor ( Math . round ( mPosToOpacFactor * coord ) , mHSVColor ) ; if ( Color . alpha ( mColor ) > _NUM ) { mColor = Color . HSVToColor ( mHSVColor ) ; } else if ( Color . alpha ( mColor ) < _NUM ) { mColor = Color . TRANSPARENT ; } }
public int read ( char cbuf [ ] , int off , int len ) throws IOException { if ( ( off < _NUM ) || ( off > cbuf . length ) || ( len < _NUM ) || ( ( off + len ) > cbuf . length ) || ( ( off + len ) < _NUM ) ) throw new IndexOutOfBoundsException ( ) ; if ( len == _NUM ) return _NUM ; if ( next >= length ) return - _NUM ; int n = Math . min ( length - next , len ) ; text . getChars ( next , next + n , cbuf , off ) ; next += n ; return n ; }
private boolean adjustIndent ( ) { AlignmentImpl alignment = CoreFormatterUtil . getAlignment ( myCurrentBlock ) ; WhiteSpace whiteSpace = myCurrentBlock . getWhiteSpace ( ) ; if ( alignment == null || myAlignmentsToSkip . contains ( alignment ) ) { if ( whiteSpace . containsLineFeeds ( ) ) { adjustSpacingByIndentOffset ( ) ; } else { whiteSpace . arrangeSpaces ( myCurrentBlock . getSpaceProperty ( ) ) ; } return _BOOL ; } BlockAlignmentProcessor alignmentProcessor = ALIGNMENT_PROCESSORS . get ( alignment . getAnchor ( ) ) ; if ( alignmentProcessor == null ) { LOG . error ( String . format ( _STR , alignment . getAnchor ( ) ) ) ; return _BOOL ; } BlockAlignmentProcessor . Context context = new BlockAlignmentProcessor . Context ( myDocument , alignment , myCurrentBlock , myAlignmentMappings , myBackwardShiftedAlignedBlocks , getIndentOptionsToUse ( myCurrentBlock , myDefaultIndentOption ) , myRightMargin ) ; BlockAlignmentProcessor . Result result = alignmentProcessor . applyAlignment ( context ) ; final LeafBlockWrapper offsetResponsibleBlock = alignment . getOffsetRespBlockBefore ( myCurrentBlock ) ; switch ( result ) { case TARGET_BLOCK_PROCESSED_NOT_ALIGNED : return _BOOL ; case TARGET_BLOCK_ALIGNED : storeAlignmentMapping ( ) ; return _BOOL ; case BACKWARD_BLOCK_ALIGNED : if ( offsetResponsibleBlock == null ) { return _BOOL ; } Set < LeafBlockWrapper > blocksCausedRealignment = new HashSet < LeafBlockWrapper > ( ) ; myBackwardShiftedAlignedBlocks . clear ( ) ; myBackwardShiftedAlignedBlocks . put ( offsetResponsibleBlock , blocksCausedRealignment ) ; blocksCausedRealignment . add ( myCurrentBlock ) ; storeAlignmentMapping ( myCurrentBlock , offsetResponsibleBlock ) ; myCurrentBlock = offsetResponsibleBlock . getNextBlock ( ) ; onCurrentLineChanged ( ) ; return _BOOL ; case RECURSION_DETECTED : myCurrentBlock = offsetResponsibleBlock ; case UNABLE_TO_ALIGN_BACKWARD_BLOCK : myAlignmentsToSkip . add ( alignment ) ; return _BOOL ; default : return _BOOL ; } }
@ Override public void appendCode ( Type declaringType , TypeTuple inputTypes , Type outputType , List < Variable > inputVars , StringBuilder b ) { b . append ( field . toCode ( declaringType , inputVars ) ) ; }
public ForwardPlanner ( DialogueSystem system ) { this . system = system ; }
private JButton addButton ( String text , Container container , float alignment ) { JButton button = new JButton ( text ) ; button . setAlignmentX ( alignment ) ; container . add ( button ) ; return button ; }
private boolean noMatchForTagInAttributes ( AttributeSet attr , HTML . Tag t , Object tagValue ) { if ( attr != null && attr . isDefined ( t ) ) { Object newValue = attr . getAttribute ( t ) ; if ( ( tagValue == null ) ? ( newValue == null ) : ( newValue != null && tagValue . equals ( newValue ) ) ) { return _BOOL ; } } return _BOOL ; }
public String businessObjectDataKeyToString ( BusinessObjectDataKey businessObjectDataKey ) { if ( businessObjectDataKey == null ) { return null ; } return businessObjectDataKeyToString ( businessObjectDataKey . getNamespace ( ) , businessObjectDataKey . getBusinessObjectDefinitionName ( ) , businessObjectDataKey . getBusinessObjectFormatUsage ( ) , businessObjectDataKey . getBusinessObjectFormatFileType ( ) , businessObjectDataKey . getBusinessObjectFormatVersion ( ) , businessObjectDataKey . getPartitionValue ( ) , businessObjectDataKey . getSubPartitionValues ( ) , businessObjectDataKey . getBusinessObjectDataVersion ( ) ) ; }
public static boolean isValidIfd ( int ifdId ) { return ifdId == IfdId . TYPE_IFD_0 || ifdId == IfdId . TYPE_IFD_1 || ifdId == IfdId . TYPE_IFD_EXIF || ifdId == IfdId . TYPE_IFD_INTEROPERABILITY || ifdId == IfdId . TYPE_IFD_GPS ; }
private Usage createTalkUsage ( Context context ) { if ( talkUsage != null ) { return talkUsage ; } TypeToken < List < Usage > > token = new TypeToken < List < Usage > > ( ) { } ; List < Usage > initTalkIO = JsonUtils . parseJsonFile ( context , _STR , token ) ; talkUsage = initTalkIO . get ( _NUM ) ; return talkUsage ; }
@ Nullable public GrCall enclosingCall ( String name , GdslMembersHolderConsumer consumer ) { final PsiElement place = consumer . getPlace ( ) ; if ( place == null ) return null ; GrCall call = PsiTreeUtil . getParentOfType ( place , GrCall . class , _BOOL ) ; if ( call == null ) return null ; while ( call != null && ! name . equals ( getInvokedMethodName ( call ) ) ) { call = PsiTreeUtil . getParentOfType ( call , GrCall . class , _BOOL ) ; } if ( call == null ) return null ; final GrArgumentList argumentList = call . getArgumentList ( ) ; if ( argumentList != null ) { for ( GrExpression arg : argumentList . getExpressionArguments ( ) ) { if ( arg instanceof GrClosableBlock && PsiTreeUtil . findCommonParent ( place , arg ) == arg ) { return call ; } } } if ( call instanceof GrMethodCallExpression ) { for ( GrExpression arg : call . getClosureArguments ( ) ) { if ( arg instanceof GrClosableBlock && PsiTreeUtil . findCommonParent ( place , arg ) == arg ) { return call ; } } } return null ; }
public static void genOvfenvIsoImage ( String ovfenvPropKVStr , String isoFilePath ) { byte [ ] bOvfenvPropKVStr = ovfenvPropKVStr . getBytes ( ) ; String propFilePath = _STR ; File propFile = new File ( propFilePath ) ; try { FileUtils . writePlainFile ( propFilePath , bOvfenvPropKVStr ) ; } catch ( Exception e1 ) { propFile . delete ( ) ; log . error ( _STR , e1 . getMessage ( ) ) ; throw new IllegalStateException ( _STR ) ; } try { File isoFile = new File ( isoFilePath ) ; String [ ] genISOImageCommand = { GENISO_CMD , _STR , _STR , _STR , propFilePath , _STR , isoFilePath , _STR , _STR } ; Exec . Result result = Exec . sudo ( CMD_TIMEOUT , genISOImageCommand ) ; if ( ! result . exitedNormally ( ) || result . getExitValue ( ) != _NUM ) { log . error ( _STR , result . getExitValue ( ) , result . getStdError ( ) ) ; throw new IllegalStateException ( _STR ) ; } } catch ( Exception e ) { throw e ; } finally { propFile . delete ( ) ; } }
public static void createActionableEvent ( DbClient dbClient , EventUtils . EventCode eventCode , URI tenant , String name , String description , String warning , DataObject resource , List < URI > affectedResources , String approveMethod , Object [ ] approveParameters ) { createActionableEvent ( dbClient , eventCode , tenant , name , description , warning , resource , affectedResources , approveMethod , approveParameters , null , null ) ; }
public Rational ( ByteProvider byteProvider ) throws IOException { MXFPropertyPopulator . populateField ( byteProvider , this , _STR ) ; MXFPropertyPopulator . populateField ( byteProvider , this , _STR ) ; }
public synchronized void removeNotifications ( String type ) throws InstanceNotFoundException { Vector < Integer > v = getNotificationIDs ( type ) ; if ( v . isEmpty ( ) ) throw new InstanceNotFoundException ( _STR ) ; for ( Integer i : v ) removeNotification ( i ) ; }
private void unifyViaAtom ( Atomic parentAtom ) { Atomic childAtom = getRuleConclusionAtom ( ) ; Query parent = parentAtom . getParentQuery ( ) ; Map < String , String > unifiers = childAtom . getUnifiers ( parentAtom ) ; head . unify ( unifiers ) ; body . unify ( unifiers ) ; Set < String > childFVs = body . getVarSet ( ) ; Set < String > parentBVs = parentAtom . getVarNames ( ) ; Set < String > parentVars = parent . getVarSet ( ) ; parentBVs . forEach ( null ) ; childFVs . forEach ( null ) ; }
static void addUuid ( SsfNode node , UUID uuid ) { node . set ( _STR , uuid . getMostSignificantBits ( ) ) ; node . set ( _STR , uuid . getLeastSignificantBits ( ) ) ; }
public void removeChangingListener ( OnWheelChangedListener listener ) { changingListeners . remove ( listener ) ; }
public long objectFieldOffset ( Field field ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) ) { throw new IllegalArgumentException ( _STR ) ; } return objectFieldOffset0 ( field ) ; }
private static int determineConsecutiveDigitCount ( CharSequence msg , int startpos ) { int count = _NUM ; int len = msg . length ( ) ; int idx = startpos ; if ( idx < len ) { char ch = msg . charAt ( idx ) ; while ( isDigit ( ch ) && idx < len ) { count ++ ; idx ++ ; if ( idx < len ) { ch = msg . charAt ( idx ) ; } } } return count ; }
abstract void toXML ( StringBuilder xml , int level ) ;
public void dispose ( ) { mRunButton . setSelected ( _BOOL ) ; super . dispose ( ) ; }
public FluxConcatArray < T > concatAdditionalSourceFirst ( Publisher < ? extends T > source ) { int n = array . length ; @ SuppressWarnings ( _STR ) Publisher < ? extends T > [ ] newArray = new Publisher [ n + _NUM ] ; System . arraycopy ( array , _NUM , newArray , _NUM , n ) ; newArray [ _NUM ] = source ; return new FluxConcatArray < > ( delayError , newArray ) ; }
public void shutdown ( ) { shutdownServerThread ( ) ; shutdownSessions ( ) ; }
private boolean isLocalId ( String localId ) { if ( ! localId . startsWith ( _STR ) ) { return _BOOL ; } for ( int i = _NUM ; i < localId . length ( ) ; ++ i ) { char c = localId . charAt ( i ) ; if ( ! ( c >= _STR && c <= _STR ) && ! ( c >= _STR && c <= _STR ) ) { return _BOOL ; } } return _BOOL ; }
public ServerSocketBar bind ( ServerSocketBar ss ) throws ConfigException , IOException { synchronized ( _sslInitLock ) { if ( _stdServerSocket != null ) throw new ConfigException ( L . l ( _STR ) ) ; try { initConfig ( ) ; } catch ( RuntimeException e ) { e . printStackTrace ( ) ; throw e ; } _stdServerSocket = ss ; initSSL ( ) ; return this ; } }
private int checkInterruptWhileWaiting ( Node node ) { return Thread . interrupted ( ) ? ( transferAfterCancelledWait ( node ) ? THROW_IE : REINTERRUPT ) : _NUM ; }
private void resetOutputBuilders ( ) { ansi = Ansi . ansi ( ) ; stringBuilder = new StringBuilder ( ) ; }
public String read ( ByteBuffer buf , DictionaryCache dict ) { StringBuilder out = new StringBuilder ( ) ; if ( pre != null ) out . append ( pre ) ; if ( type == VOID ) return out . toString ( ) ; if ( type == NULL ) { out . append ( _STR ) ; return out . toString ( ) ; } if ( type == BYTE ) { out . append ( buf . get ( ) ) ; return out . toString ( ) ; } if ( type == SHORT ) { out . append ( buf . getShort ( ) ) ; return out . toString ( ) ; } if ( type == INT ) { out . append ( buf . getInt ( ) ) ; return out . toString ( ) ; } if ( type == LONG ) { out . append ( buf . getLong ( ) ) ; return out . toString ( ) ; } if ( type == DOUBLE ) { out . append ( buf . getDouble ( ) ) ; return out . toString ( ) ; } if ( type == BOOLEAN ) { out . append ( ( buf . get ( ) == _NUM ? _STR : _STR ) ) ; return out . toString ( ) ; } if ( type == STRING ) { short pos = buf . getShort ( ) ; if ( pos > - _NUM ) { out . append ( _STR ) ; out . append ( dict . get ( pos ) ) ; out . append ( _STR ) ; } else { int size = _NUM ; int val = buf . get ( ) & _NUM ; while ( val == _NUM ) { size += val ; val = buf . get ( ) & _NUM ; } size += val ; byte [ ] data = new byte [ size ] ; buf . get ( data ) ; out . append ( _STR ) ; out . append ( new String ( data , StandardCharsets . UTF_8 ) ) ; out . append ( _STR ) ; } return out . toString ( ) ; } return null ; }
public void write ( String filename ) { logger . info ( _STR ) ; try { openFile ( filename ) ; writeXmlHead ( ) ; startCarriers ( this . writer ) ; for ( Carrier carrier : carriers ) { startCarrier ( carrier , this . writer ) ; writeVehicles ( carrier , this . writer ) ; writeShipments ( carrier , this . writer ) ; writePlans ( carrier , this . writer ) ; endCarrier ( this . writer ) ; } endCarriers ( this . writer ) ; close ( ) ; logger . info ( _STR ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; logger . error ( e ) ; System . exit ( _NUM ) ; } }
public void removeResourceListener ( ResourceEventsListener listener ) { resourceListeners . remove ( listener ) ; }
public void testHasMainActivity ( ) throws Exception { mEnabled . add ( LauncherActivityDetector . ISSUE_MORE_THAN_ONE_LAUNCHER ) ; mEnabled . add ( LauncherActivityDetector . ISSUE_MISSING_LAUNCHER ) ; mEnabled . add ( LauncherActivityDetector . ISSUE_LAUNCHER_ACTIVITY_IN_LIBRARY ) ; String expected = _STR ; String result = lintProject ( xml ( FN_ANDROID_MANIFEST_XML , _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR ) ) ; assertEquals ( expected , result ) ; }
private void informUponSimilarName ( final StringBuffer messageBuffer , final String name , final String candidate ) { if ( name . equals ( candidate ) ) { return ; } if ( name . regionMatches ( _BOOL , _NUM , candidate , _NUM , PKG_LEN + _NUM ) ) { messageBuffer . append ( _STR ) ; messageBuffer . append ( candidate ) ; messageBuffer . append ( _STR ) ; } }
protected void writeHeader ( RandomAccessFile file , int size ) throws IOException { String str ; int offset = _NUM ; byte [ ] buffer = new byte [ _NUM ] ; str = Integer . toString ( getSize ( ) ) ; for ( int i = _NUM ; i < ( _NUM - str . length ( ) ) ; i ++ ) { buffer [ i ] = ( byte ) _STR ; } offset += ( _NUM - str . length ( ) ) ; for ( int i = _NUM ; i < str . length ( ) ; i ++ ) { buffer [ i + offset ] = ( byte ) str . charAt ( i ) ; } file . write ( buffer ) ; }
public String buildJavaVendor ( ) { return properties . getProperty ( _STR ) ; }
public VoiceResult ( String match , float confidence ) { mMatch = match ; mConfidence = confidence ; }
final void treeify ( Node < K , V > [ ] tab ) { TreeNode < K , V > root = null ; for ( TreeNode < K , V > x = this , next ; x != null ; x = next ) { next = ( TreeNode < K , V > ) x . next ; x . left = x . right = null ; if ( root == null ) { x . parent = null ; x . red = _BOOL ; root = x ; } else { K k = x . key ; int h = x . hash ; Class < ? > kc = null ; for ( TreeNode < K , V > p = root ; ; ) { int dir , ph ; K pk = p . key ; if ( ( ph = p . hash ) > h ) dir = - _NUM ; else if ( ph < h ) dir = _NUM ; else if ( ( kc == null && ( kc = comparableClassFor ( k ) ) == null ) || ( dir = compareComparables ( kc , k , pk ) ) == _NUM ) dir = tieBreakOrder ( k , pk ) ; TreeNode < K , V > xp = p ; if ( ( p = ( dir <= _NUM ) ? p . left : p . right ) == null ) { x . parent = xp ; if ( dir <= _NUM ) xp . left = x ; else xp . right = x ; root = balanceInsertion ( root , x ) ; break ; } } } } moveRootToFront ( tab , root ) ; }
private void addCategoryToTree ( DefaultMutableTreeNode node , String [ ] names ) { if ( names . length == _NUM ) { return ; } boolean matched = _BOOL ; for ( @ SuppressWarnings ( _STR ) Enumeration < DefaultMutableTreeNode > e = node . children ( ) ; e . hasMoreElements ( ) ; ) { DefaultMutableTreeNode childNode = e . nextElement ( ) ; String nodeName = ( String ) childNode . getUserObject ( ) ; if ( nodeName . equals ( names [ _NUM ] ) ) { if ( names . length > _NUM ) { addCategoryToTree ( childNode , Arrays . copyOfRange ( names , _NUM , names . length ) ) ; matched = _BOOL ; } else { } } } if ( ! matched ) { DefaultMutableTreeNode root = node ; for ( int i = _NUM ; i < names . length ; i ++ ) { DefaultMutableTreeNode newNode = new DefaultMutableTreeNode ( names [ i ] ) ; root . add ( newNode ) ; root = newNode ; } } }
public void addDrawerListener ( @ NonNull DrawerListener listener ) { if ( listener == null ) { return ; } if ( mListeners == null ) { mListeners = new ArrayList < DrawerListener > ( ) ; } mListeners . add ( listener ) ; }
private void editNote ( int noteId ) { hideSoftKeyboard ( ) ; Intent intent = new Intent ( MainActivity . this , NoteActivity . class ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_CLEAR_TASK ) ; intent . putExtra ( _STR , String . valueOf ( noteId ) ) ; startActivity ( intent ) ; }
public final Entry addEntry ( Position inputPosition , Position outputPosition ) { Entry entry = new Entry ( inputPosition , outputPosition ) ; entries . add ( entry ) ; return entry ; }
public void unHideActionBar ( View view ) { if ( toolbarAutoHider != null ) toolbarAutoHider . showComponent ( ) ; }
public static String formatTimeDelta ( long time , CharSequence sep ) { final StringBuilder sb = new StringBuilder ( ) ; final Formatter fmt = new Formatter ( sb ) ; for ( int i = TIME_UNIT_SIZES . length - _NUM ; i >= _NUM ; -- i ) { if ( i == _NUM && sb . length ( ) > _NUM ) { continue ; } if ( sb . length ( ) > _NUM ) { sb . append ( sep ) ; } final long acValue = time / TIME_UNIT_SIZES [ i ] ; time = time % TIME_UNIT_SIZES [ i ] ; if ( ! ( acValue == _NUM && sb . length ( ) == _NUM ) ) { fmt . format ( _STR + TIME_UNIT_DIGITS [ i ] + _STR , Long . valueOf ( acValue ) , TIME_UNIT_NAMES [ i ] ) ; } } fmt . close ( ) ; return sb . toString ( ) ; }
public void run ( ) { Log . d ( LOG , _STR + sampleRate + _STR + channels + _STR + bufferSizeInBytes + _STR + bufferSizeInMs + _STR ) ; isPlaying = _BOOL ; AudioTrack atrack = null ; try { atrack = new AudioTrack ( AudioManager . STREAM_MUSIC , sampleRate , channels == _NUM ? AudioFormat . CHANNEL_CONFIGURATION_MONO : AudioFormat . CHANNEL_CONFIGURATION_STEREO , AudioFormat . ENCODING_PCM_16BIT , bufferSizeInBytes , AudioTrack . MODE_STREAM ) ; atrack . setPlaybackPositionUpdateListener ( this ) ; atrack . setPositionNotificationPeriod ( msToSamples ( _NUM , sampleRate , channels ) ) ; if ( playerCallback != null ) playerCallback . playerAudioTrackCreated ( atrack ) ; this . audioTrack = atrack ; } catch ( Throwable t ) { Log . e ( LOG , _STR + t ) ; stop ( ) ; if ( playerCallback != null ) playerCallback . playerException ( t ) ; } while ( ! stopped ) { int ln = acquireSamples ( ) ; if ( stopped || ln == _NUM ) { releaseSamples ( ) ; break ; } int writtenNow = _NUM ; do { if ( writtenNow != _NUM ) { Log . d ( LOG , _STR ) ; try { Thread . sleep ( _NUM ) ; } catch ( InterruptedException e ) { } } int written = atrack . write ( lsamples , writtenNow , ln ) ; if ( written < _NUM ) { Log . e ( LOG , _STR + written ) ; stopped = _BOOL ; break ; } writtenTotal += written ; int buffered = writtenTotal - atrack . getPlaybackHeadPosition ( ) * channels ; if ( ! stopped && ! isPlaying ) { if ( buffered * _NUM >= bufferSizeInBytes ) { Log . d ( LOG , _STR + buffered + _STR ) ; atrack . play ( ) ; isPlaying = _BOOL ; } else { Log . d ( LOG , _STR ) ; } } writtenNow += written ; ln -= written ; } while ( ln > _NUM && ! stopped ) ; releaseSamples ( ) ; } if ( ! stopped && stoppedByEOF ) waitForLastTone ( ) ; if ( isPlaying ) atrack . pause ( ) ; atrack . flush ( ) ; atrack . release ( ) ; stopped = _BOOL ; Log . d ( LOG , _STR ) ; }
private static boolean hasSpecializedHandlerIntents ( Context context , Intent intent ) { try { PackageManager pm = context . getPackageManager ( ) ; List < ResolveInfo > handlers = pm . queryIntentActivities ( intent , PackageManager . GET_RESOLVED_FILTER ) ; if ( handlers == null || handlers . size ( ) == _NUM ) { return _BOOL ; } for ( ResolveInfo resolveInfo : handlers ) { IntentFilter filter = resolveInfo . filter ; if ( filter == null ) continue ; if ( filter . countDataAuthorities ( ) == _NUM || filter . countDataPaths ( ) == _NUM ) continue ; if ( resolveInfo . activityInfo == null ) continue ; return _BOOL ; } } catch ( RuntimeException e ) { Log . e ( TAG , _STR ) ; } return _BOOL ; }
private void clipViewOnTheRight ( Rect curViewBound , float curViewWidth , int right ) { curViewBound . right = ( int ) ( right - mClipPadding ) ; curViewBound . left = ( int ) ( curViewBound . right - curViewWidth ) ; }
public static double [ ] deconvolve ( final double [ ] p , final double rate ) { final double [ ] r = Arrays . copyOf ( p , p . length ) ; for ( int k = _NUM ; k < p . length ; k ++ ) { for ( int j = _NUM ; j < p . length ; j ++ ) { if ( k + j < p . length ) { r [ k + j ] -= rate * p [ k ] * p [ j ] ; } } } double sum = _NUM ; for ( final double q : r ) { sum += q ; } sum = _NUM / sum ; for ( int k = _NUM ; k < r . length ; k ++ ) { r [ k ] *= sum ; } return r ; }
public static String collapseNewlines ( String str ) { return collapseCharacter ( str , _STR ) ; }
private synchronized void readObject ( java . io . ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; init ( getName ( ) ) ; }
public static double calculateColumnTotal ( Values2D data , int column , int [ ] validRows ) { ParamChecks . nullNotPermitted ( data , _STR ) ; double total = _NUM ; int rowCount = data . getRowCount ( ) ; for ( int v = _NUM ; v < validRows . length ; v ++ ) { int row = validRows [ v ] ; if ( row < rowCount ) { Number n = data . getValue ( row , column ) ; if ( n != null ) { total += n . doubleValue ( ) ; } } } return total ; }
public boolean openAnalysis ( File f , SaveType saveType ) { if ( ! f . exists ( ) || ! f . canRead ( ) ) { throw new IllegalArgumentException ( _STR + f . getPath ( ) ) ; } mainFrameLoadSaveHelper . prepareForFileLoad ( f , saveType ) ; mainFrameLoadSaveHelper . loadAnalysis ( f ) ; return _BOOL ; }
public void childrenRemoved ( BeanContextMembershipEvent bcme ) { findAndUndo ( bcme . iterator ( ) ) ; }
public String process ( Item item ) throws ProcessException { int count = _NUM ; Item ss = item . getItemAs ( Relation . SYLLABLE ) ; Item firstSyllable = LAST_LAST_SYLLABLE_PATH . findItem ( item ) ; for ( Item p = ss ; p != null ; p = p . getNext ( ) ) { if ( p . equalsShared ( firstSyllable ) ) { break ; } count ++ ; } return Integer . toString ( rail ( count ) ) ; }
private void removeInstancesFromContainers ( ArrayList < Container > containers , Map < Integer , List < InstanceId > > allocation , Map < String , Integer > componentsToScaleDown ) { ArrayList < RamRequirement > ramRequirements = getRAMInstances ( componentsToScaleDown ) ; for ( RamRequirement ramRequirement : ramRequirements ) { String component = ramRequirement . getComponentName ( ) ; int numInstancesToRemove = - componentsToScaleDown . get ( component ) ; for ( int j = _NUM ; j < numInstancesToRemove ; j ++ ) { Pair < Integer , InstanceId > idPair = removeRRInstance ( containers , component ) ; List < InstanceId > instances = allocation . get ( idPair . first ) ; instances . remove ( idPair . second ) ; allocation . put ( idPair . first , instances ) ; } } }
protected void drawNormalMessage ( DrawHandler drawHandler , PointDouble send , PointDouble receive , RelationDrawer . ArrowEndType arrowEndType , boolean fillArrow , DrawingInfo drawingInfo ) { Line line = new Line ( send , receive ) ; drawHandler . drawLine ( line ) ; drawHandler . setLineType ( LineType . SOLID ) ; RelationDrawer . drawArrowToLine ( receive , drawHandler , line , _BOOL , arrowEndType , fillArrow , _BOOL ) ; double height = send . y - drawingInfo . getVerticalStart ( sendTick ) ; double topLeftX ; AlignHorizontal hAlignment ; if ( from == getFirstLifeline ( ) ) { topLeftX = send . x ; hAlignment = AlignHorizontal . LEFT ; } else { topLeftX = receive . x ; hAlignment = AlignHorizontal . RIGHT ; } if ( duration == _NUM ) { hAlignment = AlignHorizontal . CENTER ; } topLeftX += LIFELINE_TEXT_PADDING ; TextSplitter . drawText ( drawHandler , textLines , topLeftX , send . y - height , Math . abs ( send . x - receive . x ) - LIFELINE_TEXT_PADDING * _NUM , height , hAlignment , AlignVertical . BOTTOM ) ; }
private void killConsist ( ) { if ( validLocoAdr ( locoTextField1 . getText ( ) ) < _NUM ) { return ; } int locoAddr = getLocoAddr ( locoTextField1 , adrButton1 ) ; sendNceBinaryCommand ( locoAddr , NceBinaryCommand . LOCO_CMD_KILL_CONSIST , ( byte ) _NUM ) ; }
public ListenKey startListening ( ) throws IOException { return startListening ( null , _NUM ) ; }
@ Nonnull public static Set < Flag > parse ( @ Nonnegative final int bitmask ) { Check . notNegative ( bitmask , _STR ) ; final Set < Flag > flags = new HashSet < Flag > ( ) ; for ( final Flag flag : values ( ) ) { if ( ( bitmask & flag . getNumber ( ) ) != _NUM ) { flags . add ( flag ) ; } } return flags ; }
protected Package definePackage ( String packageName , Manifest manifest , URL url ) throws IllegalArgumentException { Attributes mainAttributes = manifest . getMainAttributes ( ) ; String dirName = packageName . replace ( _STR , _STR ) + _STR ; Attributes packageAttributes = manifest . getAttributes ( dirName ) ; boolean noEntry = _BOOL ; if ( packageAttributes == null ) { noEntry = _BOOL ; packageAttributes = mainAttributes ; } String specificationTitle = packageAttributes . getValue ( Attributes . Name . SPECIFICATION_TITLE ) ; if ( specificationTitle == null && ! noEntry ) { specificationTitle = mainAttributes . getValue ( Attributes . Name . SPECIFICATION_TITLE ) ; } String specificationVersion = packageAttributes . getValue ( Attributes . Name . SPECIFICATION_VERSION ) ; if ( specificationVersion == null && ! noEntry ) { specificationVersion = mainAttributes . getValue ( Attributes . Name . SPECIFICATION_VERSION ) ; } String specificationVendor = packageAttributes . getValue ( Attributes . Name . SPECIFICATION_VENDOR ) ; if ( specificationVendor == null && ! noEntry ) { specificationVendor = mainAttributes . getValue ( Attributes . Name . SPECIFICATION_VENDOR ) ; } String implementationTitle = packageAttributes . getValue ( Attributes . Name . IMPLEMENTATION_TITLE ) ; if ( implementationTitle == null && ! noEntry ) { implementationTitle = mainAttributes . getValue ( Attributes . Name . IMPLEMENTATION_TITLE ) ; } String implementationVersion = packageAttributes . getValue ( Attributes . Name . IMPLEMENTATION_VERSION ) ; if ( implementationVersion == null && ! noEntry ) { implementationVersion = mainAttributes . getValue ( Attributes . Name . IMPLEMENTATION_VERSION ) ; } String implementationVendor = packageAttributes . getValue ( Attributes . Name . IMPLEMENTATION_VENDOR ) ; if ( implementationVendor == null && ! noEntry ) { implementationVendor = mainAttributes . getValue ( Attributes . Name . IMPLEMENTATION_VENDOR ) ; } return definePackage ( packageName , specificationTitle , specificationVersion , specificationVendor , implementationTitle , implementationVersion , implementationVendor , isSealed ( manifest , dirName ) ? url : null ) ; }
@ SuppressWarnings ( _STR ) private void parse ( ) throws SAXException , IOException { init ( ) ; try { mHandCont . setDocumentLocator ( this ) ; mHandCont . startDocument ( ) ; if ( mPh != PH_MISC_DTD ) { mPh = PH_MISC_DTD ; } int evt = EV_NULL ; do { wsskip ( ) ; switch ( evt = step ( ) ) { case EV_ELM : case EV_ELMS : mPh = PH_DOCELM ; break ; case EV_COMM : case EV_PI : break ; case EV_DTD : if ( mPh >= PH_DTD_MISC ) { panic ( FAULT ) ; } mPh = PH_DTD_MISC ; break ; default : panic ( FAULT ) ; } } while ( mPh < PH_DOCELM ) ; do { switch ( evt ) { case EV_ELM : case EV_ELMS : if ( mIsNSAware == _BOOL ) { mHandCont . startElement ( mElm . value , mElm . name , _STR , mAttrs ) ; } else { mHandCont . startElement ( _STR , _STR , mElm . name , mAttrs ) ; } if ( evt == EV_ELMS ) { evt = step ( ) ; break ; } case EV_ELME : if ( mIsNSAware == _BOOL ) { mHandCont . endElement ( mElm . value , mElm . name , _STR ) ; } else { mHandCont . endElement ( _STR , _STR , mElm . name ) ; } while ( mPref . list == mElm ) { mHandCont . endPrefixMapping ( mPref . name ) ; mPref = del ( mPref ) ; } mElm = del ( mElm ) ; if ( mElm == null ) { mPh = PH_DOCELM_MISC ; } else { evt = step ( ) ; } break ; case EV_TEXT : case EV_WSPC : case EV_CDAT : case EV_COMM : case EV_PI : case EV_ENT : evt = step ( ) ; break ; default : panic ( FAULT ) ; } } while ( mPh == PH_DOCELM ) ; do { if ( wsskip ( ) == EOS ) { break ; } switch ( step ( ) ) { case EV_COMM : case EV_PI : break ; default : panic ( FAULT ) ; } } while ( mPh == PH_DOCELM_MISC ) ; mPh = PH_AFTER_DOC ; } catch ( SAXException saxe ) { throw saxe ; } catch ( IOException ioe ) { throw ioe ; } catch ( RuntimeException rte ) { throw rte ; } catch ( Exception e ) { panic ( e . toString ( ) ) ; } finally { mHandCont . endDocument ( ) ; cleanup ( ) ; } }
protected boolean engineVerify ( byte [ ] sigBytes ) throws SignatureException { if ( sigBytes == null ) { throw new NullPointerException ( _STR ) ; } return checkSignature ( sigBytes , _NUM , _NUM ) ; }
public void addMatchString ( String matchString ) { matchStrings . add ( matchString ) ; }
public void delete ( ) throws IOException { close ( ) ; deleteContents ( directory ) ; }
public String timeAgo ( final long millis ) { return time ( System . currentTimeMillis ( ) - millis ) ; }
public static byte [ ] hexStringToByteArray ( String input ) { if ( ( input == null ) || ( input . length ( ) % _NUM != _NUM ) ) { throw new IllegalArgumentException ( _STR + _STR + input ) ; } byte [ ] output = new byte [ input . length ( ) / _NUM ] ; for ( int i = _NUM ; i < output . length ; i ++ ) { output [ i ] = ( byte ) ( ( Character . digit ( input . charAt ( i * _NUM ) , _NUM ) << _NUM ) + Character . digit ( input . charAt ( i * _NUM + _NUM ) , _NUM ) ) ; } return output ; }
private boolean stopTrackingJob ( JobStatus jobStatus ) { boolean removed ; boolean rocking ; synchronized ( mJobs ) { removed = mJobs . remove ( jobStatus ) ; rocking = mReadyToRock ; } if ( removed && rocking ) { for ( int i = _NUM ; i < mControllers . size ( ) ; i ++ ) { StateController controller = mControllers . get ( i ) ; controller . maybeStopTrackingJob ( jobStatus ) ; } } return removed ; }
public double coefficientOfVariance ( ) { return Math . sqrt ( variance ( ) ) / mean ( ) ; }
final boolean transferAfterCancelledWait ( Node node ) { if ( compareAndSetWaitStatus ( node , Node . CONDITION , _NUM ) ) { enq ( node ) ; return _BOOL ; } while ( ! isOnSyncQueue ( node ) ) Thread . yield ( ) ; return _BOOL ; }
public String toString ( ) { StringBuilder buf = new StringBuilder ( ) ; buf . append ( this . coefficient ) ; if ( this . variables . length > _NUM ) { buf . append ( _STR ) ; } for ( int variable : this . variables ) { buf . append ( _STR ) ; buf . append ( variable ) ; buf . append ( _STR ) ; } return buf . toString ( ) ; }
public SkeletonVersionChecker ( int defaultVersion ) { myExplicitVersion = createTreeMap ( ) ; myDefaultVersion = defaultVersion ; load ( ) ; }
@ Override public AttributeSchemaImpl upgradeAttribute ( AttributeSchemaImpl newAttr ) throws UpgradeException { return updateDefaultValues ( newAttr , Collections . singleton ( OLDEST_VERSION ) ) ; }
public static String toDalvikName ( String canonicalName ) { final boolean isArray = ( canonicalName . charAt ( _NUM ) == _STR ) ; if ( isArray ) { return canonicalName . replace ( _STR , _STR ) ; } else { if ( canonicalName . equals ( _STR ) ) return _STR ; else if ( canonicalName . equals ( _STR ) ) return _STR ; else if ( canonicalName . equals ( _STR ) ) return _STR ; else if ( canonicalName . equals ( _STR ) ) return _STR ; else if ( canonicalName . equals ( _STR ) ) return _STR ; else if ( canonicalName . equals ( _STR ) ) return _STR ; else if ( canonicalName . equals ( _STR ) ) return _STR ; else if ( canonicalName . equals ( _STR ) ) return _STR ; else if ( canonicalName . equals ( _STR ) ) return _STR ; else return _STR + canonicalName . replace ( _STR , _STR ) + _STR ; } }
private void emitEnsureCollection ( Method method , String fieldName , StringBuilder builder ) { builder . append ( _STR ) ; builder . append ( getEnsureName ( fieldName ) ) ; builder . append ( _STR ) ; builder . append ( _STR ) ; builder . append ( fieldName ) ; builder . append ( _STR ) ; builder . append ( fieldName ) ; builder . append ( _STR ) ; builder . append ( getImplName ( method . getGenericReturnType ( ) , _BOOL ) ) ; builder . append ( _STR ) ; builder . append ( _STR ) ; builder . append ( _STR ) ; }
public void unregisterClient ( ClientProxyMembershipID proxyID , AcceptorImpl acceptor , boolean clientDisconnectedCleanly ) { unregisterClient ( proxyID ) ; if ( acceptor != null ) { CacheClientNotifier ccn = acceptor . getCacheClientNotifier ( ) ; if ( ccn != null ) { try { ccn . unregisterClient ( proxyID , clientDisconnectedCleanly ) ; } catch ( CancelException ignore ) { } } } }
private String doubleQuotesHandling ( String resource ) { return resource . replaceAll ( _STR , Matcher . quoteReplacement ( _STR ) ) ; }
public static int allocateNewContainer ( ArrayList < Container > containers , Resource capacity , int paddingPercentage ) { containers . add ( new Container ( capacity , paddingPercentage ) ) ; return containers . size ( ) ; }
public static boolean isLocalResourceUri ( Uri uri ) { final String scheme = getSchemeOrNull ( uri ) ; return LOCAL_RESOURCE_SCHEME . equals ( scheme ) ; }
private boolean isMineshafterPresent ( ) { try { Class . forName ( _STR ) ; return _BOOL ; } catch ( Exception e ) { return _BOOL ; } }
protected String doWaitForPath ( String filePath ) { String path = null ; long waitTimeMillis = _NUM ; assertTrue ( _STR + filePath + _STR , mSm . isObbMounted ( filePath ) ) ; while ( path == null ) { try { Thread . sleep ( WAIT_TIME_INCR ) ; waitTimeMillis += WAIT_TIME_INCR ; if ( waitTimeMillis > MAX_WAIT_TIME ) { fail ( _STR + filePath ) ; } } catch ( InterruptedException e ) { } path = mSm . getMountedObbPath ( filePath ) ; } Log . i ( LOG_TAG , _STR + path ) ; return path ; }
@ Override protected boolean isZoneLevelResource ( ) { return _BOOL ; }
private void validateMessage ( String expectedType , String type , long returnCode , String service , String payload ) throws ReplicatorException { if ( ! type . equals ( expectedType ) ) { throw new ReplicatorException ( _STR + Protocol . TYPE_FILTERED + _STR + type + _STR ) ; } else if ( returnCode != _NUM ) { throw new ReplicatorException ( _STR + returnCode + _STR + payload ) ; } else if ( ! service . equals ( messageGenerator . getService ( ) ) ) { throw new ReplicatorException ( _STR + service + _STR + messageGenerator . getService ( ) + _STR ) ; } }
private void closeDatabases ( ) { s_logger . log ( Level . INFO , _STR ) ; s_logger . log ( Level . INFO , _STR ) ; m_source . close ( ) ; m_target . close ( ) ; m_source . reset ( ) ; m_source = null ; m_target . reset ( ) ; m_target = null ; m_direction = null ; m_objectType = null ; m_objectTypes = null ; m_sourceMap = null ; m_targetMap = null ; m_objectList = new ArrayList < String > ( ) ; m_trackingList = new ArrayList < String > ( ) ; m_tempIndexes = null ; m_counterPrg = null ; m_counterDrp = null ; m_counterUpd = null ; m_counterAdd = null ; m_totalPrg = null ; m_totalDrp = null ; m_totalUpd = null ; m_totalAdd = null ; m_detailType = null ; m_detailTypes = null ; m_detailCounterDrp = null ; m_detailCounterUpd = null ; m_detailCounterAdd = null ; System . gc ( ) ; }
public static byte [ ] MD5 ( final byte [ ] message , final int offset , final int length ) { MessageDigest digest ; try { digest = MessageDigest . getInstance ( _STR ) ; digest . update ( message , offset , length ) ; final byte [ ] md5 = digest . digest ( ) ; return md5 ; } catch ( final NoSuchAlgorithmException e ) { if ( Cfg . EXCEPTION ) { Check . log ( e ) ; } } return null ; }
private int runMetastoreCompareJob ( Optional < Path > inputTableListPath , Path outputPath ) throws InterruptedException , IOException , ClassNotFoundException , TemplateRenderException { LOG . info ( _STR ) ; int result ; if ( inputTableListPath . isPresent ( ) ) { result = runMetastoreCompareJobWithTextInput ( inputTableListPath . get ( ) , outputPath ) ; } else { result = runMetastoreCompareJob ( outputPath ) ; } if ( result == _NUM ) { LOG . info ( _STR + _STR + VelocityUtils . renderTemplate ( STEP1_HQL_TEMPLATE , velocityContext ) ) ; } return result ; }
public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
public void deleteSubPeopleContainers ( Set peopleContainers ) throws AMException , SSOException { Iterator iter = peopleContainers . iterator ( ) ; while ( iter . hasNext ( ) ) { String peopleContainerDN = ( String ) iter . next ( ) ; AMPeopleContainer peopleContainer = new AMPeopleContainerImpl ( super . token , peopleContainerDN ) ; peopleContainer . delete ( ) ; } }
private void testFindRecentMessageUidsInMailbox ( ) throws Exception { LOG . info ( _STR ) ; List < MessageUid > recentMessages = messageMapper . findRecentMessageUidsInMailbox ( MBOXES . get ( _NUM ) ) ; assertEquals ( MESSAGE_NO . size ( ) - _NUM , recentMessages . size ( ) ) ; }
public void queueEvent ( Runnable r ) { if ( r == null ) { throw new IllegalArgumentException ( _STR ) ; } synchronized ( sGLThreadManager ) { mEventQueue . add ( r ) ; sGLThreadManager . notifyAll ( ) ; } }
private void addErrorMessage ( String message ) { if ( message != null ) { m_errorMessages . append ( message ) ; } m_errorMessages . append ( _STR ) ; }
@ SuppressWarnings ( _STR ) protected final void ensureCapacity ( long targetSize ) { long capacity = capacity ( ) ; if ( targetSize > capacity ) { inflateSpine ( ) ; for ( int i = spineIndex + _NUM ; targetSize > capacity ; i ++ ) { if ( i >= spine . length ) { int newSpineSize = spine . length * _NUM ; spine = Arrays . copyOf ( spine , newSpineSize ) ; priorElementCount = Arrays . copyOf ( priorElementCount , newSpineSize ) ; } int nextChunkSize = chunkSize ( i ) ; spine [ i ] = ( E [ ] ) new Object [ nextChunkSize ] ; priorElementCount [ i ] = priorElementCount [ i - _NUM ] + spine [ i - _NUM ] . length ; capacity += nextChunkSize ; } } }
public void write ( String key , byte [ ] newValue ) throws Exception { Map < String , byte [ ] > entry = new HashMap < > ( ) ; entry . put ( key , newValue ) ; write ( entry ) ; }
public void timingEvent ( float fraction ) { current . x = ( int ) ( start . x + ( end . x - start . x ) * fraction ) ; current . y = ( int ) ( start . y + ( end . y - start . y ) * fraction ) ; track . setCarPosition ( current ) ; }
public void transform ( Source xmlSource , Result outputTarget ) throws TransformerException { transform ( xmlSource , outputTarget , _BOOL ) ; }
public String query ( String handler , SolrQueryRequest req ) throws Exception { try ( SolrCore core = getCoreInc ( ) ) { SolrQueryResponse rsp = new SolrQueryResponse ( ) ; SolrRequestInfo . setRequestInfo ( new SolrRequestInfo ( req , rsp ) ) ; core . execute ( core . getRequestHandler ( handler ) , req , rsp ) ; if ( rsp . getException ( ) != null ) { throw rsp . getException ( ) ; } StringWriter sw = new StringWriter ( _NUM ) ; QueryResponseWriter responseWriter = core . getQueryResponseWriter ( req ) ; responseWriter . write ( sw , req , rsp ) ; req . close ( ) ; return sw . toString ( ) ; } finally { req . close ( ) ; SolrRequestInfo . clearRequestInfo ( ) ; } }
private boolean bothLinksHaveSameLinkStats ( Link linkA , Link linkB ) { boolean bothLinksHaveSameLinkStats = _BOOL ; if ( linkA . getFreespeed ( ) != linkB . getFreespeed ( ) ) { bothLinksHaveSameLinkStats = _BOOL ; } if ( linkA . getCapacity ( ) != linkB . getCapacity ( ) ) { bothLinksHaveSameLinkStats = _BOOL ; } return bothLinksHaveSameLinkStats ; }
public String generateSanitizedId ( ) { String result = generateId ( ) ; result = result . replace ( _STR , _STR ) ; result = result . replace ( _STR , _STR ) ; result = result . replace ( _STR , _STR ) ; return result ; }
public static synchronized void removeProvider ( int providerNumber ) { Provider p = providers . remove ( providerNumber - _NUM ) ; providersNames . remove ( p . getName ( ) ) ; setNeedRefresh ( ) ; }
private Object parseElement ( Node element ) throws XmlParseException { try { return parseElementRaw ( element ) ; } catch ( Exception e ) { throw new XmlParseException ( _STR + element . getNodeName ( ) , e ) ; } }
public IOUtils ( ) { super ( ) ; }
public static String format ( Money money ) { long microAmount = _NUM ; if ( money != null ) { microAmount = money . getMicroAmount ( ) ; } else { return PLACEHOLDER_NULL ; } double amount = ( double ) microAmount / MICRO_UNITS ; return String . format ( FORMAT_MONEY , amount ) ; }
private void deleteInstance ( EntryClass eclass ) { int idx = entryClasses . indexOf ( eclass ) ; eclass = ( EntryClass ) entryClasses . get ( idx ) ; int num = eclass . getNumInstances ( ) - _NUM ; if ( num == _NUM ) entryClasses . remove ( idx ) ; eclass . setNumInstances ( num ) ; }
public Properties readSettings ( ) { try { String pacScriptUrl = detectScriptUrlPerDHCP ( ) ; if ( pacScriptUrl == null ) { pacScriptUrl = detectScriptUrlPerDNS ( ) ; } if ( pacScriptUrl == null ) { return null ; } Properties result = new Properties ( ) ; result . setProperty ( _STR , pacScriptUrl ) ; return result ; } catch ( IOException e ) { return new Properties ( ) ; } }
public void logWarning ( String message ) { logger . warning ( logPrefix + message ) ; }
public static String readAsString ( InputStream is ) throws IOException { StringBuffer buf = new StringBuffer ( ) ; byte [ ] b = new byte [ _NUM ] ; int nread = - _NUM ; while ( ( nread = is . read ( b ) ) >= _NUM ) { String s = new String ( b , _NUM , nread ) ; buf . append ( s ) ; } return buf . toString ( ) ; }
public ArrayFieldVector ( int size , T preset ) { this ( preset . getField ( ) , size ) ; Arrays . fill ( data , preset ) ; }
public static synchronized void unregisterTransactionServicePlugin ( TransactionServicePlugin l ) { if ( service_ != null ) { service_ . removeTSListener ( l ) ; } tsListenersList_ . remove ( l ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
private void push ( final int type ) { if ( outputStack == null ) { outputStack = new int [ _NUM ] ; } int n = outputStack . length ; if ( outputStackTop >= n ) { int [ ] t = new int [ Math . max ( outputStackTop + _NUM , _NUM * n ) ] ; System . arraycopy ( outputStack , _NUM , t , _NUM , n ) ; outputStack = t ; } outputStack [ outputStackTop ++ ] = type ; int top = owner . inputStackTop + outputStackTop ; if ( top > owner . outputStackMax ) { owner . outputStackMax = top ; } }
protected static void isort ( int level [ ] , float BC [ ] ) { float temp ; int temp2 ; for ( int i = _NUM ; i < BC . length - _NUM ; i ++ ) { int j = i ; temp = BC [ j + _NUM ] ; temp2 = level [ j + _NUM ] ; if ( temp == _NUM ) { continue ; } int prej = j + _NUM ; while ( j > - _NUM && ( temp < BC [ j ] || BC [ j ] == _NUM ) ) { if ( BC [ j ] == _NUM ) { j -- ; continue ; } else { BC [ prej ] = BC [ j ] ; level [ prej ] = level [ j ] ; prej = j ; j -- ; } } BC [ prej ] = temp ; level [ prej ] = temp2 ; } }
public void testIsConsistentModelClass ( ) { SessionNode node1 = new SessionNode ( Type1 . class ) ; SessionNode node2 = new SessionNode ( Type2 . class ) ; SessionNode node3 = new SessionNode ( Type3 . class ) ; SessionNode node4 = new SessionNode ( new Class [ ] { Type1 . class , Type2 . class } ) ; SessionNode node6 = new SessionNode ( new Class [ ] { Type1 . class , Type2 . class , Type3 . class } ) ; SessionNode node7 = new SessionNode ( new Class [ ] { Type1 . class , Type4 . class } ) ; List parents = new ArrayList ( ) ; parents . add ( node1 ) ; parents . add ( node2 ) ; parents . add ( node3 ) ; parents . remove ( node1 ) ; parents . remove ( node2 ) ; parents . remove ( node3 ) ; parents . add ( node4 ) ; assertTrue ( node1 . isConsistentModelClass ( Type1 . class , parents , _BOOL ) ) ; parents . add ( node6 ) ; assertTrue ( node1 . isConsistentModelClass ( Type1 . class , parents , _BOOL ) ) ; parents . remove ( node6 ) ; parents . add ( node7 ) ; assertTrue ( ! node1 . isConsistentModelClass ( Type1 . class , parents , _BOOL ) ) ; }
public void findAndInit ( Object someObj ) { if ( someObj instanceof com . bbn . openmap . MapBean ) { logger . fine ( _STR ) ; setMapBean ( ( MapBean ) someObj ) ; } }
public void removeAllLayers ( ) { _layers . removeAllElements ( ) ; refreshLayers = _BOOL ; super . repaint ( ) ; }
public int size ( ) { return productions . size ( ) ; }
public static Future < BoxedUnit > zkAsyncCreateFullPathOptimistic ( final ZooKeeperClient zkc , final String pathToCreate , final byte [ ] data , final List < ACL > acl , final CreateMode createMode ) { Optional < String > parentPathShouldNotCreate = Optional . absent ( ) ; return zkAsyncCreateFullPathOptimistic ( zkc , pathToCreate , parentPathShouldNotCreate , data , acl , createMode ) ; }
private void writeObject ( ObjectOutputStream oos ) throws IOException { oos . defaultWriteObject ( ) ; writeStroke ( oos , stroke , OMGraphicAdapter . BASIC_STROKE ) ; writeTextureMask ( oos , textureMask ) ; }
public boolean equals ( Object obj ) { if ( obj instanceof MRfQResponseLineQty ) { MRfQResponseLineQty cmp = ( MRfQResponseLineQty ) obj ; if ( ! cmp . isValidAmt ( ) || ! isValidAmt ( ) ) return _BOOL ; BigDecimal cmpNet = cmp . getNetAmt ( ) ; if ( cmpNet == null ) return _BOOL ; BigDecimal net = cmp . getNetAmt ( ) ; if ( net == null ) return _BOOL ; return cmpNet . compareTo ( net ) == _NUM ; } return _BOOL ; }
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
public ReflectiveAttribute ( Class < O > objectType , Class < A > fieldType , String fieldName ) { super ( objectType , fieldType , fieldName ) ; Field field ; try { field = getField ( objectType , fieldName ) ; if ( ! field . isAccessible ( ) ) { field . setAccessible ( _BOOL ) ; } } catch ( Exception e ) { throw new IllegalStateException ( _STR + fieldName + _STR + objectType . getName ( ) + _STR ) ; } if ( ! fieldType . isAssignableFrom ( field . getType ( ) ) ) { throw new IllegalStateException ( _STR + fieldName + _STR + field . getType ( ) + _STR + objectType . getName ( ) + _STR + fieldType . getName ( ) ) ; } this . field = field ; }
private void processEvent ( EventLogControl check , final String name , final DTNHost host1 , final DTNHost host2 , final Message message ) { String descString ; if ( ! check . showEvent ( ) ) { return ; } descString = name + _STR + ( host1 != null ? host1 : _STR ) + ( host2 != null ? ( HOST_DELIM + host2 ) : _STR ) + ( message != null ? _STR + message : _STR ) ; if ( regExp != null && ! descString . matches ( regExp ) ) { return ; } if ( check . pauseOnEvent ( ) ) { gui . setPaused ( _BOOL ) ; if ( host1 != null ) { gui . setFocus ( host1 ) ; } } addEvent ( name , host1 , host2 , message , check . pauseOnEvent ( ) ) ; }
public boolean removeMembershipListener ( MembershipListener listener ) { return membershipListeners . remove ( listener ) != null ; }
public static Uri addMessageToUri ( ContentResolver resolver , Uri uri , String address , String body , String subject , Long date , boolean read , boolean deliveryReport , long threadId ) { ContentValues values = new ContentValues ( _NUM ) ; values . put ( ADDRESS , address ) ; if ( date != null ) { values . put ( DATE , date ) ; } values . put ( READ , read ? Integer . valueOf ( _NUM ) : Integer . valueOf ( _NUM ) ) ; values . put ( SUBJECT , subject ) ; values . put ( BODY , body ) ; if ( deliveryReport ) { values . put ( STATUS , STATUS_PENDING ) ; } if ( threadId != - _NUM ) { values . put ( THREAD_ID , threadId ) ; } return resolver . insert ( uri , values ) ; }
private void present ( ) { glUseProgram ( quadProgram ) ; glBindBuffer ( GL_ARRAY_BUFFER , vbo ) ; glActiveTexture ( GL_TEXTURE0 ) ; glBindTexture ( GL_TEXTURE_2D , tex ) ; glDrawArrays ( GL_TRIANGLES , _NUM , _NUM ) ; glActiveTexture ( GL_TEXTURE0 ) ; glBindTexture ( GL_TEXTURE_2D , _NUM ) ; glBindBuffer ( GL_ARRAY_BUFFER , _NUM ) ; glUseProgram ( _NUM ) ; }
public static Calendar next ( Calendar self ) { Calendar result = ( Calendar ) self . clone ( ) ; result . add ( Calendar . DAY_OF_YEAR , _NUM ) ; return result ; }
protected void angularObjectClientBind ( NotebookSocket conn , HashSet < String > userAndRoles , Notebook notebook , Message fromMessage ) throws Exception { String noteId = fromMessage . getType ( _STR ) ; String varName = fromMessage . getType ( _STR ) ; Object varValue = fromMessage . get ( _STR ) ; String paragraphId = fromMessage . getType ( _STR ) ; Note note = notebook . getNote ( noteId ) ; if ( paragraphId == null ) { throw new IllegalArgumentException ( _STR + _STR ) ; } if ( note != null ) { final InterpreterGroup interpreterGroup = findInterpreterGroupForParagraph ( note , paragraphId ) ; final AngularObjectRegistry registry = interpreterGroup . getAngularObjectRegistry ( ) ; if ( registry instanceof RemoteAngularObjectRegistry ) { RemoteAngularObjectRegistry remoteRegistry = ( RemoteAngularObjectRegistry ) registry ; pushAngularObjectToRemoteRegistry ( noteId , paragraphId , varName , varValue , remoteRegistry , interpreterGroup . getId ( ) , conn ) ; } else { pushAngularObjectToLocalRepo ( noteId , paragraphId , varName , varValue , registry , interpreterGroup . getId ( ) , conn ) ; } } }
public static < T > void removeAll ( List < T > list , List < Integer > indexes ) { if ( list == null || indexes == null ) { return ; } Collections . sort ( indexes , Collections . reverseOrder ( ) ) ; final int size = list . size ( ) ; for ( Integer index : indexes ) { if ( index >= _NUM && index < size ) { list . remove ( ( int ) index ) ; } } }
public CProjectTree ( final JFrame parent , final CDatabaseManager databaseManager ) { Preconditions . checkNotNull ( databaseManager , _STR ) ; m_treeModel = new CProjectTreeModel ( this ) ; setModel ( m_treeModel ) ; CProjectTreeDragHandlerInitializer . initialize ( parent , this , databaseManager ) ; addMouseListener ( new InternalMouseListener ( ) ) ; setScrollsOnExpand ( _BOOL ) ; setRootVisible ( _BOOL ) ; m_rootNode = new CRootNode ( this , databaseManager ) ; m_treeModel . setRoot ( m_rootNode ) ; setCellRenderer ( new IconNodeRenderer ( ) ) ; m_popup . add ( CActionProxy . proxy ( new CAddDatabaseAction ( this ) ) ) ; }
public boolean isObject ( ) { return typeString . startsWith ( OBJECT ) ; }
private float interpolate ( ) { long currTime = System . currentTimeMillis ( ) ; float elapsed = ( currTime - startTime ) / ZOOM_TIME ; elapsed = Math . min ( _NUM , elapsed ) ; return interpolator . getInterpolation ( elapsed ) ; }
private void autoRequestMods ( ) { if ( ! c . autoRequestModsEnabled ( ) ) { return ; } Set < String > joinedChannels = c . getJoinedChannels ( ) ; for ( String channel : joinedChannels ) { if ( ! modsAlreadyRequested . contains ( channel ) ) { LOGGER . info ( _STR + channel ) ; modsAlreadyRequested . add ( channel ) ; requestModsSilent ( channel ) ; return ; } } }
public void buildDepreciation ( ) { if ( ! isDepreciated ( ) ) { return ; } StringBuffer sb = new StringBuffer ( ) ; load ( get_TrxName ( ) ) ; MAssetAcct assetacct = getA_AssetAcct ( null , get_TrxName ( ) ) ; MDepreciation depreciation_C = MDepreciation . get ( getCtx ( ) , assetacct . getA_Depreciation_ID ( ) ) ; MDepreciation depreciation_F = MDepreciation . get ( getCtx ( ) , assetacct . getA_Depreciation_F_ID ( ) ) ; int offset_C = _NUM , offset_F = _NUM ; BigDecimal assetCost = getActualCost ( ) ; BigDecimal accumDep_C = getA_Accumulated_Depr ( _BOOL ) ; BigDecimal accumDep_F = getA_Accumulated_Depr ( _BOOL ) ; int lifePeriods_C = getUseLifeMonths ( _BOOL ) + offset_C ; int lifePeriods_F = getUseLifeMonths ( _BOOL ) + offset_F ; int lifePeriods = ( lifePeriods_C > lifePeriods_F ? lifePeriods_C : lifePeriods_F ) ; BigDecimal exp_C = Env . ZERO ; BigDecimal exp_F = Env . ZERO ; if ( CLogMgt . isLevelFine ( ) ) { sb . append ( _STR + getA_Current_Period ( ) + _STR + getAssetDepreciationDate ( ) + _STR ) ; sb . append ( _STR + offset_C + _STR + offset_F + _STR ) ; sb . append ( _STR + lifePeriods_C + _STR + lifePeriods_F + _STR + lifePeriods + _STR ) ; } truncDepreciation ( ) ; int A_Current_Period = getA_Current_Period ( ) ; for ( int currentPeriod = A_Current_Period , cnt = _NUM ; currentPeriod <= lifePeriods ; currentPeriod ++ , cnt ++ ) { exp_C = Env . ZERO ; exp_F = Env . ZERO ; String help = _STR + accumDep_C + _STR + accumDep_F + _STR ; if ( lifePeriods_C > currentPeriod || ! depreciation_C . requireLastPeriodAdjustment ( ) ) { setFiscal ( _BOOL ) ; exp_C = depreciation_C . invoke ( this , assetacct , currentPeriod , accumDep_C ) ; accumDep_C = accumDep_C . add ( exp_C ) ; } else if ( lifePeriods_C == currentPeriod ) { exp_C = assetCost . subtract ( accumDep_C ) ; accumDep_C = assetCost ; } if ( lifePeriods_F > currentPeriod || ! depreciation_F . requireLastPeriodAdjustment ( ) ) { setFiscal ( _BOOL ) ; exp_F = depreciation_F . invoke ( this , assetacct , currentPeriod , accumDep_F ) ; accumDep_F = accumDep_F . add ( exp_F ) ; } else if ( lifePeriods_F == currentPeriod ) { exp_F = assetCost . subtract ( accumDep_F ) ; accumDep_F = assetCost ; } help += _STR + exp_C + _STR + exp_F + _STR + accumDep_C + _STR + accumDep_F ; int months = _NUM ; months = months + ( currentPeriod - A_Current_Period ) ; Timestamp dateAcct = TimeUtil . getMonthLastDay ( TimeUtil . addMonths ( getDateAcct ( ) , months ) ) ; MDepreciationExp . createDepreciation ( this , currentPeriod , dateAcct , exp_C , exp_F , accumDep_C , accumDep_F , help , get_TrxName ( ) ) ; if ( CLogMgt . isLevelFine ( ) ) { String info = _STR + cnt + _STR + currentPeriod + _STR + lifePeriods_C + _STR + lifePeriods_F + _STR + exp_C + _STR + exp_F + _STR + accumDep_C + _STR + accumDep_F + _STR + dateAcct ; log . fine ( _STR + info + Env . NL + Env . NL ) ; sb . append ( info + Env . NL ) ; } } log . fine ( sb . toString ( ) ) ; m_buildDepreciation = _BOOL ; }
@ Override public boolean contains ( Object value ) { final Iterator < Comparable > iter = new StepIterator ( this , _NUM ) ; if ( value == null ) { return _BOOL ; } while ( iter . hasNext ( ) ) { if ( DefaultTypeTransformation . compareEqual ( value , iter . next ( ) ) ) return _BOOL ; } return _BOOL ; }
public synchronized void renameFile ( JDBCSequentialFile file , String newFileName ) throws SQLException { try { connection . setAutoCommit ( _BOOL ) ; renameFile . setString ( _NUM , newFileName ) ; renameFile . setInt ( _NUM , file . getId ( ) ) ; renameFile . executeUpdate ( ) ; connection . commit ( ) ; } catch ( SQLException e ) { connection . rollback ( ) ; throw e ; } }
public boolean hasNext ( ) throws IOException { dataInputStream . mark ( _NUM ) ; int val = dataInputStream . read ( ) ; dataInputStream . reset ( ) ; return val != - _NUM ; }
public static void handleErrorViolations ( Formatter formatter , long numErrors ) { ExitCode exitCode = formatter . getExitStatus ( numErrors ) ; if ( exitCode != ExitCode . SUCCESS ) { System . exit ( exitCode . ordinal ( ) ) ; } }
public void remove ( final Sensor sensor ) { Set < Sensor > oldSelection = new HashSet < Sensor > ( selection ) ; boolean rv = selection . remove ( sensor ) ; if ( rv ) { fireSelectionChanged ( oldSelection , selection ) ; } }
protected void printWay ( MapWay way , DefaultEntityViewInfo pInfo , boolean asArea ) { List < MapNode > nodes = getWayNodes ( way ) ; if ( nodes != null ) { boolean asOneway = _BOOL ; NameInfo textInfo = null ; if ( scale >= pInfo . minNameScale * displayFactor ) { asOneway = way . isOneway ( ) ; if ( way . getName ( ) != null && pInfo . nameColor != null ) { textInfo = new NameInfo ( way . getName ( ) , pInfo . nameColor , pInfo . printOrder ) ; } } printLine ( imageBdr , nodes , pInfo , asArea , asOneway , textInfo ) ; } }
@ Override public String toString ( ) { StringBuffer result = new StringBuffer ( ) ; for ( int i = _NUM ; i < data . length ; i ++ ) { result . append ( ( i == _NUM ? _STR : _STR ) + data [ i ] ) ; } return result . toString ( ) ; }
public Element fullPath ( ManagedObjectReference obj ) throws InvalidPropertyFaultMsg , RuntimeFaultFaultMsg , FinderException { List < ObjectContent > set = ancestrySet ( obj ) ; Map < MoRef , Element > childToParent = new HashMap < > ( ) ; for ( ObjectContent cont : set ) { MoRef key = new MoRef ( cont . getObj ( ) ) ; ManagedObjectReference parentRef = getParent ( cont ) ; Element parent ; if ( parentRef != null ) { parent = Element . make ( parentRef , getName ( cont ) ) ; } else { parent = Element . make ( cont . getObj ( ) , getName ( cont ) ) ; } childToParent . put ( key , parent ) ; } MoRef next = new MoRef ( obj ) ; List < String > path = new ArrayList < > ( ) ; while ( _BOOL ) { Element parent = childToParent . get ( next ) ; path . add ( parent . path ) ; if ( next . equals ( new MoRef ( parent . object ) ) ) { break ; } next = new MoRef ( parent . object ) ; } Collections . reverse ( path ) ; StringBuilder sb = new StringBuilder ( ) ; for ( String s : path ) { sb . append ( _STR ) ; sb . append ( s ) ; } return Element . make ( obj , sb . toString ( ) ) ; }
private boolean hasNextProxy ( ) { return nextProxyIndex < proxies . size ( ) ; }
private boolean noObjectWasClickedOn ( ) { boolean pickedNodeNull = ( pickedNode == null ) ; boolean cameraPicked = ( pickedNode instanceof PCamera ) ; return ( pickedNodeNull || cameraPicked ) ; }
@ Override public int hashCode ( ) { throw new UnsupportedOperationException ( _STR ) ; }
public Builder measurementMappings ( Map < String , String > measurementMappings ) { Map < String , Pattern > mappingsByPattern = new HashMap < String , Pattern > ( ) ; for ( Map . Entry < String , String > entry : measurementMappings . entrySet ( ) ) { try { final Pattern pattern = Pattern . compile ( entry . getValue ( ) ) ; mappingsByPattern . put ( entry . getKey ( ) , pattern ) ; } catch ( PatternSyntaxException e ) { throw new RuntimeException ( _STR + entry . getValue ( ) , e ) ; } } this . measurementMappings = mappingsByPattern ; return this ; }
private LinkedList < Diff > diff_bisectSplit ( String text1 , String text2 , int x , int y , long deadline ) { String text1a = text1 . substring ( _NUM , x ) ; String text2a = text2 . substring ( _NUM , y ) ; String text1b = text1 . substring ( x ) ; String text2b = text2 . substring ( y ) ; LinkedList < Diff > diffs = diff_main ( text1a , text2a , _BOOL , deadline ) ; LinkedList < Diff > diffsb = diff_main ( text1b , text2b , _BOOL , deadline ) ; diffs . addAll ( diffsb ) ; return diffs ; }
public static String validateCreditCardNumber ( String creditCardNumber , String creditCardType ) { if ( creditCardNumber == null || creditCardType == null ) return _STR ; String ccStartList = _STR ; String ccLengthList = _STR ; if ( creditCardType . equals ( X_C_Payment . CREDITCARDTYPE_MasterCard ) ) { ccStartList = _STR ; ccLengthList = _STR ; } else if ( creditCardType . equals ( X_C_Payment . CREDITCARDTYPE_Visa ) ) { ccStartList = _STR ; ccLengthList = _STR ; } else if ( creditCardType . equals ( X_C_Payment . CREDITCARDTYPE_Amex ) ) { ccStartList = _STR ; ccLengthList = _STR ; } else if ( creditCardType . equals ( X_C_Payment . CREDITCARDTYPE_Discover ) ) { ccStartList = _STR ; ccLengthList = _STR ; } else if ( creditCardType . equals ( X_C_Payment . CREDITCARDTYPE_Diners ) ) { ccStartList = _STR ; ccLengthList = _STR ; } else { ccStartList = _STR ; ccLengthList = _STR ; ccStartList += _STR ; ccLengthList += _STR ; ccStartList += _STR ; ccLengthList += _STR ; } String ccNumber = checkNumeric ( creditCardNumber ) ; int ccLength = ccNumber . length ( ) ; boolean ccLengthOK = _BOOL ; StringTokenizer st = new StringTokenizer ( ccLengthList , _STR , _BOOL ) ; while ( st . hasMoreTokens ( ) && ! ccLengthOK ) { int l = Integer . parseInt ( st . nextToken ( ) ) ; if ( ccLength == l ) ccLengthOK = _BOOL ; } if ( ! ccLengthOK ) { s_log . fine ( _STR + ccLength + _STR + ccLengthList ) ; return _STR ; } boolean ccIdentified = _BOOL ; st = new StringTokenizer ( ccStartList , _STR , _BOOL ) ; while ( st . hasMoreTokens ( ) && ! ccIdentified ) { if ( ccNumber . startsWith ( st . nextToken ( ) ) ) ccIdentified = _BOOL ; } if ( ! ccIdentified ) s_log . fine ( _STR + creditCardType + _STR + ccStartList ) ; String check = validateCreditCardNumber ( ccNumber ) ; if ( check . length ( ) != _NUM ) return check ; if ( ! ccIdentified ) return _STR ; return _STR ; }
public static void extract ( File zipFile , File destDir ) throws IOException { ZipFile zf = new ZipFile ( zipFile ) ; try { extract ( zf , destDir ) ; } finally { zf . close ( ) ; } }
public Config ( String file ) { this ( new File ( CONFIG_DIR , file . contains ( _STR ) ? file : file . concat ( _STR ) ) ) ; }
public GotoLineDialog ( JTextComponent text ) { super ( ActionUtils . getFrameFor ( text ) , _BOOL ) ; initComponents ( ) ; this . text = text ; setLocationRelativeTo ( text . getRootPane ( ) ) ; }
private static void attemptRetryOnException ( String logPrefix , Request < ? > request , VolleyError exception ) throws VolleyError { RetryPolicy retryPolicy = request . getRetryPolicy ( ) ; int oldTimeout = request . getTimeoutMs ( ) ; try { retryPolicy . retry ( exception ) ; } catch ( VolleyError e ) { request . addMarker ( String . format ( _STR , logPrefix , oldTimeout ) ) ; throw e ; } request . addMarker ( String . format ( _STR , logPrefix , oldTimeout ) ) ; }
protected void computeAxisValues ( float min , float max ) { float yMin = min ; float yMax = max ; int labelCount = mYAxis . getLabelCount ( ) ; double range = Math . abs ( yMax - yMin ) ; if ( labelCount == _NUM || range <= _NUM ) { mYAxis . mEntries = new float [ ] { } ; mYAxis . mEntryCount = _NUM ; return ; } double rawInterval = range / labelCount ; double interval = Utils . roundToNextSignificant ( rawInterval ) ; double intervalMagnitude = Math . pow ( _NUM , ( int ) Math . log10 ( interval ) ) ; int intervalSigDigit = ( int ) ( interval / intervalMagnitude ) ; if ( intervalSigDigit > _NUM ) { interval = Math . floor ( _NUM * intervalMagnitude ) ; } if ( mYAxis . isShowOnlyMinMaxEnabled ( ) ) { mYAxis . mEntryCount = _NUM ; mYAxis . mEntries = new float [ _NUM ] ; mYAxis . mEntries [ _NUM ] = yMin ; mYAxis . mEntries [ _NUM ] = yMax ; } else { double first = Math . ceil ( yMin / interval ) * interval ; double last = Utils . nextUp ( Math . floor ( yMax / interval ) * interval ) ; double f ; int i ; int n = _NUM ; for ( f = first ; f <= last ; f += interval ) { ++ n ; } mYAxis . mEntryCount = n ; if ( mYAxis . mEntries . length < n ) { mYAxis . mEntries = new float [ n ] ; } for ( f = first , i = _NUM ; i < n ; f += interval , ++ i ) { mYAxis . mEntries [ i ] = ( float ) f ; } } if ( interval < _NUM ) { mYAxis . mDecimals = ( int ) Math . ceil ( - Math . log10 ( interval ) ) ; } else { mYAxis . mDecimals = _NUM ; } }
private void sendRequestTeardown ( ) throws IOException { String request = _STR + mParameters . host + _STR + mParameters . port + mParameters . path + _STR + addHeaders ( ) ; Log . i ( TAG , request . substring ( _NUM , request . indexOf ( _STR ) ) ) ; mOutputStream . write ( request . getBytes ( _STR ) ) ; mOutputStream . flush ( ) ; }
public boolean parseMoreData ( final EncodedImage encodedImage ) { if ( mParserState == NOT_A_JPEG ) { return _BOOL ; } final int dataBufferSize = encodedImage . getSize ( ) ; if ( dataBufferSize <= mBytesParsed ) { return _BOOL ; } final InputStream bufferedDataStream = new PooledByteArrayBufferedInputStream ( encodedImage . getInputStream ( ) , mByteArrayPool . get ( BUFFER_SIZE ) , mByteArrayPool ) ; try { StreamUtil . skip ( bufferedDataStream , mBytesParsed ) ; return doParseMoreData ( bufferedDataStream ) ; } catch ( IOException ioe ) { Throwables . propagate ( ioe ) ; return _BOOL ; } finally { Closeables . closeQuietly ( bufferedDataStream ) ; } }
public void testSimpleEar ( ) throws Exception { final URL url = new URL ( _STR + System . getProperty ( _STR ) + _STR ) ; final String expected = _STR ; PingUtils . assertPingTrue ( url . getPath ( ) + _STR , expected , url , logger ) ; }
public int length ( ) { return this . filledLength ; }
@ Override public boolean equals ( Object o ) { if ( o instanceof Prefix ) { return value . equals ( ( ( Prefix ) o ) . value ) ; } return _BOOL ; }
private void notifyWifiState ( ) { synchronized ( mWifiMonitor ) { Log . v ( LOG_TAG , _STR ) ; mWifiMonitor . notify ( ) ; } }
private boolean arrayKeyValueExists ( String key , String value ) { if ( visitedPost . containsKey ( key ) ) { for ( String s : visitedPost . get ( key ) ) { if ( s . equals ( value ) ) { return _BOOL ; } } } return _BOOL ; }
public void removeDiagramChangeListener ( mxDiagramChangeListener listener ) { if ( diagramChangeListeners != null ) { diagramChangeListeners . remove ( listener ) ; } }
public static ConnectivityGrid ConnectivityGridFactory ( int key , double maxRange ) { if ( gridobjects . containsKey ( ( Integer ) key ) ) { return ( ConnectivityGrid ) gridobjects . get ( ( Integer ) key ) ; } else { ConnectivityGrid newgrid = new ConnectivityGrid ( ( int ) Math . ceil ( maxRange * cellSizeMultiplier ) ) ; gridobjects . put ( ( Integer ) key , newgrid ) ; return newgrid ; } }
public static String stripLeadingDollar ( String str ) { return ( str . charAt ( _NUM ) == _STR ) ? str . substring ( _NUM ) : str ; }
@ AfterClass public static void clearHostContext ( ) throws Exception { System . clearProperty ( _STR ) ; }
public PNormNormalization ( double p ) { if ( p <= _NUM || Double . isNaN ( p ) ) throw new IllegalArgumentException ( _STR + p ) ; this . p = p ; }
public void addSeparator ( ) { if ( log . isLoggable ( PlatformLogger . Level . FINER ) ) { log . finer ( _STR ) ; } }
@ Override public void start ( Stage stage ) throws Exception { CategoryDataset dataset = createDataset ( ) ; JFreeChart chart = createChart ( dataset ) ; ChartViewer viewer = new ChartViewer ( chart ) ; viewer . addChartMouseListener ( this ) ; stage . setScene ( new Scene ( viewer ) ) ; stage . setTitle ( _STR ) ; stage . setWidth ( _NUM ) ; stage . setHeight ( _NUM ) ; stage . show ( ) ; }
public synchronized void returnBuf ( byte [ ] buf ) { if ( buf == null || buf . length > mSizeLimit ) { return ; } mBuffersByLastUse . add ( buf ) ; int pos = Collections . binarySearch ( mBuffersBySize , buf , BUF_COMPARATOR ) ; if ( pos < _NUM ) { pos = - pos - _NUM ; } mBuffersBySize . add ( pos , buf ) ; mCurrentSize += buf . length ; trim ( ) ; }
@ Override public void acceptDataPoint ( ChartEvent e ) { if ( e . getReset ( ) ) { m_xCount = _NUM ; m_max = _NUM ; m_min = _NUM ; } if ( m_outputFrame != null ) { boolean refresh = _BOOL ; if ( e . getLegendText ( ) != null & e . getLegendText ( ) != m_legendText ) { m_legendText = e . getLegendText ( ) ; refresh = _BOOL ; } if ( e . getMin ( ) != m_min || e . getMax ( ) != m_max ) { m_oldMax = m_max ; m_oldMin = m_min ; m_max = e . getMax ( ) ; m_min = e . getMin ( ) ; refresh = _BOOL ; m_yScaleUpdate = _BOOL ; } if ( refresh ) { m_legendPanel . repaint ( ) ; m_scalePanel . repaint ( ) ; } acceptDataPoint ( e . getDataPoint ( ) ) ; } m_xCount ++ ; }
public void sub ( NamedRangeSet other ) { List < NamedRange > newRanges = new ArrayList < NamedRange > ( ) ; OUTER_LOOP : for ( NamedRange range : ranges ) { NamedRange thisRange = new NamedRange ( range . start , range . end , range . name ) ; for ( NamedRange otherRange : other . ranges ) { if ( otherRange . start <= thisRange . start && otherRange . end >= thisRange . end ) { continue OUTER_LOOP ; } if ( otherRange . end < thisRange . start || otherRange . start > thisRange . end ) { } else if ( otherRange . start <= thisRange . start ) { thisRange . start = otherRange . end + _NUM ; } else if ( otherRange . end >= thisRange . end ) { thisRange . end = otherRange . start - _NUM ; } else { newRanges . add ( new NamedRange ( thisRange . start , otherRange . start - _NUM , thisRange . name ) ) ; thisRange . start = otherRange . end + _NUM ; } } newRanges . add ( thisRange ) ; } ranges = newRanges ; }
private static Node locateAttrParent ( Element elem , Node attr ) { Node parent = null ; Attr check = elem . getAttributeNode ( attr . getNodeName ( ) ) ; if ( check == attr ) parent = elem ; if ( null == parent ) { for ( Node node = elem . getFirstChild ( ) ; null != node ; node = node . getNextSibling ( ) ) { if ( Node . ELEMENT_NODE == node . getNodeType ( ) ) { parent = locateAttrParent ( ( Element ) node , attr ) ; if ( null != parent ) break ; } } } return parent ; }
public static Tailer create ( File file , TailerListener listener , long delayMillis , boolean end , int bufSize ) { Tailer tailer = new Tailer ( file , listener , delayMillis , end , bufSize ) ; Thread thread = new Thread ( tailer ) ; thread . setDaemon ( _BOOL ) ; thread . start ( ) ; return tailer ; }
public static boolean isMacOs ( ) { return osName . indexOf ( _STR ) > - _NUM ; }
public int size ( ) { return values . size ( ) ; }
public DViewAsn1Dump ( JDialog parent , X509CRL crl ) throws Asn1Exception , IOException { super ( res . getString ( _STR ) ) ; this . crl = crl ; initComponents ( ) ; }
public static String rightTrim ( final String value ) { validate ( value , NULL_STRING_PREDICATE , NULL_STRING_MSG_SUPPLIER ) ; return value . replaceAll ( _STR , _STR ) ; }
public synchronized void putMessage ( Object obj ) { fifo . addElement ( obj ) ; numMessage ++ ; notifyAll ( ) ; }
public void dispose ( ) { if ( isDisposed ( ) ) { return ; } setDisposed ( _BOOL ) ; if ( ! menu ) { super . dispose ( ) ; } }
public double signed_distance ( PlaPointFloat p_point ) { double dx = point_b . v_x - point_a . v_x ; double dy = point_b . v_y - point_a . v_y ; double det = dy * ( p_point . v_x - point_a . v_x ) - dx * ( p_point . v_y - point_a . v_y ) ; double length = Math . sqrt ( dx * dx + dy * dy ) ; return det / length ; }
public static void expandReal ( String numberString , WordRelation wordRelation , Item tokenItem ) { int stringLength = numberString . length ( ) ; int position ; if ( numberString . charAt ( _NUM ) == _STR ) { wordRelation . addWord ( tokenItem , _STR ) ; expandReal ( numberString . substring ( _NUM , stringLength ) , wordRelation , tokenItem ) ; } else if ( numberString . charAt ( _NUM ) == _STR ) { wordRelation . addWord ( tokenItem , _STR ) ; expandReal ( numberString . substring ( _NUM , stringLength ) , wordRelation , tokenItem ) ; } else if ( ( position = numberString . indexOf ( _STR ) ) != - _NUM || ( position = numberString . indexOf ( _STR ) ) != - _NUM ) { expandReal ( numberString . substring ( _NUM , position ) , wordRelation , tokenItem ) ; wordRelation . addWord ( tokenItem , _STR ) ; expandReal ( numberString . substring ( position + _NUM ) , wordRelation , tokenItem ) ; } else if ( ( position = numberString . indexOf ( _STR ) ) != - _NUM ) { String beforeDot = numberString . substring ( _NUM , position ) ; if ( beforeDot . length ( ) > _NUM ) { expandReal ( beforeDot , wordRelation , tokenItem ) ; } wordRelation . addWord ( tokenItem , _STR ) ; String afterDot = numberString . substring ( position + _NUM ) ; if ( afterDot . length ( ) > _NUM ) { expandDigits ( afterDot , wordRelation , tokenItem ) ; } } else { expandNumber ( numberString , wordRelation , tokenItem ) ; } }
public static double [ ] ones ( int L ) { double m [ ] = new double [ L ] ; Arrays . fill ( m , _NUM ) ; return m ; }
private PermissionRequest submit ( ) { int showRationale = _NUM ; ArrayList < String > requests = new ArrayList < > ( ) ; for ( final String permission : mPermissions ) { if ( mActivity . checkSelfPermission ( permission ) != PackageManager . PERMISSION_GRANTED ) { requests . add ( permission ) ; if ( ActivityCompat . shouldShowRequestPermissionRationale ( mActivity , permission ) ) { showRationale ++ ; } } } mRequestCode = mRequestId . addAndGet ( _NUM ) ; if ( requests . isEmpty ( ) ) { if ( mCallback != null ) { mCallback . onPermissionsGranted ( ) ; } } else { if ( showRationale == _NUM ) { ActivityCompat . requestPermissions ( mActivity , mPermissions , mRequestCode ) ; } else { showRationale ( ) ; } } return this ; }
public void error ( XPathContext xctxt , String msg , Object [ ] args ) throws javax . xml . transform . TransformerException { java . lang . String fmsg = XSLMessages . createXPATHMessage ( msg , args ) ; if ( null != xctxt ) { ErrorListener eh = xctxt . getErrorListener ( ) ; TransformerException te = new TransformerException ( fmsg , this ) ; eh . fatalError ( te ) ; } }
public void testSettingANullDeployableProperty ( ) { Deployable deployableElement = new Deployable ( ) ; WAR war = new WAR ( _STR ) ; Map < String , String > properties = new HashMap < String , String > ( ) ; properties . put ( _STR , null ) ; deployableElement . setProperties ( properties ) ; deployableElement . setPropertiesOnDeployable ( war , createDefaultProject ( _STR , null ) ) ; assertEquals ( _STR , war . getContext ( ) ) ; }
private NaviLogger ( ) { }
public static DeleteSubCommandHandler create ( SubCommandArgumentParser parser , ManagedObjectPath < ? , ? > p , SetRelationDefinition < ? , ? > r ) throws ArgumentException { return new DeleteSubCommandHandler ( parser , p , r , p . child ( r ) ) ; }
protected void removeCycles ( ) { int visited [ ] = new int [ m_nodes . size ( ) ] ; for ( int i = _NUM ; i < graphMatrix . length ; i ++ ) { if ( visited [ i ] == _NUM ) { removeCycles2 ( i , visited ) ; visited [ i ] = _NUM ; } } }
public String toString ( ObjectMatrix3D matrix ) { StringBuffer buf = new StringBuffer ( ) ; boolean oldPrintShape = this . printShape ; this . printShape = _BOOL ; for ( int slice = _NUM ; slice < matrix . slices ( ) ; slice ++ ) { if ( slice != _NUM ) buf . append ( sliceSeparator ) ; buf . append ( toString ( matrix . viewSlice ( slice ) ) ) ; } this . printShape = oldPrintShape ; if ( printShape ) buf . insert ( _NUM , shape ( matrix ) + _STR ) ; return buf . toString ( ) ; }
int findAncestor ( XPathContext xctxt , XPath fromMatchPattern , XPath countMatchPattern , int context , ElemNumber namespaceContext ) throws javax . xml . transform . TransformerException { DTM dtm = xctxt . getDTM ( context ) ; while ( DTM . NULL != context ) { if ( null != fromMatchPattern ) { if ( fromMatchPattern . getMatchScore ( xctxt , context ) != XPath . MATCH_SCORE_NONE ) { break ; } } if ( null != countMatchPattern ) { if ( countMatchPattern . getMatchScore ( xctxt , context ) != XPath . MATCH_SCORE_NONE ) { break ; } } context = dtm . getParent ( context ) ; } return context ; }
public synchronized void kill ( ) { running = _BOOL ; closed = _BOOL ; try { STDIN . close ( ) ; } catch ( IOException e ) { } try { process . destroy ( ) ; } catch ( Exception e ) { } }
public final ByteBuffer encode ( CharBuffer in ) throws CharacterCodingException { int length = ( int ) ( in . remaining ( ) * averageBytesPerChar ) ; ByteBuffer out = ByteBuffer . allocate ( length ) ; reset ( ) ; while ( state != FLUSHED ) { CoderResult result = encode ( in , out , _BOOL ) ; if ( result == CoderResult . OVERFLOW ) { out = allocateMore ( out ) ; continue ; } else { checkCoderResult ( result ) ; } result = flush ( out ) ; if ( result == CoderResult . OVERFLOW ) { out = allocateMore ( out ) ; } else { checkCoderResult ( result ) ; } } out . flip ( ) ; return out ; }
public static Metrics create ( Map < String , String > dimensionMap ) { Map < String , String > map = Maps . newTreeMap ( ) ; map . putAll ( dimensionMap ) ; return new Metrics ( Collections . unmodifiableMap ( map ) ) ; }
protected Class < ? > resolveClass ( ObjectStreamClass classDesc ) throws IOException , ClassNotFoundException { Object annotation = readLocation ( ) ; String className = classDesc . getName ( ) ; ClassLoader defaultLoader = skipDefaultResolveClass ? null : latestUserDefinedLoader ( ) ; String codebase = null ; if ( ! useCodebaseOnly && annotation instanceof String ) { codebase = ( String ) annotation ; } try { return RMIClassLoader . loadClass ( codebase , className , defaultLoader ) ; } catch ( AccessControlException e ) { return checkSunClass ( className , e ) ; } catch ( ClassNotFoundException e ) { try { if ( Character . isLowerCase ( className . charAt ( _NUM ) ) && className . indexOf ( _STR ) == - _NUM ) { return super . resolveClass ( classDesc ) ; } } catch ( ClassNotFoundException e2 ) { } throw e ; } }
public IOUtils ( ) { super ( ) ; }
public boolean contains ( final CreatureRespawnPoint point ) { if ( point == null ) { return _BOOL ; } final IRPZone entityZone = point . getZone ( ) ; return zone . equals ( entityZone ) && shape . contains ( point . getX ( ) , point . getY ( ) ) ; }
public void add ( int i , byte [ ] buffer , int offset , int length ) { if ( _length + length > _capacity ) ensureCapacity ( _length + length ) ; System . arraycopy ( _buffer , i , _buffer , i + length , _length - i ) ; System . arraycopy ( buffer , offset , _buffer , i , length ) ; _length += length ; }
public boolean isUseAntiAlias ( ) { return useAntiAlias ; }
private void loadLevelFile ( String tableName , String columnName , String cubeName , String schemaName ) { String baseLocation = CarbonUtil . getCarbonStorePath ( schemaName , cubeName ) ; baseLocation = baseLocation + File . separator + schemaName + File . separator + cubeName ; if ( loadFolderList . size ( ) == _NUM ) { checkAndUpdateFolderList ( baseLocation ) ; } try { File [ ] filesArray = null ; for ( File loadFoler : loadFolderList ) { filesArray = getFilesArray ( loadFoler , tableName + _STR + columnName ) ; if ( null != filesArray ) { for ( int i = _NUM ; i < filesArray . length ; i ++ ) { readLevelFileAndUpdateCache ( filesArray [ i ] , tableName + _STR + columnName ) ; } } } } catch ( IOException e ) { LOGGER . error ( _STR ) ; } }
protected void doValidateZeroLongFile ( String path , String filename , long size , boolean checkContents ) { File inFile = new File ( path , filename ) ; DataInputStream inStream = null ; Log . i ( LOG_TAG , _STR + filename + _STR + path ) ; try { inStream = new DataInputStream ( new FileInputStream ( inFile ) ) ; if ( checkContents ) { for ( long i = _NUM ; i < size ; ++ i ) { if ( inStream . readLong ( ) != _NUM ) { fail ( _STR + filename ) ; } } } if ( inStream != null ) { inStream . close ( ) ; } Log . i ( LOG_TAG , _STR + filename + _STR + size + _STR ) ; } catch ( IOException e ) { fail ( _STR + inFile + _STR + e . toString ( ) ) ; } }
protected void write ( DataOutputStream stream ) throws Exception { Iterator < NBT_Tag > iter = elements . iterator ( ) ; while ( iter . hasNext ( ) ) { NBT_Tag ret = iter . next ( ) ; ret . save ( stream ) ; } TAG_End end = new TAG_End ( _STR ) ; end . save ( stream ) ; }
public String applyMask ( String mask , String value ) { return ( String ) getMaskOrGetCursorIndex ( mask , value , _NUM , _BOOL ) ; }
private void computeDuration ( ) { duration = System . currentTimeMillis ( ) - start ; total_duration += duration ; }
@ SuppressWarnings ( { _STR } ) @ Override public byte [ ] serialize ( List list ) { if ( list == null ) return null ; final int size = list . size ( ) ; final int [ ] valueIDs = new int [ size ] ; final byte [ ] [ ] valueBytes = new byte [ size ] [ ] ; int totalSize = _NUM + size * _NUM ; int i = _NUM ; Iterator iter = list . iterator ( ) ; while ( iter . hasNext ( ) ) { final Object value = iter . next ( ) ; Class < ? > valueClass = value . getClass ( ) ; int valueTypeID = EntityDefinitionManager . getIDBySerDerClass ( valueClass ) ; if ( valueTypeID == - _NUM ) { if ( value instanceof List ) { valueClass = List . class ; valueTypeID = EntityDefinitionManager . getIDBySerDerClass ( valueClass ) ; } else if ( value instanceof Map ) { valueClass = Map . class ; valueTypeID = EntityDefinitionManager . getIDBySerDerClass ( valueClass ) ; } else { throw new IllegalArgumentException ( _STR + valueClass . getName ( ) ) ; } } valueIDs [ i ] = valueTypeID ; final EntitySerDeser valueSerDer = EntityDefinitionManager . getSerDeser ( valueClass ) ; if ( valueSerDer == null ) { throw new IllegalArgumentException ( _STR + valueClass . getName ( ) ) ; } valueBytes [ i ] = valueSerDer . serialize ( value ) ; totalSize += valueBytes [ i ] . length ; ++ i ; } final byte [ ] result = new byte [ totalSize ] ; int offset = _NUM ; ByteUtil . intToBytes ( size , result , offset ) ; offset += _NUM ; for ( i = _NUM ; i < size ; ++ i ) { ByteUtil . intToBytes ( valueIDs [ i ] , result , offset ) ; offset += _NUM ; ByteUtil . intToBytes ( valueBytes [ i ] . length , result , offset ) ; offset += _NUM ; System . arraycopy ( valueBytes [ i ] , _NUM , result , offset , valueBytes [ i ] . length ) ; offset += valueBytes [ i ] . length ; } return result ; }
public int handleNITFHeader ( BinaryFile binFile ) { try { byte [ ] nitfArray = binFile . readBytes ( _NUM , _BOOL ) ; String nitf = new String ( nitfArray ) ; binFile . seek ( RPF_DATE_LOCATION ) ; nitfArray = binFile . readBytes ( _NUM , _BOOL ) ; nitf = new String ( nitfArray ) ; if ( nitf . equalsIgnoreCase ( _STR ) || nitf . equalsIgnoreCase ( _STR ) ) return _NUM ; binFile . seek ( RPF_DATE_LOCATION + TOC_NITF_HEADER_LENGTH ) ; nitfArray = binFile . readBytes ( _NUM , _BOOL ) ; nitf = new String ( nitfArray ) ; if ( nitf . equalsIgnoreCase ( _STR ) || nitf . equalsIgnoreCase ( _STR ) ) return TOC_NITF_HEADER_LENGTH ; binFile . seek ( RPF_DATE_LOCATION + FRAME_SHORT_NITF_HEADER_LENGTH ) ; nitfArray = binFile . readBytes ( _NUM , _BOOL ) ; nitf = new String ( nitfArray ) ; if ( nitf . equalsIgnoreCase ( _STR ) || nitf . equalsIgnoreCase ( _STR ) ) return FRAME_SHORT_NITF_HEADER_LENGTH ; binFile . seek ( RPF_DATE_LOCATION + FRAME_LONG_NITF_HEADER_LENGTH ) ; nitfArray = binFile . readBytes ( _NUM , _BOOL ) ; nitf = new String ( nitfArray ) ; if ( nitf . equalsIgnoreCase ( _STR ) || nitf . equalsIgnoreCase ( _STR ) ) return FRAME_LONG_NITF_HEADER_LENGTH ; } catch ( IOException e ) { Debug . error ( _STR + e ) ; return - _NUM ; } catch ( FormatException f ) { Debug . error ( _STR + f ) ; return - _NUM ; } return - _NUM ; }
public BufferedImage takeScreenshot ( ) { Debug . setDebugLevel ( _NUM ) ; File scrFile = driver . getScreenshotAs ( OutputType . FILE ) ; BufferedImage bufferedImage = null ; try { bufferedImage = ImageIO . read ( scrFile ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return bufferedImage ; }
private void pickCenterOverlap ( ScoutWidget [ ] list ) { for ( int i = _NUM ; i < list . length ; i ++ ) { ScoutWidget scoutWidget = list [ i ] ; float centerX = scoutWidget . getX ( ) + scoutWidget . getWidth ( ) / _NUM ; float centerY = scoutWidget . getY ( ) + scoutWidget . getHeight ( ) / _NUM ; for ( int j = _NUM ; j < list . length ; j ++ ) { if ( i == j ) continue ; ScoutWidget widget = list [ j ] ; if ( scoutWidget . isGuideline ( ) ) { continue ; } if ( ! widget . isGuideline ( ) && ScoutWidget . distance ( scoutWidget , widget ) > MAX_DIST_FOR_CENTER_OVERLAP ) { continue ; } if ( ! widget . isGuideline ( ) || widget . isVerticalGuideline ( ) ) { if ( Math . abs ( widget . getX ( ) - centerX ) < CENTER_ERROR ) { scoutWidget . setEdgeCentered ( _NUM , widget , Direction . WEST ) ; } if ( Math . abs ( widget . getX ( ) + widget . getWidth ( ) - centerX ) < CENTER_ERROR ) { scoutWidget . setEdgeCentered ( _NUM , widget , Direction . EAST ) ; } } if ( ! widget . isGuideline ( ) || widget . isHorizontalGuideline ( ) ) { if ( Math . abs ( widget . getY ( ) - centerY ) < CENTER_ERROR ) { scoutWidget . setEdgeCentered ( _NUM , widget , Direction . NORTH ) ; } if ( Math . abs ( widget . getY ( ) + widget . getHeight ( ) - centerY ) < CENTER_ERROR ) { scoutWidget . setEdgeCentered ( _NUM , widget , Direction . SOUTH ) ; } } } } }
